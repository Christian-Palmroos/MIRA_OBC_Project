
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a58  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  08019c18  08019c18  00029c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a490  0801a490  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  0801a490  0801a490  0002a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a498  0801a498  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a498  0801a498  0002a498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a49c  0801a49c  0002a49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0801a4a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c20  20000354  0801a7f4  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20002f74  0801a7f4  00032f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045d85  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006555  00000000  00000000  00076109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003428  00000000  00000000  0007c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000031c8  00000000  00000000  0007fa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035081  00000000  00000000  00082c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a9cb  00000000  00000000  000b7cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129135  00000000  00000000  000f269c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021b7d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f440  00000000  00000000  0021b824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0022ac64  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0022ad30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000354 	.word	0x20000354
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019c00 	.word	0x08019c00

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000358 	.word	0x20000358
 80001fc:	08019c00 	.word	0x08019c00

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fbd6 	bl	800273a <null_ptr_check>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d131      	bne.n	8000ffe <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d003      	beq.n	8000faa <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	729a      	strb	r2, [r3, #10]
 8000fa8:	e002      	b.n	8000fb0 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	729a      	strb	r2, [r3, #10]

	/* Read the chip-id of bmp3 sensor */
        //rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
	
        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000fb0:	f107 010e 	add.w	r1, r7, #14
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f826 	bl	800100a <bmp3_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b50      	cmp	r3, #80	; 0x50
 8000fce:	d002      	beq.n	8000fd6 <bmp3_init+0x5a>
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b60      	cmp	r3, #96	; 0x60
 8000fd4:	d111      	bne.n	8000ffa <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f9ae 	bl	800133e <bmp3_soft_reset>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fb4e 	bl	8001690 <get_calib_data>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000ff8:	e001      	b.n	8000ffe <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000ffa:	23f9      	movs	r3, #249	; 0xf9
 8000ffc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800100a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f001 fb8c 	bl	800273a <null_ptr_check>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001028:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800102c:	2b00      	cmp	r3, #0
 800102e:	d172      	bne.n	8001116 <bmp3_get_regs+0x10c>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06f      	beq.n	8001116 <bmp3_get_regs+0x10c>
    {
 8001036:	466b      	mov	r3, sp
 8001038:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7a9b      	ldrb	r3, [r3, #10]
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	18d1      	adds	r1, r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	3b01      	subs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	2300      	movs	r3, #0
 8001058:	4688      	mov	r8, r1
 800105a:	4699      	mov	r9, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001068:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001070:	2300      	movs	r3, #0
 8001072:	460c      	mov	r4, r1
 8001074:	461d      	mov	r5, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	00eb      	lsls	r3, r5, #3
 8001080:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001084:	00e2      	lsls	r2, r4, #3
 8001086:	1dcb      	adds	r3, r1, #7
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	ebad 0d03 	sub.w	sp, sp, r3
 8001090:	466b      	mov	r3, sp
 8001092:	3300      	adds	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d025      	beq.n	80010ea <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68dc      	ldr	r4, [r3, #12]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	7bf8      	ldrb	r0, [r7, #15]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	47a0      	blx	r4
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	e00d      	b.n	80010e0 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	7a9b      	ldrb	r3, [r3, #10]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	441a      	add	r2, r3
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	440b      	add	r3, r1
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	5c8a      	ldrb	r2, [r1, r2]
 80010d8:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3301      	adds	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ed      	bcc.n	80010c4 <bmp3_get_regs+0xba>
 80010e8:	e00b      	b.n	8001102 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68dc      	ldr	r4, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	7bf8      	ldrb	r0, [r7, #15]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001112:	46b5      	mov	sp, r6
    {
 8001114:	e002      	b.n	800111c <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 800111c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001120:	4618      	mov	r0, r3
 8001122:	372c      	adds	r7, #44	; 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800112a <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800112a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	466b      	mov	r3, sp
 800113c:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0059      	lsls	r1, r3, #1
 8001142:	460b      	mov	r3, r1
 8001144:	3b01      	subs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	2300      	movs	r3, #0
 800114a:	4688      	mov	r8, r1
 800114c:	4699      	mov	r9, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800115a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001162:	2300      	movs	r3, #0
 8001164:	460c      	mov	r4, r1
 8001166:	461d      	mov	r5, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	00eb      	lsls	r3, r5, #3
 8001172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	1dcb      	adds	r3, r1, #7
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	ebad 0d03 	sub.w	sp, sp, r3
 8001182:	466b      	mov	r3, sp
 8001184:	3300      	adds	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f001 fad6 	bl	800273a <null_ptr_check>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14c      	bne.n	8001234 <bmp3_set_regs+0x10a>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d049      	beq.n	8001234 <bmp3_set_regs+0x10a>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d046      	beq.n	8001234 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d040      	beq.n	800122e <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011bc:	2300      	movs	r3, #0
 80011be:	76bb      	strb	r3, [r7, #26]
 80011c0:	e00d      	b.n	80011de <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80011c2:	7ebb      	ldrb	r3, [r7, #26]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	7ebb      	ldrb	r3, [r7, #26]
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	440b      	add	r3, r1
 80011d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011d8:	7ebb      	ldrb	r3, [r7, #26]
 80011da:	3301      	adds	r3, #1
 80011dc:	76bb      	strb	r3, [r7, #26]
 80011de:	7ebb      	ldrb	r3, [r7, #26]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8ed      	bhi.n	80011c2 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d909      	bls.n	8001200 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 fa71 	bl	80016da <interleave_reg_addr>
                temp_len = len * 2;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e001      	b.n	8001204 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691c      	ldr	r4, [r3, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	7818      	ldrb	r0, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	47a0      	blx	r4
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001228:	23fe      	movs	r3, #254	; 0xfe
 800122a:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800122c:	e005      	b.n	800123a <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001232:	e002      	b.n	800123a <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	76fb      	strb	r3, [r7, #27]
 8001238:	e000      	b.n	800123c <bmp3_set_regs+0x112>
        if (len != 0)
 800123a:	bf00      	nop
    }

    return rslt;
 800123c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001240:	46b5      	mov	sp, r6
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800124c <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03a      	beq.n	80012d8 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	2006      	movs	r0, #6
 8001266:	f001 fa50 	bl	800270a <are_settings_changed>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fa96 	bl	80017a6 <set_pwr_ctrl_settings>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	20f0      	movs	r0, #240	; 0xf0
 8001282:	f001 fa42 	bl	800270a <are_settings_changed>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 fad7 	bl	8001844 <set_odr_filter_settings>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80012a0:	f001 fa33 	bl	800270a <are_settings_changed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fb36 	bl	8001920 <set_int_ctrl_settings>
 80012b4:	4603      	mov	r3, r0
 80012b6:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80012be:	f001 fa24 	bl	800270a <are_settings_changed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fba1 	bl	8001a14 <set_advance_settings>
 80012d2:	4603      	mov	r3, r0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e001      	b.n	80012dc <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01a      	beq.n	800132e <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 fa41 	bl	8002782 <get_sensor_status>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 fa7a 	bl	8002808 <get_int_status>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d108      	bne.n	8001332 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f001 fa9e 	bl	8002864 <get_err_status>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001346:	237e      	movs	r3, #126	; 0x7e
 8001348:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800134a:	23b6      	movs	r3, #182	; 0xb6
 800134c:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff fe57 	bl	800100a <bmp3_get_regs>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02d      	beq.n	80013c6 <bmp3_soft_reset+0x88>
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d129      	bne.n	80013c6 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001372:	f107 010d 	add.w	r1, r7, #13
 8001376:	f107 000e 	add.w	r0, r7, #14
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f7ff fed4 	bl	800112a <bmp3_set_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6852      	ldr	r2, [r2, #4]
 8001396:	4611      	mov	r1, r2
 8001398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139c:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800139e:	f107 010b 	add.w	r1, r7, #11
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fe2f 	bl	800100a <bmp3_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <bmp3_soft_reset+0x84>
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80013c2:	23fc      	movs	r3, #252	; 0xfc
 80013c4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f001 f9ac 	bl	800273a <null_ptr_check>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d139      	bne.n	8001462 <bmp3_set_op_mode+0x90>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d036      	beq.n	8001462 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80013fa:	f107 030d 	add.w	r3, r7, #13
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f838 	bl	8001476 <bmp3_get_op_mode>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d010      	beq.n	8001432 <bmp3_set_op_mode+0x60>
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f000 f8f7 	bl	800160c <put_device_to_sleep>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	4611      	mov	r1, r2
 800142c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001430:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d106      	bne.n	800144e <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f879 	bl	800153a <set_normal_mode>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
    {
 800144c:	e00c      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d109      	bne.n	8001468 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8a2 	bl	80015a0 <write_power_mode>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    {
 8001460:	e002      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e000      	b.n	800146a <bmp3_set_op_mode+0x98>
    {
 8001468:	bf00      	nop
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d011      	beq.n	80014aa <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	201b      	movs	r0, #27
 800148e:	f7ff fdbc 	bl	800100a <bmp3_get_regs>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	111b      	asrs	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e001      	b.n	80014ae <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	2300      	movs	r3, #0
 80014ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d021      	beq.n	8001528 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80014e4:	f107 0120 	add.w	r1, r7, #32
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2206      	movs	r2, #6
 80014ec:	2004      	movs	r0, #4
 80014ee:	f7ff fd8c 	bl	800100a <bmp3_get_regs>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80014f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc70 	bl	8001df0 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3318      	adds	r3, #24
 8001514:	f107 0110 	add.w	r1, r7, #16
 8001518:	7bf8      	ldrb	r0, [r7, #15]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f000 fca3 	bl	8001e66 <compensate_data>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001526:	e002      	b.n	800152e <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800152e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001532:	4618      	mov	r0, r3
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f888 	bl	800165c <validate_normal_mode_settings>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11d      	bne.n	8001594 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f820 	bl	80015a0 <write_power_mode>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800156c:	f107 010e 	add.w	r1, r7, #14
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff fd48 	bl	800100a <bmp3_get_regs>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8001590:	23fb      	movs	r3, #251	; 0xfb
 8001592:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80015aa:	231b      	movs	r3, #27
 80015ac:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80015b4:	7b78      	ldrb	r0, [r7, #13]
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	f7ff fd24 	bl	800100a <bmp3_get_regs>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80015ec:	f107 010c 	add.w	r1, r7, #12
 80015f0:	f107 000d 	add.w	r0, r7, #13
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f7ff fd97 	bl	800112a <bmp3_set_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001614:	231b      	movs	r3, #27
 8001616:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8001618:	f107 010d 	add.w	r1, r7, #13
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	201b      	movs	r0, #27
 8001622:	f7ff fcf2 	bl	800100a <bmp3_get_regs>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001638:	b2db      	uxtb	r3, r3
 800163a:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800163c:	f107 010d 	add.w	r1, r7, #13
 8001640:	f107 000e 	add.w	r0, r7, #14
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f7ff fd6f 	bl	800112a <bmp3_set_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa26 	bl	8001aba <get_odr_filter_settings>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa3a 	bl	8001af4 <validate_osr_and_odr_settings>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001698:	2331      	movs	r3, #49	; 0x31
 800169a:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80016b0:	f107 0108 	add.w	r1, r7, #8
 80016b4:	7ff8      	ldrb	r0, [r7, #31]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2215      	movs	r2, #21
 80016ba:	f7ff fca6 	bl	800100a <bmp3_get_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fc3f 	bl	8001f4c <parse_calib_data>

    return rslt;
 80016ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e015      	b.n	800171a <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	441a      	add	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	440b      	add	r3, r1
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	441a      	add	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	440b      	add	r3, r1
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3e5      	bcc.n	80016ee <interleave_reg_addr+0x14>
    }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	b2da      	uxtb	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3302      	adds	r3, #2
 8001782:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	105b      	asrs	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	b2da      	uxtb	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	709a      	strb	r2, [r3, #2]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80017b2:	231b      	movs	r3, #27
 80017b4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017b6:	7db8      	ldrb	r0, [r7, #22]
 80017b8:	f107 0115 	add.w	r1, r7, #21
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f7ff fc23 	bl	800100a <bmp3_get_regs>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d132      	bne.n	8001836 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80017da:	7d7b      	ldrb	r3, [r7, #21]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00f      	beq.n	8001822 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	b25a      	sxtb	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001822:	f107 0115 	add.w	r1, r7, #21
 8001826:	f107 0016 	add.w	r0, r7, #22
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc7c 	bl	800112a <bmp3_set_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <set_odr_filter_settings+0xd8>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	83bb      	strh	r3, [r7, #28]
 8001856:	2300      	movs	r3, #0
 8001858:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800185e:	f107 0118 	add.w	r1, r7, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	201c      	movs	r0, #28
 8001868:	f7ff fbcf 	bl	800100a <bmp3_get_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d14a      	bne.n	800190e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	2030      	movs	r0, #48	; 0x30
 800187c:	f000 ff45 	bl	800270a <are_settings_changed>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001886:	f107 0017 	add.w	r0, r7, #23
 800188a:	f107 0218 	add.w	r2, r7, #24
 800188e:	f107 011c 	add.w	r1, r7, #28
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4603      	mov	r3, r0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f9e1 	bl	8001c60 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	f000 ff32 	bl	800270a <are_settings_changed>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 80018ac:	f107 0217 	add.w	r2, r7, #23
 80018b0:	f107 0118 	add.w	r1, r7, #24
 80018b4:	f107 001c 	add.w	r0, r7, #28
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f000 fa29 	bl	8001d10 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	2040      	movs	r0, #64	; 0x40
 80018c2:	f000 ff22 	bl	800270a <are_settings_changed>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80018cc:	f107 0217 	add.w	r2, r7, #23
 80018d0:	f107 0118 	add.w	r1, r7, #24
 80018d4:	f107 001c 	add.w	r0, r7, #28
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f000 fa53 	bl	8001d84 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d104      	bne.n	80018f0 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	f000 f904 	bl	8001af4 <validate_osr_and_odr_settings>
 80018ec:	4603      	mov	r3, r0
 80018ee:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80018f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f107 0118 	add.w	r1, r7, #24
 8001900:	f107 001c 	add.w	r0, r7, #28
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f7ff fc10 	bl	800112a <bmp3_set_regs>
 800190a:	4603      	mov	r3, r0
 800190c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800190e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	08019c18 	.word	0x08019c18

08001920 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800192c:	2319      	movs	r3, #25
 800192e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001930:	7d78      	ldrb	r0, [r7, #21]
 8001932:	f107 0116 	add.w	r1, r7, #22
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f7ff fb66 	bl	800100a <bmp3_get_regs>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d15e      	bne.n	8001a08 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	3207      	adds	r2, #7
 8001952:	6810      	ldr	r0, [r2, #0]
 8001954:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	b25a      	sxtb	r2, r3
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b25b      	sxtb	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	b25a      	sxtb	r2, r3
 8001990:	7c7b      	ldrb	r3, [r7, #17]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80019f4:	f107 0116 	add.w	r1, r7, #22
 80019f8:	f107 0015 	add.w	r0, r7, #21
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f7ff fb93 	bl	800112a <bmp3_set_regs>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	320b      	adds	r2, #11
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001a2c:	231a      	movs	r3, #26
 8001a2e:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001a30:	7db8      	ldrb	r0, [r7, #22]
 8001a32:	f107 0115 	add.w	r1, r7, #21
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f7ff fae6 	bl	800100a <bmp3_get_regs>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d131      	bne.n	8001aae <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	7c3b      	ldrb	r3, [r7, #16]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001a7c:	7d7b      	ldrb	r3, [r7, #21]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001a9a:	f107 0115 	add.w	r1, r7, #21
 8001a9e:	f107 0016 	add.w	r0, r7, #22
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f7ff fb40 	bl	800112a <bmp3_set_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	201c      	movs	r0, #28
 8001ace:	f7ff fa9c 	bl	800100a <bmp3_get_regs>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1cda      	adds	r2, r3, #3
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe25 	bl	8001730 <parse_odr_filter_settings>

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b098      	sub	sp, #96	; 0x60
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001afc:	23ea      	movs	r3, #234	; 0xea
 8001afe:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <validate_osr_and_odr_settings+0x7c>)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	2248      	movs	r2, #72	; 0x48
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f015 f926 	bl	8016d60 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f83f 	bl	8001ba0 <calculate_press_meas_time>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b26:	4413      	add	r3, r2
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f864 	bl	8001c00 <calculate_temp_meas_time>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b44:	4413      	add	r3, r2
 8001b46:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	443b      	add	r3, r7
 8001b52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001b5a:	f000 f80b 	bl	8001b74 <verify_meas_time_and_odr_duration>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001b64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3760      	adds	r7, #96	; 0x60
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	08019c1c 	.word	0x08019c1c

08001b74 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d202      	bcs.n	8001b8c <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e001      	b.n	8001b90 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001b8c:	23fd      	movs	r3, #253	; 0xfd
 8001b8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	3203      	adds	r2, #3
 8001bb0:	6810      	ldr	r0, [r2, #0]
 8001bb2:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bc8:	f000 fd7a 	bl	80026c0 <pow_bmp3>
 8001bcc:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bf8 <calculate_press_meas_time+0x58>
 8001bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bdc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001bfc <calculate_press_meas_time+0x5c>
 8001be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	44fa0000 	.word	0x44fa0000
 8001bfc:	43c40000 	.word	0x43c40000

08001c00 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	3203      	adds	r2, #3
 8001c10:	6810      	ldr	r0, [r2, #0]
 8001c12:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	4618      	mov	r0, r3
 8001c24:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c28:	f000 fd4a 	bl	80026c0 <pow_bmp3>
 8001c2c:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c34:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c58 <calculate_temp_meas_time+0x58>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c5c <calculate_temp_meas_time+0x5c>
 8001c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001c4e:	693b      	ldr	r3, [r7, #16]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	44fa0000 	.word	0x44fa0000
 8001c5c:	439c8000 	.word	0x439c8000

08001c60 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	3203      	adds	r2, #3
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03f      	beq.n	8001d04 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d013      	beq.n	8001cb6 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	7d3b      	ldrb	r3, [r7, #20]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	7d7b      	ldrb	r3, [r7, #21]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	221c      	movs	r2, #28
 8001cf6:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
    }
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3303      	adds	r3, #3
 8001d22:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	78db      	ldrb	r3, [r3, #3]
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d902      	bls.n	8001d32 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2211      	movs	r2, #17
 8001d30:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f023 031f 	bic.w	r3, r3, #31
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25a      	sxtb	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	440b      	add	r3, r1
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	221d      	movs	r2, #29
 8001d6a:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	3203      	adds	r2, #3
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3303      	adds	r3, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	f023 030e 	bic.w	r3, r3, #14
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	f003 030e 	and.w	r3, r3, #14
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	440b      	add	r3, r1
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001df0:	b4b0      	push	{r4, r5, r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	7809      	ldrb	r1, [r1, #0]
 8001dfe:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	3101      	adds	r1, #1
 8001e04:	7809      	ldrb	r1, [r1, #0]
 8001e06:	0209      	lsls	r1, r1, #8
 8001e08:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	3102      	adds	r1, #2
 8001e0e:	7809      	ldrb	r1, [r1, #0]
 8001e10:	0409      	lsls	r1, r1, #16
 8001e12:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	6939      	ldr	r1, [r7, #16]
 8001e18:	4308      	orrs	r0, r1
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	4301      	orrs	r1, r0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4605      	mov	r5, r0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	3103      	adds	r1, #3
 8001e2e:	7809      	ldrb	r1, [r1, #0]
 8001e30:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	3104      	adds	r1, #4
 8001e36:	7809      	ldrb	r1, [r1, #0]
 8001e38:	0209      	lsls	r1, r1, #8
 8001e3a:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	3105      	adds	r1, #5
 8001e40:	7809      	ldrb	r1, [r1, #0]
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	2000      	movs	r0, #0
 8001e52:	460a      	mov	r2, r1
 8001e54:	4603      	mov	r3, r0
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bcb0      	pop	{r4, r5, r7}
 8001e64:	4770      	bx	lr

08001e66 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05a      	beq.n	8001f36 <compensate_data+0xd0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d057      	beq.n	8001f36 <compensate_data+0xd0>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d054      	beq.n	8001f36 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d115      	bne.n	8001ebe <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa1f 	bl	80022dc <compensate_temperature>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d148      	bne.n	8001f3c <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3308      	adds	r3, #8
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fa8c 	bl	80023d0 <compensate_pressure>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ebc:	e03e      	b.n	8001f3c <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d116      	bne.n	8001ef2 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa06 	bl	80022dc <compensate_temperature>
            comp_data->temperature = 0;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa72 	bl	80023d0 <compensate_pressure>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ef0:	e024      	b.n	8001f3c <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d10f      	bne.n	8001f18 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f9ec 	bl	80022dc <compensate_temperature>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f16:	e011      	b.n	8001f3c <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f34:	e002      	b.n	8001f3c <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f36:	23ff      	movs	r3, #255	; 0xff
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e000      	b.n	8001f3e <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f3c:	bf00      	nop
    }

    return rslt;
 8001f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3390      	adds	r3, #144	; 0x90
 8001f5a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3318      	adds	r3, #24
 8001f60:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4ba4      	ldr	r3, [pc, #656]	; (80021f8 <parse_calib_data+0x2ac>)
 8001f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fad2 	bl	8000534 <__aeabi_ui2d>
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe fc72 	bl	800087c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	6939      	ldr	r1, [r7, #16]
 8001f9e:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <parse_calib_data+0x2b0>)
 8001fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fab1 	bl	8000534 <__aeabi_ui2d>
 8001fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd6:	f7fe fc51 	bl	800087c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b82      	ldr	r3, [pc, #520]	; (8002200 <parse_calib_data+0x2b4>)
 8001ff6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa7 	bl	8000554 <__aeabi_i2d>
 8002006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200a:	f7fe fc37 	bl	800087c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3306      	adds	r3, #6
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3305      	adds	r3, #5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21a      	sxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <parse_calib_data+0x2b8>)
 8002038:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002042:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa84 	bl	8000554 <__aeabi_i2d>
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe fc14 	bl	800087c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3308      	adds	r3, #8
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3307      	adds	r3, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21a      	sxth	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <parse_calib_data+0x2bc>)
 800207e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002088:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa61 	bl	8000554 <__aeabi_i2d>
 8002092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002096:	f7fe fbf1 	bl	800087c <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3309      	adds	r3, #9
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <parse_calib_data+0x2c0>)
 80020b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa47 	bl	8000554 <__aeabi_i2d>
 80020c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ca:	f7fe fbd7 	bl	800087c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	330a      	adds	r3, #10
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <parse_calib_data+0x2c4>)
 80020ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa2d 	bl	8000554 <__aeabi_i2d>
 80020fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fe:	f7fe fbbd 	bl	800087c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	330c      	adds	r3, #12
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	330b      	adds	r3, #11
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21b      	sxth	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002130:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	899b      	ldrh	r3, [r3, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9fb 	bl	8000534 <__aeabi_ui2d>
 800213e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002142:	f7fe fb9b 	bl	800087c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330e      	adds	r3, #14
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330d      	adds	r3, #13
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <parse_calib_data+0x2c8>)
 8002172:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	89db      	ldrh	r3, [r3, #14]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9da 	bl	8000534 <__aeabi_ui2d>
 8002180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002184:	f7fe fb7a 	bl	800087c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	330f      	adds	r3, #15
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25a      	sxtb	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <parse_calib_data+0x2cc>)
 80021a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9d0 	bl	8000554 <__aeabi_i2d>
 80021b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b8:	f7fe fb60 	bl	800087c <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3310      	adds	r3, #16
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25a      	sxtb	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <parse_calib_data+0x2d0>)
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b6 	bl	8000554 <__aeabi_i2d>
 80021e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ec:	f7fe fb46 	bl	800087c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	e013      	b.n	8002220 <parse_calib_data+0x2d4>
 80021f8:	3f700000 	.word	0x3f700000
 80021fc:	41d00000 	.word	0x41d00000
 8002200:	42f00000 	.word	0x42f00000
 8002204:	41300000 	.word	0x41300000
 8002208:	41c00000 	.word	0x41c00000
 800220c:	41f00000 	.word	0x41f00000
 8002210:	42400000 	.word	0x42400000
 8002214:	40500000 	.word	0x40500000
 8002218:	40700000 	.word	0x40700000
 800221c:	40e00000 	.word	0x40e00000
 8002220:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3312      	adds	r3, #18
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3311      	adds	r3, #17
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21a      	sxth	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <parse_calib_data+0x38c>)
 8002244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f980 	bl	8000554 <__aeabi_i2d>
 8002254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002258:	f7fe fb10 	bl	800087c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3313      	adds	r3, #19
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b25a      	sxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <parse_calib_data+0x38c>)
 8002278:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f966 	bl	8000554 <__aeabi_i2d>
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fe faf6 	bl	800087c <__aeabi_ddiv>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3314      	adds	r3, #20
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80022ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94b 	bl	8000554 <__aeabi_i2d>
 80022be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c2:	f7fe fadb 	bl	800087c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	42f00000 	.word	0x42f00000

080022dc <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80022f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022fc:	f7fe f966 	bl	80005cc <__aeabi_l2d>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ffd7 	bl	80002b8 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231c:	f7fe f984 	bl	8000628 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002330:	f7fe f97a 	bl	8000628 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002342:	f7fe f971 	bl	8000628 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002352:	f7fd ffb3 	bl	80002bc <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <compensate_temperature+0xec>)
 800236c:	f7fe fbce 	bl	8000b0c <__aeabi_dcmplt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <compensate_temperature+0xec>)
 800237e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8002382:	2303      	movs	r3, #3
 8002384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <compensate_temperature+0xf0>)
 8002394:	f7fe fbd8 	bl	8000b48 <__aeabi_dcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <compensate_temperature+0xf0>)
 80023a6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 80023aa:	2304      	movs	r3, #4
 80023ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80023bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3730      	adds	r7, #48	; 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	c0440000 	.word	0xc0440000
 80023cc:	40554000 	.word	0x40554000

080023d0 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b096      	sub	sp, #88	; 0x58
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023f2:	f7fe f919 	bl	8000628 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80023fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002400:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800240a:	2002      	movs	r0, #2
 800240c:	eeb0 0a47 	vmov.f32	s0, s14
 8002410:	eef0 0a67 	vmov.f32	s1, s15
 8002414:	f000 f954 	bl	80026c0 <pow_bmp3>
 8002418:	ee10 3a10 	vmov	r3, s0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8ab 	bl	8000578 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fe f8fd 	bl	8000628 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002442:	2003      	movs	r0, #3
 8002444:	eeb0 0a47 	vmov.f32	s0, s14
 8002448:	eef0 0a67 	vmov.f32	s1, s15
 800244c:	f000 f938 	bl	80026c0 <pow_bmp3>
 8002450:	ee10 3a10 	vmov	r3, s0
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f88f 	bl	8000578 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4620      	mov	r0, r4
 8002460:	4629      	mov	r1, r5
 8002462:	f7fe f8e1 	bl	8000628 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002478:	f7fd ff20 	bl	80002bc <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002488:	f7fd ff18 	bl	80002bc <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002494:	f7fd ff12 	bl	80002bc <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80024ac:	f7fe f8bc 	bl	8000628 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80024b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ba:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024c4:	2002      	movs	r0, #2
 80024c6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ca:	eef0 0a67 	vmov.f32	s1, s15
 80024ce:	f000 f8f7 	bl	80026c0 <pow_bmp3>
 80024d2:	ee10 3a10 	vmov	r3, s0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f84e 	bl	8000578 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	f7fe f8a0 	bl	8000628 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024fc:	2003      	movs	r0, #3
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	f000 f8db 	bl	80026c0 <pow_bmp3>
 800250a:	ee10 3a10 	vmov	r3, s0
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f832 	bl	8000578 <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fe f884 	bl	8000628 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe f843 	bl	80005bc <__aeabi_ul2d>
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002544:	f7fd feba 	bl	80002bc <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002554:	f7fd feb2 	bl	80002bc <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002564:	f7fd feaa 	bl	80002bc <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fe f85a 	bl	8000628 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe f819 	bl	80005bc <__aeabi_ul2d>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	2002      	movs	r0, #2
 8002590:	ec43 2b10 	vmov	d0, r2, r3
 8002594:	f000 f894 	bl	80026c0 <pow_bmp3>
 8002598:	ee10 3a10 	vmov	r3, s0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ffeb 	bl	8000578 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80025bc:	f7fe f834 	bl	8000628 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fd fe78 	bl	80002bc <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 80025d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025dc:	f7fe f824 	bl	8000628 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fd ffe3 	bl	80005bc <__aeabi_ul2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	2003      	movs	r0, #3
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f000 f85e 	bl	80026c0 <pow_bmp3>
 8002604:	ee10 3a10 	vmov	r3, s0
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffb5 	bl	8000578 <__aeabi_f2d>
 800260e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002610:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002614:	f7fe f808 	bl	8000628 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002620:	f7fd fe4c 	bl	80002bc <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800262c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002634:	f7fd fe42 	bl	80002bc <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002640:	f7fd fe3c 	bl	80002bc <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800264c:	a318      	add	r3, pc, #96	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002656:	f7fe fa59 	bl	8000b0c <__aeabi_dcmplt>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002660:	a313      	add	r3, pc, #76	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 800266a:	2305      	movs	r3, #5
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002670:	a311      	add	r3, pc, #68	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800267a:	f7fe fa65 	bl	8000b48 <__aeabi_dcmpgt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8002684:	a30c      	add	r3, pc, #48	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 800268e:	2306      	movs	r3, #6
 8002690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800269a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800269e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3758      	adds	r7, #88	; 0x58
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40dd4c00 	.word	0x40dd4c00
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40fe8480 	.word	0x40fe8480

080026c0 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80026ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026d2:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80026d4:	e00e      	b.n	80026f4 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80026d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026da:	f7fe fa7d 	bl	8000bd8 <__aeabi_d2f>
 80026de:	ee07 0a10 	vmov	s14, r0
 80026e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ed      	bne.n	80026d6 <pow_bmp3+0x16>
    }

    return pow_output;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	ee07 3a90 	vmov	s15, r3
}
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e001      	b.n	800272c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <null_ptr_check+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <null_ptr_check+0x2e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <null_ptr_check+0x2e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800278c:	2303      	movs	r3, #3
 800278e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002790:	f107 010d 	add.w	r1, r7, #13
 8002794:	7bb8      	ldrb	r0, [r7, #14]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	f7fe fc36 	bl	800100a <bmp3_get_regs>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d128      	bne.n	80027fc <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	111b      	asrs	r3, r3, #4
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	115b      	asrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80027ca:	7b7b      	ldrb	r3, [r7, #13]
 80027cc:	119b      	asrs	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80027da:	2310      	movs	r3, #16
 80027dc:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80027de:	f107 010d 	add.w	r1, r7, #13
 80027e2:	7bb8      	ldrb	r0, [r7, #14]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f7fe fc0f 	bl	800100a <bmp3_get_regs>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8002812:	f107 010e 	add.w	r1, r7, #14
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	2011      	movs	r0, #17
 800281c:	f7fe fbf5 	bl	800100a <bmp3_get_regs>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	105b      	asrs	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	10db      	asrs	r3, r3, #3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800286e:	f107 010e 	add.w	r1, r7, #14
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f7fe fbc7 	bl	800100a <bmp3_get_regs>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d115      	bne.n	80028b4 <get_err_status+0x50>
    {
        status->err.cmd = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	105b      	asrs	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	721a      	strb	r2, [r3, #8]
        status->err.fatal = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	109b      	asrs	r3, r3, #2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	719a      	strb	r2, [r3, #6]
    }

    return rslt;
 80028b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <bmp3_check_rslt>:
extern volatile uint8_t int2_flag;

static uint8_t dev_addr = 0;

void bmp3_check_rslt(const char api_name[], int8_t rslt)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 80028cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d0:	3307      	adds	r3, #7
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d839      	bhi.n	800294a <bmp3_check_rslt+0x8a>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <bmp3_check_rslt+0x1c>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	08002923 	.word	0x08002923
 80028e0:	08002919 	.word	0x08002919
 80028e4:	0800292d 	.word	0x0800292d
 80028e8:	0800294b 	.word	0x0800294b
 80028ec:	0800294b 	.word	0x0800294b
 80028f0:	0800290f 	.word	0x0800290f
 80028f4:	08002905 	.word	0x08002905
 80028f8:	08002955 	.word	0x08002955
 80028fc:	08002937 	.word	0x08002937
 8002900:	08002941 	.word	0x08002941

            // Do nothing
            break;
        case BMP3_E_NULL_PTR:
            //PDEBUG("API [%s] Error [%d] : Null pointer\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR1\n", 7);
 8002904:	2107      	movs	r1, #7
 8002906:	4816      	ldr	r0, [pc, #88]	; (8002960 <bmp3_check_rslt+0xa0>)
 8002908:	f013 fcd2 	bl	80162b0 <CDC_Transmit_FS>
            break;
 800290c:	e023      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_COMM_FAIL:
        	//PDEBUG("API [%s] Error [%d] : Communication failure\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR2\n", 6);
 800290e:	2106      	movs	r1, #6
 8002910:	4814      	ldr	r0, [pc, #80]	; (8002964 <bmp3_check_rslt+0xa4>)
 8002912:	f013 fccd 	bl	80162b0 <CDC_Transmit_FS>
        	break;
 8002916:	e01e      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_INVALID_LEN:
        	//PDEBUG("API [%s] Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR3\n", 6);
 8002918:	2106      	movs	r1, #6
 800291a:	4813      	ldr	r0, [pc, #76]	; (8002968 <bmp3_check_rslt+0xa8>)
 800291c:	f013 fcc8 	bl	80162b0 <CDC_Transmit_FS>
        	break;
 8002920:	e019      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_DEV_NOT_FOUND:
        	//PDEBUG("API [%s] Error [%d] : Device not found\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR4\n", 6);
 8002922:	2106      	movs	r1, #6
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <bmp3_check_rslt+0xac>)
 8002926:	f013 fcc3 	bl	80162b0 <CDC_Transmit_FS>
        	break;
 800292a:	e014      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_CONFIGURATION_ERR:
        	//PDEBUG("API [%s] Error [%d] : Configuration Error\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR5\n", 6);
 800292c:	2106      	movs	r1, #6
 800292e:	4810      	ldr	r0, [pc, #64]	; (8002970 <bmp3_check_rslt+0xb0>)
 8002930:	f013 fcbe 	bl	80162b0 <CDC_Transmit_FS>
        	break;
 8002934:	e00f      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_SENSOR_NOT_ENABLED:
        	//PDEBUG("API [%s] Error [%d] : Warning when Sensor not enabled\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR6\n", 6);
 8002936:	2106      	movs	r1, #6
 8002938:	480e      	ldr	r0, [pc, #56]	; (8002974 <bmp3_check_rslt+0xb4>)
 800293a:	f013 fcb9 	bl	80162b0 <CDC_Transmit_FS>
        	break;
 800293e:	e00a      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_INVALID_FIFO_REQ_FRAME_CNT:
        	//PDEBUG("API [%s] Error [%d] : Warning when Fifo watermark level is not in limit\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR7\n", 6);
 8002940:	2106      	movs	r1, #6
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <bmp3_check_rslt+0xb8>)
 8002944:	f013 fcb4 	bl	80162b0 <CDC_Transmit_FS>
        	break;
 8002948:	e005      	b.n	8002956 <bmp3_check_rslt+0x96>
        default:
        	//PDEBUG("API [%s] Error [%d] : Unknown error code\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR8\n", 6);
 800294a:	2106      	movs	r1, #6
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <bmp3_check_rslt+0xbc>)
 800294e:	f013 fcaf 	bl	80162b0 <CDC_Transmit_FS>
        	break;
 8002952:	e000      	b.n	8002956 <bmp3_check_rslt+0x96>
            break;
 8002954:	bf00      	nop
    }
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	08019c64 	.word	0x08019c64
 8002964:	08019c6c 	.word	0x08019c6c
 8002968:	08019c74 	.word	0x08019c74
 800296c:	08019c7c 	.word	0x08019c7c
 8002970:	08019c84 	.word	0x08019c84
 8002974:	08019c8c 	.word	0x08019c8c
 8002978:	08019c94 	.word	0x08019c94
 800297c:	08019c9c 	.word	0x08019c9c

08002980 <bmp3_interface_init>:

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMP3_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

	if(bmp3 != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <bmp3_interface_init+0x42>
	{
		/* Bus configuration : I2C */
		if (intf == BMP3_I2C_INTF)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10b      	bne.n	80029b4 <bmp3_interface_init+0x34>
		{
			//PDEBUG("I2C Interface\n");
			dev_addr = BMP3_ADDR_I2C_SEC;
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <bmp3_interface_init+0x58>)
 800299e:	2277      	movs	r2, #119	; 0x77
 80029a0:	701a      	strb	r2, [r3, #0]
			bmp3->read = SensorAPI_I2Cx_Read;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <bmp3_interface_init+0x5c>)
 80029a6:	60da      	str	r2, [r3, #12]
			bmp3->write = SensorAPI_I2Cx_Write;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <bmp3_interface_init+0x60>)
 80029ac:	611a      	str	r2, [r3, #16]
			bmp3->intf = BMP3_I2C_INTF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	721a      	strb	r2, [r3, #8]
			bmp3->read = SensorAPI_SPIx_Read;
			bmp3->write = SensorAPI_SPIx_Write;
			bmp3->intf = BMP3_SPI_INTF;
		}*/

		bmp3->delay_us = bmp3_delay_us;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <bmp3_interface_init+0x64>)
 80029b8:	615a      	str	r2, [r3, #20]
		bmp3->intf_ptr = &dev_addr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <bmp3_interface_init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e001      	b.n	80029c6 <bmp3_interface_init+0x46>
	}
	else
	{
		rslt = BMP3_E_NULL_PTR;
 80029c2:	23ff      	movs	r3, #255	; 0xff
 80029c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000370 	.word	0x20000370
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a75 	.word	0x08002a75
 80029e4:	080029e9 	.word	0x080029e9

080029e8 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 80029f2:	e008      	b.n	8002a06 <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e002      	b.n	8002a00 <bmp3_delay_us+0x18>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b53      	cmp	r3, #83	; 0x53
 8002a04:	d9f9      	bls.n	80029fa <bmp3_delay_us+0x12>
	while(period--)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f1      	bne.n	80029f4 <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8002a40:	f107 020f 	add.w	r2, r7, #15
 8002a44:	8ab9      	ldrh	r1, [r7, #20]
 8002a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a50:	f003 ff2e 	bl	80068b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	8ab9      	ldrh	r1, [r7, #20]
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a62:	f004 f819 	bl	8006a98 <HAL_I2C_Master_Receive>
	return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000574 	.word	0x20000574

08002a74 <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	4613      	mov	r3, r2
 8002a84:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <SensorAPI_I2Cx_Write+0x58>)
 8002aa2:	f014 f95d 	bl	8016d60 <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8ab9      	ldrh	r1, [r7, #20]
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <SensorAPI_I2Cx_Write+0x5c>)
 8002ab8:	f003 fefa 	bl	80068b0 <HAL_I2C_Master_Transmit>
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000374 	.word	0x20000374
 8002acc:	20000375 	.word	0x20000375
 8002ad0:	20000574 	.word	0x20000574

08002ad4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <BSP_I2C2_Init+0x74>)
 8002ae2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	4918      	ldr	r1, [pc, #96]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002aec:	600a      	str	r2, [r1, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d122      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8002af2:	4814      	ldr	r0, [pc, #80]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002af4:	f004 fbfb 	bl	80072ee <HAL_I2C_GetState>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11c      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8002afe:	4811      	ldr	r0, [pc, #68]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b00:	f000 f8fe 	bl	8002d00 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002b0a:	480e      	ldr	r0, [pc, #56]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b0c:	f000 f8b4 	bl	8002c78 <MX_I2C2_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b16:	f06f 0307 	mvn.w	r3, #7
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e00c      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4808      	ldr	r0, [pc, #32]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b22:	f004 ff1f 	bl	8007964 <HAL_I2CEx_ConfigAnalogFilter>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b2c:	f06f 0307 	mvn.w	r3, #7
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	e001      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000574 	.word	0x20000574
 8002b48:	40005800 	.word	0x40005800
 8002b4c:	200005c8 	.word	0x200005c8

08002b50 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d014      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b76:	f000 f923 	bl	8002dc0 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8002b7a:	4808      	ldr	r0, [pc, #32]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b7c:	f003 fe69 	bl	8006852 <HAL_I2C_DeInit>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002b86:	f06f 0307 	mvn.w	r3, #7
 8002b8a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002b8c:	687b      	ldr	r3, [r7, #4]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200005c8 	.word	0x200005c8
 8002b9c:	20000574 	.word	0x20000574

08002ba0 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	60ba      	str	r2, [r7, #8]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	81fb      	strh	r3, [r7, #14]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	81bb      	strh	r3, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002bba:	89ba      	ldrh	r2, [r7, #12]
 8002bbc:	89f9      	ldrh	r1, [r7, #14]
 8002bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	480c      	ldr	r0, [pc, #48]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bd0:	f004 f858 	bl	8006c84 <HAL_I2C_Mem_Write>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bdc:	f004 fb95 	bl	800730a <HAL_I2C_GetError>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d103      	bne.n	8002bee <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002be6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e002      	b.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002bee:	f06f 0303 	mvn.w	r3, #3
 8002bf2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002bf4:	697b      	ldr	r3, [r7, #20]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000574 	.word	0x20000574

08002c04 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	81fb      	strh	r3, [r7, #14]
 8002c12:	460b      	mov	r3, r1
 8002c14:	81bb      	strh	r3, [r7, #12]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002c1e:	89ba      	ldrh	r2, [r7, #12]
 8002c20:	89f9      	ldrh	r1, [r7, #14]
 8002c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2301      	movs	r3, #1
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c34:	f004 f93a 	bl	8006eac <HAL_I2C_Mem_Read>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c40:	f004 fb63 	bl	800730a <HAL_I2C_GetError>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d103      	bne.n	8002c52 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002c4a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e002      	b.n	8002c58 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002c52:	f06f 0303 	mvn.w	r3, #3
 8002c56:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002c58:	697b      	ldr	r3, [r7, #20]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000574 	.word	0x20000574

08002c68 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002c6c:	f003 f898 	bl	8005da0 <HAL_GetTick>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <MX_I2C2_Init+0x80>)
 8002c88:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <MX_I2C2_Init+0x84>)
 8002c8e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f003 fd3a 	bl	8006734 <HAL_I2C_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f004 fe49 	bl	8007964 <HAL_I2CEx_ConfigAnalogFilter>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002cdc:	2100      	movs	r1, #0
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f004 fe8b 	bl	80079fa <HAL_I2CEx_ConfigDigitalFilter>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40005800 	.word	0x40005800
 8002cfc:	307075b1 	.word	0x307075b1

08002d00 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0ae      	sub	sp, #184	; 0xb8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	2294      	movs	r2, #148	; 0x94
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f014 f833 	bl	8016d7c <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4618      	mov	r0, r3
 8002d24:	f007 f858 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002d60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4815      	ldr	r0, [pc, #84]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d68:	f003 fa16 	bl	8006198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2312      	movs	r3, #18
 8002d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002d86:	2304      	movs	r3, #4
 8002d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d90:	4619      	mov	r1, r3
 8002d92:	480a      	ldr	r0, [pc, #40]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d94:	f003 fa00 	bl	8006198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002db0:	bf00      	nop
 8002db2:	37b8      	adds	r7, #184	; 0xb8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	48000400 	.word	0x48000400

08002dc0 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002dd2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dd8:	4806      	ldr	r0, [pc, #24]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002dda:	f003 fb6f 	bl	80064bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de2:	4804      	ldr	r0, [pc, #16]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002de4:	f003 fb6a 	bl	80064bc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000400 	.word	0x48000400

08002df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	f5ad 6d2c 	sub.w	sp, sp, #2752	; 0xac0
 8002dfe:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "STM32 FATFS works great!"; /* File write buffer. */
 8002e00:	4bc1      	ldr	r3, [pc, #772]	; (8003108 <main+0x310>)
 8002e02:	f507 6421 	add.w	r4, r7, #2576	; 0xa10
 8002e06:	461d      	mov	r5, r3
 8002e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e10:	c403      	stmia	r4!, {r0, r1}
 8002e12:	7022      	strb	r2, [r4, #0]
 8002e14:	f607 2329 	addw	r3, r7, #2601	; 0xa29
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
 8002e24:	615a      	str	r2, [r3, #20]
 8002e26:	761a      	strb	r2, [r3, #24]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 8002e28:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002e2c:	f6a3 1368 	subw	r3, r3, #2408	; 0x968
 8002e30:	461a      	mov	r2, r3
 8002e32:	2300      	movs	r3, #0
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	6053      	str	r3, [r2, #4]
 8002e38:	6093      	str	r3, [r2, #8]
 8002e3a:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 8002e3c:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002e40:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 8002e4e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002e52:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 8002e5e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002e62:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
 8002e78:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 8002e7a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002e7e:	f6a3 13bc 	subw	r3, r3, #2492	; 0x9bc
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	3304      	adds	r3, #4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
 8002e94:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 8002e96:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002e9a:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
 8002eb0:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 8002eb2:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002eb6:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8002eba:	4a94      	ldr	r2, [pc, #592]	; (800310c <main+0x314>)
 8002ebc:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 8002ebe:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002ec2:	f6a3 2348 	subw	r3, r3, #2632	; 0xa48
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	2224      	movs	r2, #36	; 0x24
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f013 ff53 	bl	8016d7c <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 8002ed6:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002eda:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2224      	movs	r2, #36	; 0x24
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f013 ff47 	bl	8016d7c <memset>
	LSM6DSO_IO_t gyro_io;
	//uint8_t GyroErrBuff[25] = {0};

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8002efa:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 8002efe:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002f02:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]
 8002f18:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f1a:	f002 fed9 	bl	8005cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f1e:	f000 fc21 	bl	8003764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f22:	f000 fe39 	bl	8003b98 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f26:	f000 fc83 	bl	8003830 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8002f2a:	f000 fcc1 	bl	80038b0 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002f2e:	f000 fce1 	bl	80038f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002f32:	f000 fd93 	bl	8003a5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002f36:	f000 fddf 	bl	8003af8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002f3a:	f00e fb9f 	bl	801167c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8002f3e:	f013 f8f9 	bl	8016134 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8002f42:	f000 fd15 	bl	8003970 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002f46:	f000 fc5f 	bl	8003808 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // Initialize HAL for uart interrupts
  HAL_MspInit();
 8002f4a:	f000 feff 	bl	8003d4c <HAL_MspInit>
  // Initialize i2c2 with custom driver
  BSP_I2C2_Init();
 8002f4e:	f7ff fdc1 	bl	8002ad4 <BSP_I2C2_Init>
  //Initialize msp for both uarts
  HAL_UART_MspInit(&huart1);
 8002f52:	486f      	ldr	r0, [pc, #444]	; (8003110 <main+0x318>)
 8002f54:	f001 f884 	bl	8004060 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 8002f58:	486e      	ldr	r0, [pc, #440]	; (8003114 <main+0x31c>)
 8002f5a:	f001 f881 	bl	8004060 <HAL_UART_MspInit>

  // Set gyro io functions and values
  gyro_io.Init = BSP_I2C2_Init;
 8002f5e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002f62:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8002f66:	4a6c      	ldr	r2, [pc, #432]	; (8003118 <main+0x320>)
 8002f68:	601a      	str	r2, [r3, #0]
  gyro_io.DeInit = BSP_I2C2_DeInit;
 8002f6a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002f6e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8002f72:	4a6a      	ldr	r2, [pc, #424]	; (800311c <main+0x324>)
 8002f74:	605a      	str	r2, [r3, #4]
  gyro_io.BusType = 0;
 8002f76:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002f7a:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  gyro_io.Address = LSM6DSO_I2C_ADD_L;
 8002f82:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002f86:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8002f8a:	22d5      	movs	r2, #213	; 0xd5
 8002f8c:	731a      	strb	r2, [r3, #12]
  gyro_io.WriteReg = BSP_I2C2_WriteReg;
 8002f8e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002f92:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8002f96:	4a62      	ldr	r2, [pc, #392]	; (8003120 <main+0x328>)
 8002f98:	611a      	str	r2, [r3, #16]
  gyro_io.ReadReg = BSP_I2C2_ReadReg;
 8002f9a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002f9e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8002fa2:	4a60      	ldr	r2, [pc, #384]	; (8003124 <main+0x32c>)
 8002fa4:	615a      	str	r2, [r3, #20]
  gyro_io.GetTick = BSP_GetTick;
 8002fa6:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002faa:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8002fae:	4a5e      	ldr	r2, [pc, #376]	; (8003128 <main+0x330>)
 8002fb0:	619a      	str	r2, [r3, #24]
  gyro_io.Delay = HAL_Delay;
 8002fb2:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8002fb6:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8002fba:	4a5c      	ldr	r2, [pc, #368]	; (800312c <main+0x334>)
 8002fbc:	61da      	str	r2, [r3, #28]

  // Initialize gyro
  LSM6DSO_RegisterBusIO(&gyro_device, &gyro_io);
 8002fbe:	f107 021c 	add.w	r2, r7, #28
 8002fc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 f9d9 	bl	8004380 <LSM6DSO_RegisterBusIO>
  gyro_result_init = LSM6DSO_Init(&gyro_device);
 8002fce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fa3e 	bl	8004454 <LSM6DSO_Init>
 8002fd8:	f8c7 0aa8 	str.w	r0, [r7, #2728]	; 0xaa8

  // Check and print gyro device status
  if (gyro_result_init == 0) {while (CDC_Transmit_FS ("GYRO OK!\n", 9) == USBD_BUSY);}
 8002fdc:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d108      	bne.n	8002ff6 <main+0x1fe>
 8002fe4:	bf00      	nop
 8002fe6:	2109      	movs	r1, #9
 8002fe8:	4851      	ldr	r0, [pc, #324]	; (8003130 <main+0x338>)
 8002fea:	f013 f961 	bl	80162b0 <CDC_Transmit_FS>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d0f8      	beq.n	8002fe6 <main+0x1ee>
 8002ff4:	e007      	b.n	8003006 <main+0x20e>
  else {while (CDC_Transmit_FS ("GYRO NOT OK!\n", 13) == USBD_BUSY);}
 8002ff6:	bf00      	nop
 8002ff8:	210d      	movs	r1, #13
 8002ffa:	484e      	ldr	r0, [pc, #312]	; (8003134 <main+0x33c>)
 8002ffc:	f013 f958 	bl	80162b0 <CDC_Transmit_FS>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d0f8      	beq.n	8002ff8 <main+0x200>

  // Enabling translational and angular acceleration measurements
  LSM6DSO_ACC_Enable(&gyro_device);
 8003006:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fa97 	bl	800453e <LSM6DSO_ACC_Enable>
  LSM6DSO_GYRO_Enable(&gyro_device);
 8003010:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fd04 	bl	8004a22 <LSM6DSO_GYRO_Enable>
  LSM6DSO_ACC_SetOutputDataRate(&gyro_device, 104.0f);
 800301a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800301e:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8003138 <main+0x340>
 8003022:	4618      	mov	r0, r3
 8003024:	f001 faf6 	bl	8004614 <LSM6DSO_ACC_SetOutputDataRate>
  LSM6DSO_GYRO_SetOutputDataRate(&gyro_device, 104.0f);
 8003028:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800302c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003138 <main+0x340>
 8003030:	4618      	mov	r0, r3
 8003032:	f001 fd9b 	bl	8004b6c <LSM6DSO_GYRO_SetOutputDataRate>
  //LSM6DSO_FIFO_Set_Mode(&gyro_device, (uint8_t)3);
  /* Interface reference is given as a parameter
   *         For I2C : BMP3_I2C_INTF
   *         For SPI : BMP3_SPI_INTF
   */
  bmp_result = bmp3_interface_init(&bmp_device, BMP3_I2C_INTF);
 8003036:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800303a:	2101      	movs	r1, #1
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fc9f 	bl	8002980 <bmp3_interface_init>
 8003042:	4603      	mov	r3, r0
 8003044:	f887 3aa7 	strb.w	r3, [r7, #2727]	; 0xaa7
  bmp3_check_rslt("bmp3_interface_init", bmp_result);
 8003048:	f997 3aa7 	ldrsb.w	r3, [r7, #2727]	; 0xaa7
 800304c:	4619      	mov	r1, r3
 800304e:	483b      	ldr	r0, [pc, #236]	; (800313c <main+0x344>)
 8003050:	f7ff fc36 	bl	80028c0 <bmp3_check_rslt>

  bmp_result = bmp3_init(&bmp_device);
 8003054:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd ff8f 	bl	8000f7c <bmp3_init>
 800305e:	4603      	mov	r3, r0
 8003060:	f887 3aa7 	strb.w	r3, [r7, #2727]	; 0xaa7
  bmp3_check_rslt("bmp3_init", bmp_result);
 8003064:	f997 3aa7 	ldrsb.w	r3, [r7, #2727]	; 0xaa7
 8003068:	4619      	mov	r1, r3
 800306a:	4835      	ldr	r0, [pc, #212]	; (8003140 <main+0x348>)
 800306c:	f7ff fc28 	bl	80028c0 <bmp3_check_rslt>

  bmp_settings.int_settings.drdy_en = BMP3_DISABLE;
 8003070:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003074:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8003078:	2200      	movs	r2, #0
 800307a:	729a      	strb	r2, [r3, #10]
  bmp_settings.int_settings.latch = BMP3_ENABLE;
 800307c:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003080:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8003084:	2201      	movs	r2, #1
 8003086:	725a      	strb	r2, [r3, #9]
  bmp_settings.press_en = BMP3_ENABLE;
 8003088:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800308c:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8003090:	2201      	movs	r2, #1
 8003092:	705a      	strb	r2, [r3, #1]
  bmp_settings.temp_en = BMP3_ENABLE;
 8003094:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003098:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 800309c:	2201      	movs	r2, #1
 800309e:	709a      	strb	r2, [r3, #2]

  bmp_settings.odr_filter.press_os = BMP3_OVERSAMPLING_4X;
 80030a0:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80030a4:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 80030a8:	2202      	movs	r2, #2
 80030aa:	70da      	strb	r2, [r3, #3]
  bmp_settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 80030ac:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80030b0:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 80030b4:	2200      	movs	r2, #0
 80030b6:	711a      	strb	r2, [r3, #4]
  bmp_settings.odr_filter.odr = BMP3_ODR_100_HZ;
 80030b8:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80030bc:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 80030c0:	2201      	movs	r2, #1
 80030c2:	719a      	strb	r2, [r3, #6]

  bmp_settings_select = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR | BMP3_SEL_DRDY_EN;
 80030c4:	23be      	movs	r3, #190	; 0xbe
 80030c6:	f8a7 3aa4 	strh.w	r3, [r7, #2724]	; 0xaa4

  bmp_result = bmp3_set_sensor_settings(bmp_settings_select, &bmp_settings, &bmp_device);
 80030ca:	f8b7 3aa4 	ldrh.w	r3, [r7, #2724]	; 0xaa4
 80030ce:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80030d2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe f8b8 	bl	800124c <bmp3_set_sensor_settings>
 80030dc:	4603      	mov	r3, r0
 80030de:	f887 3aa7 	strb.w	r3, [r7, #2727]	; 0xaa7
  bmp3_check_rslt("bmp3_set_sensor_settings", bmp_result);
 80030e2:	f997 3aa7 	ldrsb.w	r3, [r7, #2727]	; 0xaa7
 80030e6:	4619      	mov	r1, r3
 80030e8:	4816      	ldr	r0, [pc, #88]	; (8003144 <main+0x34c>)
 80030ea:	f7ff fbe9 	bl	80028c0 <bmp3_check_rslt>

  if (bmp_result == 0)
 80030ee:	f997 3aa7 	ldrsb.w	r3, [r7, #2727]	; 0xaa7
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d12a      	bne.n	800314c <main+0x354>
  	  {while (CDC_Transmit_FS ("BMP OK!\n", 8) == USBD_BUSY);}
 80030f6:	bf00      	nop
 80030f8:	2108      	movs	r1, #8
 80030fa:	4813      	ldr	r0, [pc, #76]	; (8003148 <main+0x350>)
 80030fc:	f013 f8d8 	bl	80162b0 <CDC_Transmit_FS>
 8003100:	4603      	mov	r3, r0
 8003102:	2b01      	cmp	r3, #1
 8003104:	d0f8      	beq.n	80030f8 <main+0x300>
 8003106:	e029      	b.n	800315c <main+0x364>
 8003108:	08019eb4 	.word	0x08019eb4
 800310c:	00202d20 	.word	0x00202d20
 8003110:	20000750 	.word	0x20000750
 8003114:	200007e0 	.word	0x200007e0
 8003118:	08002ad5 	.word	0x08002ad5
 800311c:	08002b51 	.word	0x08002b51
 8003120:	08002ba1 	.word	0x08002ba1
 8003124:	08002c05 	.word	0x08002c05
 8003128:	08002c69 	.word	0x08002c69
 800312c:	08005db9 	.word	0x08005db9
 8003130:	08019d44 	.word	0x08019d44
 8003134:	08019d50 	.word	0x08019d50
 8003138:	42d00000 	.word	0x42d00000
 800313c:	08019d60 	.word	0x08019d60
 8003140:	08019d74 	.word	0x08019d74
 8003144:	08019d80 	.word	0x08019d80
 8003148:	08019d9c 	.word	0x08019d9c
  else
  	  {while (CDC_Transmit_FS ("BMP NOT OK!\n", 12) == USBD_BUSY);}
 800314c:	bf00      	nop
 800314e:	210c      	movs	r1, #12
 8003150:	488c      	ldr	r0, [pc, #560]	; (8003384 <main+0x58c>)
 8003152:	f013 f8ad 	bl	80162b0 <CDC_Transmit_FS>
 8003156:	4603      	mov	r3, r0
 8003158:	2b01      	cmp	r3, #1
 800315a:	d0f8      	beq.n	800314e <main+0x356>
	bmp3_check_rslt("bmp3_set_op_mode", bmp_result);*/

  //volatile unsigned tmp;

  // Setting the buffer for UART2 data reading
  gps_rxBuffer = gps_rxBuffer1;
 800315c:	4b8a      	ldr	r3, [pc, #552]	; (8003388 <main+0x590>)
 800315e:	4a8b      	ldr	r2, [pc, #556]	; (800338c <main+0x594>)
 8003160:	601a      	str	r2, [r3, #0]
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 8003162:	4b8b      	ldr	r3, [pc, #556]	; (8003390 <main+0x598>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8c7 3a78 	str.w	r3, [r7, #2680]	; 0xa78
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
   return(result);
 8003176:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 8003182:	4b83      	ldr	r3, [pc, #524]	; (8003390 <main+0x598>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800318c:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84
 8003190:	f8c7 2a80 	str.w	r2, [r7, #2688]	; 0xa80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	f8d7 1a80 	ldr.w	r1, [r7, #2688]	; 0xa80
 8003198:	f8d7 2a84 	ldr.w	r2, [r7, #2692]	; 0xa84
 800319c:	e841 2300 	strex	r3, r2, [r1]
 80031a0:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c
   return(result);
 80031a4:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1da      	bne.n	8003162 <main+0x36a>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 80031ac:	4b78      	ldr	r3, [pc, #480]	; (8003390 <main+0x598>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
   return(result);
 80031c0:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
 80031cc:	4b70      	ldr	r3, [pc, #448]	; (8003390 <main+0x598>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 80031d6:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 80031da:	f8c7 2a6c 	str.w	r2, [r7, #2668]	; 0xa6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	f8d7 1a6c 	ldr.w	r1, [r7, #2668]	; 0xa6c
 80031e2:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
   return(result);
 80031ee:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1da      	bne.n	80031ac <main+0x3b4>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80031f6:	4b66      	ldr	r3, [pc, #408]	; (8003390 <main+0x598>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fe:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 8003202:	e853 3f00 	ldrex	r3, [r3]
 8003206:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
   return(result);
 800320a:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 800320e:	f043 0320 	orr.w	r3, r3, #32
 8003212:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
 8003216:	4b5e      	ldr	r3, [pc, #376]	; (8003390 <main+0x598>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8003220:	f8c7 3a5c 	str.w	r3, [r7, #2652]	; 0xa5c
 8003224:	f8c7 2a58 	str.w	r2, [r7, #2648]	; 0xa58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 800322c:	f8d7 2a5c 	ldr.w	r2, [r7, #2652]	; 0xa5c
 8003230:	e841 2300 	strex	r3, r2, [r1]
 8003234:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
   return(result);
 8003238:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	; 0xa54
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1da      	bne.n	80031f6 <main+0x3fe>


  // Initialize SD card
  // If not FR_OK, mounting failed, else it was successful
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8003240:	2200      	movs	r2, #0
 8003242:	4954      	ldr	r1, [pc, #336]	; (8003394 <main+0x59c>)
 8003244:	4854      	ldr	r0, [pc, #336]	; (8003398 <main+0x5a0>)
 8003246:	f011 fd8d 	bl	8014d64 <f_mount>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <main+0x46a>
	{
	while (CDC_Transmit_FS ("Mount failed!\n", 14) == USBD_BUSY);
 8003250:	bf00      	nop
 8003252:	210e      	movs	r1, #14
 8003254:	4851      	ldr	r0, [pc, #324]	; (800339c <main+0x5a4>)
 8003256:	f013 f82b 	bl	80162b0 <CDC_Transmit_FS>
 800325a:	4603      	mov	r3, r0
 800325c:	2b01      	cmp	r3, #1
 800325e:	d0f8      	beq.n	8003252 <main+0x45a>
 8003260:	e058      	b.n	8003314 <main+0x51c>
	}
  // here f_mount == FR_OK -> mounting was a success
  else
	{
	// f_mkfs
	if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, sd_read_buffer, sizeof(sd_read_buffer)) != FR_OK)
 8003262:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800326a:	9200      	str	r2, [sp, #0]
 800326c:	2200      	movs	r2, #0
 800326e:	2107      	movs	r1, #7
 8003270:	4848      	ldr	r0, [pc, #288]	; (8003394 <main+0x59c>)
 8003272:	f012 fad7 	bl	8015824 <f_mkfs>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <main+0x49c>
		{
		while (CDC_Transmit_FS ("MKFS failed!\n", 13) == USBD_BUSY);
 800327c:	bf00      	nop
 800327e:	210d      	movs	r1, #13
 8003280:	4847      	ldr	r0, [pc, #284]	; (80033a0 <main+0x5a8>)
 8003282:	f013 f815 	bl	80162b0 <CDC_Transmit_FS>
 8003286:	4603      	mov	r3, r0
 8003288:	2b01      	cmp	r3, #1
 800328a:	d0f8      	beq.n	800327e <main+0x486>
		hsd1.Init.ClockDiv = 0;
 800328c:	4b45      	ldr	r3, [pc, #276]	; (80033a4 <main+0x5ac>)
 800328e:	2200      	movs	r2, #0
 8003290:	615a      	str	r2, [r3, #20]
 8003292:	e03f      	b.n	8003314 <main+0x51c>
		}
	else
		{
		hsd1.Init.ClockDiv = 0;
 8003294:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <main+0x5ac>)
 8003296:	2200      	movs	r2, #0
 8003298:	615a      	str	r2, [r3, #20]
		// Open file for writing (Create)
		if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800329a:	220a      	movs	r2, #10
 800329c:	4942      	ldr	r1, [pc, #264]	; (80033a8 <main+0x5b0>)
 800329e:	4843      	ldr	r0, [pc, #268]	; (80033ac <main+0x5b4>)
 80032a0:	f011 fda6 	bl	8014df0 <f_open>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <main+0x4c4>
			{
			while (CDC_Transmit_FS ("Open file failed!\n", 18) == USBD_BUSY);
 80032aa:	bf00      	nop
 80032ac:	2112      	movs	r1, #18
 80032ae:	4840      	ldr	r0, [pc, #256]	; (80033b0 <main+0x5b8>)
 80032b0:	f012 fffe 	bl	80162b0 <CDC_Transmit_FS>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d0f8      	beq.n	80032ac <main+0x4b4>
 80032ba:	e02b      	b.n	8003314 <main+0x51c>
			}
		else
			{

			// Write to the text file
			sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 80032bc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fc ff9d 	bl	8000200 <strlen>
 80032c6:	4602      	mov	r2, r0
 80032c8:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80032cc:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 80032d0:	4836      	ldr	r0, [pc, #216]	; (80033ac <main+0x5b4>)
 80032d2:	f012 f88a 	bl	80153ea <f_write>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f887 3a97 	strb.w	r3, [r7, #2711]	; 0xa97
			f_read(&SDFile, &sd_read_buffer, 100, &sd_err_bytesread);
 80032dc:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 80032e0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80032e4:	2264      	movs	r2, #100	; 0x64
 80032e6:	4831      	ldr	r0, [pc, #196]	; (80033ac <main+0x5b4>)
 80032e8:	f011 ff40 	bl	801516c <f_read>

			//while( CDC_Transmit_FS(sd_read_buffer,  sizeof(sd_read_buffer))  == USBD_BUSY);
			if((sd_err_byteswritten == 0) || (sd_result_write != FR_OK))
 80032ec:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	; 0xa48
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <main+0x504>
 80032f4:	f897 3a97 	ldrb.w	r3, [r7, #2711]	; 0xa97
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <main+0x516>
				{
				while (CDC_Transmit_FS ("Read/Write failed!\n", 19) == USBD_BUSY);
 80032fc:	bf00      	nop
 80032fe:	2113      	movs	r1, #19
 8003300:	482c      	ldr	r0, [pc, #176]	; (80033b4 <main+0x5bc>)
 8003302:	f012 ffd5 	bl	80162b0 <CDC_Transmit_FS>
 8003306:	4603      	mov	r3, r0
 8003308:	2b01      	cmp	r3, #1
 800330a:	d0f8      	beq.n	80032fe <main+0x506>
			if((sd_err_byteswritten == 0) || (sd_result_write != FR_OK))
 800330c:	e002      	b.n	8003314 <main+0x51c>
				}
			else
				{
				f_close(&SDFile);
 800330e:	4827      	ldr	r0, [pc, #156]	; (80033ac <main+0x5b4>)
 8003310:	f012 fa5e 	bl	80157d0 <f_close>
				}

			}
		}
	}
  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8003314:	2200      	movs	r2, #0
 8003316:	2100      	movs	r1, #0
 8003318:	481f      	ldr	r0, [pc, #124]	; (8003398 <main+0x5a0>)
 800331a:	f011 fd23 	bl	8014d64 <f_mount>


  // Start timers
  HAL_TIM_Base_Start_IT(&htim17);
 800331e:	4826      	ldr	r0, [pc, #152]	; (80033b8 <main+0x5c0>)
 8003320:	f009 ffe0 	bl	800d2e4 <HAL_TIM_Base_Start_IT>
  tick = 0;
 8003324:	4b25      	ldr	r3, [pc, #148]	; (80033bc <main+0x5c4>)
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
  tickGPS = 0;
 800332a:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <main+0x5c8>)
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]


  //-[ I2C Bus Scanning ]-
  uint8_t i = 0, ret;
 8003330:	2300      	movs	r3, #0
 8003332:	f887 3aaf 	strb.w	r3, [r7, #2735]	; 0xaaf
  for(i = 1; i < 128; i++)
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3aaf 	strb.w	r3, [r7, #2735]	; 0xaaf
 800333c:	e066      	b.n	800340c <main+0x614>
	{
	ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 800333e:	f897 3aaf 	ldrb.w	r3, [r7, #2735]	; 0xaaf
 8003342:	b29b      	uxth	r3, r3
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	b299      	uxth	r1, r3
 8003348:	2305      	movs	r3, #5
 800334a:	2203      	movs	r2, #3
 800334c:	481d      	ldr	r0, [pc, #116]	; (80033c4 <main+0x5cc>)
 800334e:	f003 fec7 	bl	80070e0 <HAL_I2C_IsDeviceReady>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 3a8b 	strb.w	r3, [r7, #2699]	; 0xa8b
	if (ret != HAL_OK) // No ACK Received At That Address
 8003358:	f897 3a8b 	ldrb.w	r3, [r7, #2699]	; 0xa8b
 800335c:	2b00      	cmp	r3, #0
 800335e:	d033      	beq.n	80033c8 <main+0x5d0>
		{
		while (CDC_Transmit_FS (i2c2check_space, strlen(i2c2check_space)) == USBD_BUSY);
 8003360:	bf00      	nop
 8003362:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003366:	4618      	mov	r0, r3
 8003368:	f7fc ff4a 	bl	8000200 <strlen>
 800336c:	4603      	mov	r3, r0
 800336e:	b29a      	uxth	r2, r3
 8003370:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f012 ff9a 	bl	80162b0 <CDC_Transmit_FS>
 800337c:	4603      	mov	r3, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	d0ef      	beq.n	8003362 <main+0x56a>
 8003382:	e03e      	b.n	8003402 <main+0x60a>
 8003384:	08019da8 	.word	0x08019da8
 8003388:	20000eb0 	.word	0x20000eb0
 800338c:	20000870 	.word	0x20000870
 8003390:	200007e0 	.word	0x200007e0
 8003394:	20000ec8 	.word	0x20000ec8
 8003398:	20000ecc 	.word	0x20000ecc
 800339c:	08019db8 	.word	0x08019db8
 80033a0:	08019dc8 	.word	0x08019dc8
 80033a4:	20000620 	.word	0x20000620
 80033a8:	08019dd8 	.word	0x08019dd8
 80033ac:	200010fc 	.word	0x200010fc
 80033b0:	08019de4 	.word	0x08019de4
 80033b4:	08019df8 	.word	0x08019df8
 80033b8:	20000704 	.word	0x20000704
 80033bc:	20000ebc 	.word	0x20000ebc
 80033c0:	20000ebd 	.word	0x20000ebd
 80033c4:	20000574 	.word	0x20000574
		}
	else if(ret == HAL_OK)
 80033c8:	f897 3a8b 	ldrb.w	r3, [r7, #2699]	; 0xa8b
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d118      	bne.n	8003402 <main+0x60a>
		{
		sprintf(i2c2check_active_address, "0x%X", i);
 80033d0:	f897 2aaf 	ldrb.w	r2, [r7, #2735]	; 0xaaf
 80033d4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033d8:	49bf      	ldr	r1, [pc, #764]	; (80036d8 <main+0x8e0>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f014 fa48 	bl	8017870 <siprintf>
		while (CDC_Transmit_FS (i2c2check_active_address, strlen(i2c2check_active_address)) == USBD_BUSY);
 80033e0:	bf00      	nop
 80033e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fc ff0a 	bl	8000200 <strlen>
 80033ec:	4603      	mov	r3, r0
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033f4:	4611      	mov	r1, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f012 ff5a 	bl	80162b0 <CDC_Transmit_FS>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d0ef      	beq.n	80033e2 <main+0x5ea>
  for(i = 1; i < 128; i++)
 8003402:	f897 3aaf 	ldrb.w	r3, [r7, #2735]	; 0xaaf
 8003406:	3301      	adds	r3, #1
 8003408:	f887 3aaf 	strb.w	r3, [r7, #2735]	; 0xaaf
 800340c:	f997 3aaf 	ldrsb.w	r3, [r7, #2735]	; 0xaaf
 8003410:	2b00      	cmp	r3, #0
 8003412:	da94      	bge.n	800333e <main+0x546>
		}
	}
  while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 8003414:	bf00      	nop
 8003416:	2101      	movs	r1, #1
 8003418:	48b0      	ldr	r0, [pc, #704]	; (80036dc <main+0x8e4>)
 800341a:	f012 ff49 	bl	80162b0 <CDC_Transmit_FS>
 800341e:	4603      	mov	r3, r0
 8003420:	2b01      	cmp	r3, #1
 8003422:	d0f8      	beq.n	8003416 <main+0x61e>
  /* USER CODE BEGIN WHILE */
  while (1)
	{

	// Read temperature, pressure and gyro data every second
	if (tick == 0)
 8003424:	4bae      	ldr	r3, [pc, #696]	; (80036e0 <main+0x8e8>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 8138 	bne.w	80036a0 <main+0x8a8>
		{
		// Start timer again
		tick = 10;
 8003430:	4bab      	ldr	r3, [pc, #684]	; (80036e0 <main+0x8e8>)
 8003432:	220a      	movs	r2, #10
 8003434:	701a      	strb	r2, [r3, #0]

		// Print current time
		sprintf(system_time_buffer, "\ntime: %.0f s \n", system_time_counter);
 8003436:	4638      	mov	r0, r7
 8003438:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	49a8      	ldr	r1, [pc, #672]	; (80036e4 <main+0x8ec>)
 8003442:	f014 fa15 	bl	8017870 <siprintf>
		while (CDC_Transmit_FS (system_time_buffer, strlen(system_time_buffer)) == USBD_BUSY);
 8003446:	bf00      	nop
 8003448:	463b      	mov	r3, r7
 800344a:	4618      	mov	r0, r3
 800344c:	f7fc fed8 	bl	8000200 <strlen>
 8003450:	4603      	mov	r3, r0
 8003452:	b29a      	uxth	r2, r3
 8003454:	463b      	mov	r3, r7
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f012 ff29 	bl	80162b0 <CDC_Transmit_FS>
 800345e:	4603      	mov	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d0f1      	beq.n	8003448 <main+0x650>
		system_time_counter++;
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	4b9f      	ldr	r3, [pc, #636]	; (80036e8 <main+0x8f0>)
 800346a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800346e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003472:	f7fc ff23 	bl	80002bc <__adddf3>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800347e:	e9c1 2300 	strd	r2, r3, [r1]

		// Toggle LED on board to indicate succesful timer management
		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8003482:	2110      	movs	r1, #16
 8003484:	4899      	ldr	r0, [pc, #612]	; (80036ec <main+0x8f4>)
 8003486:	f003 f93b 	bl	8006700 <HAL_GPIO_TogglePin>

		// bmp needed to be forced for this kind of data reading, as now FIFO buffers or dready interrupts are being used
		bmp_settings.op_mode = BMP3_MODE_FORCED;
 800348a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800348e:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
		bmp_result = bmp3_set_op_mode(&bmp_settings, &bmp_device);
 8003496:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800349a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd ff96 	bl	80013d2 <bmp3_set_op_mode>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f887 3aa7 	strb.w	r3, [r7, #2727]	; 0xaa7
		bmp3_check_rslt("bmp3_set_op_mode", bmp_result);
 80034ac:	f997 3aa7 	ldrsb.w	r3, [r7, #2727]	; 0xaa7
 80034b0:	4619      	mov	r1, r3
 80034b2:	488f      	ldr	r0, [pc, #572]	; (80036f0 <main+0x8f8>)
 80034b4:	f7ff fa04 	bl	80028c0 <bmp3_check_rslt>
		* BMP3_TEMP       : To read only temperature data
		* BMP3_PRESS      : To read only pressure data
		*/

		// Check sensor measurements
		bmp_result = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmp_data, &bmp_device);
 80034b8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80034bc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80034c0:	4619      	mov	r1, r3
 80034c2:	2003      	movs	r0, #3
 80034c4:	f7fd fff9 	bl	80014ba <bmp3_get_sensor_data>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 3aa7 	strb.w	r3, [r7, #2727]	; 0xaa7
		bmp3_check_rslt("bmp3_get_sensor_data", bmp_result);
 80034ce:	f997 3aa7 	ldrsb.w	r3, [r7, #2727]	; 0xaa7
 80034d2:	4619      	mov	r1, r3
 80034d4:	4887      	ldr	r0, [pc, #540]	; (80036f4 <main+0x8fc>)
 80034d6:	f7ff f9f3 	bl	80028c0 <bmp3_check_rslt>

		// NOTE : Read status register again to clear data ready interrupt status
		bmp_result = bmp3_get_status(&bmp_status, &bmp_device);
 80034da:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80034de:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd feff 	bl	80012e8 <bmp3_get_status>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 3aa7 	strb.w	r3, [r7, #2727]	; 0xaa7
		bmp3_check_rslt("bmp3_get_status", bmp_result);
 80034f0:	f997 3aa7 	ldrsb.w	r3, [r7, #2727]	; 0xaa7
 80034f4:	4619      	mov	r1, r3
 80034f6:	4880      	ldr	r0, [pc, #512]	; (80036f8 <main+0x900>)
 80034f8:	f7ff f9e2 	bl	80028c0 <bmp3_check_rslt>

		// Print bmp measurements
		while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 80034fc:	bf00      	nop
 80034fe:	2101      	movs	r1, #1
 8003500:	4876      	ldr	r0, [pc, #472]	; (80036dc <main+0x8e4>)
 8003502:	f012 fed5 	bl	80162b0 <CDC_Transmit_FS>
 8003506:	4603      	mov	r3, r0
 8003508:	2b01      	cmp	r3, #1
 800350a:	d0f8      	beq.n	80034fe <main+0x706>
		while (CDC_Transmit_FS ("BMP390 START\n", 13) == USBD_BUSY);
 800350c:	bf00      	nop
 800350e:	210d      	movs	r1, #13
 8003510:	487a      	ldr	r0, [pc, #488]	; (80036fc <main+0x904>)
 8003512:	f012 fecd 	bl	80162b0 <CDC_Transmit_FS>
 8003516:	4603      	mov	r3, r0
 8003518:	2b01      	cmp	r3, #1
 800351a:	d0f8      	beq.n	800350e <main+0x716>
		sprintf(bmp_temperature_buffer, "%.2f\n", bmp_data.temperature);
 800351c:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003520:	f6a3 1368 	subw	r3, r3, #2408	; 0x968
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800352c:	4974      	ldr	r1, [pc, #464]	; (8003700 <main+0x908>)
 800352e:	f014 f99f 	bl	8017870 <siprintf>
		sprintf(bmp_pressure_buffer, "%.2f\n", bmp_data.pressure);
 8003532:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003536:	f6a3 1368 	subw	r3, r3, #2408	; 0x968
 800353a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800353e:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8003542:	496f      	ldr	r1, [pc, #444]	; (8003700 <main+0x908>)
 8003544:	f014 f994 	bl	8017870 <siprintf>
		while (CDC_Transmit_FS (bmp_temperature_buffer, strlen(bmp_temperature_buffer)) == USBD_BUSY);
 8003548:	bf00      	nop
 800354a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800354e:	4618      	mov	r0, r3
 8003550:	f7fc fe56 	bl	8000200 <strlen>
 8003554:	4603      	mov	r3, r0
 8003556:	b29a      	uxth	r2, r3
 8003558:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800355c:	4611      	mov	r1, r2
 800355e:	4618      	mov	r0, r3
 8003560:	f012 fea6 	bl	80162b0 <CDC_Transmit_FS>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d0ef      	beq.n	800354a <main+0x752>
		while (CDC_Transmit_FS (bmp_pressure_buffer, strlen(bmp_pressure_buffer)) == USBD_BUSY);
 800356a:	bf00      	nop
 800356c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003570:	4618      	mov	r0, r3
 8003572:	f7fc fe45 	bl	8000200 <strlen>
 8003576:	4603      	mov	r3, r0
 8003578:	b29a      	uxth	r2, r3
 800357a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f012 fe95 	bl	80162b0 <CDC_Transmit_FS>
 8003586:	4603      	mov	r3, r0
 8003588:	2b01      	cmp	r3, #1
 800358a:	d0ef      	beq.n	800356c <main+0x774>
		while (CDC_Transmit_FS ("BMP390 END\n", 11) == USBD_BUSY);
 800358c:	bf00      	nop
 800358e:	210b      	movs	r1, #11
 8003590:	485c      	ldr	r0, [pc, #368]	; (8003704 <main+0x90c>)
 8003592:	f012 fe8d 	bl	80162b0 <CDC_Transmit_FS>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d0f8      	beq.n	800358e <main+0x796>
		while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 800359c:	bf00      	nop
 800359e:	2101      	movs	r1, #1
 80035a0:	484e      	ldr	r0, [pc, #312]	; (80036dc <main+0x8e4>)
 80035a2:	f012 fe85 	bl	80162b0 <CDC_Transmit_FS>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d0f8      	beq.n	800359e <main+0x7a6>

		// Read gyro acceleration and angular velocity data
		gyro_result_acceleration = LSM6DSO_ACC_GetAxes (&gyro_device, &gyro_acceleration_object);
 80035ac:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80035b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 f9dc 	bl	8004974 <LSM6DSO_ACC_GetAxes>
 80035bc:	f8c7 0a90 	str.w	r0, [r7, #2704]	; 0xa90
		gyro_result_angularvel = LSM6DSO_GYRO_GetAxes (&gyro_device, &gyro_angularvel_object);
 80035c0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80035c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 fb76 	bl	8004cbc <LSM6DSO_GYRO_GetAxes>
 80035d0:	f8c7 0a8c 	str.w	r0, [r7, #2700]	; 0xa8c

		// Print gyro measurements
		while (CDC_Transmit_FS ("GYRO START\n", 11) == USBD_BUSY);
 80035d4:	bf00      	nop
 80035d6:	210b      	movs	r1, #11
 80035d8:	484b      	ldr	r0, [pc, #300]	; (8003708 <main+0x910>)
 80035da:	f012 fe69 	bl	80162b0 <CDC_Transmit_FS>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d0f8      	beq.n	80035d6 <main+0x7de>
		sprintf(gyro_acceleration_buffer, "%"PRId32"   %"PRId32"   %"PRId32"\n", gyro_acceleration_object.x, gyro_acceleration_object.y, gyro_acceleration_object.z);
 80035e4:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80035e8:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80035f2:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80035fc:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	460b      	mov	r3, r1
 800360a:	4940      	ldr	r1, [pc, #256]	; (800370c <main+0x914>)
 800360c:	f014 f930 	bl	8017870 <siprintf>
		while (CDC_Transmit_FS (gyro_acceleration_buffer, strlen(gyro_acceleration_buffer)) == USBD_BUSY);
 8003610:	bf00      	nop
 8003612:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc fdf2 	bl	8000200 <strlen>
 800361c:	4603      	mov	r3, r0
 800361e:	b29a      	uxth	r2, r3
 8003620:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f012 fe42 	bl	80162b0 <CDC_Transmit_FS>
 800362c:	4603      	mov	r3, r0
 800362e:	2b01      	cmp	r3, #1
 8003630:	d0ef      	beq.n	8003612 <main+0x81a>
		sprintf(gyro_angularvel_buffer, "%"PRId32"   %"PRId32"   %"PRId32"\n", gyro_angularvel_object.x, gyro_angularvel_object.y, gyro_angularvel_object.z);
 8003632:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003636:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003640:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800364a:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	460b      	mov	r3, r1
 8003658:	492c      	ldr	r1, [pc, #176]	; (800370c <main+0x914>)
 800365a:	f014 f909 	bl	8017870 <siprintf>
		while (CDC_Transmit_FS (gyro_angularvel_buffer, strlen(gyro_angularvel_buffer)) == USBD_BUSY);
 800365e:	bf00      	nop
 8003660:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc fdcb 	bl	8000200 <strlen>
 800366a:	4603      	mov	r3, r0
 800366c:	b29a      	uxth	r2, r3
 800366e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f012 fe1b 	bl	80162b0 <CDC_Transmit_FS>
 800367a:	4603      	mov	r3, r0
 800367c:	2b01      	cmp	r3, #1
 800367e:	d0ef      	beq.n	8003660 <main+0x868>
		while (CDC_Transmit_FS ("GYRO END\n", 9) == USBD_BUSY);
 8003680:	bf00      	nop
 8003682:	2109      	movs	r1, #9
 8003684:	4822      	ldr	r0, [pc, #136]	; (8003710 <main+0x918>)
 8003686:	f012 fe13 	bl	80162b0 <CDC_Transmit_FS>
 800368a:	4603      	mov	r3, r0
 800368c:	2b01      	cmp	r3, #1
 800368e:	d0f8      	beq.n	8003682 <main+0x88a>
		while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 8003690:	bf00      	nop
 8003692:	2101      	movs	r1, #1
 8003694:	4811      	ldr	r0, [pc, #68]	; (80036dc <main+0x8e4>)
 8003696:	f012 fe0b 	bl	80162b0 <CDC_Transmit_FS>
 800369a:	4603      	mov	r3, r0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d0f8      	beq.n	8003692 <main+0x89a>

		}

	// Read GPS data whenever UART interrupt raises gps_data_ready flag
	if (gps_data_ready)
 80036a0:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <main+0x91c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f43f aebd 	beq.w	8003424 <main+0x62c>
		{
		// Toggle LED on board whenever printing data
		HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80036aa:	2108      	movs	r1, #8
 80036ac:	480f      	ldr	r0, [pc, #60]	; (80036ec <main+0x8f4>)
 80036ae:	f003 f827 	bl	8006700 <HAL_GPIO_TogglePin>
		//while (CDC_Transmit_FS ("GPS START\n", 10) == USBD_BUSY);

		// Choose the buffer from the two data buffers that is nit currently being written into
		if (gps_rxBuffer == gps_rxBuffer1)
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <main+0x920>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a19      	ldr	r2, [pc, #100]	; (800371c <main+0x924>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d133      	bne.n	8003724 <main+0x92c>
			{

			while (CDC_Transmit_FS (gps_rxBuffer2, strlen(gps_rxBuffer2)) == USBD_BUSY);
 80036bc:	bf00      	nop
 80036be:	4818      	ldr	r0, [pc, #96]	; (8003720 <main+0x928>)
 80036c0:	f7fc fd9e 	bl	8000200 <strlen>
 80036c4:	4603      	mov	r3, r0
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4619      	mov	r1, r3
 80036ca:	4815      	ldr	r0, [pc, #84]	; (8003720 <main+0x928>)
 80036cc:	f012 fdf0 	bl	80162b0 <CDC_Transmit_FS>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d0f3      	beq.n	80036be <main+0x8c6>
 80036d6:	e032      	b.n	800373e <main+0x946>
 80036d8:	08019e0c 	.word	0x08019e0c
 80036dc:	08019e14 	.word	0x08019e14
 80036e0:	20000ebc 	.word	0x20000ebc
 80036e4:	08019e18 	.word	0x08019e18
 80036e8:	3ff00000 	.word	0x3ff00000
 80036ec:	48000c00 	.word	0x48000c00
 80036f0:	08019e28 	.word	0x08019e28
 80036f4:	08019e3c 	.word	0x08019e3c
 80036f8:	08019e54 	.word	0x08019e54
 80036fc:	08019e64 	.word	0x08019e64
 8003700:	08019e74 	.word	0x08019e74
 8003704:	08019e7c 	.word	0x08019e7c
 8003708:	08019e88 	.word	0x08019e88
 800370c:	08019e94 	.word	0x08019e94
 8003710:	08019ea8 	.word	0x08019ea8
 8003714:	20000eb8 	.word	0x20000eb8
 8003718:	20000eb0 	.word	0x20000eb0
 800371c:	20000870 	.word	0x20000870
 8003720:	20000b90 	.word	0x20000b90
			}
		else
			{
			while (CDC_Transmit_FS (gps_rxBuffer1, strlen(gps_rxBuffer1)) == USBD_BUSY);
 8003724:	bf00      	nop
 8003726:	480c      	ldr	r0, [pc, #48]	; (8003758 <main+0x960>)
 8003728:	f7fc fd6a 	bl	8000200 <strlen>
 800372c:	4603      	mov	r3, r0
 800372e:	b29b      	uxth	r3, r3
 8003730:	4619      	mov	r1, r3
 8003732:	4809      	ldr	r0, [pc, #36]	; (8003758 <main+0x960>)
 8003734:	f012 fdbc 	bl	80162b0 <CDC_Transmit_FS>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d0f3      	beq.n	8003726 <main+0x92e>

			}

		// Toggle flags to allow for buffer swapping and next data batch sending
		gps_data_ready ^= 1;
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <main+0x964>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f083 0301 	eor.w	r3, r3, #1
 8003746:	4a05      	ldr	r2, [pc, #20]	; (800375c <main+0x964>)
 8003748:	6013      	str	r3, [r2, #0]
		gps_send_ready |= 1;
 800374a:	4b05      	ldr	r3, [pc, #20]	; (8003760 <main+0x968>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	4a03      	ldr	r2, [pc, #12]	; (8003760 <main+0x968>)
 8003754:	6013      	str	r3, [r2, #0]
	if (tick == 0)
 8003756:	e665      	b.n	8003424 <main+0x62c>
 8003758:	20000870 	.word	0x20000870
 800375c:	20000eb8 	.word	0x20000eb8
 8003760:	20000000 	.word	0x20000000

08003764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b096      	sub	sp, #88	; 0x58
 8003768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	2244      	movs	r2, #68	; 0x44
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f013 fb02 	bl	8016d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003778:	463b      	mov	r3, r7
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	60da      	str	r2, [r3, #12]
 8003784:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8003786:	2000      	movs	r0, #0
 8003788:	f005 fb6e 	bl	8008e68 <HAL_PWREx_ControlVoltageScaling>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8003792:	f000 fad1 	bl	8003d38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003796:	2321      	movs	r3, #33	; 0x21
 8003798:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800379a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800379e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80037a0:	2301      	movs	r3, #1
 80037a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037a4:	2302      	movs	r3, #2
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037a8:	2303      	movs	r3, #3
 80037aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80037ac:	2301      	movs	r3, #1
 80037ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80037b0:	231e      	movs	r3, #30
 80037b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037b4:	2302      	movs	r3, #2
 80037b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037b8:	2302      	movs	r3, #2
 80037ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037bc:	2302      	movs	r3, #2
 80037be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	4618      	mov	r0, r3
 80037c6:	f005 fc03 	bl	8008fd0 <HAL_RCC_OscConfig>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80037d0:	f000 fab2 	bl	8003d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037d4:	230f      	movs	r3, #15
 80037d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d8:	2303      	movs	r3, #3
 80037da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80037e8:	463b      	mov	r3, r7
 80037ea:	2105      	movs	r1, #5
 80037ec:	4618      	mov	r0, r3
 80037ee:	f006 f809 	bl	8009804 <HAL_RCC_ClockConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80037f8:	f000 fa9e 	bl	8003d38 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80037fc:	f006 fa00 	bl	8009c00 <HAL_RCC_EnableCSS>
}
 8003800:	bf00      	nop
 8003802:	3758      	adds	r7, #88	; 0x58
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	2100      	movs	r1, #0
 8003810:	201a      	movs	r0, #26
 8003812:	f002 fbd0 	bl	8005fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003816:	201a      	movs	r0, #26
 8003818:	f002 fbe9 	bl	8005fee <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800381c:	2200      	movs	r2, #0
 800381e:	2100      	movs	r1, #0
 8003820:	2026      	movs	r0, #38	; 0x26
 8003822:	f002 fbc8 	bl	8005fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003826:	2026      	movs	r0, #38	; 0x26
 8003828:	f002 fbe1 	bl	8005fee <HAL_NVIC_EnableIRQ>
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}

08003830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <MX_I2C1_Init+0x74>)
 8003836:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <MX_I2C1_Init+0x78>)
 8003838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800383a:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <MX_I2C1_Init+0x74>)
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <MX_I2C1_Init+0x7c>)
 800383e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <MX_I2C1_Init+0x74>)
 8003842:	2200      	movs	r2, #0
 8003844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <MX_I2C1_Init+0x74>)
 8003848:	2201      	movs	r2, #1
 800384a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800384c:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <MX_I2C1_Init+0x74>)
 800384e:	2200      	movs	r2, #0
 8003850:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003852:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <MX_I2C1_Init+0x74>)
 8003854:	2200      	movs	r2, #0
 8003856:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <MX_I2C1_Init+0x74>)
 800385a:	2200      	movs	r2, #0
 800385c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <MX_I2C1_Init+0x74>)
 8003860:	2200      	movs	r2, #0
 8003862:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <MX_I2C1_Init+0x74>)
 8003866:	2200      	movs	r2, #0
 8003868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800386a:	480e      	ldr	r0, [pc, #56]	; (80038a4 <MX_I2C1_Init+0x74>)
 800386c:	f002 ff62 	bl	8006734 <HAL_I2C_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003876:	f000 fa5f 	bl	8003d38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800387a:	2100      	movs	r1, #0
 800387c:	4809      	ldr	r0, [pc, #36]	; (80038a4 <MX_I2C1_Init+0x74>)
 800387e:	f004 f871 	bl	8007964 <HAL_I2CEx_ConfigAnalogFilter>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003888:	f000 fa56 	bl	8003d38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800388c:	2100      	movs	r1, #0
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <MX_I2C1_Init+0x74>)
 8003890:	f004 f8b3 	bl	80079fa <HAL_I2CEx_ConfigDigitalFilter>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800389a:	f000 fa4d 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200005cc 	.word	0x200005cc
 80038a8:	40005400 	.word	0x40005400
 80038ac:	307075b1 	.word	0x307075b1

080038b0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <MX_SDMMC1_SD_Init+0x3c>)
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <MX_SDMMC1_SD_Init+0x40>)
 80038b8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <MX_SDMMC1_SD_Init+0x3c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <MX_SDMMC1_SD_Init+0x3c>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <MX_SDMMC1_SD_Init+0x3c>)
 80038c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038cc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <MX_SDMMC1_SD_Init+0x3c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <MX_SDMMC1_SD_Init+0x3c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <MX_SDMMC1_SD_Init+0x3c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000620 	.word	0x20000620
 80038f0:	50062400 	.word	0x50062400

080038f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <MX_SPI1_Init+0x74>)
 80038fa:	4a1c      	ldr	r2, [pc, #112]	; (800396c <MX_SPI1_Init+0x78>)
 80038fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <MX_SPI1_Init+0x74>)
 8003900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003906:	4b18      	ldr	r3, [pc, #96]	; (8003968 <MX_SPI1_Init+0x74>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800390c:	4b16      	ldr	r3, [pc, #88]	; (8003968 <MX_SPI1_Init+0x74>)
 800390e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003912:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <MX_SPI1_Init+0x74>)
 8003916:	2200      	movs	r2, #0
 8003918:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800391a:	4b13      	ldr	r3, [pc, #76]	; (8003968 <MX_SPI1_Init+0x74>)
 800391c:	2200      	movs	r2, #0
 800391e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <MX_SPI1_Init+0x74>)
 8003922:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003926:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <MX_SPI1_Init+0x74>)
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <MX_SPI1_Init+0x74>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <MX_SPI1_Init+0x74>)
 8003936:	2200      	movs	r2, #0
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <MX_SPI1_Init+0x74>)
 800393c:	2200      	movs	r2, #0
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003940:	4b09      	ldr	r3, [pc, #36]	; (8003968 <MX_SPI1_Init+0x74>)
 8003942:	2207      	movs	r2, #7
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <MX_SPI1_Init+0x74>)
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <MX_SPI1_Init+0x74>)
 800394e:	2208      	movs	r2, #8
 8003950:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003952:	4805      	ldr	r0, [pc, #20]	; (8003968 <MX_SPI1_Init+0x74>)
 8003954:	f009 fbcb 	bl	800d0ee <HAL_SPI_Init>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800395e:	f000 f9eb 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200006a0 	.word	0x200006a0
 800396c:	40013000 	.word	0x40013000

08003970 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b092      	sub	sp, #72	; 0x48
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	60da      	str	r2, [r3, #12]
 8003984:	611a      	str	r2, [r3, #16]
 8003986:	615a      	str	r2, [r3, #20]
 8003988:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800398a:	463b      	mov	r3, r7
 800398c:	222c      	movs	r2, #44	; 0x2c
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f013 f9f3 	bl	8016d7c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003996:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <MX_TIM17_Init+0xe4>)
 8003998:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <MX_TIM17_Init+0xe8>)
 800399a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 800399c:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <MX_TIM17_Init+0xe4>)
 800399e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039a2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a4:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <MX_TIM17_Init+0xe4>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 80039aa:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <MX_TIM17_Init+0xe4>)
 80039ac:	f642 62df 	movw	r2, #11999	; 0x2edf
 80039b0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b2:	4b28      	ldr	r3, [pc, #160]	; (8003a54 <MX_TIM17_Init+0xe4>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80039b8:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <MX_TIM17_Init+0xe4>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039be:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <MX_TIM17_Init+0xe4>)
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80039c4:	4823      	ldr	r0, [pc, #140]	; (8003a54 <MX_TIM17_Init+0xe4>)
 80039c6:	f009 fc35 	bl	800d234 <HAL_TIM_Base_Init>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80039d0:	f000 f9b2 	bl	8003d38 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80039d4:	481f      	ldr	r0, [pc, #124]	; (8003a54 <MX_TIM17_Init+0xe4>)
 80039d6:	f009 fcf5 	bl	800d3c4 <HAL_TIM_OC_Init>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80039e0:	f000 f9aa 	bl	8003d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ec:	2300      	movs	r3, #0
 80039ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039f0:	2300      	movs	r3, #0
 80039f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039f4:	2300      	movs	r3, #0
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039f8:	2300      	movs	r3, #0
 80039fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a04:	2200      	movs	r2, #0
 8003a06:	4619      	mov	r1, r3
 8003a08:	4812      	ldr	r0, [pc, #72]	; (8003a54 <MX_TIM17_Init+0xe4>)
 8003a0a:	f009 fe5b 	bl	800d6c4 <HAL_TIM_OC_ConfigChannel>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8003a14:	f000 f990 	bl	8003d38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003a36:	463b      	mov	r3, r7
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4806      	ldr	r0, [pc, #24]	; (8003a54 <MX_TIM17_Init+0xe4>)
 8003a3c:	f00a fa5e 	bl	800defc <HAL_TIMEx_ConfigBreakDeadTime>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8003a46:	f000 f977 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003a4a:	bf00      	nop
 8003a4c:	3748      	adds	r7, #72	; 0x48
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000704 	.word	0x20000704
 8003a58:	40014800 	.word	0x40014800

08003a5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a60:	4b22      	ldr	r3, [pc, #136]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003a62:	4a23      	ldr	r2, [pc, #140]	; (8003af0 <MX_USART1_UART_Init+0x94>)
 8003a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003a68:	4a22      	ldr	r2, [pc, #136]	; (8003af4 <MX_USART1_UART_Init+0x98>)
 8003a6a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a6c:	4b1f      	ldr	r3, [pc, #124]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a72:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003a80:	220c      	movs	r2, #12
 8003a82:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a8a:	4b18      	ldr	r3, [pc, #96]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a90:	4b16      	ldr	r3, [pc, #88]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003aa2:	4812      	ldr	r0, [pc, #72]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003aa4:	f00a fac6 	bl	800e034 <HAL_UART_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8003aae:	f000 f943 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	480d      	ldr	r0, [pc, #52]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003ab6:	f00b fbf4 	bl	800f2a2 <HAL_UARTEx_SetTxFifoThreshold>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8003ac0:	f000 f93a 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4809      	ldr	r0, [pc, #36]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003ac8:	f00b fc29 	bl	800f31e <HAL_UARTEx_SetRxFifoThreshold>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8003ad2:	f000 f931 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003ad6:	4805      	ldr	r0, [pc, #20]	; (8003aec <MX_USART1_UART_Init+0x90>)
 8003ad8:	f00b fbaa 	bl	800f230 <HAL_UARTEx_DisableFifoMode>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003ae2:	f000 f929 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000750 	.word	0x20000750
 8003af0:	40013800 	.word	0x40013800
 8003af4:	0001c138 	.word	0x0001c138

08003af8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003afc:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003afe:	4a25      	ldr	r2, [pc, #148]	; (8003b94 <MX_USART2_UART_Init+0x9c>)
 8003b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003b02:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b0a:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b1e:	220c      	movs	r2, #12
 8003b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b2e:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b34:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003b3a:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003b40:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b46:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b48:	4811      	ldr	r0, [pc, #68]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b4a:	f00a fa73 	bl	800e034 <HAL_UART_Init>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8003b54:	f000 f8f0 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b58:	2100      	movs	r1, #0
 8003b5a:	480d      	ldr	r0, [pc, #52]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b5c:	f00b fba1 	bl	800f2a2 <HAL_UARTEx_SetTxFifoThreshold>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8003b66:	f000 f8e7 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4808      	ldr	r0, [pc, #32]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b6e:	f00b fbd6 	bl	800f31e <HAL_UARTEx_SetRxFifoThreshold>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8003b78:	f000 f8de 	bl	8003d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003b7c:	4804      	ldr	r0, [pc, #16]	; (8003b90 <MX_USART2_UART_Init+0x98>)
 8003b7e:	f00b fb57 	bl	800f230 <HAL_UARTEx_DisableFifoMode>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8003b88:	f000 f8d6 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	200007e0 	.word	0x200007e0
 8003b94:	40004400 	.word	0x40004400

08003b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	; 0x30
 8003b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9e:	f107 031c 	add.w	r3, r7, #28
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
 8003baa:	60da      	str	r2, [r3, #12]
 8003bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bae:	4b5d      	ldr	r3, [pc, #372]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	4a5c      	ldr	r2, [pc, #368]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003bb4:	f043 0310 	orr.w	r3, r3, #16
 8003bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bba:	4b5a      	ldr	r3, [pc, #360]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc6:	4b57      	ldr	r3, [pc, #348]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	4a56      	ldr	r2, [pc, #344]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003bcc:	f043 0304 	orr.w	r3, r3, #4
 8003bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bd2:	4b54      	ldr	r3, [pc, #336]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bde:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	4a50      	ldr	r2, [pc, #320]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bea:	4b4e      	ldr	r3, [pc, #312]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf6:	4b4b      	ldr	r3, [pc, #300]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfa:	4a4a      	ldr	r2, [pc, #296]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c02:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c0e:	4b45      	ldr	r3, [pc, #276]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c12:	4a44      	ldr	r2, [pc, #272]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003c14:	f043 0302 	orr.w	r3, r3, #2
 8003c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c1a:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c26:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	4a3e      	ldr	r2, [pc, #248]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003c2c:	f043 0308 	orr.w	r3, r3, #8
 8003c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c32:	4b3c      	ldr	r3, [pc, #240]	; (8003d24 <MX_GPIO_Init+0x18c>)
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f641 013c 	movw	r1, #6204	; 0x183c
 8003c44:	4838      	ldr	r0, [pc, #224]	; (8003d28 <MX_GPIO_Init+0x190>)
 8003c46:	f002 fd43 	bl	80066d0 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2130      	movs	r1, #48	; 0x30
 8003c4e:	4837      	ldr	r0, [pc, #220]	; (8003d2c <MX_GPIO_Init+0x194>)
 8003c50:	f002 fd3e 	bl	80066d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003c54:	2200      	movs	r2, #0
 8003c56:	2178      	movs	r1, #120	; 0x78
 8003c58:	4835      	ldr	r0, [pc, #212]	; (8003d30 <MX_GPIO_Init+0x198>)
 8003c5a:	f002 fd39 	bl	80066d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8003c5e:	f641 033c 	movw	r3, #6204	; 0x183c
 8003c62:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c64:	2301      	movs	r3, #1
 8003c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c70:	f107 031c 	add.w	r3, r7, #28
 8003c74:	4619      	mov	r1, r3
 8003c76:	482c      	ldr	r0, [pc, #176]	; (8003d28 <MX_GPIO_Init+0x190>)
 8003c78:	f002 fa8e 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8003c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8003c8a:	f107 031c 	add.w	r3, r7, #28
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4826      	ldr	r0, [pc, #152]	; (8003d2c <MX_GPIO_Init+0x194>)
 8003c92:	f002 fa81 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 8003c96:	f248 0302 	movw	r3, #32770	; 0x8002
 8003c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca4:	f107 031c 	add.w	r3, r7, #28
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cae:	f002 fa73 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8003cb2:	2330      	movs	r3, #48	; 0x30
 8003cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cc2:	f107 031c 	add.w	r3, r7, #28
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4818      	ldr	r0, [pc, #96]	; (8003d2c <MX_GPIO_Init+0x194>)
 8003cca:	f002 fa65 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8003cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8003cdc:	f107 031c 	add.w	r3, r7, #28
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4811      	ldr	r0, [pc, #68]	; (8003d28 <MX_GPIO_Init+0x190>)
 8003ce4:	f002 fa58 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8003ce8:	2378      	movs	r3, #120	; 0x78
 8003cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cec:	2301      	movs	r3, #1
 8003cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cf8:	f107 031c 	add.w	r3, r7, #28
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	480c      	ldr	r0, [pc, #48]	; (8003d30 <MX_GPIO_Init+0x198>)
 8003d00:	f002 fa4a 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8003d04:	2320      	movs	r3, #32
 8003d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8003d10:	f107 031c 	add.w	r3, r7, #28
 8003d14:	4619      	mov	r1, r3
 8003d16:	4807      	ldr	r0, [pc, #28]	; (8003d34 <MX_GPIO_Init+0x19c>)
 8003d18:	f002 fa3e 	bl	8006198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d1c:	bf00      	nop
 8003d1e:	3730      	adds	r7, #48	; 0x30
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000
 8003d28:	48001000 	.word	0x48001000
 8003d2c:	48000800 	.word	0x48000800
 8003d30:	48000c00 	.word	0x48000c00
 8003d34:	48000400 	.word	0x48000400

08003d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d3c:	b672      	cpsid	i
}
 8003d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8003d40:	4801      	ldr	r0, [pc, #4]	; (8003d48 <Error_Handler+0x10>)
 8003d42:	f013 fd6d 	bl	8017820 <iprintf>
  while (1)
 8003d46:	e7fe      	b.n	8003d46 <Error_Handler+0xe>
 8003d48:	08019ee8 	.word	0x08019ee8

08003d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_MspInit+0x44>)
 8003d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d56:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <HAL_MspInit+0x44>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <HAL_MspInit+0x44>)
 8003d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_MspInit+0x44>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <HAL_MspInit+0x44>)
 8003d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d74:	6593      	str	r3, [r2, #88]	; 0x58
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_MspInit+0x44>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000

08003d94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b0ae      	sub	sp, #184	; 0xb8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dac:	f107 0310 	add.w	r3, r7, #16
 8003db0:	2294      	movs	r2, #148	; 0x94
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f012 ffe1 	bl	8016d7c <memset>
  if(hi2c->Instance==I2C1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a21      	ldr	r2, [pc, #132]	; (8003e44 <HAL_I2C_MspInit+0xb0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d13a      	bne.n	8003e3a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003dc4:	2340      	movs	r3, #64	; 0x40
 8003dc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dcc:	f107 0310 	add.w	r3, r7, #16
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f006 f801 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003ddc:	f7ff ffac 	bl	8003d38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_I2C_MspInit+0xb4>)
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <HAL_I2C_MspInit+0xb4>)
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dec:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <HAL_I2C_MspInit+0xb4>)
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003df8:	23c0      	movs	r3, #192	; 0xc0
 8003dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dfe:	2312      	movs	r3, #18
 8003e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e10:	2304      	movs	r3, #4
 8003e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	480b      	ldr	r0, [pc, #44]	; (8003e4c <HAL_I2C_MspInit+0xb8>)
 8003e1e:	f002 f9bb 	bl	8006198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_I2C_MspInit+0xb4>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	4a08      	ldr	r2, [pc, #32]	; (8003e48 <HAL_I2C_MspInit+0xb4>)
 8003e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_I2C_MspInit+0xb4>)
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e3a:	bf00      	nop
 8003e3c:	37b8      	adds	r7, #184	; 0xb8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40005400 	.word	0x40005400
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	48000400 	.word	0x48000400

08003e50 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <HAL_I2C_MspDeInit+0x38>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10d      	bne.n	8003e7e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_I2C_MspDeInit+0x3c>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <HAL_I2C_MspDeInit+0x3c>)
 8003e68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e6c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003e6e:	2140      	movs	r1, #64	; 0x40
 8003e70:	4807      	ldr	r0, [pc, #28]	; (8003e90 <HAL_I2C_MspDeInit+0x40>)
 8003e72:	f002 fb23 	bl	80064bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003e76:	2180      	movs	r1, #128	; 0x80
 8003e78:	4805      	ldr	r0, [pc, #20]	; (8003e90 <HAL_I2C_MspDeInit+0x40>)
 8003e7a:	f002 fb1f 	bl	80064bc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40005400 	.word	0x40005400
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	48000400 	.word	0x48000400

08003e94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b0b0      	sub	sp, #192	; 0xc0
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003eac:	f107 0318 	add.w	r3, r7, #24
 8003eb0:	2294      	movs	r2, #148	; 0x94
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f012 ff61 	bl	8016d7c <memset>
  if(hsd->Instance==SDMMC1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a33      	ldr	r2, [pc, #204]	; (8003f8c <HAL_SD_MspInit+0xf8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d15e      	bne.n	8003f82 <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8003ec4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ec8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ed0:	f107 0318 	add.w	r3, r7, #24
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f005 ff7f 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8003ee0:	f7ff ff2a 	bl	8003d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003ee4:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <HAL_SD_MspInit+0xfc>)
 8003ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee8:	4a29      	ldr	r2, [pc, #164]	; (8003f90 <HAL_SD_MspInit+0xfc>)
 8003eea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ef0:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_SD_MspInit+0xfc>)
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efc:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <HAL_SD_MspInit+0xfc>)
 8003efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <HAL_SD_MspInit+0xfc>)
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <HAL_SD_MspInit+0xfc>)
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f14:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <HAL_SD_MspInit+0xfc>)
 8003f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f18:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <HAL_SD_MspInit+0xfc>)
 8003f1a:	f043 0308 	orr.w	r3, r3, #8
 8003f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_SD_MspInit+0xfc>)
 8003f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003f2c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f34:	2302      	movs	r3, #2
 8003f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f40:	2303      	movs	r3, #3
 8003f42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003f46:	230c      	movs	r3, #12
 8003f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f50:	4619      	mov	r1, r3
 8003f52:	4810      	ldr	r0, [pc, #64]	; (8003f94 <HAL_SD_MspInit+0x100>)
 8003f54:	f002 f920 	bl	8006198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f58:	2304      	movs	r3, #4
 8003f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003f70:	230c      	movs	r3, #12
 8003f72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4806      	ldr	r0, [pc, #24]	; (8003f98 <HAL_SD_MspInit+0x104>)
 8003f7e:	f002 f90b 	bl	8006198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003f82:	bf00      	nop
 8003f84:	37c0      	adds	r7, #192	; 0xc0
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	50062400 	.word	0x50062400
 8003f90:	40021000 	.word	0x40021000
 8003f94:	48000800 	.word	0x48000800
 8003f98:	48000c00 	.word	0x48000c00

08003f9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa4:	f107 0314 	add.w	r3, r7, #20
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_SPI_MspInit+0x7c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d128      	bne.n	8004010 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fbe:	4b17      	ldr	r3, [pc, #92]	; (800401c <HAL_SPI_MspInit+0x80>)
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc2:	4a16      	ldr	r2, [pc, #88]	; (800401c <HAL_SPI_MspInit+0x80>)
 8003fc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fc8:	6613      	str	r3, [r2, #96]	; 0x60
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <HAL_SPI_MspInit+0x80>)
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_SPI_MspInit+0x80>)
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	4a10      	ldr	r2, [pc, #64]	; (800401c <HAL_SPI_MspInit+0x80>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <HAL_SPI_MspInit+0x80>)
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003fee:	23f0      	movs	r3, #240	; 0xf0
 8003ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ffe:	2305      	movs	r3, #5
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	4619      	mov	r1, r3
 8004008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800400c:	f002 f8c4 	bl	8006198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004010:	bf00      	nop
 8004012:	3728      	adds	r7, #40	; 0x28
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40013000 	.word	0x40013000
 800401c:	40021000 	.word	0x40021000

08004020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0a      	ldr	r2, [pc, #40]	; (8004058 <HAL_TIM_Base_MspInit+0x38>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10b      	bne.n	800404a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <HAL_TIM_Base_MspInit+0x3c>)
 8004034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004036:	4a09      	ldr	r2, [pc, #36]	; (800405c <HAL_TIM_Base_MspInit+0x3c>)
 8004038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800403c:	6613      	str	r3, [r2, #96]	; 0x60
 800403e:	4b07      	ldr	r3, [pc, #28]	; (800405c <HAL_TIM_Base_MspInit+0x3c>)
 8004040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40014800 	.word	0x40014800
 800405c:	40021000 	.word	0x40021000

08004060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b0b0      	sub	sp, #192	; 0xc0
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004068:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004078:	f107 0318 	add.w	r3, r7, #24
 800407c:	2294      	movs	r2, #148	; 0x94
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f012 fe7b 	bl	8016d7c <memset>
  if(huart->Instance==USART1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a43      	ldr	r2, [pc, #268]	; (8004198 <HAL_UART_MspInit+0x138>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d13d      	bne.n	800410c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004090:	2301      	movs	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004094:	2300      	movs	r3, #0
 8004096:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004098:	f107 0318 	add.w	r3, r7, #24
 800409c:	4618      	mov	r0, r3
 800409e:	f005 fe9b 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80040a8:	f7ff fe46 	bl	8003d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040ac:	4b3b      	ldr	r3, [pc, #236]	; (800419c <HAL_UART_MspInit+0x13c>)
 80040ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b0:	4a3a      	ldr	r2, [pc, #232]	; (800419c <HAL_UART_MspInit+0x13c>)
 80040b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040b6:	6613      	str	r3, [r2, #96]	; 0x60
 80040b8:	4b38      	ldr	r3, [pc, #224]	; (800419c <HAL_UART_MspInit+0x13c>)
 80040ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c4:	4b35      	ldr	r3, [pc, #212]	; (800419c <HAL_UART_MspInit+0x13c>)
 80040c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c8:	4a34      	ldr	r2, [pc, #208]	; (800419c <HAL_UART_MspInit+0x13c>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040d0:	4b32      	ldr	r3, [pc, #200]	; (800419c <HAL_UART_MspInit+0x13c>)
 80040d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80040dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e4:	2302      	movs	r3, #2
 80040e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f0:	2303      	movs	r3, #3
 80040f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040f6:	2307      	movs	r3, #7
 80040f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004100:	4619      	mov	r1, r3
 8004102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004106:	f002 f847 	bl	8006198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800410a:	e040      	b.n	800418e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a23      	ldr	r2, [pc, #140]	; (80041a0 <HAL_UART_MspInit+0x140>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d13b      	bne.n	800418e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004116:	2302      	movs	r3, #2
 8004118:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800411a:	2300      	movs	r3, #0
 800411c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800411e:	f107 0318 	add.w	r3, r7, #24
 8004122:	4618      	mov	r0, r3
 8004124:	f005 fe58 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800412e:	f7ff fe03 	bl	8003d38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_UART_MspInit+0x13c>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	4a19      	ldr	r2, [pc, #100]	; (800419c <HAL_UART_MspInit+0x13c>)
 8004138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800413c:	6593      	str	r3, [r2, #88]	; 0x58
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <HAL_UART_MspInit+0x13c>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800414a:	4b14      	ldr	r3, [pc, #80]	; (800419c <HAL_UART_MspInit+0x13c>)
 800414c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414e:	4a13      	ldr	r2, [pc, #76]	; (800419c <HAL_UART_MspInit+0x13c>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <HAL_UART_MspInit+0x13c>)
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8004162:	230c      	movs	r3, #12
 8004164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004168:	2302      	movs	r3, #2
 800416a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004174:	2303      	movs	r3, #3
 8004176:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800417a:	2307      	movs	r3, #7
 800417c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004180:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004184:	4619      	mov	r1, r3
 8004186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800418a:	f002 f805 	bl	8006198 <HAL_GPIO_Init>
}
 800418e:	bf00      	nop
 8004190:	37c0      	adds	r7, #192	; 0xc0
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40013800 	.word	0x40013800
 800419c:	40021000 	.word	0x40021000
 80041a0:	40004400 	.word	0x40004400

080041a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80041a8:	f005 fd3a 	bl	8009c20 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041ac:	e7fe      	b.n	80041ac <NMI_Handler+0x8>

080041ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041ae:	b480      	push	{r7}
 80041b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041b2:	e7fe      	b.n	80041b2 <HardFault_Handler+0x4>

080041b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041b8:	e7fe      	b.n	80041b8 <MemManage_Handler+0x4>

080041ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041be:	e7fe      	b.n	80041be <BusFault_Handler+0x4>

080041c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041c4:	e7fe      	b.n	80041c4 <UsageFault_Handler+0x4>

080041c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041c6:	b480      	push	{r7}
 80041c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041f4:	f001 fdc0 	bl	8005d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041f8:	bf00      	nop
 80041fa:	bd80      	pop	{r7, pc}

080041fc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
  if (tick) {tick--;}
 8004200:	4b0e      	ldr	r3, [pc, #56]	; (800423c <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d006      	beq.n	8004218 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 800420a:	4b0c      	ldr	r3, [pc, #48]	; (800423c <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b2da      	uxtb	r2, r3
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8004216:	701a      	strb	r2, [r3, #0]
  if (tickGPS) {tickGPS--;}
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d006      	beq.n	8004230 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b2da      	uxtb	r2, r3
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 800422e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004230:	4804      	ldr	r0, [pc, #16]	; (8004244 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 8004232:	f009 f928 	bl	800d486 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000ebc 	.word	0x20000ebc
 8004240:	20000ebd 	.word	0x20000ebd
 8004244:	20000704 	.word	0x20000704

08004248 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

    char c = huart2.Instance->RDR;
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <USART2_IRQHandler+0x90>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004254:	b29b      	uxth	r3, r3
 8004256:	71fb      	strb	r3, [r7, #7]
    if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <USART2_IRQHandler+0x94>)
 800425a:	781b      	ldrb	r3, [r3, #0]
    	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 800425c:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <USART2_IRQHandler+0x98>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <USART2_IRQHandler+0x94>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	1c59      	adds	r1, r3, #1
 8004268:	b2c8      	uxtb	r0, r1
 800426a:	491c      	ldr	r1, [pc, #112]	; (80042dc <USART2_IRQHandler+0x94>)
 800426c:	7008      	strb	r0, [r1, #0]
 800426e:	4413      	add	r3, r2
 8004270:	79fa      	ldrb	r2, [r7, #7]
 8004272:	701a      	strb	r2, [r3, #0]

    if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	2b0a      	cmp	r3, #10
 8004278:	d126      	bne.n	80042c8 <USART2_IRQHandler+0x80>
 800427a:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <USART2_IRQHandler+0x9c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d022      	beq.n	80042c8 <USART2_IRQHandler+0x80>
    {
    	//tickGPS = 1;
    	gps_rxBuffer[gps_rxBufferPos] = 0;
 8004282:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <USART2_IRQHandler+0x98>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a15      	ldr	r2, [pc, #84]	; (80042dc <USART2_IRQHandler+0x94>)
 8004288:	7812      	ldrb	r2, [r2, #0]
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	4413      	add	r3, r2
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
    	gps_data_ready |= 1;
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <USART2_IRQHandler+0xa0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <USART2_IRQHandler+0xa0>)
 800429c:	6013      	str	r3, [r2, #0]
    	gps_send_ready ^= 1;
 800429e:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <USART2_IRQHandler+0x9c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f083 0301 	eor.w	r3, r3, #1
 80042a6:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <USART2_IRQHandler+0x9c>)
 80042a8:	6013      	str	r3, [r2, #0]
    	gps_rxBufferPos = 0;
 80042aa:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <USART2_IRQHandler+0x94>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <USART2_IRQHandler+0x98>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <USART2_IRQHandler+0xa4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d103      	bne.n	80042c2 <USART2_IRQHandler+0x7a>
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <USART2_IRQHandler+0x98>)
 80042bc:	4a0c      	ldr	r2, [pc, #48]	; (80042f0 <USART2_IRQHandler+0xa8>)
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e002      	b.n	80042c8 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <USART2_IRQHandler+0x98>)
 80042c4:	4a09      	ldr	r2, [pc, #36]	; (80042ec <USART2_IRQHandler+0xa4>)
 80042c6:	601a      	str	r2, [r3, #0]

    //HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	  //rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042c8:	4803      	ldr	r0, [pc, #12]	; (80042d8 <USART2_IRQHandler+0x90>)
 80042ca:	f009 ff03 	bl	800e0d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200007e0 	.word	0x200007e0
 80042dc:	20000eb4 	.word	0x20000eb4
 80042e0:	20000eb0 	.word	0x20000eb0
 80042e4:	20000000 	.word	0x20000000
 80042e8:	20000eb8 	.word	0x20000eb8
 80042ec:	20000870 	.word	0x20000870
 80042f0:	20000b90 	.word	0x20000b90

080042f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80042f8:	4802      	ldr	r0, [pc, #8]	; (8004304 <OTG_FS_IRQHandler+0x10>)
 80042fa:	f003 fd1d 	bl	8007d38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20002834 	.word	0x20002834

08004308 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <SystemInit+0x20>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	4a05      	ldr	r2, [pc, #20]	; (8004328 <SystemInit+0x20>)
 8004314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800431c:	bf00      	nop
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800432c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004364 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004330:	f7ff ffea 	bl	8004308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004334:	480c      	ldr	r0, [pc, #48]	; (8004368 <LoopForever+0x6>)
  ldr r1, =_edata
 8004336:	490d      	ldr	r1, [pc, #52]	; (800436c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004338:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <LoopForever+0xe>)
  movs r3, #0
 800433a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800433c:	e002      	b.n	8004344 <LoopCopyDataInit>

0800433e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800433e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004342:	3304      	adds	r3, #4

08004344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004348:	d3f9      	bcc.n	800433e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800434a:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800434c:	4c0a      	ldr	r4, [pc, #40]	; (8004378 <LoopForever+0x16>)
  movs r3, #0
 800434e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004350:	e001      	b.n	8004356 <LoopFillZerobss>

08004352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004354:	3204      	adds	r2, #4

08004356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004358:	d3fb      	bcc.n	8004352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800435a:	f012 fcd5 	bl	8016d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800435e:	f7fe fd4b 	bl	8002df8 <main>

08004362 <LoopForever>:

LoopForever:
    b LoopForever
 8004362:	e7fe      	b.n	8004362 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004364:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800436c:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8004370:	0801a4a0 	.word	0x0801a4a0
  ldr r2, =_sbss
 8004374:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8004378:	20002f74 	.word	0x20002f74

0800437c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800437c:	e7fe      	b.n	800437c <ADC1_IRQHandler>
	...

08004380 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d103      	bne.n	800439c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8004394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	e051      	b.n	8004440 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	7b1a      	ldrb	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <LSM6DSO_RegisterBusIO+0xcc>)
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a1c      	ldr	r2, [pc, #112]	; (8004450 <LSM6DSO_RegisterBusIO+0xd0>)
 80043de:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d103      	bne.n	80043fe <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e020      	b.n	8004440 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4798      	blx	r3
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	e016      	b.n	8004440 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d112      	bne.n	8004440 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10d      	bne.n	8004440 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004424:	230c      	movs	r3, #12
 8004426:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8004428:	7afb      	ldrb	r3, [r7, #11]
 800442a:	461a      	mov	r2, r3
 800442c:	2112      	movs	r1, #18
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fc98 	bl	8004d64 <LSM6DSO_Write_Reg>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 800443a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800443e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004440:	68fb      	ldr	r3, [r7, #12]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	08005209 	.word	0x08005209
 8004450:	0800523f 	.word	0x0800523f

08004454 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3320      	adds	r3, #32
 8004460:	2180      	movs	r1, #128	; 0x80
 8004462:	4618      	mov	r0, r3
 8004464:	f001 fb5e 	bl	8005b24 <lsm6dso_i3c_disable_set>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004472:	e060      	b.n	8004536 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3320      	adds	r3, #32
 8004478:	2101      	movs	r1, #1
 800447a:	4618      	mov	r0, r3
 800447c:	f001 fb2c 	bl	8005ad8 <lsm6dso_auto_increment_set>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800448a:	e054      	b.n	8004536 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3320      	adds	r3, #32
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f001 fa3e 	bl	8005914 <lsm6dso_block_data_update_set>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044a2:	e048      	b.n	8004536 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3320      	adds	r3, #32
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 fb80 	bl	8005bb0 <lsm6dso_fifo_mode_set>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ba:	e03c      	b.n	8004536 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2204      	movs	r2, #4
 80044c0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3320      	adds	r3, #32
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 ff60 	bl	8005390 <lsm6dso_xl_data_rate_set>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044da:	e02c      	b.n	8004536 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3320      	adds	r3, #32
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fef6 	bl	80052d4 <lsm6dso_xl_full_scale_set>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 80044ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044f2:	e020      	b.n	8004536 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2204      	movs	r2, #4
 80044f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3320      	adds	r3, #32
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f001 f8a8 	bl	8005658 <lsm6dso_gy_data_rate_set>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 800450e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004512:	e010      	b.n	8004536 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3320      	adds	r3, #32
 8004518:	2106      	movs	r1, #6
 800451a:	4618      	mov	r0, r3
 800451c:	f001 f834 	bl	8005588 <lsm6dso_gy_full_scale_set>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8004526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800452a:	e004      	b.n	8004536 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e014      	b.n	800457e <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f103 0220 	add.w	r2, r3, #32
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004560:	4619      	mov	r1, r3
 8004562:	4610      	mov	r0, r2
 8004564:	f000 ff14 	bl	8005390 <lsm6dso_xl_data_rate_set>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800456e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004572:	e004      	b.n	800457e <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3320      	adds	r3, #32
 800459a:	f107 020b 	add.w	r2, r7, #11
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 febd 	bl	8005320 <lsm6dso_xl_full_scale_get>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045b0:	e023      	b.n	80045fa <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80045b2:	7afb      	ldrb	r3, [r7, #11]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d81b      	bhi.n	80045f0 <LSM6DSO_ACC_GetSensitivity+0x68>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045e1 	.word	0x080045e1
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80045d4:	601a      	str	r2, [r3, #0]
      break;
 80045d6:	e00f      	b.n	80045f8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4a0b      	ldr	r2, [pc, #44]	; (8004608 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80045dc:	601a      	str	r2, [r3, #0]
      break;
 80045de:	e00b      	b.n	80045f8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <LSM6DSO_ACC_GetSensitivity+0x84>)
 80045e4:	601a      	str	r2, [r3, #0]
      break;
 80045e6:	e007      	b.n	80045f8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80045ec:	601a      	str	r2, [r3, #0]
      break;
 80045ee:	e003      	b.n	80045f8 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045f4:	60fb      	str	r3, [r7, #12]
      break;
 80045f6:	bf00      	nop
  }

  return ret;
 80045f8:	68fb      	ldr	r3, [r7, #12]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	3d79db23 	.word	0x3d79db23
 8004608:	3df9db23 	.word	0x3df9db23
 800460c:	3e79db23 	.word	0x3e79db23
 8004610:	3ef9db23 	.word	0x3ef9db23

08004614 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8004620:	2100      	movs	r1, #0
 8004622:	ed97 0a00 	vldr	s0, [r7]
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f806 	bl	8004638 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 800462c:	4603      	mov	r3, r0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08c      	sub	sp, #48	; 0x30
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	ed87 0a02 	vstr	s0, [r7, #8]
 8004644:	460b      	mov	r3, r1
 8004646:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	2b02      	cmp	r3, #2
 8004654:	f000 80ea 	beq.w	800482c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8004658:	2b02      	cmp	r3, #2
 800465a:	f300 8163 	bgt.w	8004924 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8004662:	2b01      	cmp	r3, #1
 8004664:	d074      	beq.n	8004750 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8004666:	e15d      	b.n	8004924 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f103 0020 	add.w	r0, r3, #32
 800466e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004672:	2301      	movs	r3, #1
 8004674:	2114      	movs	r1, #20
 8004676:	f000 fdfd 	bl	8005274 <lsm6dso_read_reg>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8004680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004684:	e16c      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800468a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d025      	beq.n	80046e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800469a:	2b01      	cmp	r3, #1
 800469c:	d10b      	bne.n	80046b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3320      	adds	r3, #32
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fe73 	bl	8005390 <lsm6dso_xl_data_rate_set>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80046b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046b4:	e154      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80046b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80046ba:	f36f 13c7 	bfc	r3, #7, #1
 80046be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f103 0020 	add.w	r0, r3, #32
 80046c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80046cc:	2301      	movs	r3, #1
 80046ce:	2114      	movs	r1, #20
 80046d0:	f000 fde8 	bl	80052a4 <lsm6dso_write_reg>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80046da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046de:	e13f      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f103 0020 	add.w	r0, r3, #32
 80046e6:	f107 0220 	add.w	r2, r7, #32
 80046ea:	2301      	movs	r3, #1
 80046ec:	2115      	movs	r1, #21
 80046ee:	f000 fdc1 	bl	8005274 <lsm6dso_read_reg>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046fc:	e130      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80046fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d014      	beq.n	8004736 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 800470c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004710:	f36f 1304 	bfc	r3, #4, #1
 8004714:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f103 0020 	add.w	r0, r3, #32
 800471e:	f107 0220 	add.w	r2, r7, #32
 8004722:	2301      	movs	r3, #1
 8004724:	2115      	movs	r1, #21
 8004726:	f000 fdbd 	bl	80052a4 <lsm6dso_write_reg>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8004730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004734:	e114      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8004736:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800473a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800473e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	d400      	bmi.n	800474a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8004748:	e0f0      	b.n	800492c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 800474a:	4b87      	ldr	r3, [pc, #540]	; (8004968 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
 800474e:	e0ed      	b.n	800492c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f103 0020 	add.w	r0, r3, #32
 8004756:	f107 021c 	add.w	r2, r7, #28
 800475a:	2301      	movs	r3, #1
 800475c:	2114      	movs	r1, #20
 800475e:	f000 fd89 	bl	8005274 <lsm6dso_read_reg>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800476c:	e0f8      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800476e:	7f3b      	ldrb	r3, [r7, #28]
 8004770:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d023      	beq.n	80047c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004780:	2b01      	cmp	r3, #1
 8004782:	d10b      	bne.n	800479c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3320      	adds	r3, #32
 8004788:	2100      	movs	r1, #0
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fe00 	bl	8005390 <lsm6dso_xl_data_rate_set>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8004796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800479a:	e0e1      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800479c:	7f3b      	ldrb	r3, [r7, #28]
 800479e:	f36f 13c7 	bfc	r3, #7, #1
 80047a2:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f103 0020 	add.w	r0, r3, #32
 80047aa:	f107 021c 	add.w	r2, r7, #28
 80047ae:	2301      	movs	r3, #1
 80047b0:	2114      	movs	r1, #20
 80047b2:	f000 fd77 	bl	80052a4 <lsm6dso_write_reg>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 80047bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047c0:	e0ce      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f103 0020 	add.w	r0, r3, #32
 80047c8:	f107 0218 	add.w	r2, r7, #24
 80047cc:	2301      	movs	r3, #1
 80047ce:	2115      	movs	r1, #21
 80047d0:	f000 fd50 	bl	8005274 <lsm6dso_read_reg>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80047da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047de:	e0bf      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80047e0:	7e3b      	ldrb	r3, [r7, #24]
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d112      	bne.n	8004812 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80047ec:	7e3b      	ldrb	r3, [r7, #24]
 80047ee:	f043 0310 	orr.w	r3, r3, #16
 80047f2:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f103 0020 	add.w	r0, r3, #32
 80047fa:	f107 0218 	add.w	r2, r7, #24
 80047fe:	2301      	movs	r3, #1
 8004800:	2115      	movs	r1, #21
 8004802:	f000 fd4f 	bl	80052a4 <lsm6dso_write_reg>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 800480c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004810:	e0a6      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004812:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004816:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800496c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800481a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004822:	dc00      	bgt.n	8004826 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8004824:	e082      	b.n	800492c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004826:	4b52      	ldr	r3, [pc, #328]	; (8004970 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
 800482a:	e07f      	b.n	800492c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f103 0020 	add.w	r0, r3, #32
 8004832:	f107 0210 	add.w	r2, r7, #16
 8004836:	2301      	movs	r3, #1
 8004838:	2115      	movs	r1, #21
 800483a:	f000 fd1b 	bl	8005274 <lsm6dso_read_reg>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8004844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004848:	e08a      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800484a:	7c3b      	ldrb	r3, [r7, #16]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d012      	beq.n	800487c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8004856:	7c3b      	ldrb	r3, [r7, #16]
 8004858:	f36f 1304 	bfc	r3, #4, #1
 800485c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f103 0020 	add.w	r0, r3, #32
 8004864:	f107 0210 	add.w	r2, r7, #16
 8004868:	2301      	movs	r3, #1
 800486a:	2115      	movs	r1, #21
 800486c:	f000 fd1a 	bl	80052a4 <lsm6dso_write_reg>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800487a:	e071      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004882:	2b01      	cmp	r3, #1
 8004884:	d108      	bne.n	8004898 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f8ef 	bl	8004a6a <LSM6DSO_GYRO_Disable>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8004892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004896:	e063      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f103 0020 	add.w	r0, r3, #32
 800489e:	f107 0214 	add.w	r2, r7, #20
 80048a2:	2301      	movs	r3, #1
 80048a4:	2114      	movs	r1, #20
 80048a6:	f000 fce5 	bl	8005274 <lsm6dso_read_reg>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 80048b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b4:	e054      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 80048b6:	7d3b      	ldrb	r3, [r7, #20]
 80048b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d123      	bne.n	800490a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d10b      	bne.n	80048e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3320      	adds	r3, #32
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fd5c 	bl	8005390 <lsm6dso_xl_data_rate_set>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 80048de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048e2:	e03d      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80048e4:	7d3b      	ldrb	r3, [r7, #20]
 80048e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ea:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f103 0020 	add.w	r0, r3, #32
 80048f2:	f107 0214 	add.w	r2, r7, #20
 80048f6:	2301      	movs	r3, #1
 80048f8:	2114      	movs	r1, #20
 80048fa:	f000 fcd3 	bl	80052a4 <lsm6dso_write_reg>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8004904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004908:	e02a      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800490a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800490e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800496c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491a:	dc00      	bgt.n	800491e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 800491c:	e006      	b.n	800492c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800491e:	4b14      	ldr	r3, [pc, #80]	; (8004970 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
 8004922:	e003      	b.n	800492c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800492a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004932:	d102      	bne.n	800493a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8004934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004938:	e012      	b.n	8004960 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004940:	2b01      	cmp	r3, #1
 8004942:	d106      	bne.n	8004952 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004944:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fa27 	bl	8004d9c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800494e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004950:	e005      	b.n	800495e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004952:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 fab8 	bl	8004ecc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 800495c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004960:	4618      	mov	r0, r3
 8004962:	3730      	adds	r7, #48	; 0x30
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	41480000 	.word	0x41480000
 800496c:	43500000 	.word	0x43500000
 8004970:	43500000 	.word	0x43500000

08004974 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3320      	adds	r3, #32
 8004988:	f107 0210 	add.w	r2, r7, #16
 800498c:	4611      	mov	r1, r2
 800498e:	4618      	mov	r0, r3
 8004990:	f001 f831 	bl	80059f6 <lsm6dso_acceleration_raw_get>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 800499a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800499e:	e03c      	b.n	8004a1a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80049a0:	f107 030c 	add.w	r3, r7, #12
 80049a4:	4619      	mov	r1, r3
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff fdee 	bl	8004588 <LSM6DSO_ACC_GetSensitivity>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049b6:	e030      	b.n	8004a1a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80049b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049bc:	ee07 3a90 	vmov	s15, r3
 80049c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80049c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049d0:	ee17 2a90 	vmov	r2, s15
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80049d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80049e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049f0:	ee17 2a90 	vmov	r2, s15
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80049f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a04:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a10:	ee17 2a90 	vmov	r2, s15
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	e014      	b.n	8004a62 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f103 0220 	add.w	r2, r3, #32
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a44:	4619      	mov	r1, r3
 8004a46:	4610      	mov	r0, r2
 8004a48:	f000 fe06 	bl	8005658 <lsm6dso_gy_data_rate_set>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a56:	e004      	b.n	8004a62 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e01f      	b.n	8004ac0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f103 0220 	add.w	r2, r3, #32
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3334      	adds	r3, #52	; 0x34
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f000 fedf 	bl	8005850 <lsm6dso_gy_data_rate_get>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a9c:	e010      	b.n	8004ac0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3320      	adds	r3, #32
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fdd7 	bl	8005658 <lsm6dso_gy_data_rate_set>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8004ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ab4:	e004      	b.n	8004ac0 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3320      	adds	r3, #32
 8004ada:	f107 020b 	add.w	r2, r7, #11
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fd77 	bl	80055d4 <lsm6dso_gy_full_scale_get>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004af0:	e02d      	b.n	8004b4e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004af2:	7afb      	ldrb	r3, [r7, #11]
 8004af4:	2b06      	cmp	r3, #6
 8004af6:	d825      	bhi.n	8004b44 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b1d 	.word	0x08004b1d
 8004b08:	08004b2d 	.word	0x08004b2d
 8004b0c:	08004b45 	.word	0x08004b45
 8004b10:	08004b35 	.word	0x08004b35
 8004b14:	08004b45 	.word	0x08004b45
 8004b18:	08004b3d 	.word	0x08004b3d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	4a0e      	ldr	r2, [pc, #56]	; (8004b58 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004b20:	601a      	str	r2, [r3, #0]
      break;
 8004b22:	e013      	b.n	8004b4c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004b28:	601a      	str	r2, [r3, #0]
      break;
 8004b2a:	e00f      	b.n	8004b4c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	4a0c      	ldr	r2, [pc, #48]	; (8004b60 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004b30:	601a      	str	r2, [r3, #0]
      break;
 8004b32:	e00b      	b.n	8004b4c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	4a0b      	ldr	r2, [pc, #44]	; (8004b64 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004b38:	601a      	str	r2, [r3, #0]
      break;
 8004b3a:	e007      	b.n	8004b4c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004b40:	601a      	str	r2, [r3, #0]
      break;
 8004b42:	e003      	b.n	8004b4c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b48:	60fb      	str	r3, [r7, #12]
      break;
 8004b4a:	bf00      	nop
  }

  return ret;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	408c0000 	.word	0x408c0000
 8004b5c:	410c0000 	.word	0x410c0000
 8004b60:	418c0000 	.word	0x418c0000
 8004b64:	420c0000 	.word	0x420c0000
 8004b68:	428c0000 	.word	0x428c0000

08004b6c <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8004b78:	2100      	movs	r1, #0
 8004b7a:	ed97 0a00 	vldr	s0, [r7]
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f806 	bl	8004b90 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8004b84:	4603      	mov	r3, r0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d028      	beq.n	8004c04 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8004bb2:	e05c      	b.n	8004c6e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f103 0020 	add.w	r0, r3, #32
 8004bba:	f107 0214 	add.w	r2, r7, #20
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	2116      	movs	r1, #22
 8004bc2:	f000 fb57 	bl	8005274 <lsm6dso_read_reg>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8004bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bd0:	e06c      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8004bd2:	7d3b      	ldrb	r3, [r7, #20]
 8004bd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d04b      	beq.n	8004c76 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8004bde:	7d3b      	ldrb	r3, [r7, #20]
 8004be0:	f36f 13c7 	bfc	r3, #7, #1
 8004be4:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f103 0020 	add.w	r0, r3, #32
 8004bec:	f107 0214 	add.w	r2, r7, #20
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	2116      	movs	r1, #22
 8004bf4:	f000 fb56 	bl	80052a4 <lsm6dso_write_reg>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d03b      	beq.n	8004c76 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8004bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c02:	e053      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f103 0020 	add.w	r0, r3, #32
 8004c0a:	f107 0210 	add.w	r2, r7, #16
 8004c0e:	2301      	movs	r3, #1
 8004c10:	2116      	movs	r1, #22
 8004c12:	f000 fb2f 	bl	8005274 <lsm6dso_read_reg>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8004c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c20:	e044      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8004c22:	7c3b      	ldrb	r3, [r7, #16]
 8004c24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d112      	bne.n	8004c54 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8004c2e:	7c3b      	ldrb	r3, [r7, #16]
 8004c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c34:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f103 0020 	add.w	r0, r3, #32
 8004c3c:	f107 0210 	add.w	r2, r7, #16
 8004c40:	2301      	movs	r3, #1
 8004c42:	2116      	movs	r1, #22
 8004c44:	f000 fb2e 	bl	80052a4 <lsm6dso_write_reg>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c52:	e02b      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004c54:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c58:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004cb4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c64:	dc00      	bgt.n	8004c68 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8004c66:	e007      	b.n	8004c78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004c68:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004c6a:	61bb      	str	r3, [r7, #24]
 8004c6c:	e004      	b.n	8004c78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c72:	61fb      	str	r3, [r7, #28]
      break;
 8004c74:	e000      	b.n	8004c78 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8004c76:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7e:	d102      	bne.n	8004c86 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c84:	e012      	b.n	8004cac <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d106      	bne.n	8004c9e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004c90:	ed97 0a06 	vldr	s0, [r7, #24]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f9a9 	bl	8004fec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8004c9a:	61f8      	str	r0, [r7, #28]
 8004c9c:	e005      	b.n	8004caa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004c9e:	ed97 0a06 	vldr	s0, [r7, #24]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 fa2e 	bl	8005104 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8004ca8:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8004caa:	69fb      	ldr	r3, [r7, #28]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	43500000 	.word	0x43500000
 8004cb8:	43500000 	.word	0x43500000

08004cbc <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3320      	adds	r3, #32
 8004cca:	f107 0210 	add.w	r2, r7, #16
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fe45 	bl	8005960 <lsm6dso_angular_rate_raw_get>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ce0:	e03c      	b.n	8004d5c <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004ce2:	f107 030c 	add.w	r3, r7, #12
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff feed 	bl	8004ac8 <LSM6DSO_GYRO_GetSensitivity>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf8:	e030      	b.n	8004d5c <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004cfa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d12:	ee17 2a90 	vmov	r2, s15
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004d1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d26:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d32:	ee17 2a90 	vmov	r2, s15
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004d3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d52:	ee17 2a90 	vmov	r2, s15
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	70fb      	strb	r3, [r7, #3]
 8004d70:	4613      	mov	r3, r2
 8004d72:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f103 0020 	add.w	r0, r3, #32
 8004d7a:	1cba      	adds	r2, r7, #2
 8004d7c:	78f9      	ldrb	r1, [r7, #3]
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f000 fa90 	bl	80052a4 <lsm6dso_write_reg>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d8e:	e000      	b.n	8004d92 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004da8:	edd7 7a00 	vldr	s15, [r7]
 8004dac:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004eac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db8:	d801      	bhi.n	8004dbe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004dba:	230b      	movs	r3, #11
 8004dbc:	e063      	b.n	8004e86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004dbe:	edd7 7a00 	vldr	s15, [r7]
 8004dc2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dce:	d801      	bhi.n	8004dd4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e058      	b.n	8004e86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004dd4:	edd7 7a00 	vldr	s15, [r7]
 8004dd8:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de4:	d801      	bhi.n	8004dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e04d      	b.n	8004e86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004dea:	edd7 7a00 	vldr	s15, [r7]
 8004dee:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004eb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfa:	d801      	bhi.n	8004e00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e042      	b.n	8004e86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004e00:	edd7 7a00 	vldr	s15, [r7]
 8004e04:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004eb4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8004e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e10:	d801      	bhi.n	8004e16 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004e12:	2304      	movs	r3, #4
 8004e14:	e037      	b.n	8004e86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004e16:	edd7 7a00 	vldr	s15, [r7]
 8004e1a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004eb8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8004e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e26:	d801      	bhi.n	8004e2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004e28:	2305      	movs	r3, #5
 8004e2a:	e02c      	b.n	8004e86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004e2c:	edd7 7a00 	vldr	s15, [r7]
 8004e30:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004ebc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3c:	d801      	bhi.n	8004e42 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004e3e:	2306      	movs	r3, #6
 8004e40:	e021      	b.n	8004e86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004e42:	edd7 7a00 	vldr	s15, [r7]
 8004e46:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004ec0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8004e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e52:	d801      	bhi.n	8004e58 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004e54:	2307      	movs	r3, #7
 8004e56:	e016      	b.n	8004e86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004e58:	edd7 7a00 	vldr	s15, [r7]
 8004e5c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004ec4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8004e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e68:	d801      	bhi.n	8004e6e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	e00b      	b.n	8004e86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004e6e:	edd7 7a00 	vldr	s15, [r7]
 8004e72:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004ec8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8004e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7e:	d801      	bhi.n	8004e84 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8004e80:	2309      	movs	r3, #9
 8004e82:	e000      	b.n	8004e86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004e84:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004e86:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3320      	adds	r3, #32
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fa7d 	bl	8005390 <lsm6dso_xl_data_rate_set>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ea0:	e000      	b.n	8004ea4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	3fcccccd 	.word	0x3fcccccd
 8004eb0:	42500000 	.word	0x42500000
 8004eb4:	42d00000 	.word	0x42d00000
 8004eb8:	43500000 	.word	0x43500000
 8004ebc:	43d08000 	.word	0x43d08000
 8004ec0:	44504000 	.word	0x44504000
 8004ec4:	44d06000 	.word	0x44d06000
 8004ec8:	45505000 	.word	0x45505000

08004ecc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8004ed8:	edd7 7a00 	vldr	s15, [r7]
 8004edc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004fcc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee8:	d801      	bhi.n	8004eee <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004eea:	230b      	movs	r3, #11
 8004eec:	e063      	b.n	8004fb6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004eee:	edd7 7a00 	vldr	s15, [r7]
 8004ef2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efe:	d801      	bhi.n	8004f04 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e058      	b.n	8004fb6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004f04:	edd7 7a00 	vldr	s15, [r7]
 8004f08:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f14:	d801      	bhi.n	8004f1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e04d      	b.n	8004fb6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004f1a:	edd7 7a00 	vldr	s15, [r7]
 8004f1e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004fd0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8004f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2a:	d801      	bhi.n	8004f30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e042      	b.n	8004fb6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004f30:	edd7 7a00 	vldr	s15, [r7]
 8004f34:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004fd4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8004f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f40:	d801      	bhi.n	8004f46 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004f42:	2304      	movs	r3, #4
 8004f44:	e037      	b.n	8004fb6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004f46:	edd7 7a00 	vldr	s15, [r7]
 8004f4a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004fd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8004f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f56:	d801      	bhi.n	8004f5c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004f58:	2305      	movs	r3, #5
 8004f5a:	e02c      	b.n	8004fb6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004f5c:	edd7 7a00 	vldr	s15, [r7]
 8004f60:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004fdc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6c:	d801      	bhi.n	8004f72 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004f6e:	2306      	movs	r3, #6
 8004f70:	e021      	b.n	8004fb6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004f72:	edd7 7a00 	vldr	s15, [r7]
 8004f76:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004fe0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8004f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f82:	d801      	bhi.n	8004f88 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004f84:	2307      	movs	r3, #7
 8004f86:	e016      	b.n	8004fb6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004f88:	edd7 7a00 	vldr	s15, [r7]
 8004f8c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004fe4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f98:	d801      	bhi.n	8004f9e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	e00b      	b.n	8004fb6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004f9e:	edd7 7a00 	vldr	s15, [r7]
 8004fa2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004fe8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8004fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fae:	d801      	bhi.n	8004fb4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004fb0:	2309      	movs	r3, #9
 8004fb2:	e000      	b.n	8004fb6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004fb4:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	3fcccccd 	.word	0x3fcccccd
 8004fd0:	42500000 	.word	0x42500000
 8004fd4:	42d00000 	.word	0x42d00000
 8004fd8:	43500000 	.word	0x43500000
 8004fdc:	43d08000 	.word	0x43d08000
 8004fe0:	44504000 	.word	0x44504000
 8004fe4:	44d06000 	.word	0x44d06000
 8004fe8:	45505000 	.word	0x45505000

08004fec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004ff8:	edd7 7a00 	vldr	s15, [r7]
 8004ffc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005008:	d801      	bhi.n	800500e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800500a:	2301      	movs	r3, #1
 800500c:	e058      	b.n	80050c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800500e:	edd7 7a00 	vldr	s15, [r7]
 8005012:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800501a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501e:	d801      	bhi.n	8005024 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005020:	2302      	movs	r3, #2
 8005022:	e04d      	b.n	80050c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005024:	edd7 7a00 	vldr	s15, [r7]
 8005028:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80050e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800502c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005034:	d801      	bhi.n	800503a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005036:	2303      	movs	r3, #3
 8005038:	e042      	b.n	80050c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800503a:	edd7 7a00 	vldr	s15, [r7]
 800503e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80050ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504a:	d801      	bhi.n	8005050 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800504c:	2304      	movs	r3, #4
 800504e:	e037      	b.n	80050c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005050:	edd7 7a00 	vldr	s15, [r7]
 8005054:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80050f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005060:	d801      	bhi.n	8005066 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005062:	2305      	movs	r3, #5
 8005064:	e02c      	b.n	80050c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005066:	edd7 7a00 	vldr	s15, [r7]
 800506a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80050f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800506e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005076:	d801      	bhi.n	800507c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005078:	2306      	movs	r3, #6
 800507a:	e021      	b.n	80050c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800507c:	edd7 7a00 	vldr	s15, [r7]
 8005080:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80050f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508c:	d801      	bhi.n	8005092 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800508e:	2307      	movs	r3, #7
 8005090:	e016      	b.n	80050c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005092:	edd7 7a00 	vldr	s15, [r7]
 8005096:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80050fc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800509a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	d801      	bhi.n	80050a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80050a4:	2308      	movs	r3, #8
 80050a6:	e00b      	b.n	80050c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050a8:	edd7 7a00 	vldr	s15, [r7]
 80050ac:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005100 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80050b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	d801      	bhi.n	80050be <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80050ba:	2309      	movs	r3, #9
 80050bc:	e000      	b.n	80050c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050be:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80050c0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3320      	adds	r3, #32
 80050c6:	7bfa      	ldrb	r2, [r7, #15]
 80050c8:	4611      	mov	r1, r2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fac4 	bl	8005658 <lsm6dso_gy_data_rate_set>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050da:	e000      	b.n	80050de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	42500000 	.word	0x42500000
 80050ec:	42d00000 	.word	0x42d00000
 80050f0:	43500000 	.word	0x43500000
 80050f4:	43d08000 	.word	0x43d08000
 80050f8:	44504000 	.word	0x44504000
 80050fc:	44d06000 	.word	0x44d06000
 8005100:	45505000 	.word	0x45505000

08005104 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005110:	edd7 7a00 	vldr	s15, [r7]
 8005114:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800511c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005120:	d801      	bhi.n	8005126 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005122:	2301      	movs	r3, #1
 8005124:	e058      	b.n	80051d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005126:	edd7 7a00 	vldr	s15, [r7]
 800512a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800512e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005136:	d801      	bhi.n	800513c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005138:	2302      	movs	r3, #2
 800513a:	e04d      	b.n	80051d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800513c:	edd7 7a00 	vldr	s15, [r7]
 8005140:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80051ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514c:	d801      	bhi.n	8005152 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800514e:	2303      	movs	r3, #3
 8005150:	e042      	b.n	80051d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005152:	edd7 7a00 	vldr	s15, [r7]
 8005156:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80051f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800515a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800515e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005162:	d801      	bhi.n	8005168 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005164:	2304      	movs	r3, #4
 8005166:	e037      	b.n	80051d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005168:	edd7 7a00 	vldr	s15, [r7]
 800516c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80051f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005178:	d801      	bhi.n	800517e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800517a:	2305      	movs	r3, #5
 800517c:	e02c      	b.n	80051d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800517e:	edd7 7a00 	vldr	s15, [r7]
 8005182:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80051f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518e:	d801      	bhi.n	8005194 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005190:	2306      	movs	r3, #6
 8005192:	e021      	b.n	80051d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005194:	edd7 7a00 	vldr	s15, [r7]
 8005198:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80051fc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800519c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a4:	d801      	bhi.n	80051aa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80051a6:	2307      	movs	r3, #7
 80051a8:	e016      	b.n	80051d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051aa:	edd7 7a00 	vldr	s15, [r7]
 80051ae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005200 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80051b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ba:	d801      	bhi.n	80051c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80051bc:	2308      	movs	r3, #8
 80051be:	e00b      	b.n	80051d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051c0:	edd7 7a00 	vldr	s15, [r7]
 80051c4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005204 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80051c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d0:	d801      	bhi.n	80051d6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80051d2:	2309      	movs	r3, #9
 80051d4:	e000      	b.n	80051d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051d6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	42500000 	.word	0x42500000
 80051f0:	42d00000 	.word	0x42d00000
 80051f4:	43500000 	.word	0x43500000
 80051f8:	43d08000 	.word	0x43d08000
 80051fc:	44504000 	.word	0x44504000
 8005200:	44d06000 	.word	0x44d06000
 8005204:	45505000 	.word	0x45505000

08005208 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005208:	b590      	push	{r4, r7, lr}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	461a      	mov	r2, r3
 8005214:	460b      	mov	r3, r1
 8005216:	72fb      	strb	r3, [r7, #11]
 8005218:	4613      	mov	r3, r2
 800521a:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	695c      	ldr	r4, [r3, #20]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	7b1b      	ldrb	r3, [r3, #12]
 8005228:	b298      	uxth	r0, r3
 800522a:	7afb      	ldrb	r3, [r7, #11]
 800522c:	b299      	uxth	r1, r3
 800522e:	893b      	ldrh	r3, [r7, #8]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	47a0      	blx	r4
 8005234:	4603      	mov	r3, r0
}
 8005236:	4618      	mov	r0, r3
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	bd90      	pop	{r4, r7, pc}

0800523e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800523e:	b590      	push	{r4, r7, lr}
 8005240:	b087      	sub	sp, #28
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	461a      	mov	r2, r3
 800524a:	460b      	mov	r3, r1
 800524c:	72fb      	strb	r3, [r7, #11]
 800524e:	4613      	mov	r3, r2
 8005250:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	691c      	ldr	r4, [r3, #16]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	7b1b      	ldrb	r3, [r3, #12]
 800525e:	b298      	uxth	r0, r3
 8005260:	7afb      	ldrb	r3, [r7, #11]
 8005262:	b299      	uxth	r1, r3
 8005264:	893b      	ldrh	r3, [r7, #8]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	47a0      	blx	r4
 800526a:	4603      	mov	r3, r0
}
 800526c:	4618      	mov	r0, r3
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd90      	pop	{r4, r7, pc}

08005274 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len) // __weak
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	461a      	mov	r2, r3
 8005280:	460b      	mov	r3, r1
 8005282:	72fb      	strb	r3, [r7, #11]
 8005284:	4613      	mov	r3, r2
 8005286:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685c      	ldr	r4, [r3, #4]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	68d8      	ldr	r0, [r3, #12]
 8005290:	893b      	ldrh	r3, [r7, #8]
 8005292:	7af9      	ldrb	r1, [r7, #11]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	47a0      	blx	r4
 8005298:	6178      	str	r0, [r7, #20]

  return ret;
 800529a:	697b      	ldr	r3, [r7, #20]
}
 800529c:	4618      	mov	r0, r3
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd90      	pop	{r4, r7, pc}

080052a4 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len) // __weak
{
 80052a4:	b590      	push	{r4, r7, lr}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	461a      	mov	r2, r3
 80052b0:	460b      	mov	r3, r1
 80052b2:	72fb      	strb	r3, [r7, #11]
 80052b4:	4613      	mov	r3, r2
 80052b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681c      	ldr	r4, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	68d8      	ldr	r0, [r3, #12]
 80052c0:	893b      	ldrh	r3, [r7, #8]
 80052c2:	7af9      	ldrb	r1, [r7, #11]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	47a0      	blx	r4
 80052c8:	6178      	str	r0, [r7, #20]

  return ret;
 80052ca:	697b      	ldr	r3, [r7, #20]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd90      	pop	{r4, r7, pc}

080052d4 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80052e0:	f107 0208 	add.w	r2, r7, #8
 80052e4:	2301      	movs	r3, #1
 80052e6:	2110      	movs	r1, #16
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff ffc3 	bl	8005274 <lsm6dso_read_reg>
 80052ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10f      	bne.n	8005316 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	7a3b      	ldrb	r3, [r7, #8]
 8005300:	f362 0383 	bfi	r3, r2, #2, #2
 8005304:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005306:	f107 0208 	add.w	r2, r7, #8
 800530a:	2301      	movs	r3, #1
 800530c:	2110      	movs	r1, #16
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ffc8 	bl	80052a4 <lsm6dso_write_reg>
 8005314:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005316:	68fb      	ldr	r3, [r7, #12]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800532a:	f107 0208 	add.w	r2, r7, #8
 800532e:	2301      	movs	r3, #1
 8005330:	2110      	movs	r1, #16
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff ff9e 	bl	8005274 <lsm6dso_read_reg>
 8005338:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800533a:	7a3b      	ldrb	r3, [r7, #8]
 800533c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b03      	cmp	r3, #3
 8005344:	d81a      	bhi.n	800537c <lsm6dso_xl_full_scale_get+0x5c>
 8005346:	a201      	add	r2, pc, #4	; (adr r2, 800534c <lsm6dso_xl_full_scale_get+0x2c>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	0800535d 	.word	0x0800535d
 8005350:	08005365 	.word	0x08005365
 8005354:	0800536d 	.word	0x0800536d
 8005358:	08005375 	.word	0x08005375
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]
      break;
 8005362:	e00f      	b.n	8005384 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2201      	movs	r2, #1
 8005368:	701a      	strb	r2, [r3, #0]
      break;
 800536a:	e00b      	b.n	8005384 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2202      	movs	r2, #2
 8005370:	701a      	strb	r2, [r3, #0]
      break;
 8005372:	e007      	b.n	8005384 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2203      	movs	r2, #3
 8005378:	701a      	strb	r2, [r3, #0]
      break;
 800537a:	e003      	b.n	8005384 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
      break;
 8005382:	bf00      	nop
  }

  return ret;
 8005384:	68fb      	ldr	r3, [r7, #12]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop

08005390 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80053a0:	f107 030c 	add.w	r3, r7, #12
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fc28 	bl	8005bfc <lsm6dso_fsm_enable_get>
 80053ac:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f040 80c4 	bne.w	800553e <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80053b6:	7b3b      	ldrb	r3, [r7, #12]
 80053b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80053bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80053be:	7b3b      	ldrb	r3, [r7, #12]
 80053c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80053c4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80053c6:	4313      	orrs	r3, r2
 80053c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80053ca:	7b3b      	ldrb	r3, [r7, #12]
 80053cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80053d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80053d6:	7b3b      	ldrb	r3, [r7, #12]
 80053d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80053de:	4313      	orrs	r3, r2
 80053e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80053e2:	7b3b      	ldrb	r3, [r7, #12]
 80053e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80053e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80053ea:	4313      	orrs	r3, r2
 80053ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80053ee:	7b3b      	ldrb	r3, [r7, #12]
 80053f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80053f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80053f6:	4313      	orrs	r3, r2
 80053f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80053fa:	7b3b      	ldrb	r3, [r7, #12]
 80053fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005400:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005402:	4313      	orrs	r3, r2
 8005404:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005406:	7b3b      	ldrb	r3, [r7, #12]
 8005408:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800540c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800540e:	4313      	orrs	r3, r2
 8005410:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005412:	7b7b      	ldrb	r3, [r7, #13]
 8005414:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005418:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800541a:	4313      	orrs	r3, r2
 800541c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800541e:	7b7b      	ldrb	r3, [r7, #13]
 8005420:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005424:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005426:	4313      	orrs	r3, r2
 8005428:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800542a:	7b7b      	ldrb	r3, [r7, #13]
 800542c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005430:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005432:	4313      	orrs	r3, r2
 8005434:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005436:	7b7b      	ldrb	r3, [r7, #13]
 8005438:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800543c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800543e:	4313      	orrs	r3, r2
 8005440:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005442:	7b7b      	ldrb	r3, [r7, #13]
 8005444:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005448:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800544a:	4313      	orrs	r3, r2
 800544c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800544e:	7b7b      	ldrb	r3, [r7, #13]
 8005450:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005454:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005456:	4313      	orrs	r3, r2
 8005458:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800545a:	7b7b      	ldrb	r3, [r7, #13]
 800545c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005460:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005462:	4313      	orrs	r3, r2
 8005464:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005466:	7b7b      	ldrb	r3, [r7, #13]
 8005468:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800546c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800546e:	4313      	orrs	r3, r2
 8005470:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005472:	2b01      	cmp	r3, #1
 8005474:	d163      	bne.n	800553e <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005476:	f107 030b 	add.w	r3, r7, #11
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fbdf 	bl	8005c40 <lsm6dso_fsm_data_rate_get>
 8005482:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d159      	bne.n	800553e <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800548a:	7afb      	ldrb	r3, [r7, #11]
 800548c:	2b03      	cmp	r3, #3
 800548e:	d853      	bhi.n	8005538 <lsm6dso_xl_data_rate_set+0x1a8>
 8005490:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <lsm6dso_xl_data_rate_set+0x108>)
 8005492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005496:	bf00      	nop
 8005498:	080054a9 	.word	0x080054a9
 800549c:	080054bb 	.word	0x080054bb
 80054a0:	080054d9 	.word	0x080054d9
 80054a4:	08005503 	.word	0x08005503
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d102      	bne.n	80054b4 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80054ae:	2301      	movs	r3, #1
 80054b0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80054b2:	e045      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	75fb      	strb	r3, [r7, #23]
            break;
 80054b8:	e042      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80054c0:	2302      	movs	r3, #2
 80054c2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80054c4:	e03c      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d102      	bne.n	80054d2 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80054cc:	2302      	movs	r3, #2
 80054ce:	75fb      	strb	r3, [r7, #23]
            break;
 80054d0:	e036      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	75fb      	strb	r3, [r7, #23]
            break;
 80054d6:	e033      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d102      	bne.n	80054e4 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80054de:	2303      	movs	r3, #3
 80054e0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80054e2:	e02d      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d102      	bne.n	80054f0 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80054ea:	2303      	movs	r3, #3
 80054ec:	75fb      	strb	r3, [r7, #23]
            break;
 80054ee:	e027      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d102      	bne.n	80054fc <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80054f6:	2303      	movs	r3, #3
 80054f8:	75fb      	strb	r3, [r7, #23]
            break;
 80054fa:	e021      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	75fb      	strb	r3, [r7, #23]
            break;
 8005500:	e01e      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d102      	bne.n	800550e <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005508:	2304      	movs	r3, #4
 800550a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800550c:	e018      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d102      	bne.n	800551a <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005514:	2304      	movs	r3, #4
 8005516:	75fb      	strb	r3, [r7, #23]
            break;
 8005518:	e012      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d102      	bne.n	8005526 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005520:	2304      	movs	r3, #4
 8005522:	75fb      	strb	r3, [r7, #23]
            break;
 8005524:	e00c      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d102      	bne.n	8005532 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800552c:	2304      	movs	r3, #4
 800552e:	75fb      	strb	r3, [r7, #23]
            break;
 8005530:	e006      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	75fb      	strb	r3, [r7, #23]
            break;
 8005536:	e003      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	75fb      	strb	r3, [r7, #23]
            break;
 800553c:	e000      	b.n	8005540 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 800553e:	bf00      	nop
    }
  }

  if (ret == 0)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d107      	bne.n	8005556 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005546:	f107 0208 	add.w	r2, r7, #8
 800554a:	2301      	movs	r3, #1
 800554c:	2110      	movs	r1, #16
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff fe90 	bl	8005274 <lsm6dso_read_reg>
 8005554:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10f      	bne.n	800557c <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	b2da      	uxtb	r2, r3
 8005564:	7a3b      	ldrb	r3, [r7, #8]
 8005566:	f362 1307 	bfi	r3, r2, #4, #4
 800556a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800556c:	f107 0208 	add.w	r2, r7, #8
 8005570:	2301      	movs	r3, #1
 8005572:	2110      	movs	r1, #16
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff fe95 	bl	80052a4 <lsm6dso_write_reg>
 800557a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800557c:	693b      	ldr	r3, [r7, #16]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop

08005588 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005594:	f107 0208 	add.w	r2, r7, #8
 8005598:	2301      	movs	r3, #1
 800559a:	2111      	movs	r1, #17
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff fe69 	bl	8005274 <lsm6dso_read_reg>
 80055a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10f      	bne.n	80055ca <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	7a3b      	ldrb	r3, [r7, #8]
 80055b4:	f362 0343 	bfi	r3, r2, #1, #3
 80055b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80055ba:	f107 0208 	add.w	r2, r7, #8
 80055be:	2301      	movs	r3, #1
 80055c0:	2111      	movs	r1, #17
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff fe6e 	bl	80052a4 <lsm6dso_write_reg>
 80055c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055ca:	68fb      	ldr	r3, [r7, #12]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80055de:	f107 0208 	add.w	r2, r7, #8
 80055e2:	2301      	movs	r3, #1
 80055e4:	2111      	movs	r1, #17
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fe44 	bl	8005274 <lsm6dso_read_reg>
 80055ec:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80055ee:	7a3b      	ldrb	r3, [r7, #8]
 80055f0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b06      	cmp	r3, #6
 80055f8:	d824      	bhi.n	8005644 <lsm6dso_gy_full_scale_get+0x70>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <lsm6dso_gy_full_scale_get+0x2c>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	0800561d 	.word	0x0800561d
 8005604:	08005625 	.word	0x08005625
 8005608:	0800562d 	.word	0x0800562d
 800560c:	08005645 	.word	0x08005645
 8005610:	08005635 	.word	0x08005635
 8005614:	08005645 	.word	0x08005645
 8005618:	0800563d 	.word	0x0800563d
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
      break;
 8005622:	e013      	b.n	800564c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2201      	movs	r2, #1
 8005628:	701a      	strb	r2, [r3, #0]
      break;
 800562a:	e00f      	b.n	800564c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2202      	movs	r2, #2
 8005630:	701a      	strb	r2, [r3, #0]
      break;
 8005632:	e00b      	b.n	800564c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2204      	movs	r2, #4
 8005638:	701a      	strb	r2, [r3, #0]
      break;
 800563a:	e007      	b.n	800564c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2206      	movs	r2, #6
 8005640:	701a      	strb	r2, [r3, #0]
      break;
 8005642:	e003      	b.n	800564c <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2200      	movs	r2, #0
 8005648:	701a      	strb	r2, [r3, #0]
      break;
 800564a:	bf00      	nop
  }

  return ret;
 800564c:	68fb      	ldr	r3, [r7, #12]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop

08005658 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005668:	f107 030c 	add.w	r3, r7, #12
 800566c:	4619      	mov	r1, r3
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fac4 	bl	8005bfc <lsm6dso_fsm_enable_get>
 8005674:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f040 80c4 	bne.w	8005806 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800567e:	7b3b      	ldrb	r3, [r7, #12]
 8005680:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005684:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005686:	7b3b      	ldrb	r3, [r7, #12]
 8005688:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800568c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800568e:	4313      	orrs	r3, r2
 8005690:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005692:	7b3b      	ldrb	r3, [r7, #12]
 8005694:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005698:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800569a:	4313      	orrs	r3, r2
 800569c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800569e:	7b3b      	ldrb	r3, [r7, #12]
 80056a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80056a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80056a6:	4313      	orrs	r3, r2
 80056a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80056aa:	7b3b      	ldrb	r3, [r7, #12]
 80056ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80056b2:	4313      	orrs	r3, r2
 80056b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80056b6:	7b3b      	ldrb	r3, [r7, #12]
 80056b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80056bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80056be:	4313      	orrs	r3, r2
 80056c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80056c2:	7b3b      	ldrb	r3, [r7, #12]
 80056c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80056c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80056ca:	4313      	orrs	r3, r2
 80056cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80056ce:	7b3b      	ldrb	r3, [r7, #12]
 80056d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80056d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80056d6:	4313      	orrs	r3, r2
 80056d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80056da:	7b7b      	ldrb	r3, [r7, #13]
 80056dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80056e2:	4313      	orrs	r3, r2
 80056e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80056e6:	7b7b      	ldrb	r3, [r7, #13]
 80056e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80056ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80056ee:	4313      	orrs	r3, r2
 80056f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80056f2:	7b7b      	ldrb	r3, [r7, #13]
 80056f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80056fa:	4313      	orrs	r3, r2
 80056fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80056fe:	7b7b      	ldrb	r3, [r7, #13]
 8005700:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005704:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005706:	4313      	orrs	r3, r2
 8005708:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800570a:	7b7b      	ldrb	r3, [r7, #13]
 800570c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005710:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005712:	4313      	orrs	r3, r2
 8005714:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005716:	7b7b      	ldrb	r3, [r7, #13]
 8005718:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800571c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800571e:	4313      	orrs	r3, r2
 8005720:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005722:	7b7b      	ldrb	r3, [r7, #13]
 8005724:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005728:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800572a:	4313      	orrs	r3, r2
 800572c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800572e:	7b7b      	ldrb	r3, [r7, #13]
 8005730:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005734:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005736:	4313      	orrs	r3, r2
 8005738:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800573a:	2b01      	cmp	r3, #1
 800573c:	d163      	bne.n	8005806 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800573e:	f107 030b 	add.w	r3, r7, #11
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fa7b 	bl	8005c40 <lsm6dso_fsm_data_rate_get>
 800574a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d159      	bne.n	8005806 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005752:	7afb      	ldrb	r3, [r7, #11]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d853      	bhi.n	8005800 <lsm6dso_gy_data_rate_set+0x1a8>
 8005758:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <lsm6dso_gy_data_rate_set+0x108>)
 800575a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575e:	bf00      	nop
 8005760:	08005771 	.word	0x08005771
 8005764:	08005783 	.word	0x08005783
 8005768:	080057a1 	.word	0x080057a1
 800576c:	080057cb 	.word	0x080057cb
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005776:	2301      	movs	r3, #1
 8005778:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800577a:	e045      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	75fb      	strb	r3, [r7, #23]
            break;
 8005780:	e042      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d102      	bne.n	800578e <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005788:	2302      	movs	r3, #2
 800578a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800578c:	e03c      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d102      	bne.n	800579a <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005794:	2302      	movs	r3, #2
 8005796:	75fb      	strb	r3, [r7, #23]
            break;
 8005798:	e036      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	75fb      	strb	r3, [r7, #23]
            break;
 800579e:	e033      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80057a6:	2303      	movs	r3, #3
 80057a8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80057aa:	e02d      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d102      	bne.n	80057b8 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80057b2:	2303      	movs	r3, #3
 80057b4:	75fb      	strb	r3, [r7, #23]
            break;
 80057b6:	e027      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d102      	bne.n	80057c4 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80057be:	2303      	movs	r3, #3
 80057c0:	75fb      	strb	r3, [r7, #23]
            break;
 80057c2:	e021      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	75fb      	strb	r3, [r7, #23]
            break;
 80057c8:	e01e      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d102      	bne.n	80057d6 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80057d0:	2304      	movs	r3, #4
 80057d2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80057d4:	e018      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d102      	bne.n	80057e2 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80057dc:	2304      	movs	r3, #4
 80057de:	75fb      	strb	r3, [r7, #23]
            break;
 80057e0:	e012      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d102      	bne.n	80057ee <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80057e8:	2304      	movs	r3, #4
 80057ea:	75fb      	strb	r3, [r7, #23]
            break;
 80057ec:	e00c      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d102      	bne.n	80057fa <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80057f4:	2304      	movs	r3, #4
 80057f6:	75fb      	strb	r3, [r7, #23]
            break;
 80057f8:	e006      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	75fb      	strb	r3, [r7, #23]
            break;
 80057fe:	e003      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	75fb      	strb	r3, [r7, #23]
            break;
 8005804:	e000      	b.n	8005808 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8005806:	bf00      	nop
    }
  }

  if (ret == 0)
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d107      	bne.n	800581e <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800580e:	f107 0208 	add.w	r2, r7, #8
 8005812:	2301      	movs	r3, #1
 8005814:	2111      	movs	r1, #17
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff fd2c 	bl	8005274 <lsm6dso_read_reg>
 800581c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10f      	bne.n	8005844 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8005824:	7dfb      	ldrb	r3, [r7, #23]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	b2da      	uxtb	r2, r3
 800582c:	7a3b      	ldrb	r3, [r7, #8]
 800582e:	f362 1307 	bfi	r3, r2, #4, #4
 8005832:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005834:	f107 0208 	add.w	r2, r7, #8
 8005838:	2301      	movs	r3, #1
 800583a:	2111      	movs	r1, #17
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff fd31 	bl	80052a4 <lsm6dso_write_reg>
 8005842:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005844:	693b      	ldr	r3, [r7, #16]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop

08005850 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800585a:	f107 0208 	add.w	r2, r7, #8
 800585e:	2301      	movs	r3, #1
 8005860:	2111      	movs	r1, #17
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff fd06 	bl	8005274 <lsm6dso_read_reg>
 8005868:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800586a:	7a3b      	ldrb	r3, [r7, #8]
 800586c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b0a      	cmp	r3, #10
 8005874:	d844      	bhi.n	8005900 <lsm6dso_gy_data_rate_get+0xb0>
 8005876:	a201      	add	r2, pc, #4	; (adr r2, 800587c <lsm6dso_gy_data_rate_get+0x2c>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	080058a9 	.word	0x080058a9
 8005880:	080058b1 	.word	0x080058b1
 8005884:	080058b9 	.word	0x080058b9
 8005888:	080058c1 	.word	0x080058c1
 800588c:	080058c9 	.word	0x080058c9
 8005890:	080058d1 	.word	0x080058d1
 8005894:	080058d9 	.word	0x080058d9
 8005898:	080058e1 	.word	0x080058e1
 800589c:	080058e9 	.word	0x080058e9
 80058a0:	080058f1 	.word	0x080058f1
 80058a4:	080058f9 	.word	0x080058f9
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
      break;
 80058ae:	e02b      	b.n	8005908 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2201      	movs	r2, #1
 80058b4:	701a      	strb	r2, [r3, #0]
      break;
 80058b6:	e027      	b.n	8005908 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2202      	movs	r2, #2
 80058bc:	701a      	strb	r2, [r3, #0]
      break;
 80058be:	e023      	b.n	8005908 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2203      	movs	r2, #3
 80058c4:	701a      	strb	r2, [r3, #0]
      break;
 80058c6:	e01f      	b.n	8005908 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2204      	movs	r2, #4
 80058cc:	701a      	strb	r2, [r3, #0]
      break;
 80058ce:	e01b      	b.n	8005908 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2205      	movs	r2, #5
 80058d4:	701a      	strb	r2, [r3, #0]
      break;
 80058d6:	e017      	b.n	8005908 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2206      	movs	r2, #6
 80058dc:	701a      	strb	r2, [r3, #0]
      break;
 80058de:	e013      	b.n	8005908 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2207      	movs	r2, #7
 80058e4:	701a      	strb	r2, [r3, #0]
      break;
 80058e6:	e00f      	b.n	8005908 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2208      	movs	r2, #8
 80058ec:	701a      	strb	r2, [r3, #0]
      break;
 80058ee:	e00b      	b.n	8005908 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2209      	movs	r2, #9
 80058f4:	701a      	strb	r2, [r3, #0]
      break;
 80058f6:	e007      	b.n	8005908 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	220a      	movs	r2, #10
 80058fc:	701a      	strb	r2, [r3, #0]
      break;
 80058fe:	e003      	b.n	8005908 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
      break;
 8005906:	bf00      	nop
  }

  return ret;
 8005908:	68fb      	ldr	r3, [r7, #12]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop

08005914 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005920:	f107 0208 	add.w	r2, r7, #8
 8005924:	2301      	movs	r3, #1
 8005926:	2112      	movs	r1, #18
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff fca3 	bl	8005274 <lsm6dso_read_reg>
 800592e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10f      	bne.n	8005956 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	b2da      	uxtb	r2, r3
 800593e:	7a3b      	ldrb	r3, [r7, #8]
 8005940:	f362 1386 	bfi	r3, r2, #6, #1
 8005944:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005946:	f107 0208 	add.w	r2, r7, #8
 800594a:	2301      	movs	r3, #1
 800594c:	2112      	movs	r1, #18
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff fca8 	bl	80052a4 <lsm6dso_write_reg>
 8005954:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005956:	68fb      	ldr	r3, [r7, #12]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800596a:	f107 020c 	add.w	r2, r7, #12
 800596e:	2306      	movs	r3, #6
 8005970:	2122      	movs	r1, #34	; 0x22
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff fc7e 	bl	8005274 <lsm6dso_read_reg>
 8005978:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800597a:	7b7b      	ldrb	r3, [r7, #13]
 800597c:	b21a      	sxth	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005988:	b29b      	uxth	r3, r3
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	b29a      	uxth	r2, r3
 800598e:	7b3b      	ldrb	r3, [r7, #12]
 8005990:	b29b      	uxth	r3, r3
 8005992:	4413      	add	r3, r2
 8005994:	b29b      	uxth	r3, r3
 8005996:	b21a      	sxth	r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800599c:	7bfa      	ldrb	r2, [r7, #15]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	3302      	adds	r3, #2
 80059a2:	b212      	sxth	r2, r2
 80059a4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	3302      	adds	r3, #2
 80059aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4413      	add	r3, r2
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	3302      	adds	r3, #2
 80059c0:	b212      	sxth	r2, r2
 80059c2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80059c4:	7c7a      	ldrb	r2, [r7, #17]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	3304      	adds	r3, #4
 80059ca:	b212      	sxth	r2, r2
 80059cc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	3304      	adds	r3, #4
 80059d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	b29a      	uxth	r2, r3
 80059dc:	7c3b      	ldrb	r3, [r7, #16]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	4413      	add	r3, r2
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	3304      	adds	r3, #4
 80059e8:	b212      	sxth	r2, r2
 80059ea:	801a      	strh	r2, [r3, #0]

  return ret;
 80059ec:	697b      	ldr	r3, [r7, #20]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b086      	sub	sp, #24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005a00:	f107 020c 	add.w	r2, r7, #12
 8005a04:	2306      	movs	r3, #6
 8005a06:	2128      	movs	r1, #40	; 0x28
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff fc33 	bl	8005274 <lsm6dso_read_reg>
 8005a0e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005a10:	7b7b      	ldrb	r3, [r7, #13]
 8005a12:	b21a      	sxth	r2, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	7b3b      	ldrb	r3, [r7, #12]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	4413      	add	r3, r2
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	b21a      	sxth	r2, r3
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005a32:	7bfa      	ldrb	r2, [r7, #15]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	3302      	adds	r3, #2
 8005a38:	b212      	sxth	r2, r2
 8005a3a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	3302      	adds	r3, #2
 8005a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	3302      	adds	r3, #2
 8005a56:	b212      	sxth	r2, r2
 8005a58:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005a5a:	7c7a      	ldrb	r2, [r7, #17]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	b212      	sxth	r2, r2
 8005a62:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	3304      	adds	r3, #4
 8005a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	7c3b      	ldrb	r3, [r7, #16]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	b212      	sxth	r2, r2
 8005a80:	801a      	strh	r2, [r3, #0]

  return ret;
 8005a82:	697b      	ldr	r3, [r7, #20]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005a98:	f107 0208 	add.w	r2, r7, #8
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fbe7 	bl	8005274 <lsm6dso_read_reg>
 8005aa6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10f      	bne.n	8005ace <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	7a3b      	ldrb	r3, [r7, #8]
 8005ab8:	f362 1387 	bfi	r3, r2, #6, #2
 8005abc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8005abe:	f107 0208 	add.w	r2, r7, #8
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fbec 	bl	80052a4 <lsm6dso_write_reg>
 8005acc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ace:	68fb      	ldr	r3, [r7, #12]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005ae4:	f107 0208 	add.w	r2, r7, #8
 8005ae8:	2301      	movs	r3, #1
 8005aea:	2112      	movs	r1, #18
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff fbc1 	bl	8005274 <lsm6dso_read_reg>
 8005af2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10f      	bne.n	8005b1a <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	7a3b      	ldrb	r3, [r7, #8]
 8005b04:	f362 0382 	bfi	r3, r2, #2, #1
 8005b08:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005b0a:	f107 0208 	add.w	r2, r7, #8
 8005b0e:	2301      	movs	r3, #1
 8005b10:	2112      	movs	r1, #18
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fbc6 	bl	80052a4 <lsm6dso_write_reg>
 8005b18:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005b30:	f107 020c 	add.w	r2, r7, #12
 8005b34:	2301      	movs	r3, #1
 8005b36:	2118      	movs	r1, #24
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff fb9b 	bl	8005274 <lsm6dso_read_reg>
 8005b3e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d111      	bne.n	8005b6a <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	09db      	lsrs	r3, r3, #7
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	7b3b      	ldrb	r3, [r7, #12]
 8005b54:	f362 0341 	bfi	r3, r2, #1, #1
 8005b58:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8005b5a:	f107 020c 	add.w	r2, r7, #12
 8005b5e:	2301      	movs	r3, #1
 8005b60:	2118      	movs	r1, #24
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff fb9e 	bl	80052a4 <lsm6dso_write_reg>
 8005b68:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d107      	bne.n	8005b80 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005b70:	f107 0210 	add.w	r2, r7, #16
 8005b74:	2301      	movs	r3, #1
 8005b76:	2162      	movs	r1, #98	; 0x62
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff fb7b 	bl	8005274 <lsm6dso_read_reg>
 8005b7e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10f      	bne.n	8005ba6 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	f003 0303 	and.w	r3, r3, #3
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	7c3b      	ldrb	r3, [r7, #16]
 8005b90:	f362 03c4 	bfi	r3, r2, #3, #2
 8005b94:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8005b96:	f107 0210 	add.w	r2, r7, #16
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	2162      	movs	r1, #98	; 0x62
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff fb80 	bl	80052a4 <lsm6dso_write_reg>
 8005ba4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8005ba6:	697b      	ldr	r3, [r7, #20]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005bbc:	f107 0208 	add.w	r2, r7, #8
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	210a      	movs	r1, #10
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff fb55 	bl	8005274 <lsm6dso_read_reg>
 8005bca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10f      	bne.n	8005bf2 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	7a3b      	ldrb	r3, [r7, #8]
 8005bdc:	f362 0302 	bfi	r3, r2, #0, #3
 8005be0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005be2:	f107 0208 	add.w	r2, r7, #8
 8005be6:	2301      	movs	r3, #1
 8005be8:	210a      	movs	r1, #10
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff fb5a 	bl	80052a4 <lsm6dso_write_reg>
 8005bf0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005c06:	2102      	movs	r1, #2
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff ff3f 	bl	8005a8c <lsm6dso_mem_bank_set>
 8005c0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8005c16:	2302      	movs	r3, #2
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	2146      	movs	r1, #70	; 0x46
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff fb29 	bl	8005274 <lsm6dso_read_reg>
 8005c22:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d104      	bne.n	8005c34 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff ff2d 	bl	8005a8c <lsm6dso_mem_bank_set>
 8005c32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005c4a:	2102      	movs	r1, #2
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff ff1d 	bl	8005a8c <lsm6dso_mem_bank_set>
 8005c52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d107      	bne.n	8005c6a <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8005c5a:	f107 0208 	add.w	r2, r7, #8
 8005c5e:	2301      	movs	r3, #1
 8005c60:	215f      	movs	r1, #95	; 0x5f
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff fb06 	bl	8005274 <lsm6dso_read_reg>
 8005c68:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d12a      	bne.n	8005cc6 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8005c70:	7a3b      	ldrb	r3, [r7, #8]
 8005c72:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d81b      	bhi.n	8005cb4 <lsm6dso_fsm_data_rate_get+0x74>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <lsm6dso_fsm_data_rate_get+0x44>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005c9d 	.word	0x08005c9d
 8005c8c:	08005ca5 	.word	0x08005ca5
 8005c90:	08005cad 	.word	0x08005cad
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]
        break;
 8005c9a:	e00f      	b.n	8005cbc <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	701a      	strb	r2, [r3, #0]
        break;
 8005ca2:	e00b      	b.n	8005cbc <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	701a      	strb	r2, [r3, #0]
        break;
 8005caa:	e007      	b.n	8005cbc <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2203      	movs	r2, #3
 8005cb0:	701a      	strb	r2, [r3, #0]
        break;
 8005cb2:	e003      	b.n	8005cbc <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
        break;
 8005cba:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fee4 	bl	8005a8c <lsm6dso_mem_bank_set>
 8005cc4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cda:	2003      	movs	r0, #3
 8005cdc:	f000 f960 	bl	8005fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ce0:	200f      	movs	r0, #15
 8005ce2:	f000 f80d 	bl	8005d00 <HAL_InitTick>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	71fb      	strb	r3, [r7, #7]
 8005cf0:	e001      	b.n	8005cf6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005cf2:	f7fe f82b 	bl	8003d4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005d0c:	4b17      	ldr	r3, [pc, #92]	; (8005d6c <HAL_InitTick+0x6c>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d023      	beq.n	8005d5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <HAL_InitTick+0x70>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <HAL_InitTick+0x6c>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f96d 	bl	800600a <HAL_SYSTICK_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10f      	bne.n	8005d56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b0f      	cmp	r3, #15
 8005d3a:	d809      	bhi.n	8005d50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d44:	f000 f937 	bl	8005fb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d48:	4a0a      	ldr	r2, [pc, #40]	; (8005d74 <HAL_InitTick+0x74>)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	e007      	b.n	8005d60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]
 8005d54:	e004      	b.n	8005d60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	73fb      	strb	r3, [r7, #15]
 8005d5a:	e001      	b.n	8005d60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	2000000c 	.word	0x2000000c
 8005d70:	20000004 	.word	0x20000004
 8005d74:	20000008 	.word	0x20000008

08005d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <HAL_IncTick+0x20>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <HAL_IncTick+0x24>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4413      	add	r3, r2
 8005d88:	4a04      	ldr	r2, [pc, #16]	; (8005d9c <HAL_IncTick+0x24>)
 8005d8a:	6013      	str	r3, [r2, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	2000000c 	.word	0x2000000c
 8005d9c:	20000ec0 	.word	0x20000ec0

08005da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  return uwTick;
 8005da4:	4b03      	ldr	r3, [pc, #12]	; (8005db4 <HAL_GetTick+0x14>)
 8005da6:	681b      	ldr	r3, [r3, #0]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000ec0 	.word	0x20000ec0

08005db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005dc0:	f7ff ffee 	bl	8005da0 <HAL_GetTick>
 8005dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd0:	d005      	beq.n	8005dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005dd2:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <HAL_Delay+0x44>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005dde:	bf00      	nop
 8005de0:	f7ff ffde 	bl	8005da0 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d8f7      	bhi.n	8005de0 <HAL_Delay+0x28>
  {
  }
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	2000000c 	.word	0x2000000c

08005e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e10:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <__NVIC_SetPriorityGrouping+0x44>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e32:	4a04      	ldr	r2, [pc, #16]	; (8005e44 <__NVIC_SetPriorityGrouping+0x44>)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	60d3      	str	r3, [r2, #12]
}
 8005e38:	bf00      	nop
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	e000ed00 	.word	0xe000ed00

08005e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e4c:	4b04      	ldr	r3, [pc, #16]	; (8005e60 <__NVIC_GetPriorityGrouping+0x18>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	f003 0307 	and.w	r3, r3, #7
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	e000ed00 	.word	0xe000ed00

08005e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	db0b      	blt.n	8005e8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e76:	79fb      	ldrb	r3, [r7, #7]
 8005e78:	f003 021f 	and.w	r2, r3, #31
 8005e7c:	4907      	ldr	r1, [pc, #28]	; (8005e9c <__NVIC_EnableIRQ+0x38>)
 8005e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	2001      	movs	r0, #1
 8005e86:	fa00 f202 	lsl.w	r2, r0, r2
 8005e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	e000e100 	.word	0xe000e100

08005ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	6039      	str	r1, [r7, #0]
 8005eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	db0a      	blt.n	8005eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	490c      	ldr	r1, [pc, #48]	; (8005eec <__NVIC_SetPriority+0x4c>)
 8005eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ebe:	0112      	lsls	r2, r2, #4
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ec8:	e00a      	b.n	8005ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	4908      	ldr	r1, [pc, #32]	; (8005ef0 <__NVIC_SetPriority+0x50>)
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	3b04      	subs	r3, #4
 8005ed8:	0112      	lsls	r2, r2, #4
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	440b      	add	r3, r1
 8005ede:	761a      	strb	r2, [r3, #24]
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	e000e100 	.word	0xe000e100
 8005ef0:	e000ed00 	.word	0xe000ed00

08005ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b089      	sub	sp, #36	; 0x24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f1c3 0307 	rsb	r3, r3, #7
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	bf28      	it	cs
 8005f12:	2304      	movcs	r3, #4
 8005f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	2b06      	cmp	r3, #6
 8005f1c:	d902      	bls.n	8005f24 <NVIC_EncodePriority+0x30>
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	3b03      	subs	r3, #3
 8005f22:	e000      	b.n	8005f26 <NVIC_EncodePriority+0x32>
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	43da      	mvns	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	401a      	ands	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	fa01 f303 	lsl.w	r3, r1, r3
 8005f46:	43d9      	mvns	r1, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f4c:	4313      	orrs	r3, r2
         );
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3724      	adds	r7, #36	; 0x24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f6c:	d301      	bcc.n	8005f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e00f      	b.n	8005f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f72:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <SysTick_Config+0x40>)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f7a:	210f      	movs	r1, #15
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f80:	f7ff ff8e 	bl	8005ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f84:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <SysTick_Config+0x40>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f8a:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <SysTick_Config+0x40>)
 8005f8c:	2207      	movs	r2, #7
 8005f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	e000e010 	.word	0xe000e010

08005fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ff29 	bl	8005e00 <__NVIC_SetPriorityGrouping>
}
 8005fae:	bf00      	nop
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b086      	sub	sp, #24
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005fc8:	f7ff ff3e 	bl	8005e48 <__NVIC_GetPriorityGrouping>
 8005fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	6978      	ldr	r0, [r7, #20]
 8005fd4:	f7ff ff8e 	bl	8005ef4 <NVIC_EncodePriority>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fde:	4611      	mov	r1, r2
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff ff5d 	bl	8005ea0 <__NVIC_SetPriority>
}
 8005fe6:	bf00      	nop
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff ff31 	bl	8005e64 <__NVIC_EnableIRQ>
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ffa2 	bl	8005f5c <SysTick_Config>
 8006018:	4603      	mov	r3, r0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d008      	beq.n	800604c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2204      	movs	r2, #4
 800603e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e040      	b.n	80060ce <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 020e 	bic.w	r2, r2, #14
 800605a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800606a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006080:	f003 021c 	and.w	r2, r3, #28
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	2101      	movs	r1, #1
 800608a:	fa01 f202 	lsl.w	r2, r1, r2
 800608e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006098:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00c      	beq.n	80060bc <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80060ba:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d005      	beq.n	80060fe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2204      	movs	r2, #4
 80060f6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	73fb      	strb	r3, [r7, #15]
 80060fc:	e047      	b.n	800618e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 020e 	bic.w	r2, r2, #14
 800610c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0201 	bic.w	r2, r2, #1
 800611c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800612c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	f003 021c 	and.w	r2, r3, #28
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	2101      	movs	r1, #1
 800613c:	fa01 f202 	lsl.w	r2, r1, r2
 8006140:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800614a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00c      	beq.n	800616e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006162:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800616c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
    }
  }
  return status;
 800618e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061a6:	e166      	b.n	8006476 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	2101      	movs	r1, #1
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	fa01 f303 	lsl.w	r3, r1, r3
 80061b4:	4013      	ands	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 8158 	beq.w	8006470 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d005      	beq.n	80061d8 <HAL_GPIO_Init+0x40>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f003 0303 	and.w	r3, r3, #3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d130      	bne.n	800623a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	2203      	movs	r2, #3
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	43db      	mvns	r3, r3
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4013      	ands	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800620e:	2201      	movs	r2, #1
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	43db      	mvns	r3, r3
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4013      	ands	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	091b      	lsrs	r3, r3, #4
 8006224:	f003 0201 	and.w	r2, r3, #1
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b03      	cmp	r3, #3
 8006244:	d017      	beq.n	8006276 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	2203      	movs	r2, #3
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4013      	ands	r3, r2
 800625c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d123      	bne.n	80062ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	08da      	lsrs	r2, r3, #3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3208      	adds	r2, #8
 800628a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	220f      	movs	r2, #15
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	43db      	mvns	r3, r3
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4013      	ands	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	08da      	lsrs	r2, r3, #3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3208      	adds	r2, #8
 80062c4:	6939      	ldr	r1, [r7, #16]
 80062c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	2203      	movs	r2, #3
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	43db      	mvns	r3, r3
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4013      	ands	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f003 0203 	and.w	r2, r3, #3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80b2 	beq.w	8006470 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800630c:	4b61      	ldr	r3, [pc, #388]	; (8006494 <HAL_GPIO_Init+0x2fc>)
 800630e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006310:	4a60      	ldr	r2, [pc, #384]	; (8006494 <HAL_GPIO_Init+0x2fc>)
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	6613      	str	r3, [r2, #96]	; 0x60
 8006318:	4b5e      	ldr	r3, [pc, #376]	; (8006494 <HAL_GPIO_Init+0x2fc>)
 800631a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006324:	4a5c      	ldr	r2, [pc, #368]	; (8006498 <HAL_GPIO_Init+0x300>)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	089b      	lsrs	r3, r3, #2
 800632a:	3302      	adds	r3, #2
 800632c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	220f      	movs	r2, #15
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	43db      	mvns	r3, r3
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4013      	ands	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800634e:	d02b      	beq.n	80063a8 <HAL_GPIO_Init+0x210>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a52      	ldr	r2, [pc, #328]	; (800649c <HAL_GPIO_Init+0x304>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d025      	beq.n	80063a4 <HAL_GPIO_Init+0x20c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a51      	ldr	r2, [pc, #324]	; (80064a0 <HAL_GPIO_Init+0x308>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d01f      	beq.n	80063a0 <HAL_GPIO_Init+0x208>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a50      	ldr	r2, [pc, #320]	; (80064a4 <HAL_GPIO_Init+0x30c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d019      	beq.n	800639c <HAL_GPIO_Init+0x204>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a4f      	ldr	r2, [pc, #316]	; (80064a8 <HAL_GPIO_Init+0x310>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d013      	beq.n	8006398 <HAL_GPIO_Init+0x200>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a4e      	ldr	r2, [pc, #312]	; (80064ac <HAL_GPIO_Init+0x314>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00d      	beq.n	8006394 <HAL_GPIO_Init+0x1fc>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a4d      	ldr	r2, [pc, #308]	; (80064b0 <HAL_GPIO_Init+0x318>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d007      	beq.n	8006390 <HAL_GPIO_Init+0x1f8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a4c      	ldr	r2, [pc, #304]	; (80064b4 <HAL_GPIO_Init+0x31c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d101      	bne.n	800638c <HAL_GPIO_Init+0x1f4>
 8006388:	2307      	movs	r3, #7
 800638a:	e00e      	b.n	80063aa <HAL_GPIO_Init+0x212>
 800638c:	2308      	movs	r3, #8
 800638e:	e00c      	b.n	80063aa <HAL_GPIO_Init+0x212>
 8006390:	2306      	movs	r3, #6
 8006392:	e00a      	b.n	80063aa <HAL_GPIO_Init+0x212>
 8006394:	2305      	movs	r3, #5
 8006396:	e008      	b.n	80063aa <HAL_GPIO_Init+0x212>
 8006398:	2304      	movs	r3, #4
 800639a:	e006      	b.n	80063aa <HAL_GPIO_Init+0x212>
 800639c:	2303      	movs	r3, #3
 800639e:	e004      	b.n	80063aa <HAL_GPIO_Init+0x212>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e002      	b.n	80063aa <HAL_GPIO_Init+0x212>
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <HAL_GPIO_Init+0x212>
 80063a8:	2300      	movs	r3, #0
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	f002 0203 	and.w	r2, r2, #3
 80063b0:	0092      	lsls	r2, r2, #2
 80063b2:	4093      	lsls	r3, r2
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80063ba:	4937      	ldr	r1, [pc, #220]	; (8006498 <HAL_GPIO_Init+0x300>)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	089b      	lsrs	r3, r3, #2
 80063c0:	3302      	adds	r3, #2
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063c8:	4b3b      	ldr	r3, [pc, #236]	; (80064b8 <HAL_GPIO_Init+0x320>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	43db      	mvns	r3, r3
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4013      	ands	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063ec:	4a32      	ldr	r2, [pc, #200]	; (80064b8 <HAL_GPIO_Init+0x320>)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063f2:	4b31      	ldr	r3, [pc, #196]	; (80064b8 <HAL_GPIO_Init+0x320>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	43db      	mvns	r3, r3
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4013      	ands	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006416:	4a28      	ldr	r2, [pc, #160]	; (80064b8 <HAL_GPIO_Init+0x320>)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800641c:	4b26      	ldr	r3, [pc, #152]	; (80064b8 <HAL_GPIO_Init+0x320>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	43db      	mvns	r3, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4013      	ands	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006440:	4a1d      	ldr	r2, [pc, #116]	; (80064b8 <HAL_GPIO_Init+0x320>)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006446:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <HAL_GPIO_Init+0x320>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	43db      	mvns	r3, r3
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4013      	ands	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800646a:	4a13      	ldr	r2, [pc, #76]	; (80064b8 <HAL_GPIO_Init+0x320>)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	3301      	adds	r3, #1
 8006474:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	fa22 f303 	lsr.w	r3, r2, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	f47f ae91 	bne.w	80061a8 <HAL_GPIO_Init+0x10>
  }
}
 8006486:	bf00      	nop
 8006488:	bf00      	nop
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	40021000 	.word	0x40021000
 8006498:	40010000 	.word	0x40010000
 800649c:	48000400 	.word	0x48000400
 80064a0:	48000800 	.word	0x48000800
 80064a4:	48000c00 	.word	0x48000c00
 80064a8:	48001000 	.word	0x48001000
 80064ac:	48001400 	.word	0x48001400
 80064b0:	48001800 	.word	0x48001800
 80064b4:	48001c00 	.word	0x48001c00
 80064b8:	40010400 	.word	0x40010400

080064bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80064ca:	e0c9      	b.n	8006660 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80064cc:	2201      	movs	r2, #1
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	4013      	ands	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80bc 	beq.w	800665a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80064e2:	4a66      	ldr	r2, [pc, #408]	; (800667c <HAL_GPIO_DeInit+0x1c0>)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	3302      	adds	r3, #2
 80064ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	220f      	movs	r2, #15
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4013      	ands	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800650a:	d02b      	beq.n	8006564 <HAL_GPIO_DeInit+0xa8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a5c      	ldr	r2, [pc, #368]	; (8006680 <HAL_GPIO_DeInit+0x1c4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d025      	beq.n	8006560 <HAL_GPIO_DeInit+0xa4>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a5b      	ldr	r2, [pc, #364]	; (8006684 <HAL_GPIO_DeInit+0x1c8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d01f      	beq.n	800655c <HAL_GPIO_DeInit+0xa0>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a5a      	ldr	r2, [pc, #360]	; (8006688 <HAL_GPIO_DeInit+0x1cc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d019      	beq.n	8006558 <HAL_GPIO_DeInit+0x9c>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a59      	ldr	r2, [pc, #356]	; (800668c <HAL_GPIO_DeInit+0x1d0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d013      	beq.n	8006554 <HAL_GPIO_DeInit+0x98>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a58      	ldr	r2, [pc, #352]	; (8006690 <HAL_GPIO_DeInit+0x1d4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00d      	beq.n	8006550 <HAL_GPIO_DeInit+0x94>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a57      	ldr	r2, [pc, #348]	; (8006694 <HAL_GPIO_DeInit+0x1d8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d007      	beq.n	800654c <HAL_GPIO_DeInit+0x90>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a56      	ldr	r2, [pc, #344]	; (8006698 <HAL_GPIO_DeInit+0x1dc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d101      	bne.n	8006548 <HAL_GPIO_DeInit+0x8c>
 8006544:	2307      	movs	r3, #7
 8006546:	e00e      	b.n	8006566 <HAL_GPIO_DeInit+0xaa>
 8006548:	2308      	movs	r3, #8
 800654a:	e00c      	b.n	8006566 <HAL_GPIO_DeInit+0xaa>
 800654c:	2306      	movs	r3, #6
 800654e:	e00a      	b.n	8006566 <HAL_GPIO_DeInit+0xaa>
 8006550:	2305      	movs	r3, #5
 8006552:	e008      	b.n	8006566 <HAL_GPIO_DeInit+0xaa>
 8006554:	2304      	movs	r3, #4
 8006556:	e006      	b.n	8006566 <HAL_GPIO_DeInit+0xaa>
 8006558:	2303      	movs	r3, #3
 800655a:	e004      	b.n	8006566 <HAL_GPIO_DeInit+0xaa>
 800655c:	2302      	movs	r3, #2
 800655e:	e002      	b.n	8006566 <HAL_GPIO_DeInit+0xaa>
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <HAL_GPIO_DeInit+0xaa>
 8006564:	2300      	movs	r3, #0
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	f002 0203 	and.w	r2, r2, #3
 800656c:	0092      	lsls	r2, r2, #2
 800656e:	4093      	lsls	r3, r2
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	429a      	cmp	r2, r3
 8006574:	d132      	bne.n	80065dc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006576:	4b49      	ldr	r3, [pc, #292]	; (800669c <HAL_GPIO_DeInit+0x1e0>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	43db      	mvns	r3, r3
 800657e:	4947      	ldr	r1, [pc, #284]	; (800669c <HAL_GPIO_DeInit+0x1e0>)
 8006580:	4013      	ands	r3, r2
 8006582:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006584:	4b45      	ldr	r3, [pc, #276]	; (800669c <HAL_GPIO_DeInit+0x1e0>)
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	43db      	mvns	r3, r3
 800658c:	4943      	ldr	r1, [pc, #268]	; (800669c <HAL_GPIO_DeInit+0x1e0>)
 800658e:	4013      	ands	r3, r2
 8006590:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006592:	4b42      	ldr	r3, [pc, #264]	; (800669c <HAL_GPIO_DeInit+0x1e0>)
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	43db      	mvns	r3, r3
 800659a:	4940      	ldr	r1, [pc, #256]	; (800669c <HAL_GPIO_DeInit+0x1e0>)
 800659c:	4013      	ands	r3, r2
 800659e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80065a0:	4b3e      	ldr	r3, [pc, #248]	; (800669c <HAL_GPIO_DeInit+0x1e0>)
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	43db      	mvns	r3, r3
 80065a8:	493c      	ldr	r1, [pc, #240]	; (800669c <HAL_GPIO_DeInit+0x1e0>)
 80065aa:	4013      	ands	r3, r2
 80065ac:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f003 0303 	and.w	r3, r3, #3
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	220f      	movs	r2, #15
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80065be:	4a2f      	ldr	r2, [pc, #188]	; (800667c <HAL_GPIO_DeInit+0x1c0>)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	089b      	lsrs	r3, r3, #2
 80065c4:	3302      	adds	r3, #2
 80065c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	43da      	mvns	r2, r3
 80065ce:	482b      	ldr	r0, [pc, #172]	; (800667c <HAL_GPIO_DeInit+0x1c0>)
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	400a      	ands	r2, r1
 80065d6:	3302      	adds	r3, #2
 80065d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	2103      	movs	r1, #3
 80065e6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	08da      	lsrs	r2, r3, #3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3208      	adds	r2, #8
 80065f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	220f      	movs	r2, #15
 8006606:	fa02 f303 	lsl.w	r3, r2, r3
 800660a:	43db      	mvns	r3, r3
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	08d2      	lsrs	r2, r2, #3
 8006610:	4019      	ands	r1, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3208      	adds	r2, #8
 8006616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	2103      	movs	r1, #3
 8006624:	fa01 f303 	lsl.w	r3, r1, r3
 8006628:	43db      	mvns	r3, r3
 800662a:	401a      	ands	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	2101      	movs	r1, #1
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	fa01 f303 	lsl.w	r3, r1, r3
 800663c:	43db      	mvns	r3, r3
 800663e:	401a      	ands	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	2103      	movs	r1, #3
 800664e:	fa01 f303 	lsl.w	r3, r1, r3
 8006652:	43db      	mvns	r3, r3
 8006654:	401a      	ands	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	3301      	adds	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	f47f af2f 	bne.w	80064cc <HAL_GPIO_DeInit+0x10>
  }
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	40010000 	.word	0x40010000
 8006680:	48000400 	.word	0x48000400
 8006684:	48000800 	.word	0x48000800
 8006688:	48000c00 	.word	0x48000c00
 800668c:	48001000 	.word	0x48001000
 8006690:	48001400 	.word	0x48001400
 8006694:	48001800 	.word	0x48001800
 8006698:	48001c00 	.word	0x48001c00
 800669c:	40010400 	.word	0x40010400

080066a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	887b      	ldrh	r3, [r7, #2]
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80066b8:	2301      	movs	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]
 80066bc:	e001      	b.n	80066c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	807b      	strh	r3, [r7, #2]
 80066dc:	4613      	mov	r3, r2
 80066de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066e0:	787b      	ldrb	r3, [r7, #1]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066e6:	887a      	ldrh	r2, [r7, #2]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80066ec:	e002      	b.n	80066f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80066ee:	887a      	ldrh	r2, [r7, #2]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006712:	887a      	ldrh	r2, [r7, #2]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4013      	ands	r3, r2
 8006718:	041a      	lsls	r2, r3, #16
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	43d9      	mvns	r1, r3
 800671e:	887b      	ldrh	r3, [r7, #2]
 8006720:	400b      	ands	r3, r1
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	619a      	str	r2, [r3, #24]
}
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e081      	b.n	800684a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fd fb1a 	bl	8003d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2224      	movs	r2, #36	; 0x24
 8006764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0201 	bic.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006784:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006794:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d107      	bne.n	80067ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067aa:	609a      	str	r2, [r3, #8]
 80067ac:	e006      	b.n	80067bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80067ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d104      	bne.n	80067ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691a      	ldr	r2, [r3, #16]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69d9      	ldr	r1, [r3, #28]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1a      	ldr	r2, [r3, #32]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b082      	sub	sp, #8
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e021      	b.n	80068a8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7fd fae7 	bl	8003e50 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	607a      	str	r2, [r7, #4]
 80068ba:	461a      	mov	r2, r3
 80068bc:	460b      	mov	r3, r1
 80068be:	817b      	strh	r3, [r7, #10]
 80068c0:	4613      	mov	r3, r2
 80068c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	f040 80da 	bne.w	8006a86 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_I2C_Master_Transmit+0x30>
 80068dc:	2302      	movs	r3, #2
 80068de:	e0d3      	b.n	8006a88 <HAL_I2C_Master_Transmit+0x1d8>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068e8:	f7ff fa5a 	bl	8005da0 <HAL_GetTick>
 80068ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	2319      	movs	r3, #25
 80068f4:	2201      	movs	r2, #1
 80068f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 fdde 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e0be      	b.n	8006a88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2221      	movs	r2, #33	; 0x21
 800690e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2210      	movs	r2, #16
 8006916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	893a      	ldrh	r2, [r7, #8]
 800692a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	2bff      	cmp	r3, #255	; 0xff
 800693a:	d90e      	bls.n	800695a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	22ff      	movs	r2, #255	; 0xff
 8006940:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006946:	b2da      	uxtb	r2, r3
 8006948:	8979      	ldrh	r1, [r7, #10]
 800694a:	4b51      	ldr	r3, [pc, #324]	; (8006a90 <HAL_I2C_Master_Transmit+0x1e0>)
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 ffd4 	bl	8007900 <I2C_TransferConfig>
 8006958:	e06c      	b.n	8006a34 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006968:	b2da      	uxtb	r2, r3
 800696a:	8979      	ldrh	r1, [r7, #10]
 800696c:	4b48      	ldr	r3, [pc, #288]	; (8006a90 <HAL_I2C_Master_Transmit+0x1e0>)
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 ffc3 	bl	8007900 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800697a:	e05b      	b.n	8006a34 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	6a39      	ldr	r1, [r7, #32]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fddb 	bl	800753c <I2C_WaitOnTXISFlagUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e07b      	b.n	8006a88 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	781a      	ldrb	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d034      	beq.n	8006a34 <HAL_I2C_Master_Transmit+0x184>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d130      	bne.n	8006a34 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	2200      	movs	r2, #0
 80069da:	2180      	movs	r1, #128	; 0x80
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 fd6d 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e04d      	b.n	8006a88 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2bff      	cmp	r3, #255	; 0xff
 80069f4:	d90e      	bls.n	8006a14 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	22ff      	movs	r2, #255	; 0xff
 80069fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	8979      	ldrh	r1, [r7, #10]
 8006a04:	2300      	movs	r3, #0
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 ff77 	bl	8007900 <I2C_TransferConfig>
 8006a12:	e00f      	b.n	8006a34 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	8979      	ldrh	r1, [r7, #10]
 8006a26:	2300      	movs	r3, #0
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 ff66 	bl	8007900 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d19e      	bne.n	800697c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	6a39      	ldr	r1, [r7, #32]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fdba 	bl	80075bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e01a      	b.n	8006a88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2220      	movs	r2, #32
 8006a58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6859      	ldr	r1, [r3, #4]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <HAL_I2C_Master_Transmit+0x1e4>)
 8006a66:	400b      	ands	r3, r1
 8006a68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e000      	b.n	8006a88 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
  }
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	80002000 	.word	0x80002000
 8006a94:	fe00e800 	.word	0xfe00e800

08006a98 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	607a      	str	r2, [r7, #4]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	817b      	strh	r3, [r7, #10]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	f040 80db 	bne.w	8006c70 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_I2C_Master_Receive+0x30>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e0d4      	b.n	8006c72 <HAL_I2C_Master_Receive+0x1da>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ad0:	f7ff f966 	bl	8005da0 <HAL_GetTick>
 8006ad4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	2319      	movs	r3, #25
 8006adc:	2201      	movs	r2, #1
 8006ade:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fcea 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e0bf      	b.n	8006c72 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2222      	movs	r2, #34	; 0x22
 8006af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2210      	movs	r2, #16
 8006afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	893a      	ldrh	r2, [r7, #8]
 8006b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2bff      	cmp	r3, #255	; 0xff
 8006b22:	d90e      	bls.n	8006b42 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	22ff      	movs	r2, #255	; 0xff
 8006b28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	8979      	ldrh	r1, [r7, #10]
 8006b32:	4b52      	ldr	r3, [pc, #328]	; (8006c7c <HAL_I2C_Master_Receive+0x1e4>)
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fee0 	bl	8007900 <I2C_TransferConfig>
 8006b40:	e06d      	b.n	8006c1e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	8979      	ldrh	r1, [r7, #10]
 8006b54:	4b49      	ldr	r3, [pc, #292]	; (8006c7c <HAL_I2C_Master_Receive+0x1e4>)
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 fecf 	bl	8007900 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006b62:	e05c      	b.n	8006c1e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	6a39      	ldr	r1, [r7, #32]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 fd63 	bl	8007634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e07c      	b.n	8006c72 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d034      	beq.n	8006c1e <HAL_I2C_Master_Receive+0x186>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d130      	bne.n	8006c1e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fc78 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e04d      	b.n	8006c72 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	2bff      	cmp	r3, #255	; 0xff
 8006bde:	d90e      	bls.n	8006bfe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	22ff      	movs	r2, #255	; 0xff
 8006be4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	8979      	ldrh	r1, [r7, #10]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 fe82 	bl	8007900 <I2C_TransferConfig>
 8006bfc:	e00f      	b.n	8006c1e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	8979      	ldrh	r1, [r7, #10]
 8006c10:	2300      	movs	r3, #0
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fe71 	bl	8007900 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d19d      	bne.n	8006b64 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	6a39      	ldr	r1, [r7, #32]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fcc5 	bl	80075bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e01a      	b.n	8006c72 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2220      	movs	r2, #32
 8006c42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6859      	ldr	r1, [r3, #4]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <HAL_I2C_Master_Receive+0x1e8>)
 8006c50:	400b      	ands	r3, r1
 8006c52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e000      	b.n	8006c72 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006c70:	2302      	movs	r3, #2
  }
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	80002400 	.word	0x80002400
 8006c80:	fe00e800 	.word	0xfe00e800

08006c84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	4611      	mov	r1, r2
 8006c90:	461a      	mov	r2, r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	817b      	strh	r3, [r7, #10]
 8006c96:	460b      	mov	r3, r1
 8006c98:	813b      	strh	r3, [r7, #8]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	f040 80f9 	bne.w	8006e9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <HAL_I2C_Mem_Write+0x34>
 8006cb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d105      	bne.n	8006cc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0ed      	b.n	8006ea0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_I2C_Mem_Write+0x4e>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e0e6      	b.n	8006ea0 <HAL_I2C_Mem_Write+0x21c>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cda:	f7ff f861 	bl	8005da0 <HAL_GetTick>
 8006cde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	2319      	movs	r3, #25
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 fbe5 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e0d1      	b.n	8006ea0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2221      	movs	r2, #33	; 0x21
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2240      	movs	r2, #64	; 0x40
 8006d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a3a      	ldr	r2, [r7, #32]
 8006d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d24:	88f8      	ldrh	r0, [r7, #6]
 8006d26:	893a      	ldrh	r2, [r7, #8]
 8006d28:	8979      	ldrh	r1, [r7, #10]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	4603      	mov	r3, r0
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 faf5 	bl	8007324 <I2C_RequestMemoryWrite>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e0a9      	b.n	8006ea0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2bff      	cmp	r3, #255	; 0xff
 8006d54:	d90e      	bls.n	8006d74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	22ff      	movs	r2, #255	; 0xff
 8006d5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	8979      	ldrh	r1, [r7, #10]
 8006d64:	2300      	movs	r3, #0
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fdc7 	bl	8007900 <I2C_TransferConfig>
 8006d72:	e00f      	b.n	8006d94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	8979      	ldrh	r1, [r7, #10]
 8006d86:	2300      	movs	r3, #0
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 fdb6 	bl	8007900 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 fbcf 	bl	800753c <I2C_WaitOnTXISFlagUntilTimeout>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e07b      	b.n	8006ea0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	781a      	ldrb	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d034      	beq.n	8006e4c <HAL_I2C_Mem_Write+0x1c8>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d130      	bne.n	8006e4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	2200      	movs	r2, #0
 8006df2:	2180      	movs	r1, #128	; 0x80
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 fb61 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e04d      	b.n	8006ea0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2bff      	cmp	r3, #255	; 0xff
 8006e0c:	d90e      	bls.n	8006e2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	22ff      	movs	r2, #255	; 0xff
 8006e12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	8979      	ldrh	r1, [r7, #10]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fd6b 	bl	8007900 <I2C_TransferConfig>
 8006e2a:	e00f      	b.n	8006e4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	8979      	ldrh	r1, [r7, #10]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 fd5a 	bl	8007900 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d19e      	bne.n	8006d94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fbae 	bl	80075bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e01a      	b.n	8006ea0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6859      	ldr	r1, [r3, #4]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <HAL_I2C_Mem_Write+0x224>)
 8006e7e:	400b      	ands	r3, r1
 8006e80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e000      	b.n	8006ea0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006e9e:	2302      	movs	r3, #2
  }
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	fe00e800 	.word	0xfe00e800

08006eac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	817b      	strh	r3, [r7, #10]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	813b      	strh	r3, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	f040 80fd 	bne.w	80070ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_I2C_Mem_Read+0x34>
 8006eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d105      	bne.n	8006eec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0f1      	b.n	80070d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <HAL_I2C_Mem_Read+0x4e>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e0ea      	b.n	80070d0 <HAL_I2C_Mem_Read+0x224>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f02:	f7fe ff4d 	bl	8005da0 <HAL_GetTick>
 8006f06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	2319      	movs	r3, #25
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fad1 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0d5      	b.n	80070d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2222      	movs	r2, #34	; 0x22
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2240      	movs	r2, #64	; 0x40
 8006f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a3a      	ldr	r2, [r7, #32]
 8006f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f4c:	88f8      	ldrh	r0, [r7, #6]
 8006f4e:	893a      	ldrh	r2, [r7, #8]
 8006f50:	8979      	ldrh	r1, [r7, #10]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 fa35 	bl	80073cc <I2C_RequestMemoryRead>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0ad      	b.n	80070d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	2bff      	cmp	r3, #255	; 0xff
 8006f7c:	d90e      	bls.n	8006f9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	22ff      	movs	r2, #255	; 0xff
 8006f82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	8979      	ldrh	r1, [r7, #10]
 8006f8c:	4b52      	ldr	r3, [pc, #328]	; (80070d8 <HAL_I2C_Mem_Read+0x22c>)
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fcb3 	bl	8007900 <I2C_TransferConfig>
 8006f9a:	e00f      	b.n	8006fbc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	8979      	ldrh	r1, [r7, #10]
 8006fae:	4b4a      	ldr	r3, [pc, #296]	; (80070d8 <HAL_I2C_Mem_Read+0x22c>)
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 fca2 	bl	8007900 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2104      	movs	r1, #4
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 fa78 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e07c      	b.n	80070d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d034      	beq.n	800707c <HAL_I2C_Mem_Read+0x1d0>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007016:	2b00      	cmp	r3, #0
 8007018:	d130      	bne.n	800707c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	2200      	movs	r2, #0
 8007022:	2180      	movs	r1, #128	; 0x80
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 fa49 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e04d      	b.n	80070d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	2bff      	cmp	r3, #255	; 0xff
 800703c:	d90e      	bls.n	800705c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	22ff      	movs	r2, #255	; 0xff
 8007042:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007048:	b2da      	uxtb	r2, r3
 800704a:	8979      	ldrh	r1, [r7, #10]
 800704c:	2300      	movs	r3, #0
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 fc53 	bl	8007900 <I2C_TransferConfig>
 800705a:	e00f      	b.n	800707c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706a:	b2da      	uxtb	r2, r3
 800706c:	8979      	ldrh	r1, [r7, #10]
 800706e:	2300      	movs	r3, #0
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fc42 	bl	8007900 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d19a      	bne.n	8006fbc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 fa96 	bl	80075bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e01a      	b.n	80070d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2220      	movs	r2, #32
 80070a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6859      	ldr	r1, [r3, #4]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <HAL_I2C_Mem_Read+0x230>)
 80070ae:	400b      	ands	r3, r1
 80070b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e000      	b.n	80070d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80070ce:	2302      	movs	r3, #2
  }
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3718      	adds	r7, #24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	80002400 	.word	0x80002400
 80070dc:	fe00e800 	.word	0xfe00e800

080070e0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08a      	sub	sp, #40	; 0x28
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	607a      	str	r2, [r7, #4]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	460b      	mov	r3, r1
 80070ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	f040 80f1 	bne.w	80072e4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800710c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007110:	d101      	bne.n	8007116 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007112:	2302      	movs	r3, #2
 8007114:	e0e7      	b.n	80072e6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_I2C_IsDeviceReady+0x44>
 8007120:	2302      	movs	r3, #2
 8007122:	e0e0      	b.n	80072e6 <HAL_I2C_IsDeviceReady+0x206>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2224      	movs	r2, #36	; 0x24
 8007130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d107      	bne.n	8007152 <HAL_I2C_IsDeviceReady+0x72>
 8007142:	897b      	ldrh	r3, [r7, #10]
 8007144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007148:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800714c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007150:	e004      	b.n	800715c <HAL_I2C_IsDeviceReady+0x7c>
 8007152:	897b      	ldrh	r3, [r7, #10]
 8007154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007158:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	6812      	ldr	r2, [r2, #0]
 8007160:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007162:	f7fe fe1d 	bl	8005da0 <HAL_GetTick>
 8007166:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b20      	cmp	r3, #32
 8007174:	bf0c      	ite	eq
 8007176:	2301      	moveq	r3, #1
 8007178:	2300      	movne	r3, #0
 800717a:	b2db      	uxtb	r3, r3
 800717c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b10      	cmp	r3, #16
 800718a:	bf0c      	ite	eq
 800718c:	2301      	moveq	r3, #1
 800718e:	2300      	movne	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007194:	e034      	b.n	8007200 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800719c:	d01a      	beq.n	80071d4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800719e:	f7fe fdff 	bl	8005da0 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d302      	bcc.n	80071b4 <HAL_I2C_IsDeviceReady+0xd4>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10f      	bne.n	80071d4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c0:	f043 0220 	orr.w	r2, r3, #32
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e088      	b.n	80072e6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b20      	cmp	r3, #32
 80071e0:	bf0c      	ite	eq
 80071e2:	2301      	moveq	r3, #1
 80071e4:	2300      	movne	r3, #0
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b10      	cmp	r3, #16
 80071f6:	bf0c      	ite	eq
 80071f8:	2301      	moveq	r3, #1
 80071fa:	2300      	movne	r3, #0
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007200:	7ffb      	ldrb	r3, [r7, #31]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <HAL_I2C_IsDeviceReady+0x12c>
 8007206:	7fbb      	ldrb	r3, [r7, #30]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0c4      	beq.n	8007196 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	2b10      	cmp	r3, #16
 8007218:	d01a      	beq.n	8007250 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2200      	movs	r2, #0
 8007222:	2120      	movs	r1, #32
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f949 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e058      	b.n	80072e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2220      	movs	r2, #32
 800723a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	e04a      	b.n	80072e6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	2120      	movs	r1, #32
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f92e 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e03d      	b.n	80072e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2210      	movs	r2, #16
 8007270:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2220      	movs	r2, #32
 8007278:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	429a      	cmp	r2, r3
 8007280:	d118      	bne.n	80072b4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007290:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2200      	movs	r2, #0
 800729a:	2120      	movs	r1, #32
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f90d 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e01c      	b.n	80072e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2220      	movs	r2, #32
 80072b2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	3301      	adds	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	429a      	cmp	r2, r3
 80072c0:	f63f af3b 	bhi.w	800713a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d0:	f043 0220 	orr.w	r2, r3, #32
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e000      	b.n	80072e6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80072e4:	2302      	movs	r3, #2
  }
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3720      	adds	r7, #32
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072fc:	b2db      	uxtb	r3, r3
}
 80072fe:	4618      	mov	r0, r3
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007316:	4618      	mov	r0, r3
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
	...

08007324 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af02      	add	r7, sp, #8
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	4608      	mov	r0, r1
 800732e:	4611      	mov	r1, r2
 8007330:	461a      	mov	r2, r3
 8007332:	4603      	mov	r3, r0
 8007334:	817b      	strh	r3, [r7, #10]
 8007336:	460b      	mov	r3, r1
 8007338:	813b      	strh	r3, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	b2da      	uxtb	r2, r3
 8007342:	8979      	ldrh	r1, [r7, #10]
 8007344:	4b20      	ldr	r3, [pc, #128]	; (80073c8 <I2C_RequestMemoryWrite+0xa4>)
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 fad7 	bl	8007900 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	69b9      	ldr	r1, [r7, #24]
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 f8f0 	bl	800753c <I2C_WaitOnTXISFlagUntilTimeout>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e02c      	b.n	80073c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007366:	88fb      	ldrh	r3, [r7, #6]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d105      	bne.n	8007378 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800736c:	893b      	ldrh	r3, [r7, #8]
 800736e:	b2da      	uxtb	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	629a      	str	r2, [r3, #40]	; 0x28
 8007376:	e015      	b.n	80073a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007378:	893b      	ldrh	r3, [r7, #8]
 800737a:	0a1b      	lsrs	r3, r3, #8
 800737c:	b29b      	uxth	r3, r3
 800737e:	b2da      	uxtb	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007386:	69fa      	ldr	r2, [r7, #28]
 8007388:	69b9      	ldr	r1, [r7, #24]
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f8d6 	bl	800753c <I2C_WaitOnTXISFlagUntilTimeout>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e012      	b.n	80073c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800739a:	893b      	ldrh	r3, [r7, #8]
 800739c:	b2da      	uxtb	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2200      	movs	r2, #0
 80073ac:	2180      	movs	r1, #128	; 0x80
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 f884 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	80002000 	.word	0x80002000

080073cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	4608      	mov	r0, r1
 80073d6:	4611      	mov	r1, r2
 80073d8:	461a      	mov	r2, r3
 80073da:	4603      	mov	r3, r0
 80073dc:	817b      	strh	r3, [r7, #10]
 80073de:	460b      	mov	r3, r1
 80073e0:	813b      	strh	r3, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80073e6:	88fb      	ldrh	r3, [r7, #6]
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	8979      	ldrh	r1, [r7, #10]
 80073ec:	4b20      	ldr	r3, [pc, #128]	; (8007470 <I2C_RequestMemoryRead+0xa4>)
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	2300      	movs	r3, #0
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 fa84 	bl	8007900 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	69b9      	ldr	r1, [r7, #24]
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f89d 	bl	800753c <I2C_WaitOnTXISFlagUntilTimeout>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e02c      	b.n	8007466 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d105      	bne.n	800741e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007412:	893b      	ldrh	r3, [r7, #8]
 8007414:	b2da      	uxtb	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	629a      	str	r2, [r3, #40]	; 0x28
 800741c:	e015      	b.n	800744a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800741e:	893b      	ldrh	r3, [r7, #8]
 8007420:	0a1b      	lsrs	r3, r3, #8
 8007422:	b29b      	uxth	r3, r3
 8007424:	b2da      	uxtb	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800742c:	69fa      	ldr	r2, [r7, #28]
 800742e:	69b9      	ldr	r1, [r7, #24]
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 f883 	bl	800753c <I2C_WaitOnTXISFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e012      	b.n	8007466 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007440:	893b      	ldrh	r3, [r7, #8]
 8007442:	b2da      	uxtb	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2200      	movs	r2, #0
 8007452:	2140      	movs	r1, #64	; 0x40
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f831 	bl	80074bc <I2C_WaitOnFlagUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e000      	b.n	8007466 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	80002000 	.word	0x80002000

08007474 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b02      	cmp	r3, #2
 8007488:	d103      	bne.n	8007492 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2200      	movs	r2, #0
 8007490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b01      	cmp	r3, #1
 800749e:	d007      	beq.n	80074b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699a      	ldr	r2, [r3, #24]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0201 	orr.w	r2, r2, #1
 80074ae:	619a      	str	r2, [r3, #24]
  }
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	603b      	str	r3, [r7, #0]
 80074c8:	4613      	mov	r3, r2
 80074ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074cc:	e022      	b.n	8007514 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074d4:	d01e      	beq.n	8007514 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d6:	f7fe fc63 	bl	8005da0 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d302      	bcc.n	80074ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d113      	bne.n	8007514 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f0:	f043 0220 	orr.w	r2, r3, #32
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e00f      	b.n	8007534 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	4013      	ands	r3, r2
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	429a      	cmp	r2, r3
 8007522:	bf0c      	ite	eq
 8007524:	2301      	moveq	r3, #1
 8007526:	2300      	movne	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	461a      	mov	r2, r3
 800752c:	79fb      	ldrb	r3, [r7, #7]
 800752e:	429a      	cmp	r2, r3
 8007530:	d0cd      	beq.n	80074ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007548:	e02c      	b.n	80075a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 f8ea 	bl	8007728 <I2C_IsErrorOccurred>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e02a      	b.n	80075b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007564:	d01e      	beq.n	80075a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007566:	f7fe fc1b 	bl	8005da0 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	429a      	cmp	r2, r3
 8007574:	d302      	bcc.n	800757c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d113      	bne.n	80075a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007580:	f043 0220 	orr.w	r2, r3, #32
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e007      	b.n	80075b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d1cb      	bne.n	800754a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075c8:	e028      	b.n	800761c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 f8aa 	bl	8007728 <I2C_IsErrorOccurred>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e026      	b.n	800762c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075de:	f7fe fbdf 	bl	8005da0 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d302      	bcc.n	80075f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d113      	bne.n	800761c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f8:	f043 0220 	orr.w	r2, r3, #32
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e007      	b.n	800762c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b20      	cmp	r3, #32
 8007628:	d1cf      	bne.n	80075ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007640:	e064      	b.n	800770c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 f86e 	bl	8007728 <I2C_IsErrorOccurred>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e062      	b.n	800771c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	f003 0320 	and.w	r3, r3, #32
 8007660:	2b20      	cmp	r3, #32
 8007662:	d138      	bne.n	80076d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f003 0304 	and.w	r3, r3, #4
 800766e:	2b04      	cmp	r3, #4
 8007670:	d105      	bne.n	800767e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	e04e      	b.n	800771c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b10      	cmp	r3, #16
 800768a:	d107      	bne.n	800769c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2210      	movs	r2, #16
 8007692:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2204      	movs	r2, #4
 8007698:	645a      	str	r2, [r3, #68]	; 0x44
 800769a:	e002      	b.n	80076a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2220      	movs	r2, #32
 80076a8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6859      	ldr	r1, [r3, #4]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80076b6:	400b      	ands	r3, r1
 80076b8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e022      	b.n	800771c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d6:	f7fe fb63 	bl	8005da0 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d302      	bcc.n	80076ec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10f      	bne.n	800770c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f0:	f043 0220 	orr.w	r2, r3, #32
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e007      	b.n	800771c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	f003 0304 	and.w	r3, r3, #4
 8007716:	2b04      	cmp	r3, #4
 8007718:	d193      	bne.n	8007642 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	fe00e800 	.word	0xfe00e800

08007728 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	; 0x28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b00      	cmp	r3, #0
 8007752:	d075      	beq.n	8007840 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2210      	movs	r2, #16
 800775a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800775c:	e056      	b.n	800780c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007764:	d052      	beq.n	800780c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007766:	f7fe fb1b 	bl	8005da0 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	429a      	cmp	r2, r3
 8007774:	d302      	bcc.n	800777c <I2C_IsErrorOccurred+0x54>
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d147      	bne.n	800780c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007786:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800778e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800779a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800779e:	d12e      	bne.n	80077fe <I2C_IsErrorOccurred+0xd6>
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077a6:	d02a      	beq.n	80077fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80077a8:	7cfb      	ldrb	r3, [r7, #19]
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	d027      	beq.n	80077fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80077be:	f7fe faef 	bl	8005da0 <HAL_GetTick>
 80077c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077c4:	e01b      	b.n	80077fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80077c6:	f7fe faeb 	bl	8005da0 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b19      	cmp	r3, #25
 80077d2:	d914      	bls.n	80077fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d8:	f043 0220 	orr.w	r2, r3, #32
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b20      	cmp	r3, #32
 800780a:	d1dc      	bne.n	80077c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b20      	cmp	r3, #32
 8007818:	d003      	beq.n	8007822 <I2C_IsErrorOccurred+0xfa>
 800781a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800781e:	2b00      	cmp	r3, #0
 8007820:	d09d      	beq.n	800775e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007826:	2b00      	cmp	r3, #0
 8007828:	d103      	bne.n	8007832 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2220      	movs	r2, #32
 8007830:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	f043 0304 	orr.w	r3, r3, #4
 8007838:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00b      	beq.n	800786a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	f043 0301 	orr.w	r3, r3, #1
 8007858:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007862:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	f043 0308 	orr.w	r3, r3, #8
 800787a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007884:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00b      	beq.n	80078ae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	f043 0302 	orr.w	r3, r3, #2
 800789c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80078ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01c      	beq.n	80078f0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7ff fddc 	bl	8007474 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6859      	ldr	r1, [r3, #4]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4b0d      	ldr	r3, [pc, #52]	; (80078fc <I2C_IsErrorOccurred+0x1d4>)
 80078c8:	400b      	ands	r3, r1
 80078ca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80078f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3728      	adds	r7, #40	; 0x28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	fe00e800 	.word	0xfe00e800

08007900 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	607b      	str	r3, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	817b      	strh	r3, [r7, #10]
 800790e:	4613      	mov	r3, r2
 8007910:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007912:	897b      	ldrh	r3, [r7, #10]
 8007914:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007918:	7a7b      	ldrb	r3, [r7, #9]
 800791a:	041b      	lsls	r3, r3, #16
 800791c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007920:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	4313      	orrs	r3, r2
 800792a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800792e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	0d5b      	lsrs	r3, r3, #21
 800793a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800793e:	4b08      	ldr	r3, [pc, #32]	; (8007960 <I2C_TransferConfig+0x60>)
 8007940:	430b      	orrs	r3, r1
 8007942:	43db      	mvns	r3, r3
 8007944:	ea02 0103 	and.w	r1, r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	430a      	orrs	r2, r1
 8007950:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	03ff63ff 	.word	0x03ff63ff

08007964 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b20      	cmp	r3, #32
 8007978:	d138      	bne.n	80079ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007984:	2302      	movs	r3, #2
 8007986:	e032      	b.n	80079ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2224      	movs	r2, #36	; 0x24
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0201 	bic.w	r2, r2, #1
 80079a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6819      	ldr	r1, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2220      	movs	r2, #32
 80079dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	e000      	b.n	80079ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079ec:	2302      	movs	r3, #2
  }
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d139      	bne.n	8007a84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e033      	b.n	8007a86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2224      	movs	r2, #36	; 0x24
 8007a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0201 	bic.w	r2, r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007a4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f042 0201 	orr.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	e000      	b.n	8007a86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a84:	2302      	movs	r3, #2
  }
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a94:	b08f      	sub	sp, #60	; 0x3c
 8007a96:	af0a      	add	r7, sp, #40	; 0x28
 8007a98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e116      	b.n	8007cd2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f00e fd3e 	bl	8016540 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2203      	movs	r2, #3
 8007ac8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d102      	bne.n	8007ade <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f008 fb67 	bl	80101b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	603b      	str	r3, [r7, #0]
 8007aee:	687e      	ldr	r6, [r7, #4]
 8007af0:	466d      	mov	r5, sp
 8007af2:	f106 0410 	add.w	r4, r6, #16
 8007af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007afe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b02:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b06:	1d33      	adds	r3, r6, #4
 8007b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b0a:	6838      	ldr	r0, [r7, #0]
 8007b0c:	f008 fa7a 	bl	8010004 <USB_CoreInit>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2202      	movs	r2, #2
 8007b1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e0d7      	b.n	8007cd2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2100      	movs	r1, #0
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f008 fb55 	bl	80101d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
 8007b32:	e04a      	b.n	8007bca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007b34:	7bfa      	ldrb	r2, [r7, #15]
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	333d      	adds	r3, #61	; 0x3d
 8007b44:	2201      	movs	r2, #1
 8007b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007b48:	7bfa      	ldrb	r2, [r7, #15]
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	440b      	add	r3, r1
 8007b56:	333c      	adds	r3, #60	; 0x3c
 8007b58:	7bfa      	ldrb	r2, [r7, #15]
 8007b5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007b5c:	7bfa      	ldrb	r2, [r7, #15]
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	b298      	uxth	r0, r3
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	4613      	mov	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	3344      	adds	r3, #68	; 0x44
 8007b70:	4602      	mov	r2, r0
 8007b72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007b74:	7bfa      	ldrb	r2, [r7, #15]
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	3340      	adds	r3, #64	; 0x40
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007b88:	7bfa      	ldrb	r2, [r7, #15]
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	00db      	lsls	r3, r3, #3
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	3348      	adds	r3, #72	; 0x48
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007b9c:	7bfa      	ldrb	r2, [r7, #15]
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	334c      	adds	r3, #76	; 0x4c
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007bb0:	7bfa      	ldrb	r2, [r7, #15]
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	3354      	adds	r3, #84	; 0x54
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	73fb      	strb	r3, [r7, #15]
 8007bca:	7bfa      	ldrb	r2, [r7, #15]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d3af      	bcc.n	8007b34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
 8007bd8:	e044      	b.n	8007c64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007bda:	7bfa      	ldrb	r2, [r7, #15]
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	4613      	mov	r3, r2
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	440b      	add	r3, r1
 8007be8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007bec:	2200      	movs	r2, #0
 8007bee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007bf0:	7bfa      	ldrb	r2, [r7, #15]
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007c02:	7bfa      	ldrb	r2, [r7, #15]
 8007c04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007c06:	7bfa      	ldrb	r2, [r7, #15]
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	00db      	lsls	r3, r3, #3
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007c18:	2200      	movs	r2, #0
 8007c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007c1c:	7bfa      	ldrb	r2, [r7, #15]
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007c32:	7bfa      	ldrb	r2, [r7, #15]
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007c48:	7bfa      	ldrb	r2, [r7, #15]
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	00db      	lsls	r3, r3, #3
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	440b      	add	r3, r1
 8007c56:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	3301      	adds	r3, #1
 8007c62:	73fb      	strb	r3, [r7, #15]
 8007c64:	7bfa      	ldrb	r2, [r7, #15]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d3b5      	bcc.n	8007bda <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	687e      	ldr	r6, [r7, #4]
 8007c76:	466d      	mov	r5, sp
 8007c78:	f106 0410 	add.w	r4, r6, #16
 8007c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007c88:	e885 0003 	stmia.w	r5, {r0, r1}
 8007c8c:	1d33      	adds	r3, r6, #4
 8007c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c90:	6838      	ldr	r0, [r7, #0]
 8007c92:	f008 faed 	bl	8010270 <USB_DevInit>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d005      	beq.n	8007ca8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e014      	b.n	8007cd2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d102      	bne.n	8007cc6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 f881 	bl	8008dc8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f009 fb75 	bl	80113ba <USB_DevDisconnect>

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cda <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <HAL_PCD_Start+0x1c>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e01c      	b.n	8007d30 <HAL_PCD_Start+0x56>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d105      	bne.n	8007d12 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f008 fa3c 	bl	8010194 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f009 fb29 	bl	8011378 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007d38:	b590      	push	{r4, r7, lr}
 8007d3a:	b08d      	sub	sp, #52	; 0x34
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f009 fbe7 	bl	8011522 <USB_GetMode>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f040 847e 	bne.w	8008658 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f009 fb4b 	bl	80113fc <USB_ReadInterrupts>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 8474 	beq.w	8008656 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	0a1b      	lsrs	r3, r3, #8
 8007d78:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f009 fb38 	bl	80113fc <USB_ReadInterrupts>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d107      	bne.n	8007da6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695a      	ldr	r2, [r3, #20]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f002 0202 	and.w	r2, r2, #2
 8007da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f009 fb26 	bl	80113fc <USB_ReadInterrupts>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f003 0310 	and.w	r3, r3, #16
 8007db6:	2b10      	cmp	r3, #16
 8007db8:	d161      	bne.n	8007e7e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699a      	ldr	r2, [r3, #24]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0210 	bic.w	r2, r2, #16
 8007dc8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f003 020f 	and.w	r2, r3, #15
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	00db      	lsls	r3, r3, #3
 8007dda:	4413      	add	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	4413      	add	r3, r2
 8007de6:	3304      	adds	r3, #4
 8007de8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	0c5b      	lsrs	r3, r3, #17
 8007dee:	f003 030f 	and.w	r3, r3, #15
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d124      	bne.n	8007e40 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d035      	beq.n	8007e6e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	091b      	lsrs	r3, r3, #4
 8007e0a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	6a38      	ldr	r0, [r7, #32]
 8007e16:	f009 f95d 	bl	80110d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	691a      	ldr	r2, [r3, #16]
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	091b      	lsrs	r3, r3, #4
 8007e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e26:	441a      	add	r2, r3
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	6a1a      	ldr	r2, [r3, #32]
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	091b      	lsrs	r3, r3, #4
 8007e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e38:	441a      	add	r2, r3
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	621a      	str	r2, [r3, #32]
 8007e3e:	e016      	b.n	8007e6e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	0c5b      	lsrs	r3, r3, #17
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	d110      	bne.n	8007e6e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e52:	2208      	movs	r2, #8
 8007e54:	4619      	mov	r1, r3
 8007e56:	6a38      	ldr	r0, [r7, #32]
 8007e58:	f009 f93c 	bl	80110d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	6a1a      	ldr	r2, [r3, #32]
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	091b      	lsrs	r3, r3, #4
 8007e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e68:	441a      	add	r2, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	699a      	ldr	r2, [r3, #24]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0210 	orr.w	r2, r2, #16
 8007e7c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f009 faba 	bl	80113fc <USB_ReadInterrupts>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e92:	f040 80a7 	bne.w	8007fe4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f009 fabf 	bl	8011422 <USB_ReadDevAllOutEpInterrupt>
 8007ea4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007ea6:	e099      	b.n	8007fdc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 808e 	beq.w	8007fd0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eba:	b2d2      	uxtb	r2, r2
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f009 fae3 	bl	801148a <USB_ReadDevOutEPInterrupt>
 8007ec4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00c      	beq.n	8007eea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007edc:	461a      	mov	r2, r3
 8007ede:	2301      	movs	r3, #1
 8007ee0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fe95 	bl	8008c14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f003 0308 	and.w	r3, r3, #8
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00c      	beq.n	8007f0e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f00:	461a      	mov	r2, r3
 8007f02:	2308      	movs	r3, #8
 8007f04:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fed1 	bl	8008cb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f003 0310 	and.w	r3, r3, #16
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d008      	beq.n	8007f2a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f24:	461a      	mov	r2, r3
 8007f26:	2310      	movs	r3, #16
 8007f28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d030      	beq.n	8007f96 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f3c:	2b80      	cmp	r3, #128	; 0x80
 8007f3e:	d109      	bne.n	8007f54 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	69fa      	ldr	r2, [r7, #28]
 8007f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f52:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f56:	4613      	mov	r3, r2
 8007f58:	00db      	lsls	r3, r3, #3
 8007f5a:	4413      	add	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	4413      	add	r3, r2
 8007f66:	3304      	adds	r3, #4
 8007f68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	78db      	ldrb	r3, [r3, #3]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d108      	bne.n	8007f84 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2200      	movs	r2, #0
 8007f76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f00e fc22 	bl	80167c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f90:	461a      	mov	r2, r3
 8007f92:	2302      	movs	r3, #2
 8007f94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f003 0320 	and.w	r3, r3, #32
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d008      	beq.n	8007fb2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fac:	461a      	mov	r2, r3
 8007fae:	2320      	movs	r3, #32
 8007fb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d009      	beq.n	8007fd0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	085b      	lsrs	r3, r3, #1
 8007fda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f47f af62 	bne.w	8007ea8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f009 fa07 	bl	80113fc <USB_ReadInterrupts>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ff4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ff8:	f040 80a4 	bne.w	8008144 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4618      	mov	r0, r3
 8008002:	f009 fa28 	bl	8011456 <USB_ReadDevAllInEpInterrupt>
 8008006:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800800c:	e096      	b.n	800813c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800800e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 808b 	beq.w	8008130 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008020:	b2d2      	uxtb	r2, r2
 8008022:	4611      	mov	r1, r2
 8008024:	4618      	mov	r0, r3
 8008026:	f009 fa4e 	bl	80114c6 <USB_ReadDevInEPInterrupt>
 800802a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d020      	beq.n	8008078 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	2201      	movs	r2, #1
 800803e:	fa02 f303 	lsl.w	r3, r2, r3
 8008042:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	43db      	mvns	r3, r3
 8008050:	69f9      	ldr	r1, [r7, #28]
 8008052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008056:	4013      	ands	r3, r2
 8008058:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008066:	461a      	mov	r2, r3
 8008068:	2301      	movs	r3, #1
 800806a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	b2db      	uxtb	r3, r3
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f00e fb13 	bl	801669e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d008      	beq.n	8008094 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808e:	461a      	mov	r2, r3
 8008090:	2308      	movs	r3, #8
 8008092:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f003 0310 	and.w	r3, r3, #16
 800809a:	2b00      	cmp	r3, #0
 800809c:	d008      	beq.n	80080b0 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080aa:	461a      	mov	r2, r3
 80080ac:	2310      	movs	r3, #16
 80080ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d008      	beq.n	80080cc <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c6:	461a      	mov	r2, r3
 80080c8:	2340      	movs	r3, #64	; 0x40
 80080ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d023      	beq.n	800811e <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80080d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080d8:	6a38      	ldr	r0, [r7, #32]
 80080da:	f008 fa15 	bl	8010508 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80080de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e0:	4613      	mov	r3, r2
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	3338      	adds	r3, #56	; 0x38
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	4413      	add	r3, r2
 80080ee:	3304      	adds	r3, #4
 80080f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	78db      	ldrb	r3, [r3, #3]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d108      	bne.n	800810c <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2200      	movs	r2, #0
 80080fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	b2db      	uxtb	r3, r3
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f00e fb70 	bl	80167ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008118:	461a      	mov	r2, r3
 800811a:	2302      	movs	r3, #2
 800811c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fcea 	bl	8008b04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	3301      	adds	r3, #1
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008138:	085b      	lsrs	r3, r3, #1
 800813a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	2b00      	cmp	r3, #0
 8008140:	f47f af65 	bne.w	800800e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4618      	mov	r0, r3
 800814a:	f009 f957 	bl	80113fc <USB_ReadInterrupts>
 800814e:	4603      	mov	r3, r0
 8008150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008158:	d122      	bne.n	80081a0 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008168:	f023 0301 	bic.w	r3, r3, #1
 800816c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008174:	2b01      	cmp	r3, #1
 8008176:	d108      	bne.n	800818a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008180:	2100      	movs	r1, #0
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fe44 	bl	8008e10 <HAL_PCDEx_LPM_Callback>
 8008188:	e002      	b.n	8008190 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f00e faf4 	bl	8016778 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	695a      	ldr	r2, [r3, #20]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800819e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f009 f929 	bl	80113fc <USB_ReadInterrupts>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081b4:	d112      	bne.n	80081dc <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d102      	bne.n	80081cc <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f00e fab0 	bl	801672c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695a      	ldr	r2, [r3, #20]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80081da:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f009 f90b 	bl	80113fc <USB_ReadInterrupts>
 80081e6:	4603      	mov	r3, r0
 80081e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081f0:	d121      	bne.n	8008236 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	695a      	ldr	r2, [r3, #20]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008200:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d111      	bne.n	8008230 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821a:	089b      	lsrs	r3, r3, #2
 800821c:	f003 020f 	and.w	r2, r3, #15
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008226:	2101      	movs	r1, #1
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fdf1 	bl	8008e10 <HAL_PCDEx_LPM_Callback>
 800822e:	e002      	b.n	8008236 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f00e fa7b 	bl	801672c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f009 f8de 	bl	80113fc <USB_ReadInterrupts>
 8008240:	4603      	mov	r3, r0
 8008242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824a:	f040 80b5 	bne.w	80083b8 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	69fa      	ldr	r2, [r7, #28]
 8008258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800825c:	f023 0301 	bic.w	r3, r3, #1
 8008260:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2110      	movs	r1, #16
 8008268:	4618      	mov	r0, r3
 800826a:	f008 f94d 	bl	8010508 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800826e:	2300      	movs	r3, #0
 8008270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008272:	e046      	b.n	8008302 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008280:	461a      	mov	r2, r3
 8008282:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008286:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	440a      	add	r2, r1
 800829e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80082a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b4:	461a      	mov	r2, r3
 80082b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082cc:	0151      	lsls	r1, r2, #5
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	440a      	add	r2, r1
 80082d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fe:	3301      	adds	r3, #1
 8008300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008308:	429a      	cmp	r2, r3
 800830a:	d3b3      	bcc.n	8008274 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800831a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800831e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008324:	2b00      	cmp	r3, #0
 8008326:	d016      	beq.n	8008356 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008338:	f043 030b 	orr.w	r3, r3, #11
 800833c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008348:	69fa      	ldr	r2, [r7, #28]
 800834a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800834e:	f043 030b 	orr.w	r3, r3, #11
 8008352:	6453      	str	r3, [r2, #68]	; 0x44
 8008354:	e015      	b.n	8008382 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008364:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008368:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800836c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	69fa      	ldr	r2, [r7, #28]
 8008378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800837c:	f043 030b 	orr.w	r3, r3, #11
 8008380:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69fa      	ldr	r2, [r7, #28]
 800838c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008390:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008394:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80083a0:	4619      	mov	r1, r3
 80083a2:	4610      	mov	r0, r2
 80083a4:	f009 f8ee 	bl	8011584 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695a      	ldr	r2, [r3, #20]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80083b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4618      	mov	r0, r3
 80083be:	f009 f81d 	bl	80113fc <USB_ReadInterrupts>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083cc:	d124      	bne.n	8008418 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f009 f8b3 	bl	801153e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f008 f910 	bl	8010602 <USB_GetDevSpeed>
 80083e2:	4603      	mov	r3, r0
 80083e4:	461a      	mov	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681c      	ldr	r4, [r3, #0]
 80083ee:	f001 fbcf 	bl	8009b90 <HAL_RCC_GetHCLKFreq>
 80083f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	461a      	mov	r2, r3
 80083fc:	4620      	mov	r0, r4
 80083fe:	f007 fe2d 	bl	801005c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f00e f973 	bl	80166ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	695a      	ldr	r2, [r3, #20]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008416:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f008 ffed 	bl	80113fc <USB_ReadInterrupts>
 8008422:	4603      	mov	r3, r0
 8008424:	f003 0308 	and.w	r3, r3, #8
 8008428:	2b08      	cmp	r3, #8
 800842a:	d10a      	bne.n	8008442 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f00e f950 	bl	80166d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	695a      	ldr	r2, [r3, #20]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f002 0208 	and.w	r2, r2, #8
 8008440:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4618      	mov	r0, r3
 8008448:	f008 ffd8 	bl	80113fc <USB_ReadInterrupts>
 800844c:	4603      	mov	r3, r0
 800844e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008452:	2b80      	cmp	r3, #128	; 0x80
 8008454:	d122      	bne.n	800849c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008462:	2301      	movs	r3, #1
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
 8008466:	e014      	b.n	8008492 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846c:	4613      	mov	r3, r2
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	440b      	add	r3, r1
 8008476:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d105      	bne.n	800848c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	b2db      	uxtb	r3, r3
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fb0b 	bl	8008aa2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	3301      	adds	r3, #1
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008498:	429a      	cmp	r2, r3
 800849a:	d3e5      	bcc.n	8008468 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f008 ffab 	bl	80113fc <USB_ReadInterrupts>
 80084a6:	4603      	mov	r3, r0
 80084a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084b0:	d13b      	bne.n	800852a <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80084b2:	2301      	movs	r3, #1
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
 80084b6:	e02b      	b.n	8008510 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084cc:	4613      	mov	r3, r2
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	3340      	adds	r3, #64	; 0x40
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d115      	bne.n	800850a <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80084de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	da12      	bge.n	800850a <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80084e4:	6879      	ldr	r1, [r7, #4]
 80084e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e8:	4613      	mov	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	333f      	adds	r3, #63	; 0x3f
 80084f4:	2201      	movs	r2, #1
 80084f6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008500:	b2db      	uxtb	r3, r3
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 facc 	bl	8008aa2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	3301      	adds	r3, #1
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008516:	429a      	cmp	r2, r3
 8008518:	d3ce      	bcc.n	80084b8 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	695a      	ldr	r2, [r3, #20]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008528:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4618      	mov	r0, r3
 8008530:	f008 ff64 	bl	80113fc <USB_ReadInterrupts>
 8008534:	4603      	mov	r3, r0
 8008536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800853a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800853e:	d155      	bne.n	80085ec <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008540:	2301      	movs	r3, #1
 8008542:	627b      	str	r3, [r7, #36]	; 0x24
 8008544:	e045      	b.n	80085d2 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800855a:	4613      	mov	r3, r2
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d12e      	bne.n	80085cc <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800856e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008570:	2b00      	cmp	r3, #0
 8008572:	da2b      	bge.n	80085cc <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008580:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008584:	429a      	cmp	r2, r3
 8008586:	d121      	bne.n	80085cc <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800858c:	4613      	mov	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800859a:	2201      	movs	r2, #1
 800859c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10a      	bne.n	80085cc <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085c8:	6053      	str	r3, [r2, #4]
            break;
 80085ca:	e007      	b.n	80085dc <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	3301      	adds	r3, #1
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d8:	429a      	cmp	r2, r3
 80085da:	d3b4      	bcc.n	8008546 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	695a      	ldr	r2, [r3, #20]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80085ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f008 ff03 	bl	80113fc <USB_ReadInterrupts>
 80085f6:	4603      	mov	r3, r0
 80085f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008600:	d10a      	bne.n	8008618 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f00e f904 	bl	8016810 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008616:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4618      	mov	r0, r3
 800861e:	f008 feed 	bl	80113fc <USB_ReadInterrupts>
 8008622:	4603      	mov	r3, r0
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b04      	cmp	r3, #4
 800862a:	d115      	bne.n	8008658 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f00e f8f4 	bl	801682c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6859      	ldr	r1, [r3, #4]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69ba      	ldr	r2, [r7, #24]
 8008650:	430a      	orrs	r2, r1
 8008652:	605a      	str	r2, [r3, #4]
 8008654:	e000      	b.n	8008658 <HAL_PCD_IRQHandler+0x920>
      return;
 8008656:	bf00      	nop
    }
  }
}
 8008658:	3734      	adds	r7, #52	; 0x34
 800865a:	46bd      	mov	sp, r7
 800865c:	bd90      	pop	{r4, r7, pc}

0800865e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008670:	2b01      	cmp	r3, #1
 8008672:	d101      	bne.n	8008678 <HAL_PCD_SetAddress+0x1a>
 8008674:	2302      	movs	r3, #2
 8008676:	e013      	b.n	80086a0 <HAL_PCD_SetAddress+0x42>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	78fa      	ldrb	r2, [r7, #3]
 800868e:	4611      	mov	r1, r2
 8008690:	4618      	mov	r0, r3
 8008692:	f008 fe4b 	bl	801132c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	4608      	mov	r0, r1
 80086b2:	4611      	mov	r1, r2
 80086b4:	461a      	mov	r2, r3
 80086b6:	4603      	mov	r3, r0
 80086b8:	70fb      	strb	r3, [r7, #3]
 80086ba:	460b      	mov	r3, r1
 80086bc:	803b      	strh	r3, [r7, #0]
 80086be:	4613      	mov	r3, r2
 80086c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80086c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	da0f      	bge.n	80086ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	f003 020f 	and.w	r2, r3, #15
 80086d4:	4613      	mov	r3, r2
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	3338      	adds	r3, #56	; 0x38
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	4413      	add	r3, r2
 80086e2:	3304      	adds	r3, #4
 80086e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2201      	movs	r2, #1
 80086ea:	705a      	strb	r2, [r3, #1]
 80086ec:	e00f      	b.n	800870e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	f003 020f 	and.w	r2, r3, #15
 80086f4:	4613      	mov	r3, r2
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	4413      	add	r3, r2
 8008704:	3304      	adds	r3, #4
 8008706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	f003 030f 	and.w	r3, r3, #15
 8008714:	b2da      	uxtb	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800871a:	883a      	ldrh	r2, [r7, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	78ba      	ldrb	r2, [r7, #2]
 8008724:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	785b      	ldrb	r3, [r3, #1]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d004      	beq.n	8008738 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	b29a      	uxth	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008738:	78bb      	ldrb	r3, [r7, #2]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d102      	bne.n	8008744 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <HAL_PCD_EP_Open+0xaa>
 800874e:	2302      	movs	r3, #2
 8008750:	e00e      	b.n	8008770 <HAL_PCD_EP_Open+0xc8>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68f9      	ldr	r1, [r7, #12]
 8008760:	4618      	mov	r0, r3
 8008762:	f007 ff6d 	bl	8010640 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800876e:	7afb      	ldrb	r3, [r7, #11]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008788:	2b00      	cmp	r3, #0
 800878a:	da0f      	bge.n	80087ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	f003 020f 	and.w	r2, r3, #15
 8008792:	4613      	mov	r3, r2
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	3338      	adds	r3, #56	; 0x38
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	4413      	add	r3, r2
 80087a0:	3304      	adds	r3, #4
 80087a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	705a      	strb	r2, [r3, #1]
 80087aa:	e00f      	b.n	80087cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	f003 020f 	and.w	r2, r3, #15
 80087b2:	4613      	mov	r3, r2
 80087b4:	00db      	lsls	r3, r3, #3
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	4413      	add	r3, r2
 80087c2:	3304      	adds	r3, #4
 80087c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80087cc:	78fb      	ldrb	r3, [r7, #3]
 80087ce:	f003 030f 	and.w	r3, r3, #15
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <HAL_PCD_EP_Close+0x6e>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e00e      	b.n	8008804 <HAL_PCD_EP_Close+0x8c>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68f9      	ldr	r1, [r7, #12]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f007 ffab 	bl	8010750 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	607a      	str	r2, [r7, #4]
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	460b      	mov	r3, r1
 800881a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800881c:	7afb      	ldrb	r3, [r7, #11]
 800881e:	f003 020f 	and.w	r2, r3, #15
 8008822:	4613      	mov	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4413      	add	r3, r2
 8008832:	3304      	adds	r3, #4
 8008834:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2200      	movs	r2, #0
 8008846:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2200      	movs	r2, #0
 800884c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	f003 030f 	and.w	r3, r3, #15
 8008854:	b2da      	uxtb	r2, r3
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	f003 030f 	and.w	r3, r3, #15
 8008860:	2b00      	cmp	r3, #0
 8008862:	d106      	bne.n	8008872 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6979      	ldr	r1, [r7, #20]
 800886a:	4618      	mov	r0, r3
 800886c:	f008 fa2c 	bl	8010cc8 <USB_EP0StartXfer>
 8008870:	e005      	b.n	800887e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6979      	ldr	r1, [r7, #20]
 8008878:	4618      	mov	r0, r3
 800887a:	f008 f845 	bl	8010908 <USB_EPStartXfer>
  }

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	f003 020f 	and.w	r2, r3, #15
 800889a:	6879      	ldr	r1, [r7, #4]
 800889c:	4613      	mov	r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	4413      	add	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	440b      	add	r3, r1
 80088a6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80088aa:	681b      	ldr	r3, [r3, #0]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	607a      	str	r2, [r7, #4]
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	460b      	mov	r3, r1
 80088c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088c8:	7afb      	ldrb	r3, [r7, #11]
 80088ca:	f003 020f 	and.w	r2, r3, #15
 80088ce:	4613      	mov	r3, r2
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	3338      	adds	r3, #56	; 0x38
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	3304      	adds	r3, #4
 80088de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2200      	movs	r2, #0
 80088f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2201      	movs	r2, #1
 80088f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088f8:	7afb      	ldrb	r3, [r7, #11]
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008904:	7afb      	ldrb	r3, [r7, #11]
 8008906:	f003 030f 	and.w	r3, r3, #15
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6979      	ldr	r1, [r7, #20]
 8008914:	4618      	mov	r0, r3
 8008916:	f008 f9d7 	bl	8010cc8 <USB_EP0StartXfer>
 800891a:	e005      	b.n	8008928 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6979      	ldr	r1, [r7, #20]
 8008922:	4618      	mov	r0, r3
 8008924:	f007 fff0 	bl	8010908 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	f003 020f 	and.w	r2, r3, #15
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	429a      	cmp	r2, r3
 800894a:	d901      	bls.n	8008950 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e04e      	b.n	80089ee <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	da0f      	bge.n	8008978 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	f003 020f 	and.w	r2, r3, #15
 800895e:	4613      	mov	r3, r2
 8008960:	00db      	lsls	r3, r3, #3
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	3338      	adds	r3, #56	; 0x38
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	4413      	add	r3, r2
 800896c:	3304      	adds	r3, #4
 800896e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2201      	movs	r2, #1
 8008974:	705a      	strb	r2, [r3, #1]
 8008976:	e00d      	b.n	8008994 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	4613      	mov	r3, r2
 800897c:	00db      	lsls	r3, r3, #3
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	4413      	add	r3, r2
 800898a:	3304      	adds	r3, #4
 800898c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2201      	movs	r2, #1
 8008998:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_PCD_EP_SetStall+0x82>
 80089b0:	2302      	movs	r3, #2
 80089b2:	e01c      	b.n	80089ee <HAL_PCD_EP_SetStall+0xbc>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68f9      	ldr	r1, [r7, #12]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f008 fbde 	bl	8011184 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	f003 030f 	and.w	r3, r3, #15
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d108      	bne.n	80089e4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f008 fdd0 	bl	8011584 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	f003 020f 	and.w	r2, r3, #15
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d901      	bls.n	8008a14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e042      	b.n	8008a9a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	da0f      	bge.n	8008a3c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	f003 020f 	and.w	r2, r3, #15
 8008a22:	4613      	mov	r3, r2
 8008a24:	00db      	lsls	r3, r3, #3
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	3338      	adds	r3, #56	; 0x38
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	4413      	add	r3, r2
 8008a30:	3304      	adds	r3, #4
 8008a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2201      	movs	r2, #1
 8008a38:	705a      	strb	r2, [r3, #1]
 8008a3a:	e00f      	b.n	8008a5c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a3c:	78fb      	ldrb	r3, [r7, #3]
 8008a3e:	f003 020f 	and.w	r2, r3, #15
 8008a42:	4613      	mov	r3, r2
 8008a44:	00db      	lsls	r3, r3, #3
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	4413      	add	r3, r2
 8008a52:	3304      	adds	r3, #4
 8008a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a62:	78fb      	ldrb	r3, [r7, #3]
 8008a64:	f003 030f 	and.w	r3, r3, #15
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_PCD_EP_ClrStall+0x86>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e00e      	b.n	8008a9a <HAL_PCD_EP_ClrStall+0xa4>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68f9      	ldr	r1, [r7, #12]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f008 fbe8 	bl	8011260 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	da0c      	bge.n	8008ad0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	f003 020f 	and.w	r2, r3, #15
 8008abc:	4613      	mov	r3, r2
 8008abe:	00db      	lsls	r3, r3, #3
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	3338      	adds	r3, #56	; 0x38
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	3304      	adds	r3, #4
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	e00c      	b.n	8008aea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	f003 020f 	and.w	r2, r3, #15
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	00db      	lsls	r3, r3, #3
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68f9      	ldr	r1, [r7, #12]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f008 fa0b 	bl	8010f0c <USB_EPStopXfer>
 8008af6:	4603      	mov	r3, r0
 8008af8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008afa:	7afb      	ldrb	r3, [r7, #11]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	00db      	lsls	r3, r3, #3
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	3338      	adds	r3, #56	; 0x38
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	4413      	add	r3, r2
 8008b28:	3304      	adds	r3, #4
 8008b2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a1a      	ldr	r2, [r3, #32]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d901      	bls.n	8008b3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e067      	b.n	8008c0c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d902      	bls.n	8008b58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	3303      	adds	r3, #3
 8008b5c:	089b      	lsrs	r3, r3, #2
 8008b5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b60:	e026      	b.n	8008bb0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	699a      	ldr	r2, [r3, #24]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d902      	bls.n	8008b7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	3303      	adds	r3, #3
 8008b82:	089b      	lsrs	r3, r3, #2
 8008b84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6919      	ldr	r1, [r3, #16]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	6978      	ldr	r0, [r7, #20]
 8008b94:	f008 fa64 	bl	8011060 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	441a      	add	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a1a      	ldr	r2, [r3, #32]
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	441a      	add	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d809      	bhi.n	8008bda <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6a1a      	ldr	r2, [r3, #32]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d203      	bcs.n	8008bda <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1c3      	bne.n	8008b62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	699a      	ldr	r2, [r3, #24]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d811      	bhi.n	8008c0a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	2201      	movs	r2, #1
 8008bee:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	43db      	mvns	r3, r3
 8008c00:	6939      	ldr	r1, [r7, #16]
 8008c02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c06:	4013      	ands	r3, r2
 8008c08:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3720      	adds	r7, #32
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	333c      	adds	r3, #60	; 0x3c
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4a19      	ldr	r2, [pc, #100]	; (8008cac <PCD_EP_OutXfrComplete_int+0x98>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d124      	bne.n	8008c94 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00a      	beq.n	8008c6a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c60:	461a      	mov	r2, r3
 8008c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c66:	6093      	str	r3, [r2, #8]
 8008c68:	e01a      	b.n	8008ca0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d008      	beq.n	8008c86 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c80:	461a      	mov	r2, r3
 8008c82:	2320      	movs	r3, #32
 8008c84:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f00d fceb 	bl	8016668 <HAL_PCD_DataOutStageCallback>
 8008c92:	e005      	b.n	8008ca0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f00d fce4 	bl	8016668 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	4f54310a 	.word	0x4f54310a

08008cb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	333c      	adds	r3, #60	; 0x3c
 8008cc8:	3304      	adds	r3, #4
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4a0c      	ldr	r2, [pc, #48]	; (8008d14 <PCD_EP_OutSetupPacket_int+0x64>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d90e      	bls.n	8008d04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d009      	beq.n	8008d04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f00d fc9d 	bl	8016644 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	4f54300a 	.word	0x4f54300a

08008d18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
 8008d24:	4613      	mov	r3, r2
 8008d26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d107      	bne.n	8008d46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008d36:	883b      	ldrh	r3, [r7, #0]
 8008d38:	0419      	lsls	r1, r3, #16
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	629a      	str	r2, [r3, #40]	; 0x28
 8008d44:	e028      	b.n	8008d98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4c:	0c1b      	lsrs	r3, r3, #16
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	4413      	add	r3, r2
 8008d52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
 8008d58:	e00d      	b.n	8008d76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	3340      	adds	r3, #64	; 0x40
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	0c1b      	lsrs	r3, r3, #16
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	3301      	adds	r3, #1
 8008d74:	73fb      	strb	r3, [r7, #15]
 8008d76:	7bfa      	ldrb	r2, [r7, #15]
 8008d78:	78fb      	ldrb	r3, [r7, #3]
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d3ec      	bcc.n	8008d5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008d80:	883b      	ldrh	r3, [r7, #0]
 8008d82:	0418      	lsls	r0, r3, #16
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6819      	ldr	r1, [r3, #0]
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	4302      	orrs	r2, r0
 8008d90:	3340      	adds	r3, #64	; 0x40
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	460b      	mov	r3, r1
 8008db0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	887a      	ldrh	r2, [r7, #2]
 8008db8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dfa:	f043 0303 	orr.w	r3, r3, #3
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	460b      	mov	r3, r1
 8008e1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e38:	d102      	bne.n	8008e40 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e3e:	e00b      	b.n	8008e58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008e40:	4b08      	ldr	r3, [pc, #32]	; (8008e64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e4e:	d102      	bne.n	8008e56 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e54:	e000      	b.n	8008e58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8008e56:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	40007000 	.word	0x40007000

08008e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d141      	bne.n	8008efa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008e76:	4b4b      	ldr	r3, [pc, #300]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e82:	d131      	bne.n	8008ee8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e84:	4b47      	ldr	r3, [pc, #284]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e8a:	4a46      	ldr	r2, [pc, #280]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e94:	4b43      	ldr	r3, [pc, #268]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008e9c:	4a41      	ldr	r2, [pc, #260]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ea2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008ea4:	4b40      	ldr	r3, [pc, #256]	; (8008fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2232      	movs	r2, #50	; 0x32
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
 8008eae:	4a3f      	ldr	r2, [pc, #252]	; (8008fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb4:	0c9b      	lsrs	r3, r3, #18
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008eba:	e002      	b.n	8008ec2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008ec2:	4b38      	ldr	r3, [pc, #224]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ece:	d102      	bne.n	8008ed6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1f2      	bne.n	8008ebc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ed6:	4b33      	ldr	r3, [pc, #204]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ee2:	d158      	bne.n	8008f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e057      	b.n	8008f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ee8:	4b2e      	ldr	r3, [pc, #184]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eee:	4a2d      	ldr	r2, [pc, #180]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ef4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008ef8:	e04d      	b.n	8008f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f00:	d141      	bne.n	8008f86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f02:	4b28      	ldr	r3, [pc, #160]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f0e:	d131      	bne.n	8008f74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f10:	4b24      	ldr	r3, [pc, #144]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f16:	4a23      	ldr	r2, [pc, #140]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f20:	4b20      	ldr	r3, [pc, #128]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f28:	4a1e      	ldr	r2, [pc, #120]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008f30:	4b1d      	ldr	r3, [pc, #116]	; (8008fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2232      	movs	r2, #50	; 0x32
 8008f36:	fb02 f303 	mul.w	r3, r2, r3
 8008f3a:	4a1c      	ldr	r2, [pc, #112]	; (8008fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f40:	0c9b      	lsrs	r3, r3, #18
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f46:	e002      	b.n	8008f4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f4e:	4b15      	ldr	r3, [pc, #84]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f5a:	d102      	bne.n	8008f62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1f2      	bne.n	8008f48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f62:	4b10      	ldr	r3, [pc, #64]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f6e:	d112      	bne.n	8008f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e011      	b.n	8008f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f74:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f7a:	4a0a      	ldr	r2, [pc, #40]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008f84:	e007      	b.n	8008f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008f86:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f8e:	4a05      	ldr	r2, [pc, #20]	; (8008fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f94:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	40007000 	.word	0x40007000
 8008fa8:	20000004 	.word	0x20000004
 8008fac:	431bde83 	.word	0x431bde83

08008fb0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008fb4:	4b05      	ldr	r3, [pc, #20]	; (8008fcc <HAL_PWREx_EnableVddUSB+0x1c>)
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	4a04      	ldr	r2, [pc, #16]	; (8008fcc <HAL_PWREx_EnableVddUSB+0x1c>)
 8008fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008fbe:	6053      	str	r3, [r2, #4]
}
 8008fc0:	bf00      	nop
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	40007000 	.word	0x40007000

08008fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d102      	bne.n	8008fe4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	f000 bc08 	b.w	80097f4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fe4:	4b96      	ldr	r3, [pc, #600]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f003 030c 	and.w	r3, r3, #12
 8008fec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fee:	4b94      	ldr	r3, [pc, #592]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f003 0303 	and.w	r3, r3, #3
 8008ff6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0310 	and.w	r3, r3, #16
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 80e4 	beq.w	80091ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d007      	beq.n	800901c <HAL_RCC_OscConfig+0x4c>
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	2b0c      	cmp	r3, #12
 8009010:	f040 808b 	bne.w	800912a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2b01      	cmp	r3, #1
 8009018:	f040 8087 	bne.w	800912a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800901c:	4b88      	ldr	r3, [pc, #544]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d005      	beq.n	8009034 <HAL_RCC_OscConfig+0x64>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e3df      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a1a      	ldr	r2, [r3, #32]
 8009038:	4b81      	ldr	r3, [pc, #516]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0308 	and.w	r3, r3, #8
 8009040:	2b00      	cmp	r3, #0
 8009042:	d004      	beq.n	800904e <HAL_RCC_OscConfig+0x7e>
 8009044:	4b7e      	ldr	r3, [pc, #504]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800904c:	e005      	b.n	800905a <HAL_RCC_OscConfig+0x8a>
 800904e:	4b7c      	ldr	r3, [pc, #496]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009054:	091b      	lsrs	r3, r3, #4
 8009056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800905a:	4293      	cmp	r3, r2
 800905c:	d223      	bcs.n	80090a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	4618      	mov	r0, r3
 8009064:	f000 fdf8 	bl	8009c58 <RCC_SetFlashLatencyFromMSIRange>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e3c0      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009072:	4b73      	ldr	r3, [pc, #460]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a72      	ldr	r2, [pc, #456]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009078:	f043 0308 	orr.w	r3, r3, #8
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	4b70      	ldr	r3, [pc, #448]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	496d      	ldr	r1, [pc, #436]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 800908c:	4313      	orrs	r3, r2
 800908e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009090:	4b6b      	ldr	r3, [pc, #428]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	021b      	lsls	r3, r3, #8
 800909e:	4968      	ldr	r1, [pc, #416]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	604b      	str	r3, [r1, #4]
 80090a4:	e025      	b.n	80090f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80090a6:	4b66      	ldr	r3, [pc, #408]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a65      	ldr	r2, [pc, #404]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 80090ac:	f043 0308 	orr.w	r3, r3, #8
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	4b63      	ldr	r3, [pc, #396]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	4960      	ldr	r1, [pc, #384]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80090c4:	4b5e      	ldr	r3, [pc, #376]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	021b      	lsls	r3, r3, #8
 80090d2:	495b      	ldr	r1, [pc, #364]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 80090d4:	4313      	orrs	r3, r2
 80090d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d109      	bne.n	80090f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fdb8 	bl	8009c58 <RCC_SetFlashLatencyFromMSIRange>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e380      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80090f2:	f000 fcc1 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 80090f6:	4602      	mov	r2, r0
 80090f8:	4b51      	ldr	r3, [pc, #324]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	091b      	lsrs	r3, r3, #4
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	4950      	ldr	r1, [pc, #320]	; (8009244 <HAL_RCC_OscConfig+0x274>)
 8009104:	5ccb      	ldrb	r3, [r1, r3]
 8009106:	f003 031f 	and.w	r3, r3, #31
 800910a:	fa22 f303 	lsr.w	r3, r2, r3
 800910e:	4a4e      	ldr	r2, [pc, #312]	; (8009248 <HAL_RCC_OscConfig+0x278>)
 8009110:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009112:	4b4e      	ldr	r3, [pc, #312]	; (800924c <HAL_RCC_OscConfig+0x27c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4618      	mov	r0, r3
 8009118:	f7fc fdf2 	bl	8005d00 <HAL_InitTick>
 800911c:	4603      	mov	r3, r0
 800911e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d052      	beq.n	80091cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	e364      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d032      	beq.n	8009198 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009132:	4b43      	ldr	r3, [pc, #268]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a42      	ldr	r2, [pc, #264]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009138:	f043 0301 	orr.w	r3, r3, #1
 800913c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800913e:	f7fc fe2f 	bl	8005da0 <HAL_GetTick>
 8009142:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009144:	e008      	b.n	8009158 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009146:	f7fc fe2b 	bl	8005da0 <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	2b02      	cmp	r3, #2
 8009152:	d901      	bls.n	8009158 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009154:	2303      	movs	r3, #3
 8009156:	e34d      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009158:	4b39      	ldr	r3, [pc, #228]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0302 	and.w	r3, r3, #2
 8009160:	2b00      	cmp	r3, #0
 8009162:	d0f0      	beq.n	8009146 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009164:	4b36      	ldr	r3, [pc, #216]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a35      	ldr	r2, [pc, #212]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 800916a:	f043 0308 	orr.w	r3, r3, #8
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	4b33      	ldr	r3, [pc, #204]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	4930      	ldr	r1, [pc, #192]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 800917e:	4313      	orrs	r3, r2
 8009180:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009182:	4b2f      	ldr	r3, [pc, #188]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	021b      	lsls	r3, r3, #8
 8009190:	492b      	ldr	r1, [pc, #172]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009192:	4313      	orrs	r3, r2
 8009194:	604b      	str	r3, [r1, #4]
 8009196:	e01a      	b.n	80091ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009198:	4b29      	ldr	r3, [pc, #164]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a28      	ldr	r2, [pc, #160]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 800919e:	f023 0301 	bic.w	r3, r3, #1
 80091a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80091a4:	f7fc fdfc 	bl	8005da0 <HAL_GetTick>
 80091a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80091aa:	e008      	b.n	80091be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80091ac:	f7fc fdf8 	bl	8005da0 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d901      	bls.n	80091be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e31a      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80091be:	4b20      	ldr	r3, [pc, #128]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f0      	bne.n	80091ac <HAL_RCC_OscConfig+0x1dc>
 80091ca:	e000      	b.n	80091ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80091cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d073      	beq.n	80092c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d005      	beq.n	80091ec <HAL_RCC_OscConfig+0x21c>
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	2b0c      	cmp	r3, #12
 80091e4:	d10e      	bne.n	8009204 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d10b      	bne.n	8009204 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091ec:	4b14      	ldr	r3, [pc, #80]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d063      	beq.n	80092c0 <HAL_RCC_OscConfig+0x2f0>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d15f      	bne.n	80092c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e2f7      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800920c:	d106      	bne.n	800921c <HAL_RCC_OscConfig+0x24c>
 800920e:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a0b      	ldr	r2, [pc, #44]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	e025      	b.n	8009268 <HAL_RCC_OscConfig+0x298>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009224:	d114      	bne.n	8009250 <HAL_RCC_OscConfig+0x280>
 8009226:	4b06      	ldr	r3, [pc, #24]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a05      	ldr	r2, [pc, #20]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 800922c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	4b03      	ldr	r3, [pc, #12]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a02      	ldr	r2, [pc, #8]	; (8009240 <HAL_RCC_OscConfig+0x270>)
 8009238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	e013      	b.n	8009268 <HAL_RCC_OscConfig+0x298>
 8009240:	40021000 	.word	0x40021000
 8009244:	08019f8c 	.word	0x08019f8c
 8009248:	20000004 	.word	0x20000004
 800924c:	20000008 	.word	0x20000008
 8009250:	4ba0      	ldr	r3, [pc, #640]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a9f      	ldr	r2, [pc, #636]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800925a:	6013      	str	r3, [r2, #0]
 800925c:	4b9d      	ldr	r3, [pc, #628]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a9c      	ldr	r2, [pc, #624]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d013      	beq.n	8009298 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009270:	f7fc fd96 	bl	8005da0 <HAL_GetTick>
 8009274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009276:	e008      	b.n	800928a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009278:	f7fc fd92 	bl	8005da0 <HAL_GetTick>
 800927c:	4602      	mov	r2, r0
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	2b64      	cmp	r3, #100	; 0x64
 8009284:	d901      	bls.n	800928a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	e2b4      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800928a:	4b92      	ldr	r3, [pc, #584]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0f0      	beq.n	8009278 <HAL_RCC_OscConfig+0x2a8>
 8009296:	e014      	b.n	80092c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009298:	f7fc fd82 	bl	8005da0 <HAL_GetTick>
 800929c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800929e:	e008      	b.n	80092b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092a0:	f7fc fd7e 	bl	8005da0 <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	2b64      	cmp	r3, #100	; 0x64
 80092ac:	d901      	bls.n	80092b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80092ae:	2303      	movs	r3, #3
 80092b0:	e2a0      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80092b2:	4b88      	ldr	r3, [pc, #544]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1f0      	bne.n	80092a0 <HAL_RCC_OscConfig+0x2d0>
 80092be:	e000      	b.n	80092c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d060      	beq.n	8009390 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2b04      	cmp	r3, #4
 80092d2:	d005      	beq.n	80092e0 <HAL_RCC_OscConfig+0x310>
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	2b0c      	cmp	r3, #12
 80092d8:	d119      	bne.n	800930e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d116      	bne.n	800930e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092e0:	4b7c      	ldr	r3, [pc, #496]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <HAL_RCC_OscConfig+0x328>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e27d      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092f8:	4b76      	ldr	r3, [pc, #472]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	061b      	lsls	r3, r3, #24
 8009306:	4973      	ldr	r1, [pc, #460]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009308:	4313      	orrs	r3, r2
 800930a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800930c:	e040      	b.n	8009390 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d023      	beq.n	800935e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009316:	4b6f      	ldr	r3, [pc, #444]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a6e      	ldr	r2, [pc, #440]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 800931c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009322:	f7fc fd3d 	bl	8005da0 <HAL_GetTick>
 8009326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009328:	e008      	b.n	800933c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800932a:	f7fc fd39 	bl	8005da0 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d901      	bls.n	800933c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e25b      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800933c:	4b65      	ldr	r3, [pc, #404]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009344:	2b00      	cmp	r3, #0
 8009346:	d0f0      	beq.n	800932a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009348:	4b62      	ldr	r3, [pc, #392]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	061b      	lsls	r3, r3, #24
 8009356:	495f      	ldr	r1, [pc, #380]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009358:	4313      	orrs	r3, r2
 800935a:	604b      	str	r3, [r1, #4]
 800935c:	e018      	b.n	8009390 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800935e:	4b5d      	ldr	r3, [pc, #372]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a5c      	ldr	r2, [pc, #368]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800936a:	f7fc fd19 	bl	8005da0 <HAL_GetTick>
 800936e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009370:	e008      	b.n	8009384 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009372:	f7fc fd15 	bl	8005da0 <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	2b02      	cmp	r3, #2
 800937e:	d901      	bls.n	8009384 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e237      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009384:	4b53      	ldr	r3, [pc, #332]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1f0      	bne.n	8009372 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0308 	and.w	r3, r3, #8
 8009398:	2b00      	cmp	r3, #0
 800939a:	d03c      	beq.n	8009416 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d01c      	beq.n	80093de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093a4:	4b4b      	ldr	r3, [pc, #300]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80093a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093aa:	4a4a      	ldr	r2, [pc, #296]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80093ac:	f043 0301 	orr.w	r3, r3, #1
 80093b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093b4:	f7fc fcf4 	bl	8005da0 <HAL_GetTick>
 80093b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80093ba:	e008      	b.n	80093ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80093bc:	f7fc fcf0 	bl	8005da0 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d901      	bls.n	80093ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e212      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80093ce:	4b41      	ldr	r3, [pc, #260]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80093d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093d4:	f003 0302 	and.w	r3, r3, #2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0ef      	beq.n	80093bc <HAL_RCC_OscConfig+0x3ec>
 80093dc:	e01b      	b.n	8009416 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093de:	4b3d      	ldr	r3, [pc, #244]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80093e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093e4:	4a3b      	ldr	r2, [pc, #236]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80093e6:	f023 0301 	bic.w	r3, r3, #1
 80093ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ee:	f7fc fcd7 	bl	8005da0 <HAL_GetTick>
 80093f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80093f4:	e008      	b.n	8009408 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80093f6:	f7fc fcd3 	bl	8005da0 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d901      	bls.n	8009408 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e1f5      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009408:	4b32      	ldr	r3, [pc, #200]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 800940a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1ef      	bne.n	80093f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0304 	and.w	r3, r3, #4
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 80a6 	beq.w	8009570 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009424:	2300      	movs	r3, #0
 8009426:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009428:	4b2a      	ldr	r3, [pc, #168]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 800942a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800942c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10d      	bne.n	8009450 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009434:	4b27      	ldr	r3, [pc, #156]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009438:	4a26      	ldr	r2, [pc, #152]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 800943a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800943e:	6593      	str	r3, [r2, #88]	; 0x58
 8009440:	4b24      	ldr	r3, [pc, #144]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009448:	60bb      	str	r3, [r7, #8]
 800944a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800944c:	2301      	movs	r3, #1
 800944e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009450:	4b21      	ldr	r3, [pc, #132]	; (80094d8 <HAL_RCC_OscConfig+0x508>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009458:	2b00      	cmp	r3, #0
 800945a:	d118      	bne.n	800948e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800945c:	4b1e      	ldr	r3, [pc, #120]	; (80094d8 <HAL_RCC_OscConfig+0x508>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a1d      	ldr	r2, [pc, #116]	; (80094d8 <HAL_RCC_OscConfig+0x508>)
 8009462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009466:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009468:	f7fc fc9a 	bl	8005da0 <HAL_GetTick>
 800946c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800946e:	e008      	b.n	8009482 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009470:	f7fc fc96 	bl	8005da0 <HAL_GetTick>
 8009474:	4602      	mov	r2, r0
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	2b02      	cmp	r3, #2
 800947c:	d901      	bls.n	8009482 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e1b8      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009482:	4b15      	ldr	r3, [pc, #84]	; (80094d8 <HAL_RCC_OscConfig+0x508>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0f0      	beq.n	8009470 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d108      	bne.n	80094a8 <HAL_RCC_OscConfig+0x4d8>
 8009496:	4b0f      	ldr	r3, [pc, #60]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 8009498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800949c:	4a0d      	ldr	r2, [pc, #52]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 800949e:	f043 0301 	orr.w	r3, r3, #1
 80094a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80094a6:	e029      	b.n	80094fc <HAL_RCC_OscConfig+0x52c>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	2b05      	cmp	r3, #5
 80094ae:	d115      	bne.n	80094dc <HAL_RCC_OscConfig+0x50c>
 80094b0:	4b08      	ldr	r3, [pc, #32]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80094b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094b6:	4a07      	ldr	r2, [pc, #28]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80094b8:	f043 0304 	orr.w	r3, r3, #4
 80094bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80094c0:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80094c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094c6:	4a03      	ldr	r2, [pc, #12]	; (80094d4 <HAL_RCC_OscConfig+0x504>)
 80094c8:	f043 0301 	orr.w	r3, r3, #1
 80094cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80094d0:	e014      	b.n	80094fc <HAL_RCC_OscConfig+0x52c>
 80094d2:	bf00      	nop
 80094d4:	40021000 	.word	0x40021000
 80094d8:	40007000 	.word	0x40007000
 80094dc:	4b9d      	ldr	r3, [pc, #628]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 80094de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094e2:	4a9c      	ldr	r2, [pc, #624]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 80094e4:	f023 0301 	bic.w	r3, r3, #1
 80094e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80094ec:	4b99      	ldr	r3, [pc, #612]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 80094ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f2:	4a98      	ldr	r2, [pc, #608]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 80094f4:	f023 0304 	bic.w	r3, r3, #4
 80094f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d016      	beq.n	8009532 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009504:	f7fc fc4c 	bl	8005da0 <HAL_GetTick>
 8009508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800950a:	e00a      	b.n	8009522 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800950c:	f7fc fc48 	bl	8005da0 <HAL_GetTick>
 8009510:	4602      	mov	r2, r0
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	f241 3288 	movw	r2, #5000	; 0x1388
 800951a:	4293      	cmp	r3, r2
 800951c:	d901      	bls.n	8009522 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e168      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009522:	4b8c      	ldr	r3, [pc, #560]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 8009524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0ed      	beq.n	800950c <HAL_RCC_OscConfig+0x53c>
 8009530:	e015      	b.n	800955e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009532:	f7fc fc35 	bl	8005da0 <HAL_GetTick>
 8009536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009538:	e00a      	b.n	8009550 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800953a:	f7fc fc31 	bl	8005da0 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	f241 3288 	movw	r2, #5000	; 0x1388
 8009548:	4293      	cmp	r3, r2
 800954a:	d901      	bls.n	8009550 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e151      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009550:	4b80      	ldr	r3, [pc, #512]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 8009552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1ed      	bne.n	800953a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800955e:	7ffb      	ldrb	r3, [r7, #31]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d105      	bne.n	8009570 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009564:	4b7b      	ldr	r3, [pc, #492]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 8009566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009568:	4a7a      	ldr	r2, [pc, #488]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 800956a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800956e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0320 	and.w	r3, r3, #32
 8009578:	2b00      	cmp	r3, #0
 800957a:	d03c      	beq.n	80095f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01c      	beq.n	80095be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009584:	4b73      	ldr	r3, [pc, #460]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 8009586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800958a:	4a72      	ldr	r2, [pc, #456]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 800958c:	f043 0301 	orr.w	r3, r3, #1
 8009590:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009594:	f7fc fc04 	bl	8005da0 <HAL_GetTick>
 8009598:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800959a:	e008      	b.n	80095ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800959c:	f7fc fc00 	bl	8005da0 <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d901      	bls.n	80095ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e122      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80095ae:	4b69      	ldr	r3, [pc, #420]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 80095b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0ef      	beq.n	800959c <HAL_RCC_OscConfig+0x5cc>
 80095bc:	e01b      	b.n	80095f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80095be:	4b65      	ldr	r3, [pc, #404]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 80095c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095c4:	4a63      	ldr	r2, [pc, #396]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 80095c6:	f023 0301 	bic.w	r3, r3, #1
 80095ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095ce:	f7fc fbe7 	bl	8005da0 <HAL_GetTick>
 80095d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80095d4:	e008      	b.n	80095e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095d6:	f7fc fbe3 	bl	8005da0 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d901      	bls.n	80095e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e105      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80095e8:	4b5a      	ldr	r3, [pc, #360]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 80095ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1ef      	bne.n	80095d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 80f9 	beq.w	80097f2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009604:	2b02      	cmp	r3, #2
 8009606:	f040 80cf 	bne.w	80097a8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800960a:	4b52      	ldr	r3, [pc, #328]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f003 0203 	and.w	r2, r3, #3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961a:	429a      	cmp	r2, r3
 800961c:	d12c      	bne.n	8009678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009628:	3b01      	subs	r3, #1
 800962a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800962c:	429a      	cmp	r2, r3
 800962e:	d123      	bne.n	8009678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800963c:	429a      	cmp	r2, r3
 800963e:	d11b      	bne.n	8009678 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800964c:	429a      	cmp	r2, r3
 800964e:	d113      	bne.n	8009678 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965a:	085b      	lsrs	r3, r3, #1
 800965c:	3b01      	subs	r3, #1
 800965e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009660:	429a      	cmp	r2, r3
 8009662:	d109      	bne.n	8009678 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	085b      	lsrs	r3, r3, #1
 8009670:	3b01      	subs	r3, #1
 8009672:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009674:	429a      	cmp	r2, r3
 8009676:	d071      	beq.n	800975c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	2b0c      	cmp	r3, #12
 800967c:	d068      	beq.n	8009750 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800967e:	4b35      	ldr	r3, [pc, #212]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d105      	bne.n	8009696 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800968a:	4b32      	ldr	r3, [pc, #200]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e0ac      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800969a:	4b2e      	ldr	r3, [pc, #184]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a2d      	ldr	r2, [pc, #180]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 80096a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80096a6:	f7fc fb7b 	bl	8005da0 <HAL_GetTick>
 80096aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096ac:	e008      	b.n	80096c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096ae:	f7fc fb77 	bl	8005da0 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d901      	bls.n	80096c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e099      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096c0:	4b24      	ldr	r3, [pc, #144]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1f0      	bne.n	80096ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096cc:	4b21      	ldr	r3, [pc, #132]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	4b21      	ldr	r3, [pc, #132]	; (8009758 <HAL_RCC_OscConfig+0x788>)
 80096d2:	4013      	ands	r3, r2
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80096dc:	3a01      	subs	r2, #1
 80096de:	0112      	lsls	r2, r2, #4
 80096e0:	4311      	orrs	r1, r2
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80096e6:	0212      	lsls	r2, r2, #8
 80096e8:	4311      	orrs	r1, r2
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80096ee:	0852      	lsrs	r2, r2, #1
 80096f0:	3a01      	subs	r2, #1
 80096f2:	0552      	lsls	r2, r2, #21
 80096f4:	4311      	orrs	r1, r2
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80096fa:	0852      	lsrs	r2, r2, #1
 80096fc:	3a01      	subs	r2, #1
 80096fe:	0652      	lsls	r2, r2, #25
 8009700:	4311      	orrs	r1, r2
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009706:	06d2      	lsls	r2, r2, #27
 8009708:	430a      	orrs	r2, r1
 800970a:	4912      	ldr	r1, [pc, #72]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 800970c:	4313      	orrs	r3, r2
 800970e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009710:	4b10      	ldr	r3, [pc, #64]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a0f      	ldr	r2, [pc, #60]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 8009716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800971a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800971c:	4b0d      	ldr	r3, [pc, #52]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	4a0c      	ldr	r2, [pc, #48]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 8009722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009726:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009728:	f7fc fb3a 	bl	8005da0 <HAL_GetTick>
 800972c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800972e:	e008      	b.n	8009742 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009730:	f7fc fb36 	bl	8005da0 <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	2b02      	cmp	r3, #2
 800973c:	d901      	bls.n	8009742 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	e058      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009742:	4b04      	ldr	r3, [pc, #16]	; (8009754 <HAL_RCC_OscConfig+0x784>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d0f0      	beq.n	8009730 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800974e:	e050      	b.n	80097f2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e04f      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
 8009754:	40021000 	.word	0x40021000
 8009758:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800975c:	4b27      	ldr	r3, [pc, #156]	; (80097fc <HAL_RCC_OscConfig+0x82c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d144      	bne.n	80097f2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009768:	4b24      	ldr	r3, [pc, #144]	; (80097fc <HAL_RCC_OscConfig+0x82c>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a23      	ldr	r2, [pc, #140]	; (80097fc <HAL_RCC_OscConfig+0x82c>)
 800976e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009772:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009774:	4b21      	ldr	r3, [pc, #132]	; (80097fc <HAL_RCC_OscConfig+0x82c>)
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	4a20      	ldr	r2, [pc, #128]	; (80097fc <HAL_RCC_OscConfig+0x82c>)
 800977a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800977e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009780:	f7fc fb0e 	bl	8005da0 <HAL_GetTick>
 8009784:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009786:	e008      	b.n	800979a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009788:	f7fc fb0a 	bl	8005da0 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	2b02      	cmp	r3, #2
 8009794:	d901      	bls.n	800979a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e02c      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800979a:	4b18      	ldr	r3, [pc, #96]	; (80097fc <HAL_RCC_OscConfig+0x82c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d0f0      	beq.n	8009788 <HAL_RCC_OscConfig+0x7b8>
 80097a6:	e024      	b.n	80097f2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	2b0c      	cmp	r3, #12
 80097ac:	d01f      	beq.n	80097ee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097ae:	4b13      	ldr	r3, [pc, #76]	; (80097fc <HAL_RCC_OscConfig+0x82c>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a12      	ldr	r2, [pc, #72]	; (80097fc <HAL_RCC_OscConfig+0x82c>)
 80097b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ba:	f7fc faf1 	bl	8005da0 <HAL_GetTick>
 80097be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097c0:	e008      	b.n	80097d4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097c2:	f7fc faed 	bl	8005da0 <HAL_GetTick>
 80097c6:	4602      	mov	r2, r0
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d901      	bls.n	80097d4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e00f      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097d4:	4b09      	ldr	r3, [pc, #36]	; (80097fc <HAL_RCC_OscConfig+0x82c>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1f0      	bne.n	80097c2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80097e0:	4b06      	ldr	r3, [pc, #24]	; (80097fc <HAL_RCC_OscConfig+0x82c>)
 80097e2:	68da      	ldr	r2, [r3, #12]
 80097e4:	4905      	ldr	r1, [pc, #20]	; (80097fc <HAL_RCC_OscConfig+0x82c>)
 80097e6:	4b06      	ldr	r3, [pc, #24]	; (8009800 <HAL_RCC_OscConfig+0x830>)
 80097e8:	4013      	ands	r3, r2
 80097ea:	60cb      	str	r3, [r1, #12]
 80097ec:	e001      	b.n	80097f2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e000      	b.n	80097f4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3720      	adds	r7, #32
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	40021000 	.word	0x40021000
 8009800:	feeefffc 	.word	0xfeeefffc

08009804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800980e:	2300      	movs	r3, #0
 8009810:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e11d      	b.n	8009a58 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800981c:	4b90      	ldr	r3, [pc, #576]	; (8009a60 <HAL_RCC_ClockConfig+0x25c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 030f 	and.w	r3, r3, #15
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	429a      	cmp	r2, r3
 8009828:	d910      	bls.n	800984c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800982a:	4b8d      	ldr	r3, [pc, #564]	; (8009a60 <HAL_RCC_ClockConfig+0x25c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f023 020f 	bic.w	r2, r3, #15
 8009832:	498b      	ldr	r1, [pc, #556]	; (8009a60 <HAL_RCC_ClockConfig+0x25c>)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	4313      	orrs	r3, r2
 8009838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800983a:	4b89      	ldr	r3, [pc, #548]	; (8009a60 <HAL_RCC_ClockConfig+0x25c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 030f 	and.w	r3, r3, #15
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d001      	beq.n	800984c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e105      	b.n	8009a58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b00      	cmp	r3, #0
 8009856:	d010      	beq.n	800987a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	4b81      	ldr	r3, [pc, #516]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009864:	429a      	cmp	r2, r3
 8009866:	d908      	bls.n	800987a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009868:	4b7e      	ldr	r3, [pc, #504]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	497b      	ldr	r1, [pc, #492]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 8009876:	4313      	orrs	r3, r2
 8009878:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d079      	beq.n	800997a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	2b03      	cmp	r3, #3
 800988c:	d11e      	bne.n	80098cc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800988e:	4b75      	ldr	r3, [pc, #468]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e0dc      	b.n	8009a58 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800989e:	f000 fa35 	bl	8009d0c <RCC_GetSysClockFreqFromPLLSource>
 80098a2:	4603      	mov	r3, r0
 80098a4:	4a70      	ldr	r2, [pc, #448]	; (8009a68 <HAL_RCC_ClockConfig+0x264>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d946      	bls.n	8009938 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80098aa:	4b6e      	ldr	r3, [pc, #440]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d140      	bne.n	8009938 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80098b6:	4b6b      	ldr	r3, [pc, #428]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098be:	4a69      	ldr	r2, [pc, #420]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 80098c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80098c6:	2380      	movs	r3, #128	; 0x80
 80098c8:	617b      	str	r3, [r7, #20]
 80098ca:	e035      	b.n	8009938 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d107      	bne.n	80098e4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098d4:	4b63      	ldr	r3, [pc, #396]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d115      	bne.n	800990c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e0b9      	b.n	8009a58 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d107      	bne.n	80098fc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80098ec:	4b5d      	ldr	r3, [pc, #372]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 0302 	and.w	r3, r3, #2
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d109      	bne.n	800990c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e0ad      	b.n	8009a58 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80098fc:	4b59      	ldr	r3, [pc, #356]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e0a5      	b.n	8009a58 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800990c:	f000 f8b4 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 8009910:	4603      	mov	r3, r0
 8009912:	4a55      	ldr	r2, [pc, #340]	; (8009a68 <HAL_RCC_ClockConfig+0x264>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d90f      	bls.n	8009938 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009918:	4b52      	ldr	r3, [pc, #328]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d109      	bne.n	8009938 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009924:	4b4f      	ldr	r3, [pc, #316]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800992c:	4a4d      	ldr	r2, [pc, #308]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 800992e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009932:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009934:	2380      	movs	r3, #128	; 0x80
 8009936:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009938:	4b4a      	ldr	r3, [pc, #296]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	f023 0203 	bic.w	r2, r3, #3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	4947      	ldr	r1, [pc, #284]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 8009946:	4313      	orrs	r3, r2
 8009948:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800994a:	f7fc fa29 	bl	8005da0 <HAL_GetTick>
 800994e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009950:	e00a      	b.n	8009968 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009952:	f7fc fa25 	bl	8005da0 <HAL_GetTick>
 8009956:	4602      	mov	r2, r0
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009960:	4293      	cmp	r3, r2
 8009962:	d901      	bls.n	8009968 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e077      	b.n	8009a58 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009968:	4b3e      	ldr	r3, [pc, #248]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f003 020c 	and.w	r2, r3, #12
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	429a      	cmp	r2, r3
 8009978:	d1eb      	bne.n	8009952 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b80      	cmp	r3, #128	; 0x80
 800997e:	d105      	bne.n	800998c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009980:	4b38      	ldr	r3, [pc, #224]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	4a37      	ldr	r2, [pc, #220]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 8009986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800998a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0302 	and.w	r3, r3, #2
 8009994:	2b00      	cmp	r3, #0
 8009996:	d010      	beq.n	80099ba <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	689a      	ldr	r2, [r3, #8]
 800999c:	4b31      	ldr	r3, [pc, #196]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d208      	bcs.n	80099ba <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099a8:	4b2e      	ldr	r3, [pc, #184]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	492b      	ldr	r1, [pc, #172]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80099ba:	4b29      	ldr	r3, [pc, #164]	; (8009a60 <HAL_RCC_ClockConfig+0x25c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 030f 	and.w	r3, r3, #15
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d210      	bcs.n	80099ea <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099c8:	4b25      	ldr	r3, [pc, #148]	; (8009a60 <HAL_RCC_ClockConfig+0x25c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f023 020f 	bic.w	r2, r3, #15
 80099d0:	4923      	ldr	r1, [pc, #140]	; (8009a60 <HAL_RCC_ClockConfig+0x25c>)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099d8:	4b21      	ldr	r3, [pc, #132]	; (8009a60 <HAL_RCC_ClockConfig+0x25c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 030f 	and.w	r3, r3, #15
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d001      	beq.n	80099ea <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e036      	b.n	8009a58 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0304 	and.w	r3, r3, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d008      	beq.n	8009a08 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099f6:	4b1b      	ldr	r3, [pc, #108]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	4918      	ldr	r1, [pc, #96]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0308 	and.w	r3, r3, #8
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d009      	beq.n	8009a28 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a14:	4b13      	ldr	r3, [pc, #76]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	00db      	lsls	r3, r3, #3
 8009a22:	4910      	ldr	r1, [pc, #64]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009a28:	f000 f826 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	; (8009a64 <HAL_RCC_ClockConfig+0x260>)
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	091b      	lsrs	r3, r3, #4
 8009a34:	f003 030f 	and.w	r3, r3, #15
 8009a38:	490c      	ldr	r1, [pc, #48]	; (8009a6c <HAL_RCC_ClockConfig+0x268>)
 8009a3a:	5ccb      	ldrb	r3, [r1, r3]
 8009a3c:	f003 031f 	and.w	r3, r3, #31
 8009a40:	fa22 f303 	lsr.w	r3, r2, r3
 8009a44:	4a0a      	ldr	r2, [pc, #40]	; (8009a70 <HAL_RCC_ClockConfig+0x26c>)
 8009a46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009a48:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <HAL_RCC_ClockConfig+0x270>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fc f957 	bl	8005d00 <HAL_InitTick>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73fb      	strb	r3, [r7, #15]

  return status;
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3718      	adds	r7, #24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	40022000 	.word	0x40022000
 8009a64:	40021000 	.word	0x40021000
 8009a68:	04c4b400 	.word	0x04c4b400
 8009a6c:	08019f8c 	.word	0x08019f8c
 8009a70:	20000004 	.word	0x20000004
 8009a74:	20000008 	.word	0x20000008

08009a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b089      	sub	sp, #36	; 0x24
 8009a7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	2300      	movs	r3, #0
 8009a84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a86:	4b3e      	ldr	r3, [pc, #248]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	f003 030c 	and.w	r3, r3, #12
 8009a8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a90:	4b3b      	ldr	r3, [pc, #236]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f003 0303 	and.w	r3, r3, #3
 8009a98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d005      	beq.n	8009aac <HAL_RCC_GetSysClockFreq+0x34>
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2b0c      	cmp	r3, #12
 8009aa4:	d121      	bne.n	8009aea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d11e      	bne.n	8009aea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009aac:	4b34      	ldr	r3, [pc, #208]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d107      	bne.n	8009ac8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009ab8:	4b31      	ldr	r3, [pc, #196]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8009aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009abe:	0a1b      	lsrs	r3, r3, #8
 8009ac0:	f003 030f 	and.w	r3, r3, #15
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	e005      	b.n	8009ad4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009ac8:	4b2d      	ldr	r3, [pc, #180]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	091b      	lsrs	r3, r3, #4
 8009ace:	f003 030f 	and.w	r3, r3, #15
 8009ad2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009ad4:	4a2b      	ldr	r2, [pc, #172]	; (8009b84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009adc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10d      	bne.n	8009b00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009ae8:	e00a      	b.n	8009b00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	2b04      	cmp	r3, #4
 8009aee:	d102      	bne.n	8009af6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009af0:	4b25      	ldr	r3, [pc, #148]	; (8009b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8009af2:	61bb      	str	r3, [r7, #24]
 8009af4:	e004      	b.n	8009b00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d101      	bne.n	8009b00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009afc:	4b23      	ldr	r3, [pc, #140]	; (8009b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8009afe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	2b0c      	cmp	r3, #12
 8009b04:	d134      	bne.n	8009b70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b06:	4b1e      	ldr	r3, [pc, #120]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f003 0303 	and.w	r3, r3, #3
 8009b0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d003      	beq.n	8009b1e <HAL_RCC_GetSysClockFreq+0xa6>
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d003      	beq.n	8009b24 <HAL_RCC_GetSysClockFreq+0xac>
 8009b1c:	e005      	b.n	8009b2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009b1e:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8009b20:	617b      	str	r3, [r7, #20]
      break;
 8009b22:	e005      	b.n	8009b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009b24:	4b19      	ldr	r3, [pc, #100]	; (8009b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8009b26:	617b      	str	r3, [r7, #20]
      break;
 8009b28:	e002      	b.n	8009b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	617b      	str	r3, [r7, #20]
      break;
 8009b2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009b30:	4b13      	ldr	r3, [pc, #76]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	091b      	lsrs	r3, r3, #4
 8009b36:	f003 030f 	and.w	r3, r3, #15
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009b3e:	4b10      	ldr	r3, [pc, #64]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	0a1b      	lsrs	r3, r3, #8
 8009b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	fb03 f202 	mul.w	r2, r3, r2
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009b56:	4b0a      	ldr	r3, [pc, #40]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	0e5b      	lsrs	r3, r3, #25
 8009b5c:	f003 0303 	and.w	r3, r3, #3
 8009b60:	3301      	adds	r3, #1
 8009b62:	005b      	lsls	r3, r3, #1
 8009b64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009b70:	69bb      	ldr	r3, [r7, #24]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3724      	adds	r7, #36	; 0x24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	40021000 	.word	0x40021000
 8009b84:	08019fa4 	.word	0x08019fa4
 8009b88:	00f42400 	.word	0x00f42400
 8009b8c:	007a1200 	.word	0x007a1200

08009b90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b90:	b480      	push	{r7}
 8009b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b94:	4b03      	ldr	r3, [pc, #12]	; (8009ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009b96:	681b      	ldr	r3, [r3, #0]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000004 	.word	0x20000004

08009ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009bac:	f7ff fff0 	bl	8009b90 <HAL_RCC_GetHCLKFreq>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	4b06      	ldr	r3, [pc, #24]	; (8009bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	0a1b      	lsrs	r3, r3, #8
 8009bb8:	f003 0307 	and.w	r3, r3, #7
 8009bbc:	4904      	ldr	r1, [pc, #16]	; (8009bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bbe:	5ccb      	ldrb	r3, [r1, r3]
 8009bc0:	f003 031f 	and.w	r3, r3, #31
 8009bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	40021000 	.word	0x40021000
 8009bd0:	08019f9c 	.word	0x08019f9c

08009bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009bd8:	f7ff ffda 	bl	8009b90 <HAL_RCC_GetHCLKFreq>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	0adb      	lsrs	r3, r3, #11
 8009be4:	f003 0307 	and.w	r3, r3, #7
 8009be8:	4904      	ldr	r1, [pc, #16]	; (8009bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8009bea:	5ccb      	ldrb	r3, [r1, r3]
 8009bec:	f003 031f 	and.w	r3, r3, #31
 8009bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	40021000 	.word	0x40021000
 8009bfc:	08019f9c 	.word	0x08019f9c

08009c00 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009c00:	b480      	push	{r7}
 8009c02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <HAL_RCC_EnableCSS+0x1c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a04      	ldr	r2, [pc, #16]	; (8009c1c <HAL_RCC_EnableCSS+0x1c>)
 8009c0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c0e:	6013      	str	r3, [r2, #0]
}
 8009c10:	bf00      	nop
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	40021000 	.word	0x40021000

08009c20 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009c24:	4b07      	ldr	r3, [pc, #28]	; (8009c44 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c30:	d105      	bne.n	8009c3e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009c32:	f000 f809 	bl	8009c48 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009c36:	4b03      	ldr	r3, [pc, #12]	; (8009c44 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c3c:	621a      	str	r2, [r3, #32]
  }
}
 8009c3e:	bf00      	nop
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	40021000 	.word	0x40021000

08009c48 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
	...

08009c58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009c60:	2300      	movs	r3, #0
 8009c62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009c64:	4b27      	ldr	r3, [pc, #156]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009c70:	f7ff f8da 	bl	8008e28 <HAL_PWREx_GetVoltageRange>
 8009c74:	6178      	str	r0, [r7, #20]
 8009c76:	e014      	b.n	8009ca2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009c78:	4b22      	ldr	r3, [pc, #136]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7c:	4a21      	ldr	r2, [pc, #132]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c82:	6593      	str	r3, [r2, #88]	; 0x58
 8009c84:	4b1f      	ldr	r3, [pc, #124]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009c90:	f7ff f8ca 	bl	8008e28 <HAL_PWREx_GetVoltageRange>
 8009c94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009c96:	4b1b      	ldr	r3, [pc, #108]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c9a:	4a1a      	ldr	r2, [pc, #104]	; (8009d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ca0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ca8:	d10b      	bne.n	8009cc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b80      	cmp	r3, #128	; 0x80
 8009cae:	d913      	bls.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2ba0      	cmp	r3, #160	; 0xa0
 8009cb4:	d902      	bls.n	8009cbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	613b      	str	r3, [r7, #16]
 8009cba:	e00d      	b.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	613b      	str	r3, [r7, #16]
 8009cc0:	e00a      	b.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8009cc6:	d902      	bls.n	8009cce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009cc8:	2302      	movs	r3, #2
 8009cca:	613b      	str	r3, [r7, #16]
 8009ccc:	e004      	b.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b70      	cmp	r3, #112	; 0x70
 8009cd2:	d101      	bne.n	8009cd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009cd8:	4b0b      	ldr	r3, [pc, #44]	; (8009d08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f023 020f 	bic.w	r2, r3, #15
 8009ce0:	4909      	ldr	r1, [pc, #36]	; (8009d08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009ce8:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 030f 	and.w	r3, r3, #15
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d001      	beq.n	8009cfa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e000      	b.n	8009cfc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	40021000 	.word	0x40021000
 8009d08:	40022000 	.word	0x40022000

08009d0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009d12:	4b2d      	ldr	r3, [pc, #180]	; (8009dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	d00b      	beq.n	8009d3a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b03      	cmp	r3, #3
 8009d26:	d825      	bhi.n	8009d74 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d008      	beq.n	8009d40 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d11f      	bne.n	8009d74 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009d34:	4b25      	ldr	r3, [pc, #148]	; (8009dcc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009d36:	613b      	str	r3, [r7, #16]
    break;
 8009d38:	e01f      	b.n	8009d7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8009d3a:	4b25      	ldr	r3, [pc, #148]	; (8009dd0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009d3c:	613b      	str	r3, [r7, #16]
    break;
 8009d3e:	e01c      	b.n	8009d7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009d40:	4b21      	ldr	r3, [pc, #132]	; (8009dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 0308 	and.w	r3, r3, #8
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d107      	bne.n	8009d5c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009d4c:	4b1e      	ldr	r3, [pc, #120]	; (8009dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d52:	0a1b      	lsrs	r3, r3, #8
 8009d54:	f003 030f 	and.w	r3, r3, #15
 8009d58:	617b      	str	r3, [r7, #20]
 8009d5a:	e005      	b.n	8009d68 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009d5c:	4b1a      	ldr	r3, [pc, #104]	; (8009dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	091b      	lsrs	r3, r3, #4
 8009d62:	f003 030f 	and.w	r3, r3, #15
 8009d66:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8009d68:	4a1a      	ldr	r2, [pc, #104]	; (8009dd4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d70:	613b      	str	r3, [r7, #16]
    break;
 8009d72:	e002      	b.n	8009d7a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009d74:	2300      	movs	r3, #0
 8009d76:	613b      	str	r3, [r7, #16]
    break;
 8009d78:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d7a:	4b13      	ldr	r3, [pc, #76]	; (8009dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	091b      	lsrs	r3, r3, #4
 8009d80:	f003 030f 	and.w	r3, r3, #15
 8009d84:	3301      	adds	r3, #1
 8009d86:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009d88:	4b0f      	ldr	r3, [pc, #60]	; (8009dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	0a1b      	lsrs	r3, r3, #8
 8009d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	fb03 f202 	mul.w	r2, r3, r2
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d9e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009da0:	4b09      	ldr	r3, [pc, #36]	; (8009dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	0e5b      	lsrs	r3, r3, #25
 8009da6:	f003 0303 	and.w	r3, r3, #3
 8009daa:	3301      	adds	r3, #1
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009dba:	683b      	ldr	r3, [r7, #0]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	371c      	adds	r7, #28
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	40021000 	.word	0x40021000
 8009dcc:	00f42400 	.word	0x00f42400
 8009dd0:	007a1200 	.word	0x007a1200
 8009dd4:	08019fa4 	.word	0x08019fa4

08009dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009de0:	2300      	movs	r3, #0
 8009de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009de4:	2300      	movs	r3, #0
 8009de6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d040      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009df8:	2b80      	cmp	r3, #128	; 0x80
 8009dfa:	d02a      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009dfc:	2b80      	cmp	r3, #128	; 0x80
 8009dfe:	d825      	bhi.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009e00:	2b60      	cmp	r3, #96	; 0x60
 8009e02:	d026      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009e04:	2b60      	cmp	r3, #96	; 0x60
 8009e06:	d821      	bhi.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009e08:	2b40      	cmp	r3, #64	; 0x40
 8009e0a:	d006      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009e0c:	2b40      	cmp	r3, #64	; 0x40
 8009e0e:	d81d      	bhi.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d009      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009e14:	2b20      	cmp	r3, #32
 8009e16:	d010      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009e18:	e018      	b.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009e1a:	4b89      	ldr	r3, [pc, #548]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	4a88      	ldr	r2, [pc, #544]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e24:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009e26:	e015      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f001 fa24 	bl	800b27c <RCCEx_PLLSAI1_Config>
 8009e34:	4603      	mov	r3, r0
 8009e36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009e38:	e00c      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	3320      	adds	r3, #32
 8009e3e:	2100      	movs	r1, #0
 8009e40:	4618      	mov	r0, r3
 8009e42:	f001 fb0f 	bl	800b464 <RCCEx_PLLSAI2_Config>
 8009e46:	4603      	mov	r3, r0
 8009e48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009e4a:	e003      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	74fb      	strb	r3, [r7, #19]
      break;
 8009e50:	e000      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8009e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e54:	7cfb      	ldrb	r3, [r7, #19]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10b      	bne.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e5a:	4b79      	ldr	r3, [pc, #484]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009e5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e60:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e68:	4975      	ldr	r1, [pc, #468]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009e70:	e001      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e72:	7cfb      	ldrb	r3, [r7, #19]
 8009e74:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d047      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e8a:	d030      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e90:	d82a      	bhi.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e96:	d02a      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e9c:	d824      	bhi.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea2:	d008      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea8:	d81e      	bhi.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb2:	d010      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009eb4:	e018      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009eb6:	4b62      	ldr	r3, [pc, #392]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	4a61      	ldr	r2, [pc, #388]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ec0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009ec2:	e015      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	2100      	movs	r1, #0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f001 f9d6 	bl	800b27c <RCCEx_PLLSAI1_Config>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009ed4:	e00c      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	3320      	adds	r3, #32
 8009eda:	2100      	movs	r1, #0
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 fac1 	bl	800b464 <RCCEx_PLLSAI2_Config>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009ee6:	e003      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	74fb      	strb	r3, [r7, #19]
      break;
 8009eec:	e000      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8009eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ef0:	7cfb      	ldrb	r3, [r7, #19]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10b      	bne.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009ef6:	4b52      	ldr	r3, [pc, #328]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ef8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009efc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f04:	494e      	ldr	r1, [pc, #312]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009f0c:	e001      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0e:	7cfb      	ldrb	r3, [r7, #19]
 8009f10:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 809f 	beq.w	800a05e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f20:	2300      	movs	r3, #0
 8009f22:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009f24:	4b46      	ldr	r3, [pc, #280]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009f30:	2301      	movs	r3, #1
 8009f32:	e000      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009f34:	2300      	movs	r3, #0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00d      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f3a:	4b41      	ldr	r3, [pc, #260]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f3e:	4a40      	ldr	r2, [pc, #256]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f44:	6593      	str	r3, [r2, #88]	; 0x58
 8009f46:	4b3e      	ldr	r3, [pc, #248]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f4e:	60bb      	str	r3, [r7, #8]
 8009f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f52:	2301      	movs	r3, #1
 8009f54:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f56:	4b3b      	ldr	r3, [pc, #236]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a3a      	ldr	r2, [pc, #232]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f62:	f7fb ff1d 	bl	8005da0 <HAL_GetTick>
 8009f66:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009f68:	e009      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f6a:	f7fb ff19 	bl	8005da0 <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d902      	bls.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	74fb      	strb	r3, [r7, #19]
        break;
 8009f7c:	e005      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009f7e:	4b31      	ldr	r3, [pc, #196]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0ef      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009f8a:	7cfb      	ldrb	r3, [r7, #19]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d15b      	bne.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009f90:	4b2b      	ldr	r3, [pc, #172]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f9a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d01f      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d019      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009fae:	4b24      	ldr	r3, [pc, #144]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fb8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009fba:	4b21      	ldr	r3, [pc, #132]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fc0:	4a1f      	ldr	r2, [pc, #124]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009fca:	4b1d      	ldr	r3, [pc, #116]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fd0:	4a1b      	ldr	r2, [pc, #108]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009fda:	4a19      	ldr	r2, [pc, #100]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d016      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fec:	f7fb fed8 	bl	8005da0 <HAL_GetTick>
 8009ff0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ff2:	e00b      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ff4:	f7fb fed4 	bl	8005da0 <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a002:	4293      	cmp	r3, r2
 800a004:	d902      	bls.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	74fb      	strb	r3, [r7, #19]
            break;
 800a00a:	e006      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a00c:	4b0c      	ldr	r3, [pc, #48]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a012:	f003 0302 	and.w	r3, r3, #2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d0ec      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800a01a:	7cfb      	ldrb	r3, [r7, #19]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10c      	bne.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a030:	4903      	ldr	r1, [pc, #12]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a032:	4313      	orrs	r3, r2
 800a034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a038:	e008      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a03a:	7cfb      	ldrb	r3, [r7, #19]
 800a03c:	74bb      	strb	r3, [r7, #18]
 800a03e:	e005      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x274>
 800a040:	40021000 	.word	0x40021000
 800a044:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a048:	7cfb      	ldrb	r3, [r7, #19]
 800a04a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a04c:	7c7b      	ldrb	r3, [r7, #17]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d105      	bne.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a052:	4ba0      	ldr	r3, [pc, #640]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a056:	4a9f      	ldr	r2, [pc, #636]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a05c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00a      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a06a:	4b9a      	ldr	r3, [pc, #616]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a070:	f023 0203 	bic.w	r2, r3, #3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a078:	4996      	ldr	r1, [pc, #600]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0302 	and.w	r3, r3, #2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00a      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a08c:	4b91      	ldr	r3, [pc, #580]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a092:	f023 020c 	bic.w	r2, r3, #12
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09a:	498e      	ldr	r1, [pc, #568]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a09c:	4313      	orrs	r3, r2
 800a09e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 0304 	and.w	r3, r3, #4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00a      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a0ae:	4b89      	ldr	r3, [pc, #548]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0bc:	4985      	ldr	r1, [pc, #532]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0308 	and.w	r3, r3, #8
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00a      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a0d0:	4b80      	ldr	r3, [pc, #512]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0de:	497d      	ldr	r1, [pc, #500]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 0310 	and.w	r3, r3, #16
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00a      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a0f2:	4b78      	ldr	r3, [pc, #480]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a100:	4974      	ldr	r1, [pc, #464]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a102:	4313      	orrs	r3, r2
 800a104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0320 	and.w	r3, r3, #32
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00a      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a114:	4b6f      	ldr	r3, [pc, #444]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a11a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a122:	496c      	ldr	r1, [pc, #432]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a124:	4313      	orrs	r3, r2
 800a126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00a      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a136:	4b67      	ldr	r3, [pc, #412]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a13c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a144:	4963      	ldr	r1, [pc, #396]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a146:	4313      	orrs	r3, r2
 800a148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00a      	beq.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a158:	4b5e      	ldr	r3, [pc, #376]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a15e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a166:	495b      	ldr	r1, [pc, #364]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a17a:	4b56      	ldr	r3, [pc, #344]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a180:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a188:	4952      	ldr	r1, [pc, #328]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a18a:	4313      	orrs	r3, r2
 800a18c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00a      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a19c:	4b4d      	ldr	r3, [pc, #308]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1aa:	494a      	ldr	r1, [pc, #296]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00a      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a1be:	4b45      	ldr	r3, [pc, #276]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1cc:	4941      	ldr	r1, [pc, #260]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00a      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1e0:	4b3c      	ldr	r3, [pc, #240]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1e6:	f023 0203 	bic.w	r2, r3, #3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ee:	4939      	ldr	r1, [pc, #228]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d028      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a202:	4b34      	ldr	r3, [pc, #208]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a208:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a210:	4930      	ldr	r1, [pc, #192]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a212:	4313      	orrs	r3, r2
 800a214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a21c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a220:	d106      	bne.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a222:	4b2c      	ldr	r3, [pc, #176]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	4a2b      	ldr	r2, [pc, #172]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a22c:	60d3      	str	r3, [r2, #12]
 800a22e:	e011      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a238:	d10c      	bne.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3304      	adds	r3, #4
 800a23e:	2101      	movs	r1, #1
 800a240:	4618      	mov	r0, r3
 800a242:	f001 f81b 	bl	800b27c <RCCEx_PLLSAI1_Config>
 800a246:	4603      	mov	r3, r0
 800a248:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a24a:	7cfb      	ldrb	r3, [r7, #19]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800a250:	7cfb      	ldrb	r3, [r7, #19]
 800a252:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d04d      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a268:	d108      	bne.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800a26a:	4b1a      	ldr	r3, [pc, #104]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a26c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a270:	4a18      	ldr	r2, [pc, #96]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a276:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800a27a:	e012      	b.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a27c:	4b15      	ldr	r3, [pc, #84]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a27e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a282:	4a14      	ldr	r2, [pc, #80]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a284:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a288:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800a28c:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a292:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a29a:	490e      	ldr	r1, [pc, #56]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a29c:	4313      	orrs	r3, r2
 800a29e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2aa:	d106      	bne.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a2ac:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	4a08      	ldr	r2, [pc, #32]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2b6:	60d3      	str	r3, [r2, #12]
 800a2b8:	e020      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2c2:	d109      	bne.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a2c4:	4b03      	ldr	r3, [pc, #12]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	4a02      	ldr	r2, [pc, #8]	; (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a2ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2ce:	60d3      	str	r3, [r2, #12]
 800a2d0:	e014      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a2d2:	bf00      	nop
 800a2d4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2e0:	d10c      	bne.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f000 ffc7 	bl	800b27c <RCCEx_PLLSAI1_Config>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a2f2:	7cfb      	ldrb	r3, [r7, #19]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d001      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800a2f8:	7cfb      	ldrb	r3, [r7, #19]
 800a2fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d028      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a308:	4b4a      	ldr	r3, [pc, #296]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a316:	4947      	ldr	r1, [pc, #284]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a326:	d106      	bne.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a328:	4b42      	ldr	r3, [pc, #264]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	4a41      	ldr	r2, [pc, #260]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a32e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a332:	60d3      	str	r3, [r2, #12]
 800a334:	e011      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a33a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a33e:	d10c      	bne.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3304      	adds	r3, #4
 800a344:	2101      	movs	r1, #1
 800a346:	4618      	mov	r0, r3
 800a348:	f000 ff98 	bl	800b27c <RCCEx_PLLSAI1_Config>
 800a34c:	4603      	mov	r3, r0
 800a34e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a350:	7cfb      	ldrb	r3, [r7, #19]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800a356:	7cfb      	ldrb	r3, [r7, #19]
 800a358:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d01e      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a366:	4b33      	ldr	r3, [pc, #204]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a36c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a376:	492f      	ldr	r1, [pc, #188]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a378:	4313      	orrs	r3, r2
 800a37a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a388:	d10c      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3304      	adds	r3, #4
 800a38e:	2102      	movs	r1, #2
 800a390:	4618      	mov	r0, r3
 800a392:	f000 ff73 	bl	800b27c <RCCEx_PLLSAI1_Config>
 800a396:	4603      	mov	r3, r0
 800a398:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a39a:	7cfb      	ldrb	r3, [r7, #19]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800a3a0:	7cfb      	ldrb	r3, [r7, #19]
 800a3a2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00b      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a3b0:	4b20      	ldr	r3, [pc, #128]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3b6:	f023 0204 	bic.w	r2, r3, #4
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3c0:	491c      	ldr	r1, [pc, #112]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00b      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a3d4:	4b17      	ldr	r3, [pc, #92]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3da:	f023 0218 	bic.w	r2, r3, #24
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e4:	4913      	ldr	r1, [pc, #76]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d017      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a3f8:	4b0e      	ldr	r3, [pc, #56]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a408:	490a      	ldr	r1, [pc, #40]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a40a:	4313      	orrs	r3, r2
 800a40c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a41a:	d105      	bne.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a41c:	4b05      	ldr	r3, [pc, #20]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	4a04      	ldr	r2, [pc, #16]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a426:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a428:	7cbb      	ldrb	r3, [r7, #18]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	40021000 	.word	0x40021000

0800a438 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b088      	sub	sp, #32
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a44a:	d13e      	bne.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a44c:	4bb6      	ldr	r3, [pc, #728]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a456:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a45e:	d028      	beq.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a466:	f200 86f4 	bhi.w	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a470:	d005      	beq.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a478:	d00e      	beq.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800a47a:	f000 beea 	b.w	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a47e:	4baa      	ldr	r3, [pc, #680]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a484:	f003 0302 	and.w	r3, r3, #2
 800a488:	2b02      	cmp	r3, #2
 800a48a:	f040 86e4 	bne.w	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800a48e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a492:	61fb      	str	r3, [r7, #28]
      break;
 800a494:	f000 bedf 	b.w	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a498:	4ba3      	ldr	r3, [pc, #652]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a49a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	f040 86d9 	bne.w	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800a4a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a4ac:	61fb      	str	r3, [r7, #28]
      break;
 800a4ae:	f000 bed4 	b.w	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a4b2:	4b9d      	ldr	r3, [pc, #628]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4be:	f040 86ce 	bne.w	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800a4c2:	4b9a      	ldr	r3, [pc, #616]	; (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800a4c4:	61fb      	str	r3, [r7, #28]
      break;
 800a4c6:	f000 beca 	b.w	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a4ca:	4b97      	ldr	r3, [pc, #604]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	f003 0303 	and.w	r3, r3, #3
 800a4d2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d036      	beq.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	2b03      	cmp	r3, #3
 800a4de:	d840      	bhi.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d003      	beq.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d020      	beq.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800a4ec:	e039      	b.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a4ee:	4b8e      	ldr	r3, [pc, #568]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f003 0302 	and.w	r3, r3, #2
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d116      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a4fa:	4b8b      	ldr	r3, [pc, #556]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 0308 	and.w	r3, r3, #8
 800a502:	2b00      	cmp	r3, #0
 800a504:	d005      	beq.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800a506:	4b88      	ldr	r3, [pc, #544]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	091b      	lsrs	r3, r3, #4
 800a50c:	f003 030f 	and.w	r3, r3, #15
 800a510:	e005      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800a512:	4b85      	ldr	r3, [pc, #532]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a518:	0a1b      	lsrs	r3, r3, #8
 800a51a:	f003 030f 	and.w	r3, r3, #15
 800a51e:	4a84      	ldr	r2, [pc, #528]	; (800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a524:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a526:	e01f      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	61bb      	str	r3, [r7, #24]
      break;
 800a52c:	e01c      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a52e:	4b7e      	ldr	r3, [pc, #504]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a53a:	d102      	bne.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800a53c:	4b7d      	ldr	r3, [pc, #500]	; (800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800a53e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a540:	e012      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a542:	2300      	movs	r3, #0
 800a544:	61bb      	str	r3, [r7, #24]
      break;
 800a546:	e00f      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a548:	4b77      	ldr	r3, [pc, #476]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a554:	d102      	bne.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800a556:	4b78      	ldr	r3, [pc, #480]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800a558:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800a55a:	e005      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	61bb      	str	r3, [r7, #24]
      break;
 800a560:	e002      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800a562:	2300      	movs	r3, #0
 800a564:	61bb      	str	r3, [r7, #24]
      break;
 800a566:	bf00      	nop
    }

    switch(PeriphClk)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a56e:	f000 8606 	beq.w	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a578:	f200 8673 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a582:	f000 8469 	beq.w	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a58c:	f200 8669 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a596:	f000 8531 	beq.w	800affc <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5a0:	f200 865f 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a5aa:	f000 8187 	beq.w	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a5b4:	f200 8655 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5be:	f000 80cd 	beq.w	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5c8:	f200 864b 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d2:	f000 8430 	beq.w	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5dc:	f200 8641 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5e6:	f000 83e4 	beq.w	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5f0:	f200 8637 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5fa:	f000 80af 	beq.w	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a604:	f200 862d 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a60e:	f000 809d 	beq.w	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a618:	f200 8623 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a622:	f000 808b 	beq.w	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a62c:	f200 8619 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a636:	f000 8554 	beq.w	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a640:	f200 860f 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a64a:	f000 8500 	beq.w	800b04e <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a654:	f200 8605 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a65e:	f000 84a1 	beq.w	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a668:	f200 85fb 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b80      	cmp	r3, #128	; 0x80
 800a670:	f000 846c 	beq.w	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b80      	cmp	r3, #128	; 0x80
 800a678:	f200 85f3 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b20      	cmp	r3, #32
 800a680:	d84c      	bhi.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 85ec 	beq.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	2b1f      	cmp	r3, #31
 800a690:	f200 85e7 	bhi.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a694:	a201      	add	r2, pc, #4	; (adr r2, 800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800a696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69a:	bf00      	nop
 800a69c:	0800aab1 	.word	0x0800aab1
 800a6a0:	0800ab1f 	.word	0x0800ab1f
 800a6a4:	0800b263 	.word	0x0800b263
 800a6a8:	0800abb3 	.word	0x0800abb3
 800a6ac:	0800b263 	.word	0x0800b263
 800a6b0:	0800b263 	.word	0x0800b263
 800a6b4:	0800b263 	.word	0x0800b263
 800a6b8:	0800ac2b 	.word	0x0800ac2b
 800a6bc:	0800b263 	.word	0x0800b263
 800a6c0:	0800b263 	.word	0x0800b263
 800a6c4:	0800b263 	.word	0x0800b263
 800a6c8:	0800b263 	.word	0x0800b263
 800a6cc:	0800b263 	.word	0x0800b263
 800a6d0:	0800b263 	.word	0x0800b263
 800a6d4:	0800b263 	.word	0x0800b263
 800a6d8:	0800acaf 	.word	0x0800acaf
 800a6dc:	0800b263 	.word	0x0800b263
 800a6e0:	0800b263 	.word	0x0800b263
 800a6e4:	0800b263 	.word	0x0800b263
 800a6e8:	0800b263 	.word	0x0800b263
 800a6ec:	0800b263 	.word	0x0800b263
 800a6f0:	0800b263 	.word	0x0800b263
 800a6f4:	0800b263 	.word	0x0800b263
 800a6f8:	0800b263 	.word	0x0800b263
 800a6fc:	0800b263 	.word	0x0800b263
 800a700:	0800b263 	.word	0x0800b263
 800a704:	0800b263 	.word	0x0800b263
 800a708:	0800b263 	.word	0x0800b263
 800a70c:	0800b263 	.word	0x0800b263
 800a710:	0800b263 	.word	0x0800b263
 800a714:	0800b263 	.word	0x0800b263
 800a718:	0800ad31 	.word	0x0800ad31
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b40      	cmp	r3, #64	; 0x40
 800a720:	f000 83e8 	beq.w	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800a724:	f000 bd9d 	b.w	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800a728:	40021000 	.word	0x40021000
 800a72c:	0003d090 	.word	0x0003d090
 800a730:	08019fa4 	.word	0x08019fa4
 800a734:	00f42400 	.word	0x00f42400
 800a738:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a73c:	69b9      	ldr	r1, [r7, #24]
 800a73e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a742:	f000 ff83 	bl	800b64c <RCCEx_GetSAIxPeriphCLKFreq>
 800a746:	61f8      	str	r0, [r7, #28]
      break;
 800a748:	f000 bd8e 	b.w	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800a74c:	69b9      	ldr	r1, [r7, #24]
 800a74e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a752:	f000 ff7b 	bl	800b64c <RCCEx_GetSAIxPeriphCLKFreq>
 800a756:	61f8      	str	r0, [r7, #28]
      break;
 800a758:	f000 bd86 	b.w	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a75c:	4b9a      	ldr	r3, [pc, #616]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a75e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a762:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a766:	60fb      	str	r3, [r7, #12]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a76e:	d015      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a776:	f200 8092 	bhi.w	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a780:	d029      	beq.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a788:	f200 8089 	bhi.w	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d07b      	beq.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a798:	d04a      	beq.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800a79a:	e080      	b.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a79c:	4b8a      	ldr	r3, [pc, #552]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d17d      	bne.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a7a8:	4b87      	ldr	r3, [pc, #540]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d005      	beq.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800a7b4:	4b84      	ldr	r3, [pc, #528]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	091b      	lsrs	r3, r3, #4
 800a7ba:	f003 030f 	and.w	r3, r3, #15
 800a7be:	e005      	b.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800a7c0:	4b81      	ldr	r3, [pc, #516]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a7c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7c6:	0a1b      	lsrs	r3, r3, #8
 800a7c8:	f003 030f 	and.w	r3, r3, #15
 800a7cc:	4a7f      	ldr	r2, [pc, #508]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7d2:	61fb      	str	r3, [r7, #28]
          break;
 800a7d4:	e066      	b.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a7d6:	4b7c      	ldr	r3, [pc, #496]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7e2:	d162      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a7e4:	4b78      	ldr	r3, [pc, #480]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7f0:	d15b      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a7f2:	4b75      	ldr	r3, [pc, #468]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	0a1b      	lsrs	r3, r3, #8
 800a7f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7fc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	fb03 f202 	mul.w	r2, r3, r2
 800a806:	4b70      	ldr	r3, [pc, #448]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	091b      	lsrs	r3, r3, #4
 800a80c:	f003 030f 	and.w	r3, r3, #15
 800a810:	3301      	adds	r3, #1
 800a812:	fbb2 f3f3 	udiv	r3, r2, r3
 800a816:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a818:	4b6b      	ldr	r3, [pc, #428]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	0d5b      	lsrs	r3, r3, #21
 800a81e:	f003 0303 	and.w	r3, r3, #3
 800a822:	3301      	adds	r3, #1
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	fbb2 f3f3 	udiv	r3, r2, r3
 800a82c:	61fb      	str	r3, [r7, #28]
          break;
 800a82e:	e03c      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a830:	4b65      	ldr	r3, [pc, #404]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a83c:	d138      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a83e:	4b62      	ldr	r3, [pc, #392]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a84a:	d131      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a84c:	4b5e      	ldr	r3, [pc, #376]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	0a1b      	lsrs	r3, r3, #8
 800a852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a856:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	fb03 f202 	mul.w	r2, r3, r2
 800a860:	4b59      	ldr	r3, [pc, #356]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	091b      	lsrs	r3, r3, #4
 800a866:	f003 030f 	and.w	r3, r3, #15
 800a86a:	3301      	adds	r3, #1
 800a86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a870:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a872:	4b55      	ldr	r3, [pc, #340]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	0d5b      	lsrs	r3, r3, #21
 800a878:	f003 0303 	and.w	r3, r3, #3
 800a87c:	3301      	adds	r3, #1
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	69ba      	ldr	r2, [r7, #24]
 800a882:	fbb2 f3f3 	udiv	r3, r2, r3
 800a886:	61fb      	str	r3, [r7, #28]
          break;
 800a888:	e012      	b.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a88a:	4b4f      	ldr	r3, [pc, #316]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a88c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b02      	cmp	r3, #2
 800a896:	d10e      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800a898:	4b4d      	ldr	r3, [pc, #308]	; (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a89a:	61fb      	str	r3, [r7, #28]
          break;
 800a89c:	e00b      	b.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800a89e:	bf00      	nop
 800a8a0:	f000 bce2 	b.w	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a8a4:	bf00      	nop
 800a8a6:	f000 bcdf 	b.w	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a8aa:	bf00      	nop
 800a8ac:	f000 bcdc 	b.w	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a8b0:	bf00      	nop
 800a8b2:	f000 bcd9 	b.w	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a8b6:	bf00      	nop
        break;
 800a8b8:	f000 bcd6 	b.w	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800a8bc:	4b42      	ldr	r3, [pc, #264]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8ca:	d13d      	bne.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a8cc:	4b3e      	ldr	r3, [pc, #248]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8d8:	f040 84c5 	bne.w	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800a8dc:	4b3a      	ldr	r3, [pc, #232]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e8:	f040 84bd 	bne.w	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a8ec:	4b36      	ldr	r3, [pc, #216]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	0a1b      	lsrs	r3, r3, #8
 800a8f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8f6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	fb03 f202 	mul.w	r2, r3, r2
 800a900:	4b31      	ldr	r3, [pc, #196]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	091b      	lsrs	r3, r3, #4
 800a906:	f003 030f 	and.w	r3, r3, #15
 800a90a:	3301      	adds	r3, #1
 800a90c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a910:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a912:	4b2d      	ldr	r3, [pc, #180]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	0edb      	lsrs	r3, r3, #27
 800a918:	f003 031f 	and.w	r3, r3, #31
 800a91c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10a      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a924:	4b28      	ldr	r3, [pc, #160]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d002      	beq.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800a930:	2311      	movs	r3, #17
 800a932:	617b      	str	r3, [r7, #20]
 800a934:	e001      	b.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800a936:	2307      	movs	r3, #7
 800a938:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a942:	61fb      	str	r3, [r7, #28]
      break;
 800a944:	f000 bc8f 	b.w	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800a948:	4b1f      	ldr	r3, [pc, #124]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a94a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a94e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a95a:	d016      	beq.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a962:	f200 809b 	bhi.w	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a96c:	d032      	beq.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a974:	f200 8092 	bhi.w	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 8084 	beq.w	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a986:	d052      	beq.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800a988:	e088      	b.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a98a:	4b0f      	ldr	r3, [pc, #60]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0302 	and.w	r3, r3, #2
 800a992:	2b02      	cmp	r3, #2
 800a994:	f040 8084 	bne.w	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a998:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 0308 	and.w	r3, r3, #8
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d005      	beq.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a9a4:	4b08      	ldr	r3, [pc, #32]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	091b      	lsrs	r3, r3, #4
 800a9aa:	f003 030f 	and.w	r3, r3, #15
 800a9ae:	e005      	b.n	800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800a9b0:	4b05      	ldr	r3, [pc, #20]	; (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a9b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9b6:	0a1b      	lsrs	r3, r3, #8
 800a9b8:	f003 030f 	and.w	r3, r3, #15
 800a9bc:	4a03      	ldr	r2, [pc, #12]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a9be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9c2:	61fb      	str	r3, [r7, #28]
          break;
 800a9c4:	e06c      	b.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800a9c6:	bf00      	nop
 800a9c8:	40021000 	.word	0x40021000
 800a9cc:	08019fa4 	.word	0x08019fa4
 800a9d0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a9d4:	4ba5      	ldr	r3, [pc, #660]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9e0:	d160      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a9e2:	4ba2      	ldr	r3, [pc, #648]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9ee:	d159      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a9f0:	4b9e      	ldr	r3, [pc, #632]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	0a1b      	lsrs	r3, r3, #8
 800a9f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9fa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	fb03 f202 	mul.w	r2, r3, r2
 800aa04:	4b99      	ldr	r3, [pc, #612]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	091b      	lsrs	r3, r3, #4
 800aa0a:	f003 030f 	and.w	r3, r3, #15
 800aa0e:	3301      	adds	r3, #1
 800aa10:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa14:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800aa16:	4b95      	ldr	r3, [pc, #596]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	0d5b      	lsrs	r3, r3, #21
 800aa1c:	f003 0303 	and.w	r3, r3, #3
 800aa20:	3301      	adds	r3, #1
 800aa22:	005b      	lsls	r3, r3, #1
 800aa24:	69ba      	ldr	r2, [r7, #24]
 800aa26:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa2a:	61fb      	str	r3, [r7, #28]
          break;
 800aa2c:	e03a      	b.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800aa2e:	4b8f      	ldr	r3, [pc, #572]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa3a:	d135      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800aa3c:	4b8b      	ldr	r3, [pc, #556]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa48:	d12e      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800aa4a:	4b88      	ldr	r3, [pc, #544]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	0a1b      	lsrs	r3, r3, #8
 800aa50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa54:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	fb03 f202 	mul.w	r2, r3, r2
 800aa5e:	4b83      	ldr	r3, [pc, #524]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	091b      	lsrs	r3, r3, #4
 800aa64:	f003 030f 	and.w	r3, r3, #15
 800aa68:	3301      	adds	r3, #1
 800aa6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa6e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800aa70:	4b7e      	ldr	r3, [pc, #504]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	0d5b      	lsrs	r3, r3, #21
 800aa76:	f003 0303 	and.w	r3, r3, #3
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	69ba      	ldr	r2, [r7, #24]
 800aa80:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa84:	61fb      	str	r3, [r7, #28]
          break;
 800aa86:	e00f      	b.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800aa88:	4b78      	ldr	r3, [pc, #480]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aa8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa8e:	f003 0302 	and.w	r3, r3, #2
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d10a      	bne.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800aa96:	4b76      	ldr	r3, [pc, #472]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800aa98:	61fb      	str	r3, [r7, #28]
          break;
 800aa9a:	e007      	b.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800aa9c:	bf00      	nop
 800aa9e:	e3e2      	b.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800aaa0:	bf00      	nop
 800aaa2:	e3e0      	b.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800aaa4:	bf00      	nop
 800aaa6:	e3de      	b.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800aaa8:	bf00      	nop
 800aaaa:	e3dc      	b.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800aaac:	bf00      	nop
      break;
 800aaae:	e3da      	b.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800aab0:	4b6e      	ldr	r3, [pc, #440]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab6:	f003 0303 	and.w	r3, r3, #3
 800aaba:	60fb      	str	r3, [r7, #12]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d827      	bhi.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800aac2:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800aac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac8:	0800aad9 	.word	0x0800aad9
 800aacc:	0800aae1 	.word	0x0800aae1
 800aad0:	0800aae9 	.word	0x0800aae9
 800aad4:	0800aafd 	.word	0x0800aafd
          frequency = HAL_RCC_GetPCLK2Freq();
 800aad8:	f7ff f87c 	bl	8009bd4 <HAL_RCC_GetPCLK2Freq>
 800aadc:	61f8      	str	r0, [r7, #28]
          break;
 800aade:	e01d      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800aae0:	f7fe ffca 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800aae4:	61f8      	str	r0, [r7, #28]
          break;
 800aae6:	e019      	b.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aae8:	4b60      	ldr	r3, [pc, #384]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaf4:	d10f      	bne.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800aaf6:	4b5f      	ldr	r3, [pc, #380]	; (800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aaf8:	61fb      	str	r3, [r7, #28]
          break;
 800aafa:	e00c      	b.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aafc:	4b5b      	ldr	r3, [pc, #364]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab02:	f003 0302 	and.w	r3, r3, #2
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d107      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800ab0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab0e:	61fb      	str	r3, [r7, #28]
          break;
 800ab10:	e003      	b.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800ab12:	bf00      	nop
 800ab14:	e3a8      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ab16:	bf00      	nop
 800ab18:	e3a6      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ab1a:	bf00      	nop
        break;
 800ab1c:	e3a4      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ab1e:	4b53      	ldr	r3, [pc, #332]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab24:	f003 030c 	and.w	r3, r3, #12
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b0c      	cmp	r3, #12
 800ab2e:	d83a      	bhi.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ab30:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800ab32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab36:	bf00      	nop
 800ab38:	0800ab6d 	.word	0x0800ab6d
 800ab3c:	0800aba7 	.word	0x0800aba7
 800ab40:	0800aba7 	.word	0x0800aba7
 800ab44:	0800aba7 	.word	0x0800aba7
 800ab48:	0800ab75 	.word	0x0800ab75
 800ab4c:	0800aba7 	.word	0x0800aba7
 800ab50:	0800aba7 	.word	0x0800aba7
 800ab54:	0800aba7 	.word	0x0800aba7
 800ab58:	0800ab7d 	.word	0x0800ab7d
 800ab5c:	0800aba7 	.word	0x0800aba7
 800ab60:	0800aba7 	.word	0x0800aba7
 800ab64:	0800aba7 	.word	0x0800aba7
 800ab68:	0800ab91 	.word	0x0800ab91
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab6c:	f7ff f81c 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800ab70:	61f8      	str	r0, [r7, #28]
          break;
 800ab72:	e01d      	b.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800ab74:	f7fe ff80 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800ab78:	61f8      	str	r0, [r7, #28]
          break;
 800ab7a:	e019      	b.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab7c:	4b3b      	ldr	r3, [pc, #236]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab88:	d10f      	bne.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800ab8a:	4b3a      	ldr	r3, [pc, #232]	; (800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab8c:	61fb      	str	r3, [r7, #28]
          break;
 800ab8e:	e00c      	b.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ab90:	4b36      	ldr	r3, [pc, #216]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ab92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab96:	f003 0302 	and.w	r3, r3, #2
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d107      	bne.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800ab9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aba2:	61fb      	str	r3, [r7, #28]
          break;
 800aba4:	e003      	b.n	800abae <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800aba6:	bf00      	nop
 800aba8:	e35e      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800abaa:	bf00      	nop
 800abac:	e35c      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800abae:	bf00      	nop
        break;
 800abb0:	e35a      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800abb2:	4b2e      	ldr	r3, [pc, #184]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800abbc:	60fb      	str	r3, [r7, #12]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b30      	cmp	r3, #48	; 0x30
 800abc2:	d021      	beq.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2b30      	cmp	r3, #48	; 0x30
 800abc8:	d829      	bhi.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b20      	cmp	r3, #32
 800abce:	d011      	beq.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b20      	cmp	r3, #32
 800abd4:	d823      	bhi.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d003      	beq.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b10      	cmp	r3, #16
 800abe0:	d004      	beq.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800abe2:	e01c      	b.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800abe4:	f7fe ffe0 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800abe8:	61f8      	str	r0, [r7, #28]
          break;
 800abea:	e01d      	b.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800abec:	f7fe ff44 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800abf0:	61f8      	str	r0, [r7, #28]
          break;
 800abf2:	e019      	b.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abf4:	4b1d      	ldr	r3, [pc, #116]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac00:	d10f      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800ac02:	4b1c      	ldr	r3, [pc, #112]	; (800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac04:	61fb      	str	r3, [r7, #28]
          break;
 800ac06:	e00c      	b.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac08:	4b18      	ldr	r3, [pc, #96]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d107      	bne.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800ac16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac1a:	61fb      	str	r3, [r7, #28]
          break;
 800ac1c:	e003      	b.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800ac1e:	bf00      	nop
 800ac20:	e322      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac22:	bf00      	nop
 800ac24:	e320      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ac26:	bf00      	nop
        break;
 800ac28:	e31e      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ac2a:	4b10      	ldr	r3, [pc, #64]	; (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ac2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ac34:	60fb      	str	r3, [r7, #12]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2bc0      	cmp	r3, #192	; 0xc0
 800ac3a:	d027      	beq.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ac40:	d82f      	bhi.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2b80      	cmp	r3, #128	; 0x80
 800ac46:	d017      	beq.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b80      	cmp	r3, #128	; 0x80
 800ac4c:	d829      	bhi.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b40      	cmp	r3, #64	; 0x40
 800ac58:	d004      	beq.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800ac5a:	e022      	b.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac5c:	f7fe ffa4 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800ac60:	61f8      	str	r0, [r7, #28]
          break;
 800ac62:	e023      	b.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800ac64:	f7fe ff08 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800ac68:	61f8      	str	r0, [r7, #28]
          break;
 800ac6a:	e01f      	b.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800ac6c:	40021000 	.word	0x40021000
 800ac70:	02dc6c00 	.word	0x02dc6c00
 800ac74:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac78:	4b9b      	ldr	r3, [pc, #620]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac84:	d10f      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800ac86:	4b99      	ldr	r3, [pc, #612]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ac88:	61fb      	str	r3, [r7, #28]
          break;
 800ac8a:	e00c      	b.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac8c:	4b96      	ldr	r3, [pc, #600]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ac8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	d107      	bne.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800ac9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac9e:	61fb      	str	r3, [r7, #28]
          break;
 800aca0:	e003      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800aca2:	bf00      	nop
 800aca4:	e2e0      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aca6:	bf00      	nop
 800aca8:	e2de      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800acaa:	bf00      	nop
        break;
 800acac:	e2dc      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800acae:	4b8e      	ldr	r3, [pc, #568]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800acb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acc0:	d025      	beq.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acc8:	d82c      	bhi.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acd0:	d013      	beq.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acd8:	d824      	bhi.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d004      	beq.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ace6:	d004      	beq.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800ace8:	e01c      	b.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800acea:	f7fe ff5d 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800acee:	61f8      	str	r0, [r7, #28]
          break;
 800acf0:	e01d      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800acf2:	f7fe fec1 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800acf6:	61f8      	str	r0, [r7, #28]
          break;
 800acf8:	e019      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acfa:	4b7b      	ldr	r3, [pc, #492]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad06:	d10f      	bne.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800ad08:	4b78      	ldr	r3, [pc, #480]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ad0a:	61fb      	str	r3, [r7, #28]
          break;
 800ad0c:	e00c      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ad0e:	4b76      	ldr	r3, [pc, #472]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ad10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad14:	f003 0302 	and.w	r3, r3, #2
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	d107      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800ad1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad20:	61fb      	str	r3, [r7, #28]
          break;
 800ad22:	e003      	b.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800ad24:	bf00      	nop
 800ad26:	e29f      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad28:	bf00      	nop
 800ad2a:	e29d      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ad2c:	bf00      	nop
        break;
 800ad2e:	e29b      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ad30:	4b6d      	ldr	r3, [pc, #436]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ad32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad42:	d025      	beq.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad4a:	d82c      	bhi.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad52:	d013      	beq.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad5a:	d824      	bhi.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d004      	beq.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad68:	d004      	beq.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800ad6a:	e01c      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad6c:	f7fe ff1c 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800ad70:	61f8      	str	r0, [r7, #28]
          break;
 800ad72:	e01d      	b.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800ad74:	f7fe fe80 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800ad78:	61f8      	str	r0, [r7, #28]
          break;
 800ad7a:	e019      	b.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad7c:	4b5a      	ldr	r3, [pc, #360]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad88:	d10f      	bne.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800ad8a:	4b58      	ldr	r3, [pc, #352]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ad8c:	61fb      	str	r3, [r7, #28]
          break;
 800ad8e:	e00c      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ad90:	4b55      	ldr	r3, [pc, #340]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ad92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d107      	bne.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800ad9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ada2:	61fb      	str	r3, [r7, #28]
          break;
 800ada4:	e003      	b.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800ada6:	bf00      	nop
 800ada8:	e25e      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800adaa:	bf00      	nop
 800adac:	e25c      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800adae:	bf00      	nop
        break;
 800adb0:	e25a      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800adb2:	4b4d      	ldr	r3, [pc, #308]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800adb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800adbc:	60fb      	str	r3, [r7, #12]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adc4:	d007      	beq.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adcc:	d12f      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800adce:	f7fe fe53 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800add2:	61f8      	str	r0, [r7, #28]
          break;
 800add4:	e02e      	b.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800add6:	4b44      	ldr	r3, [pc, #272]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ade2:	d126      	bne.n	800ae32 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800ade4:	4b40      	ldr	r3, [pc, #256]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d020      	beq.n	800ae32 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800adf0:	4b3d      	ldr	r3, [pc, #244]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	0a1b      	lsrs	r3, r3, #8
 800adf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adfa:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	fb03 f202 	mul.w	r2, r3, r2
 800ae04:	4b38      	ldr	r3, [pc, #224]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	091b      	lsrs	r3, r3, #4
 800ae0a:	f003 030f 	and.w	r3, r3, #15
 800ae0e:	3301      	adds	r3, #1
 800ae10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae14:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800ae16:	4b34      	ldr	r3, [pc, #208]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	0e5b      	lsrs	r3, r3, #25
 800ae1c:	f003 0303 	and.w	r3, r3, #3
 800ae20:	3301      	adds	r3, #1
 800ae22:	005b      	lsls	r3, r3, #1
 800ae24:	69ba      	ldr	r2, [r7, #24]
 800ae26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae2a:	61fb      	str	r3, [r7, #28]
          break;
 800ae2c:	e001      	b.n	800ae32 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800ae2e:	bf00      	nop
 800ae30:	e21a      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ae32:	bf00      	nop
        break;
 800ae34:	e218      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800ae36:	4b2c      	ldr	r3, [pc, #176]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae3c:	f003 0304 	and.w	r3, r3, #4
 800ae40:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d103      	bne.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800ae48:	f7fe fec4 	bl	8009bd4 <HAL_RCC_GetPCLK2Freq>
 800ae4c:	61f8      	str	r0, [r7, #28]
        break;
 800ae4e:	e20b      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800ae50:	f7fe fe12 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800ae54:	61f8      	str	r0, [r7, #28]
        break;
 800ae56:	e207      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800ae58:	4b23      	ldr	r3, [pc, #140]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae5e:	f003 0318 	and.w	r3, r3, #24
 800ae62:	60fb      	str	r3, [r7, #12]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2b10      	cmp	r3, #16
 800ae68:	d010      	beq.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b10      	cmp	r3, #16
 800ae6e:	d834      	bhi.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d024      	beq.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800ae7c:	e02d      	b.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800ae7e:	69b9      	ldr	r1, [r7, #24]
 800ae80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ae84:	f000 fbe2 	bl	800b64c <RCCEx_GetSAIxPeriphCLKFreq>
 800ae88:	61f8      	str	r0, [r7, #28]
          break;
 800ae8a:	e02b      	b.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ae8c:	4b16      	ldr	r3, [pc, #88]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0302 	and.w	r3, r3, #2
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d122      	bne.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ae98:	4b13      	ldr	r3, [pc, #76]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f003 0308 	and.w	r3, r3, #8
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d005      	beq.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800aea4:	4b10      	ldr	r3, [pc, #64]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	091b      	lsrs	r3, r3, #4
 800aeaa:	f003 030f 	and.w	r3, r3, #15
 800aeae:	e005      	b.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800aeb0:	4b0d      	ldr	r3, [pc, #52]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aeb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aeb6:	0a1b      	lsrs	r3, r3, #8
 800aeb8:	f003 030f 	and.w	r3, r3, #15
 800aebc:	4a0c      	ldr	r2, [pc, #48]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800aebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec2:	61fb      	str	r3, [r7, #28]
          break;
 800aec4:	e00b      	b.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aec6:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aed2:	d106      	bne.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800aed4:	4b05      	ldr	r3, [pc, #20]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800aed6:	61fb      	str	r3, [r7, #28]
          break;
 800aed8:	e003      	b.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800aeda:	bf00      	nop
 800aedc:	e1c4      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aede:	bf00      	nop
 800aee0:	e1c2      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aee2:	bf00      	nop
        break;
 800aee4:	e1c0      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800aee6:	bf00      	nop
 800aee8:	40021000 	.word	0x40021000
 800aeec:	00f42400 	.word	0x00f42400
 800aef0:	08019fa4 	.word	0x08019fa4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800aef4:	4b96      	ldr	r3, [pc, #600]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800aef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aefa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aefe:	60fb      	str	r3, [r7, #12]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af06:	d013      	beq.n	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af0e:	d819      	bhi.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d004      	beq.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af1c:	d004      	beq.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800af1e:	e011      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800af20:	f7fe fe42 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800af24:	61f8      	str	r0, [r7, #28]
          break;
 800af26:	e010      	b.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800af28:	f7fe fda6 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800af2c:	61f8      	str	r0, [r7, #28]
          break;
 800af2e:	e00c      	b.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af30:	4b87      	ldr	r3, [pc, #540]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af3c:	d104      	bne.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800af3e:	4b85      	ldr	r3, [pc, #532]	; (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800af40:	61fb      	str	r3, [r7, #28]
          break;
 800af42:	e001      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800af44:	bf00      	nop
 800af46:	e18f      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800af48:	bf00      	nop
        break;
 800af4a:	e18d      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800af4c:	4b80      	ldr	r3, [pc, #512]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800af4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800af56:	60fb      	str	r3, [r7, #12]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af5e:	d013      	beq.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af66:	d819      	bhi.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d004      	beq.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af74:	d004      	beq.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800af76:	e011      	b.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800af78:	f7fe fe16 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800af7c:	61f8      	str	r0, [r7, #28]
          break;
 800af7e:	e010      	b.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800af80:	f7fe fd7a 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800af84:	61f8      	str	r0, [r7, #28]
          break;
 800af86:	e00c      	b.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af88:	4b71      	ldr	r3, [pc, #452]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af94:	d104      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800af96:	4b6f      	ldr	r3, [pc, #444]	; (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800af98:	61fb      	str	r3, [r7, #28]
          break;
 800af9a:	e001      	b.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800af9c:	bf00      	nop
 800af9e:	e163      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800afa0:	bf00      	nop
        break;
 800afa2:	e161      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800afa4:	4b6a      	ldr	r3, [pc, #424]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800afa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800afae:	60fb      	str	r3, [r7, #12]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afb6:	d013      	beq.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afbe:	d819      	bhi.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d004      	beq.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afcc:	d004      	beq.n	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800afce:	e011      	b.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800afd0:	f7fe fdea 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800afd4:	61f8      	str	r0, [r7, #28]
          break;
 800afd6:	e010      	b.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800afd8:	f7fe fd4e 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800afdc:	61f8      	str	r0, [r7, #28]
          break;
 800afde:	e00c      	b.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800afe0:	4b5b      	ldr	r3, [pc, #364]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afec:	d104      	bne.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800afee:	4b59      	ldr	r3, [pc, #356]	; (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800aff0:	61fb      	str	r3, [r7, #28]
          break;
 800aff2:	e001      	b.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800aff4:	bf00      	nop
 800aff6:	e137      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800aff8:	bf00      	nop
        break;
 800affa:	e135      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800affc:	4b54      	ldr	r3, [pc, #336]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800affe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b002:	f003 0303 	and.w	r3, r3, #3
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d011      	beq.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d818      	bhi.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d003      	beq.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d004      	beq.n	800b02a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800b020:	e011      	b.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b022:	f7fe fdc1 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800b026:	61f8      	str	r0, [r7, #28]
          break;
 800b028:	e010      	b.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800b02a:	f7fe fd25 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800b02e:	61f8      	str	r0, [r7, #28]
          break;
 800b030:	e00c      	b.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b032:	4b47      	ldr	r3, [pc, #284]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b03e:	d104      	bne.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800b040:	4b44      	ldr	r3, [pc, #272]	; (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b042:	61fb      	str	r3, [r7, #28]
          break;
 800b044:	e001      	b.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800b046:	bf00      	nop
 800b048:	e10e      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b04a:	bf00      	nop
        break;
 800b04c:	e10c      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b04e:	4b40      	ldr	r3, [pc, #256]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b054:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b058:	60fb      	str	r3, [r7, #12]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b060:	d02c      	beq.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b068:	d833      	bhi.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b070:	d01a      	beq.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b078:	d82b      	bhi.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d004      	beq.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b086:	d004      	beq.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800b088:	e023      	b.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b08a:	f7fe fd8d 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800b08e:	61f8      	str	r0, [r7, #28]
          break;
 800b090:	e026      	b.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b092:	4b2f      	ldr	r3, [pc, #188]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b098:	f003 0302 	and.w	r3, r3, #2
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d11a      	bne.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800b0a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b0a4:	61fb      	str	r3, [r7, #28]
          break;
 800b0a6:	e016      	b.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0a8:	4b29      	ldr	r3, [pc, #164]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0b4:	d111      	bne.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800b0b6:	4b27      	ldr	r3, [pc, #156]	; (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b0b8:	61fb      	str	r3, [r7, #28]
          break;
 800b0ba:	e00e      	b.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b0bc:	4b24      	ldr	r3, [pc, #144]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0c2:	f003 0302 	and.w	r3, r3, #2
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d109      	bne.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800b0ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0ce:	61fb      	str	r3, [r7, #28]
          break;
 800b0d0:	e005      	b.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800b0d2:	bf00      	nop
 800b0d4:	e0c8      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b0d6:	bf00      	nop
 800b0d8:	e0c6      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b0da:	bf00      	nop
 800b0dc:	e0c4      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b0de:	bf00      	nop
        break;
 800b0e0:	e0c2      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b0e2:	4b1b      	ldr	r3, [pc, #108]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0f4:	d030      	beq.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0fc:	d837      	bhi.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b104:	d01a      	beq.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b10c:	d82f      	bhi.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d004      	beq.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b11a:	d004      	beq.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800b11c:	e027      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800b11e:	f7fe fd43 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800b122:	61f8      	str	r0, [r7, #28]
          break;
 800b124:	e02a      	b.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b126:	4b0a      	ldr	r3, [pc, #40]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b12c:	f003 0302 	and.w	r3, r3, #2
 800b130:	2b02      	cmp	r3, #2
 800b132:	d11e      	bne.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800b134:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b138:	61fb      	str	r3, [r7, #28]
          break;
 800b13a:	e01a      	b.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b13c:	4b04      	ldr	r3, [pc, #16]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b148:	d115      	bne.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800b14a:	4b02      	ldr	r3, [pc, #8]	; (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800b14c:	61fb      	str	r3, [r7, #28]
          break;
 800b14e:	e012      	b.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800b150:	40021000 	.word	0x40021000
 800b154:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b158:	4b46      	ldr	r3, [pc, #280]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b15e:	f003 0302 	and.w	r3, r3, #2
 800b162:	2b02      	cmp	r3, #2
 800b164:	d109      	bne.n	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800b166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b16a:	61fb      	str	r3, [r7, #28]
          break;
 800b16c:	e005      	b.n	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800b16e:	bf00      	nop
 800b170:	e07a      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b172:	bf00      	nop
 800b174:	e078      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b176:	bf00      	nop
 800b178:	e076      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b17a:	bf00      	nop
        break;
 800b17c:	e074      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b17e:	4b3d      	ldr	r3, [pc, #244]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b180:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b184:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b188:	60fb      	str	r3, [r7, #12]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b190:	d02c      	beq.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b198:	d855      	bhi.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d004      	beq.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1a6:	d004      	beq.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800b1a8:	e04d      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800b1aa:	f7fe fc65 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800b1ae:	61f8      	str	r0, [r7, #28]
          break;
 800b1b0:	e04e      	b.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b1b2:	4b30      	ldr	r3, [pc, #192]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 0302 	and.w	r3, r3, #2
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d145      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b1be:	4b2d      	ldr	r3, [pc, #180]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 0308 	and.w	r3, r3, #8
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d005      	beq.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800b1ca:	4b2a      	ldr	r3, [pc, #168]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	091b      	lsrs	r3, r3, #4
 800b1d0:	f003 030f 	and.w	r3, r3, #15
 800b1d4:	e005      	b.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800b1d6:	4b27      	ldr	r3, [pc, #156]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b1d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1dc:	0a1b      	lsrs	r3, r3, #8
 800b1de:	f003 030f 	and.w	r3, r3, #15
 800b1e2:	4a25      	ldr	r2, [pc, #148]	; (800b278 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800b1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1e8:	61fb      	str	r3, [r7, #28]
          break;
 800b1ea:	e02e      	b.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b1ec:	4b21      	ldr	r3, [pc, #132]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1f8:	d129      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b1fa:	4b1e      	ldr	r3, [pc, #120]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b206:	d122      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b208:	4b1a      	ldr	r3, [pc, #104]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	0a1b      	lsrs	r3, r3, #8
 800b20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b212:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	fb03 f202 	mul.w	r2, r3, r2
 800b21c:	4b15      	ldr	r3, [pc, #84]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	091b      	lsrs	r3, r3, #4
 800b222:	f003 030f 	and.w	r3, r3, #15
 800b226:	3301      	adds	r3, #1
 800b228:	fbb2 f3f3 	udiv	r3, r2, r3
 800b22c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b22e:	4b11      	ldr	r3, [pc, #68]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	0d5b      	lsrs	r3, r3, #21
 800b234:	f003 0303 	and.w	r3, r3, #3
 800b238:	3301      	adds	r3, #1
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	69ba      	ldr	r2, [r7, #24]
 800b23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b242:	61fb      	str	r3, [r7, #28]
          break;
 800b244:	e003      	b.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800b246:	bf00      	nop
 800b248:	e00e      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b24a:	bf00      	nop
 800b24c:	e00c      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800b24e:	bf00      	nop
        break;
 800b250:	e00a      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b252:	bf00      	nop
 800b254:	e008      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b256:	bf00      	nop
 800b258:	e006      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b25a:	bf00      	nop
 800b25c:	e004      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b25e:	bf00      	nop
 800b260:	e002      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b262:	bf00      	nop
 800b264:	e000      	b.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800b266:	bf00      	nop
    }
  }

  return(frequency);
 800b268:	69fb      	ldr	r3, [r7, #28]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3720      	adds	r7, #32
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	40021000 	.word	0x40021000
 800b278:	08019fa4 	.word	0x08019fa4

0800b27c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b28a:	4b72      	ldr	r3, [pc, #456]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	f003 0303 	and.w	r3, r3, #3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00e      	beq.n	800b2b4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b296:	4b6f      	ldr	r3, [pc, #444]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	f003 0203 	and.w	r2, r3, #3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d103      	bne.n	800b2ae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
       ||
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d142      	bne.n	800b334 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	73fb      	strb	r3, [r7, #15]
 800b2b2:	e03f      	b.n	800b334 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b03      	cmp	r3, #3
 800b2ba:	d018      	beq.n	800b2ee <RCCEx_PLLSAI1_Config+0x72>
 800b2bc:	2b03      	cmp	r3, #3
 800b2be:	d825      	bhi.n	800b30c <RCCEx_PLLSAI1_Config+0x90>
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d002      	beq.n	800b2ca <RCCEx_PLLSAI1_Config+0x4e>
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d009      	beq.n	800b2dc <RCCEx_PLLSAI1_Config+0x60>
 800b2c8:	e020      	b.n	800b30c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b2ca:	4b62      	ldr	r3, [pc, #392]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0302 	and.w	r3, r3, #2
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d11d      	bne.n	800b312 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2da:	e01a      	b.n	800b312 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b2dc:	4b5d      	ldr	r3, [pc, #372]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d116      	bne.n	800b316 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2ec:	e013      	b.n	800b316 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b2ee:	4b59      	ldr	r3, [pc, #356]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10f      	bne.n	800b31a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b2fa:	4b56      	ldr	r3, [pc, #344]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b302:	2b00      	cmp	r3, #0
 800b304:	d109      	bne.n	800b31a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b30a:	e006      	b.n	800b31a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	73fb      	strb	r3, [r7, #15]
      break;
 800b310:	e004      	b.n	800b31c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b312:	bf00      	nop
 800b314:	e002      	b.n	800b31c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b316:	bf00      	nop
 800b318:	e000      	b.n	800b31c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b31a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d108      	bne.n	800b334 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b322:	4b4c      	ldr	r3, [pc, #304]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	f023 0203 	bic.w	r2, r3, #3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4949      	ldr	r1, [pc, #292]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b330:	4313      	orrs	r3, r2
 800b332:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	2b00      	cmp	r3, #0
 800b338:	f040 8086 	bne.w	800b448 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b33c:	4b45      	ldr	r3, [pc, #276]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a44      	ldr	r2, [pc, #272]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b342:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b348:	f7fa fd2a 	bl	8005da0 <HAL_GetTick>
 800b34c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b34e:	e009      	b.n	800b364 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b350:	f7fa fd26 	bl	8005da0 <HAL_GetTick>
 800b354:	4602      	mov	r2, r0
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d902      	bls.n	800b364 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b35e:	2303      	movs	r3, #3
 800b360:	73fb      	strb	r3, [r7, #15]
        break;
 800b362:	e005      	b.n	800b370 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b364:	4b3b      	ldr	r3, [pc, #236]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1ef      	bne.n	800b350 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d168      	bne.n	800b448 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d113      	bne.n	800b3a4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b37c:	4b35      	ldr	r3, [pc, #212]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b37e:	691a      	ldr	r2, [r3, #16]
 800b380:	4b35      	ldr	r3, [pc, #212]	; (800b458 <RCCEx_PLLSAI1_Config+0x1dc>)
 800b382:	4013      	ands	r3, r2
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	6892      	ldr	r2, [r2, #8]
 800b388:	0211      	lsls	r1, r2, #8
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	68d2      	ldr	r2, [r2, #12]
 800b38e:	06d2      	lsls	r2, r2, #27
 800b390:	4311      	orrs	r1, r2
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	6852      	ldr	r2, [r2, #4]
 800b396:	3a01      	subs	r2, #1
 800b398:	0112      	lsls	r2, r2, #4
 800b39a:	430a      	orrs	r2, r1
 800b39c:	492d      	ldr	r1, [pc, #180]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	610b      	str	r3, [r1, #16]
 800b3a2:	e02d      	b.n	800b400 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d115      	bne.n	800b3d6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b3aa:	4b2a      	ldr	r3, [pc, #168]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3ac:	691a      	ldr	r2, [r3, #16]
 800b3ae:	4b2b      	ldr	r3, [pc, #172]	; (800b45c <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	6892      	ldr	r2, [r2, #8]
 800b3b6:	0211      	lsls	r1, r2, #8
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	6912      	ldr	r2, [r2, #16]
 800b3bc:	0852      	lsrs	r2, r2, #1
 800b3be:	3a01      	subs	r2, #1
 800b3c0:	0552      	lsls	r2, r2, #21
 800b3c2:	4311      	orrs	r1, r2
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	6852      	ldr	r2, [r2, #4]
 800b3c8:	3a01      	subs	r2, #1
 800b3ca:	0112      	lsls	r2, r2, #4
 800b3cc:	430a      	orrs	r2, r1
 800b3ce:	4921      	ldr	r1, [pc, #132]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	610b      	str	r3, [r1, #16]
 800b3d4:	e014      	b.n	800b400 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b3d6:	4b1f      	ldr	r3, [pc, #124]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3d8:	691a      	ldr	r2, [r3, #16]
 800b3da:	4b21      	ldr	r3, [pc, #132]	; (800b460 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	6892      	ldr	r2, [r2, #8]
 800b3e2:	0211      	lsls	r1, r2, #8
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	6952      	ldr	r2, [r2, #20]
 800b3e8:	0852      	lsrs	r2, r2, #1
 800b3ea:	3a01      	subs	r2, #1
 800b3ec:	0652      	lsls	r2, r2, #25
 800b3ee:	4311      	orrs	r1, r2
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	6852      	ldr	r2, [r2, #4]
 800b3f4:	3a01      	subs	r2, #1
 800b3f6:	0112      	lsls	r2, r2, #4
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	4916      	ldr	r1, [pc, #88]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b400:	4b14      	ldr	r3, [pc, #80]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a13      	ldr	r2, [pc, #76]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b406:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b40a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b40c:	f7fa fcc8 	bl	8005da0 <HAL_GetTick>
 800b410:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b412:	e009      	b.n	800b428 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b414:	f7fa fcc4 	bl	8005da0 <HAL_GetTick>
 800b418:	4602      	mov	r2, r0
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d902      	bls.n	800b428 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b422:	2303      	movs	r3, #3
 800b424:	73fb      	strb	r3, [r7, #15]
          break;
 800b426:	e005      	b.n	800b434 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b428:	4b0a      	ldr	r3, [pc, #40]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b430:	2b00      	cmp	r3, #0
 800b432:	d0ef      	beq.n	800b414 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d106      	bne.n	800b448 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b43a:	4b06      	ldr	r3, [pc, #24]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b43c:	691a      	ldr	r2, [r3, #16]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	4904      	ldr	r1, [pc, #16]	; (800b454 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b444:	4313      	orrs	r3, r2
 800b446:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b448:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	40021000 	.word	0x40021000
 800b458:	07ff800f 	.word	0x07ff800f
 800b45c:	ff9f800f 	.word	0xff9f800f
 800b460:	f9ff800f 	.word	0xf9ff800f

0800b464 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b472:	4b72      	ldr	r3, [pc, #456]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	f003 0303 	and.w	r3, r3, #3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00e      	beq.n	800b49c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b47e:	4b6f      	ldr	r3, [pc, #444]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	f003 0203 	and.w	r2, r3, #3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d103      	bne.n	800b496 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
       ||
 800b492:	2b00      	cmp	r3, #0
 800b494:	d142      	bne.n	800b51c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	73fb      	strb	r3, [r7, #15]
 800b49a:	e03f      	b.n	800b51c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b03      	cmp	r3, #3
 800b4a2:	d018      	beq.n	800b4d6 <RCCEx_PLLSAI2_Config+0x72>
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d825      	bhi.n	800b4f4 <RCCEx_PLLSAI2_Config+0x90>
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d002      	beq.n	800b4b2 <RCCEx_PLLSAI2_Config+0x4e>
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d009      	beq.n	800b4c4 <RCCEx_PLLSAI2_Config+0x60>
 800b4b0:	e020      	b.n	800b4f4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b4b2:	4b62      	ldr	r3, [pc, #392]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 0302 	and.w	r3, r3, #2
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d11d      	bne.n	800b4fa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4c2:	e01a      	b.n	800b4fa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b4c4:	4b5d      	ldr	r3, [pc, #372]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d116      	bne.n	800b4fe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b4d4:	e013      	b.n	800b4fe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b4d6:	4b59      	ldr	r3, [pc, #356]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10f      	bne.n	800b502 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b4e2:	4b56      	ldr	r3, [pc, #344]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d109      	bne.n	800b502 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b4f2:	e006      	b.n	800b502 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4f8:	e004      	b.n	800b504 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b4fa:	bf00      	nop
 800b4fc:	e002      	b.n	800b504 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b4fe:	bf00      	nop
 800b500:	e000      	b.n	800b504 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b502:	bf00      	nop
    }

    if(status == HAL_OK)
 800b504:	7bfb      	ldrb	r3, [r7, #15]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d108      	bne.n	800b51c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b50a:	4b4c      	ldr	r3, [pc, #304]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	f023 0203 	bic.w	r2, r3, #3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4949      	ldr	r1, [pc, #292]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b518:	4313      	orrs	r3, r2
 800b51a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f040 8086 	bne.w	800b630 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b524:	4b45      	ldr	r3, [pc, #276]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a44      	ldr	r2, [pc, #272]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b52a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b52e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b530:	f7fa fc36 	bl	8005da0 <HAL_GetTick>
 800b534:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b536:	e009      	b.n	800b54c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b538:	f7fa fc32 	bl	8005da0 <HAL_GetTick>
 800b53c:	4602      	mov	r2, r0
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	2b02      	cmp	r3, #2
 800b544:	d902      	bls.n	800b54c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b546:	2303      	movs	r3, #3
 800b548:	73fb      	strb	r3, [r7, #15]
        break;
 800b54a:	e005      	b.n	800b558 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b54c:	4b3b      	ldr	r3, [pc, #236]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1ef      	bne.n	800b538 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d168      	bne.n	800b630 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d113      	bne.n	800b58c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b564:	4b35      	ldr	r3, [pc, #212]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b566:	695a      	ldr	r2, [r3, #20]
 800b568:	4b35      	ldr	r3, [pc, #212]	; (800b640 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b56a:	4013      	ands	r3, r2
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	6892      	ldr	r2, [r2, #8]
 800b570:	0211      	lsls	r1, r2, #8
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	68d2      	ldr	r2, [r2, #12]
 800b576:	06d2      	lsls	r2, r2, #27
 800b578:	4311      	orrs	r1, r2
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	6852      	ldr	r2, [r2, #4]
 800b57e:	3a01      	subs	r2, #1
 800b580:	0112      	lsls	r2, r2, #4
 800b582:	430a      	orrs	r2, r1
 800b584:	492d      	ldr	r1, [pc, #180]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b586:	4313      	orrs	r3, r2
 800b588:	614b      	str	r3, [r1, #20]
 800b58a:	e02d      	b.n	800b5e8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d115      	bne.n	800b5be <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b592:	4b2a      	ldr	r3, [pc, #168]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b594:	695a      	ldr	r2, [r3, #20]
 800b596:	4b2b      	ldr	r3, [pc, #172]	; (800b644 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b598:	4013      	ands	r3, r2
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	6892      	ldr	r2, [r2, #8]
 800b59e:	0211      	lsls	r1, r2, #8
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	6912      	ldr	r2, [r2, #16]
 800b5a4:	0852      	lsrs	r2, r2, #1
 800b5a6:	3a01      	subs	r2, #1
 800b5a8:	0552      	lsls	r2, r2, #21
 800b5aa:	4311      	orrs	r1, r2
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	6852      	ldr	r2, [r2, #4]
 800b5b0:	3a01      	subs	r2, #1
 800b5b2:	0112      	lsls	r2, r2, #4
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	4921      	ldr	r1, [pc, #132]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	614b      	str	r3, [r1, #20]
 800b5bc:	e014      	b.n	800b5e8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b5be:	4b1f      	ldr	r3, [pc, #124]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5c0:	695a      	ldr	r2, [r3, #20]
 800b5c2:	4b21      	ldr	r3, [pc, #132]	; (800b648 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	6892      	ldr	r2, [r2, #8]
 800b5ca:	0211      	lsls	r1, r2, #8
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	6952      	ldr	r2, [r2, #20]
 800b5d0:	0852      	lsrs	r2, r2, #1
 800b5d2:	3a01      	subs	r2, #1
 800b5d4:	0652      	lsls	r2, r2, #25
 800b5d6:	4311      	orrs	r1, r2
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	6852      	ldr	r2, [r2, #4]
 800b5dc:	3a01      	subs	r2, #1
 800b5de:	0112      	lsls	r2, r2, #4
 800b5e0:	430a      	orrs	r2, r1
 800b5e2:	4916      	ldr	r1, [pc, #88]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b5e8:	4b14      	ldr	r3, [pc, #80]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a13      	ldr	r2, [pc, #76]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b5ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5f4:	f7fa fbd4 	bl	8005da0 <HAL_GetTick>
 800b5f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b5fa:	e009      	b.n	800b610 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b5fc:	f7fa fbd0 	bl	8005da0 <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	2b02      	cmp	r3, #2
 800b608:	d902      	bls.n	800b610 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	73fb      	strb	r3, [r7, #15]
          break;
 800b60e:	e005      	b.n	800b61c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b610:	4b0a      	ldr	r3, [pc, #40]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d0ef      	beq.n	800b5fc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d106      	bne.n	800b630 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b622:	4b06      	ldr	r3, [pc, #24]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b624:	695a      	ldr	r2, [r3, #20]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	4904      	ldr	r1, [pc, #16]	; (800b63c <RCCEx_PLLSAI2_Config+0x1d8>)
 800b62c:	4313      	orrs	r3, r2
 800b62e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b630:	7bfb      	ldrb	r3, [r7, #15]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	40021000 	.word	0x40021000
 800b640:	07ff800f 	.word	0x07ff800f
 800b644:	ff9f800f 	.word	0xff9f800f
 800b648:	f9ff800f 	.word	0xf9ff800f

0800b64c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b089      	sub	sp, #36	; 0x24
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800b656:	2300      	movs	r3, #0
 800b658:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800b65a:	2300      	movs	r3, #0
 800b65c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800b65e:	2300      	movs	r3, #0
 800b660:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b668:	d10b      	bne.n	800b682 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b66a:	4b7e      	ldr	r3, [pc, #504]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b66c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b670:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b674:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	2b60      	cmp	r3, #96	; 0x60
 800b67a:	d112      	bne.n	800b6a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b67c:	4b7a      	ldr	r3, [pc, #488]	; (800b868 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b67e:	61fb      	str	r3, [r7, #28]
 800b680:	e00f      	b.n	800b6a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b688:	d10b      	bne.n	800b6a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b68a:	4b76      	ldr	r3, [pc, #472]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b68c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b690:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b694:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b69c:	d101      	bne.n	800b6a2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800b69e:	4b72      	ldr	r3, [pc, #456]	; (800b868 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800b6a0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f040 80d6 	bne.w	800b856 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	2b40      	cmp	r3, #64	; 0x40
 800b6b2:	d003      	beq.n	800b6bc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6ba:	d13b      	bne.n	800b734 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b6bc:	4b69      	ldr	r3, [pc, #420]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6c8:	f040 80c4 	bne.w	800b854 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800b6cc:	4b65      	ldr	r3, [pc, #404]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 80bd 	beq.w	800b854 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b6da:	4b62      	ldr	r3, [pc, #392]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	091b      	lsrs	r3, r3, #4
 800b6e0:	f003 030f 	and.w	r3, r3, #15
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ec:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b6ee:	4b5d      	ldr	r3, [pc, #372]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	0a1b      	lsrs	r3, r3, #8
 800b6f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6f8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800b6fa:	4b5a      	ldr	r3, [pc, #360]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	0edb      	lsrs	r3, r3, #27
 800b700:	f003 031f 	and.w	r3, r3, #31
 800b704:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10a      	bne.n	800b722 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800b70c:	4b55      	ldr	r3, [pc, #340]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800b718:	2311      	movs	r3, #17
 800b71a:	617b      	str	r3, [r7, #20]
 800b71c:	e001      	b.n	800b722 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800b71e:	2307      	movs	r3, #7
 800b720:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	fb03 f202 	mul.w	r2, r3, r2
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b730:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b732:	e08f      	b.n	800b854 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d13a      	bne.n	800b7b0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800b73a:	4b4a      	ldr	r3, [pc, #296]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b746:	f040 8086 	bne.w	800b856 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b74a:	4b46      	ldr	r3, [pc, #280]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b752:	2b00      	cmp	r3, #0
 800b754:	d07f      	beq.n	800b856 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b756:	4b43      	ldr	r3, [pc, #268]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	091b      	lsrs	r3, r3, #4
 800b75c:	f003 030f 	and.w	r3, r3, #15
 800b760:	3301      	adds	r3, #1
 800b762:	693a      	ldr	r2, [r7, #16]
 800b764:	fbb2 f3f3 	udiv	r3, r2, r3
 800b768:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b76a:	4b3e      	ldr	r3, [pc, #248]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	0a1b      	lsrs	r3, r3, #8
 800b770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b774:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800b776:	4b3b      	ldr	r3, [pc, #236]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	0edb      	lsrs	r3, r3, #27
 800b77c:	f003 031f 	and.w	r3, r3, #31
 800b780:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d10a      	bne.n	800b79e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800b788:	4b36      	ldr	r3, [pc, #216]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800b794:	2311      	movs	r3, #17
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	e001      	b.n	800b79e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800b79a:	2307      	movs	r3, #7
 800b79c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	fb03 f202 	mul.w	r2, r3, r2
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ac:	61fb      	str	r3, [r7, #28]
 800b7ae:	e052      	b.n	800b856 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	2b80      	cmp	r3, #128	; 0x80
 800b7b4:	d003      	beq.n	800b7be <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7bc:	d109      	bne.n	800b7d2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b7be:	4b29      	ldr	r3, [pc, #164]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7ca:	d144      	bne.n	800b856 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800b7cc:	4b27      	ldr	r3, [pc, #156]	; (800b86c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800b7ce:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b7d0:	e041      	b.n	800b856 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	2b20      	cmp	r3, #32
 800b7d6:	d003      	beq.n	800b7e0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7de:	d13a      	bne.n	800b856 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800b7e0:	4b20      	ldr	r3, [pc, #128]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7ec:	d133      	bne.n	800b856 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800b7ee:	4b1d      	ldr	r3, [pc, #116]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d02d      	beq.n	800b856 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800b7fa:	4b1a      	ldr	r3, [pc, #104]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	091b      	lsrs	r3, r3, #4
 800b800:	f003 030f 	and.w	r3, r3, #15
 800b804:	3301      	adds	r3, #1
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	fbb2 f3f3 	udiv	r3, r2, r3
 800b80c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800b80e:	4b15      	ldr	r3, [pc, #84]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	0a1b      	lsrs	r3, r3, #8
 800b814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b818:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800b81a:	4b12      	ldr	r3, [pc, #72]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b81c:	695b      	ldr	r3, [r3, #20]
 800b81e:	0edb      	lsrs	r3, r3, #27
 800b820:	f003 031f 	and.w	r3, r3, #31
 800b824:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10a      	bne.n	800b842 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800b82c:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800b82e:	695b      	ldr	r3, [r3, #20]
 800b830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b834:	2b00      	cmp	r3, #0
 800b836:	d002      	beq.n	800b83e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800b838:	2311      	movs	r3, #17
 800b83a:	617b      	str	r3, [r7, #20]
 800b83c:	e001      	b.n	800b842 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800b83e:	2307      	movs	r3, #7
 800b840:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	fb03 f202 	mul.w	r2, r3, r2
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b850:	61fb      	str	r3, [r7, #28]
 800b852:	e000      	b.n	800b856 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800b854:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800b856:	69fb      	ldr	r3, [r7, #28]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3724      	adds	r7, #36	; 0x24
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	40021000 	.word	0x40021000
 800b868:	001fff68 	.word	0x001fff68
 800b86c:	00f42400 	.word	0x00f42400

0800b870 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b08a      	sub	sp, #40	; 0x28
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d101      	bne.n	800b882 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e078      	b.n	800b974 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d105      	bne.n	800b89a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7f8 fafd 	bl	8003e94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2203      	movs	r2, #3
 800b89e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f86a 	bl	800b97c <HAL_SD_InitCard>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e060      	b.n	800b974 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b8b2:	f107 0308 	add.w	r3, r7, #8
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fdcd 	bl	800c458 <HAL_SD_GetCardStatus>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e055      	b.n	800b974 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b8c8:	7e3b      	ldrb	r3, [r7, #24]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b8ce:	7e7b      	ldrb	r3, [r7, #25]
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d10a      	bne.n	800b8f2 <HAL_SD_Init+0x82>
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d102      	bne.n	800b8e8 <HAL_SD_Init+0x78>
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d004      	beq.n	800b8f2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8ee:	65da      	str	r2, [r3, #92]	; 0x5c
 800b8f0:	e00b      	b.n	800b90a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d104      	bne.n	800b904 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b900:	65da      	str	r2, [r3, #92]	; 0x5c
 800b902:	e002      	b.n	800b90a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fe83 	bl	800c61c <HAL_SD_ConfigWideBusOperation>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e029      	b.n	800b974 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b920:	f7fa fa3e 	bl	8005da0 <HAL_GetTick>
 800b924:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b926:	e014      	b.n	800b952 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800b928:	f7fa fa3a 	bl	8005da0 <HAL_GetTick>
 800b92c:	4602      	mov	r2, r0
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b936:	d10c      	bne.n	800b952 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b93e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e010      	b.n	800b974 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 ff76 	bl	800c844 <HAL_SD_GetCardState>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b04      	cmp	r3, #4
 800b95c:	d1e4      	bne.n	800b928 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3728      	adds	r7, #40	; 0x28
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b97c:	b5b0      	push	{r4, r5, r7, lr}
 800b97e:	b08e      	sub	sp, #56	; 0x38
 800b980:	af04      	add	r7, sp, #16
 800b982:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b984:	2300      	movs	r3, #0
 800b986:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b988:	2300      	movs	r3, #0
 800b98a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b98c:	2300      	movs	r3, #0
 800b98e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b990:	2300      	movs	r3, #0
 800b992:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800b994:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b998:	f7fe fd4e 	bl	800a438 <HAL_RCCEx_GetPeriphCLKFreq>
 800b99c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d109      	bne.n	800b9b8 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b9b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e079      	b.n	800baac <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	0a1b      	lsrs	r3, r3, #8
 800b9bc:	4a3d      	ldr	r2, [pc, #244]	; (800bab4 <HAL_SD_InitCard+0x138>)
 800b9be:	fba2 2303 	umull	r2, r3, r2, r3
 800b9c2:	091b      	lsrs	r3, r3, #4
 800b9c4:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d107      	bne.n	800b9e4 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f042 0210 	orr.w	r2, r2, #16
 800b9e2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681d      	ldr	r5, [r3, #0]
 800b9e8:	466c      	mov	r4, sp
 800b9ea:	f107 0314 	add.w	r3, r7, #20
 800b9ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b9f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b9f6:	f107 0308 	add.w	r3, r7, #8
 800b9fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f003 fd1b 	bl	800f438 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f003 fd5e 	bl	800f4c8 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba16:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800ba18:	4a27      	ldr	r2, [pc, #156]	; (800bab8 <HAL_SD_InitCard+0x13c>)
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba20:	3301      	adds	r3, #1
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fa f9c8 	bl	8005db8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 ffeb 	bl	800ca04 <SD_PowerON>
 800ba2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba30:	6a3b      	ldr	r3, [r7, #32]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00b      	beq.n	800ba4e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba42:	6a3b      	ldr	r3, [r7, #32]
 800ba44:	431a      	orrs	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e02e      	b.n	800baac <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 ff18 	bl	800c884 <SD_InitCard>
 800ba54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00b      	beq.n	800ba74 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba68:	6a3b      	ldr	r3, [r7, #32]
 800ba6a:	431a      	orrs	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	e01b      	b.n	800baac <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f003 fdb9 	bl	800f5f4 <SDMMC_CmdBlockLength>
 800ba82:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00f      	beq.n	800baaa <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a0b      	ldr	r2, [pc, #44]	; (800babc <HAL_SD_InitCard+0x140>)
 800ba90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba96:	6a3b      	ldr	r3, [r7, #32]
 800ba98:	431a      	orrs	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e000      	b.n	800baac <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3728      	adds	r7, #40	; 0x28
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bdb0      	pop	{r4, r5, r7, pc}
 800bab4:	014f8b59 	.word	0x014f8b59
 800bab8:	00012110 	.word	0x00012110
 800babc:	1fe00fff 	.word	0x1fe00fff

0800bac0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b092      	sub	sp, #72	; 0x48
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bace:	f7fa f967 	bl	8005da0 <HAL_GetTick>
 800bad2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d107      	bne.n	800baf2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e170      	b.n	800bdd4 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	f040 8163 	bne.w	800bdc6 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bb06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	441a      	add	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d907      	bls.n	800bb24 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb18:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e157      	b.n	800bdd4 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2203      	movs	r2, #3
 800bb28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2200      	movs	r2, #0
 800bb32:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d002      	beq.n	800bb42 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800bb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3e:	025b      	lsls	r3, r3, #9
 800bb40:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bb42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb46:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	025b      	lsls	r3, r3, #9
 800bb4c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bb4e:	2390      	movs	r3, #144	; 0x90
 800bb50:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bb52:	2302      	movs	r3, #2
 800bb54:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f107 0214 	add.w	r2, r7, #20
 800bb66:	4611      	mov	r1, r2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f003 fd17 	bl	800f59c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68da      	ldr	r2, [r3, #12]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb7c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d90a      	bls.n	800bb9a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2202      	movs	r2, #2
 800bb88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb90:	4618      	mov	r0, r3
 800bb92:	f003 fd75 	bl	800f680 <SDMMC_CmdReadMultiBlock>
 800bb96:	6478      	str	r0, [r7, #68]	; 0x44
 800bb98:	e009      	b.n	800bbae <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bba6:	4618      	mov	r0, r3
 800bba8:	f003 fd47 	bl	800f63a <SDMMC_CmdReadSingleBlock>
 800bbac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bbae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d012      	beq.n	800bbda <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a88      	ldr	r2, [pc, #544]	; (800bddc <HAL_SD_ReadBlocks+0x31c>)
 800bbba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e0fc      	b.n	800bdd4 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bbde:	e061      	b.n	800bca4 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d03c      	beq.n	800bc68 <HAL_SD_ReadBlocks+0x1a8>
 800bbee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d039      	beq.n	800bc68 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	643b      	str	r3, [r7, #64]	; 0x40
 800bbf8:	e033      	b.n	800bc62 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f003 fc44 	bl	800f48c <SDMMC_ReadFIFO>
 800bc04:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc10:	3301      	adds	r3, #1
 800bc12:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bc14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc16:	3b01      	subs	r3, #1
 800bc18:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1c:	0a1b      	lsrs	r3, r3, #8
 800bc1e:	b2da      	uxtb	r2, r3
 800bc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc22:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc26:	3301      	adds	r3, #1
 800bc28:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc32:	0c1b      	lsrs	r3, r3, #16
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bc3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc42:	3b01      	subs	r3, #1
 800bc44:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc48:	0e1b      	lsrs	r3, r3, #24
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bc50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc52:	3301      	adds	r3, #1
 800bc54:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800bc5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc5e:	3301      	adds	r3, #1
 800bc60:	643b      	str	r3, [r7, #64]	; 0x40
 800bc62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc64:	2b07      	cmp	r3, #7
 800bc66:	d9c8      	bls.n	800bbfa <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bc68:	f7fa f89a 	bl	8005da0 <HAL_GetTick>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d902      	bls.n	800bc7e <HAL_SD_ReadBlocks+0x1be>
 800bc78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d112      	bne.n	800bca4 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a56      	ldr	r2, [pc, #344]	; (800bddc <HAL_SD_ReadBlocks+0x31c>)
 800bc84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800bca0:	2303      	movs	r3, #3
 800bca2:	e097      	b.n	800bdd4 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcaa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d096      	beq.n	800bbe0 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68da      	ldr	r2, [r3, #12]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcc0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d022      	beq.n	800bd16 <HAL_SD_ReadBlocks+0x256>
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d91f      	bls.n	800bd16 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcda:	2b03      	cmp	r3, #3
 800bcdc:	d01b      	beq.n	800bd16 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4618      	mov	r0, r3
 800bce4:	f003 fd36 	bl	800f754 <SDMMC_CmdStopTransfer>
 800bce8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800bcea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d012      	beq.n	800bd16 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a39      	ldr	r2, [pc, #228]	; (800bddc <HAL_SD_ReadBlocks+0x31c>)
 800bcf6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e05e      	b.n	800bdd4 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1c:	f003 0308 	and.w	r3, r3, #8
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d012      	beq.n	800bd4a <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a2c      	ldr	r2, [pc, #176]	; (800bddc <HAL_SD_ReadBlocks+0x31c>)
 800bd2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd30:	f043 0208 	orr.w	r2, r3, #8
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bd46:	2301      	movs	r3, #1
 800bd48:	e044      	b.n	800bdd4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd50:	f003 0302 	and.w	r3, r3, #2
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d012      	beq.n	800bd7e <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a1f      	ldr	r2, [pc, #124]	; (800bddc <HAL_SD_ReadBlocks+0x31c>)
 800bd5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd64:	f043 0202 	orr.w	r2, r3, #2
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e02a      	b.n	800bdd4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd84:	f003 0320 	and.w	r3, r3, #32
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d012      	beq.n	800bdb2 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a12      	ldr	r2, [pc, #72]	; (800bddc <HAL_SD_ReadBlocks+0x31c>)
 800bd92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd98:	f043 0220 	orr.w	r2, r3, #32
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e010      	b.n	800bdd4 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a0a      	ldr	r2, [pc, #40]	; (800bde0 <HAL_SD_ReadBlocks+0x320>)
 800bdb8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e006      	b.n	800bdd4 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
  }
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3748      	adds	r7, #72	; 0x48
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	1fe00fff 	.word	0x1fe00fff
 800bde0:	18000f3a 	.word	0x18000f3a

0800bde4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b092      	sub	sp, #72	; 0x48
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bdf2:	f7f9 ffd5 	bl	8005da0 <HAL_GetTick>
 800bdf6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d107      	bne.n	800be16 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e174      	b.n	800c100 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b01      	cmp	r3, #1
 800be20:	f040 8167 	bne.w	800c0f2 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800be2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	441a      	add	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be34:	429a      	cmp	r2, r3
 800be36:	d907      	bls.n	800be48 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e15b      	b.n	800c100 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2203      	movs	r2, #3
 800be4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	2200      	movs	r2, #0
 800be56:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d002      	beq.n	800be66 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800be60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be62:	025b      	lsls	r3, r3, #9
 800be64:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800be66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be6a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	025b      	lsls	r3, r3, #9
 800be70:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800be72:	2390      	movs	r3, #144	; 0x90
 800be74:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800be76:	2300      	movs	r3, #0
 800be78:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800be7e:	2300      	movs	r3, #0
 800be80:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f107 0218 	add.w	r2, r7, #24
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f003 fb85 	bl	800f59c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68da      	ldr	r2, [r3, #12]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bea0:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d90a      	bls.n	800bebe <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2220      	movs	r2, #32
 800beac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800beb4:	4618      	mov	r0, r3
 800beb6:	f003 fc29 	bl	800f70c <SDMMC_CmdWriteMultiBlock>
 800beba:	6478      	str	r0, [r7, #68]	; 0x44
 800bebc:	e009      	b.n	800bed2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2210      	movs	r2, #16
 800bec2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800beca:	4618      	mov	r0, r3
 800becc:	f003 fbfb 	bl	800f6c6 <SDMMC_CmdWriteSingleBlock>
 800bed0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d012      	beq.n	800befe <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a8a      	ldr	r2, [pc, #552]	; (800c108 <HAL_SD_WriteBlocks+0x324>)
 800bede:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bee6:	431a      	orrs	r2, r3
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2200      	movs	r2, #0
 800bef8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e100      	b.n	800c100 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bf02:	e065      	b.n	800bfd0 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d040      	beq.n	800bf94 <HAL_SD_WriteBlocks+0x1b0>
 800bf12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d03d      	beq.n	800bf94 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800bf18:	2300      	movs	r3, #0
 800bf1a:	643b      	str	r3, [r7, #64]	; 0x40
 800bf1c:	e037      	b.n	800bf8e <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf26:	3301      	adds	r3, #1
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bf2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bf30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	021a      	lsls	r2, r3, #8
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bf3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf3e:	3301      	adds	r3, #1
 800bf40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bf42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf44:	3b01      	subs	r3, #1
 800bf46:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	041a      	lsls	r2, r3, #16
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bf54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf56:	3301      	adds	r3, #1
 800bf58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bf60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	061a      	lsls	r2, r3, #24
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bf6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6e:	3301      	adds	r3, #1
 800bf70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800bf72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf74:	3b01      	subs	r3, #1
 800bf76:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f107 0214 	add.w	r2, r7, #20
 800bf80:	4611      	mov	r1, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f003 fa8f 	bl	800f4a6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800bf88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	643b      	str	r3, [r7, #64]	; 0x40
 800bf8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf90:	2b07      	cmp	r3, #7
 800bf92:	d9c4      	bls.n	800bf1e <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bf94:	f7f9 ff04 	bl	8005da0 <HAL_GetTick>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d902      	bls.n	800bfaa <HAL_SD_WriteBlocks+0x1c6>
 800bfa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d112      	bne.n	800bfd0 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a56      	ldr	r2, [pc, #344]	; (800c108 <HAL_SD_WriteBlocks+0x324>)
 800bfb0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfb8:	431a      	orrs	r2, r3
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	e097      	b.n	800c100 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfd6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d092      	beq.n	800bf04 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfec:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d022      	beq.n	800c042 <HAL_SD_WriteBlocks+0x25e>
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d91f      	bls.n	800c042 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c006:	2b03      	cmp	r3, #3
 800c008:	d01b      	beq.n	800c042 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4618      	mov	r0, r3
 800c010:	f003 fba0 	bl	800f754 <SDMMC_CmdStopTransfer>
 800c014:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d012      	beq.n	800c042 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a39      	ldr	r2, [pc, #228]	; (800c108 <HAL_SD_WriteBlocks+0x324>)
 800c022:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c02a:	431a      	orrs	r2, r3
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2200      	movs	r2, #0
 800c03c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	e05e      	b.n	800c100 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c048:	f003 0308 	and.w	r3, r3, #8
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d012      	beq.n	800c076 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a2c      	ldr	r2, [pc, #176]	; (800c108 <HAL_SD_WriteBlocks+0x324>)
 800c056:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c05c:	f043 0208 	orr.w	r2, r3, #8
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2200      	movs	r2, #0
 800c070:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	e044      	b.n	800c100 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c07c:	f003 0302 	and.w	r3, r3, #2
 800c080:	2b00      	cmp	r3, #0
 800c082:	d012      	beq.n	800c0aa <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a1f      	ldr	r2, [pc, #124]	; (800c108 <HAL_SD_WriteBlocks+0x324>)
 800c08a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c090:	f043 0202 	orr.w	r2, r3, #2
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e02a      	b.n	800c100 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b0:	f003 0310 	and.w	r3, r3, #16
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d012      	beq.n	800c0de <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a12      	ldr	r2, [pc, #72]	; (800c108 <HAL_SD_WriteBlocks+0x324>)
 800c0be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c4:	f043 0210 	orr.w	r2, r3, #16
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e010      	b.n	800c100 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a0a      	ldr	r2, [pc, #40]	; (800c10c <HAL_SD_WriteBlocks+0x328>)
 800c0e4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e006      	b.n	800c100 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
  }
}
 800c100:	4618      	mov	r0, r3
 800c102:	3748      	adds	r7, #72	; 0x48
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	1fe00fff 	.word	0x1fe00fff
 800c10c:	18000f3a 	.word	0x18000f3a

0800c110 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c11e:	0f9b      	lsrs	r3, r3, #30
 800c120:	b2da      	uxtb	r2, r3
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c12a:	0e9b      	lsrs	r3, r3, #26
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	f003 030f 	and.w	r3, r3, #15
 800c132:	b2da      	uxtb	r2, r3
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c13c:	0e1b      	lsrs	r3, r3, #24
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	f003 0303 	and.w	r3, r3, #3
 800c144:	b2da      	uxtb	r2, r3
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c14e:	0c1b      	lsrs	r3, r3, #16
 800c150:	b2da      	uxtb	r2, r3
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c15a:	0a1b      	lsrs	r3, r3, #8
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c166:	b2da      	uxtb	r2, r3
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c170:	0d1b      	lsrs	r3, r3, #20
 800c172:	b29a      	uxth	r2, r3
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c17c:	0c1b      	lsrs	r3, r3, #16
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	f003 030f 	and.w	r3, r3, #15
 800c184:	b2da      	uxtb	r2, r3
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c18e:	0bdb      	lsrs	r3, r3, #15
 800c190:	b2db      	uxtb	r3, r3
 800c192:	f003 0301 	and.w	r3, r3, #1
 800c196:	b2da      	uxtb	r2, r3
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1a0:	0b9b      	lsrs	r3, r3, #14
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	f003 0301 	and.w	r3, r3, #1
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1b2:	0b5b      	lsrs	r3, r3, #13
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1c4:	0b1b      	lsrs	r3, r3, #12
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	f003 0301 	and.w	r3, r3, #1
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d163      	bne.n	800c2a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1e4:	009a      	lsls	r2, r3, #2
 800c1e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c1ea:	4013      	ands	r3, r2
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c1f0:	0f92      	lsrs	r2, r2, #30
 800c1f2:	431a      	orrs	r2, r3
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1fc:	0edb      	lsrs	r3, r3, #27
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	f003 0307 	and.w	r3, r3, #7
 800c204:	b2da      	uxtb	r2, r3
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c20e:	0e1b      	lsrs	r3, r3, #24
 800c210:	b2db      	uxtb	r3, r3
 800c212:	f003 0307 	and.w	r3, r3, #7
 800c216:	b2da      	uxtb	r2, r3
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c220:	0d5b      	lsrs	r3, r3, #21
 800c222:	b2db      	uxtb	r3, r3
 800c224:	f003 0307 	and.w	r3, r3, #7
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c232:	0c9b      	lsrs	r3, r3, #18
 800c234:	b2db      	uxtb	r3, r3
 800c236:	f003 0307 	and.w	r3, r3, #7
 800c23a:	b2da      	uxtb	r2, r3
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c244:	0bdb      	lsrs	r3, r3, #15
 800c246:	b2db      	uxtb	r3, r3
 800c248:	f003 0307 	and.w	r3, r3, #7
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	1c5a      	adds	r2, r3, #1
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	7e1b      	ldrb	r3, [r3, #24]
 800c260:	b2db      	uxtb	r3, r3
 800c262:	f003 0307 	and.w	r3, r3, #7
 800c266:	3302      	adds	r3, #2
 800c268:	2201      	movs	r2, #1
 800c26a:	fa02 f303 	lsl.w	r3, r2, r3
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c272:	fb03 f202 	mul.w	r2, r3, r2
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	7a1b      	ldrb	r3, [r3, #8]
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	f003 030f 	and.w	r3, r3, #15
 800c284:	2201      	movs	r2, #1
 800c286:	409a      	lsls	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c294:	0a52      	lsrs	r2, r2, #9
 800c296:	fb03 f202 	mul.w	r2, r3, r2
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2a4:	659a      	str	r2, [r3, #88]	; 0x58
 800c2a6:	e031      	b.n	800c30c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d11d      	bne.n	800c2ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2b4:	041b      	lsls	r3, r3, #16
 800c2b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2be:	0c1b      	lsrs	r3, r3, #16
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	029a      	lsls	r2, r3, #10
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2e0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	659a      	str	r2, [r3, #88]	; 0x58
 800c2ea:	e00f      	b.n	800c30c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a58      	ldr	r2, [pc, #352]	; (800c454 <HAL_SD_GetCardCSD+0x344>)
 800c2f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e09d      	b.n	800c448 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c310:	0b9b      	lsrs	r3, r3, #14
 800c312:	b2db      	uxtb	r3, r3
 800c314:	f003 0301 	and.w	r3, r3, #1
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c322:	09db      	lsrs	r3, r3, #7
 800c324:	b2db      	uxtb	r3, r3
 800c326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c334:	b2db      	uxtb	r3, r3
 800c336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c33a:	b2da      	uxtb	r2, r3
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c344:	0fdb      	lsrs	r3, r3, #31
 800c346:	b2da      	uxtb	r2, r3
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c350:	0f5b      	lsrs	r3, r3, #29
 800c352:	b2db      	uxtb	r3, r3
 800c354:	f003 0303 	and.w	r3, r3, #3
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c362:	0e9b      	lsrs	r3, r3, #26
 800c364:	b2db      	uxtb	r3, r3
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c374:	0d9b      	lsrs	r3, r3, #22
 800c376:	b2db      	uxtb	r3, r3
 800c378:	f003 030f 	and.w	r3, r3, #15
 800c37c:	b2da      	uxtb	r2, r3
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c386:	0d5b      	lsrs	r3, r3, #21
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	b2da      	uxtb	r2, r3
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3a2:	0c1b      	lsrs	r3, r3, #16
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b6:	0bdb      	lsrs	r3, r3, #15
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ca:	0b9b      	lsrs	r3, r3, #14
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	f003 0301 	and.w	r3, r3, #1
 800c3d2:	b2da      	uxtb	r2, r3
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3de:	0b5b      	lsrs	r3, r3, #13
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f2:	0b1b      	lsrs	r3, r3, #12
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c406:	0a9b      	lsrs	r3, r3, #10
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	f003 0303 	and.w	r3, r3, #3
 800c40e:	b2da      	uxtb	r2, r3
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c41a:	0a1b      	lsrs	r3, r3, #8
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	f003 0303 	and.w	r3, r3, #3
 800c422:	b2da      	uxtb	r2, r3
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c42e:	085b      	lsrs	r3, r3, #1
 800c430:	b2db      	uxtb	r3, r3
 800c432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c436:	b2da      	uxtb	r2, r3
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr
 800c454:	1fe00fff 	.word	0x1fe00fff

0800c458 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b094      	sub	sp, #80	; 0x50
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c462:	2300      	movs	r3, #0
 800c464:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c468:	f107 0308 	add.w	r3, r7, #8
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fbd4 	bl	800cc1c <SD_SendSDStatus>
 800c474:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d011      	beq.n	800c4a0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a4f      	ldr	r2, [pc, #316]	; (800c5c0 <HAL_SD_GetCardStatus+0x168>)
 800c482:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c48a:	431a      	orrs	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c49e:	e070      	b.n	800c582 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	099b      	lsrs	r3, r3, #6
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	f003 0303 	and.w	r3, r3, #3
 800c4aa:	b2da      	uxtb	r2, r3
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	095b      	lsrs	r3, r3, #5
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	0a1b      	lsrs	r3, r3, #8
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	0e1b      	lsrs	r3, r3, #24
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	061a      	lsls	r2, r3, #24
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	021b      	lsls	r3, r3, #8
 800c4e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4e6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	0a1b      	lsrs	r3, r3, #8
 800c4ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4f0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	0e1b      	lsrs	r3, r3, #24
 800c4f6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	b2da      	uxtb	r2, r3
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	0a1b      	lsrs	r3, r3, #8
 800c508:	b2da      	uxtb	r2, r3
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	0d1b      	lsrs	r3, r3, #20
 800c512:	b2db      	uxtb	r3, r3
 800c514:	f003 030f 	and.w	r3, r3, #15
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	0c1b      	lsrs	r3, r3, #16
 800c522:	b29b      	uxth	r3, r3
 800c524:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c528:	b29a      	uxth	r2, r3
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	b29b      	uxth	r3, r3
 800c532:	4313      	orrs	r3, r2
 800c534:	b29a      	uxth	r2, r3
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	0a9b      	lsrs	r3, r3, #10
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c544:	b2da      	uxtb	r2, r3
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	0a1b      	lsrs	r3, r3, #8
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	f003 0303 	and.w	r3, r3, #3
 800c554:	b2da      	uxtb	r2, r3
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	091b      	lsrs	r3, r3, #4
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	f003 030f 	and.w	r3, r3, #15
 800c564:	b2da      	uxtb	r2, r3
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	f003 030f 	and.w	r3, r3, #15
 800c572:	b2da      	uxtb	r2, r3
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	0e1b      	lsrs	r3, r3, #24
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c58a:	4618      	mov	r0, r3
 800c58c:	f003 f832 	bl	800f5f4 <SDMMC_CmdBlockLength>
 800c590:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00d      	beq.n	800c5b4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a08      	ldr	r2, [pc, #32]	; (800c5c0 <HAL_SD_GetCardStatus+0x168>)
 800c59e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800c5b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3750      	adds	r7, #80	; 0x50
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	1fe00fff 	.word	0x1fe00fff

0800c5c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c61c:	b5b0      	push	{r4, r5, r7, lr}
 800c61e:	b090      	sub	sp, #64	; 0x40
 800c620:	af04      	add	r7, sp, #16
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800c626:	2300      	movs	r3, #0
 800c628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2203      	movs	r2, #3
 800c630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c638:	2b03      	cmp	r3, #3
 800c63a:	d02e      	beq.n	800c69a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c642:	d106      	bne.n	800c652 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c648:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	639a      	str	r2, [r3, #56]	; 0x38
 800c650:	e029      	b.n	800c6a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c658:	d10a      	bne.n	800c670 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 fbd6 	bl	800ce0c <SD_WideBus_Enable>
 800c660:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	431a      	orrs	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	639a      	str	r2, [r3, #56]	; 0x38
 800c66e:	e01a      	b.n	800c6a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d10a      	bne.n	800c68c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fc13 	bl	800cea2 <SD_WideBus_Disable>
 800c67c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c684:	431a      	orrs	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	639a      	str	r2, [r3, #56]	; 0x38
 800c68a:	e00c      	b.n	800c6a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c690:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	639a      	str	r2, [r3, #56]	; 0x38
 800c698:	e005      	b.n	800c6a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d007      	beq.n	800c6be <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a60      	ldr	r2, [pc, #384]	; (800c834 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c6b4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c6bc:	e097      	b.n	800c7ee <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800c6be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c6c2:	f7fd feb9 	bl	800a438 <HAL_RCCEx_GetPeriphCLKFreq>
 800c6c6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f000 8086 	beq.w	800c7dc <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	695a      	ldr	r2, [r3, #20]
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ec:	4952      	ldr	r1, [pc, #328]	; (800c838 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c6ee:	fba1 1303 	umull	r1, r3, r1, r3
 800c6f2:	0e1b      	lsrs	r3, r3, #24
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d303      	bcc.n	800c700 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	695b      	ldr	r3, [r3, #20]
 800c6fc:	61fb      	str	r3, [r7, #28]
 800c6fe:	e05a      	b.n	800c7b6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c708:	d103      	bne.n	800c712 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	695b      	ldr	r3, [r3, #20]
 800c70e:	61fb      	str	r3, [r7, #28]
 800c710:	e051      	b.n	800c7b6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c71a:	d126      	bne.n	800c76a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	695b      	ldr	r3, [r3, #20]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10e      	bne.n	800c742 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	4a45      	ldr	r2, [pc, #276]	; (800c83c <HAL_SD_ConfigWideBusOperation+0x220>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d906      	bls.n	800c73a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	4a42      	ldr	r2, [pc, #264]	; (800c838 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c730:	fba2 2303 	umull	r2, r3, r2, r3
 800c734:	0e5b      	lsrs	r3, r3, #25
 800c736:	61fb      	str	r3, [r7, #28]
 800c738:	e03d      	b.n	800c7b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	695b      	ldr	r3, [r3, #20]
 800c73e:	61fb      	str	r3, [r7, #28]
 800c740:	e039      	b.n	800c7b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	005b      	lsls	r3, r3, #1
 800c748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c74e:	4a3b      	ldr	r2, [pc, #236]	; (800c83c <HAL_SD_ConfigWideBusOperation+0x220>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d906      	bls.n	800c762 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c756:	4a38      	ldr	r2, [pc, #224]	; (800c838 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c758:	fba2 2303 	umull	r2, r3, r2, r3
 800c75c:	0e5b      	lsrs	r3, r3, #25
 800c75e:	61fb      	str	r3, [r7, #28]
 800c760:	e029      	b.n	800c7b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	695b      	ldr	r3, [r3, #20]
 800c766:	61fb      	str	r3, [r7, #28]
 800c768:	e025      	b.n	800c7b6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10e      	bne.n	800c790 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c774:	4a32      	ldr	r2, [pc, #200]	; (800c840 <HAL_SD_ConfigWideBusOperation+0x224>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d906      	bls.n	800c788 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77c:	4a2e      	ldr	r2, [pc, #184]	; (800c838 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c77e:	fba2 2303 	umull	r2, r3, r2, r3
 800c782:	0e1b      	lsrs	r3, r3, #24
 800c784:	61fb      	str	r3, [r7, #28]
 800c786:	e016      	b.n	800c7b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	695b      	ldr	r3, [r3, #20]
 800c78c:	61fb      	str	r3, [r7, #28]
 800c78e:	e012      	b.n	800c7b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	005b      	lsls	r3, r3, #1
 800c796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c798:	fbb2 f3f3 	udiv	r3, r2, r3
 800c79c:	4a28      	ldr	r2, [pc, #160]	; (800c840 <HAL_SD_ConfigWideBusOperation+0x224>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d906      	bls.n	800c7b0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	4a24      	ldr	r2, [pc, #144]	; (800c838 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7aa:	0e1b      	lsrs	r3, r3, #24
 800c7ac:	61fb      	str	r3, [r7, #28]
 800c7ae:	e002      	b.n	800c7b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	695b      	ldr	r3, [r3, #20]
 800c7b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681d      	ldr	r5, [r3, #0]
 800c7c0:	466c      	mov	r4, sp
 800c7c2:	f107 0318 	add.w	r3, r7, #24
 800c7c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c7ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c7ce:	f107 030c 	add.w	r3, r7, #12
 800c7d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	f002 fe2f 	bl	800f438 <SDMMC_Init>
 800c7da:	e008      	b.n	800c7ee <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f002 fefc 	bl	800f5f4 <SDMMC_CmdBlockLength>
 800c7fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00c      	beq.n	800c81e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a0a      	ldr	r2, [pc, #40]	; (800c834 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c80a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	431a      	orrs	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c818:	2301      	movs	r3, #1
 800c81a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3730      	adds	r7, #48	; 0x30
 800c82e:	46bd      	mov	sp, r7
 800c830:	bdb0      	pop	{r4, r5, r7, pc}
 800c832:	bf00      	nop
 800c834:	1fe00fff 	.word	0x1fe00fff
 800c838:	55e63b89 	.word	0x55e63b89
 800c83c:	02faf080 	.word	0x02faf080
 800c840:	017d7840 	.word	0x017d7840

0800c844 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c850:	f107 030c 	add.w	r3, r7, #12
 800c854:	4619      	mov	r1, r3
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 fab0 	bl	800cdbc <SD_SendStatus>
 800c85c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d005      	beq.n	800c870 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	431a      	orrs	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	0a5b      	lsrs	r3, r3, #9
 800c874:	f003 030f 	and.w	r3, r3, #15
 800c878:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c87a:	693b      	ldr	r3, [r7, #16]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3718      	adds	r7, #24
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c884:	b5b0      	push	{r4, r5, r7, lr}
 800c886:	b090      	sub	sp, #64	; 0x40
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c88c:	2301      	movs	r3, #1
 800c88e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4618      	mov	r0, r3
 800c896:	f002 fe29 	bl	800f4ec <SDMMC_GetPowerState>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d102      	bne.n	800c8a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c8a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c8a4:	e0a9      	b.n	800c9fa <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d02e      	beq.n	800c90c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f003 f86e 	bl	800f994 <SDMMC_CmdSendCID>
 800c8b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d001      	beq.n	800c8c4 <SD_InitCard+0x40>
    {
      return errorstate;
 800c8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c2:	e09a      	b.n	800c9fa <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f002 fe53 	bl	800f576 <SDMMC_GetResponse>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2104      	movs	r1, #4
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f002 fe4a 	bl	800f576 <SDMMC_GetResponse>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2108      	movs	r1, #8
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f002 fe41 	bl	800f576 <SDMMC_GetResponse>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	210c      	movs	r1, #12
 800c900:	4618      	mov	r0, r3
 800c902:	f002 fe38 	bl	800f576 <SDMMC_GetResponse>
 800c906:	4602      	mov	r2, r0
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c910:	2b03      	cmp	r3, #3
 800c912:	d00d      	beq.n	800c930 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f107 020e 	add.w	r2, r7, #14
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f003 f877 	bl	800fa12 <SDMMC_CmdSetRelAdd>
 800c924:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d001      	beq.n	800c930 <SD_InitCard+0xac>
    {
      return errorstate;
 800c92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c92e:	e064      	b.n	800c9fa <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c934:	2b03      	cmp	r3, #3
 800c936:	d036      	beq.n	800c9a6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c938:	89fb      	ldrh	r3, [r7, #14]
 800c93a:	461a      	mov	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c948:	041b      	lsls	r3, r3, #16
 800c94a:	4619      	mov	r1, r3
 800c94c:	4610      	mov	r0, r2
 800c94e:	f003 f840 	bl	800f9d2 <SDMMC_CmdSendCSD>
 800c952:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c956:	2b00      	cmp	r3, #0
 800c958:	d001      	beq.n	800c95e <SD_InitCard+0xda>
    {
      return errorstate;
 800c95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c95c:	e04d      	b.n	800c9fa <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2100      	movs	r1, #0
 800c964:	4618      	mov	r0, r3
 800c966:	f002 fe06 	bl	800f576 <SDMMC_GetResponse>
 800c96a:	4602      	mov	r2, r0
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2104      	movs	r1, #4
 800c976:	4618      	mov	r0, r3
 800c978:	f002 fdfd 	bl	800f576 <SDMMC_GetResponse>
 800c97c:	4602      	mov	r2, r0
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2108      	movs	r1, #8
 800c988:	4618      	mov	r0, r3
 800c98a:	f002 fdf4 	bl	800f576 <SDMMC_GetResponse>
 800c98e:	4602      	mov	r2, r0
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	210c      	movs	r1, #12
 800c99a:	4618      	mov	r0, r3
 800c99c:	f002 fdeb 	bl	800f576 <SDMMC_GetResponse>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2104      	movs	r1, #4
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f002 fde2 	bl	800f576 <SDMMC_GetResponse>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	0d1a      	lsrs	r2, r3, #20
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c9ba:	f107 0310 	add.w	r3, r7, #16
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff fba5 	bl	800c110 <HAL_SD_GetCardCSD>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d002      	beq.n	800c9d2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c9cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c9d0:	e013      	b.n	800c9fa <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6819      	ldr	r1, [r3, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9da:	041b      	lsls	r3, r3, #16
 800c9dc:	2200      	movs	r2, #0
 800c9de:	461c      	mov	r4, r3
 800c9e0:	4615      	mov	r5, r2
 800c9e2:	4622      	mov	r2, r4
 800c9e4:	462b      	mov	r3, r5
 800c9e6:	4608      	mov	r0, r1
 800c9e8:	f002 feea 	bl	800f7c0 <SDMMC_CmdSelDesel>
 800c9ec:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <SD_InitCard+0x174>
  {
    return errorstate;
 800c9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9f6:	e000      	b.n	800c9fa <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3740      	adds	r7, #64	; 0x40
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ca04 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b088      	sub	sp, #32
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800ca10:	2300      	movs	r3, #0
 800ca12:	61fb      	str	r3, [r7, #28]
 800ca14:	2300      	movs	r3, #0
 800ca16:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800ca18:	f7f9 f9c2 	bl	8005da0 <HAL_GetTick>
 800ca1c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f002 fef0 	bl	800f808 <SDMMC_CmdGoIdleState>
 800ca28:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d001      	beq.n	800ca34 <SD_PowerON+0x30>
  {
    return errorstate;
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	e0ed      	b.n	800cc10 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f002 ff03 	bl	800f844 <SDMMC_CmdOperCond>
 800ca3e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00d      	beq.n	800ca62 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f002 fed9 	bl	800f808 <SDMMC_CmdGoIdleState>
 800ca56:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d004      	beq.n	800ca68 <SD_PowerON+0x64>
    {
      return errorstate;
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	e0d6      	b.n	800cc10 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2201      	movs	r2, #1
 800ca66:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d137      	bne.n	800cae0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2100      	movs	r1, #0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f002 ff04 	bl	800f884 <SDMMC_CmdAppCommand>
 800ca7c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d02d      	beq.n	800cae0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca88:	e0c2      	b.n	800cc10 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2100      	movs	r1, #0
 800ca90:	4618      	mov	r0, r3
 800ca92:	f002 fef7 	bl	800f884 <SDMMC_CmdAppCommand>
 800ca96:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d001      	beq.n	800caa2 <SD_PowerON+0x9e>
    {
      return errorstate;
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	e0b6      	b.n	800cc10 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	495c      	ldr	r1, [pc, #368]	; (800cc18 <SD_PowerON+0x214>)
 800caa8:	4618      	mov	r0, r3
 800caaa:	f002 ff0e 	bl	800f8ca <SDMMC_CmdAppOperCommand>
 800caae:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d002      	beq.n	800cabc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cab6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800caba:	e0a9      	b.n	800cc10 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2100      	movs	r1, #0
 800cac2:	4618      	mov	r0, r3
 800cac4:	f002 fd57 	bl	800f576 <SDMMC_GetResponse>
 800cac8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	0fdb      	lsrs	r3, r3, #31
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d101      	bne.n	800cad6 <SD_PowerON+0xd2>
 800cad2:	2301      	movs	r3, #1
 800cad4:	e000      	b.n	800cad8 <SD_PowerON+0xd4>
 800cad6:	2300      	movs	r3, #0
 800cad8:	61bb      	str	r3, [r7, #24]

    count++;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3301      	adds	r3, #1
 800cade:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d802      	bhi.n	800caf0 <SD_PowerON+0xec>
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d0cc      	beq.n	800ca8a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d902      	bls.n	800cb00 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cafa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cafe:	e087      	b.n	800cc10 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d07e      	beq.n	800cc08 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	699b      	ldr	r3, [r3, #24]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d17a      	bne.n	800cc0e <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d075      	beq.n	800cc0e <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb28:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f042 0208 	orr.w	r2, r2, #8
 800cb38:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f002 ffce 	bl	800fae0 <SDMMC_CmdVoltageSwitch>
 800cb44:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00c      	beq.n	800cb66 <SD_PowerON+0x162>
        {
          return errorstate;
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	e05f      	b.n	800cc10 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cb50:	f7f9 f926 	bl	8005da0 <HAL_GetTick>
 800cb54:	4602      	mov	r2, r0
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	1ad3      	subs	r3, r2, r3
 800cb5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb5e:	d102      	bne.n	800cb66 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800cb60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb64:	e054      	b.n	800cc10 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb74:	d1ec      	bne.n	800cb50 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800cb7e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb8e:	d002      	beq.n	800cb96 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800cb90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cb94:	e03c      	b.n	800cc10 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800cb96:	2001      	movs	r0, #1
 800cb98:	f000 fa9e 	bl	800d0d8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f042 0204 	orr.w	r2, r2, #4
 800cbaa:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800cbac:	e00a      	b.n	800cbc4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cbae:	f7f9 f8f7 	bl	8005da0 <HAL_GetTick>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbbc:	d102      	bne.n	800cbc4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800cbbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbc2:	e025      	b.n	800cc10 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbd2:	d1ec      	bne.n	800cbae <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cbdc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbec:	d102      	bne.n	800cbf4 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cbee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cbf2:	e00d      	b.n	800cc10 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2213      	movs	r2, #19
 800cbfa:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc04:	639a      	str	r2, [r3, #56]	; 0x38
 800cc06:	e002      	b.n	800cc0e <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3720      	adds	r7, #32
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	c1100000 	.word	0xc1100000

0800cc1c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b08c      	sub	sp, #48	; 0x30
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cc26:	f7f9 f8bb 	bl	8005da0 <HAL_GetTick>
 800cc2a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2100      	movs	r1, #0
 800cc36:	4618      	mov	r0, r3
 800cc38:	f002 fc9d 	bl	800f576 <SDMMC_GetResponse>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc46:	d102      	bne.n	800cc4e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cc48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc4c:	e0b0      	b.n	800cdb0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2140      	movs	r1, #64	; 0x40
 800cc54:	4618      	mov	r0, r3
 800cc56:	f002 fccd 	bl	800f5f4 <SDMMC_CmdBlockLength>
 800cc5a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc5c:	6a3b      	ldr	r3, [r7, #32]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d005      	beq.n	800cc6e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	e0a0      	b.n	800cdb0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc76:	041b      	lsls	r3, r3, #16
 800cc78:	4619      	mov	r1, r3
 800cc7a:	4610      	mov	r0, r2
 800cc7c:	f002 fe02 	bl	800f884 <SDMMC_CmdAppCommand>
 800cc80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc82:	6a3b      	ldr	r3, [r7, #32]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d005      	beq.n	800cc94 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800cc90:	6a3b      	ldr	r3, [r7, #32]
 800cc92:	e08d      	b.n	800cdb0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cc94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc98:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800cc9a:	2340      	movs	r3, #64	; 0x40
 800cc9c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800cc9e:	2360      	movs	r3, #96	; 0x60
 800cca0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cca2:	2302      	movs	r3, #2
 800cca4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f107 0208 	add.w	r2, r7, #8
 800ccb6:	4611      	mov	r1, r2
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f002 fc6f 	bl	800f59c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f002 feea 	bl	800fa9c <SDMMC_CmdStatusRegister>
 800ccc8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d02b      	beq.n	800cd28 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ccd8:	6a3b      	ldr	r3, [r7, #32]
 800ccda:	e069      	b.n	800cdb0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d013      	beq.n	800cd12 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800ccea:	2300      	movs	r3, #0
 800ccec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccee:	e00d      	b.n	800cd0c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f002 fbc9 	bl	800f48c <SDMMC_ReadFIFO>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfe:	601a      	str	r2, [r3, #0]
        pData++;
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	3304      	adds	r3, #4
 800cd04:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800cd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd08:	3301      	adds	r3, #1
 800cd0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	2b07      	cmp	r3, #7
 800cd10:	d9ee      	bls.n	800ccf0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cd12:	f7f9 f845 	bl	8005da0 <HAL_GetTick>
 800cd16:	4602      	mov	r2, r0
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd20:	d102      	bne.n	800cd28 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cd22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd26:	e043      	b.n	800cdb0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd2e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d0d2      	beq.n	800ccdc <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd3c:	f003 0308 	and.w	r3, r3, #8
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cd44:	2308      	movs	r3, #8
 800cd46:	e033      	b.n	800cdb0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd4e:	f003 0302 	and.w	r3, r3, #2
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d001      	beq.n	800cd5a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd56:	2302      	movs	r3, #2
 800cd58:	e02a      	b.n	800cdb0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd60:	f003 0320 	and.w	r3, r3, #32
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d017      	beq.n	800cd98 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800cd68:	2320      	movs	r3, #32
 800cd6a:	e021      	b.n	800cdb0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f002 fb8b 	bl	800f48c <SDMMC_ReadFIFO>
 800cd76:	4602      	mov	r2, r0
 800cd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7a:	601a      	str	r2, [r3, #0]
    pData++;
 800cd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7e:	3304      	adds	r3, #4
 800cd80:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cd82:	f7f9 f80d 	bl	8005da0 <HAL_GetTick>
 800cd86:	4602      	mov	r2, r0
 800cd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8a:	1ad3      	subs	r3, r2, r3
 800cd8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd90:	d102      	bne.n	800cd98 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cd92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd96:	e00b      	b.n	800cdb0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1e2      	bne.n	800cd6c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a03      	ldr	r2, [pc, #12]	; (800cdb8 <SD_SendSDStatus+0x19c>)
 800cdac:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3730      	adds	r7, #48	; 0x30
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	18000f3a 	.word	0x18000f3a

0800cdbc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d102      	bne.n	800cdd2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cdcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cdd0:	e018      	b.n	800ce04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdda:	041b      	lsls	r3, r3, #16
 800cddc:	4619      	mov	r1, r3
 800cdde:	4610      	mov	r0, r2
 800cde0:	f002 fe39 	bl	800fa56 <SDMMC_CmdSendStatus>
 800cde4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	e009      	b.n	800ce04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2100      	movs	r1, #0
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f002 fbbd 	bl	800f576 <SDMMC_GetResponse>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b086      	sub	sp, #24
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ce14:	2300      	movs	r3, #0
 800ce16:	60fb      	str	r3, [r7, #12]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2100      	movs	r1, #0
 800ce22:	4618      	mov	r0, r3
 800ce24:	f002 fba7 	bl	800f576 <SDMMC_GetResponse>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce32:	d102      	bne.n	800ce3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ce34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce38:	e02f      	b.n	800ce9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ce3a:	f107 030c 	add.w	r3, r7, #12
 800ce3e:	4619      	mov	r1, r3
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 f879 	bl	800cf38 <SD_FindSCR>
 800ce46:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d001      	beq.n	800ce52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	e023      	b.n	800ce9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d01c      	beq.n	800ce96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce64:	041b      	lsls	r3, r3, #16
 800ce66:	4619      	mov	r1, r3
 800ce68:	4610      	mov	r0, r2
 800ce6a:	f002 fd0b 	bl	800f884 <SDMMC_CmdAppCommand>
 800ce6e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d001      	beq.n	800ce7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	e00f      	b.n	800ce9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2102      	movs	r1, #2
 800ce80:	4618      	mov	r0, r3
 800ce82:	f002 fd42 	bl	800f90a <SDMMC_CmdBusWidth>
 800ce86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d001      	beq.n	800ce92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	e003      	b.n	800ce9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ce92:	2300      	movs	r3, #0
 800ce94:	e001      	b.n	800ce9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ce96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3718      	adds	r7, #24
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b086      	sub	sp, #24
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ceaa:	2300      	movs	r3, #0
 800ceac:	60fb      	str	r3, [r7, #12]
 800ceae:	2300      	movs	r3, #0
 800ceb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2100      	movs	r1, #0
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f002 fb5c 	bl	800f576 <SDMMC_GetResponse>
 800cebe:	4603      	mov	r3, r0
 800cec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cec8:	d102      	bne.n	800ced0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ceca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cece:	e02f      	b.n	800cf30 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ced0:	f107 030c 	add.w	r3, r7, #12
 800ced4:	4619      	mov	r1, r3
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 f82e 	bl	800cf38 <SD_FindSCR>
 800cedc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d001      	beq.n	800cee8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	e023      	b.n	800cf30 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d01c      	beq.n	800cf2c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cefa:	041b      	lsls	r3, r3, #16
 800cefc:	4619      	mov	r1, r3
 800cefe:	4610      	mov	r0, r2
 800cf00:	f002 fcc0 	bl	800f884 <SDMMC_CmdAppCommand>
 800cf04:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d001      	beq.n	800cf10 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	e00f      	b.n	800cf30 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2100      	movs	r1, #0
 800cf16:	4618      	mov	r0, r3
 800cf18:	f002 fcf7 	bl	800f90a <SDMMC_CmdBusWidth>
 800cf1c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	e003      	b.n	800cf30 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	e001      	b.n	800cf30 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cf2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3718      	adds	r7, #24
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b08e      	sub	sp, #56	; 0x38
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cf42:	f7f8 ff2d 	bl	8005da0 <HAL_GetTick>
 800cf46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	60bb      	str	r3, [r7, #8]
 800cf50:	2300      	movs	r3, #0
 800cf52:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2108      	movs	r1, #8
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f002 fb48 	bl	800f5f4 <SDMMC_CmdBlockLength>
 800cf64:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <SD_FindSCR+0x38>
  {
    return errorstate;
 800cf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6e:	e0ad      	b.n	800d0cc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf78:	041b      	lsls	r3, r3, #16
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	f002 fc81 	bl	800f884 <SDMMC_CmdAppCommand>
 800cf82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <SD_FindSCR+0x56>
  {
    return errorstate;
 800cf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8c:	e09e      	b.n	800d0cc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf92:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cf94:	2308      	movs	r3, #8
 800cf96:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cf98:	2330      	movs	r3, #48	; 0x30
 800cf9a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cf9c:	2302      	movs	r3, #2
 800cf9e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f107 0210 	add.w	r2, r7, #16
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f002 faf2 	bl	800f59c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f002 fcc7 	bl	800f950 <SDMMC_CmdSendSCR>
 800cfc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d027      	beq.n	800d01a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfcc:	e07e      	b.n	800d0cc <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d113      	bne.n	800d004 <SD_FindSCR+0xcc>
 800cfdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d110      	bne.n	800d004 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f002 fa50 	bl	800f48c <SDMMC_ReadFIFO>
 800cfec:	4603      	mov	r3, r0
 800cfee:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4618      	mov	r0, r3
 800cff6:	f002 fa49 	bl	800f48c <SDMMC_ReadFIFO>
 800cffa:	4603      	mov	r3, r0
 800cffc:	60fb      	str	r3, [r7, #12]
      index++;
 800cffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d000:	3301      	adds	r3, #1
 800d002:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d004:	f7f8 fecc 	bl	8005da0 <HAL_GetTick>
 800d008:	4602      	mov	r2, r0
 800d00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d012:	d102      	bne.n	800d01a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d014:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d018:	e058      	b.n	800d0cc <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d020:	f240 532a 	movw	r3, #1322	; 0x52a
 800d024:	4013      	ands	r3, r2
 800d026:	2b00      	cmp	r3, #0
 800d028:	d0d1      	beq.n	800cfce <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d030:	f003 0308 	and.w	r3, r3, #8
 800d034:	2b00      	cmp	r3, #0
 800d036:	d005      	beq.n	800d044 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2208      	movs	r2, #8
 800d03e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d040:	2308      	movs	r3, #8
 800d042:	e043      	b.n	800d0cc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04a:	f003 0302 	and.w	r3, r3, #2
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d005      	beq.n	800d05e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2202      	movs	r2, #2
 800d058:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d05a:	2302      	movs	r3, #2
 800d05c:	e036      	b.n	800d0cc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d064:	f003 0320 	and.w	r3, r3, #32
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d005      	beq.n	800d078 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2220      	movs	r2, #32
 800d072:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d074:	2320      	movs	r3, #32
 800d076:	e029      	b.n	800d0cc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a15      	ldr	r2, [pc, #84]	; (800d0d4 <SD_FindSCR+0x19c>)
 800d07e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	061a      	lsls	r2, r3, #24
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	021b      	lsls	r3, r3, #8
 800d088:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d08c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	0a1b      	lsrs	r3, r3, #8
 800d092:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d096:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	0e1b      	lsrs	r3, r3, #24
 800d09c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a0:	601a      	str	r2, [r3, #0]
    scr++;
 800d0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	061a      	lsls	r2, r3, #24
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	021b      	lsls	r3, r3, #8
 800d0b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d0b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	0a1b      	lsrs	r3, r3, #8
 800d0ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d0be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	0e1b      	lsrs	r3, r3, #24
 800d0c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3738      	adds	r7, #56	; 0x38
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	18000f3a 	.word	0x18000f3a

0800d0d8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	4603      	mov	r3, r0
 800d0e0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800d0e2:	bf00      	nop
 800d0e4:	370c      	adds	r7, #12
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr

0800d0ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b084      	sub	sp, #16
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d101      	bne.n	800d100 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e095      	b.n	800d22c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d104:	2b00      	cmp	r3, #0
 800d106:	d108      	bne.n	800d11a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d110:	d009      	beq.n	800d126 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	61da      	str	r2, [r3, #28]
 800d118:	e005      	b.n	800d126 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d132:	b2db      	uxtb	r3, r3
 800d134:	2b00      	cmp	r3, #0
 800d136:	d106      	bne.n	800d146 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f7f6 ff2b 	bl	8003f9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2202      	movs	r2, #2
 800d14a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d15c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d166:	d902      	bls.n	800d16e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d168:	2300      	movs	r3, #0
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	e002      	b.n	800d174 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d16e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d172:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d17c:	d007      	beq.n	800d18e <HAL_SPI_Init+0xa0>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d186:	d002      	beq.n	800d18e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d19e:	431a      	orrs	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	f003 0302 	and.w	r3, r3, #2
 800d1a8:	431a      	orrs	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	f003 0301 	and.w	r3, r3, #1
 800d1b2:	431a      	orrs	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1bc:	431a      	orrs	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	69db      	ldr	r3, [r3, #28]
 800d1c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d1c6:	431a      	orrs	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a1b      	ldr	r3, [r3, #32]
 800d1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1d0:	ea42 0103 	orr.w	r1, r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	430a      	orrs	r2, r1
 800d1e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	699b      	ldr	r3, [r3, #24]
 800d1e8:	0c1b      	lsrs	r3, r3, #16
 800d1ea:	f003 0204 	and.w	r2, r3, #4
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f2:	f003 0310 	and.w	r3, r3, #16
 800d1f6:	431a      	orrs	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1fc:	f003 0308 	and.w	r3, r3, #8
 800d200:	431a      	orrs	r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d20a:	ea42 0103 	orr.w	r1, r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	430a      	orrs	r2, r1
 800d21a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d101      	bne.n	800d246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	e049      	b.n	800d2da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f7f6 fee0 	bl	8004020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2202      	movs	r2, #2
 800d264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	3304      	adds	r3, #4
 800d270:	4619      	mov	r1, r3
 800d272:	4610      	mov	r0, r2
 800d274:	f000 fad2 	bl	800d81c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2201      	movs	r2, #1
 800d294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
	...

0800d2e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d001      	beq.n	800d2fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e04f      	b.n	800d39c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2202      	movs	r2, #2
 800d300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	68da      	ldr	r2, [r3, #12]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f042 0201 	orr.w	r2, r2, #1
 800d312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a23      	ldr	r2, [pc, #140]	; (800d3a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d01d      	beq.n	800d35a <HAL_TIM_Base_Start_IT+0x76>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d326:	d018      	beq.n	800d35a <HAL_TIM_Base_Start_IT+0x76>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a1f      	ldr	r2, [pc, #124]	; (800d3ac <HAL_TIM_Base_Start_IT+0xc8>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d013      	beq.n	800d35a <HAL_TIM_Base_Start_IT+0x76>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a1e      	ldr	r2, [pc, #120]	; (800d3b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d00e      	beq.n	800d35a <HAL_TIM_Base_Start_IT+0x76>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a1c      	ldr	r2, [pc, #112]	; (800d3b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d009      	beq.n	800d35a <HAL_TIM_Base_Start_IT+0x76>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a1b      	ldr	r2, [pc, #108]	; (800d3b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d004      	beq.n	800d35a <HAL_TIM_Base_Start_IT+0x76>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a19      	ldr	r2, [pc, #100]	; (800d3bc <HAL_TIM_Base_Start_IT+0xd8>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d115      	bne.n	800d386 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	689a      	ldr	r2, [r3, #8]
 800d360:	4b17      	ldr	r3, [pc, #92]	; (800d3c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800d362:	4013      	ands	r3, r2
 800d364:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2b06      	cmp	r3, #6
 800d36a:	d015      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0xb4>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d372:	d011      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f042 0201 	orr.w	r2, r2, #1
 800d382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d384:	e008      	b.n	800d398 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f042 0201 	orr.w	r2, r2, #1
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	e000      	b.n	800d39a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d398:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d39a:	2300      	movs	r3, #0
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3714      	adds	r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr
 800d3a8:	40012c00 	.word	0x40012c00
 800d3ac:	40000400 	.word	0x40000400
 800d3b0:	40000800 	.word	0x40000800
 800d3b4:	40000c00 	.word	0x40000c00
 800d3b8:	40013400 	.word	0x40013400
 800d3bc:	40014000 	.word	0x40014000
 800d3c0:	00010007 	.word	0x00010007

0800d3c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d101      	bne.n	800d3d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	e049      	b.n	800d46a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d106      	bne.n	800d3f0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 f841 	bl	800d472 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2202      	movs	r2, #2
 800d3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	3304      	adds	r3, #4
 800d400:	4619      	mov	r1, r3
 800d402:	4610      	mov	r0, r2
 800d404:	f000 fa0a 	bl	800d81c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2201      	movs	r2, #1
 800d41c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2201      	movs	r2, #1
 800d42c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2201      	movs	r2, #1
 800d43c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2201      	movs	r2, #1
 800d44c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2201      	movs	r2, #1
 800d454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2201      	movs	r2, #1
 800d45c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3708      	adds	r7, #8
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800d472:	b480      	push	{r7}
 800d474:	b083      	sub	sp, #12
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800d47a:	bf00      	nop
 800d47c:	370c      	adds	r7, #12
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b082      	sub	sp, #8
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	691b      	ldr	r3, [r3, #16]
 800d494:	f003 0302 	and.w	r3, r3, #2
 800d498:	2b02      	cmp	r3, #2
 800d49a:	d122      	bne.n	800d4e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	f003 0302 	and.w	r3, r3, #2
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d11b      	bne.n	800d4e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f06f 0202 	mvn.w	r2, #2
 800d4b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	699b      	ldr	r3, [r3, #24]
 800d4c0:	f003 0303 	and.w	r3, r3, #3
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d003      	beq.n	800d4d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 f989 	bl	800d7e0 <HAL_TIM_IC_CaptureCallback>
 800d4ce:	e005      	b.n	800d4dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 f97b 	bl	800d7cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 f98c 	bl	800d7f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	f003 0304 	and.w	r3, r3, #4
 800d4ec:	2b04      	cmp	r3, #4
 800d4ee:	d122      	bne.n	800d536 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	f003 0304 	and.w	r3, r3, #4
 800d4fa:	2b04      	cmp	r3, #4
 800d4fc:	d11b      	bne.n	800d536 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f06f 0204 	mvn.w	r2, #4
 800d506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2202      	movs	r2, #2
 800d50c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	699b      	ldr	r3, [r3, #24]
 800d514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d003      	beq.n	800d524 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 f95f 	bl	800d7e0 <HAL_TIM_IC_CaptureCallback>
 800d522:	e005      	b.n	800d530 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 f951 	bl	800d7cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 f962 	bl	800d7f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	f003 0308 	and.w	r3, r3, #8
 800d540:	2b08      	cmp	r3, #8
 800d542:	d122      	bne.n	800d58a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	f003 0308 	and.w	r3, r3, #8
 800d54e:	2b08      	cmp	r3, #8
 800d550:	d11b      	bne.n	800d58a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f06f 0208 	mvn.w	r2, #8
 800d55a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2204      	movs	r2, #4
 800d560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	69db      	ldr	r3, [r3, #28]
 800d568:	f003 0303 	and.w	r3, r3, #3
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d003      	beq.n	800d578 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 f935 	bl	800d7e0 <HAL_TIM_IC_CaptureCallback>
 800d576:	e005      	b.n	800d584 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 f927 	bl	800d7cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f938 	bl	800d7f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	691b      	ldr	r3, [r3, #16]
 800d590:	f003 0310 	and.w	r3, r3, #16
 800d594:	2b10      	cmp	r3, #16
 800d596:	d122      	bne.n	800d5de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	f003 0310 	and.w	r3, r3, #16
 800d5a2:	2b10      	cmp	r3, #16
 800d5a4:	d11b      	bne.n	800d5de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f06f 0210 	mvn.w	r2, #16
 800d5ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2208      	movs	r2, #8
 800d5b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	69db      	ldr	r3, [r3, #28]
 800d5bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d003      	beq.n	800d5cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f90b 	bl	800d7e0 <HAL_TIM_IC_CaptureCallback>
 800d5ca:	e005      	b.n	800d5d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f8fd 	bl	800d7cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 f90e 	bl	800d7f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	f003 0301 	and.w	r3, r3, #1
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d10e      	bne.n	800d60a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	f003 0301 	and.w	r3, r3, #1
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d107      	bne.n	800d60a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f06f 0201 	mvn.w	r2, #1
 800d602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 f8d7 	bl	800d7b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	691b      	ldr	r3, [r3, #16]
 800d610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d614:	2b80      	cmp	r3, #128	; 0x80
 800d616:	d10e      	bne.n	800d636 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d622:	2b80      	cmp	r3, #128	; 0x80
 800d624:	d107      	bne.n	800d636 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d62e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 fceb 	bl	800e00c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d644:	d10e      	bne.n	800d664 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d650:	2b80      	cmp	r3, #128	; 0x80
 800d652:	d107      	bne.n	800d664 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d65c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 fcde 	bl	800e020 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	691b      	ldr	r3, [r3, #16]
 800d66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d66e:	2b40      	cmp	r3, #64	; 0x40
 800d670:	d10e      	bne.n	800d690 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d67c:	2b40      	cmp	r3, #64	; 0x40
 800d67e:	d107      	bne.n	800d690 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 f8bc 	bl	800d808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	f003 0320 	and.w	r3, r3, #32
 800d69a:	2b20      	cmp	r3, #32
 800d69c:	d10e      	bne.n	800d6bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	f003 0320 	and.w	r3, r3, #32
 800d6a8:	2b20      	cmp	r3, #32
 800d6aa:	d107      	bne.n	800d6bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f06f 0220 	mvn.w	r2, #32
 800d6b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fc9e 	bl	800dff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d6bc:	bf00      	nop
 800d6be:	3708      	adds	r7, #8
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b086      	sub	sp, #24
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d101      	bne.n	800d6e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800d6de:	2302      	movs	r3, #2
 800d6e0:	e066      	b.n	800d7b0 <HAL_TIM_OC_ConfigChannel+0xec>
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b14      	cmp	r3, #20
 800d6ee:	d857      	bhi.n	800d7a0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800d6f0:	a201      	add	r2, pc, #4	; (adr r2, 800d6f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800d6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f6:	bf00      	nop
 800d6f8:	0800d74d 	.word	0x0800d74d
 800d6fc:	0800d7a1 	.word	0x0800d7a1
 800d700:	0800d7a1 	.word	0x0800d7a1
 800d704:	0800d7a1 	.word	0x0800d7a1
 800d708:	0800d75b 	.word	0x0800d75b
 800d70c:	0800d7a1 	.word	0x0800d7a1
 800d710:	0800d7a1 	.word	0x0800d7a1
 800d714:	0800d7a1 	.word	0x0800d7a1
 800d718:	0800d769 	.word	0x0800d769
 800d71c:	0800d7a1 	.word	0x0800d7a1
 800d720:	0800d7a1 	.word	0x0800d7a1
 800d724:	0800d7a1 	.word	0x0800d7a1
 800d728:	0800d777 	.word	0x0800d777
 800d72c:	0800d7a1 	.word	0x0800d7a1
 800d730:	0800d7a1 	.word	0x0800d7a1
 800d734:	0800d7a1 	.word	0x0800d7a1
 800d738:	0800d785 	.word	0x0800d785
 800d73c:	0800d7a1 	.word	0x0800d7a1
 800d740:	0800d7a1 	.word	0x0800d7a1
 800d744:	0800d7a1 	.word	0x0800d7a1
 800d748:	0800d793 	.word	0x0800d793
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	68b9      	ldr	r1, [r7, #8]
 800d752:	4618      	mov	r0, r3
 800d754:	f000 f8fc 	bl	800d950 <TIM_OC1_SetConfig>
      break;
 800d758:	e025      	b.n	800d7a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	68b9      	ldr	r1, [r7, #8]
 800d760:	4618      	mov	r0, r3
 800d762:	f000 f985 	bl	800da70 <TIM_OC2_SetConfig>
      break;
 800d766:	e01e      	b.n	800d7a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68b9      	ldr	r1, [r7, #8]
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 fa08 	bl	800db84 <TIM_OC3_SetConfig>
      break;
 800d774:	e017      	b.n	800d7a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	68b9      	ldr	r1, [r7, #8]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f000 fa89 	bl	800dc94 <TIM_OC4_SetConfig>
      break;
 800d782:	e010      	b.n	800d7a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68b9      	ldr	r1, [r7, #8]
 800d78a:	4618      	mov	r0, r3
 800d78c:	f000 faec 	bl	800dd68 <TIM_OC5_SetConfig>
      break;
 800d790:	e009      	b.n	800d7a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68b9      	ldr	r1, [r7, #8]
 800d798:	4618      	mov	r0, r3
 800d79a:	f000 fb49 	bl	800de30 <TIM_OC6_SetConfig>
      break;
 800d79e:	e002      	b.n	800d7a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	75fb      	strb	r3, [r7, #23]
      break;
 800d7a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3718      	adds	r7, #24
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d7c0:	bf00      	nop
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d7d4:	bf00      	nop
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d7e8:	bf00      	nop
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b085      	sub	sp, #20
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4a40      	ldr	r2, [pc, #256]	; (800d930 <TIM_Base_SetConfig+0x114>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d013      	beq.n	800d85c <TIM_Base_SetConfig+0x40>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d83a:	d00f      	beq.n	800d85c <TIM_Base_SetConfig+0x40>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	4a3d      	ldr	r2, [pc, #244]	; (800d934 <TIM_Base_SetConfig+0x118>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d00b      	beq.n	800d85c <TIM_Base_SetConfig+0x40>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	4a3c      	ldr	r2, [pc, #240]	; (800d938 <TIM_Base_SetConfig+0x11c>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d007      	beq.n	800d85c <TIM_Base_SetConfig+0x40>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4a3b      	ldr	r2, [pc, #236]	; (800d93c <TIM_Base_SetConfig+0x120>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d003      	beq.n	800d85c <TIM_Base_SetConfig+0x40>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a3a      	ldr	r2, [pc, #232]	; (800d940 <TIM_Base_SetConfig+0x124>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d108      	bne.n	800d86e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	4313      	orrs	r3, r2
 800d86c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4a2f      	ldr	r2, [pc, #188]	; (800d930 <TIM_Base_SetConfig+0x114>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d01f      	beq.n	800d8b6 <TIM_Base_SetConfig+0x9a>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d87c:	d01b      	beq.n	800d8b6 <TIM_Base_SetConfig+0x9a>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	4a2c      	ldr	r2, [pc, #176]	; (800d934 <TIM_Base_SetConfig+0x118>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d017      	beq.n	800d8b6 <TIM_Base_SetConfig+0x9a>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4a2b      	ldr	r2, [pc, #172]	; (800d938 <TIM_Base_SetConfig+0x11c>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d013      	beq.n	800d8b6 <TIM_Base_SetConfig+0x9a>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4a2a      	ldr	r2, [pc, #168]	; (800d93c <TIM_Base_SetConfig+0x120>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d00f      	beq.n	800d8b6 <TIM_Base_SetConfig+0x9a>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4a29      	ldr	r2, [pc, #164]	; (800d940 <TIM_Base_SetConfig+0x124>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d00b      	beq.n	800d8b6 <TIM_Base_SetConfig+0x9a>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4a28      	ldr	r2, [pc, #160]	; (800d944 <TIM_Base_SetConfig+0x128>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d007      	beq.n	800d8b6 <TIM_Base_SetConfig+0x9a>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4a27      	ldr	r2, [pc, #156]	; (800d948 <TIM_Base_SetConfig+0x12c>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d003      	beq.n	800d8b6 <TIM_Base_SetConfig+0x9a>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	4a26      	ldr	r2, [pc, #152]	; (800d94c <TIM_Base_SetConfig+0x130>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d108      	bne.n	800d8c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	695b      	ldr	r3, [r3, #20]
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	689a      	ldr	r2, [r3, #8]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4a10      	ldr	r2, [pc, #64]	; (800d930 <TIM_Base_SetConfig+0x114>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d00f      	beq.n	800d914 <TIM_Base_SetConfig+0xf8>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	4a12      	ldr	r2, [pc, #72]	; (800d940 <TIM_Base_SetConfig+0x124>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d00b      	beq.n	800d914 <TIM_Base_SetConfig+0xf8>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	4a11      	ldr	r2, [pc, #68]	; (800d944 <TIM_Base_SetConfig+0x128>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d007      	beq.n	800d914 <TIM_Base_SetConfig+0xf8>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	4a10      	ldr	r2, [pc, #64]	; (800d948 <TIM_Base_SetConfig+0x12c>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d003      	beq.n	800d914 <TIM_Base_SetConfig+0xf8>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4a0f      	ldr	r2, [pc, #60]	; (800d94c <TIM_Base_SetConfig+0x130>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d103      	bne.n	800d91c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	691a      	ldr	r2, [r3, #16]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	615a      	str	r2, [r3, #20]
}
 800d922:	bf00      	nop
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	40012c00 	.word	0x40012c00
 800d934:	40000400 	.word	0x40000400
 800d938:	40000800 	.word	0x40000800
 800d93c:	40000c00 	.word	0x40000c00
 800d940:	40013400 	.word	0x40013400
 800d944:	40014000 	.word	0x40014000
 800d948:	40014400 	.word	0x40014400
 800d94c:	40014800 	.word	0x40014800

0800d950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d950:	b480      	push	{r7}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	f023 0201 	bic.w	r2, r3, #1
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6a1b      	ldr	r3, [r3, #32]
 800d96a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d97e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f023 0303 	bic.w	r3, r3, #3
 800d98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	4313      	orrs	r3, r2
 800d994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f023 0302 	bic.w	r3, r3, #2
 800d99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a2c      	ldr	r2, [pc, #176]	; (800da5c <TIM_OC1_SetConfig+0x10c>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d00f      	beq.n	800d9d0 <TIM_OC1_SetConfig+0x80>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a2b      	ldr	r2, [pc, #172]	; (800da60 <TIM_OC1_SetConfig+0x110>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00b      	beq.n	800d9d0 <TIM_OC1_SetConfig+0x80>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a2a      	ldr	r2, [pc, #168]	; (800da64 <TIM_OC1_SetConfig+0x114>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d007      	beq.n	800d9d0 <TIM_OC1_SetConfig+0x80>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a29      	ldr	r2, [pc, #164]	; (800da68 <TIM_OC1_SetConfig+0x118>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d003      	beq.n	800d9d0 <TIM_OC1_SetConfig+0x80>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a28      	ldr	r2, [pc, #160]	; (800da6c <TIM_OC1_SetConfig+0x11c>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d10c      	bne.n	800d9ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	f023 0308 	bic.w	r3, r3, #8
 800d9d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	697a      	ldr	r2, [r7, #20]
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f023 0304 	bic.w	r3, r3, #4
 800d9e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4a1b      	ldr	r2, [pc, #108]	; (800da5c <TIM_OC1_SetConfig+0x10c>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d00f      	beq.n	800da12 <TIM_OC1_SetConfig+0xc2>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4a1a      	ldr	r2, [pc, #104]	; (800da60 <TIM_OC1_SetConfig+0x110>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d00b      	beq.n	800da12 <TIM_OC1_SetConfig+0xc2>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4a19      	ldr	r2, [pc, #100]	; (800da64 <TIM_OC1_SetConfig+0x114>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d007      	beq.n	800da12 <TIM_OC1_SetConfig+0xc2>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	4a18      	ldr	r2, [pc, #96]	; (800da68 <TIM_OC1_SetConfig+0x118>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d003      	beq.n	800da12 <TIM_OC1_SetConfig+0xc2>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4a17      	ldr	r2, [pc, #92]	; (800da6c <TIM_OC1_SetConfig+0x11c>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d111      	bne.n	800da36 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	695b      	ldr	r3, [r3, #20]
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	4313      	orrs	r3, r2
 800da2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	699b      	ldr	r3, [r3, #24]
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	4313      	orrs	r3, r2
 800da34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	693a      	ldr	r2, [r7, #16]
 800da3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	685a      	ldr	r2, [r3, #4]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	697a      	ldr	r2, [r7, #20]
 800da4e:	621a      	str	r2, [r3, #32]
}
 800da50:	bf00      	nop
 800da52:	371c      	adds	r7, #28
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr
 800da5c:	40012c00 	.word	0x40012c00
 800da60:	40013400 	.word	0x40013400
 800da64:	40014000 	.word	0x40014000
 800da68:	40014400 	.word	0x40014400
 800da6c:	40014800 	.word	0x40014800

0800da70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da70:	b480      	push	{r7}
 800da72:	b087      	sub	sp, #28
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6a1b      	ldr	r3, [r3, #32]
 800da7e:	f023 0210 	bic.w	r2, r3, #16
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a1b      	ldr	r3, [r3, #32]
 800da8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	699b      	ldr	r3, [r3, #24]
 800da96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800da9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800daa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800daaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	021b      	lsls	r3, r3, #8
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	4313      	orrs	r3, r2
 800dab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	f023 0320 	bic.w	r3, r3, #32
 800dabe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	011b      	lsls	r3, r3, #4
 800dac6:	697a      	ldr	r2, [r7, #20]
 800dac8:	4313      	orrs	r3, r2
 800daca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4a28      	ldr	r2, [pc, #160]	; (800db70 <TIM_OC2_SetConfig+0x100>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d003      	beq.n	800dadc <TIM_OC2_SetConfig+0x6c>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a27      	ldr	r2, [pc, #156]	; (800db74 <TIM_OC2_SetConfig+0x104>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d10d      	bne.n	800daf8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	011b      	lsls	r3, r3, #4
 800daea:	697a      	ldr	r2, [r7, #20]
 800daec:	4313      	orrs	r3, r2
 800daee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a1d      	ldr	r2, [pc, #116]	; (800db70 <TIM_OC2_SetConfig+0x100>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d00f      	beq.n	800db20 <TIM_OC2_SetConfig+0xb0>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a1c      	ldr	r2, [pc, #112]	; (800db74 <TIM_OC2_SetConfig+0x104>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d00b      	beq.n	800db20 <TIM_OC2_SetConfig+0xb0>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4a1b      	ldr	r2, [pc, #108]	; (800db78 <TIM_OC2_SetConfig+0x108>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d007      	beq.n	800db20 <TIM_OC2_SetConfig+0xb0>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	4a1a      	ldr	r2, [pc, #104]	; (800db7c <TIM_OC2_SetConfig+0x10c>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d003      	beq.n	800db20 <TIM_OC2_SetConfig+0xb0>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4a19      	ldr	r2, [pc, #100]	; (800db80 <TIM_OC2_SetConfig+0x110>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d113      	bne.n	800db48 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	695b      	ldr	r3, [r3, #20]
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	693a      	ldr	r2, [r7, #16]
 800db38:	4313      	orrs	r3, r2
 800db3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	699b      	ldr	r3, [r3, #24]
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	693a      	ldr	r2, [r7, #16]
 800db44:	4313      	orrs	r3, r2
 800db46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	693a      	ldr	r2, [r7, #16]
 800db4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	685a      	ldr	r2, [r3, #4]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	697a      	ldr	r2, [r7, #20]
 800db60:	621a      	str	r2, [r3, #32]
}
 800db62:	bf00      	nop
 800db64:	371c      	adds	r7, #28
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	40012c00 	.word	0x40012c00
 800db74:	40013400 	.word	0x40013400
 800db78:	40014000 	.word	0x40014000
 800db7c:	40014400 	.word	0x40014400
 800db80:	40014800 	.word	0x40014800

0800db84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db84:	b480      	push	{r7}
 800db86:	b087      	sub	sp, #28
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a1b      	ldr	r3, [r3, #32]
 800db92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6a1b      	ldr	r3, [r3, #32]
 800db9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	69db      	ldr	r3, [r3, #28]
 800dbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dbb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f023 0303 	bic.w	r3, r3, #3
 800dbbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dbd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	689b      	ldr	r3, [r3, #8]
 800dbd6:	021b      	lsls	r3, r3, #8
 800dbd8:	697a      	ldr	r2, [r7, #20]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	4a27      	ldr	r2, [pc, #156]	; (800dc80 <TIM_OC3_SetConfig+0xfc>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d003      	beq.n	800dbee <TIM_OC3_SetConfig+0x6a>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	4a26      	ldr	r2, [pc, #152]	; (800dc84 <TIM_OC3_SetConfig+0x100>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d10d      	bne.n	800dc0a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	021b      	lsls	r3, r3, #8
 800dbfc:	697a      	ldr	r2, [r7, #20]
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dc08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a1c      	ldr	r2, [pc, #112]	; (800dc80 <TIM_OC3_SetConfig+0xfc>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d00f      	beq.n	800dc32 <TIM_OC3_SetConfig+0xae>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a1b      	ldr	r2, [pc, #108]	; (800dc84 <TIM_OC3_SetConfig+0x100>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d00b      	beq.n	800dc32 <TIM_OC3_SetConfig+0xae>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a1a      	ldr	r2, [pc, #104]	; (800dc88 <TIM_OC3_SetConfig+0x104>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d007      	beq.n	800dc32 <TIM_OC3_SetConfig+0xae>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4a19      	ldr	r2, [pc, #100]	; (800dc8c <TIM_OC3_SetConfig+0x108>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d003      	beq.n	800dc32 <TIM_OC3_SetConfig+0xae>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a18      	ldr	r2, [pc, #96]	; (800dc90 <TIM_OC3_SetConfig+0x10c>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d113      	bne.n	800dc5a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	695b      	ldr	r3, [r3, #20]
 800dc46:	011b      	lsls	r3, r3, #4
 800dc48:	693a      	ldr	r2, [r7, #16]
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	699b      	ldr	r3, [r3, #24]
 800dc52:	011b      	lsls	r3, r3, #4
 800dc54:	693a      	ldr	r2, [r7, #16]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	693a      	ldr	r2, [r7, #16]
 800dc5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	685a      	ldr	r2, [r3, #4]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	697a      	ldr	r2, [r7, #20]
 800dc72:	621a      	str	r2, [r3, #32]
}
 800dc74:	bf00      	nop
 800dc76:	371c      	adds	r7, #28
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr
 800dc80:	40012c00 	.word	0x40012c00
 800dc84:	40013400 	.word	0x40013400
 800dc88:	40014000 	.word	0x40014000
 800dc8c:	40014400 	.word	0x40014400
 800dc90:	40014800 	.word	0x40014800

0800dc94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b087      	sub	sp, #28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a1b      	ldr	r3, [r3, #32]
 800dcae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	69db      	ldr	r3, [r3, #28]
 800dcba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dcc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	021b      	lsls	r3, r3, #8
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	031b      	lsls	r3, r3, #12
 800dcea:	693a      	ldr	r2, [r7, #16]
 800dcec:	4313      	orrs	r3, r2
 800dcee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4a18      	ldr	r2, [pc, #96]	; (800dd54 <TIM_OC4_SetConfig+0xc0>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d00f      	beq.n	800dd18 <TIM_OC4_SetConfig+0x84>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4a17      	ldr	r2, [pc, #92]	; (800dd58 <TIM_OC4_SetConfig+0xc4>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d00b      	beq.n	800dd18 <TIM_OC4_SetConfig+0x84>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	4a16      	ldr	r2, [pc, #88]	; (800dd5c <TIM_OC4_SetConfig+0xc8>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d007      	beq.n	800dd18 <TIM_OC4_SetConfig+0x84>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	4a15      	ldr	r2, [pc, #84]	; (800dd60 <TIM_OC4_SetConfig+0xcc>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d003      	beq.n	800dd18 <TIM_OC4_SetConfig+0x84>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a14      	ldr	r2, [pc, #80]	; (800dd64 <TIM_OC4_SetConfig+0xd0>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d109      	bne.n	800dd2c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	695b      	ldr	r3, [r3, #20]
 800dd24:	019b      	lsls	r3, r3, #6
 800dd26:	697a      	ldr	r2, [r7, #20]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	697a      	ldr	r2, [r7, #20]
 800dd30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	685a      	ldr	r2, [r3, #4]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	693a      	ldr	r2, [r7, #16]
 800dd44:	621a      	str	r2, [r3, #32]
}
 800dd46:	bf00      	nop
 800dd48:	371c      	adds	r7, #28
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	40012c00 	.word	0x40012c00
 800dd58:	40013400 	.word	0x40013400
 800dd5c:	40014000 	.word	0x40014000
 800dd60:	40014400 	.word	0x40014400
 800dd64:	40014800 	.word	0x40014800

0800dd68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b087      	sub	sp, #28
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6a1b      	ldr	r3, [r3, #32]
 800dd76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6a1b      	ldr	r3, [r3, #32]
 800dd82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	68fa      	ldr	r2, [r7, #12]
 800dda2:	4313      	orrs	r3, r2
 800dda4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ddac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	041b      	lsls	r3, r3, #16
 800ddb4:	693a      	ldr	r2, [r7, #16]
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4a17      	ldr	r2, [pc, #92]	; (800de1c <TIM_OC5_SetConfig+0xb4>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d00f      	beq.n	800dde2 <TIM_OC5_SetConfig+0x7a>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4a16      	ldr	r2, [pc, #88]	; (800de20 <TIM_OC5_SetConfig+0xb8>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d00b      	beq.n	800dde2 <TIM_OC5_SetConfig+0x7a>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a15      	ldr	r2, [pc, #84]	; (800de24 <TIM_OC5_SetConfig+0xbc>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d007      	beq.n	800dde2 <TIM_OC5_SetConfig+0x7a>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4a14      	ldr	r2, [pc, #80]	; (800de28 <TIM_OC5_SetConfig+0xc0>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d003      	beq.n	800dde2 <TIM_OC5_SetConfig+0x7a>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4a13      	ldr	r2, [pc, #76]	; (800de2c <TIM_OC5_SetConfig+0xc4>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d109      	bne.n	800ddf6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dde8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	695b      	ldr	r3, [r3, #20]
 800ddee:	021b      	lsls	r3, r3, #8
 800ddf0:	697a      	ldr	r2, [r7, #20]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	697a      	ldr	r2, [r7, #20]
 800ddfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	685a      	ldr	r2, [r3, #4]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	693a      	ldr	r2, [r7, #16]
 800de0e:	621a      	str	r2, [r3, #32]
}
 800de10:	bf00      	nop
 800de12:	371c      	adds	r7, #28
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr
 800de1c:	40012c00 	.word	0x40012c00
 800de20:	40013400 	.word	0x40013400
 800de24:	40014000 	.word	0x40014000
 800de28:	40014400 	.word	0x40014400
 800de2c:	40014800 	.word	0x40014800

0800de30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de30:	b480      	push	{r7}
 800de32:	b087      	sub	sp, #28
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6a1b      	ldr	r3, [r3, #32]
 800de3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6a1b      	ldr	r3, [r3, #32]
 800de4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800de5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	021b      	lsls	r3, r3, #8
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	4313      	orrs	r3, r2
 800de6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	051b      	lsls	r3, r3, #20
 800de7e:	693a      	ldr	r2, [r7, #16]
 800de80:	4313      	orrs	r3, r2
 800de82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4a18      	ldr	r2, [pc, #96]	; (800dee8 <TIM_OC6_SetConfig+0xb8>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d00f      	beq.n	800deac <TIM_OC6_SetConfig+0x7c>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4a17      	ldr	r2, [pc, #92]	; (800deec <TIM_OC6_SetConfig+0xbc>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d00b      	beq.n	800deac <TIM_OC6_SetConfig+0x7c>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	4a16      	ldr	r2, [pc, #88]	; (800def0 <TIM_OC6_SetConfig+0xc0>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d007      	beq.n	800deac <TIM_OC6_SetConfig+0x7c>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	4a15      	ldr	r2, [pc, #84]	; (800def4 <TIM_OC6_SetConfig+0xc4>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d003      	beq.n	800deac <TIM_OC6_SetConfig+0x7c>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4a14      	ldr	r2, [pc, #80]	; (800def8 <TIM_OC6_SetConfig+0xc8>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d109      	bne.n	800dec0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800deb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	695b      	ldr	r3, [r3, #20]
 800deb8:	029b      	lsls	r3, r3, #10
 800deba:	697a      	ldr	r2, [r7, #20]
 800debc:	4313      	orrs	r3, r2
 800debe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	697a      	ldr	r2, [r7, #20]
 800dec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	685a      	ldr	r2, [r3, #4]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	693a      	ldr	r2, [r7, #16]
 800ded8:	621a      	str	r2, [r3, #32]
}
 800deda:	bf00      	nop
 800dedc:	371c      	adds	r7, #28
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr
 800dee6:	bf00      	nop
 800dee8:	40012c00 	.word	0x40012c00
 800deec:	40013400 	.word	0x40013400
 800def0:	40014000 	.word	0x40014000
 800def4:	40014400 	.word	0x40014400
 800def8:	40014800 	.word	0x40014800

0800defc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800df06:	2300      	movs	r3, #0
 800df08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df10:	2b01      	cmp	r3, #1
 800df12:	d101      	bne.n	800df18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800df14:	2302      	movs	r3, #2
 800df16:	e065      	b.n	800dfe4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2201      	movs	r2, #1
 800df1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	68db      	ldr	r3, [r3, #12]
 800df2a:	4313      	orrs	r3, r2
 800df2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	4313      	orrs	r3, r2
 800df3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	4313      	orrs	r3, r2
 800df48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4313      	orrs	r3, r2
 800df56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	691b      	ldr	r3, [r3, #16]
 800df62:	4313      	orrs	r3, r2
 800df64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	695b      	ldr	r3, [r3, #20]
 800df70:	4313      	orrs	r3, r2
 800df72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df7e:	4313      	orrs	r3, r2
 800df80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	699b      	ldr	r3, [r3, #24]
 800df8c:	041b      	lsls	r3, r3, #16
 800df8e:	4313      	orrs	r3, r2
 800df90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a16      	ldr	r2, [pc, #88]	; (800dff0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d004      	beq.n	800dfa6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a14      	ldr	r2, [pc, #80]	; (800dff4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d115      	bne.n	800dfd2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb0:	051b      	lsls	r3, r3, #20
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	69db      	ldr	r3, [r3, #28]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	6a1b      	ldr	r3, [r3, #32]
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dfe2:	2300      	movs	r3, #0
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3714      	adds	r7, #20
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr
 800dff0:	40012c00 	.word	0x40012c00
 800dff4:	40013400 	.word	0x40013400

0800dff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e000:	bf00      	nop
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e014:	bf00      	nop
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e020:	b480      	push	{r7}
 800e022:	b083      	sub	sp, #12
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e028:	bf00      	nop
 800e02a:	370c      	adds	r7, #12
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d101      	bne.n	800e046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e042:	2301      	movs	r3, #1
 800e044:	e042      	b.n	800e0cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d106      	bne.n	800e05e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7f6 f801 	bl	8004060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2224      	movs	r2, #36	; 0x24
 800e062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f022 0201 	bic.w	r2, r2, #1
 800e074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f000 fb64 	bl	800e744 <UART_SetConfig>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d101      	bne.n	800e086 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e082:	2301      	movs	r3, #1
 800e084:	e022      	b.n	800e0cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d002      	beq.n	800e094 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 fe54 	bl	800ed3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	685a      	ldr	r2, [r3, #4]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	689a      	ldr	r2, [r3, #8]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e0b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f042 0201 	orr.w	r2, r2, #1
 800e0c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 fedb 	bl	800ee80 <UART_CheckIdleState>
 800e0ca:	4603      	mov	r3, r0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b0ba      	sub	sp, #232	; 0xe8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	69db      	ldr	r3, [r3, #28]
 800e0e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	689b      	ldr	r3, [r3, #8]
 800e0f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e0fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e0fe:	f640 030f 	movw	r3, #2063	; 0x80f
 800e102:	4013      	ands	r3, r2
 800e104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d11b      	bne.n	800e148 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e114:	f003 0320 	and.w	r3, r3, #32
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d015      	beq.n	800e148 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e120:	f003 0320 	and.w	r3, r3, #32
 800e124:	2b00      	cmp	r3, #0
 800e126:	d105      	bne.n	800e134 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e12c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e130:	2b00      	cmp	r3, #0
 800e132:	d009      	beq.n	800e148 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f000 82d6 	beq.w	800e6ea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	4798      	blx	r3
      }
      return;
 800e146:	e2d0      	b.n	800e6ea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800e148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f000 811f 	beq.w	800e390 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e152:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e156:	4b8b      	ldr	r3, [pc, #556]	; (800e384 <HAL_UART_IRQHandler+0x2b0>)
 800e158:	4013      	ands	r3, r2
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d106      	bne.n	800e16c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e15e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e162:	4b89      	ldr	r3, [pc, #548]	; (800e388 <HAL_UART_IRQHandler+0x2b4>)
 800e164:	4013      	ands	r3, r2
 800e166:	2b00      	cmp	r3, #0
 800e168:	f000 8112 	beq.w	800e390 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e170:	f003 0301 	and.w	r3, r3, #1
 800e174:	2b00      	cmp	r3, #0
 800e176:	d011      	beq.n	800e19c <HAL_UART_IRQHandler+0xc8>
 800e178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e17c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00b      	beq.n	800e19c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2201      	movs	r2, #1
 800e18a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e192:	f043 0201 	orr.w	r2, r3, #1
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1a0:	f003 0302 	and.w	r3, r3, #2
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d011      	beq.n	800e1cc <HAL_UART_IRQHandler+0xf8>
 800e1a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1ac:	f003 0301 	and.w	r3, r3, #1
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00b      	beq.n	800e1cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2202      	movs	r2, #2
 800e1ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1c2:	f043 0204 	orr.w	r2, r3, #4
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1d0:	f003 0304 	and.w	r3, r3, #4
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d011      	beq.n	800e1fc <HAL_UART_IRQHandler+0x128>
 800e1d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1dc:	f003 0301 	and.w	r3, r3, #1
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00b      	beq.n	800e1fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2204      	movs	r2, #4
 800e1ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1f2:	f043 0202 	orr.w	r2, r3, #2
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e200:	f003 0308 	and.w	r3, r3, #8
 800e204:	2b00      	cmp	r3, #0
 800e206:	d017      	beq.n	800e238 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e20c:	f003 0320 	and.w	r3, r3, #32
 800e210:	2b00      	cmp	r3, #0
 800e212:	d105      	bne.n	800e220 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e214:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e218:	4b5a      	ldr	r3, [pc, #360]	; (800e384 <HAL_UART_IRQHandler+0x2b0>)
 800e21a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00b      	beq.n	800e238 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2208      	movs	r2, #8
 800e226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e22e:	f043 0208 	orr.w	r2, r3, #8
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e23c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e240:	2b00      	cmp	r3, #0
 800e242:	d012      	beq.n	800e26a <HAL_UART_IRQHandler+0x196>
 800e244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e248:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00c      	beq.n	800e26a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e260:	f043 0220 	orr.w	r2, r3, #32
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e270:	2b00      	cmp	r3, #0
 800e272:	f000 823c 	beq.w	800e6ee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e27a:	f003 0320 	and.w	r3, r3, #32
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d013      	beq.n	800e2aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e286:	f003 0320 	and.w	r3, r3, #32
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d105      	bne.n	800e29a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e28e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e296:	2b00      	cmp	r3, #0
 800e298:	d007      	beq.n	800e2aa <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d003      	beq.n	800e2aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2be:	2b40      	cmp	r3, #64	; 0x40
 800e2c0:	d005      	beq.n	800e2ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e2c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e2c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d04f      	beq.n	800e36e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 fee9 	bl	800f0a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2de:	2b40      	cmp	r3, #64	; 0x40
 800e2e0:	d141      	bne.n	800e366 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3308      	adds	r3, #8
 800e2e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2f0:	e853 3f00 	ldrex	r3, [r3]
 800e2f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e2f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e2fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	3308      	adds	r3, #8
 800e30a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e30e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e31a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e31e:	e841 2300 	strex	r3, r2, [r1]
 800e322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d1d9      	bne.n	800e2e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e332:	2b00      	cmp	r3, #0
 800e334:	d013      	beq.n	800e35e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e33a:	4a14      	ldr	r2, [pc, #80]	; (800e38c <HAL_UART_IRQHandler+0x2b8>)
 800e33c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e342:	4618      	mov	r0, r3
 800e344:	f7f7 fec9 	bl	80060da <HAL_DMA_Abort_IT>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d017      	beq.n	800e37e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e358:	4610      	mov	r0, r2
 800e35a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e35c:	e00f      	b.n	800e37e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 f9da 	bl	800e718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e364:	e00b      	b.n	800e37e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 f9d6 	bl	800e718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e36c:	e007      	b.n	800e37e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f9d2 	bl	800e718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2200      	movs	r2, #0
 800e378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e37c:	e1b7      	b.n	800e6ee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e37e:	bf00      	nop
    return;
 800e380:	e1b5      	b.n	800e6ee <HAL_UART_IRQHandler+0x61a>
 800e382:	bf00      	nop
 800e384:	10000001 	.word	0x10000001
 800e388:	04000120 	.word	0x04000120
 800e38c:	0800f173 	.word	0x0800f173

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e394:	2b01      	cmp	r3, #1
 800e396:	f040 814a 	bne.w	800e62e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e39a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e39e:	f003 0310 	and.w	r3, r3, #16
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f000 8143 	beq.w	800e62e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3ac:	f003 0310 	and.w	r3, r3, #16
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f000 813c 	beq.w	800e62e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2210      	movs	r2, #16
 800e3bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	689b      	ldr	r3, [r3, #8]
 800e3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c8:	2b40      	cmp	r3, #64	; 0x40
 800e3ca:	f040 80b5 	bne.w	800e538 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e3da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	f000 8187 	beq.w	800e6f2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e3ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	f080 817f 	bcs.w	800e6f2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f003 0320 	and.w	r3, r3, #32
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	f040 8086 	bne.w	800e51c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e41c:	e853 3f00 	ldrex	r3, [r3]
 800e420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e42c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	461a      	mov	r2, r3
 800e436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e43a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e43e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e442:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e446:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e44a:	e841 2300 	strex	r3, r2, [r1]
 800e44e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1da      	bne.n	800e410 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	3308      	adds	r3, #8
 800e460:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e464:	e853 3f00 	ldrex	r3, [r3]
 800e468:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e46a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e46c:	f023 0301 	bic.w	r3, r3, #1
 800e470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	3308      	adds	r3, #8
 800e47a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e47e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e482:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e484:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e486:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e48a:	e841 2300 	strex	r3, r2, [r1]
 800e48e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e492:	2b00      	cmp	r3, #0
 800e494:	d1e1      	bne.n	800e45a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	3308      	adds	r3, #8
 800e49c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4a0:	e853 3f00 	ldrex	r3, [r3]
 800e4a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e4a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	3308      	adds	r3, #8
 800e4b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e4ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e4bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e4c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e4c2:	e841 2300 	strex	r3, r2, [r1]
 800e4c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e4c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1e3      	bne.n	800e496 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2220      	movs	r2, #32
 800e4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4e4:	e853 3f00 	ldrex	r3, [r3]
 800e4e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e4ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4ec:	f023 0310 	bic.w	r3, r3, #16
 800e4f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e4fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800e500:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e502:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e506:	e841 2300 	strex	r3, r2, [r1]
 800e50a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e50c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1e4      	bne.n	800e4dc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e516:	4618      	mov	r0, r3
 800e518:	f7f7 fd83 	bl	8006022 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e528:	b29b      	uxth	r3, r3
 800e52a:	1ad3      	subs	r3, r2, r3
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	4619      	mov	r1, r3
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 f8fb 	bl	800e72c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e536:	e0dc      	b.n	800e6f2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e544:	b29b      	uxth	r3, r3
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e552:	b29b      	uxth	r3, r3
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 80ce 	beq.w	800e6f6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800e55a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f000 80c9 	beq.w	800e6f6 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56c:	e853 3f00 	ldrex	r3, [r3]
 800e570:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	461a      	mov	r2, r3
 800e582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e586:	647b      	str	r3, [r7, #68]	; 0x44
 800e588:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e58a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e58c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e58e:	e841 2300 	strex	r3, r2, [r1]
 800e592:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e596:	2b00      	cmp	r3, #0
 800e598:	d1e4      	bne.n	800e564 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	3308      	adds	r3, #8
 800e5a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a4:	e853 3f00 	ldrex	r3, [r3]
 800e5a8:	623b      	str	r3, [r7, #32]
   return(result);
 800e5aa:	6a3b      	ldr	r3, [r7, #32]
 800e5ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e5b0:	f023 0301 	bic.w	r3, r3, #1
 800e5b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	3308      	adds	r3, #8
 800e5be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e5c2:	633a      	str	r2, [r7, #48]	; 0x30
 800e5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5ca:	e841 2300 	strex	r3, r2, [r1]
 800e5ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d1e1      	bne.n	800e59a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2220      	movs	r2, #32
 800e5da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	e853 3f00 	ldrex	r3, [r3]
 800e5f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f023 0310 	bic.w	r3, r3, #16
 800e5fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	461a      	mov	r2, r3
 800e608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e60c:	61fb      	str	r3, [r7, #28]
 800e60e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e610:	69b9      	ldr	r1, [r7, #24]
 800e612:	69fa      	ldr	r2, [r7, #28]
 800e614:	e841 2300 	strex	r3, r2, [r1]
 800e618:	617b      	str	r3, [r7, #20]
   return(result);
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1e4      	bne.n	800e5ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e624:	4619      	mov	r1, r3
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 f880 	bl	800e72c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e62c:	e063      	b.n	800e6f6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e62e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00e      	beq.n	800e658 <HAL_UART_IRQHandler+0x584>
 800e63a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e63e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e642:	2b00      	cmp	r3, #0
 800e644:	d008      	beq.n	800e658 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e64e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 fdcf 	bl	800f1f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e656:	e051      	b.n	800e6fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e65c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e660:	2b00      	cmp	r3, #0
 800e662:	d014      	beq.n	800e68e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d105      	bne.n	800e67c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d008      	beq.n	800e68e <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e680:	2b00      	cmp	r3, #0
 800e682:	d03a      	beq.n	800e6fa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	4798      	blx	r3
    }
    return;
 800e68c:	e035      	b.n	800e6fa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e696:	2b00      	cmp	r3, #0
 800e698:	d009      	beq.n	800e6ae <HAL_UART_IRQHandler+0x5da>
 800e69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d003      	beq.n	800e6ae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 fd79 	bl	800f19e <UART_EndTransmit_IT>
    return;
 800e6ac:	e026      	b.n	800e6fc <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d009      	beq.n	800e6ce <HAL_UART_IRQHandler+0x5fa>
 800e6ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d003      	beq.n	800e6ce <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 fda8 	bl	800f21c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6cc:	e016      	b.n	800e6fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e6ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d010      	beq.n	800e6fc <HAL_UART_IRQHandler+0x628>
 800e6da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	da0c      	bge.n	800e6fc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 fd90 	bl	800f208 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6e8:	e008      	b.n	800e6fc <HAL_UART_IRQHandler+0x628>
      return;
 800e6ea:	bf00      	nop
 800e6ec:	e006      	b.n	800e6fc <HAL_UART_IRQHandler+0x628>
    return;
 800e6ee:	bf00      	nop
 800e6f0:	e004      	b.n	800e6fc <HAL_UART_IRQHandler+0x628>
      return;
 800e6f2:	bf00      	nop
 800e6f4:	e002      	b.n	800e6fc <HAL_UART_IRQHandler+0x628>
      return;
 800e6f6:	bf00      	nop
 800e6f8:	e000      	b.n	800e6fc <HAL_UART_IRQHandler+0x628>
    return;
 800e6fa:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800e6fc:	37e8      	adds	r7, #232	; 0xe8
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop

0800e704 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e720:	bf00      	nop
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	460b      	mov	r3, r1
 800e736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e738:	bf00      	nop
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e748:	b08c      	sub	sp, #48	; 0x30
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e74e:	2300      	movs	r3, #0
 800e750:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	689a      	ldr	r2, [r3, #8]
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	691b      	ldr	r3, [r3, #16]
 800e75c:	431a      	orrs	r2, r3
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	695b      	ldr	r3, [r3, #20]
 800e762:	431a      	orrs	r2, r3
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	69db      	ldr	r3, [r3, #28]
 800e768:	4313      	orrs	r3, r2
 800e76a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	4baa      	ldr	r3, [pc, #680]	; (800ea1c <UART_SetConfig+0x2d8>)
 800e774:	4013      	ands	r3, r2
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	6812      	ldr	r2, [r2, #0]
 800e77a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e77c:	430b      	orrs	r3, r1
 800e77e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	68da      	ldr	r2, [r3, #12]
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	430a      	orrs	r2, r1
 800e794:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	699b      	ldr	r3, [r3, #24]
 800e79a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a9f      	ldr	r2, [pc, #636]	; (800ea20 <UART_SetConfig+0x2dc>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d004      	beq.n	800e7b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	6a1b      	ldr	r3, [r3, #32]
 800e7aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800e7ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800e7be:	697a      	ldr	r2, [r7, #20]
 800e7c0:	6812      	ldr	r2, [r2, #0]
 800e7c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7c4:	430b      	orrs	r3, r1
 800e7c6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ce:	f023 010f 	bic.w	r1, r3, #15
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	430a      	orrs	r2, r1
 800e7dc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4a90      	ldr	r2, [pc, #576]	; (800ea24 <UART_SetConfig+0x2e0>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d125      	bne.n	800e834 <UART_SetConfig+0xf0>
 800e7e8:	4b8f      	ldr	r3, [pc, #572]	; (800ea28 <UART_SetConfig+0x2e4>)
 800e7ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7ee:	f003 0303 	and.w	r3, r3, #3
 800e7f2:	2b03      	cmp	r3, #3
 800e7f4:	d81a      	bhi.n	800e82c <UART_SetConfig+0xe8>
 800e7f6:	a201      	add	r2, pc, #4	; (adr r2, 800e7fc <UART_SetConfig+0xb8>)
 800e7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7fc:	0800e80d 	.word	0x0800e80d
 800e800:	0800e81d 	.word	0x0800e81d
 800e804:	0800e815 	.word	0x0800e815
 800e808:	0800e825 	.word	0x0800e825
 800e80c:	2301      	movs	r3, #1
 800e80e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e812:	e116      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e814:	2302      	movs	r3, #2
 800e816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e81a:	e112      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e81c:	2304      	movs	r3, #4
 800e81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e822:	e10e      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e824:	2308      	movs	r3, #8
 800e826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e82a:	e10a      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e82c:	2310      	movs	r3, #16
 800e82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e832:	e106      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a7c      	ldr	r2, [pc, #496]	; (800ea2c <UART_SetConfig+0x2e8>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d138      	bne.n	800e8b0 <UART_SetConfig+0x16c>
 800e83e:	4b7a      	ldr	r3, [pc, #488]	; (800ea28 <UART_SetConfig+0x2e4>)
 800e840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e844:	f003 030c 	and.w	r3, r3, #12
 800e848:	2b0c      	cmp	r3, #12
 800e84a:	d82d      	bhi.n	800e8a8 <UART_SetConfig+0x164>
 800e84c:	a201      	add	r2, pc, #4	; (adr r2, 800e854 <UART_SetConfig+0x110>)
 800e84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e852:	bf00      	nop
 800e854:	0800e889 	.word	0x0800e889
 800e858:	0800e8a9 	.word	0x0800e8a9
 800e85c:	0800e8a9 	.word	0x0800e8a9
 800e860:	0800e8a9 	.word	0x0800e8a9
 800e864:	0800e899 	.word	0x0800e899
 800e868:	0800e8a9 	.word	0x0800e8a9
 800e86c:	0800e8a9 	.word	0x0800e8a9
 800e870:	0800e8a9 	.word	0x0800e8a9
 800e874:	0800e891 	.word	0x0800e891
 800e878:	0800e8a9 	.word	0x0800e8a9
 800e87c:	0800e8a9 	.word	0x0800e8a9
 800e880:	0800e8a9 	.word	0x0800e8a9
 800e884:	0800e8a1 	.word	0x0800e8a1
 800e888:	2300      	movs	r3, #0
 800e88a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e88e:	e0d8      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e890:	2302      	movs	r3, #2
 800e892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e896:	e0d4      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e898:	2304      	movs	r3, #4
 800e89a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e89e:	e0d0      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e8a0:	2308      	movs	r3, #8
 800e8a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8a6:	e0cc      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e8a8:	2310      	movs	r3, #16
 800e8aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8ae:	e0c8      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a5e      	ldr	r2, [pc, #376]	; (800ea30 <UART_SetConfig+0x2ec>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d125      	bne.n	800e906 <UART_SetConfig+0x1c2>
 800e8ba:	4b5b      	ldr	r3, [pc, #364]	; (800ea28 <UART_SetConfig+0x2e4>)
 800e8bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e8c4:	2b30      	cmp	r3, #48	; 0x30
 800e8c6:	d016      	beq.n	800e8f6 <UART_SetConfig+0x1b2>
 800e8c8:	2b30      	cmp	r3, #48	; 0x30
 800e8ca:	d818      	bhi.n	800e8fe <UART_SetConfig+0x1ba>
 800e8cc:	2b20      	cmp	r3, #32
 800e8ce:	d00a      	beq.n	800e8e6 <UART_SetConfig+0x1a2>
 800e8d0:	2b20      	cmp	r3, #32
 800e8d2:	d814      	bhi.n	800e8fe <UART_SetConfig+0x1ba>
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d002      	beq.n	800e8de <UART_SetConfig+0x19a>
 800e8d8:	2b10      	cmp	r3, #16
 800e8da:	d008      	beq.n	800e8ee <UART_SetConfig+0x1aa>
 800e8dc:	e00f      	b.n	800e8fe <UART_SetConfig+0x1ba>
 800e8de:	2300      	movs	r3, #0
 800e8e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8e4:	e0ad      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e8e6:	2302      	movs	r3, #2
 800e8e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8ec:	e0a9      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e8ee:	2304      	movs	r3, #4
 800e8f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8f4:	e0a5      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e8f6:	2308      	movs	r3, #8
 800e8f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8fc:	e0a1      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e8fe:	2310      	movs	r3, #16
 800e900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e904:	e09d      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a4a      	ldr	r2, [pc, #296]	; (800ea34 <UART_SetConfig+0x2f0>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d125      	bne.n	800e95c <UART_SetConfig+0x218>
 800e910:	4b45      	ldr	r3, [pc, #276]	; (800ea28 <UART_SetConfig+0x2e4>)
 800e912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e91a:	2bc0      	cmp	r3, #192	; 0xc0
 800e91c:	d016      	beq.n	800e94c <UART_SetConfig+0x208>
 800e91e:	2bc0      	cmp	r3, #192	; 0xc0
 800e920:	d818      	bhi.n	800e954 <UART_SetConfig+0x210>
 800e922:	2b80      	cmp	r3, #128	; 0x80
 800e924:	d00a      	beq.n	800e93c <UART_SetConfig+0x1f8>
 800e926:	2b80      	cmp	r3, #128	; 0x80
 800e928:	d814      	bhi.n	800e954 <UART_SetConfig+0x210>
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d002      	beq.n	800e934 <UART_SetConfig+0x1f0>
 800e92e:	2b40      	cmp	r3, #64	; 0x40
 800e930:	d008      	beq.n	800e944 <UART_SetConfig+0x200>
 800e932:	e00f      	b.n	800e954 <UART_SetConfig+0x210>
 800e934:	2300      	movs	r3, #0
 800e936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e93a:	e082      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e93c:	2302      	movs	r3, #2
 800e93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e942:	e07e      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e944:	2304      	movs	r3, #4
 800e946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e94a:	e07a      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e94c:	2308      	movs	r3, #8
 800e94e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e952:	e076      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e954:	2310      	movs	r3, #16
 800e956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e95a:	e072      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a35      	ldr	r2, [pc, #212]	; (800ea38 <UART_SetConfig+0x2f4>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d12a      	bne.n	800e9bc <UART_SetConfig+0x278>
 800e966:	4b30      	ldr	r3, [pc, #192]	; (800ea28 <UART_SetConfig+0x2e4>)
 800e968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e96c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e974:	d01a      	beq.n	800e9ac <UART_SetConfig+0x268>
 800e976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e97a:	d81b      	bhi.n	800e9b4 <UART_SetConfig+0x270>
 800e97c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e980:	d00c      	beq.n	800e99c <UART_SetConfig+0x258>
 800e982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e986:	d815      	bhi.n	800e9b4 <UART_SetConfig+0x270>
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d003      	beq.n	800e994 <UART_SetConfig+0x250>
 800e98c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e990:	d008      	beq.n	800e9a4 <UART_SetConfig+0x260>
 800e992:	e00f      	b.n	800e9b4 <UART_SetConfig+0x270>
 800e994:	2300      	movs	r3, #0
 800e996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e99a:	e052      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e99c:	2302      	movs	r3, #2
 800e99e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9a2:	e04e      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e9a4:	2304      	movs	r3, #4
 800e9a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9aa:	e04a      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e9ac:	2308      	movs	r3, #8
 800e9ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9b2:	e046      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e9b4:	2310      	movs	r3, #16
 800e9b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9ba:	e042      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a17      	ldr	r2, [pc, #92]	; (800ea20 <UART_SetConfig+0x2dc>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d13a      	bne.n	800ea3c <UART_SetConfig+0x2f8>
 800e9c6:	4b18      	ldr	r3, [pc, #96]	; (800ea28 <UART_SetConfig+0x2e4>)
 800e9c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e9d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e9d4:	d01a      	beq.n	800ea0c <UART_SetConfig+0x2c8>
 800e9d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e9da:	d81b      	bhi.n	800ea14 <UART_SetConfig+0x2d0>
 800e9dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9e0:	d00c      	beq.n	800e9fc <UART_SetConfig+0x2b8>
 800e9e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9e6:	d815      	bhi.n	800ea14 <UART_SetConfig+0x2d0>
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d003      	beq.n	800e9f4 <UART_SetConfig+0x2b0>
 800e9ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9f0:	d008      	beq.n	800ea04 <UART_SetConfig+0x2c0>
 800e9f2:	e00f      	b.n	800ea14 <UART_SetConfig+0x2d0>
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e9fa:	e022      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800e9fc:	2302      	movs	r3, #2
 800e9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea02:	e01e      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800ea04:	2304      	movs	r3, #4
 800ea06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea0a:	e01a      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800ea0c:	2308      	movs	r3, #8
 800ea0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea12:	e016      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800ea14:	2310      	movs	r3, #16
 800ea16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ea1a:	e012      	b.n	800ea42 <UART_SetConfig+0x2fe>
 800ea1c:	cfff69f3 	.word	0xcfff69f3
 800ea20:	40008000 	.word	0x40008000
 800ea24:	40013800 	.word	0x40013800
 800ea28:	40021000 	.word	0x40021000
 800ea2c:	40004400 	.word	0x40004400
 800ea30:	40004800 	.word	0x40004800
 800ea34:	40004c00 	.word	0x40004c00
 800ea38:	40005000 	.word	0x40005000
 800ea3c:	2310      	movs	r3, #16
 800ea3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4aae      	ldr	r2, [pc, #696]	; (800ed00 <UART_SetConfig+0x5bc>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	f040 8097 	bne.w	800eb7c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ea4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ea52:	2b08      	cmp	r3, #8
 800ea54:	d823      	bhi.n	800ea9e <UART_SetConfig+0x35a>
 800ea56:	a201      	add	r2, pc, #4	; (adr r2, 800ea5c <UART_SetConfig+0x318>)
 800ea58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea5c:	0800ea81 	.word	0x0800ea81
 800ea60:	0800ea9f 	.word	0x0800ea9f
 800ea64:	0800ea89 	.word	0x0800ea89
 800ea68:	0800ea9f 	.word	0x0800ea9f
 800ea6c:	0800ea8f 	.word	0x0800ea8f
 800ea70:	0800ea9f 	.word	0x0800ea9f
 800ea74:	0800ea9f 	.word	0x0800ea9f
 800ea78:	0800ea9f 	.word	0x0800ea9f
 800ea7c:	0800ea97 	.word	0x0800ea97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea80:	f7fb f892 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800ea84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ea86:	e010      	b.n	800eaaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ea88:	4b9e      	ldr	r3, [pc, #632]	; (800ed04 <UART_SetConfig+0x5c0>)
 800ea8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ea8c:	e00d      	b.n	800eaaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea8e:	f7fa fff3 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800ea92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ea94:	e009      	b.n	800eaaa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ea9c:	e005      	b.n	800eaaa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800eaa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	f000 8130 	beq.w	800ed12 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab6:	4a94      	ldr	r2, [pc, #592]	; (800ed08 <UART_SetConfig+0x5c4>)
 800eab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eabc:	461a      	mov	r2, r3
 800eabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac0:	fbb3 f3f2 	udiv	r3, r3, r2
 800eac4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	685a      	ldr	r2, [r3, #4]
 800eaca:	4613      	mov	r3, r2
 800eacc:	005b      	lsls	r3, r3, #1
 800eace:	4413      	add	r3, r2
 800ead0:	69ba      	ldr	r2, [r7, #24]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d305      	bcc.n	800eae2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eadc:	69ba      	ldr	r2, [r7, #24]
 800eade:	429a      	cmp	r2, r3
 800eae0:	d903      	bls.n	800eaea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800eae2:	2301      	movs	r3, #1
 800eae4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800eae8:	e113      	b.n	800ed12 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaec:	2200      	movs	r2, #0
 800eaee:	60bb      	str	r3, [r7, #8]
 800eaf0:	60fa      	str	r2, [r7, #12]
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf6:	4a84      	ldr	r2, [pc, #528]	; (800ed08 <UART_SetConfig+0x5c4>)
 800eaf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	2200      	movs	r2, #0
 800eb00:	603b      	str	r3, [r7, #0]
 800eb02:	607a      	str	r2, [r7, #4]
 800eb04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eb0c:	f7f2 f8b4 	bl	8000c78 <__aeabi_uldivmod>
 800eb10:	4602      	mov	r2, r0
 800eb12:	460b      	mov	r3, r1
 800eb14:	4610      	mov	r0, r2
 800eb16:	4619      	mov	r1, r3
 800eb18:	f04f 0200 	mov.w	r2, #0
 800eb1c:	f04f 0300 	mov.w	r3, #0
 800eb20:	020b      	lsls	r3, r1, #8
 800eb22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eb26:	0202      	lsls	r2, r0, #8
 800eb28:	6979      	ldr	r1, [r7, #20]
 800eb2a:	6849      	ldr	r1, [r1, #4]
 800eb2c:	0849      	lsrs	r1, r1, #1
 800eb2e:	2000      	movs	r0, #0
 800eb30:	460c      	mov	r4, r1
 800eb32:	4605      	mov	r5, r0
 800eb34:	eb12 0804 	adds.w	r8, r2, r4
 800eb38:	eb43 0905 	adc.w	r9, r3, r5
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	469a      	mov	sl, r3
 800eb44:	4693      	mov	fp, r2
 800eb46:	4652      	mov	r2, sl
 800eb48:	465b      	mov	r3, fp
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	4649      	mov	r1, r9
 800eb4e:	f7f2 f893 	bl	8000c78 <__aeabi_uldivmod>
 800eb52:	4602      	mov	r2, r0
 800eb54:	460b      	mov	r3, r1
 800eb56:	4613      	mov	r3, r2
 800eb58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb5a:	6a3b      	ldr	r3, [r7, #32]
 800eb5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb60:	d308      	bcc.n	800eb74 <UART_SetConfig+0x430>
 800eb62:	6a3b      	ldr	r3, [r7, #32]
 800eb64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb68:	d204      	bcs.n	800eb74 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	6a3a      	ldr	r2, [r7, #32]
 800eb70:	60da      	str	r2, [r3, #12]
 800eb72:	e0ce      	b.n	800ed12 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800eb74:	2301      	movs	r3, #1
 800eb76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800eb7a:	e0ca      	b.n	800ed12 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	69db      	ldr	r3, [r3, #28]
 800eb80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb84:	d166      	bne.n	800ec54 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800eb86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eb8a:	2b08      	cmp	r3, #8
 800eb8c:	d827      	bhi.n	800ebde <UART_SetConfig+0x49a>
 800eb8e:	a201      	add	r2, pc, #4	; (adr r2, 800eb94 <UART_SetConfig+0x450>)
 800eb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb94:	0800ebb9 	.word	0x0800ebb9
 800eb98:	0800ebc1 	.word	0x0800ebc1
 800eb9c:	0800ebc9 	.word	0x0800ebc9
 800eba0:	0800ebdf 	.word	0x0800ebdf
 800eba4:	0800ebcf 	.word	0x0800ebcf
 800eba8:	0800ebdf 	.word	0x0800ebdf
 800ebac:	0800ebdf 	.word	0x0800ebdf
 800ebb0:	0800ebdf 	.word	0x0800ebdf
 800ebb4:	0800ebd7 	.word	0x0800ebd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebb8:	f7fa fff6 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800ebbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ebbe:	e014      	b.n	800ebea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebc0:	f7fb f808 	bl	8009bd4 <HAL_RCC_GetPCLK2Freq>
 800ebc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ebc6:	e010      	b.n	800ebea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ebc8:	4b4e      	ldr	r3, [pc, #312]	; (800ed04 <UART_SetConfig+0x5c0>)
 800ebca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ebcc:	e00d      	b.n	800ebea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ebce:	f7fa ff53 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800ebd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ebd4:	e009      	b.n	800ebea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ebdc:	e005      	b.n	800ebea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ebe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f000 8090 	beq.w	800ed12 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf6:	4a44      	ldr	r2, [pc, #272]	; (800ed08 <UART_SetConfig+0x5c4>)
 800ebf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec04:	005a      	lsls	r2, r3, #1
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	085b      	lsrs	r3, r3, #1
 800ec0c:	441a      	add	r2, r3
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec16:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec18:	6a3b      	ldr	r3, [r7, #32]
 800ec1a:	2b0f      	cmp	r3, #15
 800ec1c:	d916      	bls.n	800ec4c <UART_SetConfig+0x508>
 800ec1e:	6a3b      	ldr	r3, [r7, #32]
 800ec20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec24:	d212      	bcs.n	800ec4c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec26:	6a3b      	ldr	r3, [r7, #32]
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	f023 030f 	bic.w	r3, r3, #15
 800ec2e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ec30:	6a3b      	ldr	r3, [r7, #32]
 800ec32:	085b      	lsrs	r3, r3, #1
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	f003 0307 	and.w	r3, r3, #7
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	8bfb      	ldrh	r3, [r7, #30]
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	8bfa      	ldrh	r2, [r7, #30]
 800ec48:	60da      	str	r2, [r3, #12]
 800ec4a:	e062      	b.n	800ed12 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ec52:	e05e      	b.n	800ed12 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ec58:	2b08      	cmp	r3, #8
 800ec5a:	d828      	bhi.n	800ecae <UART_SetConfig+0x56a>
 800ec5c:	a201      	add	r2, pc, #4	; (adr r2, 800ec64 <UART_SetConfig+0x520>)
 800ec5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec62:	bf00      	nop
 800ec64:	0800ec89 	.word	0x0800ec89
 800ec68:	0800ec91 	.word	0x0800ec91
 800ec6c:	0800ec99 	.word	0x0800ec99
 800ec70:	0800ecaf 	.word	0x0800ecaf
 800ec74:	0800ec9f 	.word	0x0800ec9f
 800ec78:	0800ecaf 	.word	0x0800ecaf
 800ec7c:	0800ecaf 	.word	0x0800ecaf
 800ec80:	0800ecaf 	.word	0x0800ecaf
 800ec84:	0800eca7 	.word	0x0800eca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec88:	f7fa ff8e 	bl	8009ba8 <HAL_RCC_GetPCLK1Freq>
 800ec8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ec8e:	e014      	b.n	800ecba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec90:	f7fa ffa0 	bl	8009bd4 <HAL_RCC_GetPCLK2Freq>
 800ec94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ec96:	e010      	b.n	800ecba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec98:	4b1a      	ldr	r3, [pc, #104]	; (800ed04 <UART_SetConfig+0x5c0>)
 800ec9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ec9c:	e00d      	b.n	800ecba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec9e:	f7fa feeb 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 800eca2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800eca4:	e009      	b.n	800ecba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ecac:	e005      	b.n	800ecba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ecb8:	bf00      	nop
    }

    if (pclk != 0U)
 800ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d028      	beq.n	800ed12 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc4:	4a10      	ldr	r2, [pc, #64]	; (800ed08 <UART_SetConfig+0x5c4>)
 800ecc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecca:	461a      	mov	r2, r3
 800eccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecce:	fbb3 f2f2 	udiv	r2, r3, r2
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	085b      	lsrs	r3, r3, #1
 800ecd8:	441a      	add	r2, r3
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	fbb2 f3f3 	udiv	r3, r2, r3
 800ece2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ece4:	6a3b      	ldr	r3, [r7, #32]
 800ece6:	2b0f      	cmp	r3, #15
 800ece8:	d910      	bls.n	800ed0c <UART_SetConfig+0x5c8>
 800ecea:	6a3b      	ldr	r3, [r7, #32]
 800ecec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecf0:	d20c      	bcs.n	800ed0c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ecf2:	6a3b      	ldr	r3, [r7, #32]
 800ecf4:	b29a      	uxth	r2, r3
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	60da      	str	r2, [r3, #12]
 800ecfc:	e009      	b.n	800ed12 <UART_SetConfig+0x5ce>
 800ecfe:	bf00      	nop
 800ed00:	40008000 	.word	0x40008000
 800ed04:	00f42400 	.word	0x00f42400
 800ed08:	08019fd4 	.word	0x08019fd4
      }
      else
      {
        ret = HAL_ERROR;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	2201      	movs	r2, #1
 800ed16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	2200      	movs	r2, #0
 800ed26:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ed2e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3730      	adds	r7, #48	; 0x30
 800ed36:	46bd      	mov	sp, r7
 800ed38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ed3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed48:	f003 0301 	and.w	r3, r3, #1
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d00a      	beq.n	800ed66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	430a      	orrs	r2, r1
 800ed64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed6a:	f003 0302 	and.w	r3, r3, #2
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00a      	beq.n	800ed88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	430a      	orrs	r2, r1
 800ed86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed8c:	f003 0304 	and.w	r3, r3, #4
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d00a      	beq.n	800edaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	430a      	orrs	r2, r1
 800eda8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edae:	f003 0308 	and.w	r3, r3, #8
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d00a      	beq.n	800edcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	430a      	orrs	r2, r1
 800edca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edd0:	f003 0310 	and.w	r3, r3, #16
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00a      	beq.n	800edee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	689b      	ldr	r3, [r3, #8]
 800edde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	430a      	orrs	r2, r1
 800edec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edf2:	f003 0320 	and.w	r3, r3, #32
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00a      	beq.n	800ee10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	430a      	orrs	r2, r1
 800ee0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d01a      	beq.n	800ee52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	430a      	orrs	r2, r1
 800ee30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee3a:	d10a      	bne.n	800ee52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	430a      	orrs	r2, r1
 800ee50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d00a      	beq.n	800ee74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	430a      	orrs	r2, r1
 800ee72:	605a      	str	r2, [r3, #4]
  }
}
 800ee74:	bf00      	nop
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr

0800ee80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af02      	add	r7, sp, #8
 800ee86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee90:	f7f6 ff86 	bl	8005da0 <HAL_GetTick>
 800ee94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f003 0308 	and.w	r3, r3, #8
 800eea0:	2b08      	cmp	r3, #8
 800eea2:	d10e      	bne.n	800eec2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eea8:	9300      	str	r3, [sp, #0]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2200      	movs	r2, #0
 800eeae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 f82f 	bl	800ef16 <UART_WaitOnFlagUntilTimeout>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d001      	beq.n	800eec2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eebe:	2303      	movs	r3, #3
 800eec0:	e025      	b.n	800ef0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f003 0304 	and.w	r3, r3, #4
 800eecc:	2b04      	cmp	r3, #4
 800eece:	d10e      	bne.n	800eeee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eed4:	9300      	str	r3, [sp, #0]
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 f819 	bl	800ef16 <UART_WaitOnFlagUntilTimeout>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d001      	beq.n	800eeee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eeea:	2303      	movs	r3, #3
 800eeec:	e00f      	b.n	800ef0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2220      	movs	r2, #32
 800eef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2220      	movs	r2, #32
 800eefa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b09c      	sub	sp, #112	; 0x70
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	60f8      	str	r0, [r7, #12]
 800ef1e:	60b9      	str	r1, [r7, #8]
 800ef20:	603b      	str	r3, [r7, #0]
 800ef22:	4613      	mov	r3, r2
 800ef24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef26:	e0a9      	b.n	800f07c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef2e:	f000 80a5 	beq.w	800f07c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef32:	f7f6 ff35 	bl	8005da0 <HAL_GetTick>
 800ef36:	4602      	mov	r2, r0
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	1ad3      	subs	r3, r2, r3
 800ef3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d302      	bcc.n	800ef48 <UART_WaitOnFlagUntilTimeout+0x32>
 800ef42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d140      	bne.n	800efca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef50:	e853 3f00 	ldrex	r3, [r3]
 800ef54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ef56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ef5c:	667b      	str	r3, [r7, #100]	; 0x64
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	461a      	mov	r2, r3
 800ef64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ef6e:	e841 2300 	strex	r3, r2, [r1]
 800ef72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ef74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d1e6      	bne.n	800ef48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	3308      	adds	r3, #8
 800ef80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef84:	e853 3f00 	ldrex	r3, [r3]
 800ef88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8c:	f023 0301 	bic.w	r3, r3, #1
 800ef90:	663b      	str	r3, [r7, #96]	; 0x60
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	3308      	adds	r3, #8
 800ef98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef9a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ef9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efa2:	e841 2300 	strex	r3, r2, [r1]
 800efa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800efa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d1e5      	bne.n	800ef7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2220      	movs	r2, #32
 800efb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2220      	movs	r2, #32
 800efba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2200      	movs	r2, #0
 800efc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800efc6:	2303      	movs	r3, #3
 800efc8:	e069      	b.n	800f09e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f003 0304 	and.w	r3, r3, #4
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d051      	beq.n	800f07c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	69db      	ldr	r3, [r3, #28]
 800efde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efe6:	d149      	bne.n	800f07c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eff0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effa:	e853 3f00 	ldrex	r3, [r3]
 800effe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f006:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	461a      	mov	r2, r3
 800f00e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f010:	637b      	str	r3, [r7, #52]	; 0x34
 800f012:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f018:	e841 2300 	strex	r3, r2, [r1]
 800f01c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	2b00      	cmp	r3, #0
 800f022:	d1e6      	bne.n	800eff2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	3308      	adds	r3, #8
 800f02a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	e853 3f00 	ldrex	r3, [r3]
 800f032:	613b      	str	r3, [r7, #16]
   return(result);
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	f023 0301 	bic.w	r3, r3, #1
 800f03a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	3308      	adds	r3, #8
 800f042:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f044:	623a      	str	r2, [r7, #32]
 800f046:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f048:	69f9      	ldr	r1, [r7, #28]
 800f04a:	6a3a      	ldr	r2, [r7, #32]
 800f04c:	e841 2300 	strex	r3, r2, [r1]
 800f050:	61bb      	str	r3, [r7, #24]
   return(result);
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d1e5      	bne.n	800f024 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2220      	movs	r2, #32
 800f05c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2220      	movs	r2, #32
 800f064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	2220      	movs	r2, #32
 800f06c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2200      	movs	r2, #0
 800f074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f078:	2303      	movs	r3, #3
 800f07a:	e010      	b.n	800f09e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	69da      	ldr	r2, [r3, #28]
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	4013      	ands	r3, r2
 800f086:	68ba      	ldr	r2, [r7, #8]
 800f088:	429a      	cmp	r2, r3
 800f08a:	bf0c      	ite	eq
 800f08c:	2301      	moveq	r3, #1
 800f08e:	2300      	movne	r3, #0
 800f090:	b2db      	uxtb	r3, r3
 800f092:	461a      	mov	r2, r3
 800f094:	79fb      	ldrb	r3, [r7, #7]
 800f096:	429a      	cmp	r2, r3
 800f098:	f43f af46 	beq.w	800ef28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3770      	adds	r7, #112	; 0x70
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f0a6:	b480      	push	{r7}
 800f0a8:	b095      	sub	sp, #84	; 0x54
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0b6:	e853 3f00 	ldrex	r3, [r3]
 800f0ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f0c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0cc:	643b      	str	r3, [r7, #64]	; 0x40
 800f0ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f0d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0d4:	e841 2300 	strex	r3, r2, [r1]
 800f0d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d1e6      	bne.n	800f0ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	3308      	adds	r3, #8
 800f0e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e8:	6a3b      	ldr	r3, [r7, #32]
 800f0ea:	e853 3f00 	ldrex	r3, [r3]
 800f0ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f0f6:	f023 0301 	bic.w	r3, r3, #1
 800f0fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	3308      	adds	r3, #8
 800f102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f104:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f10a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f10c:	e841 2300 	strex	r3, r2, [r1]
 800f110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1e3      	bne.n	800f0e0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d118      	bne.n	800f152 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	e853 3f00 	ldrex	r3, [r3]
 800f12c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	f023 0310 	bic.w	r3, r3, #16
 800f134:	647b      	str	r3, [r7, #68]	; 0x44
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	461a      	mov	r2, r3
 800f13c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f13e:	61bb      	str	r3, [r7, #24]
 800f140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f142:	6979      	ldr	r1, [r7, #20]
 800f144:	69ba      	ldr	r2, [r7, #24]
 800f146:	e841 2300 	strex	r3, r2, [r1]
 800f14a:	613b      	str	r3, [r7, #16]
   return(result);
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d1e6      	bne.n	800f120 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2220      	movs	r2, #32
 800f156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2200      	movs	r2, #0
 800f15e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f166:	bf00      	nop
 800f168:	3754      	adds	r7, #84	; 0x54
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr

0800f172 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f172:	b580      	push	{r7, lr}
 800f174:	b084      	sub	sp, #16
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f17e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2200      	movs	r2, #0
 800f184:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2200      	movs	r2, #0
 800f18c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f190:	68f8      	ldr	r0, [r7, #12]
 800f192:	f7ff fac1 	bl	800e718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f196:	bf00      	nop
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f19e:	b580      	push	{r7, lr}
 800f1a0:	b088      	sub	sp, #32
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	e853 3f00 	ldrex	r3, [r3]
 800f1b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1ba:	61fb      	str	r3, [r7, #28]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	61bb      	str	r3, [r7, #24]
 800f1c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c8:	6979      	ldr	r1, [r7, #20]
 800f1ca:	69ba      	ldr	r2, [r7, #24]
 800f1cc:	e841 2300 	strex	r3, r2, [r1]
 800f1d0:	613b      	str	r3, [r7, #16]
   return(result);
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1e6      	bne.n	800f1a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2220      	movs	r2, #32
 800f1dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7ff fa8c 	bl	800e704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1ec:	bf00      	nop
 800f1ee:	3720      	adds	r7, #32
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f1fc:	bf00      	nop
 800f1fe:	370c      	adds	r7, #12
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr

0800f208 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f210:	bf00      	nop
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f224:	bf00      	nop
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f230:	b480      	push	{r7}
 800f232:	b085      	sub	sp, #20
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d101      	bne.n	800f246 <HAL_UARTEx_DisableFifoMode+0x16>
 800f242:	2302      	movs	r3, #2
 800f244:	e027      	b.n	800f296 <HAL_UARTEx_DisableFifoMode+0x66>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2201      	movs	r2, #1
 800f24a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2224      	movs	r2, #36	; 0x24
 800f252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f022 0201 	bic.w	r2, r2, #1
 800f26c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f274:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2200      	movs	r2, #0
 800f27a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	68fa      	ldr	r2, [r7, #12]
 800f282:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2220      	movs	r2, #32
 800f288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f294:	2300      	movs	r3, #0
}
 800f296:	4618      	mov	r0, r3
 800f298:	3714      	adds	r7, #20
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr

0800f2a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b084      	sub	sp, #16
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
 800f2aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d101      	bne.n	800f2ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f2b6:	2302      	movs	r3, #2
 800f2b8:	e02d      	b.n	800f316 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2224      	movs	r2, #36	; 0x24
 800f2c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f022 0201 	bic.w	r2, r2, #1
 800f2e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	683a      	ldr	r2, [r7, #0]
 800f2f2:	430a      	orrs	r2, r1
 800f2f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f000 f850 	bl	800f39c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	68fa      	ldr	r2, [r7, #12]
 800f302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2220      	movs	r2, #32
 800f308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	3710      	adds	r7, #16
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f31e:	b580      	push	{r7, lr}
 800f320:	b084      	sub	sp, #16
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
 800f326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d101      	bne.n	800f336 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f332:	2302      	movs	r3, #2
 800f334:	e02d      	b.n	800f392 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2224      	movs	r2, #36	; 0x24
 800f342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f022 0201 	bic.w	r2, r2, #1
 800f35c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	683a      	ldr	r2, [r7, #0]
 800f36e:	430a      	orrs	r2, r1
 800f370:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 f812 	bl	800f39c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2220      	movs	r2, #32
 800f384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2200      	movs	r2, #0
 800f38c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f390:	2300      	movs	r3, #0
}
 800f392:	4618      	mov	r0, r3
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
	...

0800f39c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b085      	sub	sp, #20
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d108      	bne.n	800f3be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f3bc:	e031      	b.n	800f422 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f3be:	2308      	movs	r3, #8
 800f3c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f3c2:	2308      	movs	r3, #8
 800f3c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	0e5b      	lsrs	r3, r3, #25
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	f003 0307 	and.w	r3, r3, #7
 800f3d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	689b      	ldr	r3, [r3, #8]
 800f3dc:	0f5b      	lsrs	r3, r3, #29
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	f003 0307 	and.w	r3, r3, #7
 800f3e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f3e6:	7bbb      	ldrb	r3, [r7, #14]
 800f3e8:	7b3a      	ldrb	r2, [r7, #12]
 800f3ea:	4911      	ldr	r1, [pc, #68]	; (800f430 <UARTEx_SetNbDataToProcess+0x94>)
 800f3ec:	5c8a      	ldrb	r2, [r1, r2]
 800f3ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f3f2:	7b3a      	ldrb	r2, [r7, #12]
 800f3f4:	490f      	ldr	r1, [pc, #60]	; (800f434 <UARTEx_SetNbDataToProcess+0x98>)
 800f3f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f3f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3fc:	b29a      	uxth	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f404:	7bfb      	ldrb	r3, [r7, #15]
 800f406:	7b7a      	ldrb	r2, [r7, #13]
 800f408:	4909      	ldr	r1, [pc, #36]	; (800f430 <UARTEx_SetNbDataToProcess+0x94>)
 800f40a:	5c8a      	ldrb	r2, [r1, r2]
 800f40c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f410:	7b7a      	ldrb	r2, [r7, #13]
 800f412:	4908      	ldr	r1, [pc, #32]	; (800f434 <UARTEx_SetNbDataToProcess+0x98>)
 800f414:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f416:	fb93 f3f2 	sdiv	r3, r3, r2
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f422:	bf00      	nop
 800f424:	3714      	adds	r7, #20
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	08019fec 	.word	0x08019fec
 800f434:	08019ff4 	.word	0x08019ff4

0800f438 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f438:	b084      	sub	sp, #16
 800f43a:	b480      	push	{r7}
 800f43c:	b085      	sub	sp, #20
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
 800f442:	f107 001c 	add.w	r0, r7, #28
 800f446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f44a:	2300      	movs	r3, #0
 800f44c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800f44e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800f450:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f452:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800f456:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f458:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800f45a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800f45e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f460:	68fa      	ldr	r2, [r7, #12]
 800f462:	4313      	orrs	r3, r2
 800f464:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	685a      	ldr	r2, [r3, #4]
 800f46a:	4b07      	ldr	r3, [pc, #28]	; (800f488 <SDMMC_Init+0x50>)
 800f46c:	4013      	ands	r3, r2
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	431a      	orrs	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f476:	2300      	movs	r3, #0
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3714      	adds	r7, #20
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	b004      	add	sp, #16
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	ffc02c00 	.word	0xffc02c00

0800f48c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	370c      	adds	r7, #12
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr

0800f4a6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800f4a6:	b480      	push	{r7}
 800f4a8:	b083      	sub	sp, #12
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
 800f4ae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f4ba:	2300      	movs	r3, #0
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	f043 0203 	orr.w	r2, r3, #3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f4dc:	2002      	movs	r0, #2
 800f4de:	f7f6 fc6b 	bl	8005db8 <HAL_Delay>

  return HAL_OK;
 800f4e2:	2300      	movs	r3, #0
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f003 0303 	and.w	r3, r3, #3
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	370c      	adds	r7, #12
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f512:	2300      	movs	r3, #0
 800f514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	681a      	ldr	r2, [r3, #0]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f526:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f52c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f532:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	4313      	orrs	r3, r2
 800f538:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	68da      	ldr	r2, [r3, #12]
 800f53e:	4b06      	ldr	r3, [pc, #24]	; (800f558 <SDMMC_SendCommand+0x50>)
 800f540:	4013      	ands	r3, r2
 800f542:	68fa      	ldr	r2, [r7, #12]
 800f544:	431a      	orrs	r2, r3
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3714      	adds	r7, #20
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr
 800f558:	fffee0c0 	.word	0xfffee0c0

0800f55c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	691b      	ldr	r3, [r3, #16]
 800f568:	b2db      	uxtb	r3, r3
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	370c      	adds	r7, #12
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f576:	b480      	push	{r7}
 800f578:	b085      	sub	sp, #20
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
 800f57e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	3314      	adds	r3, #20
 800f584:	461a      	mov	r2, r3
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	4413      	add	r3, r2
 800f58a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
}
 800f590:	4618      	mov	r0, r3
 800f592:	3714      	adds	r7, #20
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr

0800f59c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b085      	sub	sp, #20
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f5c2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f5c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f5ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	431a      	orrs	r2, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f5e6:	2300      	movs	r3, #0

}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3714      	adds	r7, #20
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b088      	sub	sp, #32
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f602:	2310      	movs	r3, #16
 800f604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f60a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f60c:	2300      	movs	r3, #0
 800f60e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f616:	f107 0308 	add.w	r3, r7, #8
 800f61a:	4619      	mov	r1, r3
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f7ff ff73 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f622:	f241 3288 	movw	r2, #5000	; 0x1388
 800f626:	2110      	movs	r1, #16
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f000 fa7b 	bl	800fb24 <SDMMC_GetCmdResp1>
 800f62e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f630:	69fb      	ldr	r3, [r7, #28]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3720      	adds	r7, #32
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b088      	sub	sp, #32
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f648:	2311      	movs	r3, #17
 800f64a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f64c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f652:	2300      	movs	r3, #0
 800f654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f65a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f65c:	f107 0308 	add.w	r3, r7, #8
 800f660:	4619      	mov	r1, r3
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f7ff ff50 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f668:	f241 3288 	movw	r2, #5000	; 0x1388
 800f66c:	2111      	movs	r1, #17
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f000 fa58 	bl	800fb24 <SDMMC_GetCmdResp1>
 800f674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f676:	69fb      	ldr	r3, [r7, #28]
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3720      	adds	r7, #32
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b088      	sub	sp, #32
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f68e:	2312      	movs	r3, #18
 800f690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f692:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f698:	2300      	movs	r3, #0
 800f69a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f69c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f6a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6a2:	f107 0308 	add.w	r3, r7, #8
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f7ff ff2d 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f6ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6b2:	2112      	movs	r1, #18
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 fa35 	bl	800fb24 <SDMMC_GetCmdResp1>
 800f6ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6bc:	69fb      	ldr	r3, [r7, #28]
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3720      	adds	r7, #32
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}

0800f6c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b088      	sub	sp, #32
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
 800f6ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f6d4:	2318      	movs	r3, #24
 800f6d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f6e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6e8:	f107 0308 	add.w	r3, r7, #8
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f7ff ff0a 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f6f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6f8:	2118      	movs	r1, #24
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f000 fa12 	bl	800fb24 <SDMMC_GetCmdResp1>
 800f700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f702:	69fb      	ldr	r3, [r7, #28]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3720      	adds	r7, #32
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b088      	sub	sp, #32
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f71a:	2319      	movs	r3, #25
 800f71c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f71e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f724:	2300      	movs	r3, #0
 800f726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f72c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f72e:	f107 0308 	add.w	r3, r7, #8
 800f732:	4619      	mov	r1, r3
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7ff fee7 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f73a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f73e:	2119      	movs	r1, #25
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 f9ef 	bl	800fb24 <SDMMC_GetCmdResp1>
 800f746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f748:	69fb      	ldr	r3, [r7, #28]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3720      	adds	r7, #32
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
	...

0800f754 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b088      	sub	sp, #32
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f75c:	2300      	movs	r3, #0
 800f75e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f760:	230c      	movs	r3, #12
 800f762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f764:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f76a:	2300      	movs	r3, #0
 800f76c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f76e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f772:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f78c:	f107 0308 	add.w	r3, r7, #8
 800f790:	4619      	mov	r1, r3
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f7ff feb8 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f798:	4a08      	ldr	r2, [pc, #32]	; (800f7bc <SDMMC_CmdStopTransfer+0x68>)
 800f79a:	210c      	movs	r1, #12
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 f9c1 	bl	800fb24 <SDMMC_GetCmdResp1>
 800f7a2:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800f7b0:	69fb      	ldr	r3, [r7, #28]
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3720      	adds	r7, #32
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	05f5e100 	.word	0x05f5e100

0800f7c0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b08a      	sub	sp, #40	; 0x28
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f7d0:	2307      	movs	r3, #7
 800f7d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f7d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f7d8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f7e2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7e4:	f107 0310 	add.w	r3, r7, #16
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f7ff fe8c 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f7f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7f4:	2107      	movs	r1, #7
 800f7f6:	68f8      	ldr	r0, [r7, #12]
 800f7f8:	f000 f994 	bl	800fb24 <SDMMC_GetCmdResp1>
 800f7fc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f800:	4618      	mov	r0, r3
 800f802:	3728      	adds	r7, #40	; 0x28
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b088      	sub	sp, #32
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f810:	2300      	movs	r3, #0
 800f812:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f814:	2300      	movs	r3, #0
 800f816:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f818:	2300      	movs	r3, #0
 800f81a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f81c:	2300      	movs	r3, #0
 800f81e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f824:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f826:	f107 0308 	add.w	r3, r7, #8
 800f82a:	4619      	mov	r1, r3
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff fe6b 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 fbb8 	bl	800ffa8 <SDMMC_GetCmdError>
 800f838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f83a:	69fb      	ldr	r3, [r7, #28]
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3720      	adds	r7, #32
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b088      	sub	sp, #32
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f84c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f852:	2308      	movs	r3, #8
 800f854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f85a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f85c:	2300      	movs	r3, #0
 800f85e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f864:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f866:	f107 0308 	add.w	r3, r7, #8
 800f86a:	4619      	mov	r1, r3
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f7ff fe4b 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 fb4a 	bl	800ff0c <SDMMC_GetCmdResp7>
 800f878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f87a:	69fb      	ldr	r3, [r7, #28]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3720      	adds	r7, #32
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b088      	sub	sp, #32
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f892:	2337      	movs	r3, #55	; 0x37
 800f894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f89a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f89c:	2300      	movs	r3, #0
 800f89e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f8a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8a6:	f107 0308 	add.w	r3, r7, #8
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7ff fe2b 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f8b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8b6:	2137      	movs	r1, #55	; 0x37
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 f933 	bl	800fb24 <SDMMC_GetCmdResp1>
 800f8be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8c0:	69fb      	ldr	r3, [r7, #28]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3720      	adds	r7, #32
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b088      	sub	sp, #32
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
 800f8d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f8d8:	2329      	movs	r3, #41	; 0x29
 800f8da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f8e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f8ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8ec:	f107 0308 	add.w	r3, r7, #8
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7ff fe08 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f000 fa4f 	bl	800fd9c <SDMMC_GetCmdResp3>
 800f8fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f900:	69fb      	ldr	r3, [r7, #28]
}
 800f902:	4618      	mov	r0, r3
 800f904:	3720      	adds	r7, #32
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}

0800f90a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f90a:	b580      	push	{r7, lr}
 800f90c:	b088      	sub	sp, #32
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
 800f912:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f918:	2306      	movs	r3, #6
 800f91a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f91c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f920:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f922:	2300      	movs	r3, #0
 800f924:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f92a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f92c:	f107 0308 	add.w	r3, r7, #8
 800f930:	4619      	mov	r1, r3
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f7ff fde8 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f938:	f241 3288 	movw	r2, #5000	; 0x1388
 800f93c:	2106      	movs	r1, #6
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 f8f0 	bl	800fb24 <SDMMC_GetCmdResp1>
 800f944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f946:	69fb      	ldr	r3, [r7, #28]
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3720      	adds	r7, #32
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b088      	sub	sp, #32
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f958:	2300      	movs	r3, #0
 800f95a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f95c:	2333      	movs	r3, #51	; 0x33
 800f95e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f960:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f966:	2300      	movs	r3, #0
 800f968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f96a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f96e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f970:	f107 0308 	add.w	r3, r7, #8
 800f974:	4619      	mov	r1, r3
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7ff fdc6 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f97c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f980:	2133      	movs	r1, #51	; 0x33
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 f8ce 	bl	800fb24 <SDMMC_GetCmdResp1>
 800f988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f98a:	69fb      	ldr	r3, [r7, #28]
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3720      	adds	r7, #32
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b088      	sub	sp, #32
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f99c:	2300      	movs	r3, #0
 800f99e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f9a0:	2302      	movs	r3, #2
 800f9a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f9a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f9a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9b4:	f107 0308 	add.w	r3, r7, #8
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f7ff fda4 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 f9a1 	bl	800fd08 <SDMMC_GetCmdResp2>
 800f9c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9c8:	69fb      	ldr	r3, [r7, #28]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3720      	adds	r7, #32
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b088      	sub	sp, #32
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f9e0:	2309      	movs	r3, #9
 800f9e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f9e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f9e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9f4:	f107 0308 	add.w	r3, r7, #8
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7ff fd84 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 f981 	bl	800fd08 <SDMMC_GetCmdResp2>
 800fa06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa08:	69fb      	ldr	r3, [r7, #28]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3720      	adds	r7, #32
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}

0800fa12 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fa12:	b580      	push	{r7, lr}
 800fa14:	b088      	sub	sp, #32
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]
 800fa1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fa20:	2303      	movs	r3, #3
 800fa22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa34:	f107 0308 	add.w	r3, r7, #8
 800fa38:	4619      	mov	r1, r3
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7ff fd64 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fa40:	683a      	ldr	r2, [r7, #0]
 800fa42:	2103      	movs	r1, #3
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 f9e9 	bl	800fe1c <SDMMC_GetCmdResp6>
 800fa4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa4c:	69fb      	ldr	r3, [r7, #28]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3720      	adds	r7, #32
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b088      	sub	sp, #32
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
 800fa5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fa64:	230d      	movs	r3, #13
 800fa66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa78:	f107 0308 	add.w	r3, r7, #8
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f7ff fd42 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800fa84:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa88:	210d      	movs	r1, #13
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 f84a 	bl	800fb24 <SDMMC_GetCmdResp1>
 800fa90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa92:	69fb      	ldr	r3, [r7, #28]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3720      	adds	r7, #32
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b088      	sub	sp, #32
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800faa4:	2300      	movs	r3, #0
 800faa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800faa8:	230d      	movs	r3, #13
 800faaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800faac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fab2:	2300      	movs	r3, #0
 800fab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800faba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fabc:	f107 0308 	add.w	r3, r7, #8
 800fac0:	4619      	mov	r1, r3
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f7ff fd20 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800fac8:	f241 3288 	movw	r2, #5000	; 0x1388
 800facc:	210d      	movs	r1, #13
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 f828 	bl	800fb24 <SDMMC_GetCmdResp1>
 800fad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fad6:	69fb      	ldr	r3, [r7, #28]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3720      	adds	r7, #32
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b088      	sub	sp, #32
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800fae8:	2300      	movs	r3, #0
 800faea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800faec:	230b      	movs	r3, #11
 800faee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800faf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800faf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800faf6:	2300      	movs	r3, #0
 800faf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fafa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fafe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb00:	f107 0308 	add.w	r3, r7, #8
 800fb04:	4619      	mov	r1, r3
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f7ff fcfe 	bl	800f508 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800fb0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb10:	210b      	movs	r1, #11
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 f806 	bl	800fb24 <SDMMC_GetCmdResp1>
 800fb18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb1a:	69fb      	ldr	r3, [r7, #28]
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3720      	adds	r7, #32
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b088      	sub	sp, #32
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	607a      	str	r2, [r7, #4]
 800fb30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fb32:	4b70      	ldr	r3, [pc, #448]	; (800fcf4 <SDMMC_GetCmdResp1+0x1d0>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	4a70      	ldr	r2, [pc, #448]	; (800fcf8 <SDMMC_GetCmdResp1+0x1d4>)
 800fb38:	fba2 2303 	umull	r2, r3, r2, r3
 800fb3c:	0a5a      	lsrs	r2, r3, #9
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	fb02 f303 	mul.w	r3, r2, r3
 800fb44:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	1e5a      	subs	r2, r3, #1
 800fb4a:	61fa      	str	r2, [r7, #28]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d102      	bne.n	800fb56 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fb50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fb54:	e0c9      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb5a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800fb5c:	69ba      	ldr	r2, [r7, #24]
 800fb5e:	4b67      	ldr	r3, [pc, #412]	; (800fcfc <SDMMC_GetCmdResp1+0x1d8>)
 800fb60:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d0ef      	beq.n	800fb46 <SDMMC_GetCmdResp1+0x22>
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1ea      	bne.n	800fb46 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb74:	f003 0304 	and.w	r3, r3, #4
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d004      	beq.n	800fb86 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2204      	movs	r2, #4
 800fb80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb82:	2304      	movs	r3, #4
 800fb84:	e0b1      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb8a:	f003 0301 	and.w	r3, r3, #1
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d004      	beq.n	800fb9c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2201      	movs	r2, #1
 800fb96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb98:	2301      	movs	r3, #1
 800fb9a:	e0a6      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	4a58      	ldr	r2, [pc, #352]	; (800fd00 <SDMMC_GetCmdResp1+0x1dc>)
 800fba0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fba2:	68f8      	ldr	r0, [r7, #12]
 800fba4:	f7ff fcda 	bl	800f55c <SDMMC_GetCommandResponse>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	461a      	mov	r2, r3
 800fbac:	7afb      	ldrb	r3, [r7, #11]
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d001      	beq.n	800fbb6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e099      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f7ff fcdc 	bl	800f576 <SDMMC_GetResponse>
 800fbbe:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fbc0:	697a      	ldr	r2, [r7, #20]
 800fbc2:	4b50      	ldr	r3, [pc, #320]	; (800fd04 <SDMMC_GetCmdResp1+0x1e0>)
 800fbc4:	4013      	ands	r3, r2
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d101      	bne.n	800fbce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	e08d      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	da02      	bge.n	800fbda <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fbd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fbd8:	e087      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d001      	beq.n	800fbe8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fbe4:	2340      	movs	r3, #64	; 0x40
 800fbe6:	e080      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d001      	beq.n	800fbf6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fbf2:	2380      	movs	r3, #128	; 0x80
 800fbf4:	e079      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d002      	beq.n	800fc06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fc00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc04:	e071      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d002      	beq.n	800fc16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fc10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc14:	e069      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d002      	beq.n	800fc26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fc20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc24:	e061      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d002      	beq.n	800fc36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fc30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fc34:	e059      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d002      	beq.n	800fc46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fc40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc44:	e051      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d002      	beq.n	800fc56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fc50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fc54:	e049      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d002      	beq.n	800fc66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fc60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fc64:	e041      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d002      	beq.n	800fc76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fc70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc74:	e039      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d002      	beq.n	800fc86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fc80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fc84:	e031      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d002      	beq.n	800fc96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fc90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fc94:	e029      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fca0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fca4:	e021      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d002      	beq.n	800fcb6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fcb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fcb4:	e019      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d002      	beq.n	800fcc6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fcc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fcc4:	e011      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d002      	beq.n	800fcd6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fcd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fcd4:	e009      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	f003 0308 	and.w	r3, r3, #8
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d002      	beq.n	800fce6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fce0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fce4:	e001      	b.n	800fcea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3720      	adds	r7, #32
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	20000004 	.word	0x20000004
 800fcf8:	10624dd3 	.word	0x10624dd3
 800fcfc:	00200045 	.word	0x00200045
 800fd00:	002000c5 	.word	0x002000c5
 800fd04:	fdffe008 	.word	0xfdffe008

0800fd08 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd10:	4b1f      	ldr	r3, [pc, #124]	; (800fd90 <SDMMC_GetCmdResp2+0x88>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4a1f      	ldr	r2, [pc, #124]	; (800fd94 <SDMMC_GetCmdResp2+0x8c>)
 800fd16:	fba2 2303 	umull	r2, r3, r2, r3
 800fd1a:	0a5b      	lsrs	r3, r3, #9
 800fd1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd20:	fb02 f303 	mul.w	r3, r2, r3
 800fd24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	1e5a      	subs	r2, r3, #1
 800fd2a:	60fa      	str	r2, [r7, #12]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d102      	bne.n	800fd36 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd34:	e026      	b.n	800fd84 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d0ef      	beq.n	800fd26 <SDMMC_GetCmdResp2+0x1e>
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d1ea      	bne.n	800fd26 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd54:	f003 0304 	and.w	r3, r3, #4
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d004      	beq.n	800fd66 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2204      	movs	r2, #4
 800fd60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd62:	2304      	movs	r3, #4
 800fd64:	e00e      	b.n	800fd84 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd6a:	f003 0301 	and.w	r3, r3, #1
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d004      	beq.n	800fd7c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2201      	movs	r2, #1
 800fd76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e003      	b.n	800fd84 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	4a06      	ldr	r2, [pc, #24]	; (800fd98 <SDMMC_GetCmdResp2+0x90>)
 800fd80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3714      	adds	r7, #20
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr
 800fd90:	20000004 	.word	0x20000004
 800fd94:	10624dd3 	.word	0x10624dd3
 800fd98:	002000c5 	.word	0x002000c5

0800fd9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b085      	sub	sp, #20
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fda4:	4b1a      	ldr	r3, [pc, #104]	; (800fe10 <SDMMC_GetCmdResp3+0x74>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4a1a      	ldr	r2, [pc, #104]	; (800fe14 <SDMMC_GetCmdResp3+0x78>)
 800fdaa:	fba2 2303 	umull	r2, r3, r2, r3
 800fdae:	0a5b      	lsrs	r3, r3, #9
 800fdb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdb4:	fb02 f303 	mul.w	r3, r2, r3
 800fdb8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	1e5a      	subs	r2, r3, #1
 800fdbe:	60fa      	str	r2, [r7, #12]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d102      	bne.n	800fdca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fdc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fdc8:	e01b      	b.n	800fe02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d0ef      	beq.n	800fdba <SDMMC_GetCmdResp3+0x1e>
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d1ea      	bne.n	800fdba <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fde8:	f003 0304 	and.w	r3, r3, #4
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d004      	beq.n	800fdfa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2204      	movs	r2, #4
 800fdf4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fdf6:	2304      	movs	r3, #4
 800fdf8:	e003      	b.n	800fe02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	4a06      	ldr	r2, [pc, #24]	; (800fe18 <SDMMC_GetCmdResp3+0x7c>)
 800fdfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fe00:	2300      	movs	r3, #0
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3714      	adds	r7, #20
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	20000004 	.word	0x20000004
 800fe14:	10624dd3 	.word	0x10624dd3
 800fe18:	002000c5 	.word	0x002000c5

0800fe1c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b088      	sub	sp, #32
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60f8      	str	r0, [r7, #12]
 800fe24:	460b      	mov	r3, r1
 800fe26:	607a      	str	r2, [r7, #4]
 800fe28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe2a:	4b35      	ldr	r3, [pc, #212]	; (800ff00 <SDMMC_GetCmdResp6+0xe4>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	4a35      	ldr	r2, [pc, #212]	; (800ff04 <SDMMC_GetCmdResp6+0xe8>)
 800fe30:	fba2 2303 	umull	r2, r3, r2, r3
 800fe34:	0a5b      	lsrs	r3, r3, #9
 800fe36:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe3a:	fb02 f303 	mul.w	r3, r2, r3
 800fe3e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800fe40:	69fb      	ldr	r3, [r7, #28]
 800fe42:	1e5a      	subs	r2, r3, #1
 800fe44:	61fa      	str	r2, [r7, #28]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d102      	bne.n	800fe50 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe4e:	e052      	b.n	800fef6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe54:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d0ef      	beq.n	800fe40 <SDMMC_GetCmdResp6+0x24>
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d1ea      	bne.n	800fe40 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe6e:	f003 0304 	and.w	r3, r3, #4
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d004      	beq.n	800fe80 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	2204      	movs	r2, #4
 800fe7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe7c:	2304      	movs	r3, #4
 800fe7e:	e03a      	b.n	800fef6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe84:	f003 0301 	and.w	r3, r3, #1
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d004      	beq.n	800fe96 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2201      	movs	r2, #1
 800fe90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe92:	2301      	movs	r3, #1
 800fe94:	e02f      	b.n	800fef6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f7ff fb60 	bl	800f55c <SDMMC_GetCommandResponse>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	461a      	mov	r2, r3
 800fea0:	7afb      	ldrb	r3, [r7, #11]
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d001      	beq.n	800feaa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fea6:	2301      	movs	r3, #1
 800fea8:	e025      	b.n	800fef6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	4a16      	ldr	r2, [pc, #88]	; (800ff08 <SDMMC_GetCmdResp6+0xec>)
 800feae:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800feb0:	2100      	movs	r1, #0
 800feb2:	68f8      	ldr	r0, [r7, #12]
 800feb4:	f7ff fb5f 	bl	800f576 <SDMMC_GetResponse>
 800feb8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d106      	bne.n	800fed2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	0c1b      	lsrs	r3, r3, #16
 800fec8:	b29a      	uxth	r2, r3
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800fece:	2300      	movs	r3, #0
 800fed0:	e011      	b.n	800fef6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d002      	beq.n	800fee2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fedc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fee0:	e009      	b.n	800fef6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d002      	beq.n	800fef2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800feec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fef0:	e001      	b.n	800fef6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3720      	adds	r7, #32
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	20000004 	.word	0x20000004
 800ff04:	10624dd3 	.word	0x10624dd3
 800ff08:	002000c5 	.word	0x002000c5

0800ff0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b085      	sub	sp, #20
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ff14:	4b22      	ldr	r3, [pc, #136]	; (800ffa0 <SDMMC_GetCmdResp7+0x94>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	4a22      	ldr	r2, [pc, #136]	; (800ffa4 <SDMMC_GetCmdResp7+0x98>)
 800ff1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ff1e:	0a5b      	lsrs	r3, r3, #9
 800ff20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff24:	fb02 f303 	mul.w	r3, r2, r3
 800ff28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	1e5a      	subs	r2, r3, #1
 800ff2e:	60fa      	str	r2, [r7, #12]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d102      	bne.n	800ff3a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ff38:	e02c      	b.n	800ff94 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d0ef      	beq.n	800ff2a <SDMMC_GetCmdResp7+0x1e>
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d1ea      	bne.n	800ff2a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff58:	f003 0304 	and.w	r3, r3, #4
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d004      	beq.n	800ff6a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2204      	movs	r2, #4
 800ff64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff66:	2304      	movs	r3, #4
 800ff68:	e014      	b.n	800ff94 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff6e:	f003 0301 	and.w	r3, r3, #1
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d004      	beq.n	800ff80 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2201      	movs	r2, #1
 800ff7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	e009      	b.n	800ff94 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d002      	beq.n	800ff92 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2240      	movs	r2, #64	; 0x40
 800ff90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ff92:	2300      	movs	r3, #0

}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3714      	adds	r7, #20
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr
 800ffa0:	20000004 	.word	0x20000004
 800ffa4:	10624dd3 	.word	0x10624dd3

0800ffa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b085      	sub	sp, #20
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ffb0:	4b11      	ldr	r3, [pc, #68]	; (800fff8 <SDMMC_GetCmdError+0x50>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4a11      	ldr	r2, [pc, #68]	; (800fffc <SDMMC_GetCmdError+0x54>)
 800ffb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ffba:	0a5b      	lsrs	r3, r3, #9
 800ffbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffc0:	fb02 f303 	mul.w	r3, r2, r3
 800ffc4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	1e5a      	subs	r2, r3, #1
 800ffca:	60fa      	str	r2, [r7, #12]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d102      	bne.n	800ffd6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ffd4:	e009      	b.n	800ffea <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d0f1      	beq.n	800ffc6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4a06      	ldr	r2, [pc, #24]	; (8010000 <SDMMC_GetCmdError+0x58>)
 800ffe6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ffe8:	2300      	movs	r3, #0
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3714      	adds	r7, #20
 800ffee:	46bd      	mov	sp, r7
 800fff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff4:	4770      	bx	lr
 800fff6:	bf00      	nop
 800fff8:	20000004 	.word	0x20000004
 800fffc:	10624dd3 	.word	0x10624dd3
 8010000:	002000c5 	.word	0x002000c5

08010004 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010004:	b084      	sub	sp, #16
 8010006:	b580      	push	{r7, lr}
 8010008:	b084      	sub	sp, #16
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
 801000e:	f107 001c 	add.w	r0, r7, #28
 8010012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f001 faf6 	bl	8011614 <USB_CoreReset>
 8010028:	4603      	mov	r3, r0
 801002a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 801002c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801002e:	2b00      	cmp	r3, #0
 8010030:	d106      	bne.n	8010040 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010036:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	639a      	str	r2, [r3, #56]	; 0x38
 801003e:	e005      	b.n	801004c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010044:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 801004c:	7bfb      	ldrb	r3, [r7, #15]
}
 801004e:	4618      	mov	r0, r3
 8010050:	3710      	adds	r7, #16
 8010052:	46bd      	mov	sp, r7
 8010054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010058:	b004      	add	sp, #16
 801005a:	4770      	bx	lr

0801005c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801005c:	b480      	push	{r7}
 801005e:	b087      	sub	sp, #28
 8010060:	af00      	add	r7, sp, #0
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	4613      	mov	r3, r2
 8010068:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801006a:	79fb      	ldrb	r3, [r7, #7]
 801006c:	2b02      	cmp	r3, #2
 801006e:	d165      	bne.n	801013c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	4a3e      	ldr	r2, [pc, #248]	; (801016c <USB_SetTurnaroundTime+0x110>)
 8010074:	4293      	cmp	r3, r2
 8010076:	d906      	bls.n	8010086 <USB_SetTurnaroundTime+0x2a>
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	4a3d      	ldr	r2, [pc, #244]	; (8010170 <USB_SetTurnaroundTime+0x114>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d202      	bcs.n	8010086 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010080:	230f      	movs	r3, #15
 8010082:	617b      	str	r3, [r7, #20]
 8010084:	e05c      	b.n	8010140 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	4a39      	ldr	r2, [pc, #228]	; (8010170 <USB_SetTurnaroundTime+0x114>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d306      	bcc.n	801009c <USB_SetTurnaroundTime+0x40>
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	4a38      	ldr	r2, [pc, #224]	; (8010174 <USB_SetTurnaroundTime+0x118>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d202      	bcs.n	801009c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010096:	230e      	movs	r3, #14
 8010098:	617b      	str	r3, [r7, #20]
 801009a:	e051      	b.n	8010140 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	4a35      	ldr	r2, [pc, #212]	; (8010174 <USB_SetTurnaroundTime+0x118>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d306      	bcc.n	80100b2 <USB_SetTurnaroundTime+0x56>
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	4a34      	ldr	r2, [pc, #208]	; (8010178 <USB_SetTurnaroundTime+0x11c>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d202      	bcs.n	80100b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80100ac:	230d      	movs	r3, #13
 80100ae:	617b      	str	r3, [r7, #20]
 80100b0:	e046      	b.n	8010140 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	4a30      	ldr	r2, [pc, #192]	; (8010178 <USB_SetTurnaroundTime+0x11c>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d306      	bcc.n	80100c8 <USB_SetTurnaroundTime+0x6c>
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	4a2f      	ldr	r2, [pc, #188]	; (801017c <USB_SetTurnaroundTime+0x120>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d802      	bhi.n	80100c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80100c2:	230c      	movs	r3, #12
 80100c4:	617b      	str	r3, [r7, #20]
 80100c6:	e03b      	b.n	8010140 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	4a2c      	ldr	r2, [pc, #176]	; (801017c <USB_SetTurnaroundTime+0x120>)
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d906      	bls.n	80100de <USB_SetTurnaroundTime+0x82>
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	4a2b      	ldr	r2, [pc, #172]	; (8010180 <USB_SetTurnaroundTime+0x124>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d802      	bhi.n	80100de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80100d8:	230b      	movs	r3, #11
 80100da:	617b      	str	r3, [r7, #20]
 80100dc:	e030      	b.n	8010140 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	4a27      	ldr	r2, [pc, #156]	; (8010180 <USB_SetTurnaroundTime+0x124>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d906      	bls.n	80100f4 <USB_SetTurnaroundTime+0x98>
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	4a26      	ldr	r2, [pc, #152]	; (8010184 <USB_SetTurnaroundTime+0x128>)
 80100ea:	4293      	cmp	r3, r2
 80100ec:	d802      	bhi.n	80100f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80100ee:	230a      	movs	r3, #10
 80100f0:	617b      	str	r3, [r7, #20]
 80100f2:	e025      	b.n	8010140 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	4a23      	ldr	r2, [pc, #140]	; (8010184 <USB_SetTurnaroundTime+0x128>)
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d906      	bls.n	801010a <USB_SetTurnaroundTime+0xae>
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	4a22      	ldr	r2, [pc, #136]	; (8010188 <USB_SetTurnaroundTime+0x12c>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d202      	bcs.n	801010a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010104:	2309      	movs	r3, #9
 8010106:	617b      	str	r3, [r7, #20]
 8010108:	e01a      	b.n	8010140 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	4a1e      	ldr	r2, [pc, #120]	; (8010188 <USB_SetTurnaroundTime+0x12c>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d306      	bcc.n	8010120 <USB_SetTurnaroundTime+0xc4>
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	4a1d      	ldr	r2, [pc, #116]	; (801018c <USB_SetTurnaroundTime+0x130>)
 8010116:	4293      	cmp	r3, r2
 8010118:	d802      	bhi.n	8010120 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801011a:	2308      	movs	r3, #8
 801011c:	617b      	str	r3, [r7, #20]
 801011e:	e00f      	b.n	8010140 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	4a1a      	ldr	r2, [pc, #104]	; (801018c <USB_SetTurnaroundTime+0x130>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d906      	bls.n	8010136 <USB_SetTurnaroundTime+0xda>
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	4a19      	ldr	r2, [pc, #100]	; (8010190 <USB_SetTurnaroundTime+0x134>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d202      	bcs.n	8010136 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010130:	2307      	movs	r3, #7
 8010132:	617b      	str	r3, [r7, #20]
 8010134:	e004      	b.n	8010140 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010136:	2306      	movs	r3, #6
 8010138:	617b      	str	r3, [r7, #20]
 801013a:	e001      	b.n	8010140 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801013c:	2309      	movs	r3, #9
 801013e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	68db      	ldr	r3, [r3, #12]
 8010144:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	68da      	ldr	r2, [r3, #12]
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	029b      	lsls	r3, r3, #10
 8010154:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010158:	431a      	orrs	r2, r3
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801015e:	2300      	movs	r3, #0
}
 8010160:	4618      	mov	r0, r3
 8010162:	371c      	adds	r7, #28
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	00d8acbf 	.word	0x00d8acbf
 8010170:	00e4e1c0 	.word	0x00e4e1c0
 8010174:	00f42400 	.word	0x00f42400
 8010178:	01067380 	.word	0x01067380
 801017c:	011a499f 	.word	0x011a499f
 8010180:	01312cff 	.word	0x01312cff
 8010184:	014ca43f 	.word	0x014ca43f
 8010188:	016e3600 	.word	0x016e3600
 801018c:	01a6ab1f 	.word	0x01a6ab1f
 8010190:	01e84800 	.word	0x01e84800

08010194 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	689b      	ldr	r3, [r3, #8]
 80101a0:	f043 0201 	orr.w	r2, r3, #1
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80101a8:	2300      	movs	r3, #0
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	370c      	adds	r7, #12
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr

080101b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80101b6:	b480      	push	{r7}
 80101b8:	b083      	sub	sp, #12
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	689b      	ldr	r3, [r3, #8]
 80101c2:	f023 0201 	bic.w	r2, r3, #1
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	370c      	adds	r7, #12
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b084      	sub	sp, #16
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	460b      	mov	r3, r1
 80101e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80101e4:	2300      	movs	r3, #0
 80101e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80101f4:	78fb      	ldrb	r3, [r7, #3]
 80101f6:	2b01      	cmp	r3, #1
 80101f8:	d115      	bne.n	8010226 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	68db      	ldr	r3, [r3, #12]
 80101fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010206:	2001      	movs	r0, #1
 8010208:	f7f5 fdd6 	bl	8005db8 <HAL_Delay>
      ms++;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	3301      	adds	r3, #1
 8010210:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f001 f985 	bl	8011522 <USB_GetMode>
 8010218:	4603      	mov	r3, r0
 801021a:	2b01      	cmp	r3, #1
 801021c:	d01e      	beq.n	801025c <USB_SetCurrentMode+0x84>
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2b31      	cmp	r3, #49	; 0x31
 8010222:	d9f0      	bls.n	8010206 <USB_SetCurrentMode+0x2e>
 8010224:	e01a      	b.n	801025c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010226:	78fb      	ldrb	r3, [r7, #3]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d115      	bne.n	8010258 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010238:	2001      	movs	r0, #1
 801023a:	f7f5 fdbd 	bl	8005db8 <HAL_Delay>
      ms++;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	3301      	adds	r3, #1
 8010242:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f001 f96c 	bl	8011522 <USB_GetMode>
 801024a:	4603      	mov	r3, r0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d005      	beq.n	801025c <USB_SetCurrentMode+0x84>
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	2b31      	cmp	r3, #49	; 0x31
 8010254:	d9f0      	bls.n	8010238 <USB_SetCurrentMode+0x60>
 8010256:	e001      	b.n	801025c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010258:	2301      	movs	r3, #1
 801025a:	e005      	b.n	8010268 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2b32      	cmp	r3, #50	; 0x32
 8010260:	d101      	bne.n	8010266 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010262:	2301      	movs	r3, #1
 8010264:	e000      	b.n	8010268 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010266:	2300      	movs	r3, #0
}
 8010268:	4618      	mov	r0, r3
 801026a:	3710      	adds	r7, #16
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010270:	b084      	sub	sp, #16
 8010272:	b580      	push	{r7, lr}
 8010274:	b086      	sub	sp, #24
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801027e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010282:	2300      	movs	r3, #0
 8010284:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801028a:	2300      	movs	r3, #0
 801028c:	613b      	str	r3, [r7, #16]
 801028e:	e009      	b.n	80102a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	3340      	adds	r3, #64	; 0x40
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	4413      	add	r3, r2
 801029a:	2200      	movs	r2, #0
 801029c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	3301      	adds	r3, #1
 80102a2:	613b      	str	r3, [r7, #16]
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	2b0e      	cmp	r3, #14
 80102a8:	d9f2      	bls.n	8010290 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80102aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d11c      	bne.n	80102ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102be:	f043 0302 	orr.w	r3, r3, #2
 80102c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	601a      	str	r2, [r3, #0]
 80102e8:	e005      	b.n	80102f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80102fc:	461a      	mov	r2, r3
 80102fe:	2300      	movs	r3, #0
 8010300:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010308:	4619      	mov	r1, r3
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010310:	461a      	mov	r2, r3
 8010312:	680b      	ldr	r3, [r1, #0]
 8010314:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010316:	2103      	movs	r1, #3
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 f959 	bl	80105d0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801031e:	2110      	movs	r1, #16
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 f8f1 	bl	8010508 <USB_FlushTxFifo>
 8010326:	4603      	mov	r3, r0
 8010328:	2b00      	cmp	r3, #0
 801032a:	d001      	beq.n	8010330 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 801032c:	2301      	movs	r3, #1
 801032e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 f91d 	bl	8010570 <USB_FlushRxFifo>
 8010336:	4603      	mov	r3, r0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d001      	beq.n	8010340 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 801033c:	2301      	movs	r3, #1
 801033e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010346:	461a      	mov	r2, r3
 8010348:	2300      	movs	r3, #0
 801034a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010352:	461a      	mov	r2, r3
 8010354:	2300      	movs	r3, #0
 8010356:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801035e:	461a      	mov	r2, r3
 8010360:	2300      	movs	r3, #0
 8010362:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010364:	2300      	movs	r3, #0
 8010366:	613b      	str	r3, [r7, #16]
 8010368:	e043      	b.n	80103f2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	015a      	lsls	r2, r3, #5
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	4413      	add	r3, r2
 8010372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801037c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010380:	d118      	bne.n	80103b4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d10a      	bne.n	801039e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	015a      	lsls	r2, r3, #5
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	4413      	add	r3, r2
 8010390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010394:	461a      	mov	r2, r3
 8010396:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801039a:	6013      	str	r3, [r2, #0]
 801039c:	e013      	b.n	80103c6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	015a      	lsls	r2, r3, #5
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	4413      	add	r3, r2
 80103a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103aa:	461a      	mov	r2, r3
 80103ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80103b0:	6013      	str	r3, [r2, #0]
 80103b2:	e008      	b.n	80103c6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	015a      	lsls	r2, r3, #5
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	4413      	add	r3, r2
 80103bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103c0:	461a      	mov	r2, r3
 80103c2:	2300      	movs	r3, #0
 80103c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	015a      	lsls	r2, r3, #5
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	4413      	add	r3, r2
 80103ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103d2:	461a      	mov	r2, r3
 80103d4:	2300      	movs	r3, #0
 80103d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	015a      	lsls	r2, r3, #5
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	4413      	add	r3, r2
 80103e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103e4:	461a      	mov	r2, r3
 80103e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80103ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	3301      	adds	r3, #1
 80103f0:	613b      	str	r3, [r7, #16]
 80103f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f4:	693a      	ldr	r2, [r7, #16]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d3b7      	bcc.n	801036a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80103fa:	2300      	movs	r3, #0
 80103fc:	613b      	str	r3, [r7, #16]
 80103fe:	e043      	b.n	8010488 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	015a      	lsls	r2, r3, #5
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	4413      	add	r3, r2
 8010408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010416:	d118      	bne.n	801044a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d10a      	bne.n	8010434 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	015a      	lsls	r2, r3, #5
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	4413      	add	r3, r2
 8010426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801042a:	461a      	mov	r2, r3
 801042c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010430:	6013      	str	r3, [r2, #0]
 8010432:	e013      	b.n	801045c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	015a      	lsls	r2, r3, #5
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	4413      	add	r3, r2
 801043c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010440:	461a      	mov	r2, r3
 8010442:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010446:	6013      	str	r3, [r2, #0]
 8010448:	e008      	b.n	801045c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	015a      	lsls	r2, r3, #5
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	4413      	add	r3, r2
 8010452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010456:	461a      	mov	r2, r3
 8010458:	2300      	movs	r3, #0
 801045a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	015a      	lsls	r2, r3, #5
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	4413      	add	r3, r2
 8010464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010468:	461a      	mov	r2, r3
 801046a:	2300      	movs	r3, #0
 801046c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	015a      	lsls	r2, r3, #5
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	4413      	add	r3, r2
 8010476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801047a:	461a      	mov	r2, r3
 801047c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010480:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	3301      	adds	r3, #1
 8010486:	613b      	str	r3, [r7, #16]
 8010488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048a:	693a      	ldr	r2, [r7, #16]
 801048c:	429a      	cmp	r2, r3
 801048e:	d3b7      	bcc.n	8010400 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010496:	691b      	ldr	r3, [r3, #16]
 8010498:	68fa      	ldr	r2, [r7, #12]
 801049a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801049e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80104b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	f043 0210 	orr.w	r2, r3, #16
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	699a      	ldr	r2, [r3, #24]
 80104c2:	4b10      	ldr	r3, [pc, #64]	; (8010504 <USB_DevInit+0x294>)
 80104c4:	4313      	orrs	r3, r2
 80104c6:	687a      	ldr	r2, [r7, #4]
 80104c8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80104ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d005      	beq.n	80104dc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	699b      	ldr	r3, [r3, #24]
 80104d4:	f043 0208 	orr.w	r2, r3, #8
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80104dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d107      	bne.n	80104f2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	699b      	ldr	r3, [r3, #24]
 80104e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80104ea:	f043 0304 	orr.w	r3, r3, #4
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80104f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3718      	adds	r7, #24
 80104f8:	46bd      	mov	sp, r7
 80104fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80104fe:	b004      	add	sp, #16
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop
 8010504:	803c3800 	.word	0x803c3800

08010508 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010508:	b480      	push	{r7}
 801050a:	b085      	sub	sp, #20
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010512:	2300      	movs	r3, #0
 8010514:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	3301      	adds	r3, #1
 801051a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	4a13      	ldr	r2, [pc, #76]	; (801056c <USB_FlushTxFifo+0x64>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d901      	bls.n	8010528 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010524:	2303      	movs	r3, #3
 8010526:	e01b      	b.n	8010560 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	691b      	ldr	r3, [r3, #16]
 801052c:	2b00      	cmp	r3, #0
 801052e:	daf2      	bge.n	8010516 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010530:	2300      	movs	r3, #0
 8010532:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	019b      	lsls	r3, r3, #6
 8010538:	f043 0220 	orr.w	r2, r3, #32
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	3301      	adds	r3, #1
 8010544:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	4a08      	ldr	r2, [pc, #32]	; (801056c <USB_FlushTxFifo+0x64>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d901      	bls.n	8010552 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801054e:	2303      	movs	r3, #3
 8010550:	e006      	b.n	8010560 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	691b      	ldr	r3, [r3, #16]
 8010556:	f003 0320 	and.w	r3, r3, #32
 801055a:	2b20      	cmp	r3, #32
 801055c:	d0f0      	beq.n	8010540 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801055e:	2300      	movs	r3, #0
}
 8010560:	4618      	mov	r0, r3
 8010562:	3714      	adds	r7, #20
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr
 801056c:	00030d40 	.word	0x00030d40

08010570 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010570:	b480      	push	{r7}
 8010572:	b085      	sub	sp, #20
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010578:	2300      	movs	r3, #0
 801057a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	3301      	adds	r3, #1
 8010580:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	4a11      	ldr	r2, [pc, #68]	; (80105cc <USB_FlushRxFifo+0x5c>)
 8010586:	4293      	cmp	r3, r2
 8010588:	d901      	bls.n	801058e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801058a:	2303      	movs	r3, #3
 801058c:	e018      	b.n	80105c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	691b      	ldr	r3, [r3, #16]
 8010592:	2b00      	cmp	r3, #0
 8010594:	daf2      	bge.n	801057c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010596:	2300      	movs	r3, #0
 8010598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2210      	movs	r2, #16
 801059e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	3301      	adds	r3, #1
 80105a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	4a08      	ldr	r2, [pc, #32]	; (80105cc <USB_FlushRxFifo+0x5c>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d901      	bls.n	80105b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80105ae:	2303      	movs	r3, #3
 80105b0:	e006      	b.n	80105c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	691b      	ldr	r3, [r3, #16]
 80105b6:	f003 0310 	and.w	r3, r3, #16
 80105ba:	2b10      	cmp	r3, #16
 80105bc:	d0f0      	beq.n	80105a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80105be:	2300      	movs	r3, #0
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3714      	adds	r7, #20
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr
 80105cc:	00030d40 	.word	0x00030d40

080105d0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b085      	sub	sp, #20
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	460b      	mov	r3, r1
 80105da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	78fb      	ldrb	r3, [r7, #3]
 80105ea:	68f9      	ldr	r1, [r7, #12]
 80105ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105f0:	4313      	orrs	r3, r2
 80105f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80105f4:	2300      	movs	r3, #0
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3714      	adds	r7, #20
 80105fa:	46bd      	mov	sp, r7
 80105fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010600:	4770      	bx	lr

08010602 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010602:	b480      	push	{r7}
 8010604:	b087      	sub	sp, #28
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010614:	689b      	ldr	r3, [r3, #8]
 8010616:	f003 0306 	and.w	r3, r3, #6
 801061a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b02      	cmp	r3, #2
 8010620:	d002      	beq.n	8010628 <USB_GetDevSpeed+0x26>
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2b06      	cmp	r3, #6
 8010626:	d102      	bne.n	801062e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010628:	2302      	movs	r3, #2
 801062a:	75fb      	strb	r3, [r7, #23]
 801062c:	e001      	b.n	8010632 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 801062e:	230f      	movs	r3, #15
 8010630:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010632:	7dfb      	ldrb	r3, [r7, #23]
}
 8010634:	4618      	mov	r0, r3
 8010636:	371c      	adds	r7, #28
 8010638:	46bd      	mov	sp, r7
 801063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063e:	4770      	bx	lr

08010640 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010640:	b480      	push	{r7}
 8010642:	b085      	sub	sp, #20
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	785b      	ldrb	r3, [r3, #1]
 8010658:	2b01      	cmp	r3, #1
 801065a:	d13a      	bne.n	80106d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010662:	69da      	ldr	r2, [r3, #28]
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	f003 030f 	and.w	r3, r3, #15
 801066c:	2101      	movs	r1, #1
 801066e:	fa01 f303 	lsl.w	r3, r1, r3
 8010672:	b29b      	uxth	r3, r3
 8010674:	68f9      	ldr	r1, [r7, #12]
 8010676:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801067a:	4313      	orrs	r3, r2
 801067c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	015a      	lsls	r2, r3, #5
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	4413      	add	r3, r2
 8010686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010690:	2b00      	cmp	r3, #0
 8010692:	d155      	bne.n	8010740 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	015a      	lsls	r2, r3, #5
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	4413      	add	r3, r2
 801069c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	68db      	ldr	r3, [r3, #12]
 80106a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	791b      	ldrb	r3, [r3, #4]
 80106ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80106b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	059b      	lsls	r3, r3, #22
 80106b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80106b8:	4313      	orrs	r3, r2
 80106ba:	68ba      	ldr	r2, [r7, #8]
 80106bc:	0151      	lsls	r1, r2, #5
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	440a      	add	r2, r1
 80106c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106ce:	6013      	str	r3, [r2, #0]
 80106d0:	e036      	b.n	8010740 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106d8:	69da      	ldr	r2, [r3, #28]
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	f003 030f 	and.w	r3, r3, #15
 80106e2:	2101      	movs	r1, #1
 80106e4:	fa01 f303 	lsl.w	r3, r1, r3
 80106e8:	041b      	lsls	r3, r3, #16
 80106ea:	68f9      	ldr	r1, [r7, #12]
 80106ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106f0:	4313      	orrs	r3, r2
 80106f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	015a      	lsls	r2, r3, #5
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	4413      	add	r3, r2
 80106fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010706:	2b00      	cmp	r3, #0
 8010708:	d11a      	bne.n	8010740 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	015a      	lsls	r2, r3, #5
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	4413      	add	r3, r2
 8010712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010716:	681a      	ldr	r2, [r3, #0]
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	791b      	ldrb	r3, [r3, #4]
 8010724:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010726:	430b      	orrs	r3, r1
 8010728:	4313      	orrs	r3, r2
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	0151      	lsls	r1, r2, #5
 801072e:	68fa      	ldr	r2, [r7, #12]
 8010730:	440a      	add	r2, r1
 8010732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801073a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801073e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3714      	adds	r7, #20
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr
	...

08010750 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010750:	b480      	push	{r7}
 8010752:	b085      	sub	sp, #20
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	785b      	ldrb	r3, [r3, #1]
 8010768:	2b01      	cmp	r3, #1
 801076a:	d161      	bne.n	8010830 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	015a      	lsls	r2, r3, #5
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	4413      	add	r3, r2
 8010774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801077e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010782:	d11f      	bne.n	80107c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	015a      	lsls	r2, r3, #5
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	4413      	add	r3, r2
 801078c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	68ba      	ldr	r2, [r7, #8]
 8010794:	0151      	lsls	r1, r2, #5
 8010796:	68fa      	ldr	r2, [r7, #12]
 8010798:	440a      	add	r2, r1
 801079a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801079e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80107a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	015a      	lsls	r2, r3, #5
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	4413      	add	r3, r2
 80107ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	68ba      	ldr	r2, [r7, #8]
 80107b4:	0151      	lsls	r1, r2, #5
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	440a      	add	r2, r1
 80107ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80107c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	f003 030f 	and.w	r3, r3, #15
 80107d4:	2101      	movs	r1, #1
 80107d6:	fa01 f303 	lsl.w	r3, r1, r3
 80107da:	b29b      	uxth	r3, r3
 80107dc:	43db      	mvns	r3, r3
 80107de:	68f9      	ldr	r1, [r7, #12]
 80107e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80107e4:	4013      	ands	r3, r2
 80107e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107ee:	69da      	ldr	r2, [r3, #28]
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	f003 030f 	and.w	r3, r3, #15
 80107f8:	2101      	movs	r1, #1
 80107fa:	fa01 f303 	lsl.w	r3, r1, r3
 80107fe:	b29b      	uxth	r3, r3
 8010800:	43db      	mvns	r3, r3
 8010802:	68f9      	ldr	r1, [r7, #12]
 8010804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010808:	4013      	ands	r3, r2
 801080a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	015a      	lsls	r2, r3, #5
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	4413      	add	r3, r2
 8010814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	0159      	lsls	r1, r3, #5
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	440b      	add	r3, r1
 8010822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010826:	4619      	mov	r1, r3
 8010828:	4b35      	ldr	r3, [pc, #212]	; (8010900 <USB_DeactivateEndpoint+0x1b0>)
 801082a:	4013      	ands	r3, r2
 801082c:	600b      	str	r3, [r1, #0]
 801082e:	e060      	b.n	80108f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	015a      	lsls	r2, r3, #5
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	4413      	add	r3, r2
 8010838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010846:	d11f      	bne.n	8010888 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	015a      	lsls	r2, r3, #5
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	4413      	add	r3, r2
 8010850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	68ba      	ldr	r2, [r7, #8]
 8010858:	0151      	lsls	r1, r2, #5
 801085a:	68fa      	ldr	r2, [r7, #12]
 801085c:	440a      	add	r2, r1
 801085e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010866:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	015a      	lsls	r2, r3, #5
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	4413      	add	r3, r2
 8010870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	68ba      	ldr	r2, [r7, #8]
 8010878:	0151      	lsls	r1, r2, #5
 801087a:	68fa      	ldr	r2, [r7, #12]
 801087c:	440a      	add	r2, r1
 801087e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801088e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	f003 030f 	and.w	r3, r3, #15
 8010898:	2101      	movs	r1, #1
 801089a:	fa01 f303 	lsl.w	r3, r1, r3
 801089e:	041b      	lsls	r3, r3, #16
 80108a0:	43db      	mvns	r3, r3
 80108a2:	68f9      	ldr	r1, [r7, #12]
 80108a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80108a8:	4013      	ands	r3, r2
 80108aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108b2:	69da      	ldr	r2, [r3, #28]
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	f003 030f 	and.w	r3, r3, #15
 80108bc:	2101      	movs	r1, #1
 80108be:	fa01 f303 	lsl.w	r3, r1, r3
 80108c2:	041b      	lsls	r3, r3, #16
 80108c4:	43db      	mvns	r3, r3
 80108c6:	68f9      	ldr	r1, [r7, #12]
 80108c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80108cc:	4013      	ands	r3, r2
 80108ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	015a      	lsls	r2, r3, #5
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	4413      	add	r3, r2
 80108d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	0159      	lsls	r1, r3, #5
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	440b      	add	r3, r1
 80108e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108ea:	4619      	mov	r1, r3
 80108ec:	4b05      	ldr	r3, [pc, #20]	; (8010904 <USB_DeactivateEndpoint+0x1b4>)
 80108ee:	4013      	ands	r3, r2
 80108f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80108f2:	2300      	movs	r3, #0
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3714      	adds	r7, #20
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr
 8010900:	ec337800 	.word	0xec337800
 8010904:	eff37800 	.word	0xeff37800

08010908 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b086      	sub	sp, #24
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	785b      	ldrb	r3, [r3, #1]
 8010920:	2b01      	cmp	r3, #1
 8010922:	f040 810a 	bne.w	8010b3a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	699b      	ldr	r3, [r3, #24]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d132      	bne.n	8010994 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	015a      	lsls	r2, r3, #5
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	4413      	add	r3, r2
 8010936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801093a:	691b      	ldr	r3, [r3, #16]
 801093c:	693a      	ldr	r2, [r7, #16]
 801093e:	0151      	lsls	r1, r2, #5
 8010940:	697a      	ldr	r2, [r7, #20]
 8010942:	440a      	add	r2, r1
 8010944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010948:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801094c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	015a      	lsls	r2, r3, #5
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	4413      	add	r3, r2
 801095a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801095e:	691b      	ldr	r3, [r3, #16]
 8010960:	693a      	ldr	r2, [r7, #16]
 8010962:	0151      	lsls	r1, r2, #5
 8010964:	697a      	ldr	r2, [r7, #20]
 8010966:	440a      	add	r2, r1
 8010968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801096c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	015a      	lsls	r2, r3, #5
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	4413      	add	r3, r2
 801097a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801097e:	691b      	ldr	r3, [r3, #16]
 8010980:	693a      	ldr	r2, [r7, #16]
 8010982:	0151      	lsls	r1, r2, #5
 8010984:	697a      	ldr	r2, [r7, #20]
 8010986:	440a      	add	r2, r1
 8010988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801098c:	0cdb      	lsrs	r3, r3, #19
 801098e:	04db      	lsls	r3, r3, #19
 8010990:	6113      	str	r3, [r2, #16]
 8010992:	e074      	b.n	8010a7e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	015a      	lsls	r2, r3, #5
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	4413      	add	r3, r2
 801099c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109a0:	691b      	ldr	r3, [r3, #16]
 80109a2:	693a      	ldr	r2, [r7, #16]
 80109a4:	0151      	lsls	r1, r2, #5
 80109a6:	697a      	ldr	r2, [r7, #20]
 80109a8:	440a      	add	r2, r1
 80109aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109ae:	0cdb      	lsrs	r3, r3, #19
 80109b0:	04db      	lsls	r3, r3, #19
 80109b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	015a      	lsls	r2, r3, #5
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	4413      	add	r3, r2
 80109bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109c0:	691b      	ldr	r3, [r3, #16]
 80109c2:	693a      	ldr	r2, [r7, #16]
 80109c4:	0151      	lsls	r1, r2, #5
 80109c6:	697a      	ldr	r2, [r7, #20]
 80109c8:	440a      	add	r2, r1
 80109ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80109d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80109d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	015a      	lsls	r2, r3, #5
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	4413      	add	r3, r2
 80109e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	6999      	ldr	r1, [r3, #24]
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	68db      	ldr	r3, [r3, #12]
 80109ee:	440b      	add	r3, r1
 80109f0:	1e59      	subs	r1, r3, #1
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	68db      	ldr	r3, [r3, #12]
 80109f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80109fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80109fc:	4b9e      	ldr	r3, [pc, #632]	; (8010c78 <USB_EPStartXfer+0x370>)
 80109fe:	400b      	ands	r3, r1
 8010a00:	6939      	ldr	r1, [r7, #16]
 8010a02:	0148      	lsls	r0, r1, #5
 8010a04:	6979      	ldr	r1, [r7, #20]
 8010a06:	4401      	add	r1, r0
 8010a08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	015a      	lsls	r2, r3, #5
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	4413      	add	r3, r2
 8010a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a1c:	691a      	ldr	r2, [r3, #16]
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	699b      	ldr	r3, [r3, #24]
 8010a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a26:	6939      	ldr	r1, [r7, #16]
 8010a28:	0148      	lsls	r0, r1, #5
 8010a2a:	6979      	ldr	r1, [r7, #20]
 8010a2c:	4401      	add	r1, r0
 8010a2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010a32:	4313      	orrs	r3, r2
 8010a34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	791b      	ldrb	r3, [r3, #4]
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d11f      	bne.n	8010a7e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	015a      	lsls	r2, r3, #5
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	4413      	add	r3, r2
 8010a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a4a:	691b      	ldr	r3, [r3, #16]
 8010a4c:	693a      	ldr	r2, [r7, #16]
 8010a4e:	0151      	lsls	r1, r2, #5
 8010a50:	697a      	ldr	r2, [r7, #20]
 8010a52:	440a      	add	r2, r1
 8010a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010a5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	015a      	lsls	r2, r3, #5
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	4413      	add	r3, r2
 8010a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a6a:	691b      	ldr	r3, [r3, #16]
 8010a6c:	693a      	ldr	r2, [r7, #16]
 8010a6e:	0151      	lsls	r1, r2, #5
 8010a70:	697a      	ldr	r2, [r7, #20]
 8010a72:	440a      	add	r2, r1
 8010a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010a7c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	015a      	lsls	r2, r3, #5
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	4413      	add	r3, r2
 8010a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	693a      	ldr	r2, [r7, #16]
 8010a8e:	0151      	lsls	r1, r2, #5
 8010a90:	697a      	ldr	r2, [r7, #20]
 8010a92:	440a      	add	r2, r1
 8010a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010a9c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	791b      	ldrb	r3, [r3, #4]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d015      	beq.n	8010ad2 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	699b      	ldr	r3, [r3, #24]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f000 8106 	beq.w	8010cbc <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	f003 030f 	and.w	r3, r3, #15
 8010ac0:	2101      	movs	r1, #1
 8010ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ac6:	6979      	ldr	r1, [r7, #20]
 8010ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010acc:	4313      	orrs	r3, r2
 8010ace:	634b      	str	r3, [r1, #52]	; 0x34
 8010ad0:	e0f4      	b.n	8010cbc <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ad8:	689b      	ldr	r3, [r3, #8]
 8010ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d110      	bne.n	8010b04 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	015a      	lsls	r2, r3, #5
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	4413      	add	r3, r2
 8010aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	693a      	ldr	r2, [r7, #16]
 8010af2:	0151      	lsls	r1, r2, #5
 8010af4:	697a      	ldr	r2, [r7, #20]
 8010af6:	440a      	add	r2, r1
 8010af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010afc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010b00:	6013      	str	r3, [r2, #0]
 8010b02:	e00f      	b.n	8010b24 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	015a      	lsls	r2, r3, #5
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	4413      	add	r3, r2
 8010b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	693a      	ldr	r2, [r7, #16]
 8010b14:	0151      	lsls	r1, r2, #5
 8010b16:	697a      	ldr	r2, [r7, #20]
 8010b18:	440a      	add	r2, r1
 8010b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b22:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	6919      	ldr	r1, [r3, #16]
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	781a      	ldrb	r2, [r3, #0]
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	699b      	ldr	r3, [r3, #24]
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f000 fa94 	bl	8011060 <USB_WritePacket>
 8010b38:	e0c0      	b.n	8010cbc <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	015a      	lsls	r2, r3, #5
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	4413      	add	r3, r2
 8010b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b46:	691b      	ldr	r3, [r3, #16]
 8010b48:	693a      	ldr	r2, [r7, #16]
 8010b4a:	0151      	lsls	r1, r2, #5
 8010b4c:	697a      	ldr	r2, [r7, #20]
 8010b4e:	440a      	add	r2, r1
 8010b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b54:	0cdb      	lsrs	r3, r3, #19
 8010b56:	04db      	lsls	r3, r3, #19
 8010b58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	015a      	lsls	r2, r3, #5
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	4413      	add	r3, r2
 8010b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b66:	691b      	ldr	r3, [r3, #16]
 8010b68:	693a      	ldr	r2, [r7, #16]
 8010b6a:	0151      	lsls	r1, r2, #5
 8010b6c:	697a      	ldr	r2, [r7, #20]
 8010b6e:	440a      	add	r2, r1
 8010b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010b78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010b7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	699b      	ldr	r3, [r3, #24]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d123      	bne.n	8010bce <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	015a      	lsls	r2, r3, #5
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	4413      	add	r3, r2
 8010b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b92:	691a      	ldr	r2, [r3, #16]
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	68db      	ldr	r3, [r3, #12]
 8010b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010b9c:	6939      	ldr	r1, [r7, #16]
 8010b9e:	0148      	lsls	r0, r1, #5
 8010ba0:	6979      	ldr	r1, [r7, #20]
 8010ba2:	4401      	add	r1, r0
 8010ba4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010ba8:	4313      	orrs	r3, r2
 8010baa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	015a      	lsls	r2, r3, #5
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bb8:	691b      	ldr	r3, [r3, #16]
 8010bba:	693a      	ldr	r2, [r7, #16]
 8010bbc:	0151      	lsls	r1, r2, #5
 8010bbe:	697a      	ldr	r2, [r7, #20]
 8010bc0:	440a      	add	r2, r1
 8010bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010bca:	6113      	str	r3, [r2, #16]
 8010bcc:	e037      	b.n	8010c3e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	699a      	ldr	r2, [r3, #24]
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	1e5a      	subs	r2, r3, #1
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8010be2:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	89fa      	ldrh	r2, [r7, #14]
 8010bea:	fb03 f202 	mul.w	r2, r3, r2
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	015a      	lsls	r2, r3, #5
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	4413      	add	r3, r2
 8010bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bfe:	691a      	ldr	r2, [r3, #16]
 8010c00:	89fb      	ldrh	r3, [r7, #14]
 8010c02:	04d9      	lsls	r1, r3, #19
 8010c04:	4b1c      	ldr	r3, [pc, #112]	; (8010c78 <USB_EPStartXfer+0x370>)
 8010c06:	400b      	ands	r3, r1
 8010c08:	6939      	ldr	r1, [r7, #16]
 8010c0a:	0148      	lsls	r0, r1, #5
 8010c0c:	6979      	ldr	r1, [r7, #20]
 8010c0e:	4401      	add	r1, r0
 8010c10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010c14:	4313      	orrs	r3, r2
 8010c16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	015a      	lsls	r2, r3, #5
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	4413      	add	r3, r2
 8010c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c24:	691a      	ldr	r2, [r3, #16]
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	69db      	ldr	r3, [r3, #28]
 8010c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010c2e:	6939      	ldr	r1, [r7, #16]
 8010c30:	0148      	lsls	r0, r1, #5
 8010c32:	6979      	ldr	r1, [r7, #20]
 8010c34:	4401      	add	r1, r0
 8010c36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	791b      	ldrb	r3, [r3, #4]
 8010c42:	2b01      	cmp	r3, #1
 8010c44:	d12a      	bne.n	8010c9c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c4c:	689b      	ldr	r3, [r3, #8]
 8010c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d112      	bne.n	8010c7c <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	015a      	lsls	r2, r3, #5
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	693a      	ldr	r2, [r7, #16]
 8010c66:	0151      	lsls	r1, r2, #5
 8010c68:	697a      	ldr	r2, [r7, #20]
 8010c6a:	440a      	add	r2, r1
 8010c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010c74:	6013      	str	r3, [r2, #0]
 8010c76:	e011      	b.n	8010c9c <USB_EPStartXfer+0x394>
 8010c78:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	015a      	lsls	r2, r3, #5
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	4413      	add	r3, r2
 8010c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	693a      	ldr	r2, [r7, #16]
 8010c8c:	0151      	lsls	r1, r2, #5
 8010c8e:	697a      	ldr	r2, [r7, #20]
 8010c90:	440a      	add	r2, r1
 8010c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	015a      	lsls	r2, r3, #5
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	4413      	add	r3, r2
 8010ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	693a      	ldr	r2, [r7, #16]
 8010cac:	0151      	lsls	r1, r2, #5
 8010cae:	697a      	ldr	r2, [r7, #20]
 8010cb0:	440a      	add	r2, r1
 8010cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010cb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010cba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010cbc:	2300      	movs	r3, #0
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3718      	adds	r7, #24
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop

08010cc8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	785b      	ldrb	r3, [r3, #1]
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	f040 80ab 	bne.w	8010e3c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	699b      	ldr	r3, [r3, #24]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d132      	bne.n	8010d54 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	015a      	lsls	r2, r3, #5
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	4413      	add	r3, r2
 8010cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cfa:	691b      	ldr	r3, [r3, #16]
 8010cfc:	68ba      	ldr	r2, [r7, #8]
 8010cfe:	0151      	lsls	r1, r2, #5
 8010d00:	68fa      	ldr	r2, [r7, #12]
 8010d02:	440a      	add	r2, r1
 8010d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010d0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010d10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	015a      	lsls	r2, r3, #5
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	4413      	add	r3, r2
 8010d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d1e:	691b      	ldr	r3, [r3, #16]
 8010d20:	68ba      	ldr	r2, [r7, #8]
 8010d22:	0151      	lsls	r1, r2, #5
 8010d24:	68fa      	ldr	r2, [r7, #12]
 8010d26:	440a      	add	r2, r1
 8010d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010d30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	015a      	lsls	r2, r3, #5
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	4413      	add	r3, r2
 8010d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d3e:	691b      	ldr	r3, [r3, #16]
 8010d40:	68ba      	ldr	r2, [r7, #8]
 8010d42:	0151      	lsls	r1, r2, #5
 8010d44:	68fa      	ldr	r2, [r7, #12]
 8010d46:	440a      	add	r2, r1
 8010d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d4c:	0cdb      	lsrs	r3, r3, #19
 8010d4e:	04db      	lsls	r3, r3, #19
 8010d50:	6113      	str	r3, [r2, #16]
 8010d52:	e04e      	b.n	8010df2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	015a      	lsls	r2, r3, #5
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	4413      	add	r3, r2
 8010d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d60:	691b      	ldr	r3, [r3, #16]
 8010d62:	68ba      	ldr	r2, [r7, #8]
 8010d64:	0151      	lsls	r1, r2, #5
 8010d66:	68fa      	ldr	r2, [r7, #12]
 8010d68:	440a      	add	r2, r1
 8010d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d6e:	0cdb      	lsrs	r3, r3, #19
 8010d70:	04db      	lsls	r3, r3, #19
 8010d72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	015a      	lsls	r2, r3, #5
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d80:	691b      	ldr	r3, [r3, #16]
 8010d82:	68ba      	ldr	r2, [r7, #8]
 8010d84:	0151      	lsls	r1, r2, #5
 8010d86:	68fa      	ldr	r2, [r7, #12]
 8010d88:	440a      	add	r2, r1
 8010d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010d92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010d96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	699a      	ldr	r2, [r3, #24]
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	68db      	ldr	r3, [r3, #12]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d903      	bls.n	8010dac <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	68da      	ldr	r2, [r3, #12]
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	015a      	lsls	r2, r3, #5
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	4413      	add	r3, r2
 8010db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010db8:	691b      	ldr	r3, [r3, #16]
 8010dba:	68ba      	ldr	r2, [r7, #8]
 8010dbc:	0151      	lsls	r1, r2, #5
 8010dbe:	68fa      	ldr	r2, [r7, #12]
 8010dc0:	440a      	add	r2, r1
 8010dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010dc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010dca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	015a      	lsls	r2, r3, #5
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	4413      	add	r3, r2
 8010dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dd8:	691a      	ldr	r2, [r3, #16]
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	699b      	ldr	r3, [r3, #24]
 8010dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010de2:	68b9      	ldr	r1, [r7, #8]
 8010de4:	0148      	lsls	r0, r1, #5
 8010de6:	68f9      	ldr	r1, [r7, #12]
 8010de8:	4401      	add	r1, r0
 8010dea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010dee:	4313      	orrs	r3, r2
 8010df0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	015a      	lsls	r2, r3, #5
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	4413      	add	r3, r2
 8010dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	68ba      	ldr	r2, [r7, #8]
 8010e02:	0151      	lsls	r1, r2, #5
 8010e04:	68fa      	ldr	r2, [r7, #12]
 8010e06:	440a      	add	r2, r1
 8010e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010e10:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	699b      	ldr	r3, [r3, #24]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d071      	beq.n	8010efe <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	f003 030f 	and.w	r3, r3, #15
 8010e2a:	2101      	movs	r1, #1
 8010e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8010e30:	68f9      	ldr	r1, [r7, #12]
 8010e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010e36:	4313      	orrs	r3, r2
 8010e38:	634b      	str	r3, [r1, #52]	; 0x34
 8010e3a:	e060      	b.n	8010efe <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	015a      	lsls	r2, r3, #5
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	4413      	add	r3, r2
 8010e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e48:	691b      	ldr	r3, [r3, #16]
 8010e4a:	68ba      	ldr	r2, [r7, #8]
 8010e4c:	0151      	lsls	r1, r2, #5
 8010e4e:	68fa      	ldr	r2, [r7, #12]
 8010e50:	440a      	add	r2, r1
 8010e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e56:	0cdb      	lsrs	r3, r3, #19
 8010e58:	04db      	lsls	r3, r3, #19
 8010e5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	015a      	lsls	r2, r3, #5
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	4413      	add	r3, r2
 8010e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e68:	691b      	ldr	r3, [r3, #16]
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	0151      	lsls	r1, r2, #5
 8010e6e:	68fa      	ldr	r2, [r7, #12]
 8010e70:	440a      	add	r2, r1
 8010e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010e7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010e7e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	699b      	ldr	r3, [r3, #24]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d003      	beq.n	8010e90 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	68da      	ldr	r2, [r3, #12]
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	68da      	ldr	r2, [r3, #12]
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	015a      	lsls	r2, r3, #5
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	4413      	add	r3, r2
 8010ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ea4:	691b      	ldr	r3, [r3, #16]
 8010ea6:	68ba      	ldr	r2, [r7, #8]
 8010ea8:	0151      	lsls	r1, r2, #5
 8010eaa:	68fa      	ldr	r2, [r7, #12]
 8010eac:	440a      	add	r2, r1
 8010eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010eb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	015a      	lsls	r2, r3, #5
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	4413      	add	r3, r2
 8010ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ec4:	691a      	ldr	r2, [r3, #16]
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	69db      	ldr	r3, [r3, #28]
 8010eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010ece:	68b9      	ldr	r1, [r7, #8]
 8010ed0:	0148      	lsls	r0, r1, #5
 8010ed2:	68f9      	ldr	r1, [r7, #12]
 8010ed4:	4401      	add	r1, r0
 8010ed6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010eda:	4313      	orrs	r3, r2
 8010edc:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	015a      	lsls	r2, r3, #5
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	68ba      	ldr	r2, [r7, #8]
 8010eee:	0151      	lsls	r1, r2, #5
 8010ef0:	68fa      	ldr	r2, [r7, #12]
 8010ef2:	440a      	add	r2, r1
 8010ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ef8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010efc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010efe:	2300      	movs	r3, #0
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3714      	adds	r7, #20
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b087      	sub	sp, #28
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010f16:	2300      	movs	r3, #0
 8010f18:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	785b      	ldrb	r3, [r3, #1]
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d14a      	bne.n	8010fc0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	781b      	ldrb	r3, [r3, #0]
 8010f2e:	015a      	lsls	r2, r3, #5
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	4413      	add	r3, r2
 8010f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f42:	f040 8086 	bne.w	8011052 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	015a      	lsls	r2, r3, #5
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	4413      	add	r3, r2
 8010f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	683a      	ldr	r2, [r7, #0]
 8010f58:	7812      	ldrb	r2, [r2, #0]
 8010f5a:	0151      	lsls	r1, r2, #5
 8010f5c:	693a      	ldr	r2, [r7, #16]
 8010f5e:	440a      	add	r2, r1
 8010f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010f68:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	015a      	lsls	r2, r3, #5
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	4413      	add	r3, r2
 8010f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	683a      	ldr	r2, [r7, #0]
 8010f7c:	7812      	ldrb	r2, [r2, #0]
 8010f7e:	0151      	lsls	r1, r2, #5
 8010f80:	693a      	ldr	r2, [r7, #16]
 8010f82:	440a      	add	r2, r1
 8010f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010f8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	3301      	adds	r3, #1
 8010f92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f242 7210 	movw	r2, #10000	; 0x2710
 8010f9a:	4293      	cmp	r3, r2
 8010f9c:	d902      	bls.n	8010fa4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	75fb      	strb	r3, [r7, #23]
          break;
 8010fa2:	e056      	b.n	8011052 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	015a      	lsls	r2, r3, #5
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	4413      	add	r3, r2
 8010fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fbc:	d0e7      	beq.n	8010f8e <USB_EPStopXfer+0x82>
 8010fbe:	e048      	b.n	8011052 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	015a      	lsls	r2, r3, #5
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	4413      	add	r3, r2
 8010fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fd8:	d13b      	bne.n	8011052 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	015a      	lsls	r2, r3, #5
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	4413      	add	r3, r2
 8010fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	683a      	ldr	r2, [r7, #0]
 8010fec:	7812      	ldrb	r2, [r2, #0]
 8010fee:	0151      	lsls	r1, r2, #5
 8010ff0:	693a      	ldr	r2, [r7, #16]
 8010ff2:	440a      	add	r2, r1
 8010ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ff8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010ffc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	015a      	lsls	r2, r3, #5
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	4413      	add	r3, r2
 8011008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	683a      	ldr	r2, [r7, #0]
 8011010:	7812      	ldrb	r2, [r2, #0]
 8011012:	0151      	lsls	r1, r2, #5
 8011014:	693a      	ldr	r2, [r7, #16]
 8011016:	440a      	add	r2, r1
 8011018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801101c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011020:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	3301      	adds	r3, #1
 8011026:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f242 7210 	movw	r2, #10000	; 0x2710
 801102e:	4293      	cmp	r3, r2
 8011030:	d902      	bls.n	8011038 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011032:	2301      	movs	r3, #1
 8011034:	75fb      	strb	r3, [r7, #23]
          break;
 8011036:	e00c      	b.n	8011052 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	015a      	lsls	r2, r3, #5
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	4413      	add	r3, r2
 8011042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801104c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011050:	d0e7      	beq.n	8011022 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011052:	7dfb      	ldrb	r3, [r7, #23]
}
 8011054:	4618      	mov	r0, r3
 8011056:	371c      	adds	r7, #28
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8011060:	b480      	push	{r7}
 8011062:	b089      	sub	sp, #36	; 0x24
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	4611      	mov	r1, r2
 801106c:	461a      	mov	r2, r3
 801106e:	460b      	mov	r3, r1
 8011070:	71fb      	strb	r3, [r7, #7]
 8011072:	4613      	mov	r3, r2
 8011074:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 801107e:	88bb      	ldrh	r3, [r7, #4]
 8011080:	3303      	adds	r3, #3
 8011082:	089b      	lsrs	r3, r3, #2
 8011084:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8011086:	2300      	movs	r3, #0
 8011088:	61bb      	str	r3, [r7, #24]
 801108a:	e018      	b.n	80110be <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801108c:	79fb      	ldrb	r3, [r7, #7]
 801108e:	031a      	lsls	r2, r3, #12
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	4413      	add	r3, r2
 8011094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011098:	461a      	mov	r2, r3
 801109a:	69fb      	ldr	r3, [r7, #28]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	6013      	str	r3, [r2, #0]
    pSrc++;
 80110a0:	69fb      	ldr	r3, [r7, #28]
 80110a2:	3301      	adds	r3, #1
 80110a4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80110a6:	69fb      	ldr	r3, [r7, #28]
 80110a8:	3301      	adds	r3, #1
 80110aa:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80110ac:	69fb      	ldr	r3, [r7, #28]
 80110ae:	3301      	adds	r3, #1
 80110b0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80110b2:	69fb      	ldr	r3, [r7, #28]
 80110b4:	3301      	adds	r3, #1
 80110b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80110b8:	69bb      	ldr	r3, [r7, #24]
 80110ba:	3301      	adds	r3, #1
 80110bc:	61bb      	str	r3, [r7, #24]
 80110be:	69ba      	ldr	r2, [r7, #24]
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d3e2      	bcc.n	801108c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80110c6:	2300      	movs	r3, #0
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3724      	adds	r7, #36	; 0x24
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr

080110d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b08b      	sub	sp, #44	; 0x2c
 80110d8:	af00      	add	r7, sp, #0
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	60b9      	str	r1, [r7, #8]
 80110de:	4613      	mov	r3, r2
 80110e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80110ea:	88fb      	ldrh	r3, [r7, #6]
 80110ec:	089b      	lsrs	r3, r3, #2
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80110f2:	88fb      	ldrh	r3, [r7, #6]
 80110f4:	f003 0303 	and.w	r3, r3, #3
 80110f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80110fa:	2300      	movs	r3, #0
 80110fc:	623b      	str	r3, [r7, #32]
 80110fe:	e014      	b.n	801112a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011100:	69bb      	ldr	r3, [r7, #24]
 8011102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110a:	601a      	str	r2, [r3, #0]
    pDest++;
 801110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110e:	3301      	adds	r3, #1
 8011110:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011114:	3301      	adds	r3, #1
 8011116:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111a:	3301      	adds	r3, #1
 801111c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011120:	3301      	adds	r3, #1
 8011122:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011124:	6a3b      	ldr	r3, [r7, #32]
 8011126:	3301      	adds	r3, #1
 8011128:	623b      	str	r3, [r7, #32]
 801112a:	6a3a      	ldr	r2, [r7, #32]
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	429a      	cmp	r2, r3
 8011130:	d3e6      	bcc.n	8011100 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011132:	8bfb      	ldrh	r3, [r7, #30]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d01e      	beq.n	8011176 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011138:	2300      	movs	r3, #0
 801113a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801113c:	69bb      	ldr	r3, [r7, #24]
 801113e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011142:	461a      	mov	r2, r3
 8011144:	f107 0310 	add.w	r3, r7, #16
 8011148:	6812      	ldr	r2, [r2, #0]
 801114a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801114c:	693a      	ldr	r2, [r7, #16]
 801114e:	6a3b      	ldr	r3, [r7, #32]
 8011150:	b2db      	uxtb	r3, r3
 8011152:	00db      	lsls	r3, r3, #3
 8011154:	fa22 f303 	lsr.w	r3, r2, r3
 8011158:	b2da      	uxtb	r2, r3
 801115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801115c:	701a      	strb	r2, [r3, #0]
      i++;
 801115e:	6a3b      	ldr	r3, [r7, #32]
 8011160:	3301      	adds	r3, #1
 8011162:	623b      	str	r3, [r7, #32]
      pDest++;
 8011164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011166:	3301      	adds	r3, #1
 8011168:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801116a:	8bfb      	ldrh	r3, [r7, #30]
 801116c:	3b01      	subs	r3, #1
 801116e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011170:	8bfb      	ldrh	r3, [r7, #30]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1ea      	bne.n	801114c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011178:	4618      	mov	r0, r3
 801117a:	372c      	adds	r7, #44	; 0x2c
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011184:	b480      	push	{r7}
 8011186:	b085      	sub	sp, #20
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	785b      	ldrb	r3, [r3, #1]
 801119c:	2b01      	cmp	r3, #1
 801119e:	d12c      	bne.n	80111fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	015a      	lsls	r2, r3, #5
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	4413      	add	r3, r2
 80111a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	db12      	blt.n	80111d8 <USB_EPSetStall+0x54>
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d00f      	beq.n	80111d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	015a      	lsls	r2, r3, #5
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	4413      	add	r3, r2
 80111c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	68ba      	ldr	r2, [r7, #8]
 80111c8:	0151      	lsls	r1, r2, #5
 80111ca:	68fa      	ldr	r2, [r7, #12]
 80111cc:	440a      	add	r2, r1
 80111ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80111d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80111d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	015a      	lsls	r2, r3, #5
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	4413      	add	r3, r2
 80111e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	68ba      	ldr	r2, [r7, #8]
 80111e8:	0151      	lsls	r1, r2, #5
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	440a      	add	r2, r1
 80111ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80111f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80111f6:	6013      	str	r3, [r2, #0]
 80111f8:	e02b      	b.n	8011252 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	015a      	lsls	r2, r3, #5
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	4413      	add	r3, r2
 8011202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	db12      	blt.n	8011232 <USB_EPSetStall+0xae>
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d00f      	beq.n	8011232 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	015a      	lsls	r2, r3, #5
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	4413      	add	r3, r2
 801121a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	68ba      	ldr	r2, [r7, #8]
 8011222:	0151      	lsls	r1, r2, #5
 8011224:	68fa      	ldr	r2, [r7, #12]
 8011226:	440a      	add	r2, r1
 8011228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801122c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011230:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	015a      	lsls	r2, r3, #5
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	4413      	add	r3, r2
 801123a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	68ba      	ldr	r2, [r7, #8]
 8011242:	0151      	lsls	r1, r2, #5
 8011244:	68fa      	ldr	r2, [r7, #12]
 8011246:	440a      	add	r2, r1
 8011248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801124c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011250:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011252:	2300      	movs	r3, #0
}
 8011254:	4618      	mov	r0, r3
 8011256:	3714      	adds	r7, #20
 8011258:	46bd      	mov	sp, r7
 801125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125e:	4770      	bx	lr

08011260 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011260:	b480      	push	{r7}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	785b      	ldrb	r3, [r3, #1]
 8011278:	2b01      	cmp	r3, #1
 801127a:	d128      	bne.n	80112ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	015a      	lsls	r2, r3, #5
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	4413      	add	r3, r2
 8011284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	68ba      	ldr	r2, [r7, #8]
 801128c:	0151      	lsls	r1, r2, #5
 801128e:	68fa      	ldr	r2, [r7, #12]
 8011290:	440a      	add	r2, r1
 8011292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801129a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	791b      	ldrb	r3, [r3, #4]
 80112a0:	2b03      	cmp	r3, #3
 80112a2:	d003      	beq.n	80112ac <USB_EPClearStall+0x4c>
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	791b      	ldrb	r3, [r3, #4]
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	d138      	bne.n	801131e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	015a      	lsls	r2, r3, #5
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	4413      	add	r3, r2
 80112b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	68ba      	ldr	r2, [r7, #8]
 80112bc:	0151      	lsls	r1, r2, #5
 80112be:	68fa      	ldr	r2, [r7, #12]
 80112c0:	440a      	add	r2, r1
 80112c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80112ca:	6013      	str	r3, [r2, #0]
 80112cc:	e027      	b.n	801131e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	015a      	lsls	r2, r3, #5
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	4413      	add	r3, r2
 80112d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	68ba      	ldr	r2, [r7, #8]
 80112de:	0151      	lsls	r1, r2, #5
 80112e0:	68fa      	ldr	r2, [r7, #12]
 80112e2:	440a      	add	r2, r1
 80112e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80112e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80112ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	791b      	ldrb	r3, [r3, #4]
 80112f2:	2b03      	cmp	r3, #3
 80112f4:	d003      	beq.n	80112fe <USB_EPClearStall+0x9e>
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	791b      	ldrb	r3, [r3, #4]
 80112fa:	2b02      	cmp	r3, #2
 80112fc:	d10f      	bne.n	801131e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	015a      	lsls	r2, r3, #5
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	4413      	add	r3, r2
 8011306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	68ba      	ldr	r2, [r7, #8]
 801130e:	0151      	lsls	r1, r2, #5
 8011310:	68fa      	ldr	r2, [r7, #12]
 8011312:	440a      	add	r2, r1
 8011314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801131c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801131e:	2300      	movs	r3, #0
}
 8011320:	4618      	mov	r0, r3
 8011322:	3714      	adds	r7, #20
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr

0801132c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801132c:	b480      	push	{r7}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	460b      	mov	r3, r1
 8011336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801134a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801134e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	78fb      	ldrb	r3, [r7, #3]
 801135a:	011b      	lsls	r3, r3, #4
 801135c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011360:	68f9      	ldr	r1, [r7, #12]
 8011362:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011366:	4313      	orrs	r3, r2
 8011368:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801136a:	2300      	movs	r3, #0
}
 801136c:	4618      	mov	r0, r3
 801136e:	3714      	adds	r7, #20
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr

08011378 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011378:	b480      	push	{r7}
 801137a:	b085      	sub	sp, #20
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	68fa      	ldr	r2, [r7, #12]
 801138e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011392:	f023 0303 	bic.w	r3, r3, #3
 8011396:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	68fa      	ldr	r2, [r7, #12]
 80113a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80113a6:	f023 0302 	bic.w	r3, r3, #2
 80113aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3714      	adds	r7, #20
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr

080113ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80113ba:	b480      	push	{r7}
 80113bc:	b085      	sub	sp, #20
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	68fa      	ldr	r2, [r7, #12]
 80113d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80113d4:	f023 0303 	bic.w	r3, r3, #3
 80113d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	68fa      	ldr	r2, [r7, #12]
 80113e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80113e8:	f043 0302 	orr.w	r3, r3, #2
 80113ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3714      	adds	r7, #20
 80113f4:	46bd      	mov	sp, r7
 80113f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fa:	4770      	bx	lr

080113fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b085      	sub	sp, #20
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	695b      	ldr	r3, [r3, #20]
 8011408:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	699b      	ldr	r3, [r3, #24]
 801140e:	68fa      	ldr	r2, [r7, #12]
 8011410:	4013      	ands	r3, r2
 8011412:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011414:	68fb      	ldr	r3, [r7, #12]
}
 8011416:	4618      	mov	r0, r3
 8011418:	3714      	adds	r7, #20
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr

08011422 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011422:	b480      	push	{r7}
 8011424:	b085      	sub	sp, #20
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011434:	699b      	ldr	r3, [r3, #24]
 8011436:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801143e:	69db      	ldr	r3, [r3, #28]
 8011440:	68ba      	ldr	r2, [r7, #8]
 8011442:	4013      	ands	r3, r2
 8011444:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	0c1b      	lsrs	r3, r3, #16
}
 801144a:	4618      	mov	r0, r3
 801144c:	3714      	adds	r7, #20
 801144e:	46bd      	mov	sp, r7
 8011450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011454:	4770      	bx	lr

08011456 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011456:	b480      	push	{r7}
 8011458:	b085      	sub	sp, #20
 801145a:	af00      	add	r7, sp, #0
 801145c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011468:	699b      	ldr	r3, [r3, #24]
 801146a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011472:	69db      	ldr	r3, [r3, #28]
 8011474:	68ba      	ldr	r2, [r7, #8]
 8011476:	4013      	ands	r3, r2
 8011478:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	b29b      	uxth	r3, r3
}
 801147e:	4618      	mov	r0, r3
 8011480:	3714      	adds	r7, #20
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801148a:	b480      	push	{r7}
 801148c:	b085      	sub	sp, #20
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
 8011492:	460b      	mov	r3, r1
 8011494:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801149a:	78fb      	ldrb	r3, [r7, #3]
 801149c:	015a      	lsls	r2, r3, #5
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	4413      	add	r3, r2
 80114a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114a6:	689b      	ldr	r3, [r3, #8]
 80114a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114b0:	695b      	ldr	r3, [r3, #20]
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	4013      	ands	r3, r2
 80114b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80114b8:	68bb      	ldr	r3, [r7, #8]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3714      	adds	r7, #20
 80114be:	46bd      	mov	sp, r7
 80114c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c4:	4770      	bx	lr

080114c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80114c6:	b480      	push	{r7}
 80114c8:	b087      	sub	sp, #28
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
 80114ce:	460b      	mov	r3, r1
 80114d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114dc:	691b      	ldr	r3, [r3, #16]
 80114de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80114ea:	78fb      	ldrb	r3, [r7, #3]
 80114ec:	f003 030f 	and.w	r3, r3, #15
 80114f0:	68fa      	ldr	r2, [r7, #12]
 80114f2:	fa22 f303 	lsr.w	r3, r2, r3
 80114f6:	01db      	lsls	r3, r3, #7
 80114f8:	b2db      	uxtb	r3, r3
 80114fa:	693a      	ldr	r2, [r7, #16]
 80114fc:	4313      	orrs	r3, r2
 80114fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011500:	78fb      	ldrb	r3, [r7, #3]
 8011502:	015a      	lsls	r2, r3, #5
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	4413      	add	r3, r2
 8011508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801150c:	689b      	ldr	r3, [r3, #8]
 801150e:	693a      	ldr	r2, [r7, #16]
 8011510:	4013      	ands	r3, r2
 8011512:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011514:	68bb      	ldr	r3, [r7, #8]
}
 8011516:	4618      	mov	r0, r3
 8011518:	371c      	adds	r7, #28
 801151a:	46bd      	mov	sp, r7
 801151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011520:	4770      	bx	lr

08011522 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011522:	b480      	push	{r7}
 8011524:	b083      	sub	sp, #12
 8011526:	af00      	add	r7, sp, #0
 8011528:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	695b      	ldr	r3, [r3, #20]
 801152e:	f003 0301 	and.w	r3, r3, #1
}
 8011532:	4618      	mov	r0, r3
 8011534:	370c      	adds	r7, #12
 8011536:	46bd      	mov	sp, r7
 8011538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153c:	4770      	bx	lr

0801153e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801153e:	b480      	push	{r7}
 8011540:	b085      	sub	sp, #20
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	68fa      	ldr	r2, [r7, #12]
 8011554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011558:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801155c:	f023 0307 	bic.w	r3, r3, #7
 8011560:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	68fa      	ldr	r2, [r7, #12]
 801156c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011574:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011576:	2300      	movs	r3, #0
}
 8011578:	4618      	mov	r0, r3
 801157a:	3714      	adds	r7, #20
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr

08011584 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8011584:	b480      	push	{r7}
 8011586:	b085      	sub	sp, #20
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	333c      	adds	r3, #60	; 0x3c
 8011596:	3304      	adds	r3, #4
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	4a1c      	ldr	r2, [pc, #112]	; (8011610 <USB_EP0_OutStart+0x8c>)
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d90a      	bls.n	80115ba <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80115b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80115b4:	d101      	bne.n	80115ba <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80115b6:	2300      	movs	r3, #0
 80115b8:	e024      	b.n	8011604 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115c0:	461a      	mov	r2, r3
 80115c2:	2300      	movs	r3, #0
 80115c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115cc:	691b      	ldr	r3, [r3, #16]
 80115ce:	68fa      	ldr	r2, [r7, #12]
 80115d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80115d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115e0:	691b      	ldr	r3, [r3, #16]
 80115e2:	68fa      	ldr	r2, [r7, #12]
 80115e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115e8:	f043 0318 	orr.w	r3, r3, #24
 80115ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115f4:	691b      	ldr	r3, [r3, #16]
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011600:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8011602:	2300      	movs	r3, #0
}
 8011604:	4618      	mov	r0, r3
 8011606:	3714      	adds	r7, #20
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr
 8011610:	4f54300a 	.word	0x4f54300a

08011614 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011614:	b480      	push	{r7}
 8011616:	b085      	sub	sp, #20
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801161c:	2300      	movs	r3, #0
 801161e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	3301      	adds	r3, #1
 8011624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	4a13      	ldr	r2, [pc, #76]	; (8011678 <USB_CoreReset+0x64>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d901      	bls.n	8011632 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801162e:	2303      	movs	r3, #3
 8011630:	e01b      	b.n	801166a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	691b      	ldr	r3, [r3, #16]
 8011636:	2b00      	cmp	r3, #0
 8011638:	daf2      	bge.n	8011620 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801163a:	2300      	movs	r3, #0
 801163c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	691b      	ldr	r3, [r3, #16]
 8011642:	f043 0201 	orr.w	r2, r3, #1
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	3301      	adds	r3, #1
 801164e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	4a09      	ldr	r2, [pc, #36]	; (8011678 <USB_CoreReset+0x64>)
 8011654:	4293      	cmp	r3, r2
 8011656:	d901      	bls.n	801165c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011658:	2303      	movs	r3, #3
 801165a:	e006      	b.n	801166a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	691b      	ldr	r3, [r3, #16]
 8011660:	f003 0301 	and.w	r3, r3, #1
 8011664:	2b01      	cmp	r3, #1
 8011666:	d0f0      	beq.n	801164a <USB_CoreReset+0x36>

  return HAL_OK;
 8011668:	2300      	movs	r3, #0
}
 801166a:	4618      	mov	r0, r3
 801166c:	3714      	adds	r7, #20
 801166e:	46bd      	mov	sp, r7
 8011670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011674:	4770      	bx	lr
 8011676:	bf00      	nop
 8011678:	00030d40 	.word	0x00030d40

0801167c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011680:	4904      	ldr	r1, [pc, #16]	; (8011694 <MX_FATFS_Init+0x18>)
 8011682:	4805      	ldr	r0, [pc, #20]	; (8011698 <MX_FATFS_Init+0x1c>)
 8011684:	f004 fd46 	bl	8016114 <FATFS_LinkDriver>
 8011688:	4603      	mov	r3, r0
 801168a:	461a      	mov	r2, r3
 801168c:	4b03      	ldr	r3, [pc, #12]	; (801169c <MX_FATFS_Init+0x20>)
 801168e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011690:	bf00      	nop
 8011692:	bd80      	pop	{r7, pc}
 8011694:	20000ec8 	.word	0x20000ec8
 8011698:	08019ffc 	.word	0x08019ffc
 801169c:	20000ec4 	.word	0x20000ec4

080116a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80116a0:	b480      	push	{r7}
 80116a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80116a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr

080116b0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b082      	sub	sp, #8
 80116b4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80116b6:	2300      	movs	r3, #0
 80116b8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80116ba:	f000 f879 	bl	80117b0 <BSP_SD_IsDetected>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	d001      	beq.n	80116c8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80116c4:	2302      	movs	r3, #2
 80116c6:	e012      	b.n	80116ee <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80116c8:	480b      	ldr	r0, [pc, #44]	; (80116f8 <BSP_SD_Init+0x48>)
 80116ca:	f7fa f8d1 	bl	800b870 <HAL_SD_Init>
 80116ce:	4603      	mov	r3, r0
 80116d0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80116d2:	79fb      	ldrb	r3, [r7, #7]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d109      	bne.n	80116ec <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80116d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80116dc:	4806      	ldr	r0, [pc, #24]	; (80116f8 <BSP_SD_Init+0x48>)
 80116de:	f7fa ff9d 	bl	800c61c <HAL_SD_ConfigWideBusOperation>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d001      	beq.n	80116ec <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80116e8:	2301      	movs	r3, #1
 80116ea:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80116ec:	79fb      	ldrb	r3, [r7, #7]
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3708      	adds	r7, #8
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	20000620 	.word	0x20000620

080116fc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b088      	sub	sp, #32
 8011700:	af02      	add	r7, sp, #8
 8011702:	60f8      	str	r0, [r7, #12]
 8011704:	60b9      	str	r1, [r7, #8]
 8011706:	607a      	str	r2, [r7, #4]
 8011708:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801170a:	2300      	movs	r3, #0
 801170c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	9300      	str	r3, [sp, #0]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	68ba      	ldr	r2, [r7, #8]
 8011716:	68f9      	ldr	r1, [r7, #12]
 8011718:	4806      	ldr	r0, [pc, #24]	; (8011734 <BSP_SD_ReadBlocks+0x38>)
 801171a:	f7fa f9d1 	bl	800bac0 <HAL_SD_ReadBlocks>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	d001      	beq.n	8011728 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011724:	2301      	movs	r3, #1
 8011726:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011728:	7dfb      	ldrb	r3, [r7, #23]
}
 801172a:	4618      	mov	r0, r3
 801172c:	3718      	adds	r7, #24
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}
 8011732:	bf00      	nop
 8011734:	20000620 	.word	0x20000620

08011738 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b088      	sub	sp, #32
 801173c:	af02      	add	r7, sp, #8
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
 8011744:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011746:	2300      	movs	r3, #0
 8011748:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	9300      	str	r3, [sp, #0]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	68ba      	ldr	r2, [r7, #8]
 8011752:	68f9      	ldr	r1, [r7, #12]
 8011754:	4806      	ldr	r0, [pc, #24]	; (8011770 <BSP_SD_WriteBlocks+0x38>)
 8011756:	f7fa fb45 	bl	800bde4 <HAL_SD_WriteBlocks>
 801175a:	4603      	mov	r3, r0
 801175c:	2b00      	cmp	r3, #0
 801175e:	d001      	beq.n	8011764 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011760:	2301      	movs	r3, #1
 8011762:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011764:	7dfb      	ldrb	r3, [r7, #23]
}
 8011766:	4618      	mov	r0, r3
 8011768:	3718      	adds	r7, #24
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
 801176e:	bf00      	nop
 8011770:	20000620 	.word	0x20000620

08011774 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011778:	4805      	ldr	r0, [pc, #20]	; (8011790 <BSP_SD_GetCardState+0x1c>)
 801177a:	f7fb f863 	bl	800c844 <HAL_SD_GetCardState>
 801177e:	4603      	mov	r3, r0
 8011780:	2b04      	cmp	r3, #4
 8011782:	bf14      	ite	ne
 8011784:	2301      	movne	r3, #1
 8011786:	2300      	moveq	r3, #0
 8011788:	b2db      	uxtb	r3, r3
}
 801178a:	4618      	mov	r0, r3
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	20000620 	.word	0x20000620

08011794 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b082      	sub	sp, #8
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801179c:	6879      	ldr	r1, [r7, #4]
 801179e:	4803      	ldr	r0, [pc, #12]	; (80117ac <BSP_SD_GetCardInfo+0x18>)
 80117a0:	f7fa ff10 	bl	800c5c4 <HAL_SD_GetCardInfo>
}
 80117a4:	bf00      	nop
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	20000620 	.word	0x20000620

080117b0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80117b6:	2301      	movs	r3, #1
 80117b8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80117ba:	f000 f80b 	bl	80117d4 <BSP_PlatformIsDetected>
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d101      	bne.n	80117c8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80117c4:	2300      	movs	r3, #0
 80117c6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80117c8:	79fb      	ldrb	r3, [r7, #7]
 80117ca:	b2db      	uxtb	r3, r3
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3708      	adds	r7, #8
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}

080117d4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80117da:	2301      	movs	r3, #1
 80117dc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80117de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80117e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80117e6:	f7f4 ff5b 	bl	80066a0 <HAL_GPIO_ReadPin>
 80117ea:	4603      	mov	r3, r0
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d001      	beq.n	80117f4 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 80117f0:	2300      	movs	r3, #0
 80117f2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80117f4:	79fb      	ldrb	r3, [r7, #7]
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3708      	adds	r7, #8
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
	...

08011800 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
 8011806:	4603      	mov	r3, r0
 8011808:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801180a:	4b0b      	ldr	r3, [pc, #44]	; (8011838 <SD_CheckStatus+0x38>)
 801180c:	2201      	movs	r2, #1
 801180e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011810:	f7ff ffb0 	bl	8011774 <BSP_SD_GetCardState>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d107      	bne.n	801182a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801181a:	4b07      	ldr	r3, [pc, #28]	; (8011838 <SD_CheckStatus+0x38>)
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	b2db      	uxtb	r3, r3
 8011820:	f023 0301 	bic.w	r3, r3, #1
 8011824:	b2da      	uxtb	r2, r3
 8011826:	4b04      	ldr	r3, [pc, #16]	; (8011838 <SD_CheckStatus+0x38>)
 8011828:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801182a:	4b03      	ldr	r3, [pc, #12]	; (8011838 <SD_CheckStatus+0x38>)
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	b2db      	uxtb	r3, r3
}
 8011830:	4618      	mov	r0, r3
 8011832:	3708      	adds	r7, #8
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	2000000d 	.word	0x2000000d

0801183c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
 8011842:	4603      	mov	r3, r0
 8011844:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011846:	4b0b      	ldr	r3, [pc, #44]	; (8011874 <SD_initialize+0x38>)
 8011848:	2201      	movs	r2, #1
 801184a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801184c:	f7ff ff30 	bl	80116b0 <BSP_SD_Init>
 8011850:	4603      	mov	r3, r0
 8011852:	2b00      	cmp	r3, #0
 8011854:	d107      	bne.n	8011866 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8011856:	79fb      	ldrb	r3, [r7, #7]
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff ffd1 	bl	8011800 <SD_CheckStatus>
 801185e:	4603      	mov	r3, r0
 8011860:	461a      	mov	r2, r3
 8011862:	4b04      	ldr	r3, [pc, #16]	; (8011874 <SD_initialize+0x38>)
 8011864:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011866:	4b03      	ldr	r3, [pc, #12]	; (8011874 <SD_initialize+0x38>)
 8011868:	781b      	ldrb	r3, [r3, #0]
 801186a:	b2db      	uxtb	r3, r3
}
 801186c:	4618      	mov	r0, r3
 801186e:	3708      	adds	r7, #8
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}
 8011874:	2000000d 	.word	0x2000000d

08011878 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
 801187e:	4603      	mov	r3, r0
 8011880:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011882:	79fb      	ldrb	r3, [r7, #7]
 8011884:	4618      	mov	r0, r3
 8011886:	f7ff ffbb 	bl	8011800 <SD_CheckStatus>
 801188a:	4603      	mov	r3, r0
}
 801188c:	4618      	mov	r0, r3
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}

08011894 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b086      	sub	sp, #24
 8011898:	af00      	add	r7, sp, #0
 801189a:	60b9      	str	r1, [r7, #8]
 801189c:	607a      	str	r2, [r7, #4]
 801189e:	603b      	str	r3, [r7, #0]
 80118a0:	4603      	mov	r3, r0
 80118a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80118a4:	2301      	movs	r3, #1
 80118a6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80118a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118ac:	683a      	ldr	r2, [r7, #0]
 80118ae:	6879      	ldr	r1, [r7, #4]
 80118b0:	68b8      	ldr	r0, [r7, #8]
 80118b2:	f7ff ff23 	bl	80116fc <BSP_SD_ReadBlocks>
 80118b6:	4603      	mov	r3, r0
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d107      	bne.n	80118cc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80118bc:	bf00      	nop
 80118be:	f7ff ff59 	bl	8011774 <BSP_SD_GetCardState>
 80118c2:	4603      	mov	r3, r0
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d1fa      	bne.n	80118be <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80118c8:	2300      	movs	r3, #0
 80118ca:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80118cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	3718      	adds	r7, #24
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}

080118d6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80118d6:	b580      	push	{r7, lr}
 80118d8:	b086      	sub	sp, #24
 80118da:	af00      	add	r7, sp, #0
 80118dc:	60b9      	str	r1, [r7, #8]
 80118de:	607a      	str	r2, [r7, #4]
 80118e0:	603b      	str	r3, [r7, #0]
 80118e2:	4603      	mov	r3, r0
 80118e4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80118e6:	2301      	movs	r3, #1
 80118e8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80118ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118ee:	683a      	ldr	r2, [r7, #0]
 80118f0:	6879      	ldr	r1, [r7, #4]
 80118f2:	68b8      	ldr	r0, [r7, #8]
 80118f4:	f7ff ff20 	bl	8011738 <BSP_SD_WriteBlocks>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d107      	bne.n	801190e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80118fe:	bf00      	nop
 8011900:	f7ff ff38 	bl	8011774 <BSP_SD_GetCardState>
 8011904:	4603      	mov	r3, r0
 8011906:	2b00      	cmp	r3, #0
 8011908:	d1fa      	bne.n	8011900 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801190a:	2300      	movs	r3, #0
 801190c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801190e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011910:	4618      	mov	r0, r3
 8011912:	3718      	adds	r7, #24
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b08c      	sub	sp, #48	; 0x30
 801191c:	af00      	add	r7, sp, #0
 801191e:	4603      	mov	r3, r0
 8011920:	603a      	str	r2, [r7, #0]
 8011922:	71fb      	strb	r3, [r7, #7]
 8011924:	460b      	mov	r3, r1
 8011926:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011928:	2301      	movs	r3, #1
 801192a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801192e:	4b25      	ldr	r3, [pc, #148]	; (80119c4 <SD_ioctl+0xac>)
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	b2db      	uxtb	r3, r3
 8011934:	f003 0301 	and.w	r3, r3, #1
 8011938:	2b00      	cmp	r3, #0
 801193a:	d001      	beq.n	8011940 <SD_ioctl+0x28>
 801193c:	2303      	movs	r3, #3
 801193e:	e03c      	b.n	80119ba <SD_ioctl+0xa2>

  switch (cmd)
 8011940:	79bb      	ldrb	r3, [r7, #6]
 8011942:	2b03      	cmp	r3, #3
 8011944:	d834      	bhi.n	80119b0 <SD_ioctl+0x98>
 8011946:	a201      	add	r2, pc, #4	; (adr r2, 801194c <SD_ioctl+0x34>)
 8011948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801194c:	0801195d 	.word	0x0801195d
 8011950:	08011965 	.word	0x08011965
 8011954:	0801197d 	.word	0x0801197d
 8011958:	08011997 	.word	0x08011997
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801195c:	2300      	movs	r3, #0
 801195e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011962:	e028      	b.n	80119b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011964:	f107 0308 	add.w	r3, r7, #8
 8011968:	4618      	mov	r0, r3
 801196a:	f7ff ff13 	bl	8011794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801196e:	6a3a      	ldr	r2, [r7, #32]
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011974:	2300      	movs	r3, #0
 8011976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801197a:	e01c      	b.n	80119b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801197c:	f107 0308 	add.w	r3, r7, #8
 8011980:	4618      	mov	r0, r3
 8011982:	f7ff ff07 	bl	8011794 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011988:	b29a      	uxth	r2, r3
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801198e:	2300      	movs	r3, #0
 8011990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011994:	e00f      	b.n	80119b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011996:	f107 0308 	add.w	r3, r7, #8
 801199a:	4618      	mov	r0, r3
 801199c:	f7ff fefa 	bl	8011794 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80119a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a2:	0a5a      	lsrs	r2, r3, #9
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80119a8:	2300      	movs	r3, #0
 80119aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80119ae:	e002      	b.n	80119b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80119b0:	2304      	movs	r3, #4
 80119b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80119b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3730      	adds	r7, #48	; 0x30
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	2000000d 	.word	0x2000000d

080119c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	460b      	mov	r3, r1
 80119d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80119d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80119d8:	f005 f978 	bl	8016ccc <USBD_static_malloc>
 80119dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d105      	bne.n	80119f0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2200      	movs	r2, #0
 80119e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80119ec:	2302      	movs	r3, #2
 80119ee:	e066      	b.n	8011abe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	7c1b      	ldrb	r3, [r3, #16]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d119      	bne.n	8011a34 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a04:	2202      	movs	r2, #2
 8011a06:	2181      	movs	r1, #129	; 0x81
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f004 ff99 	bl	8016940 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2201      	movs	r2, #1
 8011a12:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a18:	2202      	movs	r2, #2
 8011a1a:	2101      	movs	r1, #1
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f004 ff8f 	bl	8016940 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2201      	movs	r2, #1
 8011a26:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2210      	movs	r2, #16
 8011a2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011a32:	e016      	b.n	8011a62 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011a34:	2340      	movs	r3, #64	; 0x40
 8011a36:	2202      	movs	r2, #2
 8011a38:	2181      	movs	r1, #129	; 0x81
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f004 ff80 	bl	8016940 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2201      	movs	r2, #1
 8011a44:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011a46:	2340      	movs	r3, #64	; 0x40
 8011a48:	2202      	movs	r2, #2
 8011a4a:	2101      	movs	r1, #1
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f004 ff77 	bl	8016940 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2201      	movs	r2, #1
 8011a56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2210      	movs	r2, #16
 8011a5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011a62:	2308      	movs	r3, #8
 8011a64:	2203      	movs	r2, #3
 8011a66:	2182      	movs	r1, #130	; 0x82
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f004 ff69 	bl	8016940 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2201      	movs	r2, #1
 8011a72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	2200      	movs	r2, #0
 8011a84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	7c1b      	ldrb	r3, [r3, #16]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d109      	bne.n	8011aac <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011aa2:	2101      	movs	r1, #1
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f005 f8c5 	bl	8016c34 <USBD_LL_PrepareReceive>
 8011aaa:	e007      	b.n	8011abc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011ab2:	2340      	movs	r3, #64	; 0x40
 8011ab4:	2101      	movs	r1, #1
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f005 f8bc 	bl	8016c34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3710      	adds	r7, #16
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}

08011ac6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011ac6:	b580      	push	{r7, lr}
 8011ac8:	b082      	sub	sp, #8
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	6078      	str	r0, [r7, #4]
 8011ace:	460b      	mov	r3, r1
 8011ad0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011ad2:	2181      	movs	r1, #129	; 0x81
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f004 ff71 	bl	80169bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2200      	movs	r2, #0
 8011ade:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011ae0:	2101      	movs	r1, #1
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f004 ff6a 	bl	80169bc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2200      	movs	r2, #0
 8011aec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011af0:	2182      	movs	r1, #130	; 0x82
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f004 ff62 	bl	80169bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2200      	movs	r2, #0
 8011afc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2200      	movs	r2, #0
 8011b04:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d00e      	beq.n	8011b30 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b22:	4618      	mov	r0, r3
 8011b24:	f005 f8e0 	bl	8016ce8 <USBD_static_free>
    pdev->pClassData = NULL;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011b30:	2300      	movs	r3, #0
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3708      	adds	r7, #8
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
	...

08011b3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b086      	sub	sp, #24
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011b52:	2300      	movs	r3, #0
 8011b54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b56:	2300      	movs	r3, #0
 8011b58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d101      	bne.n	8011b64 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011b60:	2303      	movs	r3, #3
 8011b62:	e0af      	b.n	8011cc4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d03f      	beq.n	8011bf0 <USBD_CDC_Setup+0xb4>
 8011b70:	2b20      	cmp	r3, #32
 8011b72:	f040 809f 	bne.w	8011cb4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	88db      	ldrh	r3, [r3, #6]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d02e      	beq.n	8011bdc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	b25b      	sxtb	r3, r3
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	da16      	bge.n	8011bb6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	683a      	ldr	r2, [r7, #0]
 8011b92:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8011b94:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011b96:	683a      	ldr	r2, [r7, #0]
 8011b98:	88d2      	ldrh	r2, [r2, #6]
 8011b9a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	88db      	ldrh	r3, [r3, #6]
 8011ba0:	2b07      	cmp	r3, #7
 8011ba2:	bf28      	it	cs
 8011ba4:	2307      	movcs	r3, #7
 8011ba6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	89fa      	ldrh	r2, [r7, #14]
 8011bac:	4619      	mov	r1, r3
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f001 fb19 	bl	80131e6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8011bb4:	e085      	b.n	8011cc2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	785a      	ldrb	r2, [r3, #1]
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	88db      	ldrh	r3, [r3, #6]
 8011bc4:	b2da      	uxtb	r2, r3
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011bcc:	6939      	ldr	r1, [r7, #16]
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	88db      	ldrh	r3, [r3, #6]
 8011bd2:	461a      	mov	r2, r3
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f001 fb32 	bl	801323e <USBD_CtlPrepareRx>
      break;
 8011bda:	e072      	b.n	8011cc2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011be2:	689b      	ldr	r3, [r3, #8]
 8011be4:	683a      	ldr	r2, [r7, #0]
 8011be6:	7850      	ldrb	r0, [r2, #1]
 8011be8:	2200      	movs	r2, #0
 8011bea:	6839      	ldr	r1, [r7, #0]
 8011bec:	4798      	blx	r3
      break;
 8011bee:	e068      	b.n	8011cc2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	785b      	ldrb	r3, [r3, #1]
 8011bf4:	2b0b      	cmp	r3, #11
 8011bf6:	d852      	bhi.n	8011c9e <USBD_CDC_Setup+0x162>
 8011bf8:	a201      	add	r2, pc, #4	; (adr r2, 8011c00 <USBD_CDC_Setup+0xc4>)
 8011bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bfe:	bf00      	nop
 8011c00:	08011c31 	.word	0x08011c31
 8011c04:	08011cad 	.word	0x08011cad
 8011c08:	08011c9f 	.word	0x08011c9f
 8011c0c:	08011c9f 	.word	0x08011c9f
 8011c10:	08011c9f 	.word	0x08011c9f
 8011c14:	08011c9f 	.word	0x08011c9f
 8011c18:	08011c9f 	.word	0x08011c9f
 8011c1c:	08011c9f 	.word	0x08011c9f
 8011c20:	08011c9f 	.word	0x08011c9f
 8011c24:	08011c9f 	.word	0x08011c9f
 8011c28:	08011c5b 	.word	0x08011c5b
 8011c2c:	08011c85 	.word	0x08011c85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c36:	b2db      	uxtb	r3, r3
 8011c38:	2b03      	cmp	r3, #3
 8011c3a:	d107      	bne.n	8011c4c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011c3c:	f107 030a 	add.w	r3, r7, #10
 8011c40:	2202      	movs	r2, #2
 8011c42:	4619      	mov	r1, r3
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f001 face 	bl	80131e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011c4a:	e032      	b.n	8011cb2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011c4c:	6839      	ldr	r1, [r7, #0]
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f001 fa58 	bl	8013104 <USBD_CtlError>
            ret = USBD_FAIL;
 8011c54:	2303      	movs	r3, #3
 8011c56:	75fb      	strb	r3, [r7, #23]
          break;
 8011c58:	e02b      	b.n	8011cb2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c60:	b2db      	uxtb	r3, r3
 8011c62:	2b03      	cmp	r3, #3
 8011c64:	d107      	bne.n	8011c76 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011c66:	f107 030d 	add.w	r3, r7, #13
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	4619      	mov	r1, r3
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f001 fab9 	bl	80131e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011c74:	e01d      	b.n	8011cb2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011c76:	6839      	ldr	r1, [r7, #0]
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f001 fa43 	bl	8013104 <USBD_CtlError>
            ret = USBD_FAIL;
 8011c7e:	2303      	movs	r3, #3
 8011c80:	75fb      	strb	r3, [r7, #23]
          break;
 8011c82:	e016      	b.n	8011cb2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	2b03      	cmp	r3, #3
 8011c8e:	d00f      	beq.n	8011cb0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011c90:	6839      	ldr	r1, [r7, #0]
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f001 fa36 	bl	8013104 <USBD_CtlError>
            ret = USBD_FAIL;
 8011c98:	2303      	movs	r3, #3
 8011c9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011c9c:	e008      	b.n	8011cb0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011c9e:	6839      	ldr	r1, [r7, #0]
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f001 fa2f 	bl	8013104 <USBD_CtlError>
          ret = USBD_FAIL;
 8011ca6:	2303      	movs	r3, #3
 8011ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8011caa:	e002      	b.n	8011cb2 <USBD_CDC_Setup+0x176>
          break;
 8011cac:	bf00      	nop
 8011cae:	e008      	b.n	8011cc2 <USBD_CDC_Setup+0x186>
          break;
 8011cb0:	bf00      	nop
      }
      break;
 8011cb2:	e006      	b.n	8011cc2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f001 fa24 	bl	8013104 <USBD_CtlError>
      ret = USBD_FAIL;
 8011cbc:	2303      	movs	r3, #3
 8011cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8011cc0:	bf00      	nop
  }

  return (uint8_t)ret;
 8011cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3718      	adds	r7, #24
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}

08011ccc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b084      	sub	sp, #16
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	460b      	mov	r3, r1
 8011cd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011cde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d101      	bne.n	8011cee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011cea:	2303      	movs	r3, #3
 8011cec:	e04f      	b.n	8011d8e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011cf4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011cf6:	78fa      	ldrb	r2, [r7, #3]
 8011cf8:	6879      	ldr	r1, [r7, #4]
 8011cfa:	4613      	mov	r3, r2
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	4413      	add	r3, r2
 8011d00:	009b      	lsls	r3, r3, #2
 8011d02:	440b      	add	r3, r1
 8011d04:	3318      	adds	r3, #24
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d029      	beq.n	8011d60 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011d0c:	78fa      	ldrb	r2, [r7, #3]
 8011d0e:	6879      	ldr	r1, [r7, #4]
 8011d10:	4613      	mov	r3, r2
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	4413      	add	r3, r2
 8011d16:	009b      	lsls	r3, r3, #2
 8011d18:	440b      	add	r3, r1
 8011d1a:	3318      	adds	r3, #24
 8011d1c:	681a      	ldr	r2, [r3, #0]
 8011d1e:	78f9      	ldrb	r1, [r7, #3]
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	460b      	mov	r3, r1
 8011d24:	00db      	lsls	r3, r3, #3
 8011d26:	440b      	add	r3, r1
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	4403      	add	r3, r0
 8011d2c:	3348      	adds	r3, #72	; 0x48
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	fbb2 f1f3 	udiv	r1, r2, r3
 8011d34:	fb01 f303 	mul.w	r3, r1, r3
 8011d38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d110      	bne.n	8011d60 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011d3e:	78fa      	ldrb	r2, [r7, #3]
 8011d40:	6879      	ldr	r1, [r7, #4]
 8011d42:	4613      	mov	r3, r2
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	4413      	add	r3, r2
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	440b      	add	r3, r1
 8011d4c:	3318      	adds	r3, #24
 8011d4e:	2200      	movs	r2, #0
 8011d50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011d52:	78f9      	ldrb	r1, [r7, #3]
 8011d54:	2300      	movs	r3, #0
 8011d56:	2200      	movs	r2, #0
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f004 ff33 	bl	8016bc4 <USBD_LL_Transmit>
 8011d5e:	e015      	b.n	8011d8c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	2200      	movs	r2, #0
 8011d64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011d6e:	691b      	ldr	r3, [r3, #16]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00b      	beq.n	8011d8c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011d7a:	691b      	ldr	r3, [r3, #16]
 8011d7c:	68ba      	ldr	r2, [r7, #8]
 8011d7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011d82:	68ba      	ldr	r2, [r7, #8]
 8011d84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011d88:	78fa      	ldrb	r2, [r7, #3]
 8011d8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3710      	adds	r7, #16
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}

08011d96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b084      	sub	sp, #16
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	6078      	str	r0, [r7, #4]
 8011d9e:	460b      	mov	r3, r1
 8011da0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011da8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d101      	bne.n	8011db8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011db4:	2303      	movs	r3, #3
 8011db6:	e015      	b.n	8011de4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011db8:	78fb      	ldrb	r3, [r7, #3]
 8011dba:	4619      	mov	r1, r3
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f004 ff71 	bl	8016ca4 <USBD_LL_GetRxDataSize>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011dd0:	68db      	ldr	r3, [r3, #12]
 8011dd2:	68fa      	ldr	r2, [r7, #12]
 8011dd4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011dd8:	68fa      	ldr	r2, [r7, #12]
 8011dda:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011dde:	4611      	mov	r1, r2
 8011de0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3710      	adds	r7, #16
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011dfa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d101      	bne.n	8011e06 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011e02:	2303      	movs	r3, #3
 8011e04:	e01b      	b.n	8011e3e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d015      	beq.n	8011e3c <USBD_CDC_EP0_RxReady+0x50>
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011e16:	2bff      	cmp	r3, #255	; 0xff
 8011e18:	d010      	beq.n	8011e3c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	68fa      	ldr	r2, [r7, #12]
 8011e24:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011e28:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011e2a:	68fa      	ldr	r2, [r7, #12]
 8011e2c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011e30:	b292      	uxth	r2, r2
 8011e32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	22ff      	movs	r2, #255	; 0xff
 8011e38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011e3c:	2300      	movs	r3, #0
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3710      	adds	r7, #16
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
	...

08011e48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011e48:	b480      	push	{r7}
 8011e4a:	b083      	sub	sp, #12
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2243      	movs	r2, #67	; 0x43
 8011e54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011e56:	4b03      	ldr	r3, [pc, #12]	; (8011e64 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	370c      	adds	r7, #12
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e62:	4770      	bx	lr
 8011e64:	20000098 	.word	0x20000098

08011e68 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b083      	sub	sp, #12
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2243      	movs	r2, #67	; 0x43
 8011e74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011e76:	4b03      	ldr	r3, [pc, #12]	; (8011e84 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	370c      	adds	r7, #12
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr
 8011e84:	20000054 	.word	0x20000054

08011e88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2243      	movs	r2, #67	; 0x43
 8011e94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011e96:	4b03      	ldr	r3, [pc, #12]	; (8011ea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr
 8011ea4:	200000dc 	.word	0x200000dc

08011ea8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b083      	sub	sp, #12
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	220a      	movs	r2, #10
 8011eb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011eb6:	4b03      	ldr	r3, [pc, #12]	; (8011ec4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr
 8011ec4:	20000010 	.word	0x20000010

08011ec8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011ec8:	b480      	push	{r7}
 8011eca:	b083      	sub	sp, #12
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d101      	bne.n	8011edc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011ed8:	2303      	movs	r3, #3
 8011eda:	e004      	b.n	8011ee6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	683a      	ldr	r2, [r7, #0]
 8011ee0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011ee4:	2300      	movs	r3, #0
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	370c      	adds	r7, #12
 8011eea:	46bd      	mov	sp, r7
 8011eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef0:	4770      	bx	lr

08011ef2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011ef2:	b480      	push	{r7}
 8011ef4:	b087      	sub	sp, #28
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	60f8      	str	r0, [r7, #12]
 8011efa:	60b9      	str	r1, [r7, #8]
 8011efc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f04:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d101      	bne.n	8011f10 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011f0c:	2303      	movs	r3, #3
 8011f0e:	e008      	b.n	8011f22 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	68ba      	ldr	r2, [r7, #8]
 8011f14:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011f20:	2300      	movs	r3, #0
}
 8011f22:	4618      	mov	r0, r3
 8011f24:	371c      	adds	r7, #28
 8011f26:	46bd      	mov	sp, r7
 8011f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2c:	4770      	bx	lr

08011f2e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011f2e:	b480      	push	{r7}
 8011f30:	b085      	sub	sp, #20
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
 8011f36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d101      	bne.n	8011f4a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011f46:	2303      	movs	r3, #3
 8011f48:	e004      	b.n	8011f54 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	683a      	ldr	r2, [r7, #0]
 8011f4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011f52:	2300      	movs	r3, #0
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3714      	adds	r7, #20
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f6e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011f70:	2301      	movs	r3, #1
 8011f72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d101      	bne.n	8011f82 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011f7e:	2303      	movs	r3, #3
 8011f80:	e01a      	b.n	8011fb8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d114      	bne.n	8011fb6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	2201      	movs	r2, #1
 8011f90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011faa:	2181      	movs	r1, #129	; 0x81
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f004 fe09 	bl	8016bc4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}

08011fc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d101      	bne.n	8011fde <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011fda:	2303      	movs	r3, #3
 8011fdc:	e016      	b.n	801200c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	7c1b      	ldrb	r3, [r3, #16]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d109      	bne.n	8011ffa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ff0:	2101      	movs	r1, #1
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	f004 fe1e 	bl	8016c34 <USBD_LL_PrepareReceive>
 8011ff8:	e007      	b.n	801200a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012000:	2340      	movs	r3, #64	; 0x40
 8012002:	2101      	movs	r1, #1
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f004 fe15 	bl	8016c34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801200a:	2300      	movs	r3, #0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3710      	adds	r7, #16
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b086      	sub	sp, #24
 8012018:	af00      	add	r7, sp, #0
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	4613      	mov	r3, r2
 8012020:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d101      	bne.n	801202c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8012028:	2303      	movs	r3, #3
 801202a:	e01f      	b.n	801206c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2200      	movs	r2, #0
 8012030:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	2200      	movs	r2, #0
 8012038:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	2200      	movs	r2, #0
 8012040:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d003      	beq.n	8012052 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	68ba      	ldr	r2, [r7, #8]
 801204e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	2201      	movs	r2, #1
 8012056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	79fa      	ldrb	r2, [r7, #7]
 801205e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012060:	68f8      	ldr	r0, [r7, #12]
 8012062:	f004 fbf1 	bl	8016848 <USBD_LL_Init>
 8012066:	4603      	mov	r3, r0
 8012068:	75fb      	strb	r3, [r7, #23]

  return ret;
 801206a:	7dfb      	ldrb	r3, [r7, #23]
}
 801206c:	4618      	mov	r0, r3
 801206e:	3718      	adds	r7, #24
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b084      	sub	sp, #16
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801207e:	2300      	movs	r3, #0
 8012080:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d101      	bne.n	801208c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8012088:	2303      	movs	r3, #3
 801208a:	e016      	b.n	80120ba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	683a      	ldr	r2, [r7, #0]
 8012090:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801209c:	2b00      	cmp	r3, #0
 801209e:	d00b      	beq.n	80120b8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a8:	f107 020e 	add.w	r2, r7, #14
 80120ac:	4610      	mov	r0, r2
 80120ae:	4798      	blx	r3
 80120b0:	4602      	mov	r2, r0
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80120b8:	2300      	movs	r3, #0
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b082      	sub	sp, #8
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f004 fc06 	bl	80168dc <USBD_LL_Start>
 80120d0:	4603      	mov	r3, r0
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3708      	adds	r7, #8
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80120da:	b480      	push	{r7}
 80120dc:	b083      	sub	sp, #12
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80120e2:	2300      	movs	r3, #0
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	370c      	adds	r7, #12
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr

080120f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b084      	sub	sp, #16
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	460b      	mov	r3, r1
 80120fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80120fc:	2303      	movs	r3, #3
 80120fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012106:	2b00      	cmp	r3, #0
 8012108:	d009      	beq.n	801211e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	78fa      	ldrb	r2, [r7, #3]
 8012114:	4611      	mov	r1, r2
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	4798      	blx	r3
 801211a:	4603      	mov	r3, r0
 801211c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012120:	4618      	mov	r0, r3
 8012122:	3710      	adds	r7, #16
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	460b      	mov	r3, r1
 8012132:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801213a:	2b00      	cmp	r3, #0
 801213c:	d007      	beq.n	801214e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012144:	685b      	ldr	r3, [r3, #4]
 8012146:	78fa      	ldrb	r2, [r7, #3]
 8012148:	4611      	mov	r1, r2
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	4798      	blx	r3
  }

  return USBD_OK;
 801214e:	2300      	movs	r3, #0
}
 8012150:	4618      	mov	r0, r3
 8012152:	3708      	adds	r7, #8
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012168:	6839      	ldr	r1, [r7, #0]
 801216a:	4618      	mov	r0, r3
 801216c:	f000 ff90 	bl	8013090 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2201      	movs	r2, #1
 8012174:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801217e:	461a      	mov	r2, r3
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801218c:	f003 031f 	and.w	r3, r3, #31
 8012190:	2b02      	cmp	r3, #2
 8012192:	d01a      	beq.n	80121ca <USBD_LL_SetupStage+0x72>
 8012194:	2b02      	cmp	r3, #2
 8012196:	d822      	bhi.n	80121de <USBD_LL_SetupStage+0x86>
 8012198:	2b00      	cmp	r3, #0
 801219a:	d002      	beq.n	80121a2 <USBD_LL_SetupStage+0x4a>
 801219c:	2b01      	cmp	r3, #1
 801219e:	d00a      	beq.n	80121b6 <USBD_LL_SetupStage+0x5e>
 80121a0:	e01d      	b.n	80121de <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121a8:	4619      	mov	r1, r3
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f000 fa62 	bl	8012674 <USBD_StdDevReq>
 80121b0:	4603      	mov	r3, r0
 80121b2:	73fb      	strb	r3, [r7, #15]
      break;
 80121b4:	e020      	b.n	80121f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121bc:	4619      	mov	r1, r3
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f000 fac6 	bl	8012750 <USBD_StdItfReq>
 80121c4:	4603      	mov	r3, r0
 80121c6:	73fb      	strb	r3, [r7, #15]
      break;
 80121c8:	e016      	b.n	80121f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121d0:	4619      	mov	r1, r3
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 fb05 	bl	80127e2 <USBD_StdEPReq>
 80121d8:	4603      	mov	r3, r0
 80121da:	73fb      	strb	r3, [r7, #15]
      break;
 80121dc:	e00c      	b.n	80121f8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80121e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80121e8:	b2db      	uxtb	r3, r3
 80121ea:	4619      	mov	r1, r3
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f004 fc1b 	bl	8016a28 <USBD_LL_StallEP>
 80121f2:	4603      	mov	r3, r0
 80121f4:	73fb      	strb	r3, [r7, #15]
      break;
 80121f6:	bf00      	nop
  }

  return ret;
 80121f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3710      	adds	r7, #16
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}

08012202 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012202:	b580      	push	{r7, lr}
 8012204:	b086      	sub	sp, #24
 8012206:	af00      	add	r7, sp, #0
 8012208:	60f8      	str	r0, [r7, #12]
 801220a:	460b      	mov	r3, r1
 801220c:	607a      	str	r2, [r7, #4]
 801220e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012210:	7afb      	ldrb	r3, [r7, #11]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d138      	bne.n	8012288 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801221c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012224:	2b03      	cmp	r3, #3
 8012226:	d14a      	bne.n	80122be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	689a      	ldr	r2, [r3, #8]
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	429a      	cmp	r2, r3
 8012232:	d913      	bls.n	801225c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	689a      	ldr	r2, [r3, #8]
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	68db      	ldr	r3, [r3, #12]
 801223c:	1ad2      	subs	r2, r2, r3
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	68da      	ldr	r2, [r3, #12]
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	689b      	ldr	r3, [r3, #8]
 801224a:	4293      	cmp	r3, r2
 801224c:	bf28      	it	cs
 801224e:	4613      	movcs	r3, r2
 8012250:	461a      	mov	r2, r3
 8012252:	6879      	ldr	r1, [r7, #4]
 8012254:	68f8      	ldr	r0, [r7, #12]
 8012256:	f001 f80f 	bl	8013278 <USBD_CtlContinueRx>
 801225a:	e030      	b.n	80122be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012262:	b2db      	uxtb	r3, r3
 8012264:	2b03      	cmp	r3, #3
 8012266:	d10b      	bne.n	8012280 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801226e:	691b      	ldr	r3, [r3, #16]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d005      	beq.n	8012280 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801227a:	691b      	ldr	r3, [r3, #16]
 801227c:	68f8      	ldr	r0, [r7, #12]
 801227e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012280:	68f8      	ldr	r0, [r7, #12]
 8012282:	f001 f80a 	bl	801329a <USBD_CtlSendStatus>
 8012286:	e01a      	b.n	80122be <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801228e:	b2db      	uxtb	r3, r3
 8012290:	2b03      	cmp	r3, #3
 8012292:	d114      	bne.n	80122be <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801229a:	699b      	ldr	r3, [r3, #24]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d00e      	beq.n	80122be <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122a6:	699b      	ldr	r3, [r3, #24]
 80122a8:	7afa      	ldrb	r2, [r7, #11]
 80122aa:	4611      	mov	r1, r2
 80122ac:	68f8      	ldr	r0, [r7, #12]
 80122ae:	4798      	blx	r3
 80122b0:	4603      	mov	r3, r0
 80122b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80122b4:	7dfb      	ldrb	r3, [r7, #23]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d001      	beq.n	80122be <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80122ba:	7dfb      	ldrb	r3, [r7, #23]
 80122bc:	e000      	b.n	80122c0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80122be:	2300      	movs	r3, #0
}
 80122c0:	4618      	mov	r0, r3
 80122c2:	3718      	adds	r7, #24
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}

080122c8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b086      	sub	sp, #24
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	60f8      	str	r0, [r7, #12]
 80122d0:	460b      	mov	r3, r1
 80122d2:	607a      	str	r2, [r7, #4]
 80122d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80122d6:	7afb      	ldrb	r3, [r7, #11]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d16b      	bne.n	80123b4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	3314      	adds	r3, #20
 80122e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80122e8:	2b02      	cmp	r3, #2
 80122ea:	d156      	bne.n	801239a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80122ec:	693b      	ldr	r3, [r7, #16]
 80122ee:	689a      	ldr	r2, [r3, #8]
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	68db      	ldr	r3, [r3, #12]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d914      	bls.n	8012322 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	689a      	ldr	r2, [r3, #8]
 80122fc:	693b      	ldr	r3, [r7, #16]
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	1ad2      	subs	r2, r2, r3
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012306:	693b      	ldr	r3, [r7, #16]
 8012308:	689b      	ldr	r3, [r3, #8]
 801230a:	461a      	mov	r2, r3
 801230c:	6879      	ldr	r1, [r7, #4]
 801230e:	68f8      	ldr	r0, [r7, #12]
 8012310:	f000 ff84 	bl	801321c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012314:	2300      	movs	r3, #0
 8012316:	2200      	movs	r2, #0
 8012318:	2100      	movs	r1, #0
 801231a:	68f8      	ldr	r0, [r7, #12]
 801231c:	f004 fc8a 	bl	8016c34 <USBD_LL_PrepareReceive>
 8012320:	e03b      	b.n	801239a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	68da      	ldr	r2, [r3, #12]
 8012326:	693b      	ldr	r3, [r7, #16]
 8012328:	689b      	ldr	r3, [r3, #8]
 801232a:	429a      	cmp	r2, r3
 801232c:	d11c      	bne.n	8012368 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	685a      	ldr	r2, [r3, #4]
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012336:	429a      	cmp	r2, r3
 8012338:	d316      	bcc.n	8012368 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	685a      	ldr	r2, [r3, #4]
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012344:	429a      	cmp	r2, r3
 8012346:	d20f      	bcs.n	8012368 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012348:	2200      	movs	r2, #0
 801234a:	2100      	movs	r1, #0
 801234c:	68f8      	ldr	r0, [r7, #12]
 801234e:	f000 ff65 	bl	801321c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2200      	movs	r2, #0
 8012356:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801235a:	2300      	movs	r3, #0
 801235c:	2200      	movs	r2, #0
 801235e:	2100      	movs	r1, #0
 8012360:	68f8      	ldr	r0, [r7, #12]
 8012362:	f004 fc67 	bl	8016c34 <USBD_LL_PrepareReceive>
 8012366:	e018      	b.n	801239a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801236e:	b2db      	uxtb	r3, r3
 8012370:	2b03      	cmp	r3, #3
 8012372:	d10b      	bne.n	801238c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801237a:	68db      	ldr	r3, [r3, #12]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d005      	beq.n	801238c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012386:	68db      	ldr	r3, [r3, #12]
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801238c:	2180      	movs	r1, #128	; 0x80
 801238e:	68f8      	ldr	r0, [r7, #12]
 8012390:	f004 fb4a 	bl	8016a28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f000 ff93 	bl	80132c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d122      	bne.n	80123ea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	f7ff fe98 	bl	80120da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	2200      	movs	r2, #0
 80123ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80123b2:	e01a      	b.n	80123ea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	2b03      	cmp	r3, #3
 80123be:	d114      	bne.n	80123ea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123c6:	695b      	ldr	r3, [r3, #20]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00e      	beq.n	80123ea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123d2:	695b      	ldr	r3, [r3, #20]
 80123d4:	7afa      	ldrb	r2, [r7, #11]
 80123d6:	4611      	mov	r1, r2
 80123d8:	68f8      	ldr	r0, [r7, #12]
 80123da:	4798      	blx	r3
 80123dc:	4603      	mov	r3, r0
 80123de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80123e0:	7dfb      	ldrb	r3, [r7, #23]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d001      	beq.n	80123ea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80123e6:	7dfb      	ldrb	r3, [r7, #23]
 80123e8:	e000      	b.n	80123ec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80123ea:	2300      	movs	r3, #0
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3718      	adds	r7, #24
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2201      	movs	r2, #1
 8012400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2200      	movs	r2, #0
 8012408:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2200      	movs	r2, #0
 8012410:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2200      	movs	r2, #0
 8012416:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012420:	2b00      	cmp	r3, #0
 8012422:	d101      	bne.n	8012428 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012424:	2303      	movs	r3, #3
 8012426:	e02f      	b.n	8012488 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801242e:	2b00      	cmp	r3, #0
 8012430:	d00f      	beq.n	8012452 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012438:	685b      	ldr	r3, [r3, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d009      	beq.n	8012452 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	6852      	ldr	r2, [r2, #4]
 801244a:	b2d2      	uxtb	r2, r2
 801244c:	4611      	mov	r1, r2
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012452:	2340      	movs	r3, #64	; 0x40
 8012454:	2200      	movs	r2, #0
 8012456:	2100      	movs	r1, #0
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f004 fa71 	bl	8016940 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2201      	movs	r2, #1
 8012462:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2240      	movs	r2, #64	; 0x40
 801246a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801246e:	2340      	movs	r3, #64	; 0x40
 8012470:	2200      	movs	r2, #0
 8012472:	2180      	movs	r1, #128	; 0x80
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f004 fa63 	bl	8016940 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2201      	movs	r2, #1
 801247e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2240      	movs	r2, #64	; 0x40
 8012484:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8012486:	2300      	movs	r3, #0
}
 8012488:	4618      	mov	r0, r3
 801248a:	3708      	adds	r7, #8
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}

08012490 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012490:	b480      	push	{r7}
 8012492:	b083      	sub	sp, #12
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	460b      	mov	r3, r1
 801249a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	78fa      	ldrb	r2, [r7, #3]
 80124a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80124a2:	2300      	movs	r3, #0
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	370c      	adds	r7, #12
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr

080124b0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80124b0:	b480      	push	{r7}
 80124b2:	b083      	sub	sp, #12
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124be:	b2da      	uxtb	r2, r3
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2204      	movs	r2, #4
 80124ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80124ce:	2300      	movs	r3, #0
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	370c      	adds	r7, #12
 80124d4:	46bd      	mov	sp, r7
 80124d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124da:	4770      	bx	lr

080124dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80124dc:	b480      	push	{r7}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	2b04      	cmp	r3, #4
 80124ee:	d106      	bne.n	80124fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80124f6:	b2da      	uxtb	r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80124fe:	2300      	movs	r3, #0
}
 8012500:	4618      	mov	r0, r3
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr

0801250c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b082      	sub	sp, #8
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801251a:	2b00      	cmp	r3, #0
 801251c:	d101      	bne.n	8012522 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801251e:	2303      	movs	r3, #3
 8012520:	e012      	b.n	8012548 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012528:	b2db      	uxtb	r3, r3
 801252a:	2b03      	cmp	r3, #3
 801252c:	d10b      	bne.n	8012546 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012534:	69db      	ldr	r3, [r3, #28]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d005      	beq.n	8012546 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012540:	69db      	ldr	r3, [r3, #28]
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012546:	2300      	movs	r3, #0
}
 8012548:	4618      	mov	r0, r3
 801254a:	3708      	adds	r7, #8
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b082      	sub	sp, #8
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	460b      	mov	r3, r1
 801255a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012562:	2b00      	cmp	r3, #0
 8012564:	d101      	bne.n	801256a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012566:	2303      	movs	r3, #3
 8012568:	e014      	b.n	8012594 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012570:	b2db      	uxtb	r3, r3
 8012572:	2b03      	cmp	r3, #3
 8012574:	d10d      	bne.n	8012592 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801257c:	6a1b      	ldr	r3, [r3, #32]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d007      	beq.n	8012592 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012588:	6a1b      	ldr	r3, [r3, #32]
 801258a:	78fa      	ldrb	r2, [r7, #3]
 801258c:	4611      	mov	r1, r2
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012592:	2300      	movs	r3, #0
}
 8012594:	4618      	mov	r0, r3
 8012596:	3708      	adds	r7, #8
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b082      	sub	sp, #8
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	460b      	mov	r3, r1
 80125a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d101      	bne.n	80125b6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80125b2:	2303      	movs	r3, #3
 80125b4:	e014      	b.n	80125e0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125bc:	b2db      	uxtb	r3, r3
 80125be:	2b03      	cmp	r3, #3
 80125c0:	d10d      	bne.n	80125de <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d007      	beq.n	80125de <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125d6:	78fa      	ldrb	r2, [r7, #3]
 80125d8:	4611      	mov	r1, r2
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80125de:	2300      	movs	r3, #0
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80125e8:	b480      	push	{r7}
 80125ea:	b083      	sub	sp, #12
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80125f0:	2300      	movs	r3, #0
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	370c      	adds	r7, #12
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr

080125fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80125fe:	b580      	push	{r7, lr}
 8012600:	b082      	sub	sp, #8
 8012602:	af00      	add	r7, sp, #0
 8012604:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2201      	movs	r2, #1
 801260a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012614:	2b00      	cmp	r3, #0
 8012616:	d009      	beq.n	801262c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801261e:	685b      	ldr	r3, [r3, #4]
 8012620:	687a      	ldr	r2, [r7, #4]
 8012622:	6852      	ldr	r2, [r2, #4]
 8012624:	b2d2      	uxtb	r2, r2
 8012626:	4611      	mov	r1, r2
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	4798      	blx	r3
  }

  return USBD_OK;
 801262c:	2300      	movs	r3, #0
}
 801262e:	4618      	mov	r0, r3
 8012630:	3708      	adds	r7, #8
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}

08012636 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012636:	b480      	push	{r7}
 8012638:	b087      	sub	sp, #28
 801263a:	af00      	add	r7, sp, #0
 801263c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	3301      	adds	r3, #1
 801264c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801264e:	697b      	ldr	r3, [r7, #20]
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012654:	8a3b      	ldrh	r3, [r7, #16]
 8012656:	021b      	lsls	r3, r3, #8
 8012658:	b21a      	sxth	r2, r3
 801265a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801265e:	4313      	orrs	r3, r2
 8012660:	b21b      	sxth	r3, r3
 8012662:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012664:	89fb      	ldrh	r3, [r7, #14]
}
 8012666:	4618      	mov	r0, r3
 8012668:	371c      	adds	r7, #28
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr
	...

08012674 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b084      	sub	sp, #16
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801267e:	2300      	movs	r3, #0
 8012680:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801268a:	2b40      	cmp	r3, #64	; 0x40
 801268c:	d005      	beq.n	801269a <USBD_StdDevReq+0x26>
 801268e:	2b40      	cmp	r3, #64	; 0x40
 8012690:	d853      	bhi.n	801273a <USBD_StdDevReq+0xc6>
 8012692:	2b00      	cmp	r3, #0
 8012694:	d00b      	beq.n	80126ae <USBD_StdDevReq+0x3a>
 8012696:	2b20      	cmp	r3, #32
 8012698:	d14f      	bne.n	801273a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126a0:	689b      	ldr	r3, [r3, #8]
 80126a2:	6839      	ldr	r1, [r7, #0]
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	4798      	blx	r3
 80126a8:	4603      	mov	r3, r0
 80126aa:	73fb      	strb	r3, [r7, #15]
      break;
 80126ac:	e04a      	b.n	8012744 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	785b      	ldrb	r3, [r3, #1]
 80126b2:	2b09      	cmp	r3, #9
 80126b4:	d83b      	bhi.n	801272e <USBD_StdDevReq+0xba>
 80126b6:	a201      	add	r2, pc, #4	; (adr r2, 80126bc <USBD_StdDevReq+0x48>)
 80126b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126bc:	08012711 	.word	0x08012711
 80126c0:	08012725 	.word	0x08012725
 80126c4:	0801272f 	.word	0x0801272f
 80126c8:	0801271b 	.word	0x0801271b
 80126cc:	0801272f 	.word	0x0801272f
 80126d0:	080126ef 	.word	0x080126ef
 80126d4:	080126e5 	.word	0x080126e5
 80126d8:	0801272f 	.word	0x0801272f
 80126dc:	08012707 	.word	0x08012707
 80126e0:	080126f9 	.word	0x080126f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80126e4:	6839      	ldr	r1, [r7, #0]
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f000 f9de 	bl	8012aa8 <USBD_GetDescriptor>
          break;
 80126ec:	e024      	b.n	8012738 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80126ee:	6839      	ldr	r1, [r7, #0]
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 fb43 	bl	8012d7c <USBD_SetAddress>
          break;
 80126f6:	e01f      	b.n	8012738 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80126f8:	6839      	ldr	r1, [r7, #0]
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f000 fb82 	bl	8012e04 <USBD_SetConfig>
 8012700:	4603      	mov	r3, r0
 8012702:	73fb      	strb	r3, [r7, #15]
          break;
 8012704:	e018      	b.n	8012738 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012706:	6839      	ldr	r1, [r7, #0]
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f000 fc21 	bl	8012f50 <USBD_GetConfig>
          break;
 801270e:	e013      	b.n	8012738 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012710:	6839      	ldr	r1, [r7, #0]
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f000 fc52 	bl	8012fbc <USBD_GetStatus>
          break;
 8012718:	e00e      	b.n	8012738 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801271a:	6839      	ldr	r1, [r7, #0]
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f000 fc81 	bl	8013024 <USBD_SetFeature>
          break;
 8012722:	e009      	b.n	8012738 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012724:	6839      	ldr	r1, [r7, #0]
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f000 fc90 	bl	801304c <USBD_ClrFeature>
          break;
 801272c:	e004      	b.n	8012738 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801272e:	6839      	ldr	r1, [r7, #0]
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f000 fce7 	bl	8013104 <USBD_CtlError>
          break;
 8012736:	bf00      	nop
      }
      break;
 8012738:	e004      	b.n	8012744 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801273a:	6839      	ldr	r1, [r7, #0]
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f000 fce1 	bl	8013104 <USBD_CtlError>
      break;
 8012742:	bf00      	nop
  }

  return ret;
 8012744:	7bfb      	ldrb	r3, [r7, #15]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3710      	adds	r7, #16
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop

08012750 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801275a:	2300      	movs	r3, #0
 801275c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012766:	2b40      	cmp	r3, #64	; 0x40
 8012768:	d005      	beq.n	8012776 <USBD_StdItfReq+0x26>
 801276a:	2b40      	cmp	r3, #64	; 0x40
 801276c:	d82f      	bhi.n	80127ce <USBD_StdItfReq+0x7e>
 801276e:	2b00      	cmp	r3, #0
 8012770:	d001      	beq.n	8012776 <USBD_StdItfReq+0x26>
 8012772:	2b20      	cmp	r3, #32
 8012774:	d12b      	bne.n	80127ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801277c:	b2db      	uxtb	r3, r3
 801277e:	3b01      	subs	r3, #1
 8012780:	2b02      	cmp	r3, #2
 8012782:	d81d      	bhi.n	80127c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	889b      	ldrh	r3, [r3, #4]
 8012788:	b2db      	uxtb	r3, r3
 801278a:	2b01      	cmp	r3, #1
 801278c:	d813      	bhi.n	80127b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012794:	689b      	ldr	r3, [r3, #8]
 8012796:	6839      	ldr	r1, [r7, #0]
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	4798      	blx	r3
 801279c:	4603      	mov	r3, r0
 801279e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	88db      	ldrh	r3, [r3, #6]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d110      	bne.n	80127ca <USBD_StdItfReq+0x7a>
 80127a8:	7bfb      	ldrb	r3, [r7, #15]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d10d      	bne.n	80127ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f000 fd73 	bl	801329a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80127b4:	e009      	b.n	80127ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80127b6:	6839      	ldr	r1, [r7, #0]
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f000 fca3 	bl	8013104 <USBD_CtlError>
          break;
 80127be:	e004      	b.n	80127ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80127c0:	6839      	ldr	r1, [r7, #0]
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f000 fc9e 	bl	8013104 <USBD_CtlError>
          break;
 80127c8:	e000      	b.n	80127cc <USBD_StdItfReq+0x7c>
          break;
 80127ca:	bf00      	nop
      }
      break;
 80127cc:	e004      	b.n	80127d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80127ce:	6839      	ldr	r1, [r7, #0]
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f000 fc97 	bl	8013104 <USBD_CtlError>
      break;
 80127d6:	bf00      	nop
  }

  return ret;
 80127d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}

080127e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127e2:	b580      	push	{r7, lr}
 80127e4:	b084      	sub	sp, #16
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
 80127ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80127ec:	2300      	movs	r3, #0
 80127ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	889b      	ldrh	r3, [r3, #4]
 80127f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80127fe:	2b40      	cmp	r3, #64	; 0x40
 8012800:	d007      	beq.n	8012812 <USBD_StdEPReq+0x30>
 8012802:	2b40      	cmp	r3, #64	; 0x40
 8012804:	f200 8145 	bhi.w	8012a92 <USBD_StdEPReq+0x2b0>
 8012808:	2b00      	cmp	r3, #0
 801280a:	d00c      	beq.n	8012826 <USBD_StdEPReq+0x44>
 801280c:	2b20      	cmp	r3, #32
 801280e:	f040 8140 	bne.w	8012a92 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012818:	689b      	ldr	r3, [r3, #8]
 801281a:	6839      	ldr	r1, [r7, #0]
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	4798      	blx	r3
 8012820:	4603      	mov	r3, r0
 8012822:	73fb      	strb	r3, [r7, #15]
      break;
 8012824:	e13a      	b.n	8012a9c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	785b      	ldrb	r3, [r3, #1]
 801282a:	2b03      	cmp	r3, #3
 801282c:	d007      	beq.n	801283e <USBD_StdEPReq+0x5c>
 801282e:	2b03      	cmp	r3, #3
 8012830:	f300 8129 	bgt.w	8012a86 <USBD_StdEPReq+0x2a4>
 8012834:	2b00      	cmp	r3, #0
 8012836:	d07f      	beq.n	8012938 <USBD_StdEPReq+0x156>
 8012838:	2b01      	cmp	r3, #1
 801283a:	d03c      	beq.n	80128b6 <USBD_StdEPReq+0xd4>
 801283c:	e123      	b.n	8012a86 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012844:	b2db      	uxtb	r3, r3
 8012846:	2b02      	cmp	r3, #2
 8012848:	d002      	beq.n	8012850 <USBD_StdEPReq+0x6e>
 801284a:	2b03      	cmp	r3, #3
 801284c:	d016      	beq.n	801287c <USBD_StdEPReq+0x9a>
 801284e:	e02c      	b.n	80128aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012850:	7bbb      	ldrb	r3, [r7, #14]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d00d      	beq.n	8012872 <USBD_StdEPReq+0x90>
 8012856:	7bbb      	ldrb	r3, [r7, #14]
 8012858:	2b80      	cmp	r3, #128	; 0x80
 801285a:	d00a      	beq.n	8012872 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801285c:	7bbb      	ldrb	r3, [r7, #14]
 801285e:	4619      	mov	r1, r3
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f004 f8e1 	bl	8016a28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012866:	2180      	movs	r1, #128	; 0x80
 8012868:	6878      	ldr	r0, [r7, #4]
 801286a:	f004 f8dd 	bl	8016a28 <USBD_LL_StallEP>
 801286e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012870:	e020      	b.n	80128b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8012872:	6839      	ldr	r1, [r7, #0]
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f000 fc45 	bl	8013104 <USBD_CtlError>
              break;
 801287a:	e01b      	b.n	80128b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	885b      	ldrh	r3, [r3, #2]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d10e      	bne.n	80128a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012884:	7bbb      	ldrb	r3, [r7, #14]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d00b      	beq.n	80128a2 <USBD_StdEPReq+0xc0>
 801288a:	7bbb      	ldrb	r3, [r7, #14]
 801288c:	2b80      	cmp	r3, #128	; 0x80
 801288e:	d008      	beq.n	80128a2 <USBD_StdEPReq+0xc0>
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	88db      	ldrh	r3, [r3, #6]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d104      	bne.n	80128a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012898:	7bbb      	ldrb	r3, [r7, #14]
 801289a:	4619      	mov	r1, r3
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f004 f8c3 	bl	8016a28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 fcf9 	bl	801329a <USBD_CtlSendStatus>

              break;
 80128a8:	e004      	b.n	80128b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80128aa:	6839      	ldr	r1, [r7, #0]
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 fc29 	bl	8013104 <USBD_CtlError>
              break;
 80128b2:	bf00      	nop
          }
          break;
 80128b4:	e0ec      	b.n	8012a90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	2b02      	cmp	r3, #2
 80128c0:	d002      	beq.n	80128c8 <USBD_StdEPReq+0xe6>
 80128c2:	2b03      	cmp	r3, #3
 80128c4:	d016      	beq.n	80128f4 <USBD_StdEPReq+0x112>
 80128c6:	e030      	b.n	801292a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80128c8:	7bbb      	ldrb	r3, [r7, #14]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00d      	beq.n	80128ea <USBD_StdEPReq+0x108>
 80128ce:	7bbb      	ldrb	r3, [r7, #14]
 80128d0:	2b80      	cmp	r3, #128	; 0x80
 80128d2:	d00a      	beq.n	80128ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80128d4:	7bbb      	ldrb	r3, [r7, #14]
 80128d6:	4619      	mov	r1, r3
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f004 f8a5 	bl	8016a28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80128de:	2180      	movs	r1, #128	; 0x80
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f004 f8a1 	bl	8016a28 <USBD_LL_StallEP>
 80128e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80128e8:	e025      	b.n	8012936 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80128ea:	6839      	ldr	r1, [r7, #0]
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f000 fc09 	bl	8013104 <USBD_CtlError>
              break;
 80128f2:	e020      	b.n	8012936 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	885b      	ldrh	r3, [r3, #2]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d11b      	bne.n	8012934 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80128fc:	7bbb      	ldrb	r3, [r7, #14]
 80128fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012902:	2b00      	cmp	r3, #0
 8012904:	d004      	beq.n	8012910 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012906:	7bbb      	ldrb	r3, [r7, #14]
 8012908:	4619      	mov	r1, r3
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f004 f8c2 	bl	8016a94 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f000 fcc2 	bl	801329a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801291c:	689b      	ldr	r3, [r3, #8]
 801291e:	6839      	ldr	r1, [r7, #0]
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	4798      	blx	r3
 8012924:	4603      	mov	r3, r0
 8012926:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8012928:	e004      	b.n	8012934 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801292a:	6839      	ldr	r1, [r7, #0]
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f000 fbe9 	bl	8013104 <USBD_CtlError>
              break;
 8012932:	e000      	b.n	8012936 <USBD_StdEPReq+0x154>
              break;
 8012934:	bf00      	nop
          }
          break;
 8012936:	e0ab      	b.n	8012a90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801293e:	b2db      	uxtb	r3, r3
 8012940:	2b02      	cmp	r3, #2
 8012942:	d002      	beq.n	801294a <USBD_StdEPReq+0x168>
 8012944:	2b03      	cmp	r3, #3
 8012946:	d032      	beq.n	80129ae <USBD_StdEPReq+0x1cc>
 8012948:	e097      	b.n	8012a7a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801294a:	7bbb      	ldrb	r3, [r7, #14]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d007      	beq.n	8012960 <USBD_StdEPReq+0x17e>
 8012950:	7bbb      	ldrb	r3, [r7, #14]
 8012952:	2b80      	cmp	r3, #128	; 0x80
 8012954:	d004      	beq.n	8012960 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8012956:	6839      	ldr	r1, [r7, #0]
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f000 fbd3 	bl	8013104 <USBD_CtlError>
                break;
 801295e:	e091      	b.n	8012a84 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012964:	2b00      	cmp	r3, #0
 8012966:	da0b      	bge.n	8012980 <USBD_StdEPReq+0x19e>
 8012968:	7bbb      	ldrb	r3, [r7, #14]
 801296a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801296e:	4613      	mov	r3, r2
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	4413      	add	r3, r2
 8012974:	009b      	lsls	r3, r3, #2
 8012976:	3310      	adds	r3, #16
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	4413      	add	r3, r2
 801297c:	3304      	adds	r3, #4
 801297e:	e00b      	b.n	8012998 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012980:	7bbb      	ldrb	r3, [r7, #14]
 8012982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012986:	4613      	mov	r3, r2
 8012988:	009b      	lsls	r3, r3, #2
 801298a:	4413      	add	r3, r2
 801298c:	009b      	lsls	r3, r3, #2
 801298e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012992:	687a      	ldr	r2, [r7, #4]
 8012994:	4413      	add	r3, r2
 8012996:	3304      	adds	r3, #4
 8012998:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	2200      	movs	r2, #0
 801299e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	2202      	movs	r2, #2
 80129a4:	4619      	mov	r1, r3
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f000 fc1d 	bl	80131e6 <USBD_CtlSendData>
              break;
 80129ac:	e06a      	b.n	8012a84 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80129ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	da11      	bge.n	80129da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80129b6:	7bbb      	ldrb	r3, [r7, #14]
 80129b8:	f003 020f 	and.w	r2, r3, #15
 80129bc:	6879      	ldr	r1, [r7, #4]
 80129be:	4613      	mov	r3, r2
 80129c0:	009b      	lsls	r3, r3, #2
 80129c2:	4413      	add	r3, r2
 80129c4:	009b      	lsls	r3, r3, #2
 80129c6:	440b      	add	r3, r1
 80129c8:	3324      	adds	r3, #36	; 0x24
 80129ca:	881b      	ldrh	r3, [r3, #0]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d117      	bne.n	8012a00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80129d0:	6839      	ldr	r1, [r7, #0]
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f000 fb96 	bl	8013104 <USBD_CtlError>
                  break;
 80129d8:	e054      	b.n	8012a84 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80129da:	7bbb      	ldrb	r3, [r7, #14]
 80129dc:	f003 020f 	and.w	r2, r3, #15
 80129e0:	6879      	ldr	r1, [r7, #4]
 80129e2:	4613      	mov	r3, r2
 80129e4:	009b      	lsls	r3, r3, #2
 80129e6:	4413      	add	r3, r2
 80129e8:	009b      	lsls	r3, r3, #2
 80129ea:	440b      	add	r3, r1
 80129ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80129f0:	881b      	ldrh	r3, [r3, #0]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d104      	bne.n	8012a00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80129f6:	6839      	ldr	r1, [r7, #0]
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f000 fb83 	bl	8013104 <USBD_CtlError>
                  break;
 80129fe:	e041      	b.n	8012a84 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	da0b      	bge.n	8012a20 <USBD_StdEPReq+0x23e>
 8012a08:	7bbb      	ldrb	r3, [r7, #14]
 8012a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a0e:	4613      	mov	r3, r2
 8012a10:	009b      	lsls	r3, r3, #2
 8012a12:	4413      	add	r3, r2
 8012a14:	009b      	lsls	r3, r3, #2
 8012a16:	3310      	adds	r3, #16
 8012a18:	687a      	ldr	r2, [r7, #4]
 8012a1a:	4413      	add	r3, r2
 8012a1c:	3304      	adds	r3, #4
 8012a1e:	e00b      	b.n	8012a38 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012a20:	7bbb      	ldrb	r3, [r7, #14]
 8012a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a26:	4613      	mov	r3, r2
 8012a28:	009b      	lsls	r3, r3, #2
 8012a2a:	4413      	add	r3, r2
 8012a2c:	009b      	lsls	r3, r3, #2
 8012a2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012a32:	687a      	ldr	r2, [r7, #4]
 8012a34:	4413      	add	r3, r2
 8012a36:	3304      	adds	r3, #4
 8012a38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012a3a:	7bbb      	ldrb	r3, [r7, #14]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d002      	beq.n	8012a46 <USBD_StdEPReq+0x264>
 8012a40:	7bbb      	ldrb	r3, [r7, #14]
 8012a42:	2b80      	cmp	r3, #128	; 0x80
 8012a44:	d103      	bne.n	8012a4e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	601a      	str	r2, [r3, #0]
 8012a4c:	e00e      	b.n	8012a6c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012a4e:	7bbb      	ldrb	r3, [r7, #14]
 8012a50:	4619      	mov	r1, r3
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f004 f854 	bl	8016b00 <USBD_LL_IsStallEP>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d003      	beq.n	8012a66 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	2201      	movs	r2, #1
 8012a62:	601a      	str	r2, [r3, #0]
 8012a64:	e002      	b.n	8012a6c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	2202      	movs	r2, #2
 8012a70:	4619      	mov	r1, r3
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f000 fbb7 	bl	80131e6 <USBD_CtlSendData>
              break;
 8012a78:	e004      	b.n	8012a84 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8012a7a:	6839      	ldr	r1, [r7, #0]
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f000 fb41 	bl	8013104 <USBD_CtlError>
              break;
 8012a82:	bf00      	nop
          }
          break;
 8012a84:	e004      	b.n	8012a90 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8012a86:	6839      	ldr	r1, [r7, #0]
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f000 fb3b 	bl	8013104 <USBD_CtlError>
          break;
 8012a8e:	bf00      	nop
      }
      break;
 8012a90:	e004      	b.n	8012a9c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8012a92:	6839      	ldr	r1, [r7, #0]
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f000 fb35 	bl	8013104 <USBD_CtlError>
      break;
 8012a9a:	bf00      	nop
  }

  return ret;
 8012a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3710      	adds	r7, #16
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}
	...

08012aa8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b084      	sub	sp, #16
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012aba:	2300      	movs	r3, #0
 8012abc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	885b      	ldrh	r3, [r3, #2]
 8012ac2:	0a1b      	lsrs	r3, r3, #8
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	3b01      	subs	r3, #1
 8012ac8:	2b06      	cmp	r3, #6
 8012aca:	f200 8128 	bhi.w	8012d1e <USBD_GetDescriptor+0x276>
 8012ace:	a201      	add	r2, pc, #4	; (adr r2, 8012ad4 <USBD_GetDescriptor+0x2c>)
 8012ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ad4:	08012af1 	.word	0x08012af1
 8012ad8:	08012b09 	.word	0x08012b09
 8012adc:	08012b49 	.word	0x08012b49
 8012ae0:	08012d1f 	.word	0x08012d1f
 8012ae4:	08012d1f 	.word	0x08012d1f
 8012ae8:	08012cbf 	.word	0x08012cbf
 8012aec:	08012ceb 	.word	0x08012ceb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	687a      	ldr	r2, [r7, #4]
 8012afa:	7c12      	ldrb	r2, [r2, #16]
 8012afc:	f107 0108 	add.w	r1, r7, #8
 8012b00:	4610      	mov	r0, r2
 8012b02:	4798      	blx	r3
 8012b04:	60f8      	str	r0, [r7, #12]
      break;
 8012b06:	e112      	b.n	8012d2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	7c1b      	ldrb	r3, [r3, #16]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d10d      	bne.n	8012b2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b18:	f107 0208 	add.w	r2, r7, #8
 8012b1c:	4610      	mov	r0, r2
 8012b1e:	4798      	blx	r3
 8012b20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	3301      	adds	r3, #1
 8012b26:	2202      	movs	r2, #2
 8012b28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012b2a:	e100      	b.n	8012d2e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b34:	f107 0208 	add.w	r2, r7, #8
 8012b38:	4610      	mov	r0, r2
 8012b3a:	4798      	blx	r3
 8012b3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	3301      	adds	r3, #1
 8012b42:	2202      	movs	r2, #2
 8012b44:	701a      	strb	r2, [r3, #0]
      break;
 8012b46:	e0f2      	b.n	8012d2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	885b      	ldrh	r3, [r3, #2]
 8012b4c:	b2db      	uxtb	r3, r3
 8012b4e:	2b05      	cmp	r3, #5
 8012b50:	f200 80ac 	bhi.w	8012cac <USBD_GetDescriptor+0x204>
 8012b54:	a201      	add	r2, pc, #4	; (adr r2, 8012b5c <USBD_GetDescriptor+0xb4>)
 8012b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b5a:	bf00      	nop
 8012b5c:	08012b75 	.word	0x08012b75
 8012b60:	08012ba9 	.word	0x08012ba9
 8012b64:	08012bdd 	.word	0x08012bdd
 8012b68:	08012c11 	.word	0x08012c11
 8012b6c:	08012c45 	.word	0x08012c45
 8012b70:	08012c79 	.word	0x08012c79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d00b      	beq.n	8012b98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	687a      	ldr	r2, [r7, #4]
 8012b8a:	7c12      	ldrb	r2, [r2, #16]
 8012b8c:	f107 0108 	add.w	r1, r7, #8
 8012b90:	4610      	mov	r0, r2
 8012b92:	4798      	blx	r3
 8012b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b96:	e091      	b.n	8012cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012b98:	6839      	ldr	r1, [r7, #0]
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f000 fab2 	bl	8013104 <USBD_CtlError>
            err++;
 8012ba0:	7afb      	ldrb	r3, [r7, #11]
 8012ba2:	3301      	adds	r3, #1
 8012ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8012ba6:	e089      	b.n	8012cbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bae:	689b      	ldr	r3, [r3, #8]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d00b      	beq.n	8012bcc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bba:	689b      	ldr	r3, [r3, #8]
 8012bbc:	687a      	ldr	r2, [r7, #4]
 8012bbe:	7c12      	ldrb	r2, [r2, #16]
 8012bc0:	f107 0108 	add.w	r1, r7, #8
 8012bc4:	4610      	mov	r0, r2
 8012bc6:	4798      	blx	r3
 8012bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bca:	e077      	b.n	8012cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012bcc:	6839      	ldr	r1, [r7, #0]
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f000 fa98 	bl	8013104 <USBD_CtlError>
            err++;
 8012bd4:	7afb      	ldrb	r3, [r7, #11]
 8012bd6:	3301      	adds	r3, #1
 8012bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8012bda:	e06f      	b.n	8012cbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d00b      	beq.n	8012c00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bee:	68db      	ldr	r3, [r3, #12]
 8012bf0:	687a      	ldr	r2, [r7, #4]
 8012bf2:	7c12      	ldrb	r2, [r2, #16]
 8012bf4:	f107 0108 	add.w	r1, r7, #8
 8012bf8:	4610      	mov	r0, r2
 8012bfa:	4798      	blx	r3
 8012bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bfe:	e05d      	b.n	8012cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012c00:	6839      	ldr	r1, [r7, #0]
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f000 fa7e 	bl	8013104 <USBD_CtlError>
            err++;
 8012c08:	7afb      	ldrb	r3, [r7, #11]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8012c0e:	e055      	b.n	8012cbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c16:	691b      	ldr	r3, [r3, #16]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d00b      	beq.n	8012c34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c22:	691b      	ldr	r3, [r3, #16]
 8012c24:	687a      	ldr	r2, [r7, #4]
 8012c26:	7c12      	ldrb	r2, [r2, #16]
 8012c28:	f107 0108 	add.w	r1, r7, #8
 8012c2c:	4610      	mov	r0, r2
 8012c2e:	4798      	blx	r3
 8012c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c32:	e043      	b.n	8012cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012c34:	6839      	ldr	r1, [r7, #0]
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f000 fa64 	bl	8013104 <USBD_CtlError>
            err++;
 8012c3c:	7afb      	ldrb	r3, [r7, #11]
 8012c3e:	3301      	adds	r3, #1
 8012c40:	72fb      	strb	r3, [r7, #11]
          break;
 8012c42:	e03b      	b.n	8012cbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c4a:	695b      	ldr	r3, [r3, #20]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d00b      	beq.n	8012c68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c56:	695b      	ldr	r3, [r3, #20]
 8012c58:	687a      	ldr	r2, [r7, #4]
 8012c5a:	7c12      	ldrb	r2, [r2, #16]
 8012c5c:	f107 0108 	add.w	r1, r7, #8
 8012c60:	4610      	mov	r0, r2
 8012c62:	4798      	blx	r3
 8012c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c66:	e029      	b.n	8012cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012c68:	6839      	ldr	r1, [r7, #0]
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 fa4a 	bl	8013104 <USBD_CtlError>
            err++;
 8012c70:	7afb      	ldrb	r3, [r7, #11]
 8012c72:	3301      	adds	r3, #1
 8012c74:	72fb      	strb	r3, [r7, #11]
          break;
 8012c76:	e021      	b.n	8012cbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c7e:	699b      	ldr	r3, [r3, #24]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d00b      	beq.n	8012c9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c8a:	699b      	ldr	r3, [r3, #24]
 8012c8c:	687a      	ldr	r2, [r7, #4]
 8012c8e:	7c12      	ldrb	r2, [r2, #16]
 8012c90:	f107 0108 	add.w	r1, r7, #8
 8012c94:	4610      	mov	r0, r2
 8012c96:	4798      	blx	r3
 8012c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c9a:	e00f      	b.n	8012cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012c9c:	6839      	ldr	r1, [r7, #0]
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f000 fa30 	bl	8013104 <USBD_CtlError>
            err++;
 8012ca4:	7afb      	ldrb	r3, [r7, #11]
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8012caa:	e007      	b.n	8012cbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012cac:	6839      	ldr	r1, [r7, #0]
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f000 fa28 	bl	8013104 <USBD_CtlError>
          err++;
 8012cb4:	7afb      	ldrb	r3, [r7, #11]
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012cba:	bf00      	nop
      }
      break;
 8012cbc:	e037      	b.n	8012d2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	7c1b      	ldrb	r3, [r3, #16]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d109      	bne.n	8012cda <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cce:	f107 0208 	add.w	r2, r7, #8
 8012cd2:	4610      	mov	r0, r2
 8012cd4:	4798      	blx	r3
 8012cd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012cd8:	e029      	b.n	8012d2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012cda:	6839      	ldr	r1, [r7, #0]
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f000 fa11 	bl	8013104 <USBD_CtlError>
        err++;
 8012ce2:	7afb      	ldrb	r3, [r7, #11]
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	72fb      	strb	r3, [r7, #11]
      break;
 8012ce8:	e021      	b.n	8012d2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	7c1b      	ldrb	r3, [r3, #16]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d10d      	bne.n	8012d0e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cfa:	f107 0208 	add.w	r2, r7, #8
 8012cfe:	4610      	mov	r0, r2
 8012d00:	4798      	blx	r3
 8012d02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	3301      	adds	r3, #1
 8012d08:	2207      	movs	r2, #7
 8012d0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d0c:	e00f      	b.n	8012d2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012d0e:	6839      	ldr	r1, [r7, #0]
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f000 f9f7 	bl	8013104 <USBD_CtlError>
        err++;
 8012d16:	7afb      	ldrb	r3, [r7, #11]
 8012d18:	3301      	adds	r3, #1
 8012d1a:	72fb      	strb	r3, [r7, #11]
      break;
 8012d1c:	e007      	b.n	8012d2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012d1e:	6839      	ldr	r1, [r7, #0]
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f000 f9ef 	bl	8013104 <USBD_CtlError>
      err++;
 8012d26:	7afb      	ldrb	r3, [r7, #11]
 8012d28:	3301      	adds	r3, #1
 8012d2a:	72fb      	strb	r3, [r7, #11]
      break;
 8012d2c:	bf00      	nop
  }

  if (err != 0U)
 8012d2e:	7afb      	ldrb	r3, [r7, #11]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d11e      	bne.n	8012d72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	88db      	ldrh	r3, [r3, #6]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d016      	beq.n	8012d6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012d3c:	893b      	ldrh	r3, [r7, #8]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d00e      	beq.n	8012d60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	88da      	ldrh	r2, [r3, #6]
 8012d46:	893b      	ldrh	r3, [r7, #8]
 8012d48:	4293      	cmp	r3, r2
 8012d4a:	bf28      	it	cs
 8012d4c:	4613      	movcs	r3, r2
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012d52:	893b      	ldrh	r3, [r7, #8]
 8012d54:	461a      	mov	r2, r3
 8012d56:	68f9      	ldr	r1, [r7, #12]
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f000 fa44 	bl	80131e6 <USBD_CtlSendData>
 8012d5e:	e009      	b.n	8012d74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012d60:	6839      	ldr	r1, [r7, #0]
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f000 f9ce 	bl	8013104 <USBD_CtlError>
 8012d68:	e004      	b.n	8012d74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f000 fa95 	bl	801329a <USBD_CtlSendStatus>
 8012d70:	e000      	b.n	8012d74 <USBD_GetDescriptor+0x2cc>
    return;
 8012d72:	bf00      	nop
  }
}
 8012d74:	3710      	adds	r7, #16
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
 8012d7a:	bf00      	nop

08012d7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b084      	sub	sp, #16
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	889b      	ldrh	r3, [r3, #4]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d131      	bne.n	8012df2 <USBD_SetAddress+0x76>
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	88db      	ldrh	r3, [r3, #6]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d12d      	bne.n	8012df2 <USBD_SetAddress+0x76>
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	885b      	ldrh	r3, [r3, #2]
 8012d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8012d9c:	d829      	bhi.n	8012df2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	885b      	ldrh	r3, [r3, #2]
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012da8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	2b03      	cmp	r3, #3
 8012db4:	d104      	bne.n	8012dc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012db6:	6839      	ldr	r1, [r7, #0]
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f000 f9a3 	bl	8013104 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dbe:	e01d      	b.n	8012dfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	7bfa      	ldrb	r2, [r7, #15]
 8012dc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012dc8:	7bfb      	ldrb	r3, [r7, #15]
 8012dca:	4619      	mov	r1, r3
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f003 fec3 	bl	8016b58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f000 fa61 	bl	801329a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012dd8:	7bfb      	ldrb	r3, [r7, #15]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d004      	beq.n	8012de8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2202      	movs	r2, #2
 8012de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012de6:	e009      	b.n	8012dfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2201      	movs	r2, #1
 8012dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012df0:	e004      	b.n	8012dfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012df2:	6839      	ldr	r1, [r7, #0]
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f000 f985 	bl	8013104 <USBD_CtlError>
  }
}
 8012dfa:	bf00      	nop
 8012dfc:	bf00      	nop
 8012dfe:	3710      	adds	r7, #16
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}

08012e04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b084      	sub	sp, #16
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	885b      	ldrh	r3, [r3, #2]
 8012e16:	b2da      	uxtb	r2, r3
 8012e18:	4b4c      	ldr	r3, [pc, #304]	; (8012f4c <USBD_SetConfig+0x148>)
 8012e1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012e1c:	4b4b      	ldr	r3, [pc, #300]	; (8012f4c <USBD_SetConfig+0x148>)
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	2b01      	cmp	r3, #1
 8012e22:	d905      	bls.n	8012e30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012e24:	6839      	ldr	r1, [r7, #0]
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f000 f96c 	bl	8013104 <USBD_CtlError>
    return USBD_FAIL;
 8012e2c:	2303      	movs	r3, #3
 8012e2e:	e088      	b.n	8012f42 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e36:	b2db      	uxtb	r3, r3
 8012e38:	2b02      	cmp	r3, #2
 8012e3a:	d002      	beq.n	8012e42 <USBD_SetConfig+0x3e>
 8012e3c:	2b03      	cmp	r3, #3
 8012e3e:	d025      	beq.n	8012e8c <USBD_SetConfig+0x88>
 8012e40:	e071      	b.n	8012f26 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012e42:	4b42      	ldr	r3, [pc, #264]	; (8012f4c <USBD_SetConfig+0x148>)
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d01c      	beq.n	8012e84 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012e4a:	4b40      	ldr	r3, [pc, #256]	; (8012f4c <USBD_SetConfig+0x148>)
 8012e4c:	781b      	ldrb	r3, [r3, #0]
 8012e4e:	461a      	mov	r2, r3
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012e54:	4b3d      	ldr	r3, [pc, #244]	; (8012f4c <USBD_SetConfig+0x148>)
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	4619      	mov	r1, r3
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f7ff f948 	bl	80120f0 <USBD_SetClassConfig>
 8012e60:	4603      	mov	r3, r0
 8012e62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012e64:	7bfb      	ldrb	r3, [r7, #15]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d004      	beq.n	8012e74 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012e6a:	6839      	ldr	r1, [r7, #0]
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f000 f949 	bl	8013104 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012e72:	e065      	b.n	8012f40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f000 fa10 	bl	801329a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2203      	movs	r2, #3
 8012e7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012e82:	e05d      	b.n	8012f40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f000 fa08 	bl	801329a <USBD_CtlSendStatus>
      break;
 8012e8a:	e059      	b.n	8012f40 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012e8c:	4b2f      	ldr	r3, [pc, #188]	; (8012f4c <USBD_SetConfig+0x148>)
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d112      	bne.n	8012eba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2202      	movs	r2, #2
 8012e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012e9c:	4b2b      	ldr	r3, [pc, #172]	; (8012f4c <USBD_SetConfig+0x148>)
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	461a      	mov	r2, r3
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012ea6:	4b29      	ldr	r3, [pc, #164]	; (8012f4c <USBD_SetConfig+0x148>)
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	4619      	mov	r1, r3
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f7ff f93b 	bl	8012128 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f000 f9f1 	bl	801329a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012eb8:	e042      	b.n	8012f40 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012eba:	4b24      	ldr	r3, [pc, #144]	; (8012f4c <USBD_SetConfig+0x148>)
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	685b      	ldr	r3, [r3, #4]
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d02a      	beq.n	8012f1e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	4619      	mov	r1, r3
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f7ff f929 	bl	8012128 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012ed6:	4b1d      	ldr	r3, [pc, #116]	; (8012f4c <USBD_SetConfig+0x148>)
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	461a      	mov	r2, r3
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012ee0:	4b1a      	ldr	r3, [pc, #104]	; (8012f4c <USBD_SetConfig+0x148>)
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f7ff f902 	bl	80120f0 <USBD_SetClassConfig>
 8012eec:	4603      	mov	r3, r0
 8012eee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012ef0:	7bfb      	ldrb	r3, [r7, #15]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d00f      	beq.n	8012f16 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012ef6:	6839      	ldr	r1, [r7, #0]
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f000 f903 	bl	8013104 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	b2db      	uxtb	r3, r3
 8012f04:	4619      	mov	r1, r3
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f7ff f90e 	bl	8012128 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2202      	movs	r2, #2
 8012f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012f14:	e014      	b.n	8012f40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f000 f9bf 	bl	801329a <USBD_CtlSendStatus>
      break;
 8012f1c:	e010      	b.n	8012f40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f000 f9bb 	bl	801329a <USBD_CtlSendStatus>
      break;
 8012f24:	e00c      	b.n	8012f40 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012f26:	6839      	ldr	r1, [r7, #0]
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f000 f8eb 	bl	8013104 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012f2e:	4b07      	ldr	r3, [pc, #28]	; (8012f4c <USBD_SetConfig+0x148>)
 8012f30:	781b      	ldrb	r3, [r3, #0]
 8012f32:	4619      	mov	r1, r3
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f7ff f8f7 	bl	8012128 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012f3a:	2303      	movs	r3, #3
 8012f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8012f3e:	bf00      	nop
  }

  return ret;
 8012f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3710      	adds	r7, #16
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	2000132c 	.word	0x2000132c

08012f50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b082      	sub	sp, #8
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	88db      	ldrh	r3, [r3, #6]
 8012f5e:	2b01      	cmp	r3, #1
 8012f60:	d004      	beq.n	8012f6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012f62:	6839      	ldr	r1, [r7, #0]
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f000 f8cd 	bl	8013104 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012f6a:	e023      	b.n	8012fb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f72:	b2db      	uxtb	r3, r3
 8012f74:	2b02      	cmp	r3, #2
 8012f76:	dc02      	bgt.n	8012f7e <USBD_GetConfig+0x2e>
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	dc03      	bgt.n	8012f84 <USBD_GetConfig+0x34>
 8012f7c:	e015      	b.n	8012faa <USBD_GetConfig+0x5a>
 8012f7e:	2b03      	cmp	r3, #3
 8012f80:	d00b      	beq.n	8012f9a <USBD_GetConfig+0x4a>
 8012f82:	e012      	b.n	8012faa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	2200      	movs	r2, #0
 8012f88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	3308      	adds	r3, #8
 8012f8e:	2201      	movs	r2, #1
 8012f90:	4619      	mov	r1, r3
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f000 f927 	bl	80131e6 <USBD_CtlSendData>
        break;
 8012f98:	e00c      	b.n	8012fb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	3304      	adds	r3, #4
 8012f9e:	2201      	movs	r2, #1
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f000 f91f 	bl	80131e6 <USBD_CtlSendData>
        break;
 8012fa8:	e004      	b.n	8012fb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012faa:	6839      	ldr	r1, [r7, #0]
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f000 f8a9 	bl	8013104 <USBD_CtlError>
        break;
 8012fb2:	bf00      	nop
}
 8012fb4:	bf00      	nop
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b082      	sub	sp, #8
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012fcc:	b2db      	uxtb	r3, r3
 8012fce:	3b01      	subs	r3, #1
 8012fd0:	2b02      	cmp	r3, #2
 8012fd2:	d81e      	bhi.n	8013012 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	88db      	ldrh	r3, [r3, #6]
 8012fd8:	2b02      	cmp	r3, #2
 8012fda:	d004      	beq.n	8012fe6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012fdc:	6839      	ldr	r1, [r7, #0]
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f000 f890 	bl	8013104 <USBD_CtlError>
        break;
 8012fe4:	e01a      	b.n	801301c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2201      	movs	r2, #1
 8012fea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d005      	beq.n	8013002 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	68db      	ldr	r3, [r3, #12]
 8012ffa:	f043 0202 	orr.w	r2, r3, #2
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	330c      	adds	r3, #12
 8013006:	2202      	movs	r2, #2
 8013008:	4619      	mov	r1, r3
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f000 f8eb 	bl	80131e6 <USBD_CtlSendData>
      break;
 8013010:	e004      	b.n	801301c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013012:	6839      	ldr	r1, [r7, #0]
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f000 f875 	bl	8013104 <USBD_CtlError>
      break;
 801301a:	bf00      	nop
  }
}
 801301c:	bf00      	nop
 801301e:	3708      	adds	r7, #8
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}

08013024 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	885b      	ldrh	r3, [r3, #2]
 8013032:	2b01      	cmp	r3, #1
 8013034:	d106      	bne.n	8013044 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	2201      	movs	r2, #1
 801303a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f000 f92b 	bl	801329a <USBD_CtlSendStatus>
  }
}
 8013044:	bf00      	nop
 8013046:	3708      	adds	r7, #8
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801305c:	b2db      	uxtb	r3, r3
 801305e:	3b01      	subs	r3, #1
 8013060:	2b02      	cmp	r3, #2
 8013062:	d80b      	bhi.n	801307c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	885b      	ldrh	r3, [r3, #2]
 8013068:	2b01      	cmp	r3, #1
 801306a:	d10c      	bne.n	8013086 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2200      	movs	r2, #0
 8013070:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f000 f910 	bl	801329a <USBD_CtlSendStatus>
      }
      break;
 801307a:	e004      	b.n	8013086 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801307c:	6839      	ldr	r1, [r7, #0]
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	f000 f840 	bl	8013104 <USBD_CtlError>
      break;
 8013084:	e000      	b.n	8013088 <USBD_ClrFeature+0x3c>
      break;
 8013086:	bf00      	nop
  }
}
 8013088:	bf00      	nop
 801308a:	3708      	adds	r7, #8
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}

08013090 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b084      	sub	sp, #16
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	781a      	ldrb	r2, [r3, #0]
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	3301      	adds	r3, #1
 80130aa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	781a      	ldrb	r2, [r3, #0]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	3301      	adds	r3, #1
 80130b8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80130ba:	68f8      	ldr	r0, [r7, #12]
 80130bc:	f7ff fabb 	bl	8012636 <SWAPBYTE>
 80130c0:	4603      	mov	r3, r0
 80130c2:	461a      	mov	r2, r3
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	3301      	adds	r3, #1
 80130cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	3301      	adds	r3, #1
 80130d2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80130d4:	68f8      	ldr	r0, [r7, #12]
 80130d6:	f7ff faae 	bl	8012636 <SWAPBYTE>
 80130da:	4603      	mov	r3, r0
 80130dc:	461a      	mov	r2, r3
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	3301      	adds	r3, #1
 80130e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	3301      	adds	r3, #1
 80130ec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80130ee:	68f8      	ldr	r0, [r7, #12]
 80130f0:	f7ff faa1 	bl	8012636 <SWAPBYTE>
 80130f4:	4603      	mov	r3, r0
 80130f6:	461a      	mov	r2, r3
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	80da      	strh	r2, [r3, #6]
}
 80130fc:	bf00      	nop
 80130fe:	3710      	adds	r7, #16
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}

08013104 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801310e:	2180      	movs	r1, #128	; 0x80
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f003 fc89 	bl	8016a28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013116:	2100      	movs	r1, #0
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f003 fc85 	bl	8016a28 <USBD_LL_StallEP>
}
 801311e:	bf00      	nop
 8013120:	3708      	adds	r7, #8
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}

08013126 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013126:	b580      	push	{r7, lr}
 8013128:	b086      	sub	sp, #24
 801312a:	af00      	add	r7, sp, #0
 801312c:	60f8      	str	r0, [r7, #12]
 801312e:	60b9      	str	r1, [r7, #8]
 8013130:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013132:	2300      	movs	r3, #0
 8013134:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d036      	beq.n	80131aa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8013140:	6938      	ldr	r0, [r7, #16]
 8013142:	f000 f836 	bl	80131b2 <USBD_GetLen>
 8013146:	4603      	mov	r3, r0
 8013148:	3301      	adds	r3, #1
 801314a:	b29b      	uxth	r3, r3
 801314c:	005b      	lsls	r3, r3, #1
 801314e:	b29a      	uxth	r2, r3
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013154:	7dfb      	ldrb	r3, [r7, #23]
 8013156:	68ba      	ldr	r2, [r7, #8]
 8013158:	4413      	add	r3, r2
 801315a:	687a      	ldr	r2, [r7, #4]
 801315c:	7812      	ldrb	r2, [r2, #0]
 801315e:	701a      	strb	r2, [r3, #0]
  idx++;
 8013160:	7dfb      	ldrb	r3, [r7, #23]
 8013162:	3301      	adds	r3, #1
 8013164:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013166:	7dfb      	ldrb	r3, [r7, #23]
 8013168:	68ba      	ldr	r2, [r7, #8]
 801316a:	4413      	add	r3, r2
 801316c:	2203      	movs	r2, #3
 801316e:	701a      	strb	r2, [r3, #0]
  idx++;
 8013170:	7dfb      	ldrb	r3, [r7, #23]
 8013172:	3301      	adds	r3, #1
 8013174:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013176:	e013      	b.n	80131a0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8013178:	7dfb      	ldrb	r3, [r7, #23]
 801317a:	68ba      	ldr	r2, [r7, #8]
 801317c:	4413      	add	r3, r2
 801317e:	693a      	ldr	r2, [r7, #16]
 8013180:	7812      	ldrb	r2, [r2, #0]
 8013182:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	3301      	adds	r3, #1
 8013188:	613b      	str	r3, [r7, #16]
    idx++;
 801318a:	7dfb      	ldrb	r3, [r7, #23]
 801318c:	3301      	adds	r3, #1
 801318e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013190:	7dfb      	ldrb	r3, [r7, #23]
 8013192:	68ba      	ldr	r2, [r7, #8]
 8013194:	4413      	add	r3, r2
 8013196:	2200      	movs	r2, #0
 8013198:	701a      	strb	r2, [r3, #0]
    idx++;
 801319a:	7dfb      	ldrb	r3, [r7, #23]
 801319c:	3301      	adds	r3, #1
 801319e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d1e7      	bne.n	8013178 <USBD_GetString+0x52>
 80131a8:	e000      	b.n	80131ac <USBD_GetString+0x86>
    return;
 80131aa:	bf00      	nop
  }
}
 80131ac:	3718      	adds	r7, #24
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80131b2:	b480      	push	{r7}
 80131b4:	b085      	sub	sp, #20
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80131ba:	2300      	movs	r3, #0
 80131bc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80131c2:	e005      	b.n	80131d0 <USBD_GetLen+0x1e>
  {
    len++;
 80131c4:	7bfb      	ldrb	r3, [r7, #15]
 80131c6:	3301      	adds	r3, #1
 80131c8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	3301      	adds	r3, #1
 80131ce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d1f5      	bne.n	80131c4 <USBD_GetLen+0x12>
  }

  return len;
 80131d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3714      	adds	r7, #20
 80131de:	46bd      	mov	sp, r7
 80131e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e4:	4770      	bx	lr

080131e6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80131e6:	b580      	push	{r7, lr}
 80131e8:	b084      	sub	sp, #16
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	60f8      	str	r0, [r7, #12]
 80131ee:	60b9      	str	r1, [r7, #8]
 80131f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	2202      	movs	r2, #2
 80131f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	68ba      	ldr	r2, [r7, #8]
 801320a:	2100      	movs	r1, #0
 801320c:	68f8      	ldr	r0, [r7, #12]
 801320e:	f003 fcd9 	bl	8016bc4 <USBD_LL_Transmit>

  return USBD_OK;
 8013212:	2300      	movs	r3, #0
}
 8013214:	4618      	mov	r0, r3
 8013216:	3710      	adds	r7, #16
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}

0801321c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b084      	sub	sp, #16
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	68ba      	ldr	r2, [r7, #8]
 801322c:	2100      	movs	r1, #0
 801322e:	68f8      	ldr	r0, [r7, #12]
 8013230:	f003 fcc8 	bl	8016bc4 <USBD_LL_Transmit>

  return USBD_OK;
 8013234:	2300      	movs	r3, #0
}
 8013236:	4618      	mov	r0, r3
 8013238:	3710      	adds	r7, #16
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}

0801323e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801323e:	b580      	push	{r7, lr}
 8013240:	b084      	sub	sp, #16
 8013242:	af00      	add	r7, sp, #0
 8013244:	60f8      	str	r0, [r7, #12]
 8013246:	60b9      	str	r1, [r7, #8]
 8013248:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	2203      	movs	r2, #3
 801324e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	687a      	ldr	r2, [r7, #4]
 8013256:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	68ba      	ldr	r2, [r7, #8]
 8013266:	2100      	movs	r1, #0
 8013268:	68f8      	ldr	r0, [r7, #12]
 801326a:	f003 fce3 	bl	8016c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801326e:	2300      	movs	r3, #0
}
 8013270:	4618      	mov	r0, r3
 8013272:	3710      	adds	r7, #16
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	60f8      	str	r0, [r7, #12]
 8013280:	60b9      	str	r1, [r7, #8]
 8013282:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	68ba      	ldr	r2, [r7, #8]
 8013288:	2100      	movs	r1, #0
 801328a:	68f8      	ldr	r0, [r7, #12]
 801328c:	f003 fcd2 	bl	8016c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013290:	2300      	movs	r3, #0
}
 8013292:	4618      	mov	r0, r3
 8013294:	3710      	adds	r7, #16
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}

0801329a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801329a:	b580      	push	{r7, lr}
 801329c:	b082      	sub	sp, #8
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2204      	movs	r2, #4
 80132a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80132aa:	2300      	movs	r3, #0
 80132ac:	2200      	movs	r2, #0
 80132ae:	2100      	movs	r1, #0
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f003 fc87 	bl	8016bc4 <USBD_LL_Transmit>

  return USBD_OK;
 80132b6:	2300      	movs	r3, #0
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3708      	adds	r7, #8
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2205      	movs	r2, #5
 80132cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80132d0:	2300      	movs	r3, #0
 80132d2:	2200      	movs	r2, #0
 80132d4:	2100      	movs	r1, #0
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f003 fcac 	bl	8016c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80132dc:	2300      	movs	r3, #0
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3708      	adds	r7, #8
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
	...

080132e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	4603      	mov	r3, r0
 80132f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80132f2:	79fb      	ldrb	r3, [r7, #7]
 80132f4:	4a08      	ldr	r2, [pc, #32]	; (8013318 <disk_status+0x30>)
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	4413      	add	r3, r2
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	79fa      	ldrb	r2, [r7, #7]
 8013300:	4905      	ldr	r1, [pc, #20]	; (8013318 <disk_status+0x30>)
 8013302:	440a      	add	r2, r1
 8013304:	7a12      	ldrb	r2, [r2, #8]
 8013306:	4610      	mov	r0, r2
 8013308:	4798      	blx	r3
 801330a:	4603      	mov	r3, r0
 801330c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013310:	4618      	mov	r0, r3
 8013312:	3710      	adds	r7, #16
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}
 8013318:	20001358 	.word	0x20001358

0801331c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b084      	sub	sp, #16
 8013320:	af00      	add	r7, sp, #0
 8013322:	4603      	mov	r3, r0
 8013324:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8013326:	2300      	movs	r3, #0
 8013328:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801332a:	79fb      	ldrb	r3, [r7, #7]
 801332c:	4a0d      	ldr	r2, [pc, #52]	; (8013364 <disk_initialize+0x48>)
 801332e:	5cd3      	ldrb	r3, [r2, r3]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d111      	bne.n	8013358 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8013334:	79fb      	ldrb	r3, [r7, #7]
 8013336:	4a0b      	ldr	r2, [pc, #44]	; (8013364 <disk_initialize+0x48>)
 8013338:	2101      	movs	r1, #1
 801333a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801333c:	79fb      	ldrb	r3, [r7, #7]
 801333e:	4a09      	ldr	r2, [pc, #36]	; (8013364 <disk_initialize+0x48>)
 8013340:	009b      	lsls	r3, r3, #2
 8013342:	4413      	add	r3, r2
 8013344:	685b      	ldr	r3, [r3, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	79fa      	ldrb	r2, [r7, #7]
 801334a:	4906      	ldr	r1, [pc, #24]	; (8013364 <disk_initialize+0x48>)
 801334c:	440a      	add	r2, r1
 801334e:	7a12      	ldrb	r2, [r2, #8]
 8013350:	4610      	mov	r0, r2
 8013352:	4798      	blx	r3
 8013354:	4603      	mov	r3, r0
 8013356:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8013358:	7bfb      	ldrb	r3, [r7, #15]
}
 801335a:	4618      	mov	r0, r3
 801335c:	3710      	adds	r7, #16
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop
 8013364:	20001358 	.word	0x20001358

08013368 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013368:	b590      	push	{r4, r7, lr}
 801336a:	b087      	sub	sp, #28
 801336c:	af00      	add	r7, sp, #0
 801336e:	60b9      	str	r1, [r7, #8]
 8013370:	607a      	str	r2, [r7, #4]
 8013372:	603b      	str	r3, [r7, #0]
 8013374:	4603      	mov	r3, r0
 8013376:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013378:	7bfb      	ldrb	r3, [r7, #15]
 801337a:	4a0a      	ldr	r2, [pc, #40]	; (80133a4 <disk_read+0x3c>)
 801337c:	009b      	lsls	r3, r3, #2
 801337e:	4413      	add	r3, r2
 8013380:	685b      	ldr	r3, [r3, #4]
 8013382:	689c      	ldr	r4, [r3, #8]
 8013384:	7bfb      	ldrb	r3, [r7, #15]
 8013386:	4a07      	ldr	r2, [pc, #28]	; (80133a4 <disk_read+0x3c>)
 8013388:	4413      	add	r3, r2
 801338a:	7a18      	ldrb	r0, [r3, #8]
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	68b9      	ldr	r1, [r7, #8]
 8013392:	47a0      	blx	r4
 8013394:	4603      	mov	r3, r0
 8013396:	75fb      	strb	r3, [r7, #23]
  return res;
 8013398:	7dfb      	ldrb	r3, [r7, #23]
}
 801339a:	4618      	mov	r0, r3
 801339c:	371c      	adds	r7, #28
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd90      	pop	{r4, r7, pc}
 80133a2:	bf00      	nop
 80133a4:	20001358 	.word	0x20001358

080133a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80133a8:	b590      	push	{r4, r7, lr}
 80133aa:	b087      	sub	sp, #28
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	60b9      	str	r1, [r7, #8]
 80133b0:	607a      	str	r2, [r7, #4]
 80133b2:	603b      	str	r3, [r7, #0]
 80133b4:	4603      	mov	r3, r0
 80133b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80133b8:	7bfb      	ldrb	r3, [r7, #15]
 80133ba:	4a0a      	ldr	r2, [pc, #40]	; (80133e4 <disk_write+0x3c>)
 80133bc:	009b      	lsls	r3, r3, #2
 80133be:	4413      	add	r3, r2
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	68dc      	ldr	r4, [r3, #12]
 80133c4:	7bfb      	ldrb	r3, [r7, #15]
 80133c6:	4a07      	ldr	r2, [pc, #28]	; (80133e4 <disk_write+0x3c>)
 80133c8:	4413      	add	r3, r2
 80133ca:	7a18      	ldrb	r0, [r3, #8]
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	68b9      	ldr	r1, [r7, #8]
 80133d2:	47a0      	blx	r4
 80133d4:	4603      	mov	r3, r0
 80133d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80133d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80133da:	4618      	mov	r0, r3
 80133dc:	371c      	adds	r7, #28
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd90      	pop	{r4, r7, pc}
 80133e2:	bf00      	nop
 80133e4:	20001358 	.word	0x20001358

080133e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b084      	sub	sp, #16
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	4603      	mov	r3, r0
 80133f0:	603a      	str	r2, [r7, #0]
 80133f2:	71fb      	strb	r3, [r7, #7]
 80133f4:	460b      	mov	r3, r1
 80133f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80133f8:	79fb      	ldrb	r3, [r7, #7]
 80133fa:	4a09      	ldr	r2, [pc, #36]	; (8013420 <disk_ioctl+0x38>)
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	4413      	add	r3, r2
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	691b      	ldr	r3, [r3, #16]
 8013404:	79fa      	ldrb	r2, [r7, #7]
 8013406:	4906      	ldr	r1, [pc, #24]	; (8013420 <disk_ioctl+0x38>)
 8013408:	440a      	add	r2, r1
 801340a:	7a10      	ldrb	r0, [r2, #8]
 801340c:	79b9      	ldrb	r1, [r7, #6]
 801340e:	683a      	ldr	r2, [r7, #0]
 8013410:	4798      	blx	r3
 8013412:	4603      	mov	r3, r0
 8013414:	73fb      	strb	r3, [r7, #15]
  return res;
 8013416:	7bfb      	ldrb	r3, [r7, #15]
}
 8013418:	4618      	mov	r0, r3
 801341a:	3710      	adds	r7, #16
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}
 8013420:	20001358 	.word	0x20001358

08013424 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013424:	b480      	push	{r7}
 8013426:	b085      	sub	sp, #20
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	3301      	adds	r3, #1
 8013430:	781b      	ldrb	r3, [r3, #0]
 8013432:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013434:	89fb      	ldrh	r3, [r7, #14]
 8013436:	021b      	lsls	r3, r3, #8
 8013438:	b21a      	sxth	r2, r3
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	781b      	ldrb	r3, [r3, #0]
 801343e:	b21b      	sxth	r3, r3
 8013440:	4313      	orrs	r3, r2
 8013442:	b21b      	sxth	r3, r3
 8013444:	81fb      	strh	r3, [r7, #14]
	return rv;
 8013446:	89fb      	ldrh	r3, [r7, #14]
}
 8013448:	4618      	mov	r0, r3
 801344a:	3714      	adds	r7, #20
 801344c:	46bd      	mov	sp, r7
 801344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013452:	4770      	bx	lr

08013454 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013454:	b480      	push	{r7}
 8013456:	b085      	sub	sp, #20
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	3303      	adds	r3, #3
 8013460:	781b      	ldrb	r3, [r3, #0]
 8013462:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	021b      	lsls	r3, r3, #8
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	3202      	adds	r2, #2
 801346c:	7812      	ldrb	r2, [r2, #0]
 801346e:	4313      	orrs	r3, r2
 8013470:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	021b      	lsls	r3, r3, #8
 8013476:	687a      	ldr	r2, [r7, #4]
 8013478:	3201      	adds	r2, #1
 801347a:	7812      	ldrb	r2, [r2, #0]
 801347c:	4313      	orrs	r3, r2
 801347e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	021b      	lsls	r3, r3, #8
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	7812      	ldrb	r2, [r2, #0]
 8013488:	4313      	orrs	r3, r2
 801348a:	60fb      	str	r3, [r7, #12]
	return rv;
 801348c:	68fb      	ldr	r3, [r7, #12]
}
 801348e:	4618      	mov	r0, r3
 8013490:	3714      	adds	r7, #20
 8013492:	46bd      	mov	sp, r7
 8013494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013498:	4770      	bx	lr

0801349a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801349a:	b480      	push	{r7}
 801349c:	b083      	sub	sp, #12
 801349e:	af00      	add	r7, sp, #0
 80134a0:	6078      	str	r0, [r7, #4]
 80134a2:	460b      	mov	r3, r1
 80134a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	1c5a      	adds	r2, r3, #1
 80134aa:	607a      	str	r2, [r7, #4]
 80134ac:	887a      	ldrh	r2, [r7, #2]
 80134ae:	b2d2      	uxtb	r2, r2
 80134b0:	701a      	strb	r2, [r3, #0]
 80134b2:	887b      	ldrh	r3, [r7, #2]
 80134b4:	0a1b      	lsrs	r3, r3, #8
 80134b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	1c5a      	adds	r2, r3, #1
 80134bc:	607a      	str	r2, [r7, #4]
 80134be:	887a      	ldrh	r2, [r7, #2]
 80134c0:	b2d2      	uxtb	r2, r2
 80134c2:	701a      	strb	r2, [r3, #0]
}
 80134c4:	bf00      	nop
 80134c6:	370c      	adds	r7, #12
 80134c8:	46bd      	mov	sp, r7
 80134ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ce:	4770      	bx	lr

080134d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	1c5a      	adds	r2, r3, #1
 80134de:	607a      	str	r2, [r7, #4]
 80134e0:	683a      	ldr	r2, [r7, #0]
 80134e2:	b2d2      	uxtb	r2, r2
 80134e4:	701a      	strb	r2, [r3, #0]
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	0a1b      	lsrs	r3, r3, #8
 80134ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	1c5a      	adds	r2, r3, #1
 80134f0:	607a      	str	r2, [r7, #4]
 80134f2:	683a      	ldr	r2, [r7, #0]
 80134f4:	b2d2      	uxtb	r2, r2
 80134f6:	701a      	strb	r2, [r3, #0]
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	0a1b      	lsrs	r3, r3, #8
 80134fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	1c5a      	adds	r2, r3, #1
 8013502:	607a      	str	r2, [r7, #4]
 8013504:	683a      	ldr	r2, [r7, #0]
 8013506:	b2d2      	uxtb	r2, r2
 8013508:	701a      	strb	r2, [r3, #0]
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	0a1b      	lsrs	r3, r3, #8
 801350e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	1c5a      	adds	r2, r3, #1
 8013514:	607a      	str	r2, [r7, #4]
 8013516:	683a      	ldr	r2, [r7, #0]
 8013518:	b2d2      	uxtb	r2, r2
 801351a:	701a      	strb	r2, [r3, #0]
}
 801351c:	bf00      	nop
 801351e:	370c      	adds	r7, #12
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr

08013528 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013528:	b480      	push	{r7}
 801352a:	b087      	sub	sp, #28
 801352c:	af00      	add	r7, sp, #0
 801352e:	60f8      	str	r0, [r7, #12]
 8013530:	60b9      	str	r1, [r7, #8]
 8013532:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013538:	68bb      	ldr	r3, [r7, #8]
 801353a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d00d      	beq.n	801355e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013542:	693a      	ldr	r2, [r7, #16]
 8013544:	1c53      	adds	r3, r2, #1
 8013546:	613b      	str	r3, [r7, #16]
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	1c59      	adds	r1, r3, #1
 801354c:	6179      	str	r1, [r7, #20]
 801354e:	7812      	ldrb	r2, [r2, #0]
 8013550:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	3b01      	subs	r3, #1
 8013556:	607b      	str	r3, [r7, #4]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d1f1      	bne.n	8013542 <mem_cpy+0x1a>
	}
}
 801355e:	bf00      	nop
 8013560:	371c      	adds	r7, #28
 8013562:	46bd      	mov	sp, r7
 8013564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013568:	4770      	bx	lr

0801356a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801356a:	b480      	push	{r7}
 801356c:	b087      	sub	sp, #28
 801356e:	af00      	add	r7, sp, #0
 8013570:	60f8      	str	r0, [r7, #12]
 8013572:	60b9      	str	r1, [r7, #8]
 8013574:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	1c5a      	adds	r2, r3, #1
 801357e:	617a      	str	r2, [r7, #20]
 8013580:	68ba      	ldr	r2, [r7, #8]
 8013582:	b2d2      	uxtb	r2, r2
 8013584:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	3b01      	subs	r3, #1
 801358a:	607b      	str	r3, [r7, #4]
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d1f3      	bne.n	801357a <mem_set+0x10>
}
 8013592:	bf00      	nop
 8013594:	bf00      	nop
 8013596:	371c      	adds	r7, #28
 8013598:	46bd      	mov	sp, r7
 801359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359e:	4770      	bx	lr

080135a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80135a0:	b480      	push	{r7}
 80135a2:	b089      	sub	sp, #36	; 0x24
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	61fb      	str	r3, [r7, #28]
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80135b4:	2300      	movs	r3, #0
 80135b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80135b8:	69fb      	ldr	r3, [r7, #28]
 80135ba:	1c5a      	adds	r2, r3, #1
 80135bc:	61fa      	str	r2, [r7, #28]
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	4619      	mov	r1, r3
 80135c2:	69bb      	ldr	r3, [r7, #24]
 80135c4:	1c5a      	adds	r2, r3, #1
 80135c6:	61ba      	str	r2, [r7, #24]
 80135c8:	781b      	ldrb	r3, [r3, #0]
 80135ca:	1acb      	subs	r3, r1, r3
 80135cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	3b01      	subs	r3, #1
 80135d2:	607b      	str	r3, [r7, #4]
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d002      	beq.n	80135e0 <mem_cmp+0x40>
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d0eb      	beq.n	80135b8 <mem_cmp+0x18>

	return r;
 80135e0:	697b      	ldr	r3, [r7, #20]
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3724      	adds	r7, #36	; 0x24
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr

080135ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80135ee:	b480      	push	{r7}
 80135f0:	b083      	sub	sp, #12
 80135f2:	af00      	add	r7, sp, #0
 80135f4:	6078      	str	r0, [r7, #4]
 80135f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80135f8:	e002      	b.n	8013600 <chk_chr+0x12>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	3301      	adds	r3, #1
 80135fe:	607b      	str	r3, [r7, #4]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d005      	beq.n	8013614 <chk_chr+0x26>
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	781b      	ldrb	r3, [r3, #0]
 801360c:	461a      	mov	r2, r3
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	4293      	cmp	r3, r2
 8013612:	d1f2      	bne.n	80135fa <chk_chr+0xc>
	return *str;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	781b      	ldrb	r3, [r3, #0]
}
 8013618:	4618      	mov	r0, r3
 801361a:	370c      	adds	r7, #12
 801361c:	46bd      	mov	sp, r7
 801361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013622:	4770      	bx	lr

08013624 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013624:	b480      	push	{r7}
 8013626:	b085      	sub	sp, #20
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801362e:	2300      	movs	r3, #0
 8013630:	60bb      	str	r3, [r7, #8]
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	60fb      	str	r3, [r7, #12]
 8013636:	e029      	b.n	801368c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013638:	4a27      	ldr	r2, [pc, #156]	; (80136d8 <chk_lock+0xb4>)
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	011b      	lsls	r3, r3, #4
 801363e:	4413      	add	r3, r2
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d01d      	beq.n	8013682 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013646:	4a24      	ldr	r2, [pc, #144]	; (80136d8 <chk_lock+0xb4>)
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	011b      	lsls	r3, r3, #4
 801364c:	4413      	add	r3, r2
 801364e:	681a      	ldr	r2, [r3, #0]
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	429a      	cmp	r2, r3
 8013656:	d116      	bne.n	8013686 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013658:	4a1f      	ldr	r2, [pc, #124]	; (80136d8 <chk_lock+0xb4>)
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	011b      	lsls	r3, r3, #4
 801365e:	4413      	add	r3, r2
 8013660:	3304      	adds	r3, #4
 8013662:	681a      	ldr	r2, [r3, #0]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013668:	429a      	cmp	r2, r3
 801366a:	d10c      	bne.n	8013686 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801366c:	4a1a      	ldr	r2, [pc, #104]	; (80136d8 <chk_lock+0xb4>)
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	011b      	lsls	r3, r3, #4
 8013672:	4413      	add	r3, r2
 8013674:	3308      	adds	r3, #8
 8013676:	681a      	ldr	r2, [r3, #0]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801367c:	429a      	cmp	r2, r3
 801367e:	d102      	bne.n	8013686 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013680:	e007      	b.n	8013692 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013682:	2301      	movs	r3, #1
 8013684:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	3301      	adds	r3, #1
 801368a:	60fb      	str	r3, [r7, #12]
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	2b01      	cmp	r3, #1
 8013690:	d9d2      	bls.n	8013638 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2b02      	cmp	r3, #2
 8013696:	d109      	bne.n	80136ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d102      	bne.n	80136a4 <chk_lock+0x80>
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	2b02      	cmp	r3, #2
 80136a2:	d101      	bne.n	80136a8 <chk_lock+0x84>
 80136a4:	2300      	movs	r3, #0
 80136a6:	e010      	b.n	80136ca <chk_lock+0xa6>
 80136a8:	2312      	movs	r3, #18
 80136aa:	e00e      	b.n	80136ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d108      	bne.n	80136c4 <chk_lock+0xa0>
 80136b2:	4a09      	ldr	r2, [pc, #36]	; (80136d8 <chk_lock+0xb4>)
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	011b      	lsls	r3, r3, #4
 80136b8:	4413      	add	r3, r2
 80136ba:	330c      	adds	r3, #12
 80136bc:	881b      	ldrh	r3, [r3, #0]
 80136be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80136c2:	d101      	bne.n	80136c8 <chk_lock+0xa4>
 80136c4:	2310      	movs	r3, #16
 80136c6:	e000      	b.n	80136ca <chk_lock+0xa6>
 80136c8:	2300      	movs	r3, #0
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3714      	adds	r7, #20
 80136ce:	46bd      	mov	sp, r7
 80136d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d4:	4770      	bx	lr
 80136d6:	bf00      	nop
 80136d8:	20001338 	.word	0x20001338

080136dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80136dc:	b480      	push	{r7}
 80136de:	b083      	sub	sp, #12
 80136e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80136e2:	2300      	movs	r3, #0
 80136e4:	607b      	str	r3, [r7, #4]
 80136e6:	e002      	b.n	80136ee <enq_lock+0x12>
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	3301      	adds	r3, #1
 80136ec:	607b      	str	r3, [r7, #4]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2b01      	cmp	r3, #1
 80136f2:	d806      	bhi.n	8013702 <enq_lock+0x26>
 80136f4:	4a09      	ldr	r2, [pc, #36]	; (801371c <enq_lock+0x40>)
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	011b      	lsls	r3, r3, #4
 80136fa:	4413      	add	r3, r2
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d1f2      	bne.n	80136e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2b02      	cmp	r3, #2
 8013706:	bf14      	ite	ne
 8013708:	2301      	movne	r3, #1
 801370a:	2300      	moveq	r3, #0
 801370c:	b2db      	uxtb	r3, r3
}
 801370e:	4618      	mov	r0, r3
 8013710:	370c      	adds	r7, #12
 8013712:	46bd      	mov	sp, r7
 8013714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013718:	4770      	bx	lr
 801371a:	bf00      	nop
 801371c:	20001338 	.word	0x20001338

08013720 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013720:	b480      	push	{r7}
 8013722:	b085      	sub	sp, #20
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
 8013728:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801372a:	2300      	movs	r3, #0
 801372c:	60fb      	str	r3, [r7, #12]
 801372e:	e01f      	b.n	8013770 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013730:	4a41      	ldr	r2, [pc, #260]	; (8013838 <inc_lock+0x118>)
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	011b      	lsls	r3, r3, #4
 8013736:	4413      	add	r3, r2
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	429a      	cmp	r2, r3
 8013740:	d113      	bne.n	801376a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013742:	4a3d      	ldr	r2, [pc, #244]	; (8013838 <inc_lock+0x118>)
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	011b      	lsls	r3, r3, #4
 8013748:	4413      	add	r3, r2
 801374a:	3304      	adds	r3, #4
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013752:	429a      	cmp	r2, r3
 8013754:	d109      	bne.n	801376a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013756:	4a38      	ldr	r2, [pc, #224]	; (8013838 <inc_lock+0x118>)
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	011b      	lsls	r3, r3, #4
 801375c:	4413      	add	r3, r2
 801375e:	3308      	adds	r3, #8
 8013760:	681a      	ldr	r2, [r3, #0]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013766:	429a      	cmp	r2, r3
 8013768:	d006      	beq.n	8013778 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	3301      	adds	r3, #1
 801376e:	60fb      	str	r3, [r7, #12]
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2b01      	cmp	r3, #1
 8013774:	d9dc      	bls.n	8013730 <inc_lock+0x10>
 8013776:	e000      	b.n	801377a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013778:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	2b02      	cmp	r3, #2
 801377e:	d132      	bne.n	80137e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013780:	2300      	movs	r3, #0
 8013782:	60fb      	str	r3, [r7, #12]
 8013784:	e002      	b.n	801378c <inc_lock+0x6c>
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	3301      	adds	r3, #1
 801378a:	60fb      	str	r3, [r7, #12]
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	2b01      	cmp	r3, #1
 8013790:	d806      	bhi.n	80137a0 <inc_lock+0x80>
 8013792:	4a29      	ldr	r2, [pc, #164]	; (8013838 <inc_lock+0x118>)
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	011b      	lsls	r3, r3, #4
 8013798:	4413      	add	r3, r2
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d1f2      	bne.n	8013786 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	2b02      	cmp	r3, #2
 80137a4:	d101      	bne.n	80137aa <inc_lock+0x8a>
 80137a6:	2300      	movs	r3, #0
 80137a8:	e040      	b.n	801382c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681a      	ldr	r2, [r3, #0]
 80137ae:	4922      	ldr	r1, [pc, #136]	; (8013838 <inc_lock+0x118>)
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	011b      	lsls	r3, r3, #4
 80137b4:	440b      	add	r3, r1
 80137b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	689a      	ldr	r2, [r3, #8]
 80137bc:	491e      	ldr	r1, [pc, #120]	; (8013838 <inc_lock+0x118>)
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	011b      	lsls	r3, r3, #4
 80137c2:	440b      	add	r3, r1
 80137c4:	3304      	adds	r3, #4
 80137c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	695a      	ldr	r2, [r3, #20]
 80137cc:	491a      	ldr	r1, [pc, #104]	; (8013838 <inc_lock+0x118>)
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	011b      	lsls	r3, r3, #4
 80137d2:	440b      	add	r3, r1
 80137d4:	3308      	adds	r3, #8
 80137d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80137d8:	4a17      	ldr	r2, [pc, #92]	; (8013838 <inc_lock+0x118>)
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	011b      	lsls	r3, r3, #4
 80137de:	4413      	add	r3, r2
 80137e0:	330c      	adds	r3, #12
 80137e2:	2200      	movs	r2, #0
 80137e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d009      	beq.n	8013800 <inc_lock+0xe0>
 80137ec:	4a12      	ldr	r2, [pc, #72]	; (8013838 <inc_lock+0x118>)
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	011b      	lsls	r3, r3, #4
 80137f2:	4413      	add	r3, r2
 80137f4:	330c      	adds	r3, #12
 80137f6:	881b      	ldrh	r3, [r3, #0]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d001      	beq.n	8013800 <inc_lock+0xe0>
 80137fc:	2300      	movs	r3, #0
 80137fe:	e015      	b.n	801382c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d108      	bne.n	8013818 <inc_lock+0xf8>
 8013806:	4a0c      	ldr	r2, [pc, #48]	; (8013838 <inc_lock+0x118>)
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	011b      	lsls	r3, r3, #4
 801380c:	4413      	add	r3, r2
 801380e:	330c      	adds	r3, #12
 8013810:	881b      	ldrh	r3, [r3, #0]
 8013812:	3301      	adds	r3, #1
 8013814:	b29a      	uxth	r2, r3
 8013816:	e001      	b.n	801381c <inc_lock+0xfc>
 8013818:	f44f 7280 	mov.w	r2, #256	; 0x100
 801381c:	4906      	ldr	r1, [pc, #24]	; (8013838 <inc_lock+0x118>)
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	011b      	lsls	r3, r3, #4
 8013822:	440b      	add	r3, r1
 8013824:	330c      	adds	r3, #12
 8013826:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	3301      	adds	r3, #1
}
 801382c:	4618      	mov	r0, r3
 801382e:	3714      	adds	r7, #20
 8013830:	46bd      	mov	sp, r7
 8013832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013836:	4770      	bx	lr
 8013838:	20001338 	.word	0x20001338

0801383c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801383c:	b480      	push	{r7}
 801383e:	b085      	sub	sp, #20
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	3b01      	subs	r3, #1
 8013848:	607b      	str	r3, [r7, #4]
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	2b01      	cmp	r3, #1
 801384e:	d825      	bhi.n	801389c <dec_lock+0x60>
		n = Files[i].ctr;
 8013850:	4a17      	ldr	r2, [pc, #92]	; (80138b0 <dec_lock+0x74>)
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	011b      	lsls	r3, r3, #4
 8013856:	4413      	add	r3, r2
 8013858:	330c      	adds	r3, #12
 801385a:	881b      	ldrh	r3, [r3, #0]
 801385c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801385e:	89fb      	ldrh	r3, [r7, #14]
 8013860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013864:	d101      	bne.n	801386a <dec_lock+0x2e>
 8013866:	2300      	movs	r3, #0
 8013868:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801386a:	89fb      	ldrh	r3, [r7, #14]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d002      	beq.n	8013876 <dec_lock+0x3a>
 8013870:	89fb      	ldrh	r3, [r7, #14]
 8013872:	3b01      	subs	r3, #1
 8013874:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013876:	4a0e      	ldr	r2, [pc, #56]	; (80138b0 <dec_lock+0x74>)
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	011b      	lsls	r3, r3, #4
 801387c:	4413      	add	r3, r2
 801387e:	330c      	adds	r3, #12
 8013880:	89fa      	ldrh	r2, [r7, #14]
 8013882:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013884:	89fb      	ldrh	r3, [r7, #14]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d105      	bne.n	8013896 <dec_lock+0x5a>
 801388a:	4a09      	ldr	r2, [pc, #36]	; (80138b0 <dec_lock+0x74>)
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	011b      	lsls	r3, r3, #4
 8013890:	4413      	add	r3, r2
 8013892:	2200      	movs	r2, #0
 8013894:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013896:	2300      	movs	r3, #0
 8013898:	737b      	strb	r3, [r7, #13]
 801389a:	e001      	b.n	80138a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801389c:	2302      	movs	r3, #2
 801389e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80138a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3714      	adds	r7, #20
 80138a6:	46bd      	mov	sp, r7
 80138a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ac:	4770      	bx	lr
 80138ae:	bf00      	nop
 80138b0:	20001338 	.word	0x20001338

080138b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80138b4:	b480      	push	{r7}
 80138b6:	b085      	sub	sp, #20
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80138bc:	2300      	movs	r3, #0
 80138be:	60fb      	str	r3, [r7, #12]
 80138c0:	e010      	b.n	80138e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80138c2:	4a0d      	ldr	r2, [pc, #52]	; (80138f8 <clear_lock+0x44>)
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	011b      	lsls	r3, r3, #4
 80138c8:	4413      	add	r3, r2
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	687a      	ldr	r2, [r7, #4]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d105      	bne.n	80138de <clear_lock+0x2a>
 80138d2:	4a09      	ldr	r2, [pc, #36]	; (80138f8 <clear_lock+0x44>)
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	011b      	lsls	r3, r3, #4
 80138d8:	4413      	add	r3, r2
 80138da:	2200      	movs	r2, #0
 80138dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	3301      	adds	r3, #1
 80138e2:	60fb      	str	r3, [r7, #12]
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	2b01      	cmp	r3, #1
 80138e8:	d9eb      	bls.n	80138c2 <clear_lock+0xe>
	}
}
 80138ea:	bf00      	nop
 80138ec:	bf00      	nop
 80138ee:	3714      	adds	r7, #20
 80138f0:	46bd      	mov	sp, r7
 80138f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f6:	4770      	bx	lr
 80138f8:	20001338 	.word	0x20001338

080138fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b086      	sub	sp, #24
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013904:	2300      	movs	r3, #0
 8013906:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	78db      	ldrb	r3, [r3, #3]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d034      	beq.n	801397a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013914:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	7858      	ldrb	r0, [r3, #1]
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013920:	2301      	movs	r3, #1
 8013922:	697a      	ldr	r2, [r7, #20]
 8013924:	f7ff fd40 	bl	80133a8 <disk_write>
 8013928:	4603      	mov	r3, r0
 801392a:	2b00      	cmp	r3, #0
 801392c:	d002      	beq.n	8013934 <sync_window+0x38>
			res = FR_DISK_ERR;
 801392e:	2301      	movs	r3, #1
 8013930:	73fb      	strb	r3, [r7, #15]
 8013932:	e022      	b.n	801397a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2200      	movs	r2, #0
 8013938:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	6a1b      	ldr	r3, [r3, #32]
 801393e:	697a      	ldr	r2, [r7, #20]
 8013940:	1ad2      	subs	r2, r2, r3
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	699b      	ldr	r3, [r3, #24]
 8013946:	429a      	cmp	r2, r3
 8013948:	d217      	bcs.n	801397a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	789b      	ldrb	r3, [r3, #2]
 801394e:	613b      	str	r3, [r7, #16]
 8013950:	e010      	b.n	8013974 <sync_window+0x78>
					wsect += fs->fsize;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	699b      	ldr	r3, [r3, #24]
 8013956:	697a      	ldr	r2, [r7, #20]
 8013958:	4413      	add	r3, r2
 801395a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	7858      	ldrb	r0, [r3, #1]
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013966:	2301      	movs	r3, #1
 8013968:	697a      	ldr	r2, [r7, #20]
 801396a:	f7ff fd1d 	bl	80133a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	3b01      	subs	r3, #1
 8013972:	613b      	str	r3, [r7, #16]
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	2b01      	cmp	r3, #1
 8013978:	d8eb      	bhi.n	8013952 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801397a:	7bfb      	ldrb	r3, [r7, #15]
}
 801397c:	4618      	mov	r0, r3
 801397e:	3718      	adds	r7, #24
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b084      	sub	sp, #16
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801398e:	2300      	movs	r3, #0
 8013990:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013996:	683a      	ldr	r2, [r7, #0]
 8013998:	429a      	cmp	r2, r3
 801399a:	d01b      	beq.n	80139d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f7ff ffad 	bl	80138fc <sync_window>
 80139a2:	4603      	mov	r3, r0
 80139a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80139a6:	7bfb      	ldrb	r3, [r7, #15]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d113      	bne.n	80139d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	7858      	ldrb	r0, [r3, #1]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139b6:	2301      	movs	r3, #1
 80139b8:	683a      	ldr	r2, [r7, #0]
 80139ba:	f7ff fcd5 	bl	8013368 <disk_read>
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d004      	beq.n	80139ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80139c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80139ca:	2301      	movs	r3, #1
 80139cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	683a      	ldr	r2, [r7, #0]
 80139d2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80139d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80139d6:	4618      	mov	r0, r3
 80139d8:	3710      	adds	r7, #16
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
	...

080139e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b084      	sub	sp, #16
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f7ff ff87 	bl	80138fc <sync_window>
 80139ee:	4603      	mov	r3, r0
 80139f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80139f2:	7bfb      	ldrb	r3, [r7, #15]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d158      	bne.n	8013aaa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	2b03      	cmp	r3, #3
 80139fe:	d148      	bne.n	8013a92 <sync_fs+0xb2>
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	791b      	ldrb	r3, [r3, #4]
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d144      	bne.n	8013a92 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	3330      	adds	r3, #48	; 0x30
 8013a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a10:	2100      	movs	r1, #0
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7ff fda9 	bl	801356a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	3330      	adds	r3, #48	; 0x30
 8013a1c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013a20:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7ff fd38 	bl	801349a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	3330      	adds	r3, #48	; 0x30
 8013a2e:	4921      	ldr	r1, [pc, #132]	; (8013ab4 <sync_fs+0xd4>)
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7ff fd4d 	bl	80134d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	3330      	adds	r3, #48	; 0x30
 8013a3a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013a3e:	491e      	ldr	r1, [pc, #120]	; (8013ab8 <sync_fs+0xd8>)
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7ff fd45 	bl	80134d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	3330      	adds	r3, #48	; 0x30
 8013a4a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	691b      	ldr	r3, [r3, #16]
 8013a52:	4619      	mov	r1, r3
 8013a54:	4610      	mov	r0, r2
 8013a56:	f7ff fd3b 	bl	80134d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	3330      	adds	r3, #48	; 0x30
 8013a5e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	68db      	ldr	r3, [r3, #12]
 8013a66:	4619      	mov	r1, r3
 8013a68:	4610      	mov	r0, r2
 8013a6a:	f7ff fd31 	bl	80134d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	69db      	ldr	r3, [r3, #28]
 8013a72:	1c5a      	adds	r2, r3, #1
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	7858      	ldrb	r0, [r3, #1]
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a86:	2301      	movs	r3, #1
 8013a88:	f7ff fc8e 	bl	80133a8 <disk_write>
			fs->fsi_flag = 0;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	785b      	ldrb	r3, [r3, #1]
 8013a96:	2200      	movs	r2, #0
 8013a98:	2100      	movs	r1, #0
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7ff fca4 	bl	80133e8 <disk_ioctl>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d001      	beq.n	8013aaa <sync_fs+0xca>
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	3710      	adds	r7, #16
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}
 8013ab4:	41615252 	.word	0x41615252
 8013ab8:	61417272 	.word	0x61417272

08013abc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013abc:	b480      	push	{r7}
 8013abe:	b083      	sub	sp, #12
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
 8013ac4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	3b02      	subs	r3, #2
 8013aca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	695b      	ldr	r3, [r3, #20]
 8013ad0:	3b02      	subs	r3, #2
 8013ad2:	683a      	ldr	r2, [r7, #0]
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d301      	bcc.n	8013adc <clust2sect+0x20>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	e008      	b.n	8013aee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	895b      	ldrh	r3, [r3, #10]
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	fb03 f202 	mul.w	r2, r3, r2
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013aec:	4413      	add	r3, r2
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	370c      	adds	r7, #12
 8013af2:	46bd      	mov	sp, r7
 8013af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af8:	4770      	bx	lr

08013afa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013afa:	b580      	push	{r7, lr}
 8013afc:	b086      	sub	sp, #24
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	6078      	str	r0, [r7, #4]
 8013b02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	2b01      	cmp	r3, #1
 8013b0e:	d904      	bls.n	8013b1a <get_fat+0x20>
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	695b      	ldr	r3, [r3, #20]
 8013b14:	683a      	ldr	r2, [r7, #0]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d302      	bcc.n	8013b20 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	617b      	str	r3, [r7, #20]
 8013b1e:	e08f      	b.n	8013c40 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	781b      	ldrb	r3, [r3, #0]
 8013b2a:	2b03      	cmp	r3, #3
 8013b2c:	d062      	beq.n	8013bf4 <get_fat+0xfa>
 8013b2e:	2b03      	cmp	r3, #3
 8013b30:	dc7c      	bgt.n	8013c2c <get_fat+0x132>
 8013b32:	2b01      	cmp	r3, #1
 8013b34:	d002      	beq.n	8013b3c <get_fat+0x42>
 8013b36:	2b02      	cmp	r3, #2
 8013b38:	d042      	beq.n	8013bc0 <get_fat+0xc6>
 8013b3a:	e077      	b.n	8013c2c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	60fb      	str	r3, [r7, #12]
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	085b      	lsrs	r3, r3, #1
 8013b44:	68fa      	ldr	r2, [r7, #12]
 8013b46:	4413      	add	r3, r2
 8013b48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	6a1a      	ldr	r2, [r3, #32]
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	0a5b      	lsrs	r3, r3, #9
 8013b52:	4413      	add	r3, r2
 8013b54:	4619      	mov	r1, r3
 8013b56:	6938      	ldr	r0, [r7, #16]
 8013b58:	f7ff ff14 	bl	8013984 <move_window>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d167      	bne.n	8013c32 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	1c5a      	adds	r2, r3, #1
 8013b66:	60fa      	str	r2, [r7, #12]
 8013b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b6c:	693a      	ldr	r2, [r7, #16]
 8013b6e:	4413      	add	r3, r2
 8013b70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	6a1a      	ldr	r2, [r3, #32]
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	0a5b      	lsrs	r3, r3, #9
 8013b7e:	4413      	add	r3, r2
 8013b80:	4619      	mov	r1, r3
 8013b82:	6938      	ldr	r0, [r7, #16]
 8013b84:	f7ff fefe 	bl	8013984 <move_window>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d153      	bne.n	8013c36 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b94:	693a      	ldr	r2, [r7, #16]
 8013b96:	4413      	add	r3, r2
 8013b98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b9c:	021b      	lsls	r3, r3, #8
 8013b9e:	461a      	mov	r2, r3
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	4313      	orrs	r3, r2
 8013ba4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	f003 0301 	and.w	r3, r3, #1
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d002      	beq.n	8013bb6 <get_fat+0xbc>
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	091b      	lsrs	r3, r3, #4
 8013bb4:	e002      	b.n	8013bbc <get_fat+0xc2>
 8013bb6:	68bb      	ldr	r3, [r7, #8]
 8013bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013bbc:	617b      	str	r3, [r7, #20]
			break;
 8013bbe:	e03f      	b.n	8013c40 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013bc0:	693b      	ldr	r3, [r7, #16]
 8013bc2:	6a1a      	ldr	r2, [r3, #32]
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	0a1b      	lsrs	r3, r3, #8
 8013bc8:	4413      	add	r3, r2
 8013bca:	4619      	mov	r1, r3
 8013bcc:	6938      	ldr	r0, [r7, #16]
 8013bce:	f7ff fed9 	bl	8013984 <move_window>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d130      	bne.n	8013c3a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	005b      	lsls	r3, r3, #1
 8013be2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013be6:	4413      	add	r3, r2
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7ff fc1b 	bl	8013424 <ld_word>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	617b      	str	r3, [r7, #20]
			break;
 8013bf2:	e025      	b.n	8013c40 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	6a1a      	ldr	r2, [r3, #32]
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	09db      	lsrs	r3, r3, #7
 8013bfc:	4413      	add	r3, r2
 8013bfe:	4619      	mov	r1, r3
 8013c00:	6938      	ldr	r0, [r7, #16]
 8013c02:	f7ff febf 	bl	8013984 <move_window>
 8013c06:	4603      	mov	r3, r0
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d118      	bne.n	8013c3e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013c12:	683b      	ldr	r3, [r7, #0]
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013c1a:	4413      	add	r3, r2
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7ff fc19 	bl	8013454 <ld_dword>
 8013c22:	4603      	mov	r3, r0
 8013c24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013c28:	617b      	str	r3, [r7, #20]
			break;
 8013c2a:	e009      	b.n	8013c40 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	617b      	str	r3, [r7, #20]
 8013c30:	e006      	b.n	8013c40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013c32:	bf00      	nop
 8013c34:	e004      	b.n	8013c40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013c36:	bf00      	nop
 8013c38:	e002      	b.n	8013c40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013c3a:	bf00      	nop
 8013c3c:	e000      	b.n	8013c40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013c3e:	bf00      	nop
		}
	}

	return val;
 8013c40:	697b      	ldr	r3, [r7, #20]
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3718      	adds	r7, #24
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}

08013c4a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013c4a:	b590      	push	{r4, r7, lr}
 8013c4c:	b089      	sub	sp, #36	; 0x24
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	60f8      	str	r0, [r7, #12]
 8013c52:	60b9      	str	r1, [r7, #8]
 8013c54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013c56:	2302      	movs	r3, #2
 8013c58:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	2b01      	cmp	r3, #1
 8013c5e:	f240 80d2 	bls.w	8013e06 <put_fat+0x1bc>
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	695b      	ldr	r3, [r3, #20]
 8013c66:	68ba      	ldr	r2, [r7, #8]
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	f080 80cc 	bcs.w	8013e06 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	2b03      	cmp	r3, #3
 8013c74:	f000 8096 	beq.w	8013da4 <put_fat+0x15a>
 8013c78:	2b03      	cmp	r3, #3
 8013c7a:	f300 80cd 	bgt.w	8013e18 <put_fat+0x1ce>
 8013c7e:	2b01      	cmp	r3, #1
 8013c80:	d002      	beq.n	8013c88 <put_fat+0x3e>
 8013c82:	2b02      	cmp	r3, #2
 8013c84:	d06e      	beq.n	8013d64 <put_fat+0x11a>
 8013c86:	e0c7      	b.n	8013e18 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	61bb      	str	r3, [r7, #24]
 8013c8c:	69bb      	ldr	r3, [r7, #24]
 8013c8e:	085b      	lsrs	r3, r3, #1
 8013c90:	69ba      	ldr	r2, [r7, #24]
 8013c92:	4413      	add	r3, r2
 8013c94:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	6a1a      	ldr	r2, [r3, #32]
 8013c9a:	69bb      	ldr	r3, [r7, #24]
 8013c9c:	0a5b      	lsrs	r3, r3, #9
 8013c9e:	4413      	add	r3, r2
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	68f8      	ldr	r0, [r7, #12]
 8013ca4:	f7ff fe6e 	bl	8013984 <move_window>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013cac:	7ffb      	ldrb	r3, [r7, #31]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	f040 80ab 	bne.w	8013e0a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013cba:	69bb      	ldr	r3, [r7, #24]
 8013cbc:	1c59      	adds	r1, r3, #1
 8013cbe:	61b9      	str	r1, [r7, #24]
 8013cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cc4:	4413      	add	r3, r2
 8013cc6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013cc8:	68bb      	ldr	r3, [r7, #8]
 8013cca:	f003 0301 	and.w	r3, r3, #1
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d00d      	beq.n	8013cee <put_fat+0xa4>
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	b25b      	sxtb	r3, r3
 8013cd8:	f003 030f 	and.w	r3, r3, #15
 8013cdc:	b25a      	sxtb	r2, r3
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	b2db      	uxtb	r3, r3
 8013ce2:	011b      	lsls	r3, r3, #4
 8013ce4:	b25b      	sxtb	r3, r3
 8013ce6:	4313      	orrs	r3, r2
 8013ce8:	b25b      	sxtb	r3, r3
 8013cea:	b2db      	uxtb	r3, r3
 8013cec:	e001      	b.n	8013cf2 <put_fat+0xa8>
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	697a      	ldr	r2, [r7, #20]
 8013cf4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	2201      	movs	r2, #1
 8013cfa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	6a1a      	ldr	r2, [r3, #32]
 8013d00:	69bb      	ldr	r3, [r7, #24]
 8013d02:	0a5b      	lsrs	r3, r3, #9
 8013d04:	4413      	add	r3, r2
 8013d06:	4619      	mov	r1, r3
 8013d08:	68f8      	ldr	r0, [r7, #12]
 8013d0a:	f7ff fe3b 	bl	8013984 <move_window>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013d12:	7ffb      	ldrb	r3, [r7, #31]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d17a      	bne.n	8013e0e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013d1e:	69bb      	ldr	r3, [r7, #24]
 8013d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d24:	4413      	add	r3, r2
 8013d26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	f003 0301 	and.w	r3, r3, #1
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d003      	beq.n	8013d3a <put_fat+0xf0>
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	091b      	lsrs	r3, r3, #4
 8013d36:	b2db      	uxtb	r3, r3
 8013d38:	e00e      	b.n	8013d58 <put_fat+0x10e>
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	b25b      	sxtb	r3, r3
 8013d40:	f023 030f 	bic.w	r3, r3, #15
 8013d44:	b25a      	sxtb	r2, r3
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	0a1b      	lsrs	r3, r3, #8
 8013d4a:	b25b      	sxtb	r3, r3
 8013d4c:	f003 030f 	and.w	r3, r3, #15
 8013d50:	b25b      	sxtb	r3, r3
 8013d52:	4313      	orrs	r3, r2
 8013d54:	b25b      	sxtb	r3, r3
 8013d56:	b2db      	uxtb	r3, r3
 8013d58:	697a      	ldr	r2, [r7, #20]
 8013d5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	2201      	movs	r2, #1
 8013d60:	70da      	strb	r2, [r3, #3]
			break;
 8013d62:	e059      	b.n	8013e18 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	6a1a      	ldr	r2, [r3, #32]
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	0a1b      	lsrs	r3, r3, #8
 8013d6c:	4413      	add	r3, r2
 8013d6e:	4619      	mov	r1, r3
 8013d70:	68f8      	ldr	r0, [r7, #12]
 8013d72:	f7ff fe07 	bl	8013984 <move_window>
 8013d76:	4603      	mov	r3, r0
 8013d78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013d7a:	7ffb      	ldrb	r3, [r7, #31]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d148      	bne.n	8013e12 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	005b      	lsls	r3, r3, #1
 8013d8a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013d8e:	4413      	add	r3, r2
 8013d90:	687a      	ldr	r2, [r7, #4]
 8013d92:	b292      	uxth	r2, r2
 8013d94:	4611      	mov	r1, r2
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7ff fb7f 	bl	801349a <st_word>
			fs->wflag = 1;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	2201      	movs	r2, #1
 8013da0:	70da      	strb	r2, [r3, #3]
			break;
 8013da2:	e039      	b.n	8013e18 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	6a1a      	ldr	r2, [r3, #32]
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	09db      	lsrs	r3, r3, #7
 8013dac:	4413      	add	r3, r2
 8013dae:	4619      	mov	r1, r3
 8013db0:	68f8      	ldr	r0, [r7, #12]
 8013db2:	f7ff fde7 	bl	8013984 <move_window>
 8013db6:	4603      	mov	r3, r0
 8013db8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013dba:	7ffb      	ldrb	r3, [r7, #31]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d12a      	bne.n	8013e16 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	009b      	lsls	r3, r3, #2
 8013dd0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013dd4:	4413      	add	r3, r2
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7ff fb3c 	bl	8013454 <ld_dword>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013de2:	4323      	orrs	r3, r4
 8013de4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	009b      	lsls	r3, r3, #2
 8013df0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013df4:	4413      	add	r3, r2
 8013df6:	6879      	ldr	r1, [r7, #4]
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7ff fb69 	bl	80134d0 <st_dword>
			fs->wflag = 1;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2201      	movs	r2, #1
 8013e02:	70da      	strb	r2, [r3, #3]
			break;
 8013e04:	e008      	b.n	8013e18 <put_fat+0x1ce>
		}
	}
 8013e06:	bf00      	nop
 8013e08:	e006      	b.n	8013e18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013e0a:	bf00      	nop
 8013e0c:	e004      	b.n	8013e18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013e0e:	bf00      	nop
 8013e10:	e002      	b.n	8013e18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013e12:	bf00      	nop
 8013e14:	e000      	b.n	8013e18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013e16:	bf00      	nop
	return res;
 8013e18:	7ffb      	ldrb	r3, [r7, #31]
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	3724      	adds	r7, #36	; 0x24
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd90      	pop	{r4, r7, pc}

08013e22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013e22:	b580      	push	{r7, lr}
 8013e24:	b088      	sub	sp, #32
 8013e26:	af00      	add	r7, sp, #0
 8013e28:	60f8      	str	r0, [r7, #12]
 8013e2a:	60b9      	str	r1, [r7, #8]
 8013e2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	2b01      	cmp	r3, #1
 8013e3c:	d904      	bls.n	8013e48 <remove_chain+0x26>
 8013e3e:	69bb      	ldr	r3, [r7, #24]
 8013e40:	695b      	ldr	r3, [r3, #20]
 8013e42:	68ba      	ldr	r2, [r7, #8]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d301      	bcc.n	8013e4c <remove_chain+0x2a>
 8013e48:	2302      	movs	r3, #2
 8013e4a:	e04b      	b.n	8013ee4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d00c      	beq.n	8013e6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e56:	6879      	ldr	r1, [r7, #4]
 8013e58:	69b8      	ldr	r0, [r7, #24]
 8013e5a:	f7ff fef6 	bl	8013c4a <put_fat>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013e62:	7ffb      	ldrb	r3, [r7, #31]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d001      	beq.n	8013e6c <remove_chain+0x4a>
 8013e68:	7ffb      	ldrb	r3, [r7, #31]
 8013e6a:	e03b      	b.n	8013ee4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013e6c:	68b9      	ldr	r1, [r7, #8]
 8013e6e:	68f8      	ldr	r0, [r7, #12]
 8013e70:	f7ff fe43 	bl	8013afa <get_fat>
 8013e74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013e76:	697b      	ldr	r3, [r7, #20]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d031      	beq.n	8013ee0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	2b01      	cmp	r3, #1
 8013e80:	d101      	bne.n	8013e86 <remove_chain+0x64>
 8013e82:	2302      	movs	r3, #2
 8013e84:	e02e      	b.n	8013ee4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013e86:	697b      	ldr	r3, [r7, #20]
 8013e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e8c:	d101      	bne.n	8013e92 <remove_chain+0x70>
 8013e8e:	2301      	movs	r3, #1
 8013e90:	e028      	b.n	8013ee4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013e92:	2200      	movs	r2, #0
 8013e94:	68b9      	ldr	r1, [r7, #8]
 8013e96:	69b8      	ldr	r0, [r7, #24]
 8013e98:	f7ff fed7 	bl	8013c4a <put_fat>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013ea0:	7ffb      	ldrb	r3, [r7, #31]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d001      	beq.n	8013eaa <remove_chain+0x88>
 8013ea6:	7ffb      	ldrb	r3, [r7, #31]
 8013ea8:	e01c      	b.n	8013ee4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013eaa:	69bb      	ldr	r3, [r7, #24]
 8013eac:	691a      	ldr	r2, [r3, #16]
 8013eae:	69bb      	ldr	r3, [r7, #24]
 8013eb0:	695b      	ldr	r3, [r3, #20]
 8013eb2:	3b02      	subs	r3, #2
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d20b      	bcs.n	8013ed0 <remove_chain+0xae>
			fs->free_clst++;
 8013eb8:	69bb      	ldr	r3, [r7, #24]
 8013eba:	691b      	ldr	r3, [r3, #16]
 8013ebc:	1c5a      	adds	r2, r3, #1
 8013ebe:	69bb      	ldr	r3, [r7, #24]
 8013ec0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8013ec2:	69bb      	ldr	r3, [r7, #24]
 8013ec4:	791b      	ldrb	r3, [r3, #4]
 8013ec6:	f043 0301 	orr.w	r3, r3, #1
 8013eca:	b2da      	uxtb	r2, r3
 8013ecc:	69bb      	ldr	r3, [r7, #24]
 8013ece:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013ed0:	697b      	ldr	r3, [r7, #20]
 8013ed2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013ed4:	69bb      	ldr	r3, [r7, #24]
 8013ed6:	695b      	ldr	r3, [r3, #20]
 8013ed8:	68ba      	ldr	r2, [r7, #8]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d3c6      	bcc.n	8013e6c <remove_chain+0x4a>
 8013ede:	e000      	b.n	8013ee2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013ee0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013ee2:	2300      	movs	r3, #0
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3720      	adds	r7, #32
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}

08013eec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b088      	sub	sp, #32
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d10d      	bne.n	8013f1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013f02:	693b      	ldr	r3, [r7, #16]
 8013f04:	68db      	ldr	r3, [r3, #12]
 8013f06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013f08:	69bb      	ldr	r3, [r7, #24]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d004      	beq.n	8013f18 <create_chain+0x2c>
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	695b      	ldr	r3, [r3, #20]
 8013f12:	69ba      	ldr	r2, [r7, #24]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d31b      	bcc.n	8013f50 <create_chain+0x64>
 8013f18:	2301      	movs	r3, #1
 8013f1a:	61bb      	str	r3, [r7, #24]
 8013f1c:	e018      	b.n	8013f50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013f1e:	6839      	ldr	r1, [r7, #0]
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	f7ff fdea 	bl	8013afa <get_fat>
 8013f26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d801      	bhi.n	8013f32 <create_chain+0x46>
 8013f2e:	2301      	movs	r3, #1
 8013f30:	e070      	b.n	8014014 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f38:	d101      	bne.n	8013f3e <create_chain+0x52>
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	e06a      	b.n	8014014 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	695b      	ldr	r3, [r3, #20]
 8013f42:	68fa      	ldr	r2, [r7, #12]
 8013f44:	429a      	cmp	r2, r3
 8013f46:	d201      	bcs.n	8013f4c <create_chain+0x60>
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	e063      	b.n	8014014 <create_chain+0x128>
		scl = clst;
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013f50:	69bb      	ldr	r3, [r7, #24]
 8013f52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013f54:	69fb      	ldr	r3, [r7, #28]
 8013f56:	3301      	adds	r3, #1
 8013f58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	695b      	ldr	r3, [r3, #20]
 8013f5e:	69fa      	ldr	r2, [r7, #28]
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d307      	bcc.n	8013f74 <create_chain+0x88>
				ncl = 2;
 8013f64:	2302      	movs	r3, #2
 8013f66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013f68:	69fa      	ldr	r2, [r7, #28]
 8013f6a:	69bb      	ldr	r3, [r7, #24]
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d901      	bls.n	8013f74 <create_chain+0x88>
 8013f70:	2300      	movs	r3, #0
 8013f72:	e04f      	b.n	8014014 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013f74:	69f9      	ldr	r1, [r7, #28]
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f7ff fdbf 	bl	8013afa <get_fat>
 8013f7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d00e      	beq.n	8013fa2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	2b01      	cmp	r3, #1
 8013f88:	d003      	beq.n	8013f92 <create_chain+0xa6>
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f90:	d101      	bne.n	8013f96 <create_chain+0xaa>
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	e03e      	b.n	8014014 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013f96:	69fa      	ldr	r2, [r7, #28]
 8013f98:	69bb      	ldr	r3, [r7, #24]
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d1da      	bne.n	8013f54 <create_chain+0x68>
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	e038      	b.n	8014014 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013fa2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013fa8:	69f9      	ldr	r1, [r7, #28]
 8013faa:	6938      	ldr	r0, [r7, #16]
 8013fac:	f7ff fe4d 	bl	8013c4a <put_fat>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013fb4:	7dfb      	ldrb	r3, [r7, #23]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d109      	bne.n	8013fce <create_chain+0xe2>
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d006      	beq.n	8013fce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013fc0:	69fa      	ldr	r2, [r7, #28]
 8013fc2:	6839      	ldr	r1, [r7, #0]
 8013fc4:	6938      	ldr	r0, [r7, #16]
 8013fc6:	f7ff fe40 	bl	8013c4a <put_fat>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013fce:	7dfb      	ldrb	r3, [r7, #23]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d116      	bne.n	8014002 <create_chain+0x116>
		fs->last_clst = ncl;
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	69fa      	ldr	r2, [r7, #28]
 8013fd8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013fda:	693b      	ldr	r3, [r7, #16]
 8013fdc:	691a      	ldr	r2, [r3, #16]
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	695b      	ldr	r3, [r3, #20]
 8013fe2:	3b02      	subs	r3, #2
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	d804      	bhi.n	8013ff2 <create_chain+0x106>
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	691b      	ldr	r3, [r3, #16]
 8013fec:	1e5a      	subs	r2, r3, #1
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	791b      	ldrb	r3, [r3, #4]
 8013ff6:	f043 0301 	orr.w	r3, r3, #1
 8013ffa:	b2da      	uxtb	r2, r3
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	711a      	strb	r2, [r3, #4]
 8014000:	e007      	b.n	8014012 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014002:	7dfb      	ldrb	r3, [r7, #23]
 8014004:	2b01      	cmp	r3, #1
 8014006:	d102      	bne.n	801400e <create_chain+0x122>
 8014008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801400c:	e000      	b.n	8014010 <create_chain+0x124>
 801400e:	2301      	movs	r3, #1
 8014010:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8014012:	69fb      	ldr	r3, [r7, #28]
}
 8014014:	4618      	mov	r0, r3
 8014016:	3720      	adds	r7, #32
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}

0801401c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801401c:	b480      	push	{r7}
 801401e:	b087      	sub	sp, #28
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014030:	3304      	adds	r3, #4
 8014032:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	0a5b      	lsrs	r3, r3, #9
 8014038:	68fa      	ldr	r2, [r7, #12]
 801403a:	8952      	ldrh	r2, [r2, #10]
 801403c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014040:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	1d1a      	adds	r2, r3, #4
 8014046:	613a      	str	r2, [r7, #16]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d101      	bne.n	8014056 <clmt_clust+0x3a>
 8014052:	2300      	movs	r3, #0
 8014054:	e010      	b.n	8014078 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8014056:	697a      	ldr	r2, [r7, #20]
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	429a      	cmp	r2, r3
 801405c:	d307      	bcc.n	801406e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801405e:	697a      	ldr	r2, [r7, #20]
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	1ad3      	subs	r3, r2, r3
 8014064:	617b      	str	r3, [r7, #20]
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	3304      	adds	r3, #4
 801406a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801406c:	e7e9      	b.n	8014042 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801406e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	681a      	ldr	r2, [r3, #0]
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	4413      	add	r3, r2
}
 8014078:	4618      	mov	r0, r3
 801407a:	371c      	adds	r7, #28
 801407c:	46bd      	mov	sp, r7
 801407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014082:	4770      	bx	lr

08014084 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b086      	sub	sp, #24
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
 801408c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801409a:	d204      	bcs.n	80140a6 <dir_sdi+0x22>
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	f003 031f 	and.w	r3, r3, #31
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d001      	beq.n	80140aa <dir_sdi+0x26>
		return FR_INT_ERR;
 80140a6:	2302      	movs	r3, #2
 80140a8:	e063      	b.n	8014172 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	683a      	ldr	r2, [r7, #0]
 80140ae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	689b      	ldr	r3, [r3, #8]
 80140b4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d106      	bne.n	80140ca <dir_sdi+0x46>
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	781b      	ldrb	r3, [r3, #0]
 80140c0:	2b02      	cmp	r3, #2
 80140c2:	d902      	bls.n	80140ca <dir_sdi+0x46>
		clst = fs->dirbase;
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140c8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d10c      	bne.n	80140ea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	095b      	lsrs	r3, r3, #5
 80140d4:	693a      	ldr	r2, [r7, #16]
 80140d6:	8912      	ldrh	r2, [r2, #8]
 80140d8:	4293      	cmp	r3, r2
 80140da:	d301      	bcc.n	80140e0 <dir_sdi+0x5c>
 80140dc:	2302      	movs	r3, #2
 80140de:	e048      	b.n	8014172 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	61da      	str	r2, [r3, #28]
 80140e8:	e029      	b.n	801413e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	895b      	ldrh	r3, [r3, #10]
 80140ee:	025b      	lsls	r3, r3, #9
 80140f0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80140f2:	e019      	b.n	8014128 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6979      	ldr	r1, [r7, #20]
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7ff fcfe 	bl	8013afa <get_fat>
 80140fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014106:	d101      	bne.n	801410c <dir_sdi+0x88>
 8014108:	2301      	movs	r3, #1
 801410a:	e032      	b.n	8014172 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	2b01      	cmp	r3, #1
 8014110:	d904      	bls.n	801411c <dir_sdi+0x98>
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	695b      	ldr	r3, [r3, #20]
 8014116:	697a      	ldr	r2, [r7, #20]
 8014118:	429a      	cmp	r2, r3
 801411a:	d301      	bcc.n	8014120 <dir_sdi+0x9c>
 801411c:	2302      	movs	r3, #2
 801411e:	e028      	b.n	8014172 <dir_sdi+0xee>
			ofs -= csz;
 8014120:	683a      	ldr	r2, [r7, #0]
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	1ad3      	subs	r3, r2, r3
 8014126:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014128:	683a      	ldr	r2, [r7, #0]
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	429a      	cmp	r2, r3
 801412e:	d2e1      	bcs.n	80140f4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8014130:	6979      	ldr	r1, [r7, #20]
 8014132:	6938      	ldr	r0, [r7, #16]
 8014134:	f7ff fcc2 	bl	8013abc <clust2sect>
 8014138:	4602      	mov	r2, r0
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	697a      	ldr	r2, [r7, #20]
 8014142:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	69db      	ldr	r3, [r3, #28]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d101      	bne.n	8014150 <dir_sdi+0xcc>
 801414c:	2302      	movs	r3, #2
 801414e:	e010      	b.n	8014172 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	69da      	ldr	r2, [r3, #28]
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	0a5b      	lsrs	r3, r3, #9
 8014158:	441a      	add	r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801415e:	693b      	ldr	r3, [r7, #16]
 8014160:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801416a:	441a      	add	r2, r3
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014170:	2300      	movs	r3, #0
}
 8014172:	4618      	mov	r0, r3
 8014174:	3718      	adds	r7, #24
 8014176:	46bd      	mov	sp, r7
 8014178:	bd80      	pop	{r7, pc}

0801417a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801417a:	b580      	push	{r7, lr}
 801417c:	b086      	sub	sp, #24
 801417e:	af00      	add	r7, sp, #0
 8014180:	6078      	str	r0, [r7, #4]
 8014182:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	695b      	ldr	r3, [r3, #20]
 801418e:	3320      	adds	r3, #32
 8014190:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	69db      	ldr	r3, [r3, #28]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d003      	beq.n	80141a2 <dir_next+0x28>
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80141a0:	d301      	bcc.n	80141a6 <dir_next+0x2c>
 80141a2:	2304      	movs	r3, #4
 80141a4:	e0aa      	b.n	80142fc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	f040 8098 	bne.w	80142e2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	69db      	ldr	r3, [r3, #28]
 80141b6:	1c5a      	adds	r2, r3, #1
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	699b      	ldr	r3, [r3, #24]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d10b      	bne.n	80141dc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	095b      	lsrs	r3, r3, #5
 80141c8:	68fa      	ldr	r2, [r7, #12]
 80141ca:	8912      	ldrh	r2, [r2, #8]
 80141cc:	4293      	cmp	r3, r2
 80141ce:	f0c0 8088 	bcc.w	80142e2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2200      	movs	r2, #0
 80141d6:	61da      	str	r2, [r3, #28]
 80141d8:	2304      	movs	r3, #4
 80141da:	e08f      	b.n	80142fc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	0a5b      	lsrs	r3, r3, #9
 80141e0:	68fa      	ldr	r2, [r7, #12]
 80141e2:	8952      	ldrh	r2, [r2, #10]
 80141e4:	3a01      	subs	r2, #1
 80141e6:	4013      	ands	r3, r2
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d17a      	bne.n	80142e2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80141ec:	687a      	ldr	r2, [r7, #4]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	699b      	ldr	r3, [r3, #24]
 80141f2:	4619      	mov	r1, r3
 80141f4:	4610      	mov	r0, r2
 80141f6:	f7ff fc80 	bl	8013afa <get_fat>
 80141fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	2b01      	cmp	r3, #1
 8014200:	d801      	bhi.n	8014206 <dir_next+0x8c>
 8014202:	2302      	movs	r3, #2
 8014204:	e07a      	b.n	80142fc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801420c:	d101      	bne.n	8014212 <dir_next+0x98>
 801420e:	2301      	movs	r3, #1
 8014210:	e074      	b.n	80142fc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	695b      	ldr	r3, [r3, #20]
 8014216:	697a      	ldr	r2, [r7, #20]
 8014218:	429a      	cmp	r2, r3
 801421a:	d358      	bcc.n	80142ce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d104      	bne.n	801422c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2200      	movs	r2, #0
 8014226:	61da      	str	r2, [r3, #28]
 8014228:	2304      	movs	r3, #4
 801422a:	e067      	b.n	80142fc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801422c:	687a      	ldr	r2, [r7, #4]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	699b      	ldr	r3, [r3, #24]
 8014232:	4619      	mov	r1, r3
 8014234:	4610      	mov	r0, r2
 8014236:	f7ff fe59 	bl	8013eec <create_chain>
 801423a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d101      	bne.n	8014246 <dir_next+0xcc>
 8014242:	2307      	movs	r3, #7
 8014244:	e05a      	b.n	80142fc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	2b01      	cmp	r3, #1
 801424a:	d101      	bne.n	8014250 <dir_next+0xd6>
 801424c:	2302      	movs	r3, #2
 801424e:	e055      	b.n	80142fc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014250:	697b      	ldr	r3, [r7, #20]
 8014252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014256:	d101      	bne.n	801425c <dir_next+0xe2>
 8014258:	2301      	movs	r3, #1
 801425a:	e04f      	b.n	80142fc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801425c:	68f8      	ldr	r0, [r7, #12]
 801425e:	f7ff fb4d 	bl	80138fc <sync_window>
 8014262:	4603      	mov	r3, r0
 8014264:	2b00      	cmp	r3, #0
 8014266:	d001      	beq.n	801426c <dir_next+0xf2>
 8014268:	2301      	movs	r3, #1
 801426a:	e047      	b.n	80142fc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	3330      	adds	r3, #48	; 0x30
 8014270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014274:	2100      	movs	r1, #0
 8014276:	4618      	mov	r0, r3
 8014278:	f7ff f977 	bl	801356a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801427c:	2300      	movs	r3, #0
 801427e:	613b      	str	r3, [r7, #16]
 8014280:	6979      	ldr	r1, [r7, #20]
 8014282:	68f8      	ldr	r0, [r7, #12]
 8014284:	f7ff fc1a 	bl	8013abc <clust2sect>
 8014288:	4602      	mov	r2, r0
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	62da      	str	r2, [r3, #44]	; 0x2c
 801428e:	e012      	b.n	80142b6 <dir_next+0x13c>
						fs->wflag = 1;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	2201      	movs	r2, #1
 8014294:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014296:	68f8      	ldr	r0, [r7, #12]
 8014298:	f7ff fb30 	bl	80138fc <sync_window>
 801429c:	4603      	mov	r3, r0
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d001      	beq.n	80142a6 <dir_next+0x12c>
 80142a2:	2301      	movs	r3, #1
 80142a4:	e02a      	b.n	80142fc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80142a6:	693b      	ldr	r3, [r7, #16]
 80142a8:	3301      	adds	r3, #1
 80142aa:	613b      	str	r3, [r7, #16]
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142b0:	1c5a      	adds	r2, r3, #1
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	895b      	ldrh	r3, [r3, #10]
 80142ba:	461a      	mov	r2, r3
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	4293      	cmp	r3, r2
 80142c0:	d3e6      	bcc.n	8014290 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142c6:	693b      	ldr	r3, [r7, #16]
 80142c8:	1ad2      	subs	r2, r2, r3
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	697a      	ldr	r2, [r7, #20]
 80142d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80142d4:	6979      	ldr	r1, [r7, #20]
 80142d6:	68f8      	ldr	r0, [r7, #12]
 80142d8:	f7ff fbf0 	bl	8013abc <clust2sect>
 80142dc:	4602      	mov	r2, r0
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	68ba      	ldr	r2, [r7, #8]
 80142e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80142ee:	68bb      	ldr	r3, [r7, #8]
 80142f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142f4:	441a      	add	r2, r3
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80142fa:	2300      	movs	r3, #0
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	3718      	adds	r7, #24
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b086      	sub	sp, #24
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8014314:	2100      	movs	r1, #0
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f7ff feb4 	bl	8014084 <dir_sdi>
 801431c:	4603      	mov	r3, r0
 801431e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014320:	7dfb      	ldrb	r3, [r7, #23]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d12b      	bne.n	801437e <dir_alloc+0x7a>
		n = 0;
 8014326:	2300      	movs	r3, #0
 8014328:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	69db      	ldr	r3, [r3, #28]
 801432e:	4619      	mov	r1, r3
 8014330:	68f8      	ldr	r0, [r7, #12]
 8014332:	f7ff fb27 	bl	8013984 <move_window>
 8014336:	4603      	mov	r3, r0
 8014338:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801433a:	7dfb      	ldrb	r3, [r7, #23]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d11d      	bne.n	801437c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	6a1b      	ldr	r3, [r3, #32]
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	2be5      	cmp	r3, #229	; 0xe5
 8014348:	d004      	beq.n	8014354 <dir_alloc+0x50>
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	6a1b      	ldr	r3, [r3, #32]
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d107      	bne.n	8014364 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	3301      	adds	r3, #1
 8014358:	613b      	str	r3, [r7, #16]
 801435a:	693a      	ldr	r2, [r7, #16]
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	429a      	cmp	r2, r3
 8014360:	d102      	bne.n	8014368 <dir_alloc+0x64>
 8014362:	e00c      	b.n	801437e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014364:	2300      	movs	r3, #0
 8014366:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014368:	2101      	movs	r1, #1
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f7ff ff05 	bl	801417a <dir_next>
 8014370:	4603      	mov	r3, r0
 8014372:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014374:	7dfb      	ldrb	r3, [r7, #23]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d0d7      	beq.n	801432a <dir_alloc+0x26>
 801437a:	e000      	b.n	801437e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801437c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801437e:	7dfb      	ldrb	r3, [r7, #23]
 8014380:	2b04      	cmp	r3, #4
 8014382:	d101      	bne.n	8014388 <dir_alloc+0x84>
 8014384:	2307      	movs	r3, #7
 8014386:	75fb      	strb	r3, [r7, #23]
	return res;
 8014388:	7dfb      	ldrb	r3, [r7, #23]
}
 801438a:	4618      	mov	r0, r3
 801438c:	3718      	adds	r7, #24
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}

08014392 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014392:	b580      	push	{r7, lr}
 8014394:	b084      	sub	sp, #16
 8014396:	af00      	add	r7, sp, #0
 8014398:	6078      	str	r0, [r7, #4]
 801439a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	331a      	adds	r3, #26
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7ff f83f 	bl	8013424 <ld_word>
 80143a6:	4603      	mov	r3, r0
 80143a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	2b03      	cmp	r3, #3
 80143b0:	d109      	bne.n	80143c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	3314      	adds	r3, #20
 80143b6:	4618      	mov	r0, r3
 80143b8:	f7ff f834 	bl	8013424 <ld_word>
 80143bc:	4603      	mov	r3, r0
 80143be:	041b      	lsls	r3, r3, #16
 80143c0:	68fa      	ldr	r2, [r7, #12]
 80143c2:	4313      	orrs	r3, r2
 80143c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80143c6:	68fb      	ldr	r3, [r7, #12]
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3710      	adds	r7, #16
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd80      	pop	{r7, pc}

080143d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b084      	sub	sp, #16
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	60f8      	str	r0, [r7, #12]
 80143d8:	60b9      	str	r1, [r7, #8]
 80143da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80143dc:	68bb      	ldr	r3, [r7, #8]
 80143de:	331a      	adds	r3, #26
 80143e0:	687a      	ldr	r2, [r7, #4]
 80143e2:	b292      	uxth	r2, r2
 80143e4:	4611      	mov	r1, r2
 80143e6:	4618      	mov	r0, r3
 80143e8:	f7ff f857 	bl	801349a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	781b      	ldrb	r3, [r3, #0]
 80143f0:	2b03      	cmp	r3, #3
 80143f2:	d109      	bne.n	8014408 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	f103 0214 	add.w	r2, r3, #20
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	0c1b      	lsrs	r3, r3, #16
 80143fe:	b29b      	uxth	r3, r3
 8014400:	4619      	mov	r1, r3
 8014402:	4610      	mov	r0, r2
 8014404:	f7ff f849 	bl	801349a <st_word>
	}
}
 8014408:	bf00      	nop
 801440a:	3710      	adds	r7, #16
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}

08014410 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b086      	sub	sp, #24
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801441e:	2100      	movs	r1, #0
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f7ff fe2f 	bl	8014084 <dir_sdi>
 8014426:	4603      	mov	r3, r0
 8014428:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801442a:	7dfb      	ldrb	r3, [r7, #23]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d001      	beq.n	8014434 <dir_find+0x24>
 8014430:	7dfb      	ldrb	r3, [r7, #23]
 8014432:	e03e      	b.n	80144b2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	69db      	ldr	r3, [r3, #28]
 8014438:	4619      	mov	r1, r3
 801443a:	6938      	ldr	r0, [r7, #16]
 801443c:	f7ff faa2 	bl	8013984 <move_window>
 8014440:	4603      	mov	r3, r0
 8014442:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014444:	7dfb      	ldrb	r3, [r7, #23]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d12f      	bne.n	80144aa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	6a1b      	ldr	r3, [r3, #32]
 801444e:	781b      	ldrb	r3, [r3, #0]
 8014450:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014452:	7bfb      	ldrb	r3, [r7, #15]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d102      	bne.n	801445e <dir_find+0x4e>
 8014458:	2304      	movs	r3, #4
 801445a:	75fb      	strb	r3, [r7, #23]
 801445c:	e028      	b.n	80144b0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6a1b      	ldr	r3, [r3, #32]
 8014462:	330b      	adds	r3, #11
 8014464:	781b      	ldrb	r3, [r3, #0]
 8014466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801446a:	b2da      	uxtb	r2, r3
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	6a1b      	ldr	r3, [r3, #32]
 8014474:	330b      	adds	r3, #11
 8014476:	781b      	ldrb	r3, [r3, #0]
 8014478:	f003 0308 	and.w	r3, r3, #8
 801447c:	2b00      	cmp	r3, #0
 801447e:	d10a      	bne.n	8014496 <dir_find+0x86>
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	6a18      	ldr	r0, [r3, #32]
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	3324      	adds	r3, #36	; 0x24
 8014488:	220b      	movs	r2, #11
 801448a:	4619      	mov	r1, r3
 801448c:	f7ff f888 	bl	80135a0 <mem_cmp>
 8014490:	4603      	mov	r3, r0
 8014492:	2b00      	cmp	r3, #0
 8014494:	d00b      	beq.n	80144ae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014496:	2100      	movs	r1, #0
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f7ff fe6e 	bl	801417a <dir_next>
 801449e:	4603      	mov	r3, r0
 80144a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80144a2:	7dfb      	ldrb	r3, [r7, #23]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d0c5      	beq.n	8014434 <dir_find+0x24>
 80144a8:	e002      	b.n	80144b0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80144aa:	bf00      	nop
 80144ac:	e000      	b.n	80144b0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80144ae:	bf00      	nop

	return res;
 80144b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3718      	adds	r7, #24
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}

080144ba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80144ba:	b580      	push	{r7, lr}
 80144bc:	b084      	sub	sp, #16
 80144be:	af00      	add	r7, sp, #0
 80144c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80144c8:	2101      	movs	r1, #1
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f7ff ff1a 	bl	8014304 <dir_alloc>
 80144d0:	4603      	mov	r3, r0
 80144d2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80144d4:	7bfb      	ldrb	r3, [r7, #15]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d11c      	bne.n	8014514 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	69db      	ldr	r3, [r3, #28]
 80144de:	4619      	mov	r1, r3
 80144e0:	68b8      	ldr	r0, [r7, #8]
 80144e2:	f7ff fa4f 	bl	8013984 <move_window>
 80144e6:	4603      	mov	r3, r0
 80144e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80144ea:	7bfb      	ldrb	r3, [r7, #15]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d111      	bne.n	8014514 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	6a1b      	ldr	r3, [r3, #32]
 80144f4:	2220      	movs	r2, #32
 80144f6:	2100      	movs	r1, #0
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7ff f836 	bl	801356a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	6a18      	ldr	r0, [r3, #32]
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	3324      	adds	r3, #36	; 0x24
 8014506:	220b      	movs	r2, #11
 8014508:	4619      	mov	r1, r3
 801450a:	f7ff f80d 	bl	8013528 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	2201      	movs	r2, #1
 8014512:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8014514:	7bfb      	ldrb	r3, [r7, #15]
}
 8014516:	4618      	mov	r0, r3
 8014518:	3710      	adds	r7, #16
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
	...

08014520 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b088      	sub	sp, #32
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	60fb      	str	r3, [r7, #12]
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	3324      	adds	r3, #36	; 0x24
 8014534:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8014536:	220b      	movs	r2, #11
 8014538:	2120      	movs	r1, #32
 801453a:	68b8      	ldr	r0, [r7, #8]
 801453c:	f7ff f815 	bl	801356a <mem_set>
	si = i = 0; ni = 8;
 8014540:	2300      	movs	r3, #0
 8014542:	613b      	str	r3, [r7, #16]
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	61fb      	str	r3, [r7, #28]
 8014548:	2308      	movs	r3, #8
 801454a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801454c:	69fb      	ldr	r3, [r7, #28]
 801454e:	1c5a      	adds	r2, r3, #1
 8014550:	61fa      	str	r2, [r7, #28]
 8014552:	68fa      	ldr	r2, [r7, #12]
 8014554:	4413      	add	r3, r2
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801455a:	7efb      	ldrb	r3, [r7, #27]
 801455c:	2b20      	cmp	r3, #32
 801455e:	d94e      	bls.n	80145fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014560:	7efb      	ldrb	r3, [r7, #27]
 8014562:	2b2f      	cmp	r3, #47	; 0x2f
 8014564:	d006      	beq.n	8014574 <create_name+0x54>
 8014566:	7efb      	ldrb	r3, [r7, #27]
 8014568:	2b5c      	cmp	r3, #92	; 0x5c
 801456a:	d110      	bne.n	801458e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801456c:	e002      	b.n	8014574 <create_name+0x54>
 801456e:	69fb      	ldr	r3, [r7, #28]
 8014570:	3301      	adds	r3, #1
 8014572:	61fb      	str	r3, [r7, #28]
 8014574:	68fa      	ldr	r2, [r7, #12]
 8014576:	69fb      	ldr	r3, [r7, #28]
 8014578:	4413      	add	r3, r2
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	2b2f      	cmp	r3, #47	; 0x2f
 801457e:	d0f6      	beq.n	801456e <create_name+0x4e>
 8014580:	68fa      	ldr	r2, [r7, #12]
 8014582:	69fb      	ldr	r3, [r7, #28]
 8014584:	4413      	add	r3, r2
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	2b5c      	cmp	r3, #92	; 0x5c
 801458a:	d0f0      	beq.n	801456e <create_name+0x4e>
			break;
 801458c:	e038      	b.n	8014600 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801458e:	7efb      	ldrb	r3, [r7, #27]
 8014590:	2b2e      	cmp	r3, #46	; 0x2e
 8014592:	d003      	beq.n	801459c <create_name+0x7c>
 8014594:	693a      	ldr	r2, [r7, #16]
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	429a      	cmp	r2, r3
 801459a:	d30c      	bcc.n	80145b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	2b0b      	cmp	r3, #11
 80145a0:	d002      	beq.n	80145a8 <create_name+0x88>
 80145a2:	7efb      	ldrb	r3, [r7, #27]
 80145a4:	2b2e      	cmp	r3, #46	; 0x2e
 80145a6:	d001      	beq.n	80145ac <create_name+0x8c>
 80145a8:	2306      	movs	r3, #6
 80145aa:	e044      	b.n	8014636 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80145ac:	2308      	movs	r3, #8
 80145ae:	613b      	str	r3, [r7, #16]
 80145b0:	230b      	movs	r3, #11
 80145b2:	617b      	str	r3, [r7, #20]
			continue;
 80145b4:	e022      	b.n	80145fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80145b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	da04      	bge.n	80145c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80145be:	7efb      	ldrb	r3, [r7, #27]
 80145c0:	3b80      	subs	r3, #128	; 0x80
 80145c2:	4a1f      	ldr	r2, [pc, #124]	; (8014640 <create_name+0x120>)
 80145c4:	5cd3      	ldrb	r3, [r2, r3]
 80145c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80145c8:	7efb      	ldrb	r3, [r7, #27]
 80145ca:	4619      	mov	r1, r3
 80145cc:	481d      	ldr	r0, [pc, #116]	; (8014644 <create_name+0x124>)
 80145ce:	f7ff f80e 	bl	80135ee <chk_chr>
 80145d2:	4603      	mov	r3, r0
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d001      	beq.n	80145dc <create_name+0xbc>
 80145d8:	2306      	movs	r3, #6
 80145da:	e02c      	b.n	8014636 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80145dc:	7efb      	ldrb	r3, [r7, #27]
 80145de:	2b60      	cmp	r3, #96	; 0x60
 80145e0:	d905      	bls.n	80145ee <create_name+0xce>
 80145e2:	7efb      	ldrb	r3, [r7, #27]
 80145e4:	2b7a      	cmp	r3, #122	; 0x7a
 80145e6:	d802      	bhi.n	80145ee <create_name+0xce>
 80145e8:	7efb      	ldrb	r3, [r7, #27]
 80145ea:	3b20      	subs	r3, #32
 80145ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	1c5a      	adds	r2, r3, #1
 80145f2:	613a      	str	r2, [r7, #16]
 80145f4:	68ba      	ldr	r2, [r7, #8]
 80145f6:	4413      	add	r3, r2
 80145f8:	7efa      	ldrb	r2, [r7, #27]
 80145fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80145fc:	e7a6      	b.n	801454c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80145fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8014600:	68fa      	ldr	r2, [r7, #12]
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	441a      	add	r2, r3
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d101      	bne.n	8014614 <create_name+0xf4>
 8014610:	2306      	movs	r3, #6
 8014612:	e010      	b.n	8014636 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014614:	68bb      	ldr	r3, [r7, #8]
 8014616:	781b      	ldrb	r3, [r3, #0]
 8014618:	2be5      	cmp	r3, #229	; 0xe5
 801461a:	d102      	bne.n	8014622 <create_name+0x102>
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	2205      	movs	r2, #5
 8014620:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8014622:	7efb      	ldrb	r3, [r7, #27]
 8014624:	2b20      	cmp	r3, #32
 8014626:	d801      	bhi.n	801462c <create_name+0x10c>
 8014628:	2204      	movs	r2, #4
 801462a:	e000      	b.n	801462e <create_name+0x10e>
 801462c:	2200      	movs	r2, #0
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	330b      	adds	r3, #11
 8014632:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8014634:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8014636:	4618      	mov	r0, r3
 8014638:	3720      	adds	r7, #32
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}
 801463e:	bf00      	nop
 8014640:	0801a010 	.word	0x0801a010
 8014644:	08019f00 	.word	0x08019f00

08014648 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b086      	sub	sp, #24
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
 8014650:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801465c:	e002      	b.n	8014664 <follow_path+0x1c>
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	3301      	adds	r3, #1
 8014662:	603b      	str	r3, [r7, #0]
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	781b      	ldrb	r3, [r3, #0]
 8014668:	2b2f      	cmp	r3, #47	; 0x2f
 801466a:	d0f8      	beq.n	801465e <follow_path+0x16>
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	2b5c      	cmp	r3, #92	; 0x5c
 8014672:	d0f4      	beq.n	801465e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014674:	693b      	ldr	r3, [r7, #16]
 8014676:	2200      	movs	r2, #0
 8014678:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	781b      	ldrb	r3, [r3, #0]
 801467e:	2b1f      	cmp	r3, #31
 8014680:	d80a      	bhi.n	8014698 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2280      	movs	r2, #128	; 0x80
 8014686:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801468a:	2100      	movs	r1, #0
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f7ff fcf9 	bl	8014084 <dir_sdi>
 8014692:	4603      	mov	r3, r0
 8014694:	75fb      	strb	r3, [r7, #23]
 8014696:	e043      	b.n	8014720 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014698:	463b      	mov	r3, r7
 801469a:	4619      	mov	r1, r3
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f7ff ff3f 	bl	8014520 <create_name>
 80146a2:	4603      	mov	r3, r0
 80146a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80146a6:	7dfb      	ldrb	r3, [r7, #23]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d134      	bne.n	8014716 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f7ff feaf 	bl	8014410 <dir_find>
 80146b2:	4603      	mov	r3, r0
 80146b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80146bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80146be:	7dfb      	ldrb	r3, [r7, #23]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d00a      	beq.n	80146da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80146c4:	7dfb      	ldrb	r3, [r7, #23]
 80146c6:	2b04      	cmp	r3, #4
 80146c8:	d127      	bne.n	801471a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80146ca:	7afb      	ldrb	r3, [r7, #11]
 80146cc:	f003 0304 	and.w	r3, r3, #4
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d122      	bne.n	801471a <follow_path+0xd2>
 80146d4:	2305      	movs	r3, #5
 80146d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80146d8:	e01f      	b.n	801471a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80146da:	7afb      	ldrb	r3, [r7, #11]
 80146dc:	f003 0304 	and.w	r3, r3, #4
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d11c      	bne.n	801471e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	799b      	ldrb	r3, [r3, #6]
 80146e8:	f003 0310 	and.w	r3, r3, #16
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d102      	bne.n	80146f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80146f0:	2305      	movs	r3, #5
 80146f2:	75fb      	strb	r3, [r7, #23]
 80146f4:	e014      	b.n	8014720 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	695b      	ldr	r3, [r3, #20]
 8014700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014704:	4413      	add	r3, r2
 8014706:	4619      	mov	r1, r3
 8014708:	68f8      	ldr	r0, [r7, #12]
 801470a:	f7ff fe42 	bl	8014392 <ld_clust>
 801470e:	4602      	mov	r2, r0
 8014710:	693b      	ldr	r3, [r7, #16]
 8014712:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014714:	e7c0      	b.n	8014698 <follow_path+0x50>
			if (res != FR_OK) break;
 8014716:	bf00      	nop
 8014718:	e002      	b.n	8014720 <follow_path+0xd8>
				break;
 801471a:	bf00      	nop
 801471c:	e000      	b.n	8014720 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801471e:	bf00      	nop
			}
		}
	}

	return res;
 8014720:	7dfb      	ldrb	r3, [r7, #23]
}
 8014722:	4618      	mov	r0, r3
 8014724:	3718      	adds	r7, #24
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}

0801472a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801472a:	b480      	push	{r7}
 801472c:	b087      	sub	sp, #28
 801472e:	af00      	add	r7, sp, #0
 8014730:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014736:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d031      	beq.n	80147a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	617b      	str	r3, [r7, #20]
 8014746:	e002      	b.n	801474e <get_ldnumber+0x24>
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	3301      	adds	r3, #1
 801474c:	617b      	str	r3, [r7, #20]
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	2b20      	cmp	r3, #32
 8014754:	d903      	bls.n	801475e <get_ldnumber+0x34>
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	2b3a      	cmp	r3, #58	; 0x3a
 801475c:	d1f4      	bne.n	8014748 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	781b      	ldrb	r3, [r3, #0]
 8014762:	2b3a      	cmp	r3, #58	; 0x3a
 8014764:	d11c      	bne.n	80147a0 <get_ldnumber+0x76>
			tp = *path;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	1c5a      	adds	r2, r3, #1
 8014770:	60fa      	str	r2, [r7, #12]
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	3b30      	subs	r3, #48	; 0x30
 8014776:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	2b09      	cmp	r3, #9
 801477c:	d80e      	bhi.n	801479c <get_ldnumber+0x72>
 801477e:	68fa      	ldr	r2, [r7, #12]
 8014780:	697b      	ldr	r3, [r7, #20]
 8014782:	429a      	cmp	r2, r3
 8014784:	d10a      	bne.n	801479c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d107      	bne.n	801479c <get_ldnumber+0x72>
					vol = (int)i;
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	3301      	adds	r3, #1
 8014794:	617b      	str	r3, [r7, #20]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	697a      	ldr	r2, [r7, #20]
 801479a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	e002      	b.n	80147a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80147a0:	2300      	movs	r3, #0
 80147a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80147a4:	693b      	ldr	r3, [r7, #16]
}
 80147a6:	4618      	mov	r0, r3
 80147a8:	371c      	adds	r7, #28
 80147aa:	46bd      	mov	sp, r7
 80147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b0:	4770      	bx	lr
	...

080147b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2200      	movs	r2, #0
 80147c2:	70da      	strb	r2, [r3, #3]
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147ca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80147cc:	6839      	ldr	r1, [r7, #0]
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	f7ff f8d8 	bl	8013984 <move_window>
 80147d4:	4603      	mov	r3, r0
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d001      	beq.n	80147de <check_fs+0x2a>
 80147da:	2304      	movs	r3, #4
 80147dc:	e038      	b.n	8014850 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	3330      	adds	r3, #48	; 0x30
 80147e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80147e6:	4618      	mov	r0, r3
 80147e8:	f7fe fe1c 	bl	8013424 <ld_word>
 80147ec:	4603      	mov	r3, r0
 80147ee:	461a      	mov	r2, r3
 80147f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d001      	beq.n	80147fc <check_fs+0x48>
 80147f8:	2303      	movs	r3, #3
 80147fa:	e029      	b.n	8014850 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014802:	2be9      	cmp	r3, #233	; 0xe9
 8014804:	d009      	beq.n	801481a <check_fs+0x66>
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801480c:	2beb      	cmp	r3, #235	; 0xeb
 801480e:	d11e      	bne.n	801484e <check_fs+0x9a>
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8014816:	2b90      	cmp	r3, #144	; 0x90
 8014818:	d119      	bne.n	801484e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	3330      	adds	r3, #48	; 0x30
 801481e:	3336      	adds	r3, #54	; 0x36
 8014820:	4618      	mov	r0, r3
 8014822:	f7fe fe17 	bl	8013454 <ld_dword>
 8014826:	4603      	mov	r3, r0
 8014828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801482c:	4a0a      	ldr	r2, [pc, #40]	; (8014858 <check_fs+0xa4>)
 801482e:	4293      	cmp	r3, r2
 8014830:	d101      	bne.n	8014836 <check_fs+0x82>
 8014832:	2300      	movs	r3, #0
 8014834:	e00c      	b.n	8014850 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	3330      	adds	r3, #48	; 0x30
 801483a:	3352      	adds	r3, #82	; 0x52
 801483c:	4618      	mov	r0, r3
 801483e:	f7fe fe09 	bl	8013454 <ld_dword>
 8014842:	4603      	mov	r3, r0
 8014844:	4a05      	ldr	r2, [pc, #20]	; (801485c <check_fs+0xa8>)
 8014846:	4293      	cmp	r3, r2
 8014848:	d101      	bne.n	801484e <check_fs+0x9a>
 801484a:	2300      	movs	r3, #0
 801484c:	e000      	b.n	8014850 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801484e:	2302      	movs	r3, #2
}
 8014850:	4618      	mov	r0, r3
 8014852:	3708      	adds	r7, #8
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}
 8014858:	00544146 	.word	0x00544146
 801485c:	33544146 	.word	0x33544146

08014860 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b096      	sub	sp, #88	; 0x58
 8014864:	af00      	add	r7, sp, #0
 8014866:	60f8      	str	r0, [r7, #12]
 8014868:	60b9      	str	r1, [r7, #8]
 801486a:	4613      	mov	r3, r2
 801486c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801486e:	68bb      	ldr	r3, [r7, #8]
 8014870:	2200      	movs	r2, #0
 8014872:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014874:	68f8      	ldr	r0, [r7, #12]
 8014876:	f7ff ff58 	bl	801472a <get_ldnumber>
 801487a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801487e:	2b00      	cmp	r3, #0
 8014880:	da01      	bge.n	8014886 <find_volume+0x26>
 8014882:	230b      	movs	r3, #11
 8014884:	e22d      	b.n	8014ce2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014886:	4aa1      	ldr	r2, [pc, #644]	; (8014b0c <find_volume+0x2ac>)
 8014888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801488a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801488e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014892:	2b00      	cmp	r3, #0
 8014894:	d101      	bne.n	801489a <find_volume+0x3a>
 8014896:	230c      	movs	r3, #12
 8014898:	e223      	b.n	8014ce2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801489a:	68bb      	ldr	r3, [r7, #8]
 801489c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801489e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80148a0:	79fb      	ldrb	r3, [r7, #7]
 80148a2:	f023 0301 	bic.w	r3, r3, #1
 80148a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80148a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d01a      	beq.n	80148e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80148b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b2:	785b      	ldrb	r3, [r3, #1]
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7fe fd17 	bl	80132e8 <disk_status>
 80148ba:	4603      	mov	r3, r0
 80148bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80148c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80148c4:	f003 0301 	and.w	r3, r3, #1
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d10c      	bne.n	80148e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80148cc:	79fb      	ldrb	r3, [r7, #7]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d007      	beq.n	80148e2 <find_volume+0x82>
 80148d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80148d6:	f003 0304 	and.w	r3, r3, #4
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d001      	beq.n	80148e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80148de:	230a      	movs	r3, #10
 80148e0:	e1ff      	b.n	8014ce2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80148e2:	2300      	movs	r3, #0
 80148e4:	e1fd      	b.n	8014ce2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80148e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e8:	2200      	movs	r2, #0
 80148ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80148ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148ee:	b2da      	uxtb	r2, r3
 80148f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80148f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f6:	785b      	ldrb	r3, [r3, #1]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7fe fd0f 	bl	801331c <disk_initialize>
 80148fe:	4603      	mov	r3, r0
 8014900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014904:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014908:	f003 0301 	and.w	r3, r3, #1
 801490c:	2b00      	cmp	r3, #0
 801490e:	d001      	beq.n	8014914 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014910:	2303      	movs	r3, #3
 8014912:	e1e6      	b.n	8014ce2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014914:	79fb      	ldrb	r3, [r7, #7]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d007      	beq.n	801492a <find_volume+0xca>
 801491a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801491e:	f003 0304 	and.w	r3, r3, #4
 8014922:	2b00      	cmp	r3, #0
 8014924:	d001      	beq.n	801492a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014926:	230a      	movs	r3, #10
 8014928:	e1db      	b.n	8014ce2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801492a:	2300      	movs	r3, #0
 801492c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801492e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014930:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014932:	f7ff ff3f 	bl	80147b4 <check_fs>
 8014936:	4603      	mov	r3, r0
 8014938:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801493c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014940:	2b02      	cmp	r3, #2
 8014942:	d149      	bne.n	80149d8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014944:	2300      	movs	r3, #0
 8014946:	643b      	str	r3, [r7, #64]	; 0x40
 8014948:	e01e      	b.n	8014988 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014952:	011b      	lsls	r3, r3, #4
 8014954:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014958:	4413      	add	r3, r2
 801495a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801495e:	3304      	adds	r3, #4
 8014960:	781b      	ldrb	r3, [r3, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d006      	beq.n	8014974 <find_volume+0x114>
 8014966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014968:	3308      	adds	r3, #8
 801496a:	4618      	mov	r0, r3
 801496c:	f7fe fd72 	bl	8013454 <ld_dword>
 8014970:	4602      	mov	r2, r0
 8014972:	e000      	b.n	8014976 <find_volume+0x116>
 8014974:	2200      	movs	r2, #0
 8014976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014978:	009b      	lsls	r3, r3, #2
 801497a:	3358      	adds	r3, #88	; 0x58
 801497c:	443b      	add	r3, r7
 801497e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014984:	3301      	adds	r3, #1
 8014986:	643b      	str	r3, [r7, #64]	; 0x40
 8014988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801498a:	2b03      	cmp	r3, #3
 801498c:	d9dd      	bls.n	801494a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801498e:	2300      	movs	r3, #0
 8014990:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014994:	2b00      	cmp	r3, #0
 8014996:	d002      	beq.n	801499e <find_volume+0x13e>
 8014998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801499a:	3b01      	subs	r3, #1
 801499c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801499e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149a0:	009b      	lsls	r3, r3, #2
 80149a2:	3358      	adds	r3, #88	; 0x58
 80149a4:	443b      	add	r3, r7
 80149a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80149aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80149ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d005      	beq.n	80149be <find_volume+0x15e>
 80149b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80149b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80149b6:	f7ff fefd 	bl	80147b4 <check_fs>
 80149ba:	4603      	mov	r3, r0
 80149bc:	e000      	b.n	80149c0 <find_volume+0x160>
 80149be:	2303      	movs	r3, #3
 80149c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80149c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80149c8:	2b01      	cmp	r3, #1
 80149ca:	d905      	bls.n	80149d8 <find_volume+0x178>
 80149cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149ce:	3301      	adds	r3, #1
 80149d0:	643b      	str	r3, [r7, #64]	; 0x40
 80149d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149d4:	2b03      	cmp	r3, #3
 80149d6:	d9e2      	bls.n	801499e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80149d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80149dc:	2b04      	cmp	r3, #4
 80149de:	d101      	bne.n	80149e4 <find_volume+0x184>
 80149e0:	2301      	movs	r3, #1
 80149e2:	e17e      	b.n	8014ce2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80149e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80149e8:	2b01      	cmp	r3, #1
 80149ea:	d901      	bls.n	80149f0 <find_volume+0x190>
 80149ec:	230d      	movs	r3, #13
 80149ee:	e178      	b.n	8014ce2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80149f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f2:	3330      	adds	r3, #48	; 0x30
 80149f4:	330b      	adds	r3, #11
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7fe fd14 	bl	8013424 <ld_word>
 80149fc:	4603      	mov	r3, r0
 80149fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a02:	d001      	beq.n	8014a08 <find_volume+0x1a8>
 8014a04:	230d      	movs	r3, #13
 8014a06:	e16c      	b.n	8014ce2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a0a:	3330      	adds	r3, #48	; 0x30
 8014a0c:	3316      	adds	r3, #22
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7fe fd08 	bl	8013424 <ld_word>
 8014a14:	4603      	mov	r3, r0
 8014a16:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d106      	bne.n	8014a2c <find_volume+0x1cc>
 8014a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a20:	3330      	adds	r3, #48	; 0x30
 8014a22:	3324      	adds	r3, #36	; 0x24
 8014a24:	4618      	mov	r0, r3
 8014a26:	f7fe fd15 	bl	8013454 <ld_dword>
 8014a2a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014a30:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a34:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8014a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3e:	789b      	ldrb	r3, [r3, #2]
 8014a40:	2b01      	cmp	r3, #1
 8014a42:	d005      	beq.n	8014a50 <find_volume+0x1f0>
 8014a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a46:	789b      	ldrb	r3, [r3, #2]
 8014a48:	2b02      	cmp	r3, #2
 8014a4a:	d001      	beq.n	8014a50 <find_volume+0x1f0>
 8014a4c:	230d      	movs	r3, #13
 8014a4e:	e148      	b.n	8014ce2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a52:	789b      	ldrb	r3, [r3, #2]
 8014a54:	461a      	mov	r2, r3
 8014a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a58:	fb02 f303 	mul.w	r3, r2, r3
 8014a5c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a6c:	895b      	ldrh	r3, [r3, #10]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d008      	beq.n	8014a84 <find_volume+0x224>
 8014a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a74:	895b      	ldrh	r3, [r3, #10]
 8014a76:	461a      	mov	r2, r3
 8014a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a7a:	895b      	ldrh	r3, [r3, #10]
 8014a7c:	3b01      	subs	r3, #1
 8014a7e:	4013      	ands	r3, r2
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d001      	beq.n	8014a88 <find_volume+0x228>
 8014a84:	230d      	movs	r3, #13
 8014a86:	e12c      	b.n	8014ce2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8a:	3330      	adds	r3, #48	; 0x30
 8014a8c:	3311      	adds	r3, #17
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f7fe fcc8 	bl	8013424 <ld_word>
 8014a94:	4603      	mov	r3, r0
 8014a96:	461a      	mov	r2, r3
 8014a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a9e:	891b      	ldrh	r3, [r3, #8]
 8014aa0:	f003 030f 	and.w	r3, r3, #15
 8014aa4:	b29b      	uxth	r3, r3
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d001      	beq.n	8014aae <find_volume+0x24e>
 8014aaa:	230d      	movs	r3, #13
 8014aac:	e119      	b.n	8014ce2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ab0:	3330      	adds	r3, #48	; 0x30
 8014ab2:	3313      	adds	r3, #19
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7fe fcb5 	bl	8013424 <ld_word>
 8014aba:	4603      	mov	r3, r0
 8014abc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d106      	bne.n	8014ad2 <find_volume+0x272>
 8014ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ac6:	3330      	adds	r3, #48	; 0x30
 8014ac8:	3320      	adds	r3, #32
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7fe fcc2 	bl	8013454 <ld_dword>
 8014ad0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad4:	3330      	adds	r3, #48	; 0x30
 8014ad6:	330e      	adds	r3, #14
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7fe fca3 	bl	8013424 <ld_word>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014ae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d101      	bne.n	8014aec <find_volume+0x28c>
 8014ae8:	230d      	movs	r3, #13
 8014aea:	e0fa      	b.n	8014ce2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014aec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014af0:	4413      	add	r3, r2
 8014af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014af4:	8912      	ldrh	r2, [r2, #8]
 8014af6:	0912      	lsrs	r2, r2, #4
 8014af8:	b292      	uxth	r2, r2
 8014afa:	4413      	add	r3, r2
 8014afc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d204      	bcs.n	8014b10 <find_volume+0x2b0>
 8014b06:	230d      	movs	r3, #13
 8014b08:	e0eb      	b.n	8014ce2 <find_volume+0x482>
 8014b0a:	bf00      	nop
 8014b0c:	20001330 	.word	0x20001330
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b14:	1ad3      	subs	r3, r2, r3
 8014b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b18:	8952      	ldrh	r2, [r2, #10]
 8014b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014b1e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d101      	bne.n	8014b2a <find_volume+0x2ca>
 8014b26:	230d      	movs	r3, #13
 8014b28:	e0db      	b.n	8014ce2 <find_volume+0x482>
		fmt = FS_FAT32;
 8014b2a:	2303      	movs	r3, #3
 8014b2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b32:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014b36:	4293      	cmp	r3, r2
 8014b38:	d802      	bhi.n	8014b40 <find_volume+0x2e0>
 8014b3a:	2302      	movs	r3, #2
 8014b3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b42:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014b46:	4293      	cmp	r3, r2
 8014b48:	d802      	bhi.n	8014b50 <find_volume+0x2f0>
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b52:	1c9a      	adds	r2, r3, #2
 8014b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b56:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8014b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014b5c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014b5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b62:	441a      	add	r2, r3
 8014b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b66:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8014b68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b6c:	441a      	add	r2, r3
 8014b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b70:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8014b72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014b76:	2b03      	cmp	r3, #3
 8014b78:	d11e      	bne.n	8014bb8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b7c:	3330      	adds	r3, #48	; 0x30
 8014b7e:	332a      	adds	r3, #42	; 0x2a
 8014b80:	4618      	mov	r0, r3
 8014b82:	f7fe fc4f 	bl	8013424 <ld_word>
 8014b86:	4603      	mov	r3, r0
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d001      	beq.n	8014b90 <find_volume+0x330>
 8014b8c:	230d      	movs	r3, #13
 8014b8e:	e0a8      	b.n	8014ce2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b92:	891b      	ldrh	r3, [r3, #8]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d001      	beq.n	8014b9c <find_volume+0x33c>
 8014b98:	230d      	movs	r3, #13
 8014b9a:	e0a2      	b.n	8014ce2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b9e:	3330      	adds	r3, #48	; 0x30
 8014ba0:	332c      	adds	r3, #44	; 0x2c
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7fe fc56 	bl	8013454 <ld_dword>
 8014ba8:	4602      	mov	r2, r0
 8014baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bac:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb0:	695b      	ldr	r3, [r3, #20]
 8014bb2:	009b      	lsls	r3, r3, #2
 8014bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8014bb6:	e01f      	b.n	8014bf8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bba:	891b      	ldrh	r3, [r3, #8]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d101      	bne.n	8014bc4 <find_volume+0x364>
 8014bc0:	230d      	movs	r3, #13
 8014bc2:	e08e      	b.n	8014ce2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bc6:	6a1a      	ldr	r2, [r3, #32]
 8014bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bca:	441a      	add	r2, r3
 8014bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bce:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014bd4:	2b02      	cmp	r3, #2
 8014bd6:	d103      	bne.n	8014be0 <find_volume+0x380>
 8014bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bda:	695b      	ldr	r3, [r3, #20]
 8014bdc:	005b      	lsls	r3, r3, #1
 8014bde:	e00a      	b.n	8014bf6 <find_volume+0x396>
 8014be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014be2:	695a      	ldr	r2, [r3, #20]
 8014be4:	4613      	mov	r3, r2
 8014be6:	005b      	lsls	r3, r3, #1
 8014be8:	4413      	add	r3, r2
 8014bea:	085a      	lsrs	r2, r3, #1
 8014bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bee:	695b      	ldr	r3, [r3, #20]
 8014bf0:	f003 0301 	and.w	r3, r3, #1
 8014bf4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014bf6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bfa:	699a      	ldr	r2, [r3, #24]
 8014bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bfe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014c02:	0a5b      	lsrs	r3, r3, #9
 8014c04:	429a      	cmp	r2, r3
 8014c06:	d201      	bcs.n	8014c0c <find_volume+0x3ac>
 8014c08:	230d      	movs	r3, #13
 8014c0a:	e06a      	b.n	8014ce2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c12:	611a      	str	r2, [r3, #16]
 8014c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c16:	691a      	ldr	r2, [r3, #16]
 8014c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c1a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8014c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c1e:	2280      	movs	r2, #128	; 0x80
 8014c20:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014c22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014c26:	2b03      	cmp	r3, #3
 8014c28:	d149      	bne.n	8014cbe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c2c:	3330      	adds	r3, #48	; 0x30
 8014c2e:	3330      	adds	r3, #48	; 0x30
 8014c30:	4618      	mov	r0, r3
 8014c32:	f7fe fbf7 	bl	8013424 <ld_word>
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	d140      	bne.n	8014cbe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c3e:	3301      	adds	r3, #1
 8014c40:	4619      	mov	r1, r3
 8014c42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014c44:	f7fe fe9e 	bl	8013984 <move_window>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d137      	bne.n	8014cbe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8014c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c50:	2200      	movs	r2, #0
 8014c52:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c56:	3330      	adds	r3, #48	; 0x30
 8014c58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7fe fbe1 	bl	8013424 <ld_word>
 8014c62:	4603      	mov	r3, r0
 8014c64:	461a      	mov	r2, r3
 8014c66:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014c6a:	429a      	cmp	r2, r3
 8014c6c:	d127      	bne.n	8014cbe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c70:	3330      	adds	r3, #48	; 0x30
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7fe fbee 	bl	8013454 <ld_dword>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	4a1c      	ldr	r2, [pc, #112]	; (8014cec <find_volume+0x48c>)
 8014c7c:	4293      	cmp	r3, r2
 8014c7e:	d11e      	bne.n	8014cbe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c82:	3330      	adds	r3, #48	; 0x30
 8014c84:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f7fe fbe3 	bl	8013454 <ld_dword>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	4a17      	ldr	r2, [pc, #92]	; (8014cf0 <find_volume+0x490>)
 8014c92:	4293      	cmp	r3, r2
 8014c94:	d113      	bne.n	8014cbe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c98:	3330      	adds	r3, #48	; 0x30
 8014c9a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f7fe fbd8 	bl	8013454 <ld_dword>
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ca8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cac:	3330      	adds	r3, #48	; 0x30
 8014cae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7fe fbce 	bl	8013454 <ld_dword>
 8014cb8:	4602      	mov	r2, r0
 8014cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cbc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cc0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014cc4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014cc6:	4b0b      	ldr	r3, [pc, #44]	; (8014cf4 <find_volume+0x494>)
 8014cc8:	881b      	ldrh	r3, [r3, #0]
 8014cca:	3301      	adds	r3, #1
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	4b09      	ldr	r3, [pc, #36]	; (8014cf4 <find_volume+0x494>)
 8014cd0:	801a      	strh	r2, [r3, #0]
 8014cd2:	4b08      	ldr	r3, [pc, #32]	; (8014cf4 <find_volume+0x494>)
 8014cd4:	881a      	ldrh	r2, [r3, #0]
 8014cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cd8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014cda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014cdc:	f7fe fdea 	bl	80138b4 <clear_lock>
#endif
	return FR_OK;
 8014ce0:	2300      	movs	r3, #0
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3758      	adds	r7, #88	; 0x58
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
 8014cea:	bf00      	nop
 8014cec:	41615252 	.word	0x41615252
 8014cf0:	61417272 	.word	0x61417272
 8014cf4:	20001334 	.word	0x20001334

08014cf8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b084      	sub	sp, #16
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014d02:	2309      	movs	r3, #9
 8014d04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d01c      	beq.n	8014d46 <validate+0x4e>
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d018      	beq.n	8014d46 <validate+0x4e>
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	781b      	ldrb	r3, [r3, #0]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d013      	beq.n	8014d46 <validate+0x4e>
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	889a      	ldrh	r2, [r3, #4]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	88db      	ldrh	r3, [r3, #6]
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d10c      	bne.n	8014d46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	785b      	ldrb	r3, [r3, #1]
 8014d32:	4618      	mov	r0, r3
 8014d34:	f7fe fad8 	bl	80132e8 <disk_status>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	f003 0301 	and.w	r3, r3, #1
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d101      	bne.n	8014d46 <validate+0x4e>
			res = FR_OK;
 8014d42:	2300      	movs	r3, #0
 8014d44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014d46:	7bfb      	ldrb	r3, [r7, #15]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d102      	bne.n	8014d52 <validate+0x5a>
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	e000      	b.n	8014d54 <validate+0x5c>
 8014d52:	2300      	movs	r3, #0
 8014d54:	683a      	ldr	r2, [r7, #0]
 8014d56:	6013      	str	r3, [r2, #0]
	return res;
 8014d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3710      	adds	r7, #16
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
	...

08014d64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b088      	sub	sp, #32
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	60f8      	str	r0, [r7, #12]
 8014d6c:	60b9      	str	r1, [r7, #8]
 8014d6e:	4613      	mov	r3, r2
 8014d70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014d76:	f107 0310 	add.w	r3, r7, #16
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f7ff fcd5 	bl	801472a <get_ldnumber>
 8014d80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014d82:	69fb      	ldr	r3, [r7, #28]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	da01      	bge.n	8014d8c <f_mount+0x28>
 8014d88:	230b      	movs	r3, #11
 8014d8a:	e02b      	b.n	8014de4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014d8c:	4a17      	ldr	r2, [pc, #92]	; (8014dec <f_mount+0x88>)
 8014d8e:	69fb      	ldr	r3, [r7, #28]
 8014d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014d96:	69bb      	ldr	r3, [r7, #24]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d005      	beq.n	8014da8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014d9c:	69b8      	ldr	r0, [r7, #24]
 8014d9e:	f7fe fd89 	bl	80138b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014da2:	69bb      	ldr	r3, [r7, #24]
 8014da4:	2200      	movs	r2, #0
 8014da6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d002      	beq.n	8014db4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	2200      	movs	r2, #0
 8014db2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014db4:	68fa      	ldr	r2, [r7, #12]
 8014db6:	490d      	ldr	r1, [pc, #52]	; (8014dec <f_mount+0x88>)
 8014db8:	69fb      	ldr	r3, [r7, #28]
 8014dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d002      	beq.n	8014dca <f_mount+0x66>
 8014dc4:	79fb      	ldrb	r3, [r7, #7]
 8014dc6:	2b01      	cmp	r3, #1
 8014dc8:	d001      	beq.n	8014dce <f_mount+0x6a>
 8014dca:	2300      	movs	r3, #0
 8014dcc:	e00a      	b.n	8014de4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014dce:	f107 010c 	add.w	r1, r7, #12
 8014dd2:	f107 0308 	add.w	r3, r7, #8
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7ff fd41 	bl	8014860 <find_volume>
 8014dde:	4603      	mov	r3, r0
 8014de0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	3720      	adds	r7, #32
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}
 8014dec:	20001330 	.word	0x20001330

08014df0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b09a      	sub	sp, #104	; 0x68
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	60f8      	str	r0, [r7, #12]
 8014df8:	60b9      	str	r1, [r7, #8]
 8014dfa:	4613      	mov	r3, r2
 8014dfc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d101      	bne.n	8014e08 <f_open+0x18>
 8014e04:	2309      	movs	r3, #9
 8014e06:	e1ad      	b.n	8015164 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014e08:	79fb      	ldrb	r3, [r7, #7]
 8014e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014e0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014e10:	79fa      	ldrb	r2, [r7, #7]
 8014e12:	f107 0114 	add.w	r1, r7, #20
 8014e16:	f107 0308 	add.w	r3, r7, #8
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f7ff fd20 	bl	8014860 <find_volume>
 8014e20:	4603      	mov	r3, r0
 8014e22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8014e26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	f040 8191 	bne.w	8015152 <f_open+0x362>
		dj.obj.fs = fs;
 8014e30:	697b      	ldr	r3, [r7, #20]
 8014e32:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014e34:	68ba      	ldr	r2, [r7, #8]
 8014e36:	f107 0318 	add.w	r3, r7, #24
 8014e3a:	4611      	mov	r1, r2
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7ff fc03 	bl	8014648 <follow_path>
 8014e42:	4603      	mov	r3, r0
 8014e44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014e48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d11a      	bne.n	8014e86 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014e50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014e54:	b25b      	sxtb	r3, r3
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	da03      	bge.n	8014e62 <f_open+0x72>
				res = FR_INVALID_NAME;
 8014e5a:	2306      	movs	r3, #6
 8014e5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014e60:	e011      	b.n	8014e86 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014e62:	79fb      	ldrb	r3, [r7, #7]
 8014e64:	f023 0301 	bic.w	r3, r3, #1
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	bf14      	ite	ne
 8014e6c:	2301      	movne	r3, #1
 8014e6e:	2300      	moveq	r3, #0
 8014e70:	b2db      	uxtb	r3, r3
 8014e72:	461a      	mov	r2, r3
 8014e74:	f107 0318 	add.w	r3, r7, #24
 8014e78:	4611      	mov	r1, r2
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7fe fbd2 	bl	8013624 <chk_lock>
 8014e80:	4603      	mov	r3, r0
 8014e82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014e86:	79fb      	ldrb	r3, [r7, #7]
 8014e88:	f003 031c 	and.w	r3, r3, #28
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d07f      	beq.n	8014f90 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014e90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d017      	beq.n	8014ec8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014e98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e9c:	2b04      	cmp	r3, #4
 8014e9e:	d10e      	bne.n	8014ebe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014ea0:	f7fe fc1c 	bl	80136dc <enq_lock>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d006      	beq.n	8014eb8 <f_open+0xc8>
 8014eaa:	f107 0318 	add.w	r3, r7, #24
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7ff fb03 	bl	80144ba <dir_register>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	e000      	b.n	8014eba <f_open+0xca>
 8014eb8:	2312      	movs	r3, #18
 8014eba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014ebe:	79fb      	ldrb	r3, [r7, #7]
 8014ec0:	f043 0308 	orr.w	r3, r3, #8
 8014ec4:	71fb      	strb	r3, [r7, #7]
 8014ec6:	e010      	b.n	8014eea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014ec8:	7fbb      	ldrb	r3, [r7, #30]
 8014eca:	f003 0311 	and.w	r3, r3, #17
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d003      	beq.n	8014eda <f_open+0xea>
					res = FR_DENIED;
 8014ed2:	2307      	movs	r3, #7
 8014ed4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014ed8:	e007      	b.n	8014eea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014eda:	79fb      	ldrb	r3, [r7, #7]
 8014edc:	f003 0304 	and.w	r3, r3, #4
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d002      	beq.n	8014eea <f_open+0xfa>
 8014ee4:	2308      	movs	r3, #8
 8014ee6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014eea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d168      	bne.n	8014fc4 <f_open+0x1d4>
 8014ef2:	79fb      	ldrb	r3, [r7, #7]
 8014ef4:	f003 0308 	and.w	r3, r3, #8
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d063      	beq.n	8014fc4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014efc:	f7fc fbd0 	bl	80116a0 <get_fattime>
 8014f00:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f04:	330e      	adds	r3, #14
 8014f06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7fe fae1 	bl	80134d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f10:	3316      	adds	r3, #22
 8014f12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014f14:	4618      	mov	r0, r3
 8014f16:	f7fe fadb 	bl	80134d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f1c:	330b      	adds	r3, #11
 8014f1e:	2220      	movs	r2, #32
 8014f20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f26:	4611      	mov	r1, r2
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f7ff fa32 	bl	8014392 <ld_clust>
 8014f2e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014f34:	2200      	movs	r2, #0
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7ff fa4a 	bl	80143d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f3e:	331c      	adds	r3, #28
 8014f40:	2100      	movs	r1, #0
 8014f42:	4618      	mov	r0, r3
 8014f44:	f7fe fac4 	bl	80134d0 <st_dword>
					fs->wflag = 1;
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	2201      	movs	r2, #1
 8014f4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d037      	beq.n	8014fc4 <f_open+0x1d4>
						dw = fs->winsect;
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f58:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8014f5a:	f107 0318 	add.w	r3, r7, #24
 8014f5e:	2200      	movs	r2, #0
 8014f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7fe ff5d 	bl	8013e22 <remove_chain>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8014f6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d126      	bne.n	8014fc4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7fe fd02 	bl	8013984 <move_window>
 8014f80:	4603      	mov	r3, r0
 8014f82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014f8a:	3a01      	subs	r2, #1
 8014f8c:	60da      	str	r2, [r3, #12]
 8014f8e:	e019      	b.n	8014fc4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014f90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d115      	bne.n	8014fc4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014f98:	7fbb      	ldrb	r3, [r7, #30]
 8014f9a:	f003 0310 	and.w	r3, r3, #16
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d003      	beq.n	8014faa <f_open+0x1ba>
					res = FR_NO_FILE;
 8014fa2:	2304      	movs	r3, #4
 8014fa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014fa8:	e00c      	b.n	8014fc4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014faa:	79fb      	ldrb	r3, [r7, #7]
 8014fac:	f003 0302 	and.w	r3, r3, #2
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d007      	beq.n	8014fc4 <f_open+0x1d4>
 8014fb4:	7fbb      	ldrb	r3, [r7, #30]
 8014fb6:	f003 0301 	and.w	r3, r3, #1
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d002      	beq.n	8014fc4 <f_open+0x1d4>
						res = FR_DENIED;
 8014fbe:	2307      	movs	r3, #7
 8014fc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8014fc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d128      	bne.n	801501e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014fcc:	79fb      	ldrb	r3, [r7, #7]
 8014fce:	f003 0308 	and.w	r3, r3, #8
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d003      	beq.n	8014fde <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014fd6:	79fb      	ldrb	r3, [r7, #7]
 8014fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fdc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014fec:	79fb      	ldrb	r3, [r7, #7]
 8014fee:	f023 0301 	bic.w	r3, r3, #1
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	bf14      	ite	ne
 8014ff6:	2301      	movne	r3, #1
 8014ff8:	2300      	moveq	r3, #0
 8014ffa:	b2db      	uxtb	r3, r3
 8014ffc:	461a      	mov	r2, r3
 8014ffe:	f107 0318 	add.w	r3, r7, #24
 8015002:	4611      	mov	r1, r2
 8015004:	4618      	mov	r0, r3
 8015006:	f7fe fb8b 	bl	8013720 <inc_lock>
 801500a:	4602      	mov	r2, r0
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	691b      	ldr	r3, [r3, #16]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d102      	bne.n	801501e <f_open+0x22e>
 8015018:	2302      	movs	r3, #2
 801501a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801501e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015022:	2b00      	cmp	r3, #0
 8015024:	f040 8095 	bne.w	8015152 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015028:	697b      	ldr	r3, [r7, #20]
 801502a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801502c:	4611      	mov	r1, r2
 801502e:	4618      	mov	r0, r3
 8015030:	f7ff f9af 	bl	8014392 <ld_clust>
 8015034:	4602      	mov	r2, r0
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801503c:	331c      	adds	r3, #28
 801503e:	4618      	mov	r0, r3
 8015040:	f7fe fa08 	bl	8013454 <ld_dword>
 8015044:	4602      	mov	r2, r0
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	2200      	movs	r2, #0
 801504e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8015050:	697a      	ldr	r2, [r7, #20]
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8015056:	697b      	ldr	r3, [r7, #20]
 8015058:	88da      	ldrh	r2, [r3, #6]
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	79fa      	ldrb	r2, [r7, #7]
 8015062:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	2200      	movs	r2, #0
 8015068:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	2200      	movs	r2, #0
 801506e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	2200      	movs	r2, #0
 8015074:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	3330      	adds	r3, #48	; 0x30
 801507a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801507e:	2100      	movs	r1, #0
 8015080:	4618      	mov	r0, r3
 8015082:	f7fe fa72 	bl	801356a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8015086:	79fb      	ldrb	r3, [r7, #7]
 8015088:	f003 0320 	and.w	r3, r3, #32
 801508c:	2b00      	cmp	r3, #0
 801508e:	d060      	beq.n	8015152 <f_open+0x362>
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	68db      	ldr	r3, [r3, #12]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d05c      	beq.n	8015152 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	68da      	ldr	r2, [r3, #12]
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	895b      	ldrh	r3, [r3, #10]
 80150a4:	025b      	lsls	r3, r3, #9
 80150a6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	689b      	ldr	r3, [r3, #8]
 80150ac:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	68db      	ldr	r3, [r3, #12]
 80150b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80150b4:	e016      	b.n	80150e4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7fe fd1d 	bl	8013afa <get_fat>
 80150c0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80150c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80150c4:	2b01      	cmp	r3, #1
 80150c6:	d802      	bhi.n	80150ce <f_open+0x2de>
 80150c8:	2302      	movs	r3, #2
 80150ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80150ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80150d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150d4:	d102      	bne.n	80150dc <f_open+0x2ec>
 80150d6:	2301      	movs	r3, #1
 80150d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80150dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80150de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150e0:	1ad3      	subs	r3, r2, r3
 80150e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80150e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d103      	bne.n	80150f4 <f_open+0x304>
 80150ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80150ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150f0:	429a      	cmp	r2, r3
 80150f2:	d8e0      	bhi.n	80150b6 <f_open+0x2c6>
				}
				fp->clust = clst;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80150f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80150fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d127      	bne.n	8015152 <f_open+0x362>
 8015102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015108:	2b00      	cmp	r3, #0
 801510a:	d022      	beq.n	8015152 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015110:	4618      	mov	r0, r3
 8015112:	f7fe fcd3 	bl	8013abc <clust2sect>
 8015116:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801511a:	2b00      	cmp	r3, #0
 801511c:	d103      	bne.n	8015126 <f_open+0x336>
						res = FR_INT_ERR;
 801511e:	2302      	movs	r3, #2
 8015120:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8015124:	e015      	b.n	8015152 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8015126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015128:	0a5a      	lsrs	r2, r3, #9
 801512a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801512c:	441a      	add	r2, r3
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8015132:	697b      	ldr	r3, [r7, #20]
 8015134:	7858      	ldrb	r0, [r3, #1]
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	6a1a      	ldr	r2, [r3, #32]
 8015140:	2301      	movs	r3, #1
 8015142:	f7fe f911 	bl	8013368 <disk_read>
 8015146:	4603      	mov	r3, r0
 8015148:	2b00      	cmp	r3, #0
 801514a:	d002      	beq.n	8015152 <f_open+0x362>
 801514c:	2301      	movs	r3, #1
 801514e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8015152:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015156:	2b00      	cmp	r3, #0
 8015158:	d002      	beq.n	8015160 <f_open+0x370>
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	2200      	movs	r2, #0
 801515e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015160:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8015164:	4618      	mov	r0, r3
 8015166:	3768      	adds	r7, #104	; 0x68
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}

0801516c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b08e      	sub	sp, #56	; 0x38
 8015170:	af00      	add	r7, sp, #0
 8015172:	60f8      	str	r0, [r7, #12]
 8015174:	60b9      	str	r1, [r7, #8]
 8015176:	607a      	str	r2, [r7, #4]
 8015178:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	2200      	movs	r2, #0
 8015182:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	f107 0214 	add.w	r2, r7, #20
 801518a:	4611      	mov	r1, r2
 801518c:	4618      	mov	r0, r3
 801518e:	f7ff fdb3 	bl	8014cf8 <validate>
 8015192:	4603      	mov	r3, r0
 8015194:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801519c:	2b00      	cmp	r3, #0
 801519e:	d107      	bne.n	80151b0 <f_read+0x44>
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	7d5b      	ldrb	r3, [r3, #21]
 80151a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80151a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d002      	beq.n	80151b6 <f_read+0x4a>
 80151b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80151b4:	e115      	b.n	80153e2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	7d1b      	ldrb	r3, [r3, #20]
 80151ba:	f003 0301 	and.w	r3, r3, #1
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d101      	bne.n	80151c6 <f_read+0x5a>
 80151c2:	2307      	movs	r3, #7
 80151c4:	e10d      	b.n	80153e2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	68da      	ldr	r2, [r3, #12]
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	699b      	ldr	r3, [r3, #24]
 80151ce:	1ad3      	subs	r3, r2, r3
 80151d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80151d2:	687a      	ldr	r2, [r7, #4]
 80151d4:	6a3b      	ldr	r3, [r7, #32]
 80151d6:	429a      	cmp	r2, r3
 80151d8:	f240 80fe 	bls.w	80153d8 <f_read+0x26c>
 80151dc:	6a3b      	ldr	r3, [r7, #32]
 80151de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80151e0:	e0fa      	b.n	80153d8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	699b      	ldr	r3, [r3, #24]
 80151e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	f040 80c6 	bne.w	801537c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	699b      	ldr	r3, [r3, #24]
 80151f4:	0a5b      	lsrs	r3, r3, #9
 80151f6:	697a      	ldr	r2, [r7, #20]
 80151f8:	8952      	ldrh	r2, [r2, #10]
 80151fa:	3a01      	subs	r2, #1
 80151fc:	4013      	ands	r3, r2
 80151fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8015200:	69fb      	ldr	r3, [r7, #28]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d12f      	bne.n	8015266 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	699b      	ldr	r3, [r3, #24]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d103      	bne.n	8015216 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	689b      	ldr	r3, [r3, #8]
 8015212:	633b      	str	r3, [r7, #48]	; 0x30
 8015214:	e013      	b.n	801523e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801521a:	2b00      	cmp	r3, #0
 801521c:	d007      	beq.n	801522e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	699b      	ldr	r3, [r3, #24]
 8015222:	4619      	mov	r1, r3
 8015224:	68f8      	ldr	r0, [r7, #12]
 8015226:	f7fe fef9 	bl	801401c <clmt_clust>
 801522a:	6338      	str	r0, [r7, #48]	; 0x30
 801522c:	e007      	b.n	801523e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801522e:	68fa      	ldr	r2, [r7, #12]
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	69db      	ldr	r3, [r3, #28]
 8015234:	4619      	mov	r1, r3
 8015236:	4610      	mov	r0, r2
 8015238:	f7fe fc5f 	bl	8013afa <get_fat>
 801523c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015240:	2b01      	cmp	r3, #1
 8015242:	d804      	bhi.n	801524e <f_read+0xe2>
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	2202      	movs	r2, #2
 8015248:	755a      	strb	r2, [r3, #21]
 801524a:	2302      	movs	r3, #2
 801524c:	e0c9      	b.n	80153e2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015254:	d104      	bne.n	8015260 <f_read+0xf4>
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	2201      	movs	r2, #1
 801525a:	755a      	strb	r2, [r3, #21]
 801525c:	2301      	movs	r3, #1
 801525e:	e0c0      	b.n	80153e2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015264:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015266:	697a      	ldr	r2, [r7, #20]
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	69db      	ldr	r3, [r3, #28]
 801526c:	4619      	mov	r1, r3
 801526e:	4610      	mov	r0, r2
 8015270:	f7fe fc24 	bl	8013abc <clust2sect>
 8015274:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015276:	69bb      	ldr	r3, [r7, #24]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d104      	bne.n	8015286 <f_read+0x11a>
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	2202      	movs	r2, #2
 8015280:	755a      	strb	r2, [r3, #21]
 8015282:	2302      	movs	r3, #2
 8015284:	e0ad      	b.n	80153e2 <f_read+0x276>
			sect += csect;
 8015286:	69ba      	ldr	r2, [r7, #24]
 8015288:	69fb      	ldr	r3, [r7, #28]
 801528a:	4413      	add	r3, r2
 801528c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	0a5b      	lsrs	r3, r3, #9
 8015292:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8015294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015296:	2b00      	cmp	r3, #0
 8015298:	d039      	beq.n	801530e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801529a:	69fa      	ldr	r2, [r7, #28]
 801529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801529e:	4413      	add	r3, r2
 80152a0:	697a      	ldr	r2, [r7, #20]
 80152a2:	8952      	ldrh	r2, [r2, #10]
 80152a4:	4293      	cmp	r3, r2
 80152a6:	d905      	bls.n	80152b4 <f_read+0x148>
					cc = fs->csize - csect;
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	895b      	ldrh	r3, [r3, #10]
 80152ac:	461a      	mov	r2, r3
 80152ae:	69fb      	ldr	r3, [r7, #28]
 80152b0:	1ad3      	subs	r3, r2, r3
 80152b2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80152b4:	697b      	ldr	r3, [r7, #20]
 80152b6:	7858      	ldrb	r0, [r3, #1]
 80152b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ba:	69ba      	ldr	r2, [r7, #24]
 80152bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80152be:	f7fe f853 	bl	8013368 <disk_read>
 80152c2:	4603      	mov	r3, r0
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d004      	beq.n	80152d2 <f_read+0x166>
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	2201      	movs	r2, #1
 80152cc:	755a      	strb	r2, [r3, #21]
 80152ce:	2301      	movs	r3, #1
 80152d0:	e087      	b.n	80153e2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	7d1b      	ldrb	r3, [r3, #20]
 80152d6:	b25b      	sxtb	r3, r3
 80152d8:	2b00      	cmp	r3, #0
 80152da:	da14      	bge.n	8015306 <f_read+0x19a>
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	6a1a      	ldr	r2, [r3, #32]
 80152e0:	69bb      	ldr	r3, [r7, #24]
 80152e2:	1ad3      	subs	r3, r2, r3
 80152e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d90d      	bls.n	8015306 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	6a1a      	ldr	r2, [r3, #32]
 80152ee:	69bb      	ldr	r3, [r7, #24]
 80152f0:	1ad3      	subs	r3, r2, r3
 80152f2:	025b      	lsls	r3, r3, #9
 80152f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152f6:	18d0      	adds	r0, r2, r3
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	3330      	adds	r3, #48	; 0x30
 80152fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015300:	4619      	mov	r1, r3
 8015302:	f7fe f911 	bl	8013528 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8015306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015308:	025b      	lsls	r3, r3, #9
 801530a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801530c:	e050      	b.n	80153b0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	6a1b      	ldr	r3, [r3, #32]
 8015312:	69ba      	ldr	r2, [r7, #24]
 8015314:	429a      	cmp	r2, r3
 8015316:	d02e      	beq.n	8015376 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	7d1b      	ldrb	r3, [r3, #20]
 801531c:	b25b      	sxtb	r3, r3
 801531e:	2b00      	cmp	r3, #0
 8015320:	da18      	bge.n	8015354 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	7858      	ldrb	r0, [r3, #1]
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	6a1a      	ldr	r2, [r3, #32]
 8015330:	2301      	movs	r3, #1
 8015332:	f7fe f839 	bl	80133a8 <disk_write>
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d004      	beq.n	8015346 <f_read+0x1da>
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	2201      	movs	r2, #1
 8015340:	755a      	strb	r2, [r3, #21]
 8015342:	2301      	movs	r3, #1
 8015344:	e04d      	b.n	80153e2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	7d1b      	ldrb	r3, [r3, #20]
 801534a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801534e:	b2da      	uxtb	r2, r3
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015354:	697b      	ldr	r3, [r7, #20]
 8015356:	7858      	ldrb	r0, [r3, #1]
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801535e:	2301      	movs	r3, #1
 8015360:	69ba      	ldr	r2, [r7, #24]
 8015362:	f7fe f801 	bl	8013368 <disk_read>
 8015366:	4603      	mov	r3, r0
 8015368:	2b00      	cmp	r3, #0
 801536a:	d004      	beq.n	8015376 <f_read+0x20a>
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	2201      	movs	r2, #1
 8015370:	755a      	strb	r2, [r3, #21]
 8015372:	2301      	movs	r3, #1
 8015374:	e035      	b.n	80153e2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	69ba      	ldr	r2, [r7, #24]
 801537a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	699b      	ldr	r3, [r3, #24]
 8015380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015384:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8015388:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801538a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	429a      	cmp	r2, r3
 8015390:	d901      	bls.n	8015396 <f_read+0x22a>
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	699b      	ldr	r3, [r3, #24]
 80153a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153a4:	4413      	add	r3, r2
 80153a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80153a8:	4619      	mov	r1, r3
 80153aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80153ac:	f7fe f8bc 	bl	8013528 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80153b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153b4:	4413      	add	r3, r2
 80153b6:	627b      	str	r3, [r7, #36]	; 0x24
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	699a      	ldr	r2, [r3, #24]
 80153bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153be:	441a      	add	r2, r3
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	619a      	str	r2, [r3, #24]
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	681a      	ldr	r2, [r3, #0]
 80153c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ca:	441a      	add	r2, r3
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	601a      	str	r2, [r3, #0]
 80153d0:	687a      	ldr	r2, [r7, #4]
 80153d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153d4:	1ad3      	subs	r3, r2, r3
 80153d6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	f47f af01 	bne.w	80151e2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80153e0:	2300      	movs	r3, #0
}
 80153e2:	4618      	mov	r0, r3
 80153e4:	3738      	adds	r7, #56	; 0x38
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}

080153ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80153ea:	b580      	push	{r7, lr}
 80153ec:	b08c      	sub	sp, #48	; 0x30
 80153ee:	af00      	add	r7, sp, #0
 80153f0:	60f8      	str	r0, [r7, #12]
 80153f2:	60b9      	str	r1, [r7, #8]
 80153f4:	607a      	str	r2, [r7, #4]
 80153f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	2200      	movs	r2, #0
 8015400:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	f107 0210 	add.w	r2, r7, #16
 8015408:	4611      	mov	r1, r2
 801540a:	4618      	mov	r0, r3
 801540c:	f7ff fc74 	bl	8014cf8 <validate>
 8015410:	4603      	mov	r3, r0
 8015412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801541a:	2b00      	cmp	r3, #0
 801541c:	d107      	bne.n	801542e <f_write+0x44>
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	7d5b      	ldrb	r3, [r3, #21]
 8015422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801542a:	2b00      	cmp	r3, #0
 801542c:	d002      	beq.n	8015434 <f_write+0x4a>
 801542e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015432:	e14b      	b.n	80156cc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	7d1b      	ldrb	r3, [r3, #20]
 8015438:	f003 0302 	and.w	r3, r3, #2
 801543c:	2b00      	cmp	r3, #0
 801543e:	d101      	bne.n	8015444 <f_write+0x5a>
 8015440:	2307      	movs	r3, #7
 8015442:	e143      	b.n	80156cc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	699a      	ldr	r2, [r3, #24]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	441a      	add	r2, r3
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	699b      	ldr	r3, [r3, #24]
 8015450:	429a      	cmp	r2, r3
 8015452:	f080 812d 	bcs.w	80156b0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	699b      	ldr	r3, [r3, #24]
 801545a:	43db      	mvns	r3, r3
 801545c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801545e:	e127      	b.n	80156b0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	699b      	ldr	r3, [r3, #24]
 8015464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015468:	2b00      	cmp	r3, #0
 801546a:	f040 80e3 	bne.w	8015634 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	699b      	ldr	r3, [r3, #24]
 8015472:	0a5b      	lsrs	r3, r3, #9
 8015474:	693a      	ldr	r2, [r7, #16]
 8015476:	8952      	ldrh	r2, [r2, #10]
 8015478:	3a01      	subs	r2, #1
 801547a:	4013      	ands	r3, r2
 801547c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d143      	bne.n	801550c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	699b      	ldr	r3, [r3, #24]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d10c      	bne.n	80154a6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	689b      	ldr	r3, [r3, #8]
 8015490:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015494:	2b00      	cmp	r3, #0
 8015496:	d11a      	bne.n	80154ce <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	2100      	movs	r1, #0
 801549c:	4618      	mov	r0, r3
 801549e:	f7fe fd25 	bl	8013eec <create_chain>
 80154a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80154a4:	e013      	b.n	80154ce <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d007      	beq.n	80154be <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	699b      	ldr	r3, [r3, #24]
 80154b2:	4619      	mov	r1, r3
 80154b4:	68f8      	ldr	r0, [r7, #12]
 80154b6:	f7fe fdb1 	bl	801401c <clmt_clust>
 80154ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80154bc:	e007      	b.n	80154ce <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80154be:	68fa      	ldr	r2, [r7, #12]
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	69db      	ldr	r3, [r3, #28]
 80154c4:	4619      	mov	r1, r3
 80154c6:	4610      	mov	r0, r2
 80154c8:	f7fe fd10 	bl	8013eec <create_chain>
 80154cc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80154ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	f000 80f2 	beq.w	80156ba <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80154d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154d8:	2b01      	cmp	r3, #1
 80154da:	d104      	bne.n	80154e6 <f_write+0xfc>
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	2202      	movs	r2, #2
 80154e0:	755a      	strb	r2, [r3, #21]
 80154e2:	2302      	movs	r3, #2
 80154e4:	e0f2      	b.n	80156cc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80154e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80154ec:	d104      	bne.n	80154f8 <f_write+0x10e>
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	2201      	movs	r2, #1
 80154f2:	755a      	strb	r2, [r3, #21]
 80154f4:	2301      	movs	r3, #1
 80154f6:	e0e9      	b.n	80156cc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154fc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	689b      	ldr	r3, [r3, #8]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d102      	bne.n	801550c <f_write+0x122>
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801550a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	7d1b      	ldrb	r3, [r3, #20]
 8015510:	b25b      	sxtb	r3, r3
 8015512:	2b00      	cmp	r3, #0
 8015514:	da18      	bge.n	8015548 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	7858      	ldrb	r0, [r3, #1]
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	6a1a      	ldr	r2, [r3, #32]
 8015524:	2301      	movs	r3, #1
 8015526:	f7fd ff3f 	bl	80133a8 <disk_write>
 801552a:	4603      	mov	r3, r0
 801552c:	2b00      	cmp	r3, #0
 801552e:	d004      	beq.n	801553a <f_write+0x150>
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	2201      	movs	r2, #1
 8015534:	755a      	strb	r2, [r3, #21]
 8015536:	2301      	movs	r3, #1
 8015538:	e0c8      	b.n	80156cc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	7d1b      	ldrb	r3, [r3, #20]
 801553e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015542:	b2da      	uxtb	r2, r3
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015548:	693a      	ldr	r2, [r7, #16]
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	69db      	ldr	r3, [r3, #28]
 801554e:	4619      	mov	r1, r3
 8015550:	4610      	mov	r0, r2
 8015552:	f7fe fab3 	bl	8013abc <clust2sect>
 8015556:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d104      	bne.n	8015568 <f_write+0x17e>
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	2202      	movs	r2, #2
 8015562:	755a      	strb	r2, [r3, #21]
 8015564:	2302      	movs	r3, #2
 8015566:	e0b1      	b.n	80156cc <f_write+0x2e2>
			sect += csect;
 8015568:	697a      	ldr	r2, [r7, #20]
 801556a:	69bb      	ldr	r3, [r7, #24]
 801556c:	4413      	add	r3, r2
 801556e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	0a5b      	lsrs	r3, r3, #9
 8015574:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015576:	6a3b      	ldr	r3, [r7, #32]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d03c      	beq.n	80155f6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801557c:	69ba      	ldr	r2, [r7, #24]
 801557e:	6a3b      	ldr	r3, [r7, #32]
 8015580:	4413      	add	r3, r2
 8015582:	693a      	ldr	r2, [r7, #16]
 8015584:	8952      	ldrh	r2, [r2, #10]
 8015586:	4293      	cmp	r3, r2
 8015588:	d905      	bls.n	8015596 <f_write+0x1ac>
					cc = fs->csize - csect;
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	895b      	ldrh	r3, [r3, #10]
 801558e:	461a      	mov	r2, r3
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	1ad3      	subs	r3, r2, r3
 8015594:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015596:	693b      	ldr	r3, [r7, #16]
 8015598:	7858      	ldrb	r0, [r3, #1]
 801559a:	6a3b      	ldr	r3, [r7, #32]
 801559c:	697a      	ldr	r2, [r7, #20]
 801559e:	69f9      	ldr	r1, [r7, #28]
 80155a0:	f7fd ff02 	bl	80133a8 <disk_write>
 80155a4:	4603      	mov	r3, r0
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d004      	beq.n	80155b4 <f_write+0x1ca>
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	2201      	movs	r2, #1
 80155ae:	755a      	strb	r2, [r3, #21]
 80155b0:	2301      	movs	r3, #1
 80155b2:	e08b      	b.n	80156cc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	6a1a      	ldr	r2, [r3, #32]
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	1ad3      	subs	r3, r2, r3
 80155bc:	6a3a      	ldr	r2, [r7, #32]
 80155be:	429a      	cmp	r2, r3
 80155c0:	d915      	bls.n	80155ee <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	6a1a      	ldr	r2, [r3, #32]
 80155cc:	697b      	ldr	r3, [r7, #20]
 80155ce:	1ad3      	subs	r3, r2, r3
 80155d0:	025b      	lsls	r3, r3, #9
 80155d2:	69fa      	ldr	r2, [r7, #28]
 80155d4:	4413      	add	r3, r2
 80155d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80155da:	4619      	mov	r1, r3
 80155dc:	f7fd ffa4 	bl	8013528 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	7d1b      	ldrb	r3, [r3, #20]
 80155e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155e8:	b2da      	uxtb	r2, r3
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80155ee:	6a3b      	ldr	r3, [r7, #32]
 80155f0:	025b      	lsls	r3, r3, #9
 80155f2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80155f4:	e03f      	b.n	8015676 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	6a1b      	ldr	r3, [r3, #32]
 80155fa:	697a      	ldr	r2, [r7, #20]
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d016      	beq.n	801562e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	699a      	ldr	r2, [r3, #24]
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015608:	429a      	cmp	r2, r3
 801560a:	d210      	bcs.n	801562e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	7858      	ldrb	r0, [r3, #1]
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015616:	2301      	movs	r3, #1
 8015618:	697a      	ldr	r2, [r7, #20]
 801561a:	f7fd fea5 	bl	8013368 <disk_read>
 801561e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015620:	2b00      	cmp	r3, #0
 8015622:	d004      	beq.n	801562e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	2201      	movs	r2, #1
 8015628:	755a      	strb	r2, [r3, #21]
 801562a:	2301      	movs	r3, #1
 801562c:	e04e      	b.n	80156cc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	697a      	ldr	r2, [r7, #20]
 8015632:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	699b      	ldr	r3, [r3, #24]
 8015638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801563c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8015640:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	429a      	cmp	r2, r3
 8015648:	d901      	bls.n	801564e <f_write+0x264>
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	699b      	ldr	r3, [r3, #24]
 8015658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801565c:	4413      	add	r3, r2
 801565e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015660:	69f9      	ldr	r1, [r7, #28]
 8015662:	4618      	mov	r0, r3
 8015664:	f7fd ff60 	bl	8013528 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	7d1b      	ldrb	r3, [r3, #20]
 801566c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015670:	b2da      	uxtb	r2, r3
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015676:	69fa      	ldr	r2, [r7, #28]
 8015678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567a:	4413      	add	r3, r2
 801567c:	61fb      	str	r3, [r7, #28]
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	699a      	ldr	r2, [r3, #24]
 8015682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015684:	441a      	add	r2, r3
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	619a      	str	r2, [r3, #24]
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	68da      	ldr	r2, [r3, #12]
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	699b      	ldr	r3, [r3, #24]
 8015692:	429a      	cmp	r2, r3
 8015694:	bf38      	it	cc
 8015696:	461a      	movcc	r2, r3
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	60da      	str	r2, [r3, #12]
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	681a      	ldr	r2, [r3, #0]
 80156a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a2:	441a      	add	r2, r3
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	601a      	str	r2, [r3, #0]
 80156a8:	687a      	ldr	r2, [r7, #4]
 80156aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ac:	1ad3      	subs	r3, r2, r3
 80156ae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	f47f aed4 	bne.w	8015460 <f_write+0x76>
 80156b8:	e000      	b.n	80156bc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80156ba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	7d1b      	ldrb	r3, [r3, #20]
 80156c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156c4:	b2da      	uxtb	r2, r3
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80156ca:	2300      	movs	r3, #0
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	3730      	adds	r7, #48	; 0x30
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}

080156d4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b086      	sub	sp, #24
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f107 0208 	add.w	r2, r7, #8
 80156e2:	4611      	mov	r1, r2
 80156e4:	4618      	mov	r0, r3
 80156e6:	f7ff fb07 	bl	8014cf8 <validate>
 80156ea:	4603      	mov	r3, r0
 80156ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80156ee:	7dfb      	ldrb	r3, [r7, #23]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d168      	bne.n	80157c6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	7d1b      	ldrb	r3, [r3, #20]
 80156f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d062      	beq.n	80157c6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	7d1b      	ldrb	r3, [r3, #20]
 8015704:	b25b      	sxtb	r3, r3
 8015706:	2b00      	cmp	r3, #0
 8015708:	da15      	bge.n	8015736 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	7858      	ldrb	r0, [r3, #1]
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	6a1a      	ldr	r2, [r3, #32]
 8015718:	2301      	movs	r3, #1
 801571a:	f7fd fe45 	bl	80133a8 <disk_write>
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	d001      	beq.n	8015728 <f_sync+0x54>
 8015724:	2301      	movs	r3, #1
 8015726:	e04f      	b.n	80157c8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	7d1b      	ldrb	r3, [r3, #20]
 801572c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015730:	b2da      	uxtb	r2, r3
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015736:	f7fb ffb3 	bl	80116a0 <get_fattime>
 801573a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801573c:	68ba      	ldr	r2, [r7, #8]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015742:	4619      	mov	r1, r3
 8015744:	4610      	mov	r0, r2
 8015746:	f7fe f91d 	bl	8013984 <move_window>
 801574a:	4603      	mov	r3, r0
 801574c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801574e:	7dfb      	ldrb	r3, [r7, #23]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d138      	bne.n	80157c6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015758:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	330b      	adds	r3, #11
 801575e:	781a      	ldrb	r2, [r3, #0]
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	330b      	adds	r3, #11
 8015764:	f042 0220 	orr.w	r2, r2, #32
 8015768:	b2d2      	uxtb	r2, r2
 801576a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	6818      	ldr	r0, [r3, #0]
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	689b      	ldr	r3, [r3, #8]
 8015774:	461a      	mov	r2, r3
 8015776:	68f9      	ldr	r1, [r7, #12]
 8015778:	f7fe fe2a 	bl	80143d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	f103 021c 	add.w	r2, r3, #28
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	68db      	ldr	r3, [r3, #12]
 8015786:	4619      	mov	r1, r3
 8015788:	4610      	mov	r0, r2
 801578a:	f7fd fea1 	bl	80134d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	3316      	adds	r3, #22
 8015792:	6939      	ldr	r1, [r7, #16]
 8015794:	4618      	mov	r0, r3
 8015796:	f7fd fe9b 	bl	80134d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	3312      	adds	r3, #18
 801579e:	2100      	movs	r1, #0
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7fd fe7a 	bl	801349a <st_word>
					fs->wflag = 1;
 80157a6:	68bb      	ldr	r3, [r7, #8]
 80157a8:	2201      	movs	r2, #1
 80157aa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7fe f916 	bl	80139e0 <sync_fs>
 80157b4:	4603      	mov	r3, r0
 80157b6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	7d1b      	ldrb	r3, [r3, #20]
 80157bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80157c0:	b2da      	uxtb	r2, r3
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80157c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	3718      	adds	r7, #24
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}

080157d0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f7ff ff7b 	bl	80156d4 <f_sync>
 80157de:	4603      	mov	r3, r0
 80157e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80157e2:	7bfb      	ldrb	r3, [r7, #15]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d118      	bne.n	801581a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f107 0208 	add.w	r2, r7, #8
 80157ee:	4611      	mov	r1, r2
 80157f0:	4618      	mov	r0, r3
 80157f2:	f7ff fa81 	bl	8014cf8 <validate>
 80157f6:	4603      	mov	r3, r0
 80157f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80157fa:	7bfb      	ldrb	r3, [r7, #15]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d10c      	bne.n	801581a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	691b      	ldr	r3, [r3, #16]
 8015804:	4618      	mov	r0, r3
 8015806:	f7fe f819 	bl	801383c <dec_lock>
 801580a:	4603      	mov	r3, r0
 801580c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801580e:	7bfb      	ldrb	r3, [r7, #15]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d102      	bne.n	801581a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	2200      	movs	r2, #0
 8015818:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801581a:	7bfb      	ldrb	r3, [r7, #15]
}
 801581c:	4618      	mov	r0, r3
 801581e:	3710      	adds	r7, #16
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8015824:	b590      	push	{r4, r7, lr}
 8015826:	b09d      	sub	sp, #116	; 0x74
 8015828:	af00      	add	r7, sp, #0
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	607a      	str	r2, [r7, #4]
 801582e:	603b      	str	r3, [r7, #0]
 8015830:	460b      	mov	r3, r1
 8015832:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8015834:	2301      	movs	r3, #1
 8015836:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8015838:	f44f 7300 	mov.w	r3, #512	; 0x200
 801583c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 801583e:	f107 030c 	add.w	r3, r7, #12
 8015842:	4618      	mov	r0, r3
 8015844:	f7fe ff71 	bl	801472a <get_ldnumber>
 8015848:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801584a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801584c:	2b00      	cmp	r3, #0
 801584e:	da02      	bge.n	8015856 <f_mkfs+0x32>
 8015850:	230b      	movs	r3, #11
 8015852:	f000 bc0d 	b.w	8016070 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8015856:	4a94      	ldr	r2, [pc, #592]	; (8015aa8 <f_mkfs+0x284>)
 8015858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801585a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d005      	beq.n	801586e <f_mkfs+0x4a>
 8015862:	4a91      	ldr	r2, [pc, #580]	; (8015aa8 <f_mkfs+0x284>)
 8015864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801586a:	2200      	movs	r2, #0
 801586c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 801586e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015870:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8015874:	2300      	movs	r3, #0
 8015876:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 801587a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801587e:	4618      	mov	r0, r3
 8015880:	f7fd fd4c 	bl	801331c <disk_initialize>
 8015884:	4603      	mov	r3, r0
 8015886:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801588a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801588e:	f003 0301 	and.w	r3, r3, #1
 8015892:	2b00      	cmp	r3, #0
 8015894:	d001      	beq.n	801589a <f_mkfs+0x76>
 8015896:	2303      	movs	r3, #3
 8015898:	e3ea      	b.n	8016070 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 801589a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801589e:	f003 0304 	and.w	r3, r3, #4
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d001      	beq.n	80158aa <f_mkfs+0x86>
 80158a6:	230a      	movs	r3, #10
 80158a8:	e3e2      	b.n	8016070 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80158aa:	f107 0214 	add.w	r2, r7, #20
 80158ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80158b2:	2103      	movs	r1, #3
 80158b4:	4618      	mov	r0, r3
 80158b6:	f7fd fd97 	bl	80133e8 <disk_ioctl>
 80158ba:	4603      	mov	r3, r0
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d10c      	bne.n	80158da <f_mkfs+0xb6>
 80158c0:	697b      	ldr	r3, [r7, #20]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d009      	beq.n	80158da <f_mkfs+0xb6>
 80158c6:	697b      	ldr	r3, [r7, #20]
 80158c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80158cc:	d805      	bhi.n	80158da <f_mkfs+0xb6>
 80158ce:	697b      	ldr	r3, [r7, #20]
 80158d0:	1e5a      	subs	r2, r3, #1
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	4013      	ands	r3, r2
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d001      	beq.n	80158de <f_mkfs+0xba>
 80158da:	2301      	movs	r3, #1
 80158dc:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80158de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80158e2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d003      	beq.n	80158f2 <f_mkfs+0xce>
 80158ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80158ec:	687a      	ldr	r2, [r7, #4]
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d309      	bcc.n	8015906 <f_mkfs+0xe2>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80158f8:	d805      	bhi.n	8015906 <f_mkfs+0xe2>
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	1e5a      	subs	r2, r3, #1
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	4013      	ands	r3, r2
 8015902:	2b00      	cmp	r3, #0
 8015904:	d001      	beq.n	801590a <f_mkfs+0xe6>
 8015906:	2313      	movs	r3, #19
 8015908:	e3b2      	b.n	8016070 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 801590a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801590c:	687a      	ldr	r2, [r7, #4]
 801590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015912:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8015918:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801591a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015922:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8015924:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015928:	fb02 f303 	mul.w	r3, r2, r3
 801592c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 801592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015930:	2b00      	cmp	r3, #0
 8015932:	d101      	bne.n	8015938 <f_mkfs+0x114>
 8015934:	230e      	movs	r3, #14
 8015936:	e39b      	b.n	8016070 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8015938:	f107 0210 	add.w	r2, r7, #16
 801593c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015940:	2101      	movs	r1, #1
 8015942:	4618      	mov	r0, r3
 8015944:	f7fd fd50 	bl	80133e8 <disk_ioctl>
 8015948:	4603      	mov	r3, r0
 801594a:	2b00      	cmp	r3, #0
 801594c:	d001      	beq.n	8015952 <f_mkfs+0x12e>
 801594e:	2301      	movs	r3, #1
 8015950:	e38e      	b.n	8016070 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8015952:	7afb      	ldrb	r3, [r7, #11]
 8015954:	f003 0308 	and.w	r3, r3, #8
 8015958:	2b00      	cmp	r3, #0
 801595a:	d001      	beq.n	8015960 <f_mkfs+0x13c>
 801595c:	2300      	movs	r3, #0
 801595e:	e000      	b.n	8015962 <f_mkfs+0x13e>
 8015960:	233f      	movs	r3, #63	; 0x3f
 8015962:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8015964:	693b      	ldr	r3, [r7, #16]
 8015966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015968:	429a      	cmp	r2, r3
 801596a:	d901      	bls.n	8015970 <f_mkfs+0x14c>
 801596c:	230e      	movs	r3, #14
 801596e:	e37f      	b.n	8016070 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8015970:	693a      	ldr	r2, [r7, #16]
 8015972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015974:	1ad3      	subs	r3, r2, r3
 8015976:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8015978:	693b      	ldr	r3, [r7, #16]
 801597a:	2b7f      	cmp	r3, #127	; 0x7f
 801597c:	d801      	bhi.n	8015982 <f_mkfs+0x15e>
 801597e:	230e      	movs	r3, #14
 8015980:	e376      	b.n	8016070 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	2b80      	cmp	r3, #128	; 0x80
 8015986:	d901      	bls.n	801598c <f_mkfs+0x168>
 8015988:	2313      	movs	r3, #19
 801598a:	e371      	b.n	8016070 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 801598c:	7afb      	ldrb	r3, [r7, #11]
 801598e:	f003 0302 	and.w	r3, r3, #2
 8015992:	2b00      	cmp	r3, #0
 8015994:	d00d      	beq.n	80159b2 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8015996:	7afb      	ldrb	r3, [r7, #11]
 8015998:	f003 0307 	and.w	r3, r3, #7
 801599c:	2b02      	cmp	r3, #2
 801599e:	d004      	beq.n	80159aa <f_mkfs+0x186>
 80159a0:	7afb      	ldrb	r3, [r7, #11]
 80159a2:	f003 0301 	and.w	r3, r3, #1
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d103      	bne.n	80159b2 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80159aa:	2303      	movs	r3, #3
 80159ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80159b0:	e009      	b.n	80159c6 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80159b2:	7afb      	ldrb	r3, [r7, #11]
 80159b4:	f003 0301 	and.w	r3, r3, #1
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d101      	bne.n	80159c0 <f_mkfs+0x19c>
 80159bc:	2313      	movs	r3, #19
 80159be:	e357      	b.n	8016070 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80159c0:	2302      	movs	r3, #2
 80159c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80159ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80159ce:	2b03      	cmp	r3, #3
 80159d0:	d13c      	bne.n	8015a4c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80159d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d11b      	bne.n	8015a10 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80159d8:	693b      	ldr	r3, [r7, #16]
 80159da:	0c5b      	lsrs	r3, r3, #17
 80159dc:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80159de:	2300      	movs	r3, #0
 80159e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80159e2:	2301      	movs	r3, #1
 80159e4:	653b      	str	r3, [r7, #80]	; 0x50
 80159e6:	e005      	b.n	80159f4 <f_mkfs+0x1d0>
 80159e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80159ea:	3301      	adds	r3, #1
 80159ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80159ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159f0:	005b      	lsls	r3, r3, #1
 80159f2:	653b      	str	r3, [r7, #80]	; 0x50
 80159f4:	4a2d      	ldr	r2, [pc, #180]	; (8015aac <f_mkfs+0x288>)
 80159f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80159f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d007      	beq.n	8015a10 <f_mkfs+0x1ec>
 8015a00:	4a2a      	ldr	r2, [pc, #168]	; (8015aac <f_mkfs+0x288>)
 8015a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015a08:	461a      	mov	r2, r3
 8015a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a0c:	4293      	cmp	r3, r2
 8015a0e:	d2eb      	bcs.n	80159e8 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8015a10:	693a      	ldr	r2, [r7, #16]
 8015a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a18:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8015a1a:	6a3b      	ldr	r3, [r7, #32]
 8015a1c:	3302      	adds	r3, #2
 8015a1e:	009a      	lsls	r2, r3, #2
 8015a20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015a22:	4413      	add	r3, r2
 8015a24:	1e5a      	subs	r2, r3, #1
 8015a26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a2c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8015a2e:	2320      	movs	r3, #32
 8015a30:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8015a32:	2300      	movs	r3, #0
 8015a34:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8015a36:	6a3b      	ldr	r3, [r7, #32]
 8015a38:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015a3c:	4293      	cmp	r3, r2
 8015a3e:	d903      	bls.n	8015a48 <f_mkfs+0x224>
 8015a40:	6a3b      	ldr	r3, [r7, #32]
 8015a42:	4a1b      	ldr	r2, [pc, #108]	; (8015ab0 <f_mkfs+0x28c>)
 8015a44:	4293      	cmp	r3, r2
 8015a46:	d952      	bls.n	8015aee <f_mkfs+0x2ca>
 8015a48:	230e      	movs	r3, #14
 8015a4a:	e311      	b.n	8016070 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8015a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d11b      	bne.n	8015a8a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8015a52:	693b      	ldr	r3, [r7, #16]
 8015a54:	0b1b      	lsrs	r3, r3, #12
 8015a56:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8015a58:	2300      	movs	r3, #0
 8015a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8015a60:	e005      	b.n	8015a6e <f_mkfs+0x24a>
 8015a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a64:	3301      	adds	r3, #1
 8015a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8015a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a6a:	005b      	lsls	r3, r3, #1
 8015a6c:	653b      	str	r3, [r7, #80]	; 0x50
 8015a6e:	4a11      	ldr	r2, [pc, #68]	; (8015ab4 <f_mkfs+0x290>)
 8015a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d007      	beq.n	8015a8a <f_mkfs+0x266>
 8015a7a:	4a0e      	ldr	r2, [pc, #56]	; (8015ab4 <f_mkfs+0x290>)
 8015a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015a82:	461a      	mov	r2, r3
 8015a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a86:	4293      	cmp	r3, r2
 8015a88:	d2eb      	bcs.n	8015a62 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8015a8a:	693a      	ldr	r2, [r7, #16]
 8015a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a92:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8015a94:	6a3b      	ldr	r3, [r7, #32]
 8015a96:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015a9a:	4293      	cmp	r3, r2
 8015a9c:	d90c      	bls.n	8015ab8 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8015a9e:	6a3b      	ldr	r3, [r7, #32]
 8015aa0:	3302      	adds	r3, #2
 8015aa2:	005b      	lsls	r3, r3, #1
 8015aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015aa6:	e012      	b.n	8015ace <f_mkfs+0x2aa>
 8015aa8:	20001330 	.word	0x20001330
 8015aac:	0801a090 	.word	0x0801a090
 8015ab0:	0ffffff5 	.word	0x0ffffff5
 8015ab4:	0801a0a0 	.word	0x0801a0a0
				} else {
					fmt = FS_FAT12;
 8015ab8:	2301      	movs	r3, #1
 8015aba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8015abe:	6a3a      	ldr	r2, [r7, #32]
 8015ac0:	4613      	mov	r3, r2
 8015ac2:	005b      	lsls	r3, r3, #1
 8015ac4:	4413      	add	r3, r2
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	085b      	lsrs	r3, r3, #1
 8015aca:	3303      	adds	r3, #3
 8015acc:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8015ace:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ad2:	4413      	add	r3, r2
 8015ad4:	1e5a      	subs	r2, r3, #1
 8015ad6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8015adc:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8015ade:	2301      	movs	r3, #1
 8015ae0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8015ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ae4:	015a      	lsls	r2, r3, #5
 8015ae6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8015aec:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8015aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015af2:	4413      	add	r3, r2
 8015af4:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8015af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015afa:	fb03 f202 	mul.w	r2, r3, r2
 8015afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b00:	4413      	add	r3, r2
 8015b02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015b04:	4413      	add	r3, r2
 8015b06:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8015b08:	697a      	ldr	r2, [r7, #20]
 8015b0a:	69fb      	ldr	r3, [r7, #28]
 8015b0c:	4413      	add	r3, r2
 8015b0e:	1e5a      	subs	r2, r3, #1
 8015b10:	697b      	ldr	r3, [r7, #20]
 8015b12:	425b      	negs	r3, r3
 8015b14:	401a      	ands	r2, r3
 8015b16:	69fb      	ldr	r3, [r7, #28]
 8015b18:	1ad3      	subs	r3, r2, r3
 8015b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8015b1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b20:	2b03      	cmp	r3, #3
 8015b22:	d108      	bne.n	8015b36 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8015b24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b28:	4413      	add	r3, r2
 8015b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8015b2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b30:	4413      	add	r3, r2
 8015b32:	65bb      	str	r3, [r7, #88]	; 0x58
 8015b34:	e006      	b.n	8015b44 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8015b36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015b40:	4413      	add	r3, r2
 8015b42:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8015b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b46:	011a      	lsls	r2, r3, #4
 8015b48:	69fb      	ldr	r3, [r7, #28]
 8015b4a:	441a      	add	r2, r3
 8015b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b4e:	1ad2      	subs	r2, r2, r3
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	429a      	cmp	r2, r3
 8015b54:	d901      	bls.n	8015b5a <f_mkfs+0x336>
 8015b56:	230e      	movs	r3, #14
 8015b58:	e28a      	b.n	8016070 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8015b5a:	693a      	ldr	r2, [r7, #16]
 8015b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b5e:	1ad2      	subs	r2, r2, r3
 8015b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015b64:	fb01 f303 	mul.w	r3, r1, r3
 8015b68:	1ad2      	subs	r2, r2, r3
 8015b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b6c:	1ad2      	subs	r2, r2, r3
 8015b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b74:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8015b76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015b7a:	2b03      	cmp	r3, #3
 8015b7c:	d10f      	bne.n	8015b9e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8015b7e:	6a3b      	ldr	r3, [r7, #32]
 8015b80:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015b84:	4293      	cmp	r3, r2
 8015b86:	d80a      	bhi.n	8015b9e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d105      	bne.n	8015b9a <f_mkfs+0x376>
 8015b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b90:	085b      	lsrs	r3, r3, #1
 8015b92:	607b      	str	r3, [r7, #4]
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d144      	bne.n	8015c24 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8015b9a:	230e      	movs	r3, #14
 8015b9c:	e268      	b.n	8016070 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8015b9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015ba2:	2b02      	cmp	r3, #2
 8015ba4:	d133      	bne.n	8015c0e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8015ba6:	6a3b      	ldr	r3, [r7, #32]
 8015ba8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015bac:	4293      	cmp	r3, r2
 8015bae:	d91e      	bls.n	8015bee <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d107      	bne.n	8015bc6 <f_mkfs+0x3a2>
 8015bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bb8:	005b      	lsls	r3, r3, #1
 8015bba:	2b40      	cmp	r3, #64	; 0x40
 8015bbc:	d803      	bhi.n	8015bc6 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8015bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bc0:	005b      	lsls	r3, r3, #1
 8015bc2:	607b      	str	r3, [r7, #4]
 8015bc4:	e033      	b.n	8015c2e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8015bc6:	7afb      	ldrb	r3, [r7, #11]
 8015bc8:	f003 0302 	and.w	r3, r3, #2
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d003      	beq.n	8015bd8 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8015bd0:	2303      	movs	r3, #3
 8015bd2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015bd6:	e02a      	b.n	8015c2e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d105      	bne.n	8015bea <f_mkfs+0x3c6>
 8015bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015be0:	005b      	lsls	r3, r3, #1
 8015be2:	607b      	str	r3, [r7, #4]
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	2b80      	cmp	r3, #128	; 0x80
 8015be8:	d91e      	bls.n	8015c28 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8015bea:	230e      	movs	r3, #14
 8015bec:	e240      	b.n	8016070 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8015bee:	6a3b      	ldr	r3, [r7, #32]
 8015bf0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015bf4:	4293      	cmp	r3, r2
 8015bf6:	d80a      	bhi.n	8015c0e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d105      	bne.n	8015c0a <f_mkfs+0x3e6>
 8015bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c00:	005b      	lsls	r3, r3, #1
 8015c02:	607b      	str	r3, [r7, #4]
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2b80      	cmp	r3, #128	; 0x80
 8015c08:	d910      	bls.n	8015c2c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8015c0a:	230e      	movs	r3, #14
 8015c0c:	e230      	b.n	8016070 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8015c0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d10c      	bne.n	8015c30 <f_mkfs+0x40c>
 8015c16:	6a3b      	ldr	r3, [r7, #32]
 8015c18:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015c1c:	4293      	cmp	r3, r2
 8015c1e:	d907      	bls.n	8015c30 <f_mkfs+0x40c>
 8015c20:	230e      	movs	r3, #14
 8015c22:	e225      	b.n	8016070 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015c24:	bf00      	nop
 8015c26:	e6ce      	b.n	80159c6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015c28:	bf00      	nop
 8015c2a:	e6cc      	b.n	80159c6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015c2c:	bf00      	nop
			pau = au;
 8015c2e:	e6ca      	b.n	80159c6 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8015c30:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8015c32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015c34:	461a      	mov	r2, r3
 8015c36:	2100      	movs	r1, #0
 8015c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c3a:	f7fd fc96 	bl	801356a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8015c3e:	220b      	movs	r2, #11
 8015c40:	49b2      	ldr	r1, [pc, #712]	; (8015f0c <f_mkfs+0x6e8>)
 8015c42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c44:	f7fd fc70 	bl	8013528 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8015c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c4a:	330b      	adds	r3, #11
 8015c4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015c4e:	4611      	mov	r1, r2
 8015c50:	4618      	mov	r0, r3
 8015c52:	f7fd fc22 	bl	801349a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8015c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c58:	330d      	adds	r3, #13
 8015c5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015c5c:	b2d2      	uxtb	r2, r2
 8015c5e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8015c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c62:	330e      	adds	r3, #14
 8015c64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015c66:	b292      	uxth	r2, r2
 8015c68:	4611      	mov	r1, r2
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	f7fd fc15 	bl	801349a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8015c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c72:	3310      	adds	r3, #16
 8015c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c76:	b2d2      	uxtb	r2, r2
 8015c78:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8015c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c7c:	f103 0211 	add.w	r2, r3, #17
 8015c80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015c84:	2b03      	cmp	r3, #3
 8015c86:	d002      	beq.n	8015c8e <f_mkfs+0x46a>
 8015c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c8a:	b29b      	uxth	r3, r3
 8015c8c:	e000      	b.n	8015c90 <f_mkfs+0x46c>
 8015c8e:	2300      	movs	r3, #0
 8015c90:	4619      	mov	r1, r3
 8015c92:	4610      	mov	r0, r2
 8015c94:	f7fd fc01 	bl	801349a <st_word>
		if (sz_vol < 0x10000) {
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c9e:	d208      	bcs.n	8015cb2 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8015ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca2:	3313      	adds	r3, #19
 8015ca4:	693a      	ldr	r2, [r7, #16]
 8015ca6:	b292      	uxth	r2, r2
 8015ca8:	4611      	mov	r1, r2
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7fd fbf5 	bl	801349a <st_word>
 8015cb0:	e006      	b.n	8015cc0 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8015cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb4:	3320      	adds	r3, #32
 8015cb6:	693a      	ldr	r2, [r7, #16]
 8015cb8:	4611      	mov	r1, r2
 8015cba:	4618      	mov	r0, r3
 8015cbc:	f7fd fc08 	bl	80134d0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8015cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cc2:	3315      	adds	r3, #21
 8015cc4:	22f8      	movs	r2, #248	; 0xf8
 8015cc6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8015cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cca:	3318      	adds	r3, #24
 8015ccc:	213f      	movs	r1, #63	; 0x3f
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f7fd fbe3 	bl	801349a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8015cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cd6:	331a      	adds	r3, #26
 8015cd8:	21ff      	movs	r1, #255	; 0xff
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f7fd fbdd 	bl	801349a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8015ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce2:	331c      	adds	r3, #28
 8015ce4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f7fd fbf2 	bl	80134d0 <st_dword>
		if (fmt == FS_FAT32) {
 8015cec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015cf0:	2b03      	cmp	r3, #3
 8015cf2:	d131      	bne.n	8015d58 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8015cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8015cfa:	f7fb fcd1 	bl	80116a0 <get_fattime>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	4619      	mov	r1, r3
 8015d02:	4620      	mov	r0, r4
 8015d04:	f7fd fbe4 	bl	80134d0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8015d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d0a:	3324      	adds	r3, #36	; 0x24
 8015d0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f7fd fbde 	bl	80134d0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8015d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d16:	332c      	adds	r3, #44	; 0x2c
 8015d18:	2102      	movs	r1, #2
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7fd fbd8 	bl	80134d0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8015d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d22:	3330      	adds	r3, #48	; 0x30
 8015d24:	2101      	movs	r1, #1
 8015d26:	4618      	mov	r0, r3
 8015d28:	f7fd fbb7 	bl	801349a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8015d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d2e:	3332      	adds	r3, #50	; 0x32
 8015d30:	2106      	movs	r1, #6
 8015d32:	4618      	mov	r0, r3
 8015d34:	f7fd fbb1 	bl	801349a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8015d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d3a:	3340      	adds	r3, #64	; 0x40
 8015d3c:	2280      	movs	r2, #128	; 0x80
 8015d3e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8015d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d42:	3342      	adds	r3, #66	; 0x42
 8015d44:	2229      	movs	r2, #41	; 0x29
 8015d46:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8015d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d4a:	3347      	adds	r3, #71	; 0x47
 8015d4c:	2213      	movs	r2, #19
 8015d4e:	4970      	ldr	r1, [pc, #448]	; (8015f10 <f_mkfs+0x6ec>)
 8015d50:	4618      	mov	r0, r3
 8015d52:	f7fd fbe9 	bl	8013528 <mem_cpy>
 8015d56:	e020      	b.n	8015d9a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8015d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8015d5e:	f7fb fc9f 	bl	80116a0 <get_fattime>
 8015d62:	4603      	mov	r3, r0
 8015d64:	4619      	mov	r1, r3
 8015d66:	4620      	mov	r0, r4
 8015d68:	f7fd fbb2 	bl	80134d0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8015d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d6e:	3316      	adds	r3, #22
 8015d70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015d72:	b292      	uxth	r2, r2
 8015d74:	4611      	mov	r1, r2
 8015d76:	4618      	mov	r0, r3
 8015d78:	f7fd fb8f 	bl	801349a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8015d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d7e:	3324      	adds	r3, #36	; 0x24
 8015d80:	2280      	movs	r2, #128	; 0x80
 8015d82:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8015d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d86:	3326      	adds	r3, #38	; 0x26
 8015d88:	2229      	movs	r2, #41	; 0x29
 8015d8a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8015d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d8e:	332b      	adds	r3, #43	; 0x2b
 8015d90:	2213      	movs	r2, #19
 8015d92:	4960      	ldr	r1, [pc, #384]	; (8015f14 <f_mkfs+0x6f0>)
 8015d94:	4618      	mov	r0, r3
 8015d96:	f7fd fbc7 	bl	8013528 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8015d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015da0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7fd fb78 	bl	801349a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8015daa:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015dae:	2301      	movs	r3, #1
 8015db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015db2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015db4:	f7fd faf8 	bl	80133a8 <disk_write>
 8015db8:	4603      	mov	r3, r0
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d001      	beq.n	8015dc2 <f_mkfs+0x59e>
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	e156      	b.n	8016070 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8015dc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015dc6:	2b03      	cmp	r3, #3
 8015dc8:	d140      	bne.n	8015e4c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8015dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dcc:	1d9a      	adds	r2, r3, #6
 8015dce:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015dd6:	f7fd fae7 	bl	80133a8 <disk_write>
			mem_set(buf, 0, ss);
 8015dda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ddc:	461a      	mov	r2, r3
 8015dde:	2100      	movs	r1, #0
 8015de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015de2:	f7fd fbc2 	bl	801356a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8015de6:	494c      	ldr	r1, [pc, #304]	; (8015f18 <f_mkfs+0x6f4>)
 8015de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dea:	f7fd fb71 	bl	80134d0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8015dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015df4:	4949      	ldr	r1, [pc, #292]	; (8015f1c <f_mkfs+0x6f8>)
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7fd fb6a 	bl	80134d0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8015dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015e02:	6a3b      	ldr	r3, [r7, #32]
 8015e04:	3b01      	subs	r3, #1
 8015e06:	4619      	mov	r1, r3
 8015e08:	4610      	mov	r0, r2
 8015e0a:	f7fd fb61 	bl	80134d0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8015e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e10:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015e14:	2102      	movs	r1, #2
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7fd fb5a 	bl	80134d0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8015e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015e22:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015e26:	4618      	mov	r0, r3
 8015e28:	f7fd fb37 	bl	801349a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e2e:	1dda      	adds	r2, r3, #7
 8015e30:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015e34:	2301      	movs	r3, #1
 8015e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015e38:	f7fd fab6 	bl	80133a8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8015e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e3e:	1c5a      	adds	r2, r3, #1
 8015e40:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015e44:	2301      	movs	r3, #1
 8015e46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015e48:	f7fd faae 	bl	80133a8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8015e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e4e:	2100      	movs	r1, #0
 8015e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e52:	f7fd fb8a 	bl	801356a <mem_set>
		sect = b_fat;		/* FAT start sector */
 8015e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015e58:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8015e5e:	e04b      	b.n	8015ef8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8015e60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015e64:	2b03      	cmp	r3, #3
 8015e66:	d113      	bne.n	8015e90 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8015e68:	f06f 0107 	mvn.w	r1, #7
 8015e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e6e:	f7fd fb2f 	bl	80134d0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8015e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e74:	3304      	adds	r3, #4
 8015e76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7fd fb28 	bl	80134d0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8015e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e82:	3308      	adds	r3, #8
 8015e84:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f7fd fb21 	bl	80134d0 <st_dword>
 8015e8e:	e00b      	b.n	8015ea8 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8015e90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015e94:	2b01      	cmp	r3, #1
 8015e96:	d101      	bne.n	8015e9c <f_mkfs+0x678>
 8015e98:	4b21      	ldr	r3, [pc, #132]	; (8015f20 <f_mkfs+0x6fc>)
 8015e9a:	e001      	b.n	8015ea0 <f_mkfs+0x67c>
 8015e9c:	f06f 0307 	mvn.w	r3, #7
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ea4:	f7fd fb14 	bl	80134d0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8015ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015eaa:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8015eac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb0:	4293      	cmp	r3, r2
 8015eb2:	bf28      	it	cs
 8015eb4:	4613      	movcs	r3, r2
 8015eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8015eb8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ebe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015ec2:	f7fd fa71 	bl	80133a8 <disk_write>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d001      	beq.n	8015ed0 <f_mkfs+0x6ac>
 8015ecc:	2301      	movs	r3, #1
 8015ece:	e0cf      	b.n	8016070 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8015ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ed2:	461a      	mov	r2, r3
 8015ed4:	2100      	movs	r1, #0
 8015ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ed8:	f7fd fb47 	bl	801356a <mem_set>
				sect += n; nsect -= n;
 8015edc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ee0:	4413      	add	r3, r2
 8015ee2:	667b      	str	r3, [r7, #100]	; 0x64
 8015ee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ee8:	1ad3      	subs	r3, r2, r3
 8015eea:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8015eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d1dc      	bne.n	8015eac <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8015ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ef4:	3301      	adds	r3, #1
 8015ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8015ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015efc:	429a      	cmp	r2, r3
 8015efe:	d3af      	bcc.n	8015e60 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8015f00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015f04:	2b03      	cmp	r3, #3
 8015f06:	d10d      	bne.n	8015f24 <f_mkfs+0x700>
 8015f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f0a:	e00c      	b.n	8015f26 <f_mkfs+0x702>
 8015f0c:	08019f10 	.word	0x08019f10
 8015f10:	08019f1c 	.word	0x08019f1c
 8015f14:	08019f30 	.word	0x08019f30
 8015f18:	41615252 	.word	0x41615252
 8015f1c:	61417272 	.word	0x61417272
 8015f20:	00fffff8 	.word	0x00fffff8
 8015f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f26:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8015f28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f2c:	4293      	cmp	r3, r2
 8015f2e:	bf28      	it	cs
 8015f30:	4613      	movcs	r3, r2
 8015f32:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8015f34:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f3e:	f7fd fa33 	bl	80133a8 <disk_write>
 8015f42:	4603      	mov	r3, r0
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d001      	beq.n	8015f4c <f_mkfs+0x728>
 8015f48:	2301      	movs	r3, #1
 8015f4a:	e091      	b.n	8016070 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8015f4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f50:	4413      	add	r3, r2
 8015f52:	667b      	str	r3, [r7, #100]	; 0x64
 8015f54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f58:	1ad3      	subs	r3, r2, r3
 8015f5a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8015f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d1e2      	bne.n	8015f28 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8015f62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015f66:	2b03      	cmp	r3, #3
 8015f68:	d103      	bne.n	8015f72 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8015f6a:	230c      	movs	r3, #12
 8015f6c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8015f70:	e010      	b.n	8015f94 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8015f72:	693b      	ldr	r3, [r7, #16]
 8015f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015f78:	d303      	bcc.n	8015f82 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8015f7a:	2306      	movs	r3, #6
 8015f7c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8015f80:	e008      	b.n	8015f94 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8015f82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015f86:	2b02      	cmp	r3, #2
 8015f88:	d101      	bne.n	8015f8e <f_mkfs+0x76a>
 8015f8a:	2304      	movs	r3, #4
 8015f8c:	e000      	b.n	8015f90 <f_mkfs+0x76c>
 8015f8e:	2301      	movs	r3, #1
 8015f90:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8015f94:	7afb      	ldrb	r3, [r7, #11]
 8015f96:	f003 0308 	and.w	r3, r3, #8
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d15b      	bne.n	8016056 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8015f9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015fa0:	461a      	mov	r2, r3
 8015fa2:	2100      	movs	r1, #0
 8015fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fa6:	f7fd fae0 	bl	801356a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8015faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015fb0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f7fd fa70 	bl	801349a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8015fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fbc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8015fc0:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8015fc2:	69bb      	ldr	r3, [r7, #24]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8015fc8:	69bb      	ldr	r3, [r7, #24]
 8015fca:	3301      	adds	r3, #1
 8015fcc:	2201      	movs	r2, #1
 8015fce:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8015fd0:	69bb      	ldr	r3, [r7, #24]
 8015fd2:	3302      	adds	r3, #2
 8015fd4:	2201      	movs	r2, #1
 8015fd6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8015fd8:	69bb      	ldr	r3, [r7, #24]
 8015fda:	3303      	adds	r3, #3
 8015fdc:	2200      	movs	r2, #0
 8015fde:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8015fe0:	69bb      	ldr	r3, [r7, #24]
 8015fe2:	3304      	adds	r3, #4
 8015fe4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8015fe8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8015fea:	693a      	ldr	r2, [r7, #16]
 8015fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fee:	441a      	add	r2, r3
 8015ff0:	4b21      	ldr	r3, [pc, #132]	; (8016078 <f_mkfs+0x854>)
 8015ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8015ff6:	1ad2      	subs	r2, r2, r3
 8015ff8:	0852      	lsrs	r2, r2, #1
 8015ffa:	4413      	add	r3, r2
 8015ffc:	0b5b      	lsrs	r3, r3, #13
 8015ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8016000:	69bb      	ldr	r3, [r7, #24]
 8016002:	3305      	adds	r3, #5
 8016004:	22fe      	movs	r2, #254	; 0xfe
 8016006:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8016008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801600a:	089b      	lsrs	r3, r3, #2
 801600c:	b2da      	uxtb	r2, r3
 801600e:	69bb      	ldr	r3, [r7, #24]
 8016010:	3306      	adds	r3, #6
 8016012:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8016016:	b2d2      	uxtb	r2, r2
 8016018:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 801601a:	69bb      	ldr	r3, [r7, #24]
 801601c:	3307      	adds	r3, #7
 801601e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016020:	b2d2      	uxtb	r2, r2
 8016022:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8016024:	69bb      	ldr	r3, [r7, #24]
 8016026:	3308      	adds	r3, #8
 8016028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801602a:	4618      	mov	r0, r3
 801602c:	f7fd fa50 	bl	80134d0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8016030:	69bb      	ldr	r3, [r7, #24]
 8016032:	330c      	adds	r3, #12
 8016034:	693a      	ldr	r2, [r7, #16]
 8016036:	4611      	mov	r1, r2
 8016038:	4618      	mov	r0, r3
 801603a:	f7fd fa49 	bl	80134d0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801603e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8016042:	2301      	movs	r3, #1
 8016044:	2200      	movs	r2, #0
 8016046:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016048:	f7fd f9ae 	bl	80133a8 <disk_write>
 801604c:	4603      	mov	r3, r0
 801604e:	2b00      	cmp	r3, #0
 8016050:	d001      	beq.n	8016056 <f_mkfs+0x832>
 8016052:	2301      	movs	r3, #1
 8016054:	e00c      	b.n	8016070 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8016056:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801605a:	2200      	movs	r2, #0
 801605c:	2100      	movs	r1, #0
 801605e:	4618      	mov	r0, r3
 8016060:	f7fd f9c2 	bl	80133e8 <disk_ioctl>
 8016064:	4603      	mov	r3, r0
 8016066:	2b00      	cmp	r3, #0
 8016068:	d001      	beq.n	801606e <f_mkfs+0x84a>
 801606a:	2301      	movs	r3, #1
 801606c:	e000      	b.n	8016070 <f_mkfs+0x84c>

	return FR_OK;
 801606e:	2300      	movs	r3, #0
}
 8016070:	4618      	mov	r0, r3
 8016072:	3774      	adds	r7, #116	; 0x74
 8016074:	46bd      	mov	sp, r7
 8016076:	bd90      	pop	{r4, r7, pc}
 8016078:	0515565b 	.word	0x0515565b

0801607c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801607c:	b480      	push	{r7}
 801607e:	b087      	sub	sp, #28
 8016080:	af00      	add	r7, sp, #0
 8016082:	60f8      	str	r0, [r7, #12]
 8016084:	60b9      	str	r1, [r7, #8]
 8016086:	4613      	mov	r3, r2
 8016088:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801608a:	2301      	movs	r3, #1
 801608c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801608e:	2300      	movs	r3, #0
 8016090:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016092:	4b1f      	ldr	r3, [pc, #124]	; (8016110 <FATFS_LinkDriverEx+0x94>)
 8016094:	7a5b      	ldrb	r3, [r3, #9]
 8016096:	b2db      	uxtb	r3, r3
 8016098:	2b00      	cmp	r3, #0
 801609a:	d131      	bne.n	8016100 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801609c:	4b1c      	ldr	r3, [pc, #112]	; (8016110 <FATFS_LinkDriverEx+0x94>)
 801609e:	7a5b      	ldrb	r3, [r3, #9]
 80160a0:	b2db      	uxtb	r3, r3
 80160a2:	461a      	mov	r2, r3
 80160a4:	4b1a      	ldr	r3, [pc, #104]	; (8016110 <FATFS_LinkDriverEx+0x94>)
 80160a6:	2100      	movs	r1, #0
 80160a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80160aa:	4b19      	ldr	r3, [pc, #100]	; (8016110 <FATFS_LinkDriverEx+0x94>)
 80160ac:	7a5b      	ldrb	r3, [r3, #9]
 80160ae:	b2db      	uxtb	r3, r3
 80160b0:	4a17      	ldr	r2, [pc, #92]	; (8016110 <FATFS_LinkDriverEx+0x94>)
 80160b2:	009b      	lsls	r3, r3, #2
 80160b4:	4413      	add	r3, r2
 80160b6:	68fa      	ldr	r2, [r7, #12]
 80160b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80160ba:	4b15      	ldr	r3, [pc, #84]	; (8016110 <FATFS_LinkDriverEx+0x94>)
 80160bc:	7a5b      	ldrb	r3, [r3, #9]
 80160be:	b2db      	uxtb	r3, r3
 80160c0:	461a      	mov	r2, r3
 80160c2:	4b13      	ldr	r3, [pc, #76]	; (8016110 <FATFS_LinkDriverEx+0x94>)
 80160c4:	4413      	add	r3, r2
 80160c6:	79fa      	ldrb	r2, [r7, #7]
 80160c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80160ca:	4b11      	ldr	r3, [pc, #68]	; (8016110 <FATFS_LinkDriverEx+0x94>)
 80160cc:	7a5b      	ldrb	r3, [r3, #9]
 80160ce:	b2db      	uxtb	r3, r3
 80160d0:	1c5a      	adds	r2, r3, #1
 80160d2:	b2d1      	uxtb	r1, r2
 80160d4:	4a0e      	ldr	r2, [pc, #56]	; (8016110 <FATFS_LinkDriverEx+0x94>)
 80160d6:	7251      	strb	r1, [r2, #9]
 80160d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80160da:	7dbb      	ldrb	r3, [r7, #22]
 80160dc:	3330      	adds	r3, #48	; 0x30
 80160de:	b2da      	uxtb	r2, r3
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80160e4:	68bb      	ldr	r3, [r7, #8]
 80160e6:	3301      	adds	r3, #1
 80160e8:	223a      	movs	r2, #58	; 0x3a
 80160ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80160ec:	68bb      	ldr	r3, [r7, #8]
 80160ee:	3302      	adds	r3, #2
 80160f0:	222f      	movs	r2, #47	; 0x2f
 80160f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	3303      	adds	r3, #3
 80160f8:	2200      	movs	r2, #0
 80160fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80160fc:	2300      	movs	r3, #0
 80160fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016100:	7dfb      	ldrb	r3, [r7, #23]
}
 8016102:	4618      	mov	r0, r3
 8016104:	371c      	adds	r7, #28
 8016106:	46bd      	mov	sp, r7
 8016108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610c:	4770      	bx	lr
 801610e:	bf00      	nop
 8016110:	20001358 	.word	0x20001358

08016114 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b082      	sub	sp, #8
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801611e:	2200      	movs	r2, #0
 8016120:	6839      	ldr	r1, [r7, #0]
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f7ff ffaa 	bl	801607c <FATFS_LinkDriverEx>
 8016128:	4603      	mov	r3, r0
}
 801612a:	4618      	mov	r0, r3
 801612c:	3708      	adds	r7, #8
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
	...

08016134 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016134:	b580      	push	{r7, lr}
 8016136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016138:	2200      	movs	r2, #0
 801613a:	4912      	ldr	r1, [pc, #72]	; (8016184 <MX_USB_DEVICE_Init+0x50>)
 801613c:	4812      	ldr	r0, [pc, #72]	; (8016188 <MX_USB_DEVICE_Init+0x54>)
 801613e:	f7fb ff69 	bl	8012014 <USBD_Init>
 8016142:	4603      	mov	r3, r0
 8016144:	2b00      	cmp	r3, #0
 8016146:	d001      	beq.n	801614c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016148:	f7ed fdf6 	bl	8003d38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801614c:	490f      	ldr	r1, [pc, #60]	; (801618c <MX_USB_DEVICE_Init+0x58>)
 801614e:	480e      	ldr	r0, [pc, #56]	; (8016188 <MX_USB_DEVICE_Init+0x54>)
 8016150:	f7fb ff90 	bl	8012074 <USBD_RegisterClass>
 8016154:	4603      	mov	r3, r0
 8016156:	2b00      	cmp	r3, #0
 8016158:	d001      	beq.n	801615e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801615a:	f7ed fded 	bl	8003d38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801615e:	490c      	ldr	r1, [pc, #48]	; (8016190 <MX_USB_DEVICE_Init+0x5c>)
 8016160:	4809      	ldr	r0, [pc, #36]	; (8016188 <MX_USB_DEVICE_Init+0x54>)
 8016162:	f7fb feb1 	bl	8011ec8 <USBD_CDC_RegisterInterface>
 8016166:	4603      	mov	r3, r0
 8016168:	2b00      	cmp	r3, #0
 801616a:	d001      	beq.n	8016170 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801616c:	f7ed fde4 	bl	8003d38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016170:	4805      	ldr	r0, [pc, #20]	; (8016188 <MX_USB_DEVICE_Init+0x54>)
 8016172:	f7fb ffa6 	bl	80120c2 <USBD_Start>
 8016176:	4603      	mov	r3, r0
 8016178:	2b00      	cmp	r3, #0
 801617a:	d001      	beq.n	8016180 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801617c:	f7ed fddc 	bl	8003d38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016180:	bf00      	nop
 8016182:	bd80      	pop	{r7, pc}
 8016184:	20000134 	.word	0x20000134
 8016188:	20001364 	.word	0x20001364
 801618c:	2000001c 	.word	0x2000001c
 8016190:	20000120 	.word	0x20000120

08016194 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016198:	2200      	movs	r2, #0
 801619a:	4905      	ldr	r1, [pc, #20]	; (80161b0 <CDC_Init_FS+0x1c>)
 801619c:	4805      	ldr	r0, [pc, #20]	; (80161b4 <CDC_Init_FS+0x20>)
 801619e:	f7fb fea8 	bl	8011ef2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80161a2:	4905      	ldr	r1, [pc, #20]	; (80161b8 <CDC_Init_FS+0x24>)
 80161a4:	4803      	ldr	r0, [pc, #12]	; (80161b4 <CDC_Init_FS+0x20>)
 80161a6:	f7fb fec2 	bl	8011f2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80161aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	bd80      	pop	{r7, pc}
 80161b0:	20001e34 	.word	0x20001e34
 80161b4:	20001364 	.word	0x20001364
 80161b8:	20001634 	.word	0x20001634

080161bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80161bc:	b480      	push	{r7}
 80161be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80161c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80161c2:	4618      	mov	r0, r3
 80161c4:	46bd      	mov	sp, r7
 80161c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ca:	4770      	bx	lr

080161cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80161cc:	b480      	push	{r7}
 80161ce:	b083      	sub	sp, #12
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	4603      	mov	r3, r0
 80161d4:	6039      	str	r1, [r7, #0]
 80161d6:	71fb      	strb	r3, [r7, #7]
 80161d8:	4613      	mov	r3, r2
 80161da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80161dc:	79fb      	ldrb	r3, [r7, #7]
 80161de:	2b23      	cmp	r3, #35	; 0x23
 80161e0:	d84a      	bhi.n	8016278 <CDC_Control_FS+0xac>
 80161e2:	a201      	add	r2, pc, #4	; (adr r2, 80161e8 <CDC_Control_FS+0x1c>)
 80161e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161e8:	08016279 	.word	0x08016279
 80161ec:	08016279 	.word	0x08016279
 80161f0:	08016279 	.word	0x08016279
 80161f4:	08016279 	.word	0x08016279
 80161f8:	08016279 	.word	0x08016279
 80161fc:	08016279 	.word	0x08016279
 8016200:	08016279 	.word	0x08016279
 8016204:	08016279 	.word	0x08016279
 8016208:	08016279 	.word	0x08016279
 801620c:	08016279 	.word	0x08016279
 8016210:	08016279 	.word	0x08016279
 8016214:	08016279 	.word	0x08016279
 8016218:	08016279 	.word	0x08016279
 801621c:	08016279 	.word	0x08016279
 8016220:	08016279 	.word	0x08016279
 8016224:	08016279 	.word	0x08016279
 8016228:	08016279 	.word	0x08016279
 801622c:	08016279 	.word	0x08016279
 8016230:	08016279 	.word	0x08016279
 8016234:	08016279 	.word	0x08016279
 8016238:	08016279 	.word	0x08016279
 801623c:	08016279 	.word	0x08016279
 8016240:	08016279 	.word	0x08016279
 8016244:	08016279 	.word	0x08016279
 8016248:	08016279 	.word	0x08016279
 801624c:	08016279 	.word	0x08016279
 8016250:	08016279 	.word	0x08016279
 8016254:	08016279 	.word	0x08016279
 8016258:	08016279 	.word	0x08016279
 801625c:	08016279 	.word	0x08016279
 8016260:	08016279 	.word	0x08016279
 8016264:	08016279 	.word	0x08016279
 8016268:	08016279 	.word	0x08016279
 801626c:	08016279 	.word	0x08016279
 8016270:	08016279 	.word	0x08016279
 8016274:	08016279 	.word	0x08016279
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016278:	bf00      	nop
  }

  return (USBD_OK);
 801627a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801627c:	4618      	mov	r0, r3
 801627e:	370c      	adds	r7, #12
 8016280:	46bd      	mov	sp, r7
 8016282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016286:	4770      	bx	lr

08016288 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b082      	sub	sp, #8
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016292:	6879      	ldr	r1, [r7, #4]
 8016294:	4805      	ldr	r0, [pc, #20]	; (80162ac <CDC_Receive_FS+0x24>)
 8016296:	f7fb fe4a 	bl	8011f2e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801629a:	4804      	ldr	r0, [pc, #16]	; (80162ac <CDC_Receive_FS+0x24>)
 801629c:	f7fb fe90 	bl	8011fc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80162a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80162a2:	4618      	mov	r0, r3
 80162a4:	3708      	adds	r7, #8
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}
 80162aa:	bf00      	nop
 80162ac:	20001364 	.word	0x20001364

080162b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b084      	sub	sp, #16
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	460b      	mov	r3, r1
 80162ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80162bc:	2300      	movs	r3, #0
 80162be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80162c0:	4b0d      	ldr	r3, [pc, #52]	; (80162f8 <CDC_Transmit_FS+0x48>)
 80162c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80162c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d001      	beq.n	80162d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80162d2:	2301      	movs	r3, #1
 80162d4:	e00b      	b.n	80162ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80162d6:	887b      	ldrh	r3, [r7, #2]
 80162d8:	461a      	mov	r2, r3
 80162da:	6879      	ldr	r1, [r7, #4]
 80162dc:	4806      	ldr	r0, [pc, #24]	; (80162f8 <CDC_Transmit_FS+0x48>)
 80162de:	f7fb fe08 	bl	8011ef2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80162e2:	4805      	ldr	r0, [pc, #20]	; (80162f8 <CDC_Transmit_FS+0x48>)
 80162e4:	f7fb fe3c 	bl	8011f60 <USBD_CDC_TransmitPacket>
 80162e8:	4603      	mov	r3, r0
 80162ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80162ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80162ee:	4618      	mov	r0, r3
 80162f0:	3710      	adds	r7, #16
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}
 80162f6:	bf00      	nop
 80162f8:	20001364 	.word	0x20001364

080162fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80162fc:	b480      	push	{r7}
 80162fe:	b087      	sub	sp, #28
 8016300:	af00      	add	r7, sp, #0
 8016302:	60f8      	str	r0, [r7, #12]
 8016304:	60b9      	str	r1, [r7, #8]
 8016306:	4613      	mov	r3, r2
 8016308:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801630a:	2300      	movs	r3, #0
 801630c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801630e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016312:	4618      	mov	r0, r3
 8016314:	371c      	adds	r7, #28
 8016316:	46bd      	mov	sp, r7
 8016318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631c:	4770      	bx	lr
	...

08016320 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016320:	b480      	push	{r7}
 8016322:	b083      	sub	sp, #12
 8016324:	af00      	add	r7, sp, #0
 8016326:	4603      	mov	r3, r0
 8016328:	6039      	str	r1, [r7, #0]
 801632a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	2212      	movs	r2, #18
 8016330:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016332:	4b03      	ldr	r3, [pc, #12]	; (8016340 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016334:	4618      	mov	r0, r3
 8016336:	370c      	adds	r7, #12
 8016338:	46bd      	mov	sp, r7
 801633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633e:	4770      	bx	lr
 8016340:	20000150 	.word	0x20000150

08016344 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016344:	b480      	push	{r7}
 8016346:	b083      	sub	sp, #12
 8016348:	af00      	add	r7, sp, #0
 801634a:	4603      	mov	r3, r0
 801634c:	6039      	str	r1, [r7, #0]
 801634e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016350:	683b      	ldr	r3, [r7, #0]
 8016352:	2204      	movs	r2, #4
 8016354:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016356:	4b03      	ldr	r3, [pc, #12]	; (8016364 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016358:	4618      	mov	r0, r3
 801635a:	370c      	adds	r7, #12
 801635c:	46bd      	mov	sp, r7
 801635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016362:	4770      	bx	lr
 8016364:	20000164 	.word	0x20000164

08016368 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	4603      	mov	r3, r0
 8016370:	6039      	str	r1, [r7, #0]
 8016372:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016374:	79fb      	ldrb	r3, [r7, #7]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d105      	bne.n	8016386 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801637a:	683a      	ldr	r2, [r7, #0]
 801637c:	4907      	ldr	r1, [pc, #28]	; (801639c <USBD_FS_ProductStrDescriptor+0x34>)
 801637e:	4808      	ldr	r0, [pc, #32]	; (80163a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8016380:	f7fc fed1 	bl	8013126 <USBD_GetString>
 8016384:	e004      	b.n	8016390 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016386:	683a      	ldr	r2, [r7, #0]
 8016388:	4904      	ldr	r1, [pc, #16]	; (801639c <USBD_FS_ProductStrDescriptor+0x34>)
 801638a:	4805      	ldr	r0, [pc, #20]	; (80163a0 <USBD_FS_ProductStrDescriptor+0x38>)
 801638c:	f7fc fecb 	bl	8013126 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016390:	4b02      	ldr	r3, [pc, #8]	; (801639c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016392:	4618      	mov	r0, r3
 8016394:	3708      	adds	r7, #8
 8016396:	46bd      	mov	sp, r7
 8016398:	bd80      	pop	{r7, pc}
 801639a:	bf00      	nop
 801639c:	20002634 	.word	0x20002634
 80163a0:	08019f44 	.word	0x08019f44

080163a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b082      	sub	sp, #8
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	4603      	mov	r3, r0
 80163ac:	6039      	str	r1, [r7, #0]
 80163ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80163b0:	683a      	ldr	r2, [r7, #0]
 80163b2:	4904      	ldr	r1, [pc, #16]	; (80163c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80163b4:	4804      	ldr	r0, [pc, #16]	; (80163c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80163b6:	f7fc feb6 	bl	8013126 <USBD_GetString>
  return USBD_StrDesc;
 80163ba:	4b02      	ldr	r3, [pc, #8]	; (80163c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80163bc:	4618      	mov	r0, r3
 80163be:	3708      	adds	r7, #8
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}
 80163c4:	20002634 	.word	0x20002634
 80163c8:	08019f5c 	.word	0x08019f5c

080163cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b082      	sub	sp, #8
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	4603      	mov	r3, r0
 80163d4:	6039      	str	r1, [r7, #0]
 80163d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80163d8:	683b      	ldr	r3, [r7, #0]
 80163da:	221a      	movs	r2, #26
 80163dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80163de:	f000 f843 	bl	8016468 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80163e2:	4b02      	ldr	r3, [pc, #8]	; (80163ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3708      	adds	r7, #8
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}
 80163ec:	20000168 	.word	0x20000168

080163f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b082      	sub	sp, #8
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	4603      	mov	r3, r0
 80163f8:	6039      	str	r1, [r7, #0]
 80163fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80163fc:	79fb      	ldrb	r3, [r7, #7]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d105      	bne.n	801640e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016402:	683a      	ldr	r2, [r7, #0]
 8016404:	4907      	ldr	r1, [pc, #28]	; (8016424 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016406:	4808      	ldr	r0, [pc, #32]	; (8016428 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016408:	f7fc fe8d 	bl	8013126 <USBD_GetString>
 801640c:	e004      	b.n	8016418 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801640e:	683a      	ldr	r2, [r7, #0]
 8016410:	4904      	ldr	r1, [pc, #16]	; (8016424 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016412:	4805      	ldr	r0, [pc, #20]	; (8016428 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016414:	f7fc fe87 	bl	8013126 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016418:	4b02      	ldr	r3, [pc, #8]	; (8016424 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801641a:	4618      	mov	r0, r3
 801641c:	3708      	adds	r7, #8
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}
 8016422:	bf00      	nop
 8016424:	20002634 	.word	0x20002634
 8016428:	08019f70 	.word	0x08019f70

0801642c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b082      	sub	sp, #8
 8016430:	af00      	add	r7, sp, #0
 8016432:	4603      	mov	r3, r0
 8016434:	6039      	str	r1, [r7, #0]
 8016436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016438:	79fb      	ldrb	r3, [r7, #7]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d105      	bne.n	801644a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801643e:	683a      	ldr	r2, [r7, #0]
 8016440:	4907      	ldr	r1, [pc, #28]	; (8016460 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016442:	4808      	ldr	r0, [pc, #32]	; (8016464 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016444:	f7fc fe6f 	bl	8013126 <USBD_GetString>
 8016448:	e004      	b.n	8016454 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801644a:	683a      	ldr	r2, [r7, #0]
 801644c:	4904      	ldr	r1, [pc, #16]	; (8016460 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801644e:	4805      	ldr	r0, [pc, #20]	; (8016464 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016450:	f7fc fe69 	bl	8013126 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016454:	4b02      	ldr	r3, [pc, #8]	; (8016460 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016456:	4618      	mov	r0, r3
 8016458:	3708      	adds	r7, #8
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	20002634 	.word	0x20002634
 8016464:	08019f7c 	.word	0x08019f7c

08016468 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b084      	sub	sp, #16
 801646c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801646e:	4b0f      	ldr	r3, [pc, #60]	; (80164ac <Get_SerialNum+0x44>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016474:	4b0e      	ldr	r3, [pc, #56]	; (80164b0 <Get_SerialNum+0x48>)
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801647a:	4b0e      	ldr	r3, [pc, #56]	; (80164b4 <Get_SerialNum+0x4c>)
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016480:	68fa      	ldr	r2, [r7, #12]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	4413      	add	r3, r2
 8016486:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d009      	beq.n	80164a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801648e:	2208      	movs	r2, #8
 8016490:	4909      	ldr	r1, [pc, #36]	; (80164b8 <Get_SerialNum+0x50>)
 8016492:	68f8      	ldr	r0, [r7, #12]
 8016494:	f000 f814 	bl	80164c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016498:	2204      	movs	r2, #4
 801649a:	4908      	ldr	r1, [pc, #32]	; (80164bc <Get_SerialNum+0x54>)
 801649c:	68b8      	ldr	r0, [r7, #8]
 801649e:	f000 f80f 	bl	80164c0 <IntToUnicode>
  }
}
 80164a2:	bf00      	nop
 80164a4:	3710      	adds	r7, #16
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bd80      	pop	{r7, pc}
 80164aa:	bf00      	nop
 80164ac:	1fff7590 	.word	0x1fff7590
 80164b0:	1fff7594 	.word	0x1fff7594
 80164b4:	1fff7598 	.word	0x1fff7598
 80164b8:	2000016a 	.word	0x2000016a
 80164bc:	2000017a 	.word	0x2000017a

080164c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80164c0:	b480      	push	{r7}
 80164c2:	b087      	sub	sp, #28
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	60f8      	str	r0, [r7, #12]
 80164c8:	60b9      	str	r1, [r7, #8]
 80164ca:	4613      	mov	r3, r2
 80164cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80164ce:	2300      	movs	r3, #0
 80164d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80164d2:	2300      	movs	r3, #0
 80164d4:	75fb      	strb	r3, [r7, #23]
 80164d6:	e027      	b.n	8016528 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	0f1b      	lsrs	r3, r3, #28
 80164dc:	2b09      	cmp	r3, #9
 80164de:	d80b      	bhi.n	80164f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	0f1b      	lsrs	r3, r3, #28
 80164e4:	b2da      	uxtb	r2, r3
 80164e6:	7dfb      	ldrb	r3, [r7, #23]
 80164e8:	005b      	lsls	r3, r3, #1
 80164ea:	4619      	mov	r1, r3
 80164ec:	68bb      	ldr	r3, [r7, #8]
 80164ee:	440b      	add	r3, r1
 80164f0:	3230      	adds	r2, #48	; 0x30
 80164f2:	b2d2      	uxtb	r2, r2
 80164f4:	701a      	strb	r2, [r3, #0]
 80164f6:	e00a      	b.n	801650e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	0f1b      	lsrs	r3, r3, #28
 80164fc:	b2da      	uxtb	r2, r3
 80164fe:	7dfb      	ldrb	r3, [r7, #23]
 8016500:	005b      	lsls	r3, r3, #1
 8016502:	4619      	mov	r1, r3
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	440b      	add	r3, r1
 8016508:	3237      	adds	r2, #55	; 0x37
 801650a:	b2d2      	uxtb	r2, r2
 801650c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	011b      	lsls	r3, r3, #4
 8016512:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016514:	7dfb      	ldrb	r3, [r7, #23]
 8016516:	005b      	lsls	r3, r3, #1
 8016518:	3301      	adds	r3, #1
 801651a:	68ba      	ldr	r2, [r7, #8]
 801651c:	4413      	add	r3, r2
 801651e:	2200      	movs	r2, #0
 8016520:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016522:	7dfb      	ldrb	r3, [r7, #23]
 8016524:	3301      	adds	r3, #1
 8016526:	75fb      	strb	r3, [r7, #23]
 8016528:	7dfa      	ldrb	r2, [r7, #23]
 801652a:	79fb      	ldrb	r3, [r7, #7]
 801652c:	429a      	cmp	r2, r3
 801652e:	d3d3      	bcc.n	80164d8 <IntToUnicode+0x18>
  }
}
 8016530:	bf00      	nop
 8016532:	bf00      	nop
 8016534:	371c      	adds	r7, #28
 8016536:	46bd      	mov	sp, r7
 8016538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653c:	4770      	bx	lr
	...

08016540 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b0b0      	sub	sp, #192	; 0xc0
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016548:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801654c:	2200      	movs	r2, #0
 801654e:	601a      	str	r2, [r3, #0]
 8016550:	605a      	str	r2, [r3, #4]
 8016552:	609a      	str	r2, [r3, #8]
 8016554:	60da      	str	r2, [r3, #12]
 8016556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8016558:	f107 0318 	add.w	r3, r7, #24
 801655c:	2294      	movs	r2, #148	; 0x94
 801655e:	2100      	movs	r1, #0
 8016560:	4618      	mov	r0, r3
 8016562:	f000 fc0b 	bl	8016d7c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801656e:	d163      	bne.n	8016638 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016574:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016576:	2300      	movs	r3, #0
 8016578:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801657c:	f107 0318 	add.w	r3, r7, #24
 8016580:	4618      	mov	r0, r3
 8016582:	f7f3 fc29 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>
 8016586:	4603      	mov	r3, r0
 8016588:	2b00      	cmp	r3, #0
 801658a:	d001      	beq.n	8016590 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801658c:	f7ed fbd4 	bl	8003d38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016590:	4b2b      	ldr	r3, [pc, #172]	; (8016640 <HAL_PCD_MspInit+0x100>)
 8016592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016594:	4a2a      	ldr	r2, [pc, #168]	; (8016640 <HAL_PCD_MspInit+0x100>)
 8016596:	f043 0301 	orr.w	r3, r3, #1
 801659a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801659c:	4b28      	ldr	r3, [pc, #160]	; (8016640 <HAL_PCD_MspInit+0x100>)
 801659e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80165a0:	f003 0301 	and.w	r3, r3, #1
 80165a4:	617b      	str	r3, [r7, #20]
 80165a6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80165a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80165ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165b0:	2302      	movs	r3, #2
 80165b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165b6:	2300      	movs	r3, #0
 80165b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80165bc:	2303      	movs	r3, #3
 80165be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80165c2:	230a      	movs	r3, #10
 80165c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80165c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80165cc:	4619      	mov	r1, r3
 80165ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80165d2:	f7ef fde1 	bl	8006198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80165d6:	4b1a      	ldr	r3, [pc, #104]	; (8016640 <HAL_PCD_MspInit+0x100>)
 80165d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80165da:	4a19      	ldr	r2, [pc, #100]	; (8016640 <HAL_PCD_MspInit+0x100>)
 80165dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80165e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80165e2:	4b17      	ldr	r3, [pc, #92]	; (8016640 <HAL_PCD_MspInit+0x100>)
 80165e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80165e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80165ea:	613b      	str	r3, [r7, #16]
 80165ec:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80165ee:	4b14      	ldr	r3, [pc, #80]	; (8016640 <HAL_PCD_MspInit+0x100>)
 80165f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d114      	bne.n	8016624 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80165fa:	4b11      	ldr	r3, [pc, #68]	; (8016640 <HAL_PCD_MspInit+0x100>)
 80165fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165fe:	4a10      	ldr	r2, [pc, #64]	; (8016640 <HAL_PCD_MspInit+0x100>)
 8016600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016604:	6593      	str	r3, [r2, #88]	; 0x58
 8016606:	4b0e      	ldr	r3, [pc, #56]	; (8016640 <HAL_PCD_MspInit+0x100>)
 8016608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801660a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801660e:	60fb      	str	r3, [r7, #12]
 8016610:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8016612:	f7f2 fccd 	bl	8008fb0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8016616:	4b0a      	ldr	r3, [pc, #40]	; (8016640 <HAL_PCD_MspInit+0x100>)
 8016618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801661a:	4a09      	ldr	r2, [pc, #36]	; (8016640 <HAL_PCD_MspInit+0x100>)
 801661c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016620:	6593      	str	r3, [r2, #88]	; 0x58
 8016622:	e001      	b.n	8016628 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8016624:	f7f2 fcc4 	bl	8008fb0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016628:	2200      	movs	r2, #0
 801662a:	2100      	movs	r1, #0
 801662c:	2043      	movs	r0, #67	; 0x43
 801662e:	f7ef fcc2 	bl	8005fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016632:	2043      	movs	r0, #67	; 0x43
 8016634:	f7ef fcdb 	bl	8005fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016638:	bf00      	nop
 801663a:	37c0      	adds	r7, #192	; 0xc0
 801663c:	46bd      	mov	sp, r7
 801663e:	bd80      	pop	{r7, pc}
 8016640:	40021000 	.word	0x40021000

08016644 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016658:	4619      	mov	r1, r3
 801665a:	4610      	mov	r0, r2
 801665c:	f7fb fd7c 	bl	8012158 <USBD_LL_SetupStage>
}
 8016660:	bf00      	nop
 8016662:	3708      	adds	r7, #8
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}

08016668 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	460b      	mov	r3, r1
 8016672:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801667a:	78fa      	ldrb	r2, [r7, #3]
 801667c:	6879      	ldr	r1, [r7, #4]
 801667e:	4613      	mov	r3, r2
 8016680:	00db      	lsls	r3, r3, #3
 8016682:	4413      	add	r3, r2
 8016684:	009b      	lsls	r3, r3, #2
 8016686:	440b      	add	r3, r1
 8016688:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801668c:	681a      	ldr	r2, [r3, #0]
 801668e:	78fb      	ldrb	r3, [r7, #3]
 8016690:	4619      	mov	r1, r3
 8016692:	f7fb fdb6 	bl	8012202 <USBD_LL_DataOutStage>
}
 8016696:	bf00      	nop
 8016698:	3708      	adds	r7, #8
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}

0801669e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801669e:	b580      	push	{r7, lr}
 80166a0:	b082      	sub	sp, #8
 80166a2:	af00      	add	r7, sp, #0
 80166a4:	6078      	str	r0, [r7, #4]
 80166a6:	460b      	mov	r3, r1
 80166a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80166b0:	78fa      	ldrb	r2, [r7, #3]
 80166b2:	6879      	ldr	r1, [r7, #4]
 80166b4:	4613      	mov	r3, r2
 80166b6:	00db      	lsls	r3, r3, #3
 80166b8:	4413      	add	r3, r2
 80166ba:	009b      	lsls	r3, r3, #2
 80166bc:	440b      	add	r3, r1
 80166be:	334c      	adds	r3, #76	; 0x4c
 80166c0:	681a      	ldr	r2, [r3, #0]
 80166c2:	78fb      	ldrb	r3, [r7, #3]
 80166c4:	4619      	mov	r1, r3
 80166c6:	f7fb fdff 	bl	80122c8 <USBD_LL_DataInStage>
}
 80166ca:	bf00      	nop
 80166cc:	3708      	adds	r7, #8
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}

080166d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166d2:	b580      	push	{r7, lr}
 80166d4:	b082      	sub	sp, #8
 80166d6:	af00      	add	r7, sp, #0
 80166d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80166e0:	4618      	mov	r0, r3
 80166e2:	f7fb ff13 	bl	801250c <USBD_LL_SOF>
}
 80166e6:	bf00      	nop
 80166e8:	3708      	adds	r7, #8
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}

080166ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166ee:	b580      	push	{r7, lr}
 80166f0:	b084      	sub	sp, #16
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80166f6:	2301      	movs	r3, #1
 80166f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	68db      	ldr	r3, [r3, #12]
 80166fe:	2b02      	cmp	r3, #2
 8016700:	d001      	beq.n	8016706 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016702:	f7ed fb19 	bl	8003d38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801670c:	7bfa      	ldrb	r2, [r7, #15]
 801670e:	4611      	mov	r1, r2
 8016710:	4618      	mov	r0, r3
 8016712:	f7fb febd 	bl	8012490 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801671c:	4618      	mov	r0, r3
 801671e:	f7fb fe69 	bl	80123f4 <USBD_LL_Reset>
}
 8016722:	bf00      	nop
 8016724:	3710      	adds	r7, #16
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}
	...

0801672c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b082      	sub	sp, #8
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	687a      	ldr	r2, [r7, #4]
 8016740:	6812      	ldr	r2, [r2, #0]
 8016742:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016746:	f043 0301 	orr.w	r3, r3, #1
 801674a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016752:	4618      	mov	r0, r3
 8016754:	f7fb feac 	bl	80124b0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	6a1b      	ldr	r3, [r3, #32]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d005      	beq.n	801676c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016760:	4b04      	ldr	r3, [pc, #16]	; (8016774 <HAL_PCD_SuspendCallback+0x48>)
 8016762:	691b      	ldr	r3, [r3, #16]
 8016764:	4a03      	ldr	r2, [pc, #12]	; (8016774 <HAL_PCD_SuspendCallback+0x48>)
 8016766:	f043 0306 	orr.w	r3, r3, #6
 801676a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801676c:	bf00      	nop
 801676e:	3708      	adds	r7, #8
 8016770:	46bd      	mov	sp, r7
 8016772:	bd80      	pop	{r7, pc}
 8016774:	e000ed00 	.word	0xe000ed00

08016778 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b082      	sub	sp, #8
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	687a      	ldr	r2, [r7, #4]
 801678c:	6812      	ldr	r2, [r2, #0]
 801678e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016792:	f023 0301 	bic.w	r3, r3, #1
 8016796:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	6a1b      	ldr	r3, [r3, #32]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d007      	beq.n	80167b0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80167a0:	4b08      	ldr	r3, [pc, #32]	; (80167c4 <HAL_PCD_ResumeCallback+0x4c>)
 80167a2:	691b      	ldr	r3, [r3, #16]
 80167a4:	4a07      	ldr	r2, [pc, #28]	; (80167c4 <HAL_PCD_ResumeCallback+0x4c>)
 80167a6:	f023 0306 	bic.w	r3, r3, #6
 80167aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80167ac:	f000 faa6 	bl	8016cfc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80167b6:	4618      	mov	r0, r3
 80167b8:	f7fb fe90 	bl	80124dc <USBD_LL_Resume>
}
 80167bc:	bf00      	nop
 80167be:	3708      	adds	r7, #8
 80167c0:	46bd      	mov	sp, r7
 80167c2:	bd80      	pop	{r7, pc}
 80167c4:	e000ed00 	.word	0xe000ed00

080167c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b082      	sub	sp, #8
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
 80167d0:	460b      	mov	r3, r1
 80167d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80167da:	78fa      	ldrb	r2, [r7, #3]
 80167dc:	4611      	mov	r1, r2
 80167de:	4618      	mov	r0, r3
 80167e0:	f7fb fedc 	bl	801259c <USBD_LL_IsoOUTIncomplete>
}
 80167e4:	bf00      	nop
 80167e6:	3708      	adds	r7, #8
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}

080167ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b082      	sub	sp, #8
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]
 80167f4:	460b      	mov	r3, r1
 80167f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80167fe:	78fa      	ldrb	r2, [r7, #3]
 8016800:	4611      	mov	r1, r2
 8016802:	4618      	mov	r0, r3
 8016804:	f7fb fea4 	bl	8012550 <USBD_LL_IsoINIncomplete>
}
 8016808:	bf00      	nop
 801680a:	3708      	adds	r7, #8
 801680c:	46bd      	mov	sp, r7
 801680e:	bd80      	pop	{r7, pc}

08016810 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801681e:	4618      	mov	r0, r3
 8016820:	f7fb fee2 	bl	80125e8 <USBD_LL_DevConnected>
}
 8016824:	bf00      	nop
 8016826:	3708      	adds	r7, #8
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}

0801682c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801683a:	4618      	mov	r0, r3
 801683c:	f7fb fedf 	bl	80125fe <USBD_LL_DevDisconnected>
}
 8016840:	bf00      	nop
 8016842:	3708      	adds	r7, #8
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}

08016848 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d139      	bne.n	80168cc <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016858:	4a1f      	ldr	r2, [pc, #124]	; (80168d8 <USBD_LL_Init+0x90>)
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	4a1d      	ldr	r2, [pc, #116]	; (80168d8 <USBD_LL_Init+0x90>)
 8016864:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016868:	4b1b      	ldr	r3, [pc, #108]	; (80168d8 <USBD_LL_Init+0x90>)
 801686a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801686e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8016870:	4b19      	ldr	r3, [pc, #100]	; (80168d8 <USBD_LL_Init+0x90>)
 8016872:	2206      	movs	r2, #6
 8016874:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016876:	4b18      	ldr	r3, [pc, #96]	; (80168d8 <USBD_LL_Init+0x90>)
 8016878:	2202      	movs	r2, #2
 801687a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801687c:	4b16      	ldr	r3, [pc, #88]	; (80168d8 <USBD_LL_Init+0x90>)
 801687e:	2200      	movs	r2, #0
 8016880:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016882:	4b15      	ldr	r3, [pc, #84]	; (80168d8 <USBD_LL_Init+0x90>)
 8016884:	2200      	movs	r2, #0
 8016886:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016888:	4b13      	ldr	r3, [pc, #76]	; (80168d8 <USBD_LL_Init+0x90>)
 801688a:	2200      	movs	r2, #0
 801688c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801688e:	4b12      	ldr	r3, [pc, #72]	; (80168d8 <USBD_LL_Init+0x90>)
 8016890:	2200      	movs	r2, #0
 8016892:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016894:	4b10      	ldr	r3, [pc, #64]	; (80168d8 <USBD_LL_Init+0x90>)
 8016896:	2200      	movs	r2, #0
 8016898:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801689a:	4b0f      	ldr	r3, [pc, #60]	; (80168d8 <USBD_LL_Init+0x90>)
 801689c:	2200      	movs	r2, #0
 801689e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80168a0:	480d      	ldr	r0, [pc, #52]	; (80168d8 <USBD_LL_Init+0x90>)
 80168a2:	f7f1 f8f6 	bl	8007a92 <HAL_PCD_Init>
 80168a6:	4603      	mov	r3, r0
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d001      	beq.n	80168b0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80168ac:	f7ed fa44 	bl	8003d38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80168b0:	2180      	movs	r1, #128	; 0x80
 80168b2:	4809      	ldr	r0, [pc, #36]	; (80168d8 <USBD_LL_Init+0x90>)
 80168b4:	f7f2 fa77 	bl	8008da6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80168b8:	2240      	movs	r2, #64	; 0x40
 80168ba:	2100      	movs	r1, #0
 80168bc:	4806      	ldr	r0, [pc, #24]	; (80168d8 <USBD_LL_Init+0x90>)
 80168be:	f7f2 fa2b 	bl	8008d18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80168c2:	2280      	movs	r2, #128	; 0x80
 80168c4:	2101      	movs	r1, #1
 80168c6:	4804      	ldr	r0, [pc, #16]	; (80168d8 <USBD_LL_Init+0x90>)
 80168c8:	f7f2 fa26 	bl	8008d18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80168cc:	2300      	movs	r3, #0
}
 80168ce:	4618      	mov	r0, r3
 80168d0:	3708      	adds	r7, #8
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bd80      	pop	{r7, pc}
 80168d6:	bf00      	nop
 80168d8:	20002834 	.word	0x20002834

080168dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b084      	sub	sp, #16
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168e4:	2300      	movs	r3, #0
 80168e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168e8:	2300      	movs	r3, #0
 80168ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7f1 f9f1 	bl	8007cda <HAL_PCD_Start>
 80168f8:	4603      	mov	r3, r0
 80168fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80168fc:	7bbb      	ldrb	r3, [r7, #14]
 80168fe:	2b03      	cmp	r3, #3
 8016900:	d816      	bhi.n	8016930 <USBD_LL_Start+0x54>
 8016902:	a201      	add	r2, pc, #4	; (adr r2, 8016908 <USBD_LL_Start+0x2c>)
 8016904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016908:	08016919 	.word	0x08016919
 801690c:	0801691f 	.word	0x0801691f
 8016910:	08016925 	.word	0x08016925
 8016914:	0801692b 	.word	0x0801692b
    case HAL_OK :
      usb_status = USBD_OK;
 8016918:	2300      	movs	r3, #0
 801691a:	73fb      	strb	r3, [r7, #15]
    break;
 801691c:	e00b      	b.n	8016936 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801691e:	2303      	movs	r3, #3
 8016920:	73fb      	strb	r3, [r7, #15]
    break;
 8016922:	e008      	b.n	8016936 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016924:	2301      	movs	r3, #1
 8016926:	73fb      	strb	r3, [r7, #15]
    break;
 8016928:	e005      	b.n	8016936 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801692a:	2303      	movs	r3, #3
 801692c:	73fb      	strb	r3, [r7, #15]
    break;
 801692e:	e002      	b.n	8016936 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8016930:	2303      	movs	r3, #3
 8016932:	73fb      	strb	r3, [r7, #15]
    break;
 8016934:	bf00      	nop
  }
  return usb_status;
 8016936:	7bfb      	ldrb	r3, [r7, #15]
}
 8016938:	4618      	mov	r0, r3
 801693a:	3710      	adds	r7, #16
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}

08016940 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b084      	sub	sp, #16
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	4608      	mov	r0, r1
 801694a:	4611      	mov	r1, r2
 801694c:	461a      	mov	r2, r3
 801694e:	4603      	mov	r3, r0
 8016950:	70fb      	strb	r3, [r7, #3]
 8016952:	460b      	mov	r3, r1
 8016954:	70bb      	strb	r3, [r7, #2]
 8016956:	4613      	mov	r3, r2
 8016958:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801695a:	2300      	movs	r3, #0
 801695c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801695e:	2300      	movs	r3, #0
 8016960:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016968:	78bb      	ldrb	r3, [r7, #2]
 801696a:	883a      	ldrh	r2, [r7, #0]
 801696c:	78f9      	ldrb	r1, [r7, #3]
 801696e:	f7f1 fe9b 	bl	80086a8 <HAL_PCD_EP_Open>
 8016972:	4603      	mov	r3, r0
 8016974:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016976:	7bbb      	ldrb	r3, [r7, #14]
 8016978:	2b03      	cmp	r3, #3
 801697a:	d817      	bhi.n	80169ac <USBD_LL_OpenEP+0x6c>
 801697c:	a201      	add	r2, pc, #4	; (adr r2, 8016984 <USBD_LL_OpenEP+0x44>)
 801697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016982:	bf00      	nop
 8016984:	08016995 	.word	0x08016995
 8016988:	0801699b 	.word	0x0801699b
 801698c:	080169a1 	.word	0x080169a1
 8016990:	080169a7 	.word	0x080169a7
    case HAL_OK :
      usb_status = USBD_OK;
 8016994:	2300      	movs	r3, #0
 8016996:	73fb      	strb	r3, [r7, #15]
    break;
 8016998:	e00b      	b.n	80169b2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801699a:	2303      	movs	r3, #3
 801699c:	73fb      	strb	r3, [r7, #15]
    break;
 801699e:	e008      	b.n	80169b2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80169a0:	2301      	movs	r3, #1
 80169a2:	73fb      	strb	r3, [r7, #15]
    break;
 80169a4:	e005      	b.n	80169b2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80169a6:	2303      	movs	r3, #3
 80169a8:	73fb      	strb	r3, [r7, #15]
    break;
 80169aa:	e002      	b.n	80169b2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80169ac:	2303      	movs	r3, #3
 80169ae:	73fb      	strb	r3, [r7, #15]
    break;
 80169b0:	bf00      	nop
  }
  return usb_status;
 80169b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80169b4:	4618      	mov	r0, r3
 80169b6:	3710      	adds	r7, #16
 80169b8:	46bd      	mov	sp, r7
 80169ba:	bd80      	pop	{r7, pc}

080169bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b084      	sub	sp, #16
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
 80169c4:	460b      	mov	r3, r1
 80169c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169c8:	2300      	movs	r3, #0
 80169ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169cc:	2300      	movs	r3, #0
 80169ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80169d6:	78fa      	ldrb	r2, [r7, #3]
 80169d8:	4611      	mov	r1, r2
 80169da:	4618      	mov	r0, r3
 80169dc:	f7f1 fecc 	bl	8008778 <HAL_PCD_EP_Close>
 80169e0:	4603      	mov	r3, r0
 80169e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80169e4:	7bbb      	ldrb	r3, [r7, #14]
 80169e6:	2b03      	cmp	r3, #3
 80169e8:	d816      	bhi.n	8016a18 <USBD_LL_CloseEP+0x5c>
 80169ea:	a201      	add	r2, pc, #4	; (adr r2, 80169f0 <USBD_LL_CloseEP+0x34>)
 80169ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169f0:	08016a01 	.word	0x08016a01
 80169f4:	08016a07 	.word	0x08016a07
 80169f8:	08016a0d 	.word	0x08016a0d
 80169fc:	08016a13 	.word	0x08016a13
    case HAL_OK :
      usb_status = USBD_OK;
 8016a00:	2300      	movs	r3, #0
 8016a02:	73fb      	strb	r3, [r7, #15]
    break;
 8016a04:	e00b      	b.n	8016a1e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016a06:	2303      	movs	r3, #3
 8016a08:	73fb      	strb	r3, [r7, #15]
    break;
 8016a0a:	e008      	b.n	8016a1e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8016a10:	e005      	b.n	8016a1e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016a12:	2303      	movs	r3, #3
 8016a14:	73fb      	strb	r3, [r7, #15]
    break;
 8016a16:	e002      	b.n	8016a1e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8016a18:	2303      	movs	r3, #3
 8016a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8016a1c:	bf00      	nop
  }
  return usb_status;
 8016a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a20:	4618      	mov	r0, r3
 8016a22:	3710      	adds	r7, #16
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bd80      	pop	{r7, pc}

08016a28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b084      	sub	sp, #16
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
 8016a30:	460b      	mov	r3, r1
 8016a32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a34:	2300      	movs	r3, #0
 8016a36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a38:	2300      	movs	r3, #0
 8016a3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a42:	78fa      	ldrb	r2, [r7, #3]
 8016a44:	4611      	mov	r1, r2
 8016a46:	4618      	mov	r0, r3
 8016a48:	f7f1 ff73 	bl	8008932 <HAL_PCD_EP_SetStall>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016a50:	7bbb      	ldrb	r3, [r7, #14]
 8016a52:	2b03      	cmp	r3, #3
 8016a54:	d816      	bhi.n	8016a84 <USBD_LL_StallEP+0x5c>
 8016a56:	a201      	add	r2, pc, #4	; (adr r2, 8016a5c <USBD_LL_StallEP+0x34>)
 8016a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a5c:	08016a6d 	.word	0x08016a6d
 8016a60:	08016a73 	.word	0x08016a73
 8016a64:	08016a79 	.word	0x08016a79
 8016a68:	08016a7f 	.word	0x08016a7f
    case HAL_OK :
      usb_status = USBD_OK;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8016a70:	e00b      	b.n	8016a8a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016a72:	2303      	movs	r3, #3
 8016a74:	73fb      	strb	r3, [r7, #15]
    break;
 8016a76:	e008      	b.n	8016a8a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016a78:	2301      	movs	r3, #1
 8016a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8016a7c:	e005      	b.n	8016a8a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016a7e:	2303      	movs	r3, #3
 8016a80:	73fb      	strb	r3, [r7, #15]
    break;
 8016a82:	e002      	b.n	8016a8a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8016a84:	2303      	movs	r3, #3
 8016a86:	73fb      	strb	r3, [r7, #15]
    break;
 8016a88:	bf00      	nop
  }
  return usb_status;
 8016a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	3710      	adds	r7, #16
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b084      	sub	sp, #16
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016aae:	78fa      	ldrb	r2, [r7, #3]
 8016ab0:	4611      	mov	r1, r2
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	f7f1 ff9f 	bl	80089f6 <HAL_PCD_EP_ClrStall>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016abc:	7bbb      	ldrb	r3, [r7, #14]
 8016abe:	2b03      	cmp	r3, #3
 8016ac0:	d816      	bhi.n	8016af0 <USBD_LL_ClearStallEP+0x5c>
 8016ac2:	a201      	add	r2, pc, #4	; (adr r2, 8016ac8 <USBD_LL_ClearStallEP+0x34>)
 8016ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ac8:	08016ad9 	.word	0x08016ad9
 8016acc:	08016adf 	.word	0x08016adf
 8016ad0:	08016ae5 	.word	0x08016ae5
 8016ad4:	08016aeb 	.word	0x08016aeb
    case HAL_OK :
      usb_status = USBD_OK;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	73fb      	strb	r3, [r7, #15]
    break;
 8016adc:	e00b      	b.n	8016af6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016ade:	2303      	movs	r3, #3
 8016ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8016ae2:	e008      	b.n	8016af6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8016ae8:	e005      	b.n	8016af6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016aea:	2303      	movs	r3, #3
 8016aec:	73fb      	strb	r3, [r7, #15]
    break;
 8016aee:	e002      	b.n	8016af6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8016af0:	2303      	movs	r3, #3
 8016af2:	73fb      	strb	r3, [r7, #15]
    break;
 8016af4:	bf00      	nop
  }
  return usb_status;
 8016af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016af8:	4618      	mov	r0, r3
 8016afa:	3710      	adds	r7, #16
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd80      	pop	{r7, pc}

08016b00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b00:	b480      	push	{r7}
 8016b02:	b085      	sub	sp, #20
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	6078      	str	r0, [r7, #4]
 8016b08:	460b      	mov	r3, r1
 8016b0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	da0b      	bge.n	8016b34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016b1c:	78fb      	ldrb	r3, [r7, #3]
 8016b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b22:	68f9      	ldr	r1, [r7, #12]
 8016b24:	4613      	mov	r3, r2
 8016b26:	00db      	lsls	r3, r3, #3
 8016b28:	4413      	add	r3, r2
 8016b2a:	009b      	lsls	r3, r3, #2
 8016b2c:	440b      	add	r3, r1
 8016b2e:	333e      	adds	r3, #62	; 0x3e
 8016b30:	781b      	ldrb	r3, [r3, #0]
 8016b32:	e00b      	b.n	8016b4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016b34:	78fb      	ldrb	r3, [r7, #3]
 8016b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b3a:	68f9      	ldr	r1, [r7, #12]
 8016b3c:	4613      	mov	r3, r2
 8016b3e:	00db      	lsls	r3, r3, #3
 8016b40:	4413      	add	r3, r2
 8016b42:	009b      	lsls	r3, r3, #2
 8016b44:	440b      	add	r3, r1
 8016b46:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016b4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	3714      	adds	r7, #20
 8016b50:	46bd      	mov	sp, r7
 8016b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b56:	4770      	bx	lr

08016b58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b084      	sub	sp, #16
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
 8016b60:	460b      	mov	r3, r1
 8016b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b64:	2300      	movs	r3, #0
 8016b66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b72:	78fa      	ldrb	r2, [r7, #3]
 8016b74:	4611      	mov	r1, r2
 8016b76:	4618      	mov	r0, r3
 8016b78:	f7f1 fd71 	bl	800865e <HAL_PCD_SetAddress>
 8016b7c:	4603      	mov	r3, r0
 8016b7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016b80:	7bbb      	ldrb	r3, [r7, #14]
 8016b82:	2b03      	cmp	r3, #3
 8016b84:	d816      	bhi.n	8016bb4 <USBD_LL_SetUSBAddress+0x5c>
 8016b86:	a201      	add	r2, pc, #4	; (adr r2, 8016b8c <USBD_LL_SetUSBAddress+0x34>)
 8016b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b8c:	08016b9d 	.word	0x08016b9d
 8016b90:	08016ba3 	.word	0x08016ba3
 8016b94:	08016ba9 	.word	0x08016ba9
 8016b98:	08016baf 	.word	0x08016baf
    case HAL_OK :
      usb_status = USBD_OK;
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8016ba0:	e00b      	b.n	8016bba <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016ba2:	2303      	movs	r3, #3
 8016ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8016ba6:	e008      	b.n	8016bba <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016ba8:	2301      	movs	r3, #1
 8016baa:	73fb      	strb	r3, [r7, #15]
    break;
 8016bac:	e005      	b.n	8016bba <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016bae:	2303      	movs	r3, #3
 8016bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8016bb2:	e002      	b.n	8016bba <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8016bb4:	2303      	movs	r3, #3
 8016bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8016bb8:	bf00      	nop
  }
  return usb_status;
 8016bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	3710      	adds	r7, #16
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}

08016bc4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b086      	sub	sp, #24
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	60f8      	str	r0, [r7, #12]
 8016bcc:	607a      	str	r2, [r7, #4]
 8016bce:	603b      	str	r3, [r7, #0]
 8016bd0:	460b      	mov	r3, r1
 8016bd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bd8:	2300      	movs	r3, #0
 8016bda:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016be2:	7af9      	ldrb	r1, [r7, #11]
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	687a      	ldr	r2, [r7, #4]
 8016be8:	f7f1 fe66 	bl	80088b8 <HAL_PCD_EP_Transmit>
 8016bec:	4603      	mov	r3, r0
 8016bee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8016bf0:	7dbb      	ldrb	r3, [r7, #22]
 8016bf2:	2b03      	cmp	r3, #3
 8016bf4:	d816      	bhi.n	8016c24 <USBD_LL_Transmit+0x60>
 8016bf6:	a201      	add	r2, pc, #4	; (adr r2, 8016bfc <USBD_LL_Transmit+0x38>)
 8016bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bfc:	08016c0d 	.word	0x08016c0d
 8016c00:	08016c13 	.word	0x08016c13
 8016c04:	08016c19 	.word	0x08016c19
 8016c08:	08016c1f 	.word	0x08016c1f
    case HAL_OK :
      usb_status = USBD_OK;
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	75fb      	strb	r3, [r7, #23]
    break;
 8016c10:	e00b      	b.n	8016c2a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016c12:	2303      	movs	r3, #3
 8016c14:	75fb      	strb	r3, [r7, #23]
    break;
 8016c16:	e008      	b.n	8016c2a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016c18:	2301      	movs	r3, #1
 8016c1a:	75fb      	strb	r3, [r7, #23]
    break;
 8016c1c:	e005      	b.n	8016c2a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016c1e:	2303      	movs	r3, #3
 8016c20:	75fb      	strb	r3, [r7, #23]
    break;
 8016c22:	e002      	b.n	8016c2a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8016c24:	2303      	movs	r3, #3
 8016c26:	75fb      	strb	r3, [r7, #23]
    break;
 8016c28:	bf00      	nop
  }
  return usb_status;
 8016c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3718      	adds	r7, #24
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}

08016c34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b086      	sub	sp, #24
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	60f8      	str	r0, [r7, #12]
 8016c3c:	607a      	str	r2, [r7, #4]
 8016c3e:	603b      	str	r3, [r7, #0]
 8016c40:	460b      	mov	r3, r1
 8016c42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c44:	2300      	movs	r3, #0
 8016c46:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016c52:	7af9      	ldrb	r1, [r7, #11]
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	687a      	ldr	r2, [r7, #4]
 8016c58:	f7f1 fdd8 	bl	800880c <HAL_PCD_EP_Receive>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8016c60:	7dbb      	ldrb	r3, [r7, #22]
 8016c62:	2b03      	cmp	r3, #3
 8016c64:	d816      	bhi.n	8016c94 <USBD_LL_PrepareReceive+0x60>
 8016c66:	a201      	add	r2, pc, #4	; (adr r2, 8016c6c <USBD_LL_PrepareReceive+0x38>)
 8016c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c6c:	08016c7d 	.word	0x08016c7d
 8016c70:	08016c83 	.word	0x08016c83
 8016c74:	08016c89 	.word	0x08016c89
 8016c78:	08016c8f 	.word	0x08016c8f
    case HAL_OK :
      usb_status = USBD_OK;
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	75fb      	strb	r3, [r7, #23]
    break;
 8016c80:	e00b      	b.n	8016c9a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016c82:	2303      	movs	r3, #3
 8016c84:	75fb      	strb	r3, [r7, #23]
    break;
 8016c86:	e008      	b.n	8016c9a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016c88:	2301      	movs	r3, #1
 8016c8a:	75fb      	strb	r3, [r7, #23]
    break;
 8016c8c:	e005      	b.n	8016c9a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016c8e:	2303      	movs	r3, #3
 8016c90:	75fb      	strb	r3, [r7, #23]
    break;
 8016c92:	e002      	b.n	8016c9a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8016c94:	2303      	movs	r3, #3
 8016c96:	75fb      	strb	r3, [r7, #23]
    break;
 8016c98:	bf00      	nop
  }
  return usb_status;
 8016c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	3718      	adds	r7, #24
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}

08016ca4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b082      	sub	sp, #8
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	460b      	mov	r3, r1
 8016cae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016cb6:	78fa      	ldrb	r2, [r7, #3]
 8016cb8:	4611      	mov	r1, r2
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7f1 fde4 	bl	8008888 <HAL_PCD_EP_GetRxCount>
 8016cc0:	4603      	mov	r3, r0
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	3708      	adds	r7, #8
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	bd80      	pop	{r7, pc}
	...

08016ccc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016ccc:	b480      	push	{r7}
 8016cce:	b083      	sub	sp, #12
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016cd4:	4b03      	ldr	r3, [pc, #12]	; (8016ce4 <USBD_static_malloc+0x18>)
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	370c      	adds	r7, #12
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce0:	4770      	bx	lr
 8016ce2:	bf00      	nop
 8016ce4:	20002d40 	.word	0x20002d40

08016ce8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016ce8:	b480      	push	{r7}
 8016cea:	b083      	sub	sp, #12
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]

}
 8016cf0:	bf00      	nop
 8016cf2:	370c      	adds	r7, #12
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfa:	4770      	bx	lr

08016cfc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016d00:	f7ec fd30 	bl	8003764 <SystemClock_Config>
}
 8016d04:	bf00      	nop
 8016d06:	bd80      	pop	{r7, pc}

08016d08 <__libc_init_array>:
 8016d08:	b570      	push	{r4, r5, r6, lr}
 8016d0a:	4d0d      	ldr	r5, [pc, #52]	; (8016d40 <__libc_init_array+0x38>)
 8016d0c:	4c0d      	ldr	r4, [pc, #52]	; (8016d44 <__libc_init_array+0x3c>)
 8016d0e:	1b64      	subs	r4, r4, r5
 8016d10:	10a4      	asrs	r4, r4, #2
 8016d12:	2600      	movs	r6, #0
 8016d14:	42a6      	cmp	r6, r4
 8016d16:	d109      	bne.n	8016d2c <__libc_init_array+0x24>
 8016d18:	4d0b      	ldr	r5, [pc, #44]	; (8016d48 <__libc_init_array+0x40>)
 8016d1a:	4c0c      	ldr	r4, [pc, #48]	; (8016d4c <__libc_init_array+0x44>)
 8016d1c:	f002 ff70 	bl	8019c00 <_init>
 8016d20:	1b64      	subs	r4, r4, r5
 8016d22:	10a4      	asrs	r4, r4, #2
 8016d24:	2600      	movs	r6, #0
 8016d26:	42a6      	cmp	r6, r4
 8016d28:	d105      	bne.n	8016d36 <__libc_init_array+0x2e>
 8016d2a:	bd70      	pop	{r4, r5, r6, pc}
 8016d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d30:	4798      	blx	r3
 8016d32:	3601      	adds	r6, #1
 8016d34:	e7ee      	b.n	8016d14 <__libc_init_array+0xc>
 8016d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d3a:	4798      	blx	r3
 8016d3c:	3601      	adds	r6, #1
 8016d3e:	e7f2      	b.n	8016d26 <__libc_init_array+0x1e>
 8016d40:	0801a498 	.word	0x0801a498
 8016d44:	0801a498 	.word	0x0801a498
 8016d48:	0801a498 	.word	0x0801a498
 8016d4c:	0801a49c 	.word	0x0801a49c

08016d50 <malloc>:
 8016d50:	4b02      	ldr	r3, [pc, #8]	; (8016d5c <malloc+0xc>)
 8016d52:	4601      	mov	r1, r0
 8016d54:	6818      	ldr	r0, [r3, #0]
 8016d56:	f000 b885 	b.w	8016e64 <_malloc_r>
 8016d5a:	bf00      	nop
 8016d5c:	20000184 	.word	0x20000184

08016d60 <memcpy>:
 8016d60:	440a      	add	r2, r1
 8016d62:	4291      	cmp	r1, r2
 8016d64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016d68:	d100      	bne.n	8016d6c <memcpy+0xc>
 8016d6a:	4770      	bx	lr
 8016d6c:	b510      	push	{r4, lr}
 8016d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d76:	4291      	cmp	r1, r2
 8016d78:	d1f9      	bne.n	8016d6e <memcpy+0xe>
 8016d7a:	bd10      	pop	{r4, pc}

08016d7c <memset>:
 8016d7c:	4402      	add	r2, r0
 8016d7e:	4603      	mov	r3, r0
 8016d80:	4293      	cmp	r3, r2
 8016d82:	d100      	bne.n	8016d86 <memset+0xa>
 8016d84:	4770      	bx	lr
 8016d86:	f803 1b01 	strb.w	r1, [r3], #1
 8016d8a:	e7f9      	b.n	8016d80 <memset+0x4>

08016d8c <_free_r>:
 8016d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d8e:	2900      	cmp	r1, #0
 8016d90:	d044      	beq.n	8016e1c <_free_r+0x90>
 8016d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d96:	9001      	str	r0, [sp, #4]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8016d9e:	bfb8      	it	lt
 8016da0:	18e4      	addlt	r4, r4, r3
 8016da2:	f001 fd41 	bl	8018828 <__malloc_lock>
 8016da6:	4a1e      	ldr	r2, [pc, #120]	; (8016e20 <_free_r+0x94>)
 8016da8:	9801      	ldr	r0, [sp, #4]
 8016daa:	6813      	ldr	r3, [r2, #0]
 8016dac:	b933      	cbnz	r3, 8016dbc <_free_r+0x30>
 8016dae:	6063      	str	r3, [r4, #4]
 8016db0:	6014      	str	r4, [r2, #0]
 8016db2:	b003      	add	sp, #12
 8016db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016db8:	f001 bd3c 	b.w	8018834 <__malloc_unlock>
 8016dbc:	42a3      	cmp	r3, r4
 8016dbe:	d908      	bls.n	8016dd2 <_free_r+0x46>
 8016dc0:	6825      	ldr	r5, [r4, #0]
 8016dc2:	1961      	adds	r1, r4, r5
 8016dc4:	428b      	cmp	r3, r1
 8016dc6:	bf01      	itttt	eq
 8016dc8:	6819      	ldreq	r1, [r3, #0]
 8016dca:	685b      	ldreq	r3, [r3, #4]
 8016dcc:	1949      	addeq	r1, r1, r5
 8016dce:	6021      	streq	r1, [r4, #0]
 8016dd0:	e7ed      	b.n	8016dae <_free_r+0x22>
 8016dd2:	461a      	mov	r2, r3
 8016dd4:	685b      	ldr	r3, [r3, #4]
 8016dd6:	b10b      	cbz	r3, 8016ddc <_free_r+0x50>
 8016dd8:	42a3      	cmp	r3, r4
 8016dda:	d9fa      	bls.n	8016dd2 <_free_r+0x46>
 8016ddc:	6811      	ldr	r1, [r2, #0]
 8016dde:	1855      	adds	r5, r2, r1
 8016de0:	42a5      	cmp	r5, r4
 8016de2:	d10b      	bne.n	8016dfc <_free_r+0x70>
 8016de4:	6824      	ldr	r4, [r4, #0]
 8016de6:	4421      	add	r1, r4
 8016de8:	1854      	adds	r4, r2, r1
 8016dea:	42a3      	cmp	r3, r4
 8016dec:	6011      	str	r1, [r2, #0]
 8016dee:	d1e0      	bne.n	8016db2 <_free_r+0x26>
 8016df0:	681c      	ldr	r4, [r3, #0]
 8016df2:	685b      	ldr	r3, [r3, #4]
 8016df4:	6053      	str	r3, [r2, #4]
 8016df6:	4421      	add	r1, r4
 8016df8:	6011      	str	r1, [r2, #0]
 8016dfa:	e7da      	b.n	8016db2 <_free_r+0x26>
 8016dfc:	d902      	bls.n	8016e04 <_free_r+0x78>
 8016dfe:	230c      	movs	r3, #12
 8016e00:	6003      	str	r3, [r0, #0]
 8016e02:	e7d6      	b.n	8016db2 <_free_r+0x26>
 8016e04:	6825      	ldr	r5, [r4, #0]
 8016e06:	1961      	adds	r1, r4, r5
 8016e08:	428b      	cmp	r3, r1
 8016e0a:	bf04      	itt	eq
 8016e0c:	6819      	ldreq	r1, [r3, #0]
 8016e0e:	685b      	ldreq	r3, [r3, #4]
 8016e10:	6063      	str	r3, [r4, #4]
 8016e12:	bf04      	itt	eq
 8016e14:	1949      	addeq	r1, r1, r5
 8016e16:	6021      	streq	r1, [r4, #0]
 8016e18:	6054      	str	r4, [r2, #4]
 8016e1a:	e7ca      	b.n	8016db2 <_free_r+0x26>
 8016e1c:	b003      	add	sp, #12
 8016e1e:	bd30      	pop	{r4, r5, pc}
 8016e20:	20002f60 	.word	0x20002f60

08016e24 <sbrk_aligned>:
 8016e24:	b570      	push	{r4, r5, r6, lr}
 8016e26:	4e0e      	ldr	r6, [pc, #56]	; (8016e60 <sbrk_aligned+0x3c>)
 8016e28:	460c      	mov	r4, r1
 8016e2a:	6831      	ldr	r1, [r6, #0]
 8016e2c:	4605      	mov	r5, r0
 8016e2e:	b911      	cbnz	r1, 8016e36 <sbrk_aligned+0x12>
 8016e30:	f000 fd0e 	bl	8017850 <_sbrk_r>
 8016e34:	6030      	str	r0, [r6, #0]
 8016e36:	4621      	mov	r1, r4
 8016e38:	4628      	mov	r0, r5
 8016e3a:	f000 fd09 	bl	8017850 <_sbrk_r>
 8016e3e:	1c43      	adds	r3, r0, #1
 8016e40:	d00a      	beq.n	8016e58 <sbrk_aligned+0x34>
 8016e42:	1cc4      	adds	r4, r0, #3
 8016e44:	f024 0403 	bic.w	r4, r4, #3
 8016e48:	42a0      	cmp	r0, r4
 8016e4a:	d007      	beq.n	8016e5c <sbrk_aligned+0x38>
 8016e4c:	1a21      	subs	r1, r4, r0
 8016e4e:	4628      	mov	r0, r5
 8016e50:	f000 fcfe 	bl	8017850 <_sbrk_r>
 8016e54:	3001      	adds	r0, #1
 8016e56:	d101      	bne.n	8016e5c <sbrk_aligned+0x38>
 8016e58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	bd70      	pop	{r4, r5, r6, pc}
 8016e60:	20002f64 	.word	0x20002f64

08016e64 <_malloc_r>:
 8016e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e68:	1ccd      	adds	r5, r1, #3
 8016e6a:	f025 0503 	bic.w	r5, r5, #3
 8016e6e:	3508      	adds	r5, #8
 8016e70:	2d0c      	cmp	r5, #12
 8016e72:	bf38      	it	cc
 8016e74:	250c      	movcc	r5, #12
 8016e76:	2d00      	cmp	r5, #0
 8016e78:	4607      	mov	r7, r0
 8016e7a:	db01      	blt.n	8016e80 <_malloc_r+0x1c>
 8016e7c:	42a9      	cmp	r1, r5
 8016e7e:	d905      	bls.n	8016e8c <_malloc_r+0x28>
 8016e80:	230c      	movs	r3, #12
 8016e82:	603b      	str	r3, [r7, #0]
 8016e84:	2600      	movs	r6, #0
 8016e86:	4630      	mov	r0, r6
 8016e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e8c:	4e2e      	ldr	r6, [pc, #184]	; (8016f48 <_malloc_r+0xe4>)
 8016e8e:	f001 fccb 	bl	8018828 <__malloc_lock>
 8016e92:	6833      	ldr	r3, [r6, #0]
 8016e94:	461c      	mov	r4, r3
 8016e96:	bb34      	cbnz	r4, 8016ee6 <_malloc_r+0x82>
 8016e98:	4629      	mov	r1, r5
 8016e9a:	4638      	mov	r0, r7
 8016e9c:	f7ff ffc2 	bl	8016e24 <sbrk_aligned>
 8016ea0:	1c43      	adds	r3, r0, #1
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	d14d      	bne.n	8016f42 <_malloc_r+0xde>
 8016ea6:	6834      	ldr	r4, [r6, #0]
 8016ea8:	4626      	mov	r6, r4
 8016eaa:	2e00      	cmp	r6, #0
 8016eac:	d140      	bne.n	8016f30 <_malloc_r+0xcc>
 8016eae:	6823      	ldr	r3, [r4, #0]
 8016eb0:	4631      	mov	r1, r6
 8016eb2:	4638      	mov	r0, r7
 8016eb4:	eb04 0803 	add.w	r8, r4, r3
 8016eb8:	f000 fcca 	bl	8017850 <_sbrk_r>
 8016ebc:	4580      	cmp	r8, r0
 8016ebe:	d13a      	bne.n	8016f36 <_malloc_r+0xd2>
 8016ec0:	6821      	ldr	r1, [r4, #0]
 8016ec2:	3503      	adds	r5, #3
 8016ec4:	1a6d      	subs	r5, r5, r1
 8016ec6:	f025 0503 	bic.w	r5, r5, #3
 8016eca:	3508      	adds	r5, #8
 8016ecc:	2d0c      	cmp	r5, #12
 8016ece:	bf38      	it	cc
 8016ed0:	250c      	movcc	r5, #12
 8016ed2:	4629      	mov	r1, r5
 8016ed4:	4638      	mov	r0, r7
 8016ed6:	f7ff ffa5 	bl	8016e24 <sbrk_aligned>
 8016eda:	3001      	adds	r0, #1
 8016edc:	d02b      	beq.n	8016f36 <_malloc_r+0xd2>
 8016ede:	6823      	ldr	r3, [r4, #0]
 8016ee0:	442b      	add	r3, r5
 8016ee2:	6023      	str	r3, [r4, #0]
 8016ee4:	e00e      	b.n	8016f04 <_malloc_r+0xa0>
 8016ee6:	6822      	ldr	r2, [r4, #0]
 8016ee8:	1b52      	subs	r2, r2, r5
 8016eea:	d41e      	bmi.n	8016f2a <_malloc_r+0xc6>
 8016eec:	2a0b      	cmp	r2, #11
 8016eee:	d916      	bls.n	8016f1e <_malloc_r+0xba>
 8016ef0:	1961      	adds	r1, r4, r5
 8016ef2:	42a3      	cmp	r3, r4
 8016ef4:	6025      	str	r5, [r4, #0]
 8016ef6:	bf18      	it	ne
 8016ef8:	6059      	strne	r1, [r3, #4]
 8016efa:	6863      	ldr	r3, [r4, #4]
 8016efc:	bf08      	it	eq
 8016efe:	6031      	streq	r1, [r6, #0]
 8016f00:	5162      	str	r2, [r4, r5]
 8016f02:	604b      	str	r3, [r1, #4]
 8016f04:	4638      	mov	r0, r7
 8016f06:	f104 060b 	add.w	r6, r4, #11
 8016f0a:	f001 fc93 	bl	8018834 <__malloc_unlock>
 8016f0e:	f026 0607 	bic.w	r6, r6, #7
 8016f12:	1d23      	adds	r3, r4, #4
 8016f14:	1af2      	subs	r2, r6, r3
 8016f16:	d0b6      	beq.n	8016e86 <_malloc_r+0x22>
 8016f18:	1b9b      	subs	r3, r3, r6
 8016f1a:	50a3      	str	r3, [r4, r2]
 8016f1c:	e7b3      	b.n	8016e86 <_malloc_r+0x22>
 8016f1e:	6862      	ldr	r2, [r4, #4]
 8016f20:	42a3      	cmp	r3, r4
 8016f22:	bf0c      	ite	eq
 8016f24:	6032      	streq	r2, [r6, #0]
 8016f26:	605a      	strne	r2, [r3, #4]
 8016f28:	e7ec      	b.n	8016f04 <_malloc_r+0xa0>
 8016f2a:	4623      	mov	r3, r4
 8016f2c:	6864      	ldr	r4, [r4, #4]
 8016f2e:	e7b2      	b.n	8016e96 <_malloc_r+0x32>
 8016f30:	4634      	mov	r4, r6
 8016f32:	6876      	ldr	r6, [r6, #4]
 8016f34:	e7b9      	b.n	8016eaa <_malloc_r+0x46>
 8016f36:	230c      	movs	r3, #12
 8016f38:	603b      	str	r3, [r7, #0]
 8016f3a:	4638      	mov	r0, r7
 8016f3c:	f001 fc7a 	bl	8018834 <__malloc_unlock>
 8016f40:	e7a1      	b.n	8016e86 <_malloc_r+0x22>
 8016f42:	6025      	str	r5, [r4, #0]
 8016f44:	e7de      	b.n	8016f04 <_malloc_r+0xa0>
 8016f46:	bf00      	nop
 8016f48:	20002f60 	.word	0x20002f60

08016f4c <__cvt>:
 8016f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016f50:	ec55 4b10 	vmov	r4, r5, d0
 8016f54:	2d00      	cmp	r5, #0
 8016f56:	460e      	mov	r6, r1
 8016f58:	4619      	mov	r1, r3
 8016f5a:	462b      	mov	r3, r5
 8016f5c:	bfbb      	ittet	lt
 8016f5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016f62:	461d      	movlt	r5, r3
 8016f64:	2300      	movge	r3, #0
 8016f66:	232d      	movlt	r3, #45	; 0x2d
 8016f68:	700b      	strb	r3, [r1, #0]
 8016f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016f70:	4691      	mov	r9, r2
 8016f72:	f023 0820 	bic.w	r8, r3, #32
 8016f76:	bfbc      	itt	lt
 8016f78:	4622      	movlt	r2, r4
 8016f7a:	4614      	movlt	r4, r2
 8016f7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016f80:	d005      	beq.n	8016f8e <__cvt+0x42>
 8016f82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016f86:	d100      	bne.n	8016f8a <__cvt+0x3e>
 8016f88:	3601      	adds	r6, #1
 8016f8a:	2102      	movs	r1, #2
 8016f8c:	e000      	b.n	8016f90 <__cvt+0x44>
 8016f8e:	2103      	movs	r1, #3
 8016f90:	ab03      	add	r3, sp, #12
 8016f92:	9301      	str	r3, [sp, #4]
 8016f94:	ab02      	add	r3, sp, #8
 8016f96:	9300      	str	r3, [sp, #0]
 8016f98:	ec45 4b10 	vmov	d0, r4, r5
 8016f9c:	4653      	mov	r3, sl
 8016f9e:	4632      	mov	r2, r6
 8016fa0:	f000 fd32 	bl	8017a08 <_dtoa_r>
 8016fa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016fa8:	4607      	mov	r7, r0
 8016faa:	d102      	bne.n	8016fb2 <__cvt+0x66>
 8016fac:	f019 0f01 	tst.w	r9, #1
 8016fb0:	d022      	beq.n	8016ff8 <__cvt+0xac>
 8016fb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016fb6:	eb07 0906 	add.w	r9, r7, r6
 8016fba:	d110      	bne.n	8016fde <__cvt+0x92>
 8016fbc:	783b      	ldrb	r3, [r7, #0]
 8016fbe:	2b30      	cmp	r3, #48	; 0x30
 8016fc0:	d10a      	bne.n	8016fd8 <__cvt+0x8c>
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	4620      	mov	r0, r4
 8016fc8:	4629      	mov	r1, r5
 8016fca:	f7e9 fd95 	bl	8000af8 <__aeabi_dcmpeq>
 8016fce:	b918      	cbnz	r0, 8016fd8 <__cvt+0x8c>
 8016fd0:	f1c6 0601 	rsb	r6, r6, #1
 8016fd4:	f8ca 6000 	str.w	r6, [sl]
 8016fd8:	f8da 3000 	ldr.w	r3, [sl]
 8016fdc:	4499      	add	r9, r3
 8016fde:	2200      	movs	r2, #0
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	4620      	mov	r0, r4
 8016fe4:	4629      	mov	r1, r5
 8016fe6:	f7e9 fd87 	bl	8000af8 <__aeabi_dcmpeq>
 8016fea:	b108      	cbz	r0, 8016ff0 <__cvt+0xa4>
 8016fec:	f8cd 900c 	str.w	r9, [sp, #12]
 8016ff0:	2230      	movs	r2, #48	; 0x30
 8016ff2:	9b03      	ldr	r3, [sp, #12]
 8016ff4:	454b      	cmp	r3, r9
 8016ff6:	d307      	bcc.n	8017008 <__cvt+0xbc>
 8016ff8:	9b03      	ldr	r3, [sp, #12]
 8016ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016ffc:	1bdb      	subs	r3, r3, r7
 8016ffe:	4638      	mov	r0, r7
 8017000:	6013      	str	r3, [r2, #0]
 8017002:	b004      	add	sp, #16
 8017004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017008:	1c59      	adds	r1, r3, #1
 801700a:	9103      	str	r1, [sp, #12]
 801700c:	701a      	strb	r2, [r3, #0]
 801700e:	e7f0      	b.n	8016ff2 <__cvt+0xa6>

08017010 <__exponent>:
 8017010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017012:	4603      	mov	r3, r0
 8017014:	2900      	cmp	r1, #0
 8017016:	bfb8      	it	lt
 8017018:	4249      	neglt	r1, r1
 801701a:	f803 2b02 	strb.w	r2, [r3], #2
 801701e:	bfb4      	ite	lt
 8017020:	222d      	movlt	r2, #45	; 0x2d
 8017022:	222b      	movge	r2, #43	; 0x2b
 8017024:	2909      	cmp	r1, #9
 8017026:	7042      	strb	r2, [r0, #1]
 8017028:	dd2a      	ble.n	8017080 <__exponent+0x70>
 801702a:	f10d 0407 	add.w	r4, sp, #7
 801702e:	46a4      	mov	ip, r4
 8017030:	270a      	movs	r7, #10
 8017032:	46a6      	mov	lr, r4
 8017034:	460a      	mov	r2, r1
 8017036:	fb91 f6f7 	sdiv	r6, r1, r7
 801703a:	fb07 1516 	mls	r5, r7, r6, r1
 801703e:	3530      	adds	r5, #48	; 0x30
 8017040:	2a63      	cmp	r2, #99	; 0x63
 8017042:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8017046:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801704a:	4631      	mov	r1, r6
 801704c:	dcf1      	bgt.n	8017032 <__exponent+0x22>
 801704e:	3130      	adds	r1, #48	; 0x30
 8017050:	f1ae 0502 	sub.w	r5, lr, #2
 8017054:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017058:	1c44      	adds	r4, r0, #1
 801705a:	4629      	mov	r1, r5
 801705c:	4561      	cmp	r1, ip
 801705e:	d30a      	bcc.n	8017076 <__exponent+0x66>
 8017060:	f10d 0209 	add.w	r2, sp, #9
 8017064:	eba2 020e 	sub.w	r2, r2, lr
 8017068:	4565      	cmp	r5, ip
 801706a:	bf88      	it	hi
 801706c:	2200      	movhi	r2, #0
 801706e:	4413      	add	r3, r2
 8017070:	1a18      	subs	r0, r3, r0
 8017072:	b003      	add	sp, #12
 8017074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017076:	f811 2b01 	ldrb.w	r2, [r1], #1
 801707a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801707e:	e7ed      	b.n	801705c <__exponent+0x4c>
 8017080:	2330      	movs	r3, #48	; 0x30
 8017082:	3130      	adds	r1, #48	; 0x30
 8017084:	7083      	strb	r3, [r0, #2]
 8017086:	70c1      	strb	r1, [r0, #3]
 8017088:	1d03      	adds	r3, r0, #4
 801708a:	e7f1      	b.n	8017070 <__exponent+0x60>

0801708c <_printf_float>:
 801708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017090:	ed2d 8b02 	vpush	{d8}
 8017094:	b08d      	sub	sp, #52	; 0x34
 8017096:	460c      	mov	r4, r1
 8017098:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801709c:	4616      	mov	r6, r2
 801709e:	461f      	mov	r7, r3
 80170a0:	4605      	mov	r5, r0
 80170a2:	f001 fba7 	bl	80187f4 <_localeconv_r>
 80170a6:	f8d0 a000 	ldr.w	sl, [r0]
 80170aa:	4650      	mov	r0, sl
 80170ac:	f7e9 f8a8 	bl	8000200 <strlen>
 80170b0:	2300      	movs	r3, #0
 80170b2:	930a      	str	r3, [sp, #40]	; 0x28
 80170b4:	6823      	ldr	r3, [r4, #0]
 80170b6:	9305      	str	r3, [sp, #20]
 80170b8:	f8d8 3000 	ldr.w	r3, [r8]
 80170bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80170c0:	3307      	adds	r3, #7
 80170c2:	f023 0307 	bic.w	r3, r3, #7
 80170c6:	f103 0208 	add.w	r2, r3, #8
 80170ca:	f8c8 2000 	str.w	r2, [r8]
 80170ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80170d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80170da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80170de:	9307      	str	r3, [sp, #28]
 80170e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80170e4:	ee08 0a10 	vmov	s16, r0
 80170e8:	4b9f      	ldr	r3, [pc, #636]	; (8017368 <_printf_float+0x2dc>)
 80170ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80170ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80170f2:	f7e9 fd33 	bl	8000b5c <__aeabi_dcmpun>
 80170f6:	bb88      	cbnz	r0, 801715c <_printf_float+0xd0>
 80170f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80170fc:	4b9a      	ldr	r3, [pc, #616]	; (8017368 <_printf_float+0x2dc>)
 80170fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017102:	f7e9 fd0d 	bl	8000b20 <__aeabi_dcmple>
 8017106:	bb48      	cbnz	r0, 801715c <_printf_float+0xd0>
 8017108:	2200      	movs	r2, #0
 801710a:	2300      	movs	r3, #0
 801710c:	4640      	mov	r0, r8
 801710e:	4649      	mov	r1, r9
 8017110:	f7e9 fcfc 	bl	8000b0c <__aeabi_dcmplt>
 8017114:	b110      	cbz	r0, 801711c <_printf_float+0x90>
 8017116:	232d      	movs	r3, #45	; 0x2d
 8017118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801711c:	4b93      	ldr	r3, [pc, #588]	; (801736c <_printf_float+0x2e0>)
 801711e:	4894      	ldr	r0, [pc, #592]	; (8017370 <_printf_float+0x2e4>)
 8017120:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017124:	bf94      	ite	ls
 8017126:	4698      	movls	r8, r3
 8017128:	4680      	movhi	r8, r0
 801712a:	2303      	movs	r3, #3
 801712c:	6123      	str	r3, [r4, #16]
 801712e:	9b05      	ldr	r3, [sp, #20]
 8017130:	f023 0204 	bic.w	r2, r3, #4
 8017134:	6022      	str	r2, [r4, #0]
 8017136:	f04f 0900 	mov.w	r9, #0
 801713a:	9700      	str	r7, [sp, #0]
 801713c:	4633      	mov	r3, r6
 801713e:	aa0b      	add	r2, sp, #44	; 0x2c
 8017140:	4621      	mov	r1, r4
 8017142:	4628      	mov	r0, r5
 8017144:	f000 f9d8 	bl	80174f8 <_printf_common>
 8017148:	3001      	adds	r0, #1
 801714a:	f040 8090 	bne.w	801726e <_printf_float+0x1e2>
 801714e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017152:	b00d      	add	sp, #52	; 0x34
 8017154:	ecbd 8b02 	vpop	{d8}
 8017158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801715c:	4642      	mov	r2, r8
 801715e:	464b      	mov	r3, r9
 8017160:	4640      	mov	r0, r8
 8017162:	4649      	mov	r1, r9
 8017164:	f7e9 fcfa 	bl	8000b5c <__aeabi_dcmpun>
 8017168:	b140      	cbz	r0, 801717c <_printf_float+0xf0>
 801716a:	464b      	mov	r3, r9
 801716c:	2b00      	cmp	r3, #0
 801716e:	bfbc      	itt	lt
 8017170:	232d      	movlt	r3, #45	; 0x2d
 8017172:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017176:	487f      	ldr	r0, [pc, #508]	; (8017374 <_printf_float+0x2e8>)
 8017178:	4b7f      	ldr	r3, [pc, #508]	; (8017378 <_printf_float+0x2ec>)
 801717a:	e7d1      	b.n	8017120 <_printf_float+0x94>
 801717c:	6863      	ldr	r3, [r4, #4]
 801717e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017182:	9206      	str	r2, [sp, #24]
 8017184:	1c5a      	adds	r2, r3, #1
 8017186:	d13f      	bne.n	8017208 <_printf_float+0x17c>
 8017188:	2306      	movs	r3, #6
 801718a:	6063      	str	r3, [r4, #4]
 801718c:	9b05      	ldr	r3, [sp, #20]
 801718e:	6861      	ldr	r1, [r4, #4]
 8017190:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017194:	2300      	movs	r3, #0
 8017196:	9303      	str	r3, [sp, #12]
 8017198:	ab0a      	add	r3, sp, #40	; 0x28
 801719a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801719e:	ab09      	add	r3, sp, #36	; 0x24
 80171a0:	ec49 8b10 	vmov	d0, r8, r9
 80171a4:	9300      	str	r3, [sp, #0]
 80171a6:	6022      	str	r2, [r4, #0]
 80171a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80171ac:	4628      	mov	r0, r5
 80171ae:	f7ff fecd 	bl	8016f4c <__cvt>
 80171b2:	9b06      	ldr	r3, [sp, #24]
 80171b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80171b6:	2b47      	cmp	r3, #71	; 0x47
 80171b8:	4680      	mov	r8, r0
 80171ba:	d108      	bne.n	80171ce <_printf_float+0x142>
 80171bc:	1cc8      	adds	r0, r1, #3
 80171be:	db02      	blt.n	80171c6 <_printf_float+0x13a>
 80171c0:	6863      	ldr	r3, [r4, #4]
 80171c2:	4299      	cmp	r1, r3
 80171c4:	dd41      	ble.n	801724a <_printf_float+0x1be>
 80171c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80171ca:	fa5f fb8b 	uxtb.w	fp, fp
 80171ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80171d2:	d820      	bhi.n	8017216 <_printf_float+0x18a>
 80171d4:	3901      	subs	r1, #1
 80171d6:	465a      	mov	r2, fp
 80171d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80171dc:	9109      	str	r1, [sp, #36]	; 0x24
 80171de:	f7ff ff17 	bl	8017010 <__exponent>
 80171e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80171e4:	1813      	adds	r3, r2, r0
 80171e6:	2a01      	cmp	r2, #1
 80171e8:	4681      	mov	r9, r0
 80171ea:	6123      	str	r3, [r4, #16]
 80171ec:	dc02      	bgt.n	80171f4 <_printf_float+0x168>
 80171ee:	6822      	ldr	r2, [r4, #0]
 80171f0:	07d2      	lsls	r2, r2, #31
 80171f2:	d501      	bpl.n	80171f8 <_printf_float+0x16c>
 80171f4:	3301      	adds	r3, #1
 80171f6:	6123      	str	r3, [r4, #16]
 80171f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d09c      	beq.n	801713a <_printf_float+0xae>
 8017200:	232d      	movs	r3, #45	; 0x2d
 8017202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017206:	e798      	b.n	801713a <_printf_float+0xae>
 8017208:	9a06      	ldr	r2, [sp, #24]
 801720a:	2a47      	cmp	r2, #71	; 0x47
 801720c:	d1be      	bne.n	801718c <_printf_float+0x100>
 801720e:	2b00      	cmp	r3, #0
 8017210:	d1bc      	bne.n	801718c <_printf_float+0x100>
 8017212:	2301      	movs	r3, #1
 8017214:	e7b9      	b.n	801718a <_printf_float+0xfe>
 8017216:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801721a:	d118      	bne.n	801724e <_printf_float+0x1c2>
 801721c:	2900      	cmp	r1, #0
 801721e:	6863      	ldr	r3, [r4, #4]
 8017220:	dd0b      	ble.n	801723a <_printf_float+0x1ae>
 8017222:	6121      	str	r1, [r4, #16]
 8017224:	b913      	cbnz	r3, 801722c <_printf_float+0x1a0>
 8017226:	6822      	ldr	r2, [r4, #0]
 8017228:	07d0      	lsls	r0, r2, #31
 801722a:	d502      	bpl.n	8017232 <_printf_float+0x1a6>
 801722c:	3301      	adds	r3, #1
 801722e:	440b      	add	r3, r1
 8017230:	6123      	str	r3, [r4, #16]
 8017232:	65a1      	str	r1, [r4, #88]	; 0x58
 8017234:	f04f 0900 	mov.w	r9, #0
 8017238:	e7de      	b.n	80171f8 <_printf_float+0x16c>
 801723a:	b913      	cbnz	r3, 8017242 <_printf_float+0x1b6>
 801723c:	6822      	ldr	r2, [r4, #0]
 801723e:	07d2      	lsls	r2, r2, #31
 8017240:	d501      	bpl.n	8017246 <_printf_float+0x1ba>
 8017242:	3302      	adds	r3, #2
 8017244:	e7f4      	b.n	8017230 <_printf_float+0x1a4>
 8017246:	2301      	movs	r3, #1
 8017248:	e7f2      	b.n	8017230 <_printf_float+0x1a4>
 801724a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801724e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017250:	4299      	cmp	r1, r3
 8017252:	db05      	blt.n	8017260 <_printf_float+0x1d4>
 8017254:	6823      	ldr	r3, [r4, #0]
 8017256:	6121      	str	r1, [r4, #16]
 8017258:	07d8      	lsls	r0, r3, #31
 801725a:	d5ea      	bpl.n	8017232 <_printf_float+0x1a6>
 801725c:	1c4b      	adds	r3, r1, #1
 801725e:	e7e7      	b.n	8017230 <_printf_float+0x1a4>
 8017260:	2900      	cmp	r1, #0
 8017262:	bfd4      	ite	le
 8017264:	f1c1 0202 	rsble	r2, r1, #2
 8017268:	2201      	movgt	r2, #1
 801726a:	4413      	add	r3, r2
 801726c:	e7e0      	b.n	8017230 <_printf_float+0x1a4>
 801726e:	6823      	ldr	r3, [r4, #0]
 8017270:	055a      	lsls	r2, r3, #21
 8017272:	d407      	bmi.n	8017284 <_printf_float+0x1f8>
 8017274:	6923      	ldr	r3, [r4, #16]
 8017276:	4642      	mov	r2, r8
 8017278:	4631      	mov	r1, r6
 801727a:	4628      	mov	r0, r5
 801727c:	47b8      	blx	r7
 801727e:	3001      	adds	r0, #1
 8017280:	d12c      	bne.n	80172dc <_printf_float+0x250>
 8017282:	e764      	b.n	801714e <_printf_float+0xc2>
 8017284:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017288:	f240 80e0 	bls.w	801744c <_printf_float+0x3c0>
 801728c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017290:	2200      	movs	r2, #0
 8017292:	2300      	movs	r3, #0
 8017294:	f7e9 fc30 	bl	8000af8 <__aeabi_dcmpeq>
 8017298:	2800      	cmp	r0, #0
 801729a:	d034      	beq.n	8017306 <_printf_float+0x27a>
 801729c:	4a37      	ldr	r2, [pc, #220]	; (801737c <_printf_float+0x2f0>)
 801729e:	2301      	movs	r3, #1
 80172a0:	4631      	mov	r1, r6
 80172a2:	4628      	mov	r0, r5
 80172a4:	47b8      	blx	r7
 80172a6:	3001      	adds	r0, #1
 80172a8:	f43f af51 	beq.w	801714e <_printf_float+0xc2>
 80172ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80172b0:	429a      	cmp	r2, r3
 80172b2:	db02      	blt.n	80172ba <_printf_float+0x22e>
 80172b4:	6823      	ldr	r3, [r4, #0]
 80172b6:	07d8      	lsls	r0, r3, #31
 80172b8:	d510      	bpl.n	80172dc <_printf_float+0x250>
 80172ba:	ee18 3a10 	vmov	r3, s16
 80172be:	4652      	mov	r2, sl
 80172c0:	4631      	mov	r1, r6
 80172c2:	4628      	mov	r0, r5
 80172c4:	47b8      	blx	r7
 80172c6:	3001      	adds	r0, #1
 80172c8:	f43f af41 	beq.w	801714e <_printf_float+0xc2>
 80172cc:	f04f 0800 	mov.w	r8, #0
 80172d0:	f104 091a 	add.w	r9, r4, #26
 80172d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172d6:	3b01      	subs	r3, #1
 80172d8:	4543      	cmp	r3, r8
 80172da:	dc09      	bgt.n	80172f0 <_printf_float+0x264>
 80172dc:	6823      	ldr	r3, [r4, #0]
 80172de:	079b      	lsls	r3, r3, #30
 80172e0:	f100 8105 	bmi.w	80174ee <_printf_float+0x462>
 80172e4:	68e0      	ldr	r0, [r4, #12]
 80172e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172e8:	4298      	cmp	r0, r3
 80172ea:	bfb8      	it	lt
 80172ec:	4618      	movlt	r0, r3
 80172ee:	e730      	b.n	8017152 <_printf_float+0xc6>
 80172f0:	2301      	movs	r3, #1
 80172f2:	464a      	mov	r2, r9
 80172f4:	4631      	mov	r1, r6
 80172f6:	4628      	mov	r0, r5
 80172f8:	47b8      	blx	r7
 80172fa:	3001      	adds	r0, #1
 80172fc:	f43f af27 	beq.w	801714e <_printf_float+0xc2>
 8017300:	f108 0801 	add.w	r8, r8, #1
 8017304:	e7e6      	b.n	80172d4 <_printf_float+0x248>
 8017306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017308:	2b00      	cmp	r3, #0
 801730a:	dc39      	bgt.n	8017380 <_printf_float+0x2f4>
 801730c:	4a1b      	ldr	r2, [pc, #108]	; (801737c <_printf_float+0x2f0>)
 801730e:	2301      	movs	r3, #1
 8017310:	4631      	mov	r1, r6
 8017312:	4628      	mov	r0, r5
 8017314:	47b8      	blx	r7
 8017316:	3001      	adds	r0, #1
 8017318:	f43f af19 	beq.w	801714e <_printf_float+0xc2>
 801731c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017320:	4313      	orrs	r3, r2
 8017322:	d102      	bne.n	801732a <_printf_float+0x29e>
 8017324:	6823      	ldr	r3, [r4, #0]
 8017326:	07d9      	lsls	r1, r3, #31
 8017328:	d5d8      	bpl.n	80172dc <_printf_float+0x250>
 801732a:	ee18 3a10 	vmov	r3, s16
 801732e:	4652      	mov	r2, sl
 8017330:	4631      	mov	r1, r6
 8017332:	4628      	mov	r0, r5
 8017334:	47b8      	blx	r7
 8017336:	3001      	adds	r0, #1
 8017338:	f43f af09 	beq.w	801714e <_printf_float+0xc2>
 801733c:	f04f 0900 	mov.w	r9, #0
 8017340:	f104 0a1a 	add.w	sl, r4, #26
 8017344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017346:	425b      	negs	r3, r3
 8017348:	454b      	cmp	r3, r9
 801734a:	dc01      	bgt.n	8017350 <_printf_float+0x2c4>
 801734c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801734e:	e792      	b.n	8017276 <_printf_float+0x1ea>
 8017350:	2301      	movs	r3, #1
 8017352:	4652      	mov	r2, sl
 8017354:	4631      	mov	r1, r6
 8017356:	4628      	mov	r0, r5
 8017358:	47b8      	blx	r7
 801735a:	3001      	adds	r0, #1
 801735c:	f43f aef7 	beq.w	801714e <_printf_float+0xc2>
 8017360:	f109 0901 	add.w	r9, r9, #1
 8017364:	e7ee      	b.n	8017344 <_printf_float+0x2b8>
 8017366:	bf00      	nop
 8017368:	7fefffff 	.word	0x7fefffff
 801736c:	0801a0b4 	.word	0x0801a0b4
 8017370:	0801a0b8 	.word	0x0801a0b8
 8017374:	0801a0c0 	.word	0x0801a0c0
 8017378:	0801a0bc 	.word	0x0801a0bc
 801737c:	0801a0c4 	.word	0x0801a0c4
 8017380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017384:	429a      	cmp	r2, r3
 8017386:	bfa8      	it	ge
 8017388:	461a      	movge	r2, r3
 801738a:	2a00      	cmp	r2, #0
 801738c:	4691      	mov	r9, r2
 801738e:	dc37      	bgt.n	8017400 <_printf_float+0x374>
 8017390:	f04f 0b00 	mov.w	fp, #0
 8017394:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017398:	f104 021a 	add.w	r2, r4, #26
 801739c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801739e:	9305      	str	r3, [sp, #20]
 80173a0:	eba3 0309 	sub.w	r3, r3, r9
 80173a4:	455b      	cmp	r3, fp
 80173a6:	dc33      	bgt.n	8017410 <_printf_float+0x384>
 80173a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80173ac:	429a      	cmp	r2, r3
 80173ae:	db3b      	blt.n	8017428 <_printf_float+0x39c>
 80173b0:	6823      	ldr	r3, [r4, #0]
 80173b2:	07da      	lsls	r2, r3, #31
 80173b4:	d438      	bmi.n	8017428 <_printf_float+0x39c>
 80173b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173b8:	9a05      	ldr	r2, [sp, #20]
 80173ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80173bc:	1a9a      	subs	r2, r3, r2
 80173be:	eba3 0901 	sub.w	r9, r3, r1
 80173c2:	4591      	cmp	r9, r2
 80173c4:	bfa8      	it	ge
 80173c6:	4691      	movge	r9, r2
 80173c8:	f1b9 0f00 	cmp.w	r9, #0
 80173cc:	dc35      	bgt.n	801743a <_printf_float+0x3ae>
 80173ce:	f04f 0800 	mov.w	r8, #0
 80173d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80173d6:	f104 0a1a 	add.w	sl, r4, #26
 80173da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80173de:	1a9b      	subs	r3, r3, r2
 80173e0:	eba3 0309 	sub.w	r3, r3, r9
 80173e4:	4543      	cmp	r3, r8
 80173e6:	f77f af79 	ble.w	80172dc <_printf_float+0x250>
 80173ea:	2301      	movs	r3, #1
 80173ec:	4652      	mov	r2, sl
 80173ee:	4631      	mov	r1, r6
 80173f0:	4628      	mov	r0, r5
 80173f2:	47b8      	blx	r7
 80173f4:	3001      	adds	r0, #1
 80173f6:	f43f aeaa 	beq.w	801714e <_printf_float+0xc2>
 80173fa:	f108 0801 	add.w	r8, r8, #1
 80173fe:	e7ec      	b.n	80173da <_printf_float+0x34e>
 8017400:	4613      	mov	r3, r2
 8017402:	4631      	mov	r1, r6
 8017404:	4642      	mov	r2, r8
 8017406:	4628      	mov	r0, r5
 8017408:	47b8      	blx	r7
 801740a:	3001      	adds	r0, #1
 801740c:	d1c0      	bne.n	8017390 <_printf_float+0x304>
 801740e:	e69e      	b.n	801714e <_printf_float+0xc2>
 8017410:	2301      	movs	r3, #1
 8017412:	4631      	mov	r1, r6
 8017414:	4628      	mov	r0, r5
 8017416:	9205      	str	r2, [sp, #20]
 8017418:	47b8      	blx	r7
 801741a:	3001      	adds	r0, #1
 801741c:	f43f ae97 	beq.w	801714e <_printf_float+0xc2>
 8017420:	9a05      	ldr	r2, [sp, #20]
 8017422:	f10b 0b01 	add.w	fp, fp, #1
 8017426:	e7b9      	b.n	801739c <_printf_float+0x310>
 8017428:	ee18 3a10 	vmov	r3, s16
 801742c:	4652      	mov	r2, sl
 801742e:	4631      	mov	r1, r6
 8017430:	4628      	mov	r0, r5
 8017432:	47b8      	blx	r7
 8017434:	3001      	adds	r0, #1
 8017436:	d1be      	bne.n	80173b6 <_printf_float+0x32a>
 8017438:	e689      	b.n	801714e <_printf_float+0xc2>
 801743a:	9a05      	ldr	r2, [sp, #20]
 801743c:	464b      	mov	r3, r9
 801743e:	4442      	add	r2, r8
 8017440:	4631      	mov	r1, r6
 8017442:	4628      	mov	r0, r5
 8017444:	47b8      	blx	r7
 8017446:	3001      	adds	r0, #1
 8017448:	d1c1      	bne.n	80173ce <_printf_float+0x342>
 801744a:	e680      	b.n	801714e <_printf_float+0xc2>
 801744c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801744e:	2a01      	cmp	r2, #1
 8017450:	dc01      	bgt.n	8017456 <_printf_float+0x3ca>
 8017452:	07db      	lsls	r3, r3, #31
 8017454:	d538      	bpl.n	80174c8 <_printf_float+0x43c>
 8017456:	2301      	movs	r3, #1
 8017458:	4642      	mov	r2, r8
 801745a:	4631      	mov	r1, r6
 801745c:	4628      	mov	r0, r5
 801745e:	47b8      	blx	r7
 8017460:	3001      	adds	r0, #1
 8017462:	f43f ae74 	beq.w	801714e <_printf_float+0xc2>
 8017466:	ee18 3a10 	vmov	r3, s16
 801746a:	4652      	mov	r2, sl
 801746c:	4631      	mov	r1, r6
 801746e:	4628      	mov	r0, r5
 8017470:	47b8      	blx	r7
 8017472:	3001      	adds	r0, #1
 8017474:	f43f ae6b 	beq.w	801714e <_printf_float+0xc2>
 8017478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801747c:	2200      	movs	r2, #0
 801747e:	2300      	movs	r3, #0
 8017480:	f7e9 fb3a 	bl	8000af8 <__aeabi_dcmpeq>
 8017484:	b9d8      	cbnz	r0, 80174be <_printf_float+0x432>
 8017486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017488:	f108 0201 	add.w	r2, r8, #1
 801748c:	3b01      	subs	r3, #1
 801748e:	4631      	mov	r1, r6
 8017490:	4628      	mov	r0, r5
 8017492:	47b8      	blx	r7
 8017494:	3001      	adds	r0, #1
 8017496:	d10e      	bne.n	80174b6 <_printf_float+0x42a>
 8017498:	e659      	b.n	801714e <_printf_float+0xc2>
 801749a:	2301      	movs	r3, #1
 801749c:	4652      	mov	r2, sl
 801749e:	4631      	mov	r1, r6
 80174a0:	4628      	mov	r0, r5
 80174a2:	47b8      	blx	r7
 80174a4:	3001      	adds	r0, #1
 80174a6:	f43f ae52 	beq.w	801714e <_printf_float+0xc2>
 80174aa:	f108 0801 	add.w	r8, r8, #1
 80174ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174b0:	3b01      	subs	r3, #1
 80174b2:	4543      	cmp	r3, r8
 80174b4:	dcf1      	bgt.n	801749a <_printf_float+0x40e>
 80174b6:	464b      	mov	r3, r9
 80174b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80174bc:	e6dc      	b.n	8017278 <_printf_float+0x1ec>
 80174be:	f04f 0800 	mov.w	r8, #0
 80174c2:	f104 0a1a 	add.w	sl, r4, #26
 80174c6:	e7f2      	b.n	80174ae <_printf_float+0x422>
 80174c8:	2301      	movs	r3, #1
 80174ca:	4642      	mov	r2, r8
 80174cc:	e7df      	b.n	801748e <_printf_float+0x402>
 80174ce:	2301      	movs	r3, #1
 80174d0:	464a      	mov	r2, r9
 80174d2:	4631      	mov	r1, r6
 80174d4:	4628      	mov	r0, r5
 80174d6:	47b8      	blx	r7
 80174d8:	3001      	adds	r0, #1
 80174da:	f43f ae38 	beq.w	801714e <_printf_float+0xc2>
 80174de:	f108 0801 	add.w	r8, r8, #1
 80174e2:	68e3      	ldr	r3, [r4, #12]
 80174e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174e6:	1a5b      	subs	r3, r3, r1
 80174e8:	4543      	cmp	r3, r8
 80174ea:	dcf0      	bgt.n	80174ce <_printf_float+0x442>
 80174ec:	e6fa      	b.n	80172e4 <_printf_float+0x258>
 80174ee:	f04f 0800 	mov.w	r8, #0
 80174f2:	f104 0919 	add.w	r9, r4, #25
 80174f6:	e7f4      	b.n	80174e2 <_printf_float+0x456>

080174f8 <_printf_common>:
 80174f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174fc:	4616      	mov	r6, r2
 80174fe:	4699      	mov	r9, r3
 8017500:	688a      	ldr	r2, [r1, #8]
 8017502:	690b      	ldr	r3, [r1, #16]
 8017504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017508:	4293      	cmp	r3, r2
 801750a:	bfb8      	it	lt
 801750c:	4613      	movlt	r3, r2
 801750e:	6033      	str	r3, [r6, #0]
 8017510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017514:	4607      	mov	r7, r0
 8017516:	460c      	mov	r4, r1
 8017518:	b10a      	cbz	r2, 801751e <_printf_common+0x26>
 801751a:	3301      	adds	r3, #1
 801751c:	6033      	str	r3, [r6, #0]
 801751e:	6823      	ldr	r3, [r4, #0]
 8017520:	0699      	lsls	r1, r3, #26
 8017522:	bf42      	ittt	mi
 8017524:	6833      	ldrmi	r3, [r6, #0]
 8017526:	3302      	addmi	r3, #2
 8017528:	6033      	strmi	r3, [r6, #0]
 801752a:	6825      	ldr	r5, [r4, #0]
 801752c:	f015 0506 	ands.w	r5, r5, #6
 8017530:	d106      	bne.n	8017540 <_printf_common+0x48>
 8017532:	f104 0a19 	add.w	sl, r4, #25
 8017536:	68e3      	ldr	r3, [r4, #12]
 8017538:	6832      	ldr	r2, [r6, #0]
 801753a:	1a9b      	subs	r3, r3, r2
 801753c:	42ab      	cmp	r3, r5
 801753e:	dc26      	bgt.n	801758e <_printf_common+0x96>
 8017540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017544:	1e13      	subs	r3, r2, #0
 8017546:	6822      	ldr	r2, [r4, #0]
 8017548:	bf18      	it	ne
 801754a:	2301      	movne	r3, #1
 801754c:	0692      	lsls	r2, r2, #26
 801754e:	d42b      	bmi.n	80175a8 <_printf_common+0xb0>
 8017550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017554:	4649      	mov	r1, r9
 8017556:	4638      	mov	r0, r7
 8017558:	47c0      	blx	r8
 801755a:	3001      	adds	r0, #1
 801755c:	d01e      	beq.n	801759c <_printf_common+0xa4>
 801755e:	6823      	ldr	r3, [r4, #0]
 8017560:	68e5      	ldr	r5, [r4, #12]
 8017562:	6832      	ldr	r2, [r6, #0]
 8017564:	f003 0306 	and.w	r3, r3, #6
 8017568:	2b04      	cmp	r3, #4
 801756a:	bf08      	it	eq
 801756c:	1aad      	subeq	r5, r5, r2
 801756e:	68a3      	ldr	r3, [r4, #8]
 8017570:	6922      	ldr	r2, [r4, #16]
 8017572:	bf0c      	ite	eq
 8017574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017578:	2500      	movne	r5, #0
 801757a:	4293      	cmp	r3, r2
 801757c:	bfc4      	itt	gt
 801757e:	1a9b      	subgt	r3, r3, r2
 8017580:	18ed      	addgt	r5, r5, r3
 8017582:	2600      	movs	r6, #0
 8017584:	341a      	adds	r4, #26
 8017586:	42b5      	cmp	r5, r6
 8017588:	d11a      	bne.n	80175c0 <_printf_common+0xc8>
 801758a:	2000      	movs	r0, #0
 801758c:	e008      	b.n	80175a0 <_printf_common+0xa8>
 801758e:	2301      	movs	r3, #1
 8017590:	4652      	mov	r2, sl
 8017592:	4649      	mov	r1, r9
 8017594:	4638      	mov	r0, r7
 8017596:	47c0      	blx	r8
 8017598:	3001      	adds	r0, #1
 801759a:	d103      	bne.n	80175a4 <_printf_common+0xac>
 801759c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175a4:	3501      	adds	r5, #1
 80175a6:	e7c6      	b.n	8017536 <_printf_common+0x3e>
 80175a8:	18e1      	adds	r1, r4, r3
 80175aa:	1c5a      	adds	r2, r3, #1
 80175ac:	2030      	movs	r0, #48	; 0x30
 80175ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80175b2:	4422      	add	r2, r4
 80175b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80175b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80175bc:	3302      	adds	r3, #2
 80175be:	e7c7      	b.n	8017550 <_printf_common+0x58>
 80175c0:	2301      	movs	r3, #1
 80175c2:	4622      	mov	r2, r4
 80175c4:	4649      	mov	r1, r9
 80175c6:	4638      	mov	r0, r7
 80175c8:	47c0      	blx	r8
 80175ca:	3001      	adds	r0, #1
 80175cc:	d0e6      	beq.n	801759c <_printf_common+0xa4>
 80175ce:	3601      	adds	r6, #1
 80175d0:	e7d9      	b.n	8017586 <_printf_common+0x8e>
	...

080175d4 <_printf_i>:
 80175d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80175d8:	7e0f      	ldrb	r7, [r1, #24]
 80175da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80175dc:	2f78      	cmp	r7, #120	; 0x78
 80175de:	4691      	mov	r9, r2
 80175e0:	4680      	mov	r8, r0
 80175e2:	460c      	mov	r4, r1
 80175e4:	469a      	mov	sl, r3
 80175e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80175ea:	d807      	bhi.n	80175fc <_printf_i+0x28>
 80175ec:	2f62      	cmp	r7, #98	; 0x62
 80175ee:	d80a      	bhi.n	8017606 <_printf_i+0x32>
 80175f0:	2f00      	cmp	r7, #0
 80175f2:	f000 80d8 	beq.w	80177a6 <_printf_i+0x1d2>
 80175f6:	2f58      	cmp	r7, #88	; 0x58
 80175f8:	f000 80a3 	beq.w	8017742 <_printf_i+0x16e>
 80175fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017604:	e03a      	b.n	801767c <_printf_i+0xa8>
 8017606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801760a:	2b15      	cmp	r3, #21
 801760c:	d8f6      	bhi.n	80175fc <_printf_i+0x28>
 801760e:	a101      	add	r1, pc, #4	; (adr r1, 8017614 <_printf_i+0x40>)
 8017610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017614:	0801766d 	.word	0x0801766d
 8017618:	08017681 	.word	0x08017681
 801761c:	080175fd 	.word	0x080175fd
 8017620:	080175fd 	.word	0x080175fd
 8017624:	080175fd 	.word	0x080175fd
 8017628:	080175fd 	.word	0x080175fd
 801762c:	08017681 	.word	0x08017681
 8017630:	080175fd 	.word	0x080175fd
 8017634:	080175fd 	.word	0x080175fd
 8017638:	080175fd 	.word	0x080175fd
 801763c:	080175fd 	.word	0x080175fd
 8017640:	0801778d 	.word	0x0801778d
 8017644:	080176b1 	.word	0x080176b1
 8017648:	0801776f 	.word	0x0801776f
 801764c:	080175fd 	.word	0x080175fd
 8017650:	080175fd 	.word	0x080175fd
 8017654:	080177af 	.word	0x080177af
 8017658:	080175fd 	.word	0x080175fd
 801765c:	080176b1 	.word	0x080176b1
 8017660:	080175fd 	.word	0x080175fd
 8017664:	080175fd 	.word	0x080175fd
 8017668:	08017777 	.word	0x08017777
 801766c:	682b      	ldr	r3, [r5, #0]
 801766e:	1d1a      	adds	r2, r3, #4
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	602a      	str	r2, [r5, #0]
 8017674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801767c:	2301      	movs	r3, #1
 801767e:	e0a3      	b.n	80177c8 <_printf_i+0x1f4>
 8017680:	6820      	ldr	r0, [r4, #0]
 8017682:	6829      	ldr	r1, [r5, #0]
 8017684:	0606      	lsls	r6, r0, #24
 8017686:	f101 0304 	add.w	r3, r1, #4
 801768a:	d50a      	bpl.n	80176a2 <_printf_i+0xce>
 801768c:	680e      	ldr	r6, [r1, #0]
 801768e:	602b      	str	r3, [r5, #0]
 8017690:	2e00      	cmp	r6, #0
 8017692:	da03      	bge.n	801769c <_printf_i+0xc8>
 8017694:	232d      	movs	r3, #45	; 0x2d
 8017696:	4276      	negs	r6, r6
 8017698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801769c:	485e      	ldr	r0, [pc, #376]	; (8017818 <_printf_i+0x244>)
 801769e:	230a      	movs	r3, #10
 80176a0:	e019      	b.n	80176d6 <_printf_i+0x102>
 80176a2:	680e      	ldr	r6, [r1, #0]
 80176a4:	602b      	str	r3, [r5, #0]
 80176a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80176aa:	bf18      	it	ne
 80176ac:	b236      	sxthne	r6, r6
 80176ae:	e7ef      	b.n	8017690 <_printf_i+0xbc>
 80176b0:	682b      	ldr	r3, [r5, #0]
 80176b2:	6820      	ldr	r0, [r4, #0]
 80176b4:	1d19      	adds	r1, r3, #4
 80176b6:	6029      	str	r1, [r5, #0]
 80176b8:	0601      	lsls	r1, r0, #24
 80176ba:	d501      	bpl.n	80176c0 <_printf_i+0xec>
 80176bc:	681e      	ldr	r6, [r3, #0]
 80176be:	e002      	b.n	80176c6 <_printf_i+0xf2>
 80176c0:	0646      	lsls	r6, r0, #25
 80176c2:	d5fb      	bpl.n	80176bc <_printf_i+0xe8>
 80176c4:	881e      	ldrh	r6, [r3, #0]
 80176c6:	4854      	ldr	r0, [pc, #336]	; (8017818 <_printf_i+0x244>)
 80176c8:	2f6f      	cmp	r7, #111	; 0x6f
 80176ca:	bf0c      	ite	eq
 80176cc:	2308      	moveq	r3, #8
 80176ce:	230a      	movne	r3, #10
 80176d0:	2100      	movs	r1, #0
 80176d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80176d6:	6865      	ldr	r5, [r4, #4]
 80176d8:	60a5      	str	r5, [r4, #8]
 80176da:	2d00      	cmp	r5, #0
 80176dc:	bfa2      	ittt	ge
 80176de:	6821      	ldrge	r1, [r4, #0]
 80176e0:	f021 0104 	bicge.w	r1, r1, #4
 80176e4:	6021      	strge	r1, [r4, #0]
 80176e6:	b90e      	cbnz	r6, 80176ec <_printf_i+0x118>
 80176e8:	2d00      	cmp	r5, #0
 80176ea:	d04d      	beq.n	8017788 <_printf_i+0x1b4>
 80176ec:	4615      	mov	r5, r2
 80176ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80176f2:	fb03 6711 	mls	r7, r3, r1, r6
 80176f6:	5dc7      	ldrb	r7, [r0, r7]
 80176f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80176fc:	4637      	mov	r7, r6
 80176fe:	42bb      	cmp	r3, r7
 8017700:	460e      	mov	r6, r1
 8017702:	d9f4      	bls.n	80176ee <_printf_i+0x11a>
 8017704:	2b08      	cmp	r3, #8
 8017706:	d10b      	bne.n	8017720 <_printf_i+0x14c>
 8017708:	6823      	ldr	r3, [r4, #0]
 801770a:	07de      	lsls	r6, r3, #31
 801770c:	d508      	bpl.n	8017720 <_printf_i+0x14c>
 801770e:	6923      	ldr	r3, [r4, #16]
 8017710:	6861      	ldr	r1, [r4, #4]
 8017712:	4299      	cmp	r1, r3
 8017714:	bfde      	ittt	le
 8017716:	2330      	movle	r3, #48	; 0x30
 8017718:	f805 3c01 	strble.w	r3, [r5, #-1]
 801771c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017720:	1b52      	subs	r2, r2, r5
 8017722:	6122      	str	r2, [r4, #16]
 8017724:	f8cd a000 	str.w	sl, [sp]
 8017728:	464b      	mov	r3, r9
 801772a:	aa03      	add	r2, sp, #12
 801772c:	4621      	mov	r1, r4
 801772e:	4640      	mov	r0, r8
 8017730:	f7ff fee2 	bl	80174f8 <_printf_common>
 8017734:	3001      	adds	r0, #1
 8017736:	d14c      	bne.n	80177d2 <_printf_i+0x1fe>
 8017738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801773c:	b004      	add	sp, #16
 801773e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017742:	4835      	ldr	r0, [pc, #212]	; (8017818 <_printf_i+0x244>)
 8017744:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017748:	6829      	ldr	r1, [r5, #0]
 801774a:	6823      	ldr	r3, [r4, #0]
 801774c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017750:	6029      	str	r1, [r5, #0]
 8017752:	061d      	lsls	r5, r3, #24
 8017754:	d514      	bpl.n	8017780 <_printf_i+0x1ac>
 8017756:	07df      	lsls	r7, r3, #31
 8017758:	bf44      	itt	mi
 801775a:	f043 0320 	orrmi.w	r3, r3, #32
 801775e:	6023      	strmi	r3, [r4, #0]
 8017760:	b91e      	cbnz	r6, 801776a <_printf_i+0x196>
 8017762:	6823      	ldr	r3, [r4, #0]
 8017764:	f023 0320 	bic.w	r3, r3, #32
 8017768:	6023      	str	r3, [r4, #0]
 801776a:	2310      	movs	r3, #16
 801776c:	e7b0      	b.n	80176d0 <_printf_i+0xfc>
 801776e:	6823      	ldr	r3, [r4, #0]
 8017770:	f043 0320 	orr.w	r3, r3, #32
 8017774:	6023      	str	r3, [r4, #0]
 8017776:	2378      	movs	r3, #120	; 0x78
 8017778:	4828      	ldr	r0, [pc, #160]	; (801781c <_printf_i+0x248>)
 801777a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801777e:	e7e3      	b.n	8017748 <_printf_i+0x174>
 8017780:	0659      	lsls	r1, r3, #25
 8017782:	bf48      	it	mi
 8017784:	b2b6      	uxthmi	r6, r6
 8017786:	e7e6      	b.n	8017756 <_printf_i+0x182>
 8017788:	4615      	mov	r5, r2
 801778a:	e7bb      	b.n	8017704 <_printf_i+0x130>
 801778c:	682b      	ldr	r3, [r5, #0]
 801778e:	6826      	ldr	r6, [r4, #0]
 8017790:	6961      	ldr	r1, [r4, #20]
 8017792:	1d18      	adds	r0, r3, #4
 8017794:	6028      	str	r0, [r5, #0]
 8017796:	0635      	lsls	r5, r6, #24
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	d501      	bpl.n	80177a0 <_printf_i+0x1cc>
 801779c:	6019      	str	r1, [r3, #0]
 801779e:	e002      	b.n	80177a6 <_printf_i+0x1d2>
 80177a0:	0670      	lsls	r0, r6, #25
 80177a2:	d5fb      	bpl.n	801779c <_printf_i+0x1c8>
 80177a4:	8019      	strh	r1, [r3, #0]
 80177a6:	2300      	movs	r3, #0
 80177a8:	6123      	str	r3, [r4, #16]
 80177aa:	4615      	mov	r5, r2
 80177ac:	e7ba      	b.n	8017724 <_printf_i+0x150>
 80177ae:	682b      	ldr	r3, [r5, #0]
 80177b0:	1d1a      	adds	r2, r3, #4
 80177b2:	602a      	str	r2, [r5, #0]
 80177b4:	681d      	ldr	r5, [r3, #0]
 80177b6:	6862      	ldr	r2, [r4, #4]
 80177b8:	2100      	movs	r1, #0
 80177ba:	4628      	mov	r0, r5
 80177bc:	f7e8 fd28 	bl	8000210 <memchr>
 80177c0:	b108      	cbz	r0, 80177c6 <_printf_i+0x1f2>
 80177c2:	1b40      	subs	r0, r0, r5
 80177c4:	6060      	str	r0, [r4, #4]
 80177c6:	6863      	ldr	r3, [r4, #4]
 80177c8:	6123      	str	r3, [r4, #16]
 80177ca:	2300      	movs	r3, #0
 80177cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80177d0:	e7a8      	b.n	8017724 <_printf_i+0x150>
 80177d2:	6923      	ldr	r3, [r4, #16]
 80177d4:	462a      	mov	r2, r5
 80177d6:	4649      	mov	r1, r9
 80177d8:	4640      	mov	r0, r8
 80177da:	47d0      	blx	sl
 80177dc:	3001      	adds	r0, #1
 80177de:	d0ab      	beq.n	8017738 <_printf_i+0x164>
 80177e0:	6823      	ldr	r3, [r4, #0]
 80177e2:	079b      	lsls	r3, r3, #30
 80177e4:	d413      	bmi.n	801780e <_printf_i+0x23a>
 80177e6:	68e0      	ldr	r0, [r4, #12]
 80177e8:	9b03      	ldr	r3, [sp, #12]
 80177ea:	4298      	cmp	r0, r3
 80177ec:	bfb8      	it	lt
 80177ee:	4618      	movlt	r0, r3
 80177f0:	e7a4      	b.n	801773c <_printf_i+0x168>
 80177f2:	2301      	movs	r3, #1
 80177f4:	4632      	mov	r2, r6
 80177f6:	4649      	mov	r1, r9
 80177f8:	4640      	mov	r0, r8
 80177fa:	47d0      	blx	sl
 80177fc:	3001      	adds	r0, #1
 80177fe:	d09b      	beq.n	8017738 <_printf_i+0x164>
 8017800:	3501      	adds	r5, #1
 8017802:	68e3      	ldr	r3, [r4, #12]
 8017804:	9903      	ldr	r1, [sp, #12]
 8017806:	1a5b      	subs	r3, r3, r1
 8017808:	42ab      	cmp	r3, r5
 801780a:	dcf2      	bgt.n	80177f2 <_printf_i+0x21e>
 801780c:	e7eb      	b.n	80177e6 <_printf_i+0x212>
 801780e:	2500      	movs	r5, #0
 8017810:	f104 0619 	add.w	r6, r4, #25
 8017814:	e7f5      	b.n	8017802 <_printf_i+0x22e>
 8017816:	bf00      	nop
 8017818:	0801a0c6 	.word	0x0801a0c6
 801781c:	0801a0d7 	.word	0x0801a0d7

08017820 <iprintf>:
 8017820:	b40f      	push	{r0, r1, r2, r3}
 8017822:	4b0a      	ldr	r3, [pc, #40]	; (801784c <iprintf+0x2c>)
 8017824:	b513      	push	{r0, r1, r4, lr}
 8017826:	681c      	ldr	r4, [r3, #0]
 8017828:	b124      	cbz	r4, 8017834 <iprintf+0x14>
 801782a:	69a3      	ldr	r3, [r4, #24]
 801782c:	b913      	cbnz	r3, 8017834 <iprintf+0x14>
 801782e:	4620      	mov	r0, r4
 8017830:	f000 ff30 	bl	8018694 <__sinit>
 8017834:	ab05      	add	r3, sp, #20
 8017836:	9a04      	ldr	r2, [sp, #16]
 8017838:	68a1      	ldr	r1, [r4, #8]
 801783a:	9301      	str	r3, [sp, #4]
 801783c:	4620      	mov	r0, r4
 801783e:	f001 fd1f 	bl	8019280 <_vfiprintf_r>
 8017842:	b002      	add	sp, #8
 8017844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017848:	b004      	add	sp, #16
 801784a:	4770      	bx	lr
 801784c:	20000184 	.word	0x20000184

08017850 <_sbrk_r>:
 8017850:	b538      	push	{r3, r4, r5, lr}
 8017852:	4d06      	ldr	r5, [pc, #24]	; (801786c <_sbrk_r+0x1c>)
 8017854:	2300      	movs	r3, #0
 8017856:	4604      	mov	r4, r0
 8017858:	4608      	mov	r0, r1
 801785a:	602b      	str	r3, [r5, #0]
 801785c:	f002 f9b8 	bl	8019bd0 <_sbrk>
 8017860:	1c43      	adds	r3, r0, #1
 8017862:	d102      	bne.n	801786a <_sbrk_r+0x1a>
 8017864:	682b      	ldr	r3, [r5, #0]
 8017866:	b103      	cbz	r3, 801786a <_sbrk_r+0x1a>
 8017868:	6023      	str	r3, [r4, #0]
 801786a:	bd38      	pop	{r3, r4, r5, pc}
 801786c:	20002f6c 	.word	0x20002f6c

08017870 <siprintf>:
 8017870:	b40e      	push	{r1, r2, r3}
 8017872:	b500      	push	{lr}
 8017874:	b09c      	sub	sp, #112	; 0x70
 8017876:	ab1d      	add	r3, sp, #116	; 0x74
 8017878:	9002      	str	r0, [sp, #8]
 801787a:	9006      	str	r0, [sp, #24]
 801787c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017880:	4809      	ldr	r0, [pc, #36]	; (80178a8 <siprintf+0x38>)
 8017882:	9107      	str	r1, [sp, #28]
 8017884:	9104      	str	r1, [sp, #16]
 8017886:	4909      	ldr	r1, [pc, #36]	; (80178ac <siprintf+0x3c>)
 8017888:	f853 2b04 	ldr.w	r2, [r3], #4
 801788c:	9105      	str	r1, [sp, #20]
 801788e:	6800      	ldr	r0, [r0, #0]
 8017890:	9301      	str	r3, [sp, #4]
 8017892:	a902      	add	r1, sp, #8
 8017894:	f001 fbca 	bl	801902c <_svfiprintf_r>
 8017898:	9b02      	ldr	r3, [sp, #8]
 801789a:	2200      	movs	r2, #0
 801789c:	701a      	strb	r2, [r3, #0]
 801789e:	b01c      	add	sp, #112	; 0x70
 80178a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80178a4:	b003      	add	sp, #12
 80178a6:	4770      	bx	lr
 80178a8:	20000184 	.word	0x20000184
 80178ac:	ffff0208 	.word	0xffff0208

080178b0 <__assert_func>:
 80178b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80178b2:	4614      	mov	r4, r2
 80178b4:	461a      	mov	r2, r3
 80178b6:	4b09      	ldr	r3, [pc, #36]	; (80178dc <__assert_func+0x2c>)
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	4605      	mov	r5, r0
 80178bc:	68d8      	ldr	r0, [r3, #12]
 80178be:	b14c      	cbz	r4, 80178d4 <__assert_func+0x24>
 80178c0:	4b07      	ldr	r3, [pc, #28]	; (80178e0 <__assert_func+0x30>)
 80178c2:	9100      	str	r1, [sp, #0]
 80178c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80178c8:	4906      	ldr	r1, [pc, #24]	; (80178e4 <__assert_func+0x34>)
 80178ca:	462b      	mov	r3, r5
 80178cc:	f000 ff60 	bl	8018790 <fiprintf>
 80178d0:	f001 ff2a 	bl	8019728 <abort>
 80178d4:	4b04      	ldr	r3, [pc, #16]	; (80178e8 <__assert_func+0x38>)
 80178d6:	461c      	mov	r4, r3
 80178d8:	e7f3      	b.n	80178c2 <__assert_func+0x12>
 80178da:	bf00      	nop
 80178dc:	20000184 	.word	0x20000184
 80178e0:	0801a0e8 	.word	0x0801a0e8
 80178e4:	0801a0f5 	.word	0x0801a0f5
 80178e8:	0801a123 	.word	0x0801a123

080178ec <quorem>:
 80178ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f0:	6903      	ldr	r3, [r0, #16]
 80178f2:	690c      	ldr	r4, [r1, #16]
 80178f4:	42a3      	cmp	r3, r4
 80178f6:	4607      	mov	r7, r0
 80178f8:	f2c0 8081 	blt.w	80179fe <quorem+0x112>
 80178fc:	3c01      	subs	r4, #1
 80178fe:	f101 0814 	add.w	r8, r1, #20
 8017902:	f100 0514 	add.w	r5, r0, #20
 8017906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801790a:	9301      	str	r3, [sp, #4]
 801790c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017910:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017914:	3301      	adds	r3, #1
 8017916:	429a      	cmp	r2, r3
 8017918:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801791c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017920:	fbb2 f6f3 	udiv	r6, r2, r3
 8017924:	d331      	bcc.n	801798a <quorem+0x9e>
 8017926:	f04f 0e00 	mov.w	lr, #0
 801792a:	4640      	mov	r0, r8
 801792c:	46ac      	mov	ip, r5
 801792e:	46f2      	mov	sl, lr
 8017930:	f850 2b04 	ldr.w	r2, [r0], #4
 8017934:	b293      	uxth	r3, r2
 8017936:	fb06 e303 	mla	r3, r6, r3, lr
 801793a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801793e:	b29b      	uxth	r3, r3
 8017940:	ebaa 0303 	sub.w	r3, sl, r3
 8017944:	f8dc a000 	ldr.w	sl, [ip]
 8017948:	0c12      	lsrs	r2, r2, #16
 801794a:	fa13 f38a 	uxtah	r3, r3, sl
 801794e:	fb06 e202 	mla	r2, r6, r2, lr
 8017952:	9300      	str	r3, [sp, #0]
 8017954:	9b00      	ldr	r3, [sp, #0]
 8017956:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801795a:	b292      	uxth	r2, r2
 801795c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017960:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017964:	f8bd 3000 	ldrh.w	r3, [sp]
 8017968:	4581      	cmp	r9, r0
 801796a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801796e:	f84c 3b04 	str.w	r3, [ip], #4
 8017972:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017976:	d2db      	bcs.n	8017930 <quorem+0x44>
 8017978:	f855 300b 	ldr.w	r3, [r5, fp]
 801797c:	b92b      	cbnz	r3, 801798a <quorem+0x9e>
 801797e:	9b01      	ldr	r3, [sp, #4]
 8017980:	3b04      	subs	r3, #4
 8017982:	429d      	cmp	r5, r3
 8017984:	461a      	mov	r2, r3
 8017986:	d32e      	bcc.n	80179e6 <quorem+0xfa>
 8017988:	613c      	str	r4, [r7, #16]
 801798a:	4638      	mov	r0, r7
 801798c:	f001 f9da 	bl	8018d44 <__mcmp>
 8017990:	2800      	cmp	r0, #0
 8017992:	db24      	blt.n	80179de <quorem+0xf2>
 8017994:	3601      	adds	r6, #1
 8017996:	4628      	mov	r0, r5
 8017998:	f04f 0c00 	mov.w	ip, #0
 801799c:	f858 2b04 	ldr.w	r2, [r8], #4
 80179a0:	f8d0 e000 	ldr.w	lr, [r0]
 80179a4:	b293      	uxth	r3, r2
 80179a6:	ebac 0303 	sub.w	r3, ip, r3
 80179aa:	0c12      	lsrs	r2, r2, #16
 80179ac:	fa13 f38e 	uxtah	r3, r3, lr
 80179b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80179b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80179b8:	b29b      	uxth	r3, r3
 80179ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80179be:	45c1      	cmp	r9, r8
 80179c0:	f840 3b04 	str.w	r3, [r0], #4
 80179c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80179c8:	d2e8      	bcs.n	801799c <quorem+0xb0>
 80179ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80179ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80179d2:	b922      	cbnz	r2, 80179de <quorem+0xf2>
 80179d4:	3b04      	subs	r3, #4
 80179d6:	429d      	cmp	r5, r3
 80179d8:	461a      	mov	r2, r3
 80179da:	d30a      	bcc.n	80179f2 <quorem+0x106>
 80179dc:	613c      	str	r4, [r7, #16]
 80179de:	4630      	mov	r0, r6
 80179e0:	b003      	add	sp, #12
 80179e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179e6:	6812      	ldr	r2, [r2, #0]
 80179e8:	3b04      	subs	r3, #4
 80179ea:	2a00      	cmp	r2, #0
 80179ec:	d1cc      	bne.n	8017988 <quorem+0x9c>
 80179ee:	3c01      	subs	r4, #1
 80179f0:	e7c7      	b.n	8017982 <quorem+0x96>
 80179f2:	6812      	ldr	r2, [r2, #0]
 80179f4:	3b04      	subs	r3, #4
 80179f6:	2a00      	cmp	r2, #0
 80179f8:	d1f0      	bne.n	80179dc <quorem+0xf0>
 80179fa:	3c01      	subs	r4, #1
 80179fc:	e7eb      	b.n	80179d6 <quorem+0xea>
 80179fe:	2000      	movs	r0, #0
 8017a00:	e7ee      	b.n	80179e0 <quorem+0xf4>
 8017a02:	0000      	movs	r0, r0
 8017a04:	0000      	movs	r0, r0
	...

08017a08 <_dtoa_r>:
 8017a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a0c:	ed2d 8b04 	vpush	{d8-d9}
 8017a10:	ec57 6b10 	vmov	r6, r7, d0
 8017a14:	b093      	sub	sp, #76	; 0x4c
 8017a16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017a18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017a1c:	9106      	str	r1, [sp, #24]
 8017a1e:	ee10 aa10 	vmov	sl, s0
 8017a22:	4604      	mov	r4, r0
 8017a24:	9209      	str	r2, [sp, #36]	; 0x24
 8017a26:	930c      	str	r3, [sp, #48]	; 0x30
 8017a28:	46bb      	mov	fp, r7
 8017a2a:	b975      	cbnz	r5, 8017a4a <_dtoa_r+0x42>
 8017a2c:	2010      	movs	r0, #16
 8017a2e:	f7ff f98f 	bl	8016d50 <malloc>
 8017a32:	4602      	mov	r2, r0
 8017a34:	6260      	str	r0, [r4, #36]	; 0x24
 8017a36:	b920      	cbnz	r0, 8017a42 <_dtoa_r+0x3a>
 8017a38:	4ba7      	ldr	r3, [pc, #668]	; (8017cd8 <_dtoa_r+0x2d0>)
 8017a3a:	21ea      	movs	r1, #234	; 0xea
 8017a3c:	48a7      	ldr	r0, [pc, #668]	; (8017cdc <_dtoa_r+0x2d4>)
 8017a3e:	f7ff ff37 	bl	80178b0 <__assert_func>
 8017a42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017a46:	6005      	str	r5, [r0, #0]
 8017a48:	60c5      	str	r5, [r0, #12]
 8017a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a4c:	6819      	ldr	r1, [r3, #0]
 8017a4e:	b151      	cbz	r1, 8017a66 <_dtoa_r+0x5e>
 8017a50:	685a      	ldr	r2, [r3, #4]
 8017a52:	604a      	str	r2, [r1, #4]
 8017a54:	2301      	movs	r3, #1
 8017a56:	4093      	lsls	r3, r2
 8017a58:	608b      	str	r3, [r1, #8]
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f000 ff30 	bl	80188c0 <_Bfree>
 8017a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a62:	2200      	movs	r2, #0
 8017a64:	601a      	str	r2, [r3, #0]
 8017a66:	1e3b      	subs	r3, r7, #0
 8017a68:	bfaa      	itet	ge
 8017a6a:	2300      	movge	r3, #0
 8017a6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8017a70:	f8c8 3000 	strge.w	r3, [r8]
 8017a74:	4b9a      	ldr	r3, [pc, #616]	; (8017ce0 <_dtoa_r+0x2d8>)
 8017a76:	bfbc      	itt	lt
 8017a78:	2201      	movlt	r2, #1
 8017a7a:	f8c8 2000 	strlt.w	r2, [r8]
 8017a7e:	ea33 030b 	bics.w	r3, r3, fp
 8017a82:	d11b      	bne.n	8017abc <_dtoa_r+0xb4>
 8017a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017a86:	f242 730f 	movw	r3, #9999	; 0x270f
 8017a8a:	6013      	str	r3, [r2, #0]
 8017a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017a90:	4333      	orrs	r3, r6
 8017a92:	f000 8592 	beq.w	80185ba <_dtoa_r+0xbb2>
 8017a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a98:	b963      	cbnz	r3, 8017ab4 <_dtoa_r+0xac>
 8017a9a:	4b92      	ldr	r3, [pc, #584]	; (8017ce4 <_dtoa_r+0x2dc>)
 8017a9c:	e022      	b.n	8017ae4 <_dtoa_r+0xdc>
 8017a9e:	4b92      	ldr	r3, [pc, #584]	; (8017ce8 <_dtoa_r+0x2e0>)
 8017aa0:	9301      	str	r3, [sp, #4]
 8017aa2:	3308      	adds	r3, #8
 8017aa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017aa6:	6013      	str	r3, [r2, #0]
 8017aa8:	9801      	ldr	r0, [sp, #4]
 8017aaa:	b013      	add	sp, #76	; 0x4c
 8017aac:	ecbd 8b04 	vpop	{d8-d9}
 8017ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab4:	4b8b      	ldr	r3, [pc, #556]	; (8017ce4 <_dtoa_r+0x2dc>)
 8017ab6:	9301      	str	r3, [sp, #4]
 8017ab8:	3303      	adds	r3, #3
 8017aba:	e7f3      	b.n	8017aa4 <_dtoa_r+0x9c>
 8017abc:	2200      	movs	r2, #0
 8017abe:	2300      	movs	r3, #0
 8017ac0:	4650      	mov	r0, sl
 8017ac2:	4659      	mov	r1, fp
 8017ac4:	f7e9 f818 	bl	8000af8 <__aeabi_dcmpeq>
 8017ac8:	ec4b ab19 	vmov	d9, sl, fp
 8017acc:	4680      	mov	r8, r0
 8017ace:	b158      	cbz	r0, 8017ae8 <_dtoa_r+0xe0>
 8017ad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	6013      	str	r3, [r2, #0]
 8017ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	f000 856b 	beq.w	80185b4 <_dtoa_r+0xbac>
 8017ade:	4883      	ldr	r0, [pc, #524]	; (8017cec <_dtoa_r+0x2e4>)
 8017ae0:	6018      	str	r0, [r3, #0]
 8017ae2:	1e43      	subs	r3, r0, #1
 8017ae4:	9301      	str	r3, [sp, #4]
 8017ae6:	e7df      	b.n	8017aa8 <_dtoa_r+0xa0>
 8017ae8:	ec4b ab10 	vmov	d0, sl, fp
 8017aec:	aa10      	add	r2, sp, #64	; 0x40
 8017aee:	a911      	add	r1, sp, #68	; 0x44
 8017af0:	4620      	mov	r0, r4
 8017af2:	f001 f9cd 	bl	8018e90 <__d2b>
 8017af6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8017afa:	ee08 0a10 	vmov	s16, r0
 8017afe:	2d00      	cmp	r5, #0
 8017b00:	f000 8084 	beq.w	8017c0c <_dtoa_r+0x204>
 8017b04:	ee19 3a90 	vmov	r3, s19
 8017b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017b0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017b10:	4656      	mov	r6, sl
 8017b12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017b16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017b1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8017b1e:	4b74      	ldr	r3, [pc, #464]	; (8017cf0 <_dtoa_r+0x2e8>)
 8017b20:	2200      	movs	r2, #0
 8017b22:	4630      	mov	r0, r6
 8017b24:	4639      	mov	r1, r7
 8017b26:	f7e8 fbc7 	bl	80002b8 <__aeabi_dsub>
 8017b2a:	a365      	add	r3, pc, #404	; (adr r3, 8017cc0 <_dtoa_r+0x2b8>)
 8017b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b30:	f7e8 fd7a 	bl	8000628 <__aeabi_dmul>
 8017b34:	a364      	add	r3, pc, #400	; (adr r3, 8017cc8 <_dtoa_r+0x2c0>)
 8017b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b3a:	f7e8 fbbf 	bl	80002bc <__adddf3>
 8017b3e:	4606      	mov	r6, r0
 8017b40:	4628      	mov	r0, r5
 8017b42:	460f      	mov	r7, r1
 8017b44:	f7e8 fd06 	bl	8000554 <__aeabi_i2d>
 8017b48:	a361      	add	r3, pc, #388	; (adr r3, 8017cd0 <_dtoa_r+0x2c8>)
 8017b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b4e:	f7e8 fd6b 	bl	8000628 <__aeabi_dmul>
 8017b52:	4602      	mov	r2, r0
 8017b54:	460b      	mov	r3, r1
 8017b56:	4630      	mov	r0, r6
 8017b58:	4639      	mov	r1, r7
 8017b5a:	f7e8 fbaf 	bl	80002bc <__adddf3>
 8017b5e:	4606      	mov	r6, r0
 8017b60:	460f      	mov	r7, r1
 8017b62:	f7e9 f811 	bl	8000b88 <__aeabi_d2iz>
 8017b66:	2200      	movs	r2, #0
 8017b68:	9000      	str	r0, [sp, #0]
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	4630      	mov	r0, r6
 8017b6e:	4639      	mov	r1, r7
 8017b70:	f7e8 ffcc 	bl	8000b0c <__aeabi_dcmplt>
 8017b74:	b150      	cbz	r0, 8017b8c <_dtoa_r+0x184>
 8017b76:	9800      	ldr	r0, [sp, #0]
 8017b78:	f7e8 fcec 	bl	8000554 <__aeabi_i2d>
 8017b7c:	4632      	mov	r2, r6
 8017b7e:	463b      	mov	r3, r7
 8017b80:	f7e8 ffba 	bl	8000af8 <__aeabi_dcmpeq>
 8017b84:	b910      	cbnz	r0, 8017b8c <_dtoa_r+0x184>
 8017b86:	9b00      	ldr	r3, [sp, #0]
 8017b88:	3b01      	subs	r3, #1
 8017b8a:	9300      	str	r3, [sp, #0]
 8017b8c:	9b00      	ldr	r3, [sp, #0]
 8017b8e:	2b16      	cmp	r3, #22
 8017b90:	d85a      	bhi.n	8017c48 <_dtoa_r+0x240>
 8017b92:	9a00      	ldr	r2, [sp, #0]
 8017b94:	4b57      	ldr	r3, [pc, #348]	; (8017cf4 <_dtoa_r+0x2ec>)
 8017b96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b9e:	ec51 0b19 	vmov	r0, r1, d9
 8017ba2:	f7e8 ffb3 	bl	8000b0c <__aeabi_dcmplt>
 8017ba6:	2800      	cmp	r0, #0
 8017ba8:	d050      	beq.n	8017c4c <_dtoa_r+0x244>
 8017baa:	9b00      	ldr	r3, [sp, #0]
 8017bac:	3b01      	subs	r3, #1
 8017bae:	9300      	str	r3, [sp, #0]
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8017bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017bb6:	1b5d      	subs	r5, r3, r5
 8017bb8:	1e6b      	subs	r3, r5, #1
 8017bba:	9305      	str	r3, [sp, #20]
 8017bbc:	bf45      	ittet	mi
 8017bbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8017bc2:	9304      	strmi	r3, [sp, #16]
 8017bc4:	2300      	movpl	r3, #0
 8017bc6:	2300      	movmi	r3, #0
 8017bc8:	bf4c      	ite	mi
 8017bca:	9305      	strmi	r3, [sp, #20]
 8017bcc:	9304      	strpl	r3, [sp, #16]
 8017bce:	9b00      	ldr	r3, [sp, #0]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	db3d      	blt.n	8017c50 <_dtoa_r+0x248>
 8017bd4:	9b05      	ldr	r3, [sp, #20]
 8017bd6:	9a00      	ldr	r2, [sp, #0]
 8017bd8:	920a      	str	r2, [sp, #40]	; 0x28
 8017bda:	4413      	add	r3, r2
 8017bdc:	9305      	str	r3, [sp, #20]
 8017bde:	2300      	movs	r3, #0
 8017be0:	9307      	str	r3, [sp, #28]
 8017be2:	9b06      	ldr	r3, [sp, #24]
 8017be4:	2b09      	cmp	r3, #9
 8017be6:	f200 8089 	bhi.w	8017cfc <_dtoa_r+0x2f4>
 8017bea:	2b05      	cmp	r3, #5
 8017bec:	bfc4      	itt	gt
 8017bee:	3b04      	subgt	r3, #4
 8017bf0:	9306      	strgt	r3, [sp, #24]
 8017bf2:	9b06      	ldr	r3, [sp, #24]
 8017bf4:	f1a3 0302 	sub.w	r3, r3, #2
 8017bf8:	bfcc      	ite	gt
 8017bfa:	2500      	movgt	r5, #0
 8017bfc:	2501      	movle	r5, #1
 8017bfe:	2b03      	cmp	r3, #3
 8017c00:	f200 8087 	bhi.w	8017d12 <_dtoa_r+0x30a>
 8017c04:	e8df f003 	tbb	[pc, r3]
 8017c08:	59383a2d 	.word	0x59383a2d
 8017c0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017c10:	441d      	add	r5, r3
 8017c12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017c16:	2b20      	cmp	r3, #32
 8017c18:	bfc1      	itttt	gt
 8017c1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017c1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017c22:	fa0b f303 	lslgt.w	r3, fp, r3
 8017c26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017c2a:	bfda      	itte	le
 8017c2c:	f1c3 0320 	rsble	r3, r3, #32
 8017c30:	fa06 f003 	lslle.w	r0, r6, r3
 8017c34:	4318      	orrgt	r0, r3
 8017c36:	f7e8 fc7d 	bl	8000534 <__aeabi_ui2d>
 8017c3a:	2301      	movs	r3, #1
 8017c3c:	4606      	mov	r6, r0
 8017c3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017c42:	3d01      	subs	r5, #1
 8017c44:	930e      	str	r3, [sp, #56]	; 0x38
 8017c46:	e76a      	b.n	8017b1e <_dtoa_r+0x116>
 8017c48:	2301      	movs	r3, #1
 8017c4a:	e7b2      	b.n	8017bb2 <_dtoa_r+0x1aa>
 8017c4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8017c4e:	e7b1      	b.n	8017bb4 <_dtoa_r+0x1ac>
 8017c50:	9b04      	ldr	r3, [sp, #16]
 8017c52:	9a00      	ldr	r2, [sp, #0]
 8017c54:	1a9b      	subs	r3, r3, r2
 8017c56:	9304      	str	r3, [sp, #16]
 8017c58:	4253      	negs	r3, r2
 8017c5a:	9307      	str	r3, [sp, #28]
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8017c60:	e7bf      	b.n	8017be2 <_dtoa_r+0x1da>
 8017c62:	2300      	movs	r3, #0
 8017c64:	9308      	str	r3, [sp, #32]
 8017c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	dc55      	bgt.n	8017d18 <_dtoa_r+0x310>
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017c72:	461a      	mov	r2, r3
 8017c74:	9209      	str	r2, [sp, #36]	; 0x24
 8017c76:	e00c      	b.n	8017c92 <_dtoa_r+0x28a>
 8017c78:	2301      	movs	r3, #1
 8017c7a:	e7f3      	b.n	8017c64 <_dtoa_r+0x25c>
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c80:	9308      	str	r3, [sp, #32]
 8017c82:	9b00      	ldr	r3, [sp, #0]
 8017c84:	4413      	add	r3, r2
 8017c86:	9302      	str	r3, [sp, #8]
 8017c88:	3301      	adds	r3, #1
 8017c8a:	2b01      	cmp	r3, #1
 8017c8c:	9303      	str	r3, [sp, #12]
 8017c8e:	bfb8      	it	lt
 8017c90:	2301      	movlt	r3, #1
 8017c92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017c94:	2200      	movs	r2, #0
 8017c96:	6042      	str	r2, [r0, #4]
 8017c98:	2204      	movs	r2, #4
 8017c9a:	f102 0614 	add.w	r6, r2, #20
 8017c9e:	429e      	cmp	r6, r3
 8017ca0:	6841      	ldr	r1, [r0, #4]
 8017ca2:	d93d      	bls.n	8017d20 <_dtoa_r+0x318>
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	f000 fdcb 	bl	8018840 <_Balloc>
 8017caa:	9001      	str	r0, [sp, #4]
 8017cac:	2800      	cmp	r0, #0
 8017cae:	d13b      	bne.n	8017d28 <_dtoa_r+0x320>
 8017cb0:	4b11      	ldr	r3, [pc, #68]	; (8017cf8 <_dtoa_r+0x2f0>)
 8017cb2:	4602      	mov	r2, r0
 8017cb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017cb8:	e6c0      	b.n	8017a3c <_dtoa_r+0x34>
 8017cba:	2301      	movs	r3, #1
 8017cbc:	e7df      	b.n	8017c7e <_dtoa_r+0x276>
 8017cbe:	bf00      	nop
 8017cc0:	636f4361 	.word	0x636f4361
 8017cc4:	3fd287a7 	.word	0x3fd287a7
 8017cc8:	8b60c8b3 	.word	0x8b60c8b3
 8017ccc:	3fc68a28 	.word	0x3fc68a28
 8017cd0:	509f79fb 	.word	0x509f79fb
 8017cd4:	3fd34413 	.word	0x3fd34413
 8017cd8:	0801a232 	.word	0x0801a232
 8017cdc:	0801a249 	.word	0x0801a249
 8017ce0:	7ff00000 	.word	0x7ff00000
 8017ce4:	0801a22e 	.word	0x0801a22e
 8017ce8:	0801a225 	.word	0x0801a225
 8017cec:	0801a0c5 	.word	0x0801a0c5
 8017cf0:	3ff80000 	.word	0x3ff80000
 8017cf4:	0801a3a8 	.word	0x0801a3a8
 8017cf8:	0801a2a4 	.word	0x0801a2a4
 8017cfc:	2501      	movs	r5, #1
 8017cfe:	2300      	movs	r3, #0
 8017d00:	9306      	str	r3, [sp, #24]
 8017d02:	9508      	str	r5, [sp, #32]
 8017d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	2312      	movs	r3, #18
 8017d10:	e7b0      	b.n	8017c74 <_dtoa_r+0x26c>
 8017d12:	2301      	movs	r3, #1
 8017d14:	9308      	str	r3, [sp, #32]
 8017d16:	e7f5      	b.n	8017d04 <_dtoa_r+0x2fc>
 8017d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017d1e:	e7b8      	b.n	8017c92 <_dtoa_r+0x28a>
 8017d20:	3101      	adds	r1, #1
 8017d22:	6041      	str	r1, [r0, #4]
 8017d24:	0052      	lsls	r2, r2, #1
 8017d26:	e7b8      	b.n	8017c9a <_dtoa_r+0x292>
 8017d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d2a:	9a01      	ldr	r2, [sp, #4]
 8017d2c:	601a      	str	r2, [r3, #0]
 8017d2e:	9b03      	ldr	r3, [sp, #12]
 8017d30:	2b0e      	cmp	r3, #14
 8017d32:	f200 809d 	bhi.w	8017e70 <_dtoa_r+0x468>
 8017d36:	2d00      	cmp	r5, #0
 8017d38:	f000 809a 	beq.w	8017e70 <_dtoa_r+0x468>
 8017d3c:	9b00      	ldr	r3, [sp, #0]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	dd32      	ble.n	8017da8 <_dtoa_r+0x3a0>
 8017d42:	4ab7      	ldr	r2, [pc, #732]	; (8018020 <_dtoa_r+0x618>)
 8017d44:	f003 030f 	and.w	r3, r3, #15
 8017d48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017d4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017d50:	9b00      	ldr	r3, [sp, #0]
 8017d52:	05d8      	lsls	r0, r3, #23
 8017d54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8017d58:	d516      	bpl.n	8017d88 <_dtoa_r+0x380>
 8017d5a:	4bb2      	ldr	r3, [pc, #712]	; (8018024 <_dtoa_r+0x61c>)
 8017d5c:	ec51 0b19 	vmov	r0, r1, d9
 8017d60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017d64:	f7e8 fd8a 	bl	800087c <__aeabi_ddiv>
 8017d68:	f007 070f 	and.w	r7, r7, #15
 8017d6c:	4682      	mov	sl, r0
 8017d6e:	468b      	mov	fp, r1
 8017d70:	2503      	movs	r5, #3
 8017d72:	4eac      	ldr	r6, [pc, #688]	; (8018024 <_dtoa_r+0x61c>)
 8017d74:	b957      	cbnz	r7, 8017d8c <_dtoa_r+0x384>
 8017d76:	4642      	mov	r2, r8
 8017d78:	464b      	mov	r3, r9
 8017d7a:	4650      	mov	r0, sl
 8017d7c:	4659      	mov	r1, fp
 8017d7e:	f7e8 fd7d 	bl	800087c <__aeabi_ddiv>
 8017d82:	4682      	mov	sl, r0
 8017d84:	468b      	mov	fp, r1
 8017d86:	e028      	b.n	8017dda <_dtoa_r+0x3d2>
 8017d88:	2502      	movs	r5, #2
 8017d8a:	e7f2      	b.n	8017d72 <_dtoa_r+0x36a>
 8017d8c:	07f9      	lsls	r1, r7, #31
 8017d8e:	d508      	bpl.n	8017da2 <_dtoa_r+0x39a>
 8017d90:	4640      	mov	r0, r8
 8017d92:	4649      	mov	r1, r9
 8017d94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017d98:	f7e8 fc46 	bl	8000628 <__aeabi_dmul>
 8017d9c:	3501      	adds	r5, #1
 8017d9e:	4680      	mov	r8, r0
 8017da0:	4689      	mov	r9, r1
 8017da2:	107f      	asrs	r7, r7, #1
 8017da4:	3608      	adds	r6, #8
 8017da6:	e7e5      	b.n	8017d74 <_dtoa_r+0x36c>
 8017da8:	f000 809b 	beq.w	8017ee2 <_dtoa_r+0x4da>
 8017dac:	9b00      	ldr	r3, [sp, #0]
 8017dae:	4f9d      	ldr	r7, [pc, #628]	; (8018024 <_dtoa_r+0x61c>)
 8017db0:	425e      	negs	r6, r3
 8017db2:	4b9b      	ldr	r3, [pc, #620]	; (8018020 <_dtoa_r+0x618>)
 8017db4:	f006 020f 	and.w	r2, r6, #15
 8017db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dc0:	ec51 0b19 	vmov	r0, r1, d9
 8017dc4:	f7e8 fc30 	bl	8000628 <__aeabi_dmul>
 8017dc8:	1136      	asrs	r6, r6, #4
 8017dca:	4682      	mov	sl, r0
 8017dcc:	468b      	mov	fp, r1
 8017dce:	2300      	movs	r3, #0
 8017dd0:	2502      	movs	r5, #2
 8017dd2:	2e00      	cmp	r6, #0
 8017dd4:	d17a      	bne.n	8017ecc <_dtoa_r+0x4c4>
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d1d3      	bne.n	8017d82 <_dtoa_r+0x37a>
 8017dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	f000 8082 	beq.w	8017ee6 <_dtoa_r+0x4de>
 8017de2:	4b91      	ldr	r3, [pc, #580]	; (8018028 <_dtoa_r+0x620>)
 8017de4:	2200      	movs	r2, #0
 8017de6:	4650      	mov	r0, sl
 8017de8:	4659      	mov	r1, fp
 8017dea:	f7e8 fe8f 	bl	8000b0c <__aeabi_dcmplt>
 8017dee:	2800      	cmp	r0, #0
 8017df0:	d079      	beq.n	8017ee6 <_dtoa_r+0x4de>
 8017df2:	9b03      	ldr	r3, [sp, #12]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d076      	beq.n	8017ee6 <_dtoa_r+0x4de>
 8017df8:	9b02      	ldr	r3, [sp, #8]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	dd36      	ble.n	8017e6c <_dtoa_r+0x464>
 8017dfe:	9b00      	ldr	r3, [sp, #0]
 8017e00:	4650      	mov	r0, sl
 8017e02:	4659      	mov	r1, fp
 8017e04:	1e5f      	subs	r7, r3, #1
 8017e06:	2200      	movs	r2, #0
 8017e08:	4b88      	ldr	r3, [pc, #544]	; (801802c <_dtoa_r+0x624>)
 8017e0a:	f7e8 fc0d 	bl	8000628 <__aeabi_dmul>
 8017e0e:	9e02      	ldr	r6, [sp, #8]
 8017e10:	4682      	mov	sl, r0
 8017e12:	468b      	mov	fp, r1
 8017e14:	3501      	adds	r5, #1
 8017e16:	4628      	mov	r0, r5
 8017e18:	f7e8 fb9c 	bl	8000554 <__aeabi_i2d>
 8017e1c:	4652      	mov	r2, sl
 8017e1e:	465b      	mov	r3, fp
 8017e20:	f7e8 fc02 	bl	8000628 <__aeabi_dmul>
 8017e24:	4b82      	ldr	r3, [pc, #520]	; (8018030 <_dtoa_r+0x628>)
 8017e26:	2200      	movs	r2, #0
 8017e28:	f7e8 fa48 	bl	80002bc <__adddf3>
 8017e2c:	46d0      	mov	r8, sl
 8017e2e:	46d9      	mov	r9, fp
 8017e30:	4682      	mov	sl, r0
 8017e32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8017e36:	2e00      	cmp	r6, #0
 8017e38:	d158      	bne.n	8017eec <_dtoa_r+0x4e4>
 8017e3a:	4b7e      	ldr	r3, [pc, #504]	; (8018034 <_dtoa_r+0x62c>)
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	4640      	mov	r0, r8
 8017e40:	4649      	mov	r1, r9
 8017e42:	f7e8 fa39 	bl	80002b8 <__aeabi_dsub>
 8017e46:	4652      	mov	r2, sl
 8017e48:	465b      	mov	r3, fp
 8017e4a:	4680      	mov	r8, r0
 8017e4c:	4689      	mov	r9, r1
 8017e4e:	f7e8 fe7b 	bl	8000b48 <__aeabi_dcmpgt>
 8017e52:	2800      	cmp	r0, #0
 8017e54:	f040 8295 	bne.w	8018382 <_dtoa_r+0x97a>
 8017e58:	4652      	mov	r2, sl
 8017e5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017e5e:	4640      	mov	r0, r8
 8017e60:	4649      	mov	r1, r9
 8017e62:	f7e8 fe53 	bl	8000b0c <__aeabi_dcmplt>
 8017e66:	2800      	cmp	r0, #0
 8017e68:	f040 8289 	bne.w	801837e <_dtoa_r+0x976>
 8017e6c:	ec5b ab19 	vmov	sl, fp, d9
 8017e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	f2c0 8148 	blt.w	8018108 <_dtoa_r+0x700>
 8017e78:	9a00      	ldr	r2, [sp, #0]
 8017e7a:	2a0e      	cmp	r2, #14
 8017e7c:	f300 8144 	bgt.w	8018108 <_dtoa_r+0x700>
 8017e80:	4b67      	ldr	r3, [pc, #412]	; (8018020 <_dtoa_r+0x618>)
 8017e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017e86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	f280 80d5 	bge.w	801803c <_dtoa_r+0x634>
 8017e92:	9b03      	ldr	r3, [sp, #12]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	f300 80d1 	bgt.w	801803c <_dtoa_r+0x634>
 8017e9a:	f040 826f 	bne.w	801837c <_dtoa_r+0x974>
 8017e9e:	4b65      	ldr	r3, [pc, #404]	; (8018034 <_dtoa_r+0x62c>)
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	4640      	mov	r0, r8
 8017ea4:	4649      	mov	r1, r9
 8017ea6:	f7e8 fbbf 	bl	8000628 <__aeabi_dmul>
 8017eaa:	4652      	mov	r2, sl
 8017eac:	465b      	mov	r3, fp
 8017eae:	f7e8 fe41 	bl	8000b34 <__aeabi_dcmpge>
 8017eb2:	9e03      	ldr	r6, [sp, #12]
 8017eb4:	4637      	mov	r7, r6
 8017eb6:	2800      	cmp	r0, #0
 8017eb8:	f040 8245 	bne.w	8018346 <_dtoa_r+0x93e>
 8017ebc:	9d01      	ldr	r5, [sp, #4]
 8017ebe:	2331      	movs	r3, #49	; 0x31
 8017ec0:	f805 3b01 	strb.w	r3, [r5], #1
 8017ec4:	9b00      	ldr	r3, [sp, #0]
 8017ec6:	3301      	adds	r3, #1
 8017ec8:	9300      	str	r3, [sp, #0]
 8017eca:	e240      	b.n	801834e <_dtoa_r+0x946>
 8017ecc:	07f2      	lsls	r2, r6, #31
 8017ece:	d505      	bpl.n	8017edc <_dtoa_r+0x4d4>
 8017ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017ed4:	f7e8 fba8 	bl	8000628 <__aeabi_dmul>
 8017ed8:	3501      	adds	r5, #1
 8017eda:	2301      	movs	r3, #1
 8017edc:	1076      	asrs	r6, r6, #1
 8017ede:	3708      	adds	r7, #8
 8017ee0:	e777      	b.n	8017dd2 <_dtoa_r+0x3ca>
 8017ee2:	2502      	movs	r5, #2
 8017ee4:	e779      	b.n	8017dda <_dtoa_r+0x3d2>
 8017ee6:	9f00      	ldr	r7, [sp, #0]
 8017ee8:	9e03      	ldr	r6, [sp, #12]
 8017eea:	e794      	b.n	8017e16 <_dtoa_r+0x40e>
 8017eec:	9901      	ldr	r1, [sp, #4]
 8017eee:	4b4c      	ldr	r3, [pc, #304]	; (8018020 <_dtoa_r+0x618>)
 8017ef0:	4431      	add	r1, r6
 8017ef2:	910d      	str	r1, [sp, #52]	; 0x34
 8017ef4:	9908      	ldr	r1, [sp, #32]
 8017ef6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017efa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017efe:	2900      	cmp	r1, #0
 8017f00:	d043      	beq.n	8017f8a <_dtoa_r+0x582>
 8017f02:	494d      	ldr	r1, [pc, #308]	; (8018038 <_dtoa_r+0x630>)
 8017f04:	2000      	movs	r0, #0
 8017f06:	f7e8 fcb9 	bl	800087c <__aeabi_ddiv>
 8017f0a:	4652      	mov	r2, sl
 8017f0c:	465b      	mov	r3, fp
 8017f0e:	f7e8 f9d3 	bl	80002b8 <__aeabi_dsub>
 8017f12:	9d01      	ldr	r5, [sp, #4]
 8017f14:	4682      	mov	sl, r0
 8017f16:	468b      	mov	fp, r1
 8017f18:	4649      	mov	r1, r9
 8017f1a:	4640      	mov	r0, r8
 8017f1c:	f7e8 fe34 	bl	8000b88 <__aeabi_d2iz>
 8017f20:	4606      	mov	r6, r0
 8017f22:	f7e8 fb17 	bl	8000554 <__aeabi_i2d>
 8017f26:	4602      	mov	r2, r0
 8017f28:	460b      	mov	r3, r1
 8017f2a:	4640      	mov	r0, r8
 8017f2c:	4649      	mov	r1, r9
 8017f2e:	f7e8 f9c3 	bl	80002b8 <__aeabi_dsub>
 8017f32:	3630      	adds	r6, #48	; 0x30
 8017f34:	f805 6b01 	strb.w	r6, [r5], #1
 8017f38:	4652      	mov	r2, sl
 8017f3a:	465b      	mov	r3, fp
 8017f3c:	4680      	mov	r8, r0
 8017f3e:	4689      	mov	r9, r1
 8017f40:	f7e8 fde4 	bl	8000b0c <__aeabi_dcmplt>
 8017f44:	2800      	cmp	r0, #0
 8017f46:	d163      	bne.n	8018010 <_dtoa_r+0x608>
 8017f48:	4642      	mov	r2, r8
 8017f4a:	464b      	mov	r3, r9
 8017f4c:	4936      	ldr	r1, [pc, #216]	; (8018028 <_dtoa_r+0x620>)
 8017f4e:	2000      	movs	r0, #0
 8017f50:	f7e8 f9b2 	bl	80002b8 <__aeabi_dsub>
 8017f54:	4652      	mov	r2, sl
 8017f56:	465b      	mov	r3, fp
 8017f58:	f7e8 fdd8 	bl	8000b0c <__aeabi_dcmplt>
 8017f5c:	2800      	cmp	r0, #0
 8017f5e:	f040 80b5 	bne.w	80180cc <_dtoa_r+0x6c4>
 8017f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f64:	429d      	cmp	r5, r3
 8017f66:	d081      	beq.n	8017e6c <_dtoa_r+0x464>
 8017f68:	4b30      	ldr	r3, [pc, #192]	; (801802c <_dtoa_r+0x624>)
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	4650      	mov	r0, sl
 8017f6e:	4659      	mov	r1, fp
 8017f70:	f7e8 fb5a 	bl	8000628 <__aeabi_dmul>
 8017f74:	4b2d      	ldr	r3, [pc, #180]	; (801802c <_dtoa_r+0x624>)
 8017f76:	4682      	mov	sl, r0
 8017f78:	468b      	mov	fp, r1
 8017f7a:	4640      	mov	r0, r8
 8017f7c:	4649      	mov	r1, r9
 8017f7e:	2200      	movs	r2, #0
 8017f80:	f7e8 fb52 	bl	8000628 <__aeabi_dmul>
 8017f84:	4680      	mov	r8, r0
 8017f86:	4689      	mov	r9, r1
 8017f88:	e7c6      	b.n	8017f18 <_dtoa_r+0x510>
 8017f8a:	4650      	mov	r0, sl
 8017f8c:	4659      	mov	r1, fp
 8017f8e:	f7e8 fb4b 	bl	8000628 <__aeabi_dmul>
 8017f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f94:	9d01      	ldr	r5, [sp, #4]
 8017f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8017f98:	4682      	mov	sl, r0
 8017f9a:	468b      	mov	fp, r1
 8017f9c:	4649      	mov	r1, r9
 8017f9e:	4640      	mov	r0, r8
 8017fa0:	f7e8 fdf2 	bl	8000b88 <__aeabi_d2iz>
 8017fa4:	4606      	mov	r6, r0
 8017fa6:	f7e8 fad5 	bl	8000554 <__aeabi_i2d>
 8017faa:	3630      	adds	r6, #48	; 0x30
 8017fac:	4602      	mov	r2, r0
 8017fae:	460b      	mov	r3, r1
 8017fb0:	4640      	mov	r0, r8
 8017fb2:	4649      	mov	r1, r9
 8017fb4:	f7e8 f980 	bl	80002b8 <__aeabi_dsub>
 8017fb8:	f805 6b01 	strb.w	r6, [r5], #1
 8017fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fbe:	429d      	cmp	r5, r3
 8017fc0:	4680      	mov	r8, r0
 8017fc2:	4689      	mov	r9, r1
 8017fc4:	f04f 0200 	mov.w	r2, #0
 8017fc8:	d124      	bne.n	8018014 <_dtoa_r+0x60c>
 8017fca:	4b1b      	ldr	r3, [pc, #108]	; (8018038 <_dtoa_r+0x630>)
 8017fcc:	4650      	mov	r0, sl
 8017fce:	4659      	mov	r1, fp
 8017fd0:	f7e8 f974 	bl	80002bc <__adddf3>
 8017fd4:	4602      	mov	r2, r0
 8017fd6:	460b      	mov	r3, r1
 8017fd8:	4640      	mov	r0, r8
 8017fda:	4649      	mov	r1, r9
 8017fdc:	f7e8 fdb4 	bl	8000b48 <__aeabi_dcmpgt>
 8017fe0:	2800      	cmp	r0, #0
 8017fe2:	d173      	bne.n	80180cc <_dtoa_r+0x6c4>
 8017fe4:	4652      	mov	r2, sl
 8017fe6:	465b      	mov	r3, fp
 8017fe8:	4913      	ldr	r1, [pc, #76]	; (8018038 <_dtoa_r+0x630>)
 8017fea:	2000      	movs	r0, #0
 8017fec:	f7e8 f964 	bl	80002b8 <__aeabi_dsub>
 8017ff0:	4602      	mov	r2, r0
 8017ff2:	460b      	mov	r3, r1
 8017ff4:	4640      	mov	r0, r8
 8017ff6:	4649      	mov	r1, r9
 8017ff8:	f7e8 fd88 	bl	8000b0c <__aeabi_dcmplt>
 8017ffc:	2800      	cmp	r0, #0
 8017ffe:	f43f af35 	beq.w	8017e6c <_dtoa_r+0x464>
 8018002:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8018004:	1e6b      	subs	r3, r5, #1
 8018006:	930f      	str	r3, [sp, #60]	; 0x3c
 8018008:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801800c:	2b30      	cmp	r3, #48	; 0x30
 801800e:	d0f8      	beq.n	8018002 <_dtoa_r+0x5fa>
 8018010:	9700      	str	r7, [sp, #0]
 8018012:	e049      	b.n	80180a8 <_dtoa_r+0x6a0>
 8018014:	4b05      	ldr	r3, [pc, #20]	; (801802c <_dtoa_r+0x624>)
 8018016:	f7e8 fb07 	bl	8000628 <__aeabi_dmul>
 801801a:	4680      	mov	r8, r0
 801801c:	4689      	mov	r9, r1
 801801e:	e7bd      	b.n	8017f9c <_dtoa_r+0x594>
 8018020:	0801a3a8 	.word	0x0801a3a8
 8018024:	0801a380 	.word	0x0801a380
 8018028:	3ff00000 	.word	0x3ff00000
 801802c:	40240000 	.word	0x40240000
 8018030:	401c0000 	.word	0x401c0000
 8018034:	40140000 	.word	0x40140000
 8018038:	3fe00000 	.word	0x3fe00000
 801803c:	9d01      	ldr	r5, [sp, #4]
 801803e:	4656      	mov	r6, sl
 8018040:	465f      	mov	r7, fp
 8018042:	4642      	mov	r2, r8
 8018044:	464b      	mov	r3, r9
 8018046:	4630      	mov	r0, r6
 8018048:	4639      	mov	r1, r7
 801804a:	f7e8 fc17 	bl	800087c <__aeabi_ddiv>
 801804e:	f7e8 fd9b 	bl	8000b88 <__aeabi_d2iz>
 8018052:	4682      	mov	sl, r0
 8018054:	f7e8 fa7e 	bl	8000554 <__aeabi_i2d>
 8018058:	4642      	mov	r2, r8
 801805a:	464b      	mov	r3, r9
 801805c:	f7e8 fae4 	bl	8000628 <__aeabi_dmul>
 8018060:	4602      	mov	r2, r0
 8018062:	460b      	mov	r3, r1
 8018064:	4630      	mov	r0, r6
 8018066:	4639      	mov	r1, r7
 8018068:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801806c:	f7e8 f924 	bl	80002b8 <__aeabi_dsub>
 8018070:	f805 6b01 	strb.w	r6, [r5], #1
 8018074:	9e01      	ldr	r6, [sp, #4]
 8018076:	9f03      	ldr	r7, [sp, #12]
 8018078:	1bae      	subs	r6, r5, r6
 801807a:	42b7      	cmp	r7, r6
 801807c:	4602      	mov	r2, r0
 801807e:	460b      	mov	r3, r1
 8018080:	d135      	bne.n	80180ee <_dtoa_r+0x6e6>
 8018082:	f7e8 f91b 	bl	80002bc <__adddf3>
 8018086:	4642      	mov	r2, r8
 8018088:	464b      	mov	r3, r9
 801808a:	4606      	mov	r6, r0
 801808c:	460f      	mov	r7, r1
 801808e:	f7e8 fd5b 	bl	8000b48 <__aeabi_dcmpgt>
 8018092:	b9d0      	cbnz	r0, 80180ca <_dtoa_r+0x6c2>
 8018094:	4642      	mov	r2, r8
 8018096:	464b      	mov	r3, r9
 8018098:	4630      	mov	r0, r6
 801809a:	4639      	mov	r1, r7
 801809c:	f7e8 fd2c 	bl	8000af8 <__aeabi_dcmpeq>
 80180a0:	b110      	cbz	r0, 80180a8 <_dtoa_r+0x6a0>
 80180a2:	f01a 0f01 	tst.w	sl, #1
 80180a6:	d110      	bne.n	80180ca <_dtoa_r+0x6c2>
 80180a8:	4620      	mov	r0, r4
 80180aa:	ee18 1a10 	vmov	r1, s16
 80180ae:	f000 fc07 	bl	80188c0 <_Bfree>
 80180b2:	2300      	movs	r3, #0
 80180b4:	9800      	ldr	r0, [sp, #0]
 80180b6:	702b      	strb	r3, [r5, #0]
 80180b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80180ba:	3001      	adds	r0, #1
 80180bc:	6018      	str	r0, [r3, #0]
 80180be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	f43f acf1 	beq.w	8017aa8 <_dtoa_r+0xa0>
 80180c6:	601d      	str	r5, [r3, #0]
 80180c8:	e4ee      	b.n	8017aa8 <_dtoa_r+0xa0>
 80180ca:	9f00      	ldr	r7, [sp, #0]
 80180cc:	462b      	mov	r3, r5
 80180ce:	461d      	mov	r5, r3
 80180d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80180d4:	2a39      	cmp	r2, #57	; 0x39
 80180d6:	d106      	bne.n	80180e6 <_dtoa_r+0x6de>
 80180d8:	9a01      	ldr	r2, [sp, #4]
 80180da:	429a      	cmp	r2, r3
 80180dc:	d1f7      	bne.n	80180ce <_dtoa_r+0x6c6>
 80180de:	9901      	ldr	r1, [sp, #4]
 80180e0:	2230      	movs	r2, #48	; 0x30
 80180e2:	3701      	adds	r7, #1
 80180e4:	700a      	strb	r2, [r1, #0]
 80180e6:	781a      	ldrb	r2, [r3, #0]
 80180e8:	3201      	adds	r2, #1
 80180ea:	701a      	strb	r2, [r3, #0]
 80180ec:	e790      	b.n	8018010 <_dtoa_r+0x608>
 80180ee:	4ba6      	ldr	r3, [pc, #664]	; (8018388 <_dtoa_r+0x980>)
 80180f0:	2200      	movs	r2, #0
 80180f2:	f7e8 fa99 	bl	8000628 <__aeabi_dmul>
 80180f6:	2200      	movs	r2, #0
 80180f8:	2300      	movs	r3, #0
 80180fa:	4606      	mov	r6, r0
 80180fc:	460f      	mov	r7, r1
 80180fe:	f7e8 fcfb 	bl	8000af8 <__aeabi_dcmpeq>
 8018102:	2800      	cmp	r0, #0
 8018104:	d09d      	beq.n	8018042 <_dtoa_r+0x63a>
 8018106:	e7cf      	b.n	80180a8 <_dtoa_r+0x6a0>
 8018108:	9a08      	ldr	r2, [sp, #32]
 801810a:	2a00      	cmp	r2, #0
 801810c:	f000 80d7 	beq.w	80182be <_dtoa_r+0x8b6>
 8018110:	9a06      	ldr	r2, [sp, #24]
 8018112:	2a01      	cmp	r2, #1
 8018114:	f300 80ba 	bgt.w	801828c <_dtoa_r+0x884>
 8018118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801811a:	2a00      	cmp	r2, #0
 801811c:	f000 80b2 	beq.w	8018284 <_dtoa_r+0x87c>
 8018120:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018124:	9e07      	ldr	r6, [sp, #28]
 8018126:	9d04      	ldr	r5, [sp, #16]
 8018128:	9a04      	ldr	r2, [sp, #16]
 801812a:	441a      	add	r2, r3
 801812c:	9204      	str	r2, [sp, #16]
 801812e:	9a05      	ldr	r2, [sp, #20]
 8018130:	2101      	movs	r1, #1
 8018132:	441a      	add	r2, r3
 8018134:	4620      	mov	r0, r4
 8018136:	9205      	str	r2, [sp, #20]
 8018138:	f000 fc7a 	bl	8018a30 <__i2b>
 801813c:	4607      	mov	r7, r0
 801813e:	2d00      	cmp	r5, #0
 8018140:	dd0c      	ble.n	801815c <_dtoa_r+0x754>
 8018142:	9b05      	ldr	r3, [sp, #20]
 8018144:	2b00      	cmp	r3, #0
 8018146:	dd09      	ble.n	801815c <_dtoa_r+0x754>
 8018148:	42ab      	cmp	r3, r5
 801814a:	9a04      	ldr	r2, [sp, #16]
 801814c:	bfa8      	it	ge
 801814e:	462b      	movge	r3, r5
 8018150:	1ad2      	subs	r2, r2, r3
 8018152:	9204      	str	r2, [sp, #16]
 8018154:	9a05      	ldr	r2, [sp, #20]
 8018156:	1aed      	subs	r5, r5, r3
 8018158:	1ad3      	subs	r3, r2, r3
 801815a:	9305      	str	r3, [sp, #20]
 801815c:	9b07      	ldr	r3, [sp, #28]
 801815e:	b31b      	cbz	r3, 80181a8 <_dtoa_r+0x7a0>
 8018160:	9b08      	ldr	r3, [sp, #32]
 8018162:	2b00      	cmp	r3, #0
 8018164:	f000 80af 	beq.w	80182c6 <_dtoa_r+0x8be>
 8018168:	2e00      	cmp	r6, #0
 801816a:	dd13      	ble.n	8018194 <_dtoa_r+0x78c>
 801816c:	4639      	mov	r1, r7
 801816e:	4632      	mov	r2, r6
 8018170:	4620      	mov	r0, r4
 8018172:	f000 fd1d 	bl	8018bb0 <__pow5mult>
 8018176:	ee18 2a10 	vmov	r2, s16
 801817a:	4601      	mov	r1, r0
 801817c:	4607      	mov	r7, r0
 801817e:	4620      	mov	r0, r4
 8018180:	f000 fc6c 	bl	8018a5c <__multiply>
 8018184:	ee18 1a10 	vmov	r1, s16
 8018188:	4680      	mov	r8, r0
 801818a:	4620      	mov	r0, r4
 801818c:	f000 fb98 	bl	80188c0 <_Bfree>
 8018190:	ee08 8a10 	vmov	s16, r8
 8018194:	9b07      	ldr	r3, [sp, #28]
 8018196:	1b9a      	subs	r2, r3, r6
 8018198:	d006      	beq.n	80181a8 <_dtoa_r+0x7a0>
 801819a:	ee18 1a10 	vmov	r1, s16
 801819e:	4620      	mov	r0, r4
 80181a0:	f000 fd06 	bl	8018bb0 <__pow5mult>
 80181a4:	ee08 0a10 	vmov	s16, r0
 80181a8:	2101      	movs	r1, #1
 80181aa:	4620      	mov	r0, r4
 80181ac:	f000 fc40 	bl	8018a30 <__i2b>
 80181b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	4606      	mov	r6, r0
 80181b6:	f340 8088 	ble.w	80182ca <_dtoa_r+0x8c2>
 80181ba:	461a      	mov	r2, r3
 80181bc:	4601      	mov	r1, r0
 80181be:	4620      	mov	r0, r4
 80181c0:	f000 fcf6 	bl	8018bb0 <__pow5mult>
 80181c4:	9b06      	ldr	r3, [sp, #24]
 80181c6:	2b01      	cmp	r3, #1
 80181c8:	4606      	mov	r6, r0
 80181ca:	f340 8081 	ble.w	80182d0 <_dtoa_r+0x8c8>
 80181ce:	f04f 0800 	mov.w	r8, #0
 80181d2:	6933      	ldr	r3, [r6, #16]
 80181d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80181d8:	6918      	ldr	r0, [r3, #16]
 80181da:	f000 fbd9 	bl	8018990 <__hi0bits>
 80181de:	f1c0 0020 	rsb	r0, r0, #32
 80181e2:	9b05      	ldr	r3, [sp, #20]
 80181e4:	4418      	add	r0, r3
 80181e6:	f010 001f 	ands.w	r0, r0, #31
 80181ea:	f000 8092 	beq.w	8018312 <_dtoa_r+0x90a>
 80181ee:	f1c0 0320 	rsb	r3, r0, #32
 80181f2:	2b04      	cmp	r3, #4
 80181f4:	f340 808a 	ble.w	801830c <_dtoa_r+0x904>
 80181f8:	f1c0 001c 	rsb	r0, r0, #28
 80181fc:	9b04      	ldr	r3, [sp, #16]
 80181fe:	4403      	add	r3, r0
 8018200:	9304      	str	r3, [sp, #16]
 8018202:	9b05      	ldr	r3, [sp, #20]
 8018204:	4403      	add	r3, r0
 8018206:	4405      	add	r5, r0
 8018208:	9305      	str	r3, [sp, #20]
 801820a:	9b04      	ldr	r3, [sp, #16]
 801820c:	2b00      	cmp	r3, #0
 801820e:	dd07      	ble.n	8018220 <_dtoa_r+0x818>
 8018210:	ee18 1a10 	vmov	r1, s16
 8018214:	461a      	mov	r2, r3
 8018216:	4620      	mov	r0, r4
 8018218:	f000 fd24 	bl	8018c64 <__lshift>
 801821c:	ee08 0a10 	vmov	s16, r0
 8018220:	9b05      	ldr	r3, [sp, #20]
 8018222:	2b00      	cmp	r3, #0
 8018224:	dd05      	ble.n	8018232 <_dtoa_r+0x82a>
 8018226:	4631      	mov	r1, r6
 8018228:	461a      	mov	r2, r3
 801822a:	4620      	mov	r0, r4
 801822c:	f000 fd1a 	bl	8018c64 <__lshift>
 8018230:	4606      	mov	r6, r0
 8018232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018234:	2b00      	cmp	r3, #0
 8018236:	d06e      	beq.n	8018316 <_dtoa_r+0x90e>
 8018238:	ee18 0a10 	vmov	r0, s16
 801823c:	4631      	mov	r1, r6
 801823e:	f000 fd81 	bl	8018d44 <__mcmp>
 8018242:	2800      	cmp	r0, #0
 8018244:	da67      	bge.n	8018316 <_dtoa_r+0x90e>
 8018246:	9b00      	ldr	r3, [sp, #0]
 8018248:	3b01      	subs	r3, #1
 801824a:	ee18 1a10 	vmov	r1, s16
 801824e:	9300      	str	r3, [sp, #0]
 8018250:	220a      	movs	r2, #10
 8018252:	2300      	movs	r3, #0
 8018254:	4620      	mov	r0, r4
 8018256:	f000 fb55 	bl	8018904 <__multadd>
 801825a:	9b08      	ldr	r3, [sp, #32]
 801825c:	ee08 0a10 	vmov	s16, r0
 8018260:	2b00      	cmp	r3, #0
 8018262:	f000 81b1 	beq.w	80185c8 <_dtoa_r+0xbc0>
 8018266:	2300      	movs	r3, #0
 8018268:	4639      	mov	r1, r7
 801826a:	220a      	movs	r2, #10
 801826c:	4620      	mov	r0, r4
 801826e:	f000 fb49 	bl	8018904 <__multadd>
 8018272:	9b02      	ldr	r3, [sp, #8]
 8018274:	2b00      	cmp	r3, #0
 8018276:	4607      	mov	r7, r0
 8018278:	f300 808e 	bgt.w	8018398 <_dtoa_r+0x990>
 801827c:	9b06      	ldr	r3, [sp, #24]
 801827e:	2b02      	cmp	r3, #2
 8018280:	dc51      	bgt.n	8018326 <_dtoa_r+0x91e>
 8018282:	e089      	b.n	8018398 <_dtoa_r+0x990>
 8018284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018286:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801828a:	e74b      	b.n	8018124 <_dtoa_r+0x71c>
 801828c:	9b03      	ldr	r3, [sp, #12]
 801828e:	1e5e      	subs	r6, r3, #1
 8018290:	9b07      	ldr	r3, [sp, #28]
 8018292:	42b3      	cmp	r3, r6
 8018294:	bfbf      	itttt	lt
 8018296:	9b07      	ldrlt	r3, [sp, #28]
 8018298:	9607      	strlt	r6, [sp, #28]
 801829a:	1af2      	sublt	r2, r6, r3
 801829c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801829e:	bfb6      	itet	lt
 80182a0:	189b      	addlt	r3, r3, r2
 80182a2:	1b9e      	subge	r6, r3, r6
 80182a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80182a6:	9b03      	ldr	r3, [sp, #12]
 80182a8:	bfb8      	it	lt
 80182aa:	2600      	movlt	r6, #0
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	bfb7      	itett	lt
 80182b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80182b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80182b8:	1a9d      	sublt	r5, r3, r2
 80182ba:	2300      	movlt	r3, #0
 80182bc:	e734      	b.n	8018128 <_dtoa_r+0x720>
 80182be:	9e07      	ldr	r6, [sp, #28]
 80182c0:	9d04      	ldr	r5, [sp, #16]
 80182c2:	9f08      	ldr	r7, [sp, #32]
 80182c4:	e73b      	b.n	801813e <_dtoa_r+0x736>
 80182c6:	9a07      	ldr	r2, [sp, #28]
 80182c8:	e767      	b.n	801819a <_dtoa_r+0x792>
 80182ca:	9b06      	ldr	r3, [sp, #24]
 80182cc:	2b01      	cmp	r3, #1
 80182ce:	dc18      	bgt.n	8018302 <_dtoa_r+0x8fa>
 80182d0:	f1ba 0f00 	cmp.w	sl, #0
 80182d4:	d115      	bne.n	8018302 <_dtoa_r+0x8fa>
 80182d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80182da:	b993      	cbnz	r3, 8018302 <_dtoa_r+0x8fa>
 80182dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80182e0:	0d1b      	lsrs	r3, r3, #20
 80182e2:	051b      	lsls	r3, r3, #20
 80182e4:	b183      	cbz	r3, 8018308 <_dtoa_r+0x900>
 80182e6:	9b04      	ldr	r3, [sp, #16]
 80182e8:	3301      	adds	r3, #1
 80182ea:	9304      	str	r3, [sp, #16]
 80182ec:	9b05      	ldr	r3, [sp, #20]
 80182ee:	3301      	adds	r3, #1
 80182f0:	9305      	str	r3, [sp, #20]
 80182f2:	f04f 0801 	mov.w	r8, #1
 80182f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	f47f af6a 	bne.w	80181d2 <_dtoa_r+0x7ca>
 80182fe:	2001      	movs	r0, #1
 8018300:	e76f      	b.n	80181e2 <_dtoa_r+0x7da>
 8018302:	f04f 0800 	mov.w	r8, #0
 8018306:	e7f6      	b.n	80182f6 <_dtoa_r+0x8ee>
 8018308:	4698      	mov	r8, r3
 801830a:	e7f4      	b.n	80182f6 <_dtoa_r+0x8ee>
 801830c:	f43f af7d 	beq.w	801820a <_dtoa_r+0x802>
 8018310:	4618      	mov	r0, r3
 8018312:	301c      	adds	r0, #28
 8018314:	e772      	b.n	80181fc <_dtoa_r+0x7f4>
 8018316:	9b03      	ldr	r3, [sp, #12]
 8018318:	2b00      	cmp	r3, #0
 801831a:	dc37      	bgt.n	801838c <_dtoa_r+0x984>
 801831c:	9b06      	ldr	r3, [sp, #24]
 801831e:	2b02      	cmp	r3, #2
 8018320:	dd34      	ble.n	801838c <_dtoa_r+0x984>
 8018322:	9b03      	ldr	r3, [sp, #12]
 8018324:	9302      	str	r3, [sp, #8]
 8018326:	9b02      	ldr	r3, [sp, #8]
 8018328:	b96b      	cbnz	r3, 8018346 <_dtoa_r+0x93e>
 801832a:	4631      	mov	r1, r6
 801832c:	2205      	movs	r2, #5
 801832e:	4620      	mov	r0, r4
 8018330:	f000 fae8 	bl	8018904 <__multadd>
 8018334:	4601      	mov	r1, r0
 8018336:	4606      	mov	r6, r0
 8018338:	ee18 0a10 	vmov	r0, s16
 801833c:	f000 fd02 	bl	8018d44 <__mcmp>
 8018340:	2800      	cmp	r0, #0
 8018342:	f73f adbb 	bgt.w	8017ebc <_dtoa_r+0x4b4>
 8018346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018348:	9d01      	ldr	r5, [sp, #4]
 801834a:	43db      	mvns	r3, r3
 801834c:	9300      	str	r3, [sp, #0]
 801834e:	f04f 0800 	mov.w	r8, #0
 8018352:	4631      	mov	r1, r6
 8018354:	4620      	mov	r0, r4
 8018356:	f000 fab3 	bl	80188c0 <_Bfree>
 801835a:	2f00      	cmp	r7, #0
 801835c:	f43f aea4 	beq.w	80180a8 <_dtoa_r+0x6a0>
 8018360:	f1b8 0f00 	cmp.w	r8, #0
 8018364:	d005      	beq.n	8018372 <_dtoa_r+0x96a>
 8018366:	45b8      	cmp	r8, r7
 8018368:	d003      	beq.n	8018372 <_dtoa_r+0x96a>
 801836a:	4641      	mov	r1, r8
 801836c:	4620      	mov	r0, r4
 801836e:	f000 faa7 	bl	80188c0 <_Bfree>
 8018372:	4639      	mov	r1, r7
 8018374:	4620      	mov	r0, r4
 8018376:	f000 faa3 	bl	80188c0 <_Bfree>
 801837a:	e695      	b.n	80180a8 <_dtoa_r+0x6a0>
 801837c:	2600      	movs	r6, #0
 801837e:	4637      	mov	r7, r6
 8018380:	e7e1      	b.n	8018346 <_dtoa_r+0x93e>
 8018382:	9700      	str	r7, [sp, #0]
 8018384:	4637      	mov	r7, r6
 8018386:	e599      	b.n	8017ebc <_dtoa_r+0x4b4>
 8018388:	40240000 	.word	0x40240000
 801838c:	9b08      	ldr	r3, [sp, #32]
 801838e:	2b00      	cmp	r3, #0
 8018390:	f000 80ca 	beq.w	8018528 <_dtoa_r+0xb20>
 8018394:	9b03      	ldr	r3, [sp, #12]
 8018396:	9302      	str	r3, [sp, #8]
 8018398:	2d00      	cmp	r5, #0
 801839a:	dd05      	ble.n	80183a8 <_dtoa_r+0x9a0>
 801839c:	4639      	mov	r1, r7
 801839e:	462a      	mov	r2, r5
 80183a0:	4620      	mov	r0, r4
 80183a2:	f000 fc5f 	bl	8018c64 <__lshift>
 80183a6:	4607      	mov	r7, r0
 80183a8:	f1b8 0f00 	cmp.w	r8, #0
 80183ac:	d05b      	beq.n	8018466 <_dtoa_r+0xa5e>
 80183ae:	6879      	ldr	r1, [r7, #4]
 80183b0:	4620      	mov	r0, r4
 80183b2:	f000 fa45 	bl	8018840 <_Balloc>
 80183b6:	4605      	mov	r5, r0
 80183b8:	b928      	cbnz	r0, 80183c6 <_dtoa_r+0x9be>
 80183ba:	4b87      	ldr	r3, [pc, #540]	; (80185d8 <_dtoa_r+0xbd0>)
 80183bc:	4602      	mov	r2, r0
 80183be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80183c2:	f7ff bb3b 	b.w	8017a3c <_dtoa_r+0x34>
 80183c6:	693a      	ldr	r2, [r7, #16]
 80183c8:	3202      	adds	r2, #2
 80183ca:	0092      	lsls	r2, r2, #2
 80183cc:	f107 010c 	add.w	r1, r7, #12
 80183d0:	300c      	adds	r0, #12
 80183d2:	f7fe fcc5 	bl	8016d60 <memcpy>
 80183d6:	2201      	movs	r2, #1
 80183d8:	4629      	mov	r1, r5
 80183da:	4620      	mov	r0, r4
 80183dc:	f000 fc42 	bl	8018c64 <__lshift>
 80183e0:	9b01      	ldr	r3, [sp, #4]
 80183e2:	f103 0901 	add.w	r9, r3, #1
 80183e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80183ea:	4413      	add	r3, r2
 80183ec:	9305      	str	r3, [sp, #20]
 80183ee:	f00a 0301 	and.w	r3, sl, #1
 80183f2:	46b8      	mov	r8, r7
 80183f4:	9304      	str	r3, [sp, #16]
 80183f6:	4607      	mov	r7, r0
 80183f8:	4631      	mov	r1, r6
 80183fa:	ee18 0a10 	vmov	r0, s16
 80183fe:	f7ff fa75 	bl	80178ec <quorem>
 8018402:	4641      	mov	r1, r8
 8018404:	9002      	str	r0, [sp, #8]
 8018406:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801840a:	ee18 0a10 	vmov	r0, s16
 801840e:	f000 fc99 	bl	8018d44 <__mcmp>
 8018412:	463a      	mov	r2, r7
 8018414:	9003      	str	r0, [sp, #12]
 8018416:	4631      	mov	r1, r6
 8018418:	4620      	mov	r0, r4
 801841a:	f000 fcaf 	bl	8018d7c <__mdiff>
 801841e:	68c2      	ldr	r2, [r0, #12]
 8018420:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8018424:	4605      	mov	r5, r0
 8018426:	bb02      	cbnz	r2, 801846a <_dtoa_r+0xa62>
 8018428:	4601      	mov	r1, r0
 801842a:	ee18 0a10 	vmov	r0, s16
 801842e:	f000 fc89 	bl	8018d44 <__mcmp>
 8018432:	4602      	mov	r2, r0
 8018434:	4629      	mov	r1, r5
 8018436:	4620      	mov	r0, r4
 8018438:	9207      	str	r2, [sp, #28]
 801843a:	f000 fa41 	bl	80188c0 <_Bfree>
 801843e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018442:	ea43 0102 	orr.w	r1, r3, r2
 8018446:	9b04      	ldr	r3, [sp, #16]
 8018448:	430b      	orrs	r3, r1
 801844a:	464d      	mov	r5, r9
 801844c:	d10f      	bne.n	801846e <_dtoa_r+0xa66>
 801844e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8018452:	d02a      	beq.n	80184aa <_dtoa_r+0xaa2>
 8018454:	9b03      	ldr	r3, [sp, #12]
 8018456:	2b00      	cmp	r3, #0
 8018458:	dd02      	ble.n	8018460 <_dtoa_r+0xa58>
 801845a:	9b02      	ldr	r3, [sp, #8]
 801845c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8018460:	f88b a000 	strb.w	sl, [fp]
 8018464:	e775      	b.n	8018352 <_dtoa_r+0x94a>
 8018466:	4638      	mov	r0, r7
 8018468:	e7ba      	b.n	80183e0 <_dtoa_r+0x9d8>
 801846a:	2201      	movs	r2, #1
 801846c:	e7e2      	b.n	8018434 <_dtoa_r+0xa2c>
 801846e:	9b03      	ldr	r3, [sp, #12]
 8018470:	2b00      	cmp	r3, #0
 8018472:	db04      	blt.n	801847e <_dtoa_r+0xa76>
 8018474:	9906      	ldr	r1, [sp, #24]
 8018476:	430b      	orrs	r3, r1
 8018478:	9904      	ldr	r1, [sp, #16]
 801847a:	430b      	orrs	r3, r1
 801847c:	d122      	bne.n	80184c4 <_dtoa_r+0xabc>
 801847e:	2a00      	cmp	r2, #0
 8018480:	ddee      	ble.n	8018460 <_dtoa_r+0xa58>
 8018482:	ee18 1a10 	vmov	r1, s16
 8018486:	2201      	movs	r2, #1
 8018488:	4620      	mov	r0, r4
 801848a:	f000 fbeb 	bl	8018c64 <__lshift>
 801848e:	4631      	mov	r1, r6
 8018490:	ee08 0a10 	vmov	s16, r0
 8018494:	f000 fc56 	bl	8018d44 <__mcmp>
 8018498:	2800      	cmp	r0, #0
 801849a:	dc03      	bgt.n	80184a4 <_dtoa_r+0xa9c>
 801849c:	d1e0      	bne.n	8018460 <_dtoa_r+0xa58>
 801849e:	f01a 0f01 	tst.w	sl, #1
 80184a2:	d0dd      	beq.n	8018460 <_dtoa_r+0xa58>
 80184a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80184a8:	d1d7      	bne.n	801845a <_dtoa_r+0xa52>
 80184aa:	2339      	movs	r3, #57	; 0x39
 80184ac:	f88b 3000 	strb.w	r3, [fp]
 80184b0:	462b      	mov	r3, r5
 80184b2:	461d      	mov	r5, r3
 80184b4:	3b01      	subs	r3, #1
 80184b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80184ba:	2a39      	cmp	r2, #57	; 0x39
 80184bc:	d071      	beq.n	80185a2 <_dtoa_r+0xb9a>
 80184be:	3201      	adds	r2, #1
 80184c0:	701a      	strb	r2, [r3, #0]
 80184c2:	e746      	b.n	8018352 <_dtoa_r+0x94a>
 80184c4:	2a00      	cmp	r2, #0
 80184c6:	dd07      	ble.n	80184d8 <_dtoa_r+0xad0>
 80184c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80184cc:	d0ed      	beq.n	80184aa <_dtoa_r+0xaa2>
 80184ce:	f10a 0301 	add.w	r3, sl, #1
 80184d2:	f88b 3000 	strb.w	r3, [fp]
 80184d6:	e73c      	b.n	8018352 <_dtoa_r+0x94a>
 80184d8:	9b05      	ldr	r3, [sp, #20]
 80184da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80184de:	4599      	cmp	r9, r3
 80184e0:	d047      	beq.n	8018572 <_dtoa_r+0xb6a>
 80184e2:	ee18 1a10 	vmov	r1, s16
 80184e6:	2300      	movs	r3, #0
 80184e8:	220a      	movs	r2, #10
 80184ea:	4620      	mov	r0, r4
 80184ec:	f000 fa0a 	bl	8018904 <__multadd>
 80184f0:	45b8      	cmp	r8, r7
 80184f2:	ee08 0a10 	vmov	s16, r0
 80184f6:	f04f 0300 	mov.w	r3, #0
 80184fa:	f04f 020a 	mov.w	r2, #10
 80184fe:	4641      	mov	r1, r8
 8018500:	4620      	mov	r0, r4
 8018502:	d106      	bne.n	8018512 <_dtoa_r+0xb0a>
 8018504:	f000 f9fe 	bl	8018904 <__multadd>
 8018508:	4680      	mov	r8, r0
 801850a:	4607      	mov	r7, r0
 801850c:	f109 0901 	add.w	r9, r9, #1
 8018510:	e772      	b.n	80183f8 <_dtoa_r+0x9f0>
 8018512:	f000 f9f7 	bl	8018904 <__multadd>
 8018516:	4639      	mov	r1, r7
 8018518:	4680      	mov	r8, r0
 801851a:	2300      	movs	r3, #0
 801851c:	220a      	movs	r2, #10
 801851e:	4620      	mov	r0, r4
 8018520:	f000 f9f0 	bl	8018904 <__multadd>
 8018524:	4607      	mov	r7, r0
 8018526:	e7f1      	b.n	801850c <_dtoa_r+0xb04>
 8018528:	9b03      	ldr	r3, [sp, #12]
 801852a:	9302      	str	r3, [sp, #8]
 801852c:	9d01      	ldr	r5, [sp, #4]
 801852e:	ee18 0a10 	vmov	r0, s16
 8018532:	4631      	mov	r1, r6
 8018534:	f7ff f9da 	bl	80178ec <quorem>
 8018538:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801853c:	9b01      	ldr	r3, [sp, #4]
 801853e:	f805 ab01 	strb.w	sl, [r5], #1
 8018542:	1aea      	subs	r2, r5, r3
 8018544:	9b02      	ldr	r3, [sp, #8]
 8018546:	4293      	cmp	r3, r2
 8018548:	dd09      	ble.n	801855e <_dtoa_r+0xb56>
 801854a:	ee18 1a10 	vmov	r1, s16
 801854e:	2300      	movs	r3, #0
 8018550:	220a      	movs	r2, #10
 8018552:	4620      	mov	r0, r4
 8018554:	f000 f9d6 	bl	8018904 <__multadd>
 8018558:	ee08 0a10 	vmov	s16, r0
 801855c:	e7e7      	b.n	801852e <_dtoa_r+0xb26>
 801855e:	9b02      	ldr	r3, [sp, #8]
 8018560:	2b00      	cmp	r3, #0
 8018562:	bfc8      	it	gt
 8018564:	461d      	movgt	r5, r3
 8018566:	9b01      	ldr	r3, [sp, #4]
 8018568:	bfd8      	it	le
 801856a:	2501      	movle	r5, #1
 801856c:	441d      	add	r5, r3
 801856e:	f04f 0800 	mov.w	r8, #0
 8018572:	ee18 1a10 	vmov	r1, s16
 8018576:	2201      	movs	r2, #1
 8018578:	4620      	mov	r0, r4
 801857a:	f000 fb73 	bl	8018c64 <__lshift>
 801857e:	4631      	mov	r1, r6
 8018580:	ee08 0a10 	vmov	s16, r0
 8018584:	f000 fbde 	bl	8018d44 <__mcmp>
 8018588:	2800      	cmp	r0, #0
 801858a:	dc91      	bgt.n	80184b0 <_dtoa_r+0xaa8>
 801858c:	d102      	bne.n	8018594 <_dtoa_r+0xb8c>
 801858e:	f01a 0f01 	tst.w	sl, #1
 8018592:	d18d      	bne.n	80184b0 <_dtoa_r+0xaa8>
 8018594:	462b      	mov	r3, r5
 8018596:	461d      	mov	r5, r3
 8018598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801859c:	2a30      	cmp	r2, #48	; 0x30
 801859e:	d0fa      	beq.n	8018596 <_dtoa_r+0xb8e>
 80185a0:	e6d7      	b.n	8018352 <_dtoa_r+0x94a>
 80185a2:	9a01      	ldr	r2, [sp, #4]
 80185a4:	429a      	cmp	r2, r3
 80185a6:	d184      	bne.n	80184b2 <_dtoa_r+0xaaa>
 80185a8:	9b00      	ldr	r3, [sp, #0]
 80185aa:	3301      	adds	r3, #1
 80185ac:	9300      	str	r3, [sp, #0]
 80185ae:	2331      	movs	r3, #49	; 0x31
 80185b0:	7013      	strb	r3, [r2, #0]
 80185b2:	e6ce      	b.n	8018352 <_dtoa_r+0x94a>
 80185b4:	4b09      	ldr	r3, [pc, #36]	; (80185dc <_dtoa_r+0xbd4>)
 80185b6:	f7ff ba95 	b.w	8017ae4 <_dtoa_r+0xdc>
 80185ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80185bc:	2b00      	cmp	r3, #0
 80185be:	f47f aa6e 	bne.w	8017a9e <_dtoa_r+0x96>
 80185c2:	4b07      	ldr	r3, [pc, #28]	; (80185e0 <_dtoa_r+0xbd8>)
 80185c4:	f7ff ba8e 	b.w	8017ae4 <_dtoa_r+0xdc>
 80185c8:	9b02      	ldr	r3, [sp, #8]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	dcae      	bgt.n	801852c <_dtoa_r+0xb24>
 80185ce:	9b06      	ldr	r3, [sp, #24]
 80185d0:	2b02      	cmp	r3, #2
 80185d2:	f73f aea8 	bgt.w	8018326 <_dtoa_r+0x91e>
 80185d6:	e7a9      	b.n	801852c <_dtoa_r+0xb24>
 80185d8:	0801a2a4 	.word	0x0801a2a4
 80185dc:	0801a0c4 	.word	0x0801a0c4
 80185e0:	0801a225 	.word	0x0801a225

080185e4 <std>:
 80185e4:	2300      	movs	r3, #0
 80185e6:	b510      	push	{r4, lr}
 80185e8:	4604      	mov	r4, r0
 80185ea:	e9c0 3300 	strd	r3, r3, [r0]
 80185ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80185f2:	6083      	str	r3, [r0, #8]
 80185f4:	8181      	strh	r1, [r0, #12]
 80185f6:	6643      	str	r3, [r0, #100]	; 0x64
 80185f8:	81c2      	strh	r2, [r0, #14]
 80185fa:	6183      	str	r3, [r0, #24]
 80185fc:	4619      	mov	r1, r3
 80185fe:	2208      	movs	r2, #8
 8018600:	305c      	adds	r0, #92	; 0x5c
 8018602:	f7fe fbbb 	bl	8016d7c <memset>
 8018606:	4b05      	ldr	r3, [pc, #20]	; (801861c <std+0x38>)
 8018608:	6263      	str	r3, [r4, #36]	; 0x24
 801860a:	4b05      	ldr	r3, [pc, #20]	; (8018620 <std+0x3c>)
 801860c:	62a3      	str	r3, [r4, #40]	; 0x28
 801860e:	4b05      	ldr	r3, [pc, #20]	; (8018624 <std+0x40>)
 8018610:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018612:	4b05      	ldr	r3, [pc, #20]	; (8018628 <std+0x44>)
 8018614:	6224      	str	r4, [r4, #32]
 8018616:	6323      	str	r3, [r4, #48]	; 0x30
 8018618:	bd10      	pop	{r4, pc}
 801861a:	bf00      	nop
 801861c:	080194e1 	.word	0x080194e1
 8018620:	08019503 	.word	0x08019503
 8018624:	0801953b 	.word	0x0801953b
 8018628:	0801955f 	.word	0x0801955f

0801862c <_cleanup_r>:
 801862c:	4901      	ldr	r1, [pc, #4]	; (8018634 <_cleanup_r+0x8>)
 801862e:	f000 b8c1 	b.w	80187b4 <_fwalk_reent>
 8018632:	bf00      	nop
 8018634:	08019865 	.word	0x08019865

08018638 <__sfmoreglue>:
 8018638:	b570      	push	{r4, r5, r6, lr}
 801863a:	2268      	movs	r2, #104	; 0x68
 801863c:	1e4d      	subs	r5, r1, #1
 801863e:	4355      	muls	r5, r2
 8018640:	460e      	mov	r6, r1
 8018642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018646:	f7fe fc0d 	bl	8016e64 <_malloc_r>
 801864a:	4604      	mov	r4, r0
 801864c:	b140      	cbz	r0, 8018660 <__sfmoreglue+0x28>
 801864e:	2100      	movs	r1, #0
 8018650:	e9c0 1600 	strd	r1, r6, [r0]
 8018654:	300c      	adds	r0, #12
 8018656:	60a0      	str	r0, [r4, #8]
 8018658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801865c:	f7fe fb8e 	bl	8016d7c <memset>
 8018660:	4620      	mov	r0, r4
 8018662:	bd70      	pop	{r4, r5, r6, pc}

08018664 <__sfp_lock_acquire>:
 8018664:	4801      	ldr	r0, [pc, #4]	; (801866c <__sfp_lock_acquire+0x8>)
 8018666:	f000 b8ca 	b.w	80187fe <__retarget_lock_acquire_recursive>
 801866a:	bf00      	nop
 801866c:	20002f69 	.word	0x20002f69

08018670 <__sfp_lock_release>:
 8018670:	4801      	ldr	r0, [pc, #4]	; (8018678 <__sfp_lock_release+0x8>)
 8018672:	f000 b8c5 	b.w	8018800 <__retarget_lock_release_recursive>
 8018676:	bf00      	nop
 8018678:	20002f69 	.word	0x20002f69

0801867c <__sinit_lock_acquire>:
 801867c:	4801      	ldr	r0, [pc, #4]	; (8018684 <__sinit_lock_acquire+0x8>)
 801867e:	f000 b8be 	b.w	80187fe <__retarget_lock_acquire_recursive>
 8018682:	bf00      	nop
 8018684:	20002f6a 	.word	0x20002f6a

08018688 <__sinit_lock_release>:
 8018688:	4801      	ldr	r0, [pc, #4]	; (8018690 <__sinit_lock_release+0x8>)
 801868a:	f000 b8b9 	b.w	8018800 <__retarget_lock_release_recursive>
 801868e:	bf00      	nop
 8018690:	20002f6a 	.word	0x20002f6a

08018694 <__sinit>:
 8018694:	b510      	push	{r4, lr}
 8018696:	4604      	mov	r4, r0
 8018698:	f7ff fff0 	bl	801867c <__sinit_lock_acquire>
 801869c:	69a3      	ldr	r3, [r4, #24]
 801869e:	b11b      	cbz	r3, 80186a8 <__sinit+0x14>
 80186a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186a4:	f7ff bff0 	b.w	8018688 <__sinit_lock_release>
 80186a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80186ac:	6523      	str	r3, [r4, #80]	; 0x50
 80186ae:	4b13      	ldr	r3, [pc, #76]	; (80186fc <__sinit+0x68>)
 80186b0:	4a13      	ldr	r2, [pc, #76]	; (8018700 <__sinit+0x6c>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80186b6:	42a3      	cmp	r3, r4
 80186b8:	bf04      	itt	eq
 80186ba:	2301      	moveq	r3, #1
 80186bc:	61a3      	streq	r3, [r4, #24]
 80186be:	4620      	mov	r0, r4
 80186c0:	f000 f820 	bl	8018704 <__sfp>
 80186c4:	6060      	str	r0, [r4, #4]
 80186c6:	4620      	mov	r0, r4
 80186c8:	f000 f81c 	bl	8018704 <__sfp>
 80186cc:	60a0      	str	r0, [r4, #8]
 80186ce:	4620      	mov	r0, r4
 80186d0:	f000 f818 	bl	8018704 <__sfp>
 80186d4:	2200      	movs	r2, #0
 80186d6:	60e0      	str	r0, [r4, #12]
 80186d8:	2104      	movs	r1, #4
 80186da:	6860      	ldr	r0, [r4, #4]
 80186dc:	f7ff ff82 	bl	80185e4 <std>
 80186e0:	68a0      	ldr	r0, [r4, #8]
 80186e2:	2201      	movs	r2, #1
 80186e4:	2109      	movs	r1, #9
 80186e6:	f7ff ff7d 	bl	80185e4 <std>
 80186ea:	68e0      	ldr	r0, [r4, #12]
 80186ec:	2202      	movs	r2, #2
 80186ee:	2112      	movs	r1, #18
 80186f0:	f7ff ff78 	bl	80185e4 <std>
 80186f4:	2301      	movs	r3, #1
 80186f6:	61a3      	str	r3, [r4, #24]
 80186f8:	e7d2      	b.n	80186a0 <__sinit+0xc>
 80186fa:	bf00      	nop
 80186fc:	0801a0b0 	.word	0x0801a0b0
 8018700:	0801862d 	.word	0x0801862d

08018704 <__sfp>:
 8018704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018706:	4607      	mov	r7, r0
 8018708:	f7ff ffac 	bl	8018664 <__sfp_lock_acquire>
 801870c:	4b1e      	ldr	r3, [pc, #120]	; (8018788 <__sfp+0x84>)
 801870e:	681e      	ldr	r6, [r3, #0]
 8018710:	69b3      	ldr	r3, [r6, #24]
 8018712:	b913      	cbnz	r3, 801871a <__sfp+0x16>
 8018714:	4630      	mov	r0, r6
 8018716:	f7ff ffbd 	bl	8018694 <__sinit>
 801871a:	3648      	adds	r6, #72	; 0x48
 801871c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018720:	3b01      	subs	r3, #1
 8018722:	d503      	bpl.n	801872c <__sfp+0x28>
 8018724:	6833      	ldr	r3, [r6, #0]
 8018726:	b30b      	cbz	r3, 801876c <__sfp+0x68>
 8018728:	6836      	ldr	r6, [r6, #0]
 801872a:	e7f7      	b.n	801871c <__sfp+0x18>
 801872c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018730:	b9d5      	cbnz	r5, 8018768 <__sfp+0x64>
 8018732:	4b16      	ldr	r3, [pc, #88]	; (801878c <__sfp+0x88>)
 8018734:	60e3      	str	r3, [r4, #12]
 8018736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801873a:	6665      	str	r5, [r4, #100]	; 0x64
 801873c:	f000 f85e 	bl	80187fc <__retarget_lock_init_recursive>
 8018740:	f7ff ff96 	bl	8018670 <__sfp_lock_release>
 8018744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801874c:	6025      	str	r5, [r4, #0]
 801874e:	61a5      	str	r5, [r4, #24]
 8018750:	2208      	movs	r2, #8
 8018752:	4629      	mov	r1, r5
 8018754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018758:	f7fe fb10 	bl	8016d7c <memset>
 801875c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018764:	4620      	mov	r0, r4
 8018766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018768:	3468      	adds	r4, #104	; 0x68
 801876a:	e7d9      	b.n	8018720 <__sfp+0x1c>
 801876c:	2104      	movs	r1, #4
 801876e:	4638      	mov	r0, r7
 8018770:	f7ff ff62 	bl	8018638 <__sfmoreglue>
 8018774:	4604      	mov	r4, r0
 8018776:	6030      	str	r0, [r6, #0]
 8018778:	2800      	cmp	r0, #0
 801877a:	d1d5      	bne.n	8018728 <__sfp+0x24>
 801877c:	f7ff ff78 	bl	8018670 <__sfp_lock_release>
 8018780:	230c      	movs	r3, #12
 8018782:	603b      	str	r3, [r7, #0]
 8018784:	e7ee      	b.n	8018764 <__sfp+0x60>
 8018786:	bf00      	nop
 8018788:	0801a0b0 	.word	0x0801a0b0
 801878c:	ffff0001 	.word	0xffff0001

08018790 <fiprintf>:
 8018790:	b40e      	push	{r1, r2, r3}
 8018792:	b503      	push	{r0, r1, lr}
 8018794:	4601      	mov	r1, r0
 8018796:	ab03      	add	r3, sp, #12
 8018798:	4805      	ldr	r0, [pc, #20]	; (80187b0 <fiprintf+0x20>)
 801879a:	f853 2b04 	ldr.w	r2, [r3], #4
 801879e:	6800      	ldr	r0, [r0, #0]
 80187a0:	9301      	str	r3, [sp, #4]
 80187a2:	f000 fd6d 	bl	8019280 <_vfiprintf_r>
 80187a6:	b002      	add	sp, #8
 80187a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80187ac:	b003      	add	sp, #12
 80187ae:	4770      	bx	lr
 80187b0:	20000184 	.word	0x20000184

080187b4 <_fwalk_reent>:
 80187b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187b8:	4606      	mov	r6, r0
 80187ba:	4688      	mov	r8, r1
 80187bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80187c0:	2700      	movs	r7, #0
 80187c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80187c6:	f1b9 0901 	subs.w	r9, r9, #1
 80187ca:	d505      	bpl.n	80187d8 <_fwalk_reent+0x24>
 80187cc:	6824      	ldr	r4, [r4, #0]
 80187ce:	2c00      	cmp	r4, #0
 80187d0:	d1f7      	bne.n	80187c2 <_fwalk_reent+0xe>
 80187d2:	4638      	mov	r0, r7
 80187d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187d8:	89ab      	ldrh	r3, [r5, #12]
 80187da:	2b01      	cmp	r3, #1
 80187dc:	d907      	bls.n	80187ee <_fwalk_reent+0x3a>
 80187de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80187e2:	3301      	adds	r3, #1
 80187e4:	d003      	beq.n	80187ee <_fwalk_reent+0x3a>
 80187e6:	4629      	mov	r1, r5
 80187e8:	4630      	mov	r0, r6
 80187ea:	47c0      	blx	r8
 80187ec:	4307      	orrs	r7, r0
 80187ee:	3568      	adds	r5, #104	; 0x68
 80187f0:	e7e9      	b.n	80187c6 <_fwalk_reent+0x12>
	...

080187f4 <_localeconv_r>:
 80187f4:	4800      	ldr	r0, [pc, #0]	; (80187f8 <_localeconv_r+0x4>)
 80187f6:	4770      	bx	lr
 80187f8:	200002d8 	.word	0x200002d8

080187fc <__retarget_lock_init_recursive>:
 80187fc:	4770      	bx	lr

080187fe <__retarget_lock_acquire_recursive>:
 80187fe:	4770      	bx	lr

08018800 <__retarget_lock_release_recursive>:
 8018800:	4770      	bx	lr

08018802 <__ascii_mbtowc>:
 8018802:	b082      	sub	sp, #8
 8018804:	b901      	cbnz	r1, 8018808 <__ascii_mbtowc+0x6>
 8018806:	a901      	add	r1, sp, #4
 8018808:	b142      	cbz	r2, 801881c <__ascii_mbtowc+0x1a>
 801880a:	b14b      	cbz	r3, 8018820 <__ascii_mbtowc+0x1e>
 801880c:	7813      	ldrb	r3, [r2, #0]
 801880e:	600b      	str	r3, [r1, #0]
 8018810:	7812      	ldrb	r2, [r2, #0]
 8018812:	1e10      	subs	r0, r2, #0
 8018814:	bf18      	it	ne
 8018816:	2001      	movne	r0, #1
 8018818:	b002      	add	sp, #8
 801881a:	4770      	bx	lr
 801881c:	4610      	mov	r0, r2
 801881e:	e7fb      	b.n	8018818 <__ascii_mbtowc+0x16>
 8018820:	f06f 0001 	mvn.w	r0, #1
 8018824:	e7f8      	b.n	8018818 <__ascii_mbtowc+0x16>
	...

08018828 <__malloc_lock>:
 8018828:	4801      	ldr	r0, [pc, #4]	; (8018830 <__malloc_lock+0x8>)
 801882a:	f7ff bfe8 	b.w	80187fe <__retarget_lock_acquire_recursive>
 801882e:	bf00      	nop
 8018830:	20002f68 	.word	0x20002f68

08018834 <__malloc_unlock>:
 8018834:	4801      	ldr	r0, [pc, #4]	; (801883c <__malloc_unlock+0x8>)
 8018836:	f7ff bfe3 	b.w	8018800 <__retarget_lock_release_recursive>
 801883a:	bf00      	nop
 801883c:	20002f68 	.word	0x20002f68

08018840 <_Balloc>:
 8018840:	b570      	push	{r4, r5, r6, lr}
 8018842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018844:	4604      	mov	r4, r0
 8018846:	460d      	mov	r5, r1
 8018848:	b976      	cbnz	r6, 8018868 <_Balloc+0x28>
 801884a:	2010      	movs	r0, #16
 801884c:	f7fe fa80 	bl	8016d50 <malloc>
 8018850:	4602      	mov	r2, r0
 8018852:	6260      	str	r0, [r4, #36]	; 0x24
 8018854:	b920      	cbnz	r0, 8018860 <_Balloc+0x20>
 8018856:	4b18      	ldr	r3, [pc, #96]	; (80188b8 <_Balloc+0x78>)
 8018858:	4818      	ldr	r0, [pc, #96]	; (80188bc <_Balloc+0x7c>)
 801885a:	2166      	movs	r1, #102	; 0x66
 801885c:	f7ff f828 	bl	80178b0 <__assert_func>
 8018860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018864:	6006      	str	r6, [r0, #0]
 8018866:	60c6      	str	r6, [r0, #12]
 8018868:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801886a:	68f3      	ldr	r3, [r6, #12]
 801886c:	b183      	cbz	r3, 8018890 <_Balloc+0x50>
 801886e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018870:	68db      	ldr	r3, [r3, #12]
 8018872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018876:	b9b8      	cbnz	r0, 80188a8 <_Balloc+0x68>
 8018878:	2101      	movs	r1, #1
 801887a:	fa01 f605 	lsl.w	r6, r1, r5
 801887e:	1d72      	adds	r2, r6, #5
 8018880:	0092      	lsls	r2, r2, #2
 8018882:	4620      	mov	r0, r4
 8018884:	f000 fb60 	bl	8018f48 <_calloc_r>
 8018888:	b160      	cbz	r0, 80188a4 <_Balloc+0x64>
 801888a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801888e:	e00e      	b.n	80188ae <_Balloc+0x6e>
 8018890:	2221      	movs	r2, #33	; 0x21
 8018892:	2104      	movs	r1, #4
 8018894:	4620      	mov	r0, r4
 8018896:	f000 fb57 	bl	8018f48 <_calloc_r>
 801889a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801889c:	60f0      	str	r0, [r6, #12]
 801889e:	68db      	ldr	r3, [r3, #12]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d1e4      	bne.n	801886e <_Balloc+0x2e>
 80188a4:	2000      	movs	r0, #0
 80188a6:	bd70      	pop	{r4, r5, r6, pc}
 80188a8:	6802      	ldr	r2, [r0, #0]
 80188aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80188ae:	2300      	movs	r3, #0
 80188b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80188b4:	e7f7      	b.n	80188a6 <_Balloc+0x66>
 80188b6:	bf00      	nop
 80188b8:	0801a232 	.word	0x0801a232
 80188bc:	0801a322 	.word	0x0801a322

080188c0 <_Bfree>:
 80188c0:	b570      	push	{r4, r5, r6, lr}
 80188c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80188c4:	4605      	mov	r5, r0
 80188c6:	460c      	mov	r4, r1
 80188c8:	b976      	cbnz	r6, 80188e8 <_Bfree+0x28>
 80188ca:	2010      	movs	r0, #16
 80188cc:	f7fe fa40 	bl	8016d50 <malloc>
 80188d0:	4602      	mov	r2, r0
 80188d2:	6268      	str	r0, [r5, #36]	; 0x24
 80188d4:	b920      	cbnz	r0, 80188e0 <_Bfree+0x20>
 80188d6:	4b09      	ldr	r3, [pc, #36]	; (80188fc <_Bfree+0x3c>)
 80188d8:	4809      	ldr	r0, [pc, #36]	; (8018900 <_Bfree+0x40>)
 80188da:	218a      	movs	r1, #138	; 0x8a
 80188dc:	f7fe ffe8 	bl	80178b0 <__assert_func>
 80188e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80188e4:	6006      	str	r6, [r0, #0]
 80188e6:	60c6      	str	r6, [r0, #12]
 80188e8:	b13c      	cbz	r4, 80188fa <_Bfree+0x3a>
 80188ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80188ec:	6862      	ldr	r2, [r4, #4]
 80188ee:	68db      	ldr	r3, [r3, #12]
 80188f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80188f4:	6021      	str	r1, [r4, #0]
 80188f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80188fa:	bd70      	pop	{r4, r5, r6, pc}
 80188fc:	0801a232 	.word	0x0801a232
 8018900:	0801a322 	.word	0x0801a322

08018904 <__multadd>:
 8018904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018908:	690d      	ldr	r5, [r1, #16]
 801890a:	4607      	mov	r7, r0
 801890c:	460c      	mov	r4, r1
 801890e:	461e      	mov	r6, r3
 8018910:	f101 0c14 	add.w	ip, r1, #20
 8018914:	2000      	movs	r0, #0
 8018916:	f8dc 3000 	ldr.w	r3, [ip]
 801891a:	b299      	uxth	r1, r3
 801891c:	fb02 6101 	mla	r1, r2, r1, r6
 8018920:	0c1e      	lsrs	r6, r3, #16
 8018922:	0c0b      	lsrs	r3, r1, #16
 8018924:	fb02 3306 	mla	r3, r2, r6, r3
 8018928:	b289      	uxth	r1, r1
 801892a:	3001      	adds	r0, #1
 801892c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018930:	4285      	cmp	r5, r0
 8018932:	f84c 1b04 	str.w	r1, [ip], #4
 8018936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801893a:	dcec      	bgt.n	8018916 <__multadd+0x12>
 801893c:	b30e      	cbz	r6, 8018982 <__multadd+0x7e>
 801893e:	68a3      	ldr	r3, [r4, #8]
 8018940:	42ab      	cmp	r3, r5
 8018942:	dc19      	bgt.n	8018978 <__multadd+0x74>
 8018944:	6861      	ldr	r1, [r4, #4]
 8018946:	4638      	mov	r0, r7
 8018948:	3101      	adds	r1, #1
 801894a:	f7ff ff79 	bl	8018840 <_Balloc>
 801894e:	4680      	mov	r8, r0
 8018950:	b928      	cbnz	r0, 801895e <__multadd+0x5a>
 8018952:	4602      	mov	r2, r0
 8018954:	4b0c      	ldr	r3, [pc, #48]	; (8018988 <__multadd+0x84>)
 8018956:	480d      	ldr	r0, [pc, #52]	; (801898c <__multadd+0x88>)
 8018958:	21b5      	movs	r1, #181	; 0xb5
 801895a:	f7fe ffa9 	bl	80178b0 <__assert_func>
 801895e:	6922      	ldr	r2, [r4, #16]
 8018960:	3202      	adds	r2, #2
 8018962:	f104 010c 	add.w	r1, r4, #12
 8018966:	0092      	lsls	r2, r2, #2
 8018968:	300c      	adds	r0, #12
 801896a:	f7fe f9f9 	bl	8016d60 <memcpy>
 801896e:	4621      	mov	r1, r4
 8018970:	4638      	mov	r0, r7
 8018972:	f7ff ffa5 	bl	80188c0 <_Bfree>
 8018976:	4644      	mov	r4, r8
 8018978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801897c:	3501      	adds	r5, #1
 801897e:	615e      	str	r6, [r3, #20]
 8018980:	6125      	str	r5, [r4, #16]
 8018982:	4620      	mov	r0, r4
 8018984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018988:	0801a2a4 	.word	0x0801a2a4
 801898c:	0801a322 	.word	0x0801a322

08018990 <__hi0bits>:
 8018990:	0c03      	lsrs	r3, r0, #16
 8018992:	041b      	lsls	r3, r3, #16
 8018994:	b9d3      	cbnz	r3, 80189cc <__hi0bits+0x3c>
 8018996:	0400      	lsls	r0, r0, #16
 8018998:	2310      	movs	r3, #16
 801899a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801899e:	bf04      	itt	eq
 80189a0:	0200      	lsleq	r0, r0, #8
 80189a2:	3308      	addeq	r3, #8
 80189a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80189a8:	bf04      	itt	eq
 80189aa:	0100      	lsleq	r0, r0, #4
 80189ac:	3304      	addeq	r3, #4
 80189ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80189b2:	bf04      	itt	eq
 80189b4:	0080      	lsleq	r0, r0, #2
 80189b6:	3302      	addeq	r3, #2
 80189b8:	2800      	cmp	r0, #0
 80189ba:	db05      	blt.n	80189c8 <__hi0bits+0x38>
 80189bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80189c0:	f103 0301 	add.w	r3, r3, #1
 80189c4:	bf08      	it	eq
 80189c6:	2320      	moveq	r3, #32
 80189c8:	4618      	mov	r0, r3
 80189ca:	4770      	bx	lr
 80189cc:	2300      	movs	r3, #0
 80189ce:	e7e4      	b.n	801899a <__hi0bits+0xa>

080189d0 <__lo0bits>:
 80189d0:	6803      	ldr	r3, [r0, #0]
 80189d2:	f013 0207 	ands.w	r2, r3, #7
 80189d6:	4601      	mov	r1, r0
 80189d8:	d00b      	beq.n	80189f2 <__lo0bits+0x22>
 80189da:	07da      	lsls	r2, r3, #31
 80189dc:	d423      	bmi.n	8018a26 <__lo0bits+0x56>
 80189de:	0798      	lsls	r0, r3, #30
 80189e0:	bf49      	itett	mi
 80189e2:	085b      	lsrmi	r3, r3, #1
 80189e4:	089b      	lsrpl	r3, r3, #2
 80189e6:	2001      	movmi	r0, #1
 80189e8:	600b      	strmi	r3, [r1, #0]
 80189ea:	bf5c      	itt	pl
 80189ec:	600b      	strpl	r3, [r1, #0]
 80189ee:	2002      	movpl	r0, #2
 80189f0:	4770      	bx	lr
 80189f2:	b298      	uxth	r0, r3
 80189f4:	b9a8      	cbnz	r0, 8018a22 <__lo0bits+0x52>
 80189f6:	0c1b      	lsrs	r3, r3, #16
 80189f8:	2010      	movs	r0, #16
 80189fa:	b2da      	uxtb	r2, r3
 80189fc:	b90a      	cbnz	r2, 8018a02 <__lo0bits+0x32>
 80189fe:	3008      	adds	r0, #8
 8018a00:	0a1b      	lsrs	r3, r3, #8
 8018a02:	071a      	lsls	r2, r3, #28
 8018a04:	bf04      	itt	eq
 8018a06:	091b      	lsreq	r3, r3, #4
 8018a08:	3004      	addeq	r0, #4
 8018a0a:	079a      	lsls	r2, r3, #30
 8018a0c:	bf04      	itt	eq
 8018a0e:	089b      	lsreq	r3, r3, #2
 8018a10:	3002      	addeq	r0, #2
 8018a12:	07da      	lsls	r2, r3, #31
 8018a14:	d403      	bmi.n	8018a1e <__lo0bits+0x4e>
 8018a16:	085b      	lsrs	r3, r3, #1
 8018a18:	f100 0001 	add.w	r0, r0, #1
 8018a1c:	d005      	beq.n	8018a2a <__lo0bits+0x5a>
 8018a1e:	600b      	str	r3, [r1, #0]
 8018a20:	4770      	bx	lr
 8018a22:	4610      	mov	r0, r2
 8018a24:	e7e9      	b.n	80189fa <__lo0bits+0x2a>
 8018a26:	2000      	movs	r0, #0
 8018a28:	4770      	bx	lr
 8018a2a:	2020      	movs	r0, #32
 8018a2c:	4770      	bx	lr
	...

08018a30 <__i2b>:
 8018a30:	b510      	push	{r4, lr}
 8018a32:	460c      	mov	r4, r1
 8018a34:	2101      	movs	r1, #1
 8018a36:	f7ff ff03 	bl	8018840 <_Balloc>
 8018a3a:	4602      	mov	r2, r0
 8018a3c:	b928      	cbnz	r0, 8018a4a <__i2b+0x1a>
 8018a3e:	4b05      	ldr	r3, [pc, #20]	; (8018a54 <__i2b+0x24>)
 8018a40:	4805      	ldr	r0, [pc, #20]	; (8018a58 <__i2b+0x28>)
 8018a42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018a46:	f7fe ff33 	bl	80178b0 <__assert_func>
 8018a4a:	2301      	movs	r3, #1
 8018a4c:	6144      	str	r4, [r0, #20]
 8018a4e:	6103      	str	r3, [r0, #16]
 8018a50:	bd10      	pop	{r4, pc}
 8018a52:	bf00      	nop
 8018a54:	0801a2a4 	.word	0x0801a2a4
 8018a58:	0801a322 	.word	0x0801a322

08018a5c <__multiply>:
 8018a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a60:	4691      	mov	r9, r2
 8018a62:	690a      	ldr	r2, [r1, #16]
 8018a64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018a68:	429a      	cmp	r2, r3
 8018a6a:	bfb8      	it	lt
 8018a6c:	460b      	movlt	r3, r1
 8018a6e:	460c      	mov	r4, r1
 8018a70:	bfbc      	itt	lt
 8018a72:	464c      	movlt	r4, r9
 8018a74:	4699      	movlt	r9, r3
 8018a76:	6927      	ldr	r7, [r4, #16]
 8018a78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018a7c:	68a3      	ldr	r3, [r4, #8]
 8018a7e:	6861      	ldr	r1, [r4, #4]
 8018a80:	eb07 060a 	add.w	r6, r7, sl
 8018a84:	42b3      	cmp	r3, r6
 8018a86:	b085      	sub	sp, #20
 8018a88:	bfb8      	it	lt
 8018a8a:	3101      	addlt	r1, #1
 8018a8c:	f7ff fed8 	bl	8018840 <_Balloc>
 8018a90:	b930      	cbnz	r0, 8018aa0 <__multiply+0x44>
 8018a92:	4602      	mov	r2, r0
 8018a94:	4b44      	ldr	r3, [pc, #272]	; (8018ba8 <__multiply+0x14c>)
 8018a96:	4845      	ldr	r0, [pc, #276]	; (8018bac <__multiply+0x150>)
 8018a98:	f240 115d 	movw	r1, #349	; 0x15d
 8018a9c:	f7fe ff08 	bl	80178b0 <__assert_func>
 8018aa0:	f100 0514 	add.w	r5, r0, #20
 8018aa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018aa8:	462b      	mov	r3, r5
 8018aaa:	2200      	movs	r2, #0
 8018aac:	4543      	cmp	r3, r8
 8018aae:	d321      	bcc.n	8018af4 <__multiply+0x98>
 8018ab0:	f104 0314 	add.w	r3, r4, #20
 8018ab4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018ab8:	f109 0314 	add.w	r3, r9, #20
 8018abc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018ac0:	9202      	str	r2, [sp, #8]
 8018ac2:	1b3a      	subs	r2, r7, r4
 8018ac4:	3a15      	subs	r2, #21
 8018ac6:	f022 0203 	bic.w	r2, r2, #3
 8018aca:	3204      	adds	r2, #4
 8018acc:	f104 0115 	add.w	r1, r4, #21
 8018ad0:	428f      	cmp	r7, r1
 8018ad2:	bf38      	it	cc
 8018ad4:	2204      	movcc	r2, #4
 8018ad6:	9201      	str	r2, [sp, #4]
 8018ad8:	9a02      	ldr	r2, [sp, #8]
 8018ada:	9303      	str	r3, [sp, #12]
 8018adc:	429a      	cmp	r2, r3
 8018ade:	d80c      	bhi.n	8018afa <__multiply+0x9e>
 8018ae0:	2e00      	cmp	r6, #0
 8018ae2:	dd03      	ble.n	8018aec <__multiply+0x90>
 8018ae4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d05a      	beq.n	8018ba2 <__multiply+0x146>
 8018aec:	6106      	str	r6, [r0, #16]
 8018aee:	b005      	add	sp, #20
 8018af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018af4:	f843 2b04 	str.w	r2, [r3], #4
 8018af8:	e7d8      	b.n	8018aac <__multiply+0x50>
 8018afa:	f8b3 a000 	ldrh.w	sl, [r3]
 8018afe:	f1ba 0f00 	cmp.w	sl, #0
 8018b02:	d024      	beq.n	8018b4e <__multiply+0xf2>
 8018b04:	f104 0e14 	add.w	lr, r4, #20
 8018b08:	46a9      	mov	r9, r5
 8018b0a:	f04f 0c00 	mov.w	ip, #0
 8018b0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018b12:	f8d9 1000 	ldr.w	r1, [r9]
 8018b16:	fa1f fb82 	uxth.w	fp, r2
 8018b1a:	b289      	uxth	r1, r1
 8018b1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8018b20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018b24:	f8d9 2000 	ldr.w	r2, [r9]
 8018b28:	4461      	add	r1, ip
 8018b2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018b2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8018b32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018b36:	b289      	uxth	r1, r1
 8018b38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018b3c:	4577      	cmp	r7, lr
 8018b3e:	f849 1b04 	str.w	r1, [r9], #4
 8018b42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018b46:	d8e2      	bhi.n	8018b0e <__multiply+0xb2>
 8018b48:	9a01      	ldr	r2, [sp, #4]
 8018b4a:	f845 c002 	str.w	ip, [r5, r2]
 8018b4e:	9a03      	ldr	r2, [sp, #12]
 8018b50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018b54:	3304      	adds	r3, #4
 8018b56:	f1b9 0f00 	cmp.w	r9, #0
 8018b5a:	d020      	beq.n	8018b9e <__multiply+0x142>
 8018b5c:	6829      	ldr	r1, [r5, #0]
 8018b5e:	f104 0c14 	add.w	ip, r4, #20
 8018b62:	46ae      	mov	lr, r5
 8018b64:	f04f 0a00 	mov.w	sl, #0
 8018b68:	f8bc b000 	ldrh.w	fp, [ip]
 8018b6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018b70:	fb09 220b 	mla	r2, r9, fp, r2
 8018b74:	4492      	add	sl, r2
 8018b76:	b289      	uxth	r1, r1
 8018b78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018b7c:	f84e 1b04 	str.w	r1, [lr], #4
 8018b80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018b84:	f8be 1000 	ldrh.w	r1, [lr]
 8018b88:	0c12      	lsrs	r2, r2, #16
 8018b8a:	fb09 1102 	mla	r1, r9, r2, r1
 8018b8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8018b92:	4567      	cmp	r7, ip
 8018b94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018b98:	d8e6      	bhi.n	8018b68 <__multiply+0x10c>
 8018b9a:	9a01      	ldr	r2, [sp, #4]
 8018b9c:	50a9      	str	r1, [r5, r2]
 8018b9e:	3504      	adds	r5, #4
 8018ba0:	e79a      	b.n	8018ad8 <__multiply+0x7c>
 8018ba2:	3e01      	subs	r6, #1
 8018ba4:	e79c      	b.n	8018ae0 <__multiply+0x84>
 8018ba6:	bf00      	nop
 8018ba8:	0801a2a4 	.word	0x0801a2a4
 8018bac:	0801a322 	.word	0x0801a322

08018bb0 <__pow5mult>:
 8018bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bb4:	4615      	mov	r5, r2
 8018bb6:	f012 0203 	ands.w	r2, r2, #3
 8018bba:	4606      	mov	r6, r0
 8018bbc:	460f      	mov	r7, r1
 8018bbe:	d007      	beq.n	8018bd0 <__pow5mult+0x20>
 8018bc0:	4c25      	ldr	r4, [pc, #148]	; (8018c58 <__pow5mult+0xa8>)
 8018bc2:	3a01      	subs	r2, #1
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018bca:	f7ff fe9b 	bl	8018904 <__multadd>
 8018bce:	4607      	mov	r7, r0
 8018bd0:	10ad      	asrs	r5, r5, #2
 8018bd2:	d03d      	beq.n	8018c50 <__pow5mult+0xa0>
 8018bd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018bd6:	b97c      	cbnz	r4, 8018bf8 <__pow5mult+0x48>
 8018bd8:	2010      	movs	r0, #16
 8018bda:	f7fe f8b9 	bl	8016d50 <malloc>
 8018bde:	4602      	mov	r2, r0
 8018be0:	6270      	str	r0, [r6, #36]	; 0x24
 8018be2:	b928      	cbnz	r0, 8018bf0 <__pow5mult+0x40>
 8018be4:	4b1d      	ldr	r3, [pc, #116]	; (8018c5c <__pow5mult+0xac>)
 8018be6:	481e      	ldr	r0, [pc, #120]	; (8018c60 <__pow5mult+0xb0>)
 8018be8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018bec:	f7fe fe60 	bl	80178b0 <__assert_func>
 8018bf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018bf4:	6004      	str	r4, [r0, #0]
 8018bf6:	60c4      	str	r4, [r0, #12]
 8018bf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018bfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c00:	b94c      	cbnz	r4, 8018c16 <__pow5mult+0x66>
 8018c02:	f240 2171 	movw	r1, #625	; 0x271
 8018c06:	4630      	mov	r0, r6
 8018c08:	f7ff ff12 	bl	8018a30 <__i2b>
 8018c0c:	2300      	movs	r3, #0
 8018c0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c12:	4604      	mov	r4, r0
 8018c14:	6003      	str	r3, [r0, #0]
 8018c16:	f04f 0900 	mov.w	r9, #0
 8018c1a:	07eb      	lsls	r3, r5, #31
 8018c1c:	d50a      	bpl.n	8018c34 <__pow5mult+0x84>
 8018c1e:	4639      	mov	r1, r7
 8018c20:	4622      	mov	r2, r4
 8018c22:	4630      	mov	r0, r6
 8018c24:	f7ff ff1a 	bl	8018a5c <__multiply>
 8018c28:	4639      	mov	r1, r7
 8018c2a:	4680      	mov	r8, r0
 8018c2c:	4630      	mov	r0, r6
 8018c2e:	f7ff fe47 	bl	80188c0 <_Bfree>
 8018c32:	4647      	mov	r7, r8
 8018c34:	106d      	asrs	r5, r5, #1
 8018c36:	d00b      	beq.n	8018c50 <__pow5mult+0xa0>
 8018c38:	6820      	ldr	r0, [r4, #0]
 8018c3a:	b938      	cbnz	r0, 8018c4c <__pow5mult+0x9c>
 8018c3c:	4622      	mov	r2, r4
 8018c3e:	4621      	mov	r1, r4
 8018c40:	4630      	mov	r0, r6
 8018c42:	f7ff ff0b 	bl	8018a5c <__multiply>
 8018c46:	6020      	str	r0, [r4, #0]
 8018c48:	f8c0 9000 	str.w	r9, [r0]
 8018c4c:	4604      	mov	r4, r0
 8018c4e:	e7e4      	b.n	8018c1a <__pow5mult+0x6a>
 8018c50:	4638      	mov	r0, r7
 8018c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c56:	bf00      	nop
 8018c58:	0801a470 	.word	0x0801a470
 8018c5c:	0801a232 	.word	0x0801a232
 8018c60:	0801a322 	.word	0x0801a322

08018c64 <__lshift>:
 8018c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c68:	460c      	mov	r4, r1
 8018c6a:	6849      	ldr	r1, [r1, #4]
 8018c6c:	6923      	ldr	r3, [r4, #16]
 8018c6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018c72:	68a3      	ldr	r3, [r4, #8]
 8018c74:	4607      	mov	r7, r0
 8018c76:	4691      	mov	r9, r2
 8018c78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018c7c:	f108 0601 	add.w	r6, r8, #1
 8018c80:	42b3      	cmp	r3, r6
 8018c82:	db0b      	blt.n	8018c9c <__lshift+0x38>
 8018c84:	4638      	mov	r0, r7
 8018c86:	f7ff fddb 	bl	8018840 <_Balloc>
 8018c8a:	4605      	mov	r5, r0
 8018c8c:	b948      	cbnz	r0, 8018ca2 <__lshift+0x3e>
 8018c8e:	4602      	mov	r2, r0
 8018c90:	4b2a      	ldr	r3, [pc, #168]	; (8018d3c <__lshift+0xd8>)
 8018c92:	482b      	ldr	r0, [pc, #172]	; (8018d40 <__lshift+0xdc>)
 8018c94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018c98:	f7fe fe0a 	bl	80178b0 <__assert_func>
 8018c9c:	3101      	adds	r1, #1
 8018c9e:	005b      	lsls	r3, r3, #1
 8018ca0:	e7ee      	b.n	8018c80 <__lshift+0x1c>
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	f100 0114 	add.w	r1, r0, #20
 8018ca8:	f100 0210 	add.w	r2, r0, #16
 8018cac:	4618      	mov	r0, r3
 8018cae:	4553      	cmp	r3, sl
 8018cb0:	db37      	blt.n	8018d22 <__lshift+0xbe>
 8018cb2:	6920      	ldr	r0, [r4, #16]
 8018cb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018cb8:	f104 0314 	add.w	r3, r4, #20
 8018cbc:	f019 091f 	ands.w	r9, r9, #31
 8018cc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018cc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018cc8:	d02f      	beq.n	8018d2a <__lshift+0xc6>
 8018cca:	f1c9 0e20 	rsb	lr, r9, #32
 8018cce:	468a      	mov	sl, r1
 8018cd0:	f04f 0c00 	mov.w	ip, #0
 8018cd4:	681a      	ldr	r2, [r3, #0]
 8018cd6:	fa02 f209 	lsl.w	r2, r2, r9
 8018cda:	ea42 020c 	orr.w	r2, r2, ip
 8018cde:	f84a 2b04 	str.w	r2, [sl], #4
 8018ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ce6:	4298      	cmp	r0, r3
 8018ce8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018cec:	d8f2      	bhi.n	8018cd4 <__lshift+0x70>
 8018cee:	1b03      	subs	r3, r0, r4
 8018cf0:	3b15      	subs	r3, #21
 8018cf2:	f023 0303 	bic.w	r3, r3, #3
 8018cf6:	3304      	adds	r3, #4
 8018cf8:	f104 0215 	add.w	r2, r4, #21
 8018cfc:	4290      	cmp	r0, r2
 8018cfe:	bf38      	it	cc
 8018d00:	2304      	movcc	r3, #4
 8018d02:	f841 c003 	str.w	ip, [r1, r3]
 8018d06:	f1bc 0f00 	cmp.w	ip, #0
 8018d0a:	d001      	beq.n	8018d10 <__lshift+0xac>
 8018d0c:	f108 0602 	add.w	r6, r8, #2
 8018d10:	3e01      	subs	r6, #1
 8018d12:	4638      	mov	r0, r7
 8018d14:	612e      	str	r6, [r5, #16]
 8018d16:	4621      	mov	r1, r4
 8018d18:	f7ff fdd2 	bl	80188c0 <_Bfree>
 8018d1c:	4628      	mov	r0, r5
 8018d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d22:	f842 0f04 	str.w	r0, [r2, #4]!
 8018d26:	3301      	adds	r3, #1
 8018d28:	e7c1      	b.n	8018cae <__lshift+0x4a>
 8018d2a:	3904      	subs	r1, #4
 8018d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d30:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d34:	4298      	cmp	r0, r3
 8018d36:	d8f9      	bhi.n	8018d2c <__lshift+0xc8>
 8018d38:	e7ea      	b.n	8018d10 <__lshift+0xac>
 8018d3a:	bf00      	nop
 8018d3c:	0801a2a4 	.word	0x0801a2a4
 8018d40:	0801a322 	.word	0x0801a322

08018d44 <__mcmp>:
 8018d44:	b530      	push	{r4, r5, lr}
 8018d46:	6902      	ldr	r2, [r0, #16]
 8018d48:	690c      	ldr	r4, [r1, #16]
 8018d4a:	1b12      	subs	r2, r2, r4
 8018d4c:	d10e      	bne.n	8018d6c <__mcmp+0x28>
 8018d4e:	f100 0314 	add.w	r3, r0, #20
 8018d52:	3114      	adds	r1, #20
 8018d54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018d58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018d5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018d60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018d64:	42a5      	cmp	r5, r4
 8018d66:	d003      	beq.n	8018d70 <__mcmp+0x2c>
 8018d68:	d305      	bcc.n	8018d76 <__mcmp+0x32>
 8018d6a:	2201      	movs	r2, #1
 8018d6c:	4610      	mov	r0, r2
 8018d6e:	bd30      	pop	{r4, r5, pc}
 8018d70:	4283      	cmp	r3, r0
 8018d72:	d3f3      	bcc.n	8018d5c <__mcmp+0x18>
 8018d74:	e7fa      	b.n	8018d6c <__mcmp+0x28>
 8018d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d7a:	e7f7      	b.n	8018d6c <__mcmp+0x28>

08018d7c <__mdiff>:
 8018d7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d80:	460c      	mov	r4, r1
 8018d82:	4606      	mov	r6, r0
 8018d84:	4611      	mov	r1, r2
 8018d86:	4620      	mov	r0, r4
 8018d88:	4690      	mov	r8, r2
 8018d8a:	f7ff ffdb 	bl	8018d44 <__mcmp>
 8018d8e:	1e05      	subs	r5, r0, #0
 8018d90:	d110      	bne.n	8018db4 <__mdiff+0x38>
 8018d92:	4629      	mov	r1, r5
 8018d94:	4630      	mov	r0, r6
 8018d96:	f7ff fd53 	bl	8018840 <_Balloc>
 8018d9a:	b930      	cbnz	r0, 8018daa <__mdiff+0x2e>
 8018d9c:	4b3a      	ldr	r3, [pc, #232]	; (8018e88 <__mdiff+0x10c>)
 8018d9e:	4602      	mov	r2, r0
 8018da0:	f240 2132 	movw	r1, #562	; 0x232
 8018da4:	4839      	ldr	r0, [pc, #228]	; (8018e8c <__mdiff+0x110>)
 8018da6:	f7fe fd83 	bl	80178b0 <__assert_func>
 8018daa:	2301      	movs	r3, #1
 8018dac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018db4:	bfa4      	itt	ge
 8018db6:	4643      	movge	r3, r8
 8018db8:	46a0      	movge	r8, r4
 8018dba:	4630      	mov	r0, r6
 8018dbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018dc0:	bfa6      	itte	ge
 8018dc2:	461c      	movge	r4, r3
 8018dc4:	2500      	movge	r5, #0
 8018dc6:	2501      	movlt	r5, #1
 8018dc8:	f7ff fd3a 	bl	8018840 <_Balloc>
 8018dcc:	b920      	cbnz	r0, 8018dd8 <__mdiff+0x5c>
 8018dce:	4b2e      	ldr	r3, [pc, #184]	; (8018e88 <__mdiff+0x10c>)
 8018dd0:	4602      	mov	r2, r0
 8018dd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018dd6:	e7e5      	b.n	8018da4 <__mdiff+0x28>
 8018dd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018ddc:	6926      	ldr	r6, [r4, #16]
 8018dde:	60c5      	str	r5, [r0, #12]
 8018de0:	f104 0914 	add.w	r9, r4, #20
 8018de4:	f108 0514 	add.w	r5, r8, #20
 8018de8:	f100 0e14 	add.w	lr, r0, #20
 8018dec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018df0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018df4:	f108 0210 	add.w	r2, r8, #16
 8018df8:	46f2      	mov	sl, lr
 8018dfa:	2100      	movs	r1, #0
 8018dfc:	f859 3b04 	ldr.w	r3, [r9], #4
 8018e00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018e04:	fa1f f883 	uxth.w	r8, r3
 8018e08:	fa11 f18b 	uxtah	r1, r1, fp
 8018e0c:	0c1b      	lsrs	r3, r3, #16
 8018e0e:	eba1 0808 	sub.w	r8, r1, r8
 8018e12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018e16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018e1a:	fa1f f888 	uxth.w	r8, r8
 8018e1e:	1419      	asrs	r1, r3, #16
 8018e20:	454e      	cmp	r6, r9
 8018e22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018e26:	f84a 3b04 	str.w	r3, [sl], #4
 8018e2a:	d8e7      	bhi.n	8018dfc <__mdiff+0x80>
 8018e2c:	1b33      	subs	r3, r6, r4
 8018e2e:	3b15      	subs	r3, #21
 8018e30:	f023 0303 	bic.w	r3, r3, #3
 8018e34:	3304      	adds	r3, #4
 8018e36:	3415      	adds	r4, #21
 8018e38:	42a6      	cmp	r6, r4
 8018e3a:	bf38      	it	cc
 8018e3c:	2304      	movcc	r3, #4
 8018e3e:	441d      	add	r5, r3
 8018e40:	4473      	add	r3, lr
 8018e42:	469e      	mov	lr, r3
 8018e44:	462e      	mov	r6, r5
 8018e46:	4566      	cmp	r6, ip
 8018e48:	d30e      	bcc.n	8018e68 <__mdiff+0xec>
 8018e4a:	f10c 0203 	add.w	r2, ip, #3
 8018e4e:	1b52      	subs	r2, r2, r5
 8018e50:	f022 0203 	bic.w	r2, r2, #3
 8018e54:	3d03      	subs	r5, #3
 8018e56:	45ac      	cmp	ip, r5
 8018e58:	bf38      	it	cc
 8018e5a:	2200      	movcc	r2, #0
 8018e5c:	441a      	add	r2, r3
 8018e5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018e62:	b17b      	cbz	r3, 8018e84 <__mdiff+0x108>
 8018e64:	6107      	str	r7, [r0, #16]
 8018e66:	e7a3      	b.n	8018db0 <__mdiff+0x34>
 8018e68:	f856 8b04 	ldr.w	r8, [r6], #4
 8018e6c:	fa11 f288 	uxtah	r2, r1, r8
 8018e70:	1414      	asrs	r4, r2, #16
 8018e72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018e76:	b292      	uxth	r2, r2
 8018e78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018e7c:	f84e 2b04 	str.w	r2, [lr], #4
 8018e80:	1421      	asrs	r1, r4, #16
 8018e82:	e7e0      	b.n	8018e46 <__mdiff+0xca>
 8018e84:	3f01      	subs	r7, #1
 8018e86:	e7ea      	b.n	8018e5e <__mdiff+0xe2>
 8018e88:	0801a2a4 	.word	0x0801a2a4
 8018e8c:	0801a322 	.word	0x0801a322

08018e90 <__d2b>:
 8018e90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018e94:	4689      	mov	r9, r1
 8018e96:	2101      	movs	r1, #1
 8018e98:	ec57 6b10 	vmov	r6, r7, d0
 8018e9c:	4690      	mov	r8, r2
 8018e9e:	f7ff fccf 	bl	8018840 <_Balloc>
 8018ea2:	4604      	mov	r4, r0
 8018ea4:	b930      	cbnz	r0, 8018eb4 <__d2b+0x24>
 8018ea6:	4602      	mov	r2, r0
 8018ea8:	4b25      	ldr	r3, [pc, #148]	; (8018f40 <__d2b+0xb0>)
 8018eaa:	4826      	ldr	r0, [pc, #152]	; (8018f44 <__d2b+0xb4>)
 8018eac:	f240 310a 	movw	r1, #778	; 0x30a
 8018eb0:	f7fe fcfe 	bl	80178b0 <__assert_func>
 8018eb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018eb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018ebc:	bb35      	cbnz	r5, 8018f0c <__d2b+0x7c>
 8018ebe:	2e00      	cmp	r6, #0
 8018ec0:	9301      	str	r3, [sp, #4]
 8018ec2:	d028      	beq.n	8018f16 <__d2b+0x86>
 8018ec4:	4668      	mov	r0, sp
 8018ec6:	9600      	str	r6, [sp, #0]
 8018ec8:	f7ff fd82 	bl	80189d0 <__lo0bits>
 8018ecc:	9900      	ldr	r1, [sp, #0]
 8018ece:	b300      	cbz	r0, 8018f12 <__d2b+0x82>
 8018ed0:	9a01      	ldr	r2, [sp, #4]
 8018ed2:	f1c0 0320 	rsb	r3, r0, #32
 8018ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8018eda:	430b      	orrs	r3, r1
 8018edc:	40c2      	lsrs	r2, r0
 8018ede:	6163      	str	r3, [r4, #20]
 8018ee0:	9201      	str	r2, [sp, #4]
 8018ee2:	9b01      	ldr	r3, [sp, #4]
 8018ee4:	61a3      	str	r3, [r4, #24]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	bf14      	ite	ne
 8018eea:	2202      	movne	r2, #2
 8018eec:	2201      	moveq	r2, #1
 8018eee:	6122      	str	r2, [r4, #16]
 8018ef0:	b1d5      	cbz	r5, 8018f28 <__d2b+0x98>
 8018ef2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018ef6:	4405      	add	r5, r0
 8018ef8:	f8c9 5000 	str.w	r5, [r9]
 8018efc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f00:	f8c8 0000 	str.w	r0, [r8]
 8018f04:	4620      	mov	r0, r4
 8018f06:	b003      	add	sp, #12
 8018f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f10:	e7d5      	b.n	8018ebe <__d2b+0x2e>
 8018f12:	6161      	str	r1, [r4, #20]
 8018f14:	e7e5      	b.n	8018ee2 <__d2b+0x52>
 8018f16:	a801      	add	r0, sp, #4
 8018f18:	f7ff fd5a 	bl	80189d0 <__lo0bits>
 8018f1c:	9b01      	ldr	r3, [sp, #4]
 8018f1e:	6163      	str	r3, [r4, #20]
 8018f20:	2201      	movs	r2, #1
 8018f22:	6122      	str	r2, [r4, #16]
 8018f24:	3020      	adds	r0, #32
 8018f26:	e7e3      	b.n	8018ef0 <__d2b+0x60>
 8018f28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018f2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018f30:	f8c9 0000 	str.w	r0, [r9]
 8018f34:	6918      	ldr	r0, [r3, #16]
 8018f36:	f7ff fd2b 	bl	8018990 <__hi0bits>
 8018f3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018f3e:	e7df      	b.n	8018f00 <__d2b+0x70>
 8018f40:	0801a2a4 	.word	0x0801a2a4
 8018f44:	0801a322 	.word	0x0801a322

08018f48 <_calloc_r>:
 8018f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f4a:	fba1 2402 	umull	r2, r4, r1, r2
 8018f4e:	b94c      	cbnz	r4, 8018f64 <_calloc_r+0x1c>
 8018f50:	4611      	mov	r1, r2
 8018f52:	9201      	str	r2, [sp, #4]
 8018f54:	f7fd ff86 	bl	8016e64 <_malloc_r>
 8018f58:	9a01      	ldr	r2, [sp, #4]
 8018f5a:	4605      	mov	r5, r0
 8018f5c:	b930      	cbnz	r0, 8018f6c <_calloc_r+0x24>
 8018f5e:	4628      	mov	r0, r5
 8018f60:	b003      	add	sp, #12
 8018f62:	bd30      	pop	{r4, r5, pc}
 8018f64:	220c      	movs	r2, #12
 8018f66:	6002      	str	r2, [r0, #0]
 8018f68:	2500      	movs	r5, #0
 8018f6a:	e7f8      	b.n	8018f5e <_calloc_r+0x16>
 8018f6c:	4621      	mov	r1, r4
 8018f6e:	f7fd ff05 	bl	8016d7c <memset>
 8018f72:	e7f4      	b.n	8018f5e <_calloc_r+0x16>

08018f74 <__ssputs_r>:
 8018f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f78:	688e      	ldr	r6, [r1, #8]
 8018f7a:	429e      	cmp	r6, r3
 8018f7c:	4682      	mov	sl, r0
 8018f7e:	460c      	mov	r4, r1
 8018f80:	4690      	mov	r8, r2
 8018f82:	461f      	mov	r7, r3
 8018f84:	d838      	bhi.n	8018ff8 <__ssputs_r+0x84>
 8018f86:	898a      	ldrh	r2, [r1, #12]
 8018f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018f8c:	d032      	beq.n	8018ff4 <__ssputs_r+0x80>
 8018f8e:	6825      	ldr	r5, [r4, #0]
 8018f90:	6909      	ldr	r1, [r1, #16]
 8018f92:	eba5 0901 	sub.w	r9, r5, r1
 8018f96:	6965      	ldr	r5, [r4, #20]
 8018f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018fa0:	3301      	adds	r3, #1
 8018fa2:	444b      	add	r3, r9
 8018fa4:	106d      	asrs	r5, r5, #1
 8018fa6:	429d      	cmp	r5, r3
 8018fa8:	bf38      	it	cc
 8018faa:	461d      	movcc	r5, r3
 8018fac:	0553      	lsls	r3, r2, #21
 8018fae:	d531      	bpl.n	8019014 <__ssputs_r+0xa0>
 8018fb0:	4629      	mov	r1, r5
 8018fb2:	f7fd ff57 	bl	8016e64 <_malloc_r>
 8018fb6:	4606      	mov	r6, r0
 8018fb8:	b950      	cbnz	r0, 8018fd0 <__ssputs_r+0x5c>
 8018fba:	230c      	movs	r3, #12
 8018fbc:	f8ca 3000 	str.w	r3, [sl]
 8018fc0:	89a3      	ldrh	r3, [r4, #12]
 8018fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fc6:	81a3      	strh	r3, [r4, #12]
 8018fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fd0:	6921      	ldr	r1, [r4, #16]
 8018fd2:	464a      	mov	r2, r9
 8018fd4:	f7fd fec4 	bl	8016d60 <memcpy>
 8018fd8:	89a3      	ldrh	r3, [r4, #12]
 8018fda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018fe2:	81a3      	strh	r3, [r4, #12]
 8018fe4:	6126      	str	r6, [r4, #16]
 8018fe6:	6165      	str	r5, [r4, #20]
 8018fe8:	444e      	add	r6, r9
 8018fea:	eba5 0509 	sub.w	r5, r5, r9
 8018fee:	6026      	str	r6, [r4, #0]
 8018ff0:	60a5      	str	r5, [r4, #8]
 8018ff2:	463e      	mov	r6, r7
 8018ff4:	42be      	cmp	r6, r7
 8018ff6:	d900      	bls.n	8018ffa <__ssputs_r+0x86>
 8018ff8:	463e      	mov	r6, r7
 8018ffa:	6820      	ldr	r0, [r4, #0]
 8018ffc:	4632      	mov	r2, r6
 8018ffe:	4641      	mov	r1, r8
 8019000:	f000 fce4 	bl	80199cc <memmove>
 8019004:	68a3      	ldr	r3, [r4, #8]
 8019006:	1b9b      	subs	r3, r3, r6
 8019008:	60a3      	str	r3, [r4, #8]
 801900a:	6823      	ldr	r3, [r4, #0]
 801900c:	4433      	add	r3, r6
 801900e:	6023      	str	r3, [r4, #0]
 8019010:	2000      	movs	r0, #0
 8019012:	e7db      	b.n	8018fcc <__ssputs_r+0x58>
 8019014:	462a      	mov	r2, r5
 8019016:	f000 fcf3 	bl	8019a00 <_realloc_r>
 801901a:	4606      	mov	r6, r0
 801901c:	2800      	cmp	r0, #0
 801901e:	d1e1      	bne.n	8018fe4 <__ssputs_r+0x70>
 8019020:	6921      	ldr	r1, [r4, #16]
 8019022:	4650      	mov	r0, sl
 8019024:	f7fd feb2 	bl	8016d8c <_free_r>
 8019028:	e7c7      	b.n	8018fba <__ssputs_r+0x46>
	...

0801902c <_svfiprintf_r>:
 801902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019030:	4698      	mov	r8, r3
 8019032:	898b      	ldrh	r3, [r1, #12]
 8019034:	061b      	lsls	r3, r3, #24
 8019036:	b09d      	sub	sp, #116	; 0x74
 8019038:	4607      	mov	r7, r0
 801903a:	460d      	mov	r5, r1
 801903c:	4614      	mov	r4, r2
 801903e:	d50e      	bpl.n	801905e <_svfiprintf_r+0x32>
 8019040:	690b      	ldr	r3, [r1, #16]
 8019042:	b963      	cbnz	r3, 801905e <_svfiprintf_r+0x32>
 8019044:	2140      	movs	r1, #64	; 0x40
 8019046:	f7fd ff0d 	bl	8016e64 <_malloc_r>
 801904a:	6028      	str	r0, [r5, #0]
 801904c:	6128      	str	r0, [r5, #16]
 801904e:	b920      	cbnz	r0, 801905a <_svfiprintf_r+0x2e>
 8019050:	230c      	movs	r3, #12
 8019052:	603b      	str	r3, [r7, #0]
 8019054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019058:	e0d1      	b.n	80191fe <_svfiprintf_r+0x1d2>
 801905a:	2340      	movs	r3, #64	; 0x40
 801905c:	616b      	str	r3, [r5, #20]
 801905e:	2300      	movs	r3, #0
 8019060:	9309      	str	r3, [sp, #36]	; 0x24
 8019062:	2320      	movs	r3, #32
 8019064:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019068:	f8cd 800c 	str.w	r8, [sp, #12]
 801906c:	2330      	movs	r3, #48	; 0x30
 801906e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019218 <_svfiprintf_r+0x1ec>
 8019072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019076:	f04f 0901 	mov.w	r9, #1
 801907a:	4623      	mov	r3, r4
 801907c:	469a      	mov	sl, r3
 801907e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019082:	b10a      	cbz	r2, 8019088 <_svfiprintf_r+0x5c>
 8019084:	2a25      	cmp	r2, #37	; 0x25
 8019086:	d1f9      	bne.n	801907c <_svfiprintf_r+0x50>
 8019088:	ebba 0b04 	subs.w	fp, sl, r4
 801908c:	d00b      	beq.n	80190a6 <_svfiprintf_r+0x7a>
 801908e:	465b      	mov	r3, fp
 8019090:	4622      	mov	r2, r4
 8019092:	4629      	mov	r1, r5
 8019094:	4638      	mov	r0, r7
 8019096:	f7ff ff6d 	bl	8018f74 <__ssputs_r>
 801909a:	3001      	adds	r0, #1
 801909c:	f000 80aa 	beq.w	80191f4 <_svfiprintf_r+0x1c8>
 80190a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190a2:	445a      	add	r2, fp
 80190a4:	9209      	str	r2, [sp, #36]	; 0x24
 80190a6:	f89a 3000 	ldrb.w	r3, [sl]
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	f000 80a2 	beq.w	80191f4 <_svfiprintf_r+0x1c8>
 80190b0:	2300      	movs	r3, #0
 80190b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80190b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190ba:	f10a 0a01 	add.w	sl, sl, #1
 80190be:	9304      	str	r3, [sp, #16]
 80190c0:	9307      	str	r3, [sp, #28]
 80190c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80190c6:	931a      	str	r3, [sp, #104]	; 0x68
 80190c8:	4654      	mov	r4, sl
 80190ca:	2205      	movs	r2, #5
 80190cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190d0:	4851      	ldr	r0, [pc, #324]	; (8019218 <_svfiprintf_r+0x1ec>)
 80190d2:	f7e7 f89d 	bl	8000210 <memchr>
 80190d6:	9a04      	ldr	r2, [sp, #16]
 80190d8:	b9d8      	cbnz	r0, 8019112 <_svfiprintf_r+0xe6>
 80190da:	06d0      	lsls	r0, r2, #27
 80190dc:	bf44      	itt	mi
 80190de:	2320      	movmi	r3, #32
 80190e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190e4:	0711      	lsls	r1, r2, #28
 80190e6:	bf44      	itt	mi
 80190e8:	232b      	movmi	r3, #43	; 0x2b
 80190ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190ee:	f89a 3000 	ldrb.w	r3, [sl]
 80190f2:	2b2a      	cmp	r3, #42	; 0x2a
 80190f4:	d015      	beq.n	8019122 <_svfiprintf_r+0xf6>
 80190f6:	9a07      	ldr	r2, [sp, #28]
 80190f8:	4654      	mov	r4, sl
 80190fa:	2000      	movs	r0, #0
 80190fc:	f04f 0c0a 	mov.w	ip, #10
 8019100:	4621      	mov	r1, r4
 8019102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019106:	3b30      	subs	r3, #48	; 0x30
 8019108:	2b09      	cmp	r3, #9
 801910a:	d94e      	bls.n	80191aa <_svfiprintf_r+0x17e>
 801910c:	b1b0      	cbz	r0, 801913c <_svfiprintf_r+0x110>
 801910e:	9207      	str	r2, [sp, #28]
 8019110:	e014      	b.n	801913c <_svfiprintf_r+0x110>
 8019112:	eba0 0308 	sub.w	r3, r0, r8
 8019116:	fa09 f303 	lsl.w	r3, r9, r3
 801911a:	4313      	orrs	r3, r2
 801911c:	9304      	str	r3, [sp, #16]
 801911e:	46a2      	mov	sl, r4
 8019120:	e7d2      	b.n	80190c8 <_svfiprintf_r+0x9c>
 8019122:	9b03      	ldr	r3, [sp, #12]
 8019124:	1d19      	adds	r1, r3, #4
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	9103      	str	r1, [sp, #12]
 801912a:	2b00      	cmp	r3, #0
 801912c:	bfbb      	ittet	lt
 801912e:	425b      	neglt	r3, r3
 8019130:	f042 0202 	orrlt.w	r2, r2, #2
 8019134:	9307      	strge	r3, [sp, #28]
 8019136:	9307      	strlt	r3, [sp, #28]
 8019138:	bfb8      	it	lt
 801913a:	9204      	strlt	r2, [sp, #16]
 801913c:	7823      	ldrb	r3, [r4, #0]
 801913e:	2b2e      	cmp	r3, #46	; 0x2e
 8019140:	d10c      	bne.n	801915c <_svfiprintf_r+0x130>
 8019142:	7863      	ldrb	r3, [r4, #1]
 8019144:	2b2a      	cmp	r3, #42	; 0x2a
 8019146:	d135      	bne.n	80191b4 <_svfiprintf_r+0x188>
 8019148:	9b03      	ldr	r3, [sp, #12]
 801914a:	1d1a      	adds	r2, r3, #4
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	9203      	str	r2, [sp, #12]
 8019150:	2b00      	cmp	r3, #0
 8019152:	bfb8      	it	lt
 8019154:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019158:	3402      	adds	r4, #2
 801915a:	9305      	str	r3, [sp, #20]
 801915c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019228 <_svfiprintf_r+0x1fc>
 8019160:	7821      	ldrb	r1, [r4, #0]
 8019162:	2203      	movs	r2, #3
 8019164:	4650      	mov	r0, sl
 8019166:	f7e7 f853 	bl	8000210 <memchr>
 801916a:	b140      	cbz	r0, 801917e <_svfiprintf_r+0x152>
 801916c:	2340      	movs	r3, #64	; 0x40
 801916e:	eba0 000a 	sub.w	r0, r0, sl
 8019172:	fa03 f000 	lsl.w	r0, r3, r0
 8019176:	9b04      	ldr	r3, [sp, #16]
 8019178:	4303      	orrs	r3, r0
 801917a:	3401      	adds	r4, #1
 801917c:	9304      	str	r3, [sp, #16]
 801917e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019182:	4826      	ldr	r0, [pc, #152]	; (801921c <_svfiprintf_r+0x1f0>)
 8019184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019188:	2206      	movs	r2, #6
 801918a:	f7e7 f841 	bl	8000210 <memchr>
 801918e:	2800      	cmp	r0, #0
 8019190:	d038      	beq.n	8019204 <_svfiprintf_r+0x1d8>
 8019192:	4b23      	ldr	r3, [pc, #140]	; (8019220 <_svfiprintf_r+0x1f4>)
 8019194:	bb1b      	cbnz	r3, 80191de <_svfiprintf_r+0x1b2>
 8019196:	9b03      	ldr	r3, [sp, #12]
 8019198:	3307      	adds	r3, #7
 801919a:	f023 0307 	bic.w	r3, r3, #7
 801919e:	3308      	adds	r3, #8
 80191a0:	9303      	str	r3, [sp, #12]
 80191a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191a4:	4433      	add	r3, r6
 80191a6:	9309      	str	r3, [sp, #36]	; 0x24
 80191a8:	e767      	b.n	801907a <_svfiprintf_r+0x4e>
 80191aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80191ae:	460c      	mov	r4, r1
 80191b0:	2001      	movs	r0, #1
 80191b2:	e7a5      	b.n	8019100 <_svfiprintf_r+0xd4>
 80191b4:	2300      	movs	r3, #0
 80191b6:	3401      	adds	r4, #1
 80191b8:	9305      	str	r3, [sp, #20]
 80191ba:	4619      	mov	r1, r3
 80191bc:	f04f 0c0a 	mov.w	ip, #10
 80191c0:	4620      	mov	r0, r4
 80191c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191c6:	3a30      	subs	r2, #48	; 0x30
 80191c8:	2a09      	cmp	r2, #9
 80191ca:	d903      	bls.n	80191d4 <_svfiprintf_r+0x1a8>
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d0c5      	beq.n	801915c <_svfiprintf_r+0x130>
 80191d0:	9105      	str	r1, [sp, #20]
 80191d2:	e7c3      	b.n	801915c <_svfiprintf_r+0x130>
 80191d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80191d8:	4604      	mov	r4, r0
 80191da:	2301      	movs	r3, #1
 80191dc:	e7f0      	b.n	80191c0 <_svfiprintf_r+0x194>
 80191de:	ab03      	add	r3, sp, #12
 80191e0:	9300      	str	r3, [sp, #0]
 80191e2:	462a      	mov	r2, r5
 80191e4:	4b0f      	ldr	r3, [pc, #60]	; (8019224 <_svfiprintf_r+0x1f8>)
 80191e6:	a904      	add	r1, sp, #16
 80191e8:	4638      	mov	r0, r7
 80191ea:	f7fd ff4f 	bl	801708c <_printf_float>
 80191ee:	1c42      	adds	r2, r0, #1
 80191f0:	4606      	mov	r6, r0
 80191f2:	d1d6      	bne.n	80191a2 <_svfiprintf_r+0x176>
 80191f4:	89ab      	ldrh	r3, [r5, #12]
 80191f6:	065b      	lsls	r3, r3, #25
 80191f8:	f53f af2c 	bmi.w	8019054 <_svfiprintf_r+0x28>
 80191fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191fe:	b01d      	add	sp, #116	; 0x74
 8019200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019204:	ab03      	add	r3, sp, #12
 8019206:	9300      	str	r3, [sp, #0]
 8019208:	462a      	mov	r2, r5
 801920a:	4b06      	ldr	r3, [pc, #24]	; (8019224 <_svfiprintf_r+0x1f8>)
 801920c:	a904      	add	r1, sp, #16
 801920e:	4638      	mov	r0, r7
 8019210:	f7fe f9e0 	bl	80175d4 <_printf_i>
 8019214:	e7eb      	b.n	80191ee <_svfiprintf_r+0x1c2>
 8019216:	bf00      	nop
 8019218:	0801a47c 	.word	0x0801a47c
 801921c:	0801a486 	.word	0x0801a486
 8019220:	0801708d 	.word	0x0801708d
 8019224:	08018f75 	.word	0x08018f75
 8019228:	0801a482 	.word	0x0801a482

0801922c <__sfputc_r>:
 801922c:	6893      	ldr	r3, [r2, #8]
 801922e:	3b01      	subs	r3, #1
 8019230:	2b00      	cmp	r3, #0
 8019232:	b410      	push	{r4}
 8019234:	6093      	str	r3, [r2, #8]
 8019236:	da08      	bge.n	801924a <__sfputc_r+0x1e>
 8019238:	6994      	ldr	r4, [r2, #24]
 801923a:	42a3      	cmp	r3, r4
 801923c:	db01      	blt.n	8019242 <__sfputc_r+0x16>
 801923e:	290a      	cmp	r1, #10
 8019240:	d103      	bne.n	801924a <__sfputc_r+0x1e>
 8019242:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019246:	f000 b98f 	b.w	8019568 <__swbuf_r>
 801924a:	6813      	ldr	r3, [r2, #0]
 801924c:	1c58      	adds	r0, r3, #1
 801924e:	6010      	str	r0, [r2, #0]
 8019250:	7019      	strb	r1, [r3, #0]
 8019252:	4608      	mov	r0, r1
 8019254:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019258:	4770      	bx	lr

0801925a <__sfputs_r>:
 801925a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801925c:	4606      	mov	r6, r0
 801925e:	460f      	mov	r7, r1
 8019260:	4614      	mov	r4, r2
 8019262:	18d5      	adds	r5, r2, r3
 8019264:	42ac      	cmp	r4, r5
 8019266:	d101      	bne.n	801926c <__sfputs_r+0x12>
 8019268:	2000      	movs	r0, #0
 801926a:	e007      	b.n	801927c <__sfputs_r+0x22>
 801926c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019270:	463a      	mov	r2, r7
 8019272:	4630      	mov	r0, r6
 8019274:	f7ff ffda 	bl	801922c <__sfputc_r>
 8019278:	1c43      	adds	r3, r0, #1
 801927a:	d1f3      	bne.n	8019264 <__sfputs_r+0xa>
 801927c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019280 <_vfiprintf_r>:
 8019280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019284:	460d      	mov	r5, r1
 8019286:	b09d      	sub	sp, #116	; 0x74
 8019288:	4614      	mov	r4, r2
 801928a:	4698      	mov	r8, r3
 801928c:	4606      	mov	r6, r0
 801928e:	b118      	cbz	r0, 8019298 <_vfiprintf_r+0x18>
 8019290:	6983      	ldr	r3, [r0, #24]
 8019292:	b90b      	cbnz	r3, 8019298 <_vfiprintf_r+0x18>
 8019294:	f7ff f9fe 	bl	8018694 <__sinit>
 8019298:	4b89      	ldr	r3, [pc, #548]	; (80194c0 <_vfiprintf_r+0x240>)
 801929a:	429d      	cmp	r5, r3
 801929c:	d11b      	bne.n	80192d6 <_vfiprintf_r+0x56>
 801929e:	6875      	ldr	r5, [r6, #4]
 80192a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80192a2:	07d9      	lsls	r1, r3, #31
 80192a4:	d405      	bmi.n	80192b2 <_vfiprintf_r+0x32>
 80192a6:	89ab      	ldrh	r3, [r5, #12]
 80192a8:	059a      	lsls	r2, r3, #22
 80192aa:	d402      	bmi.n	80192b2 <_vfiprintf_r+0x32>
 80192ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80192ae:	f7ff faa6 	bl	80187fe <__retarget_lock_acquire_recursive>
 80192b2:	89ab      	ldrh	r3, [r5, #12]
 80192b4:	071b      	lsls	r3, r3, #28
 80192b6:	d501      	bpl.n	80192bc <_vfiprintf_r+0x3c>
 80192b8:	692b      	ldr	r3, [r5, #16]
 80192ba:	b9eb      	cbnz	r3, 80192f8 <_vfiprintf_r+0x78>
 80192bc:	4629      	mov	r1, r5
 80192be:	4630      	mov	r0, r6
 80192c0:	f000 f9c4 	bl	801964c <__swsetup_r>
 80192c4:	b1c0      	cbz	r0, 80192f8 <_vfiprintf_r+0x78>
 80192c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80192c8:	07dc      	lsls	r4, r3, #31
 80192ca:	d50e      	bpl.n	80192ea <_vfiprintf_r+0x6a>
 80192cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192d0:	b01d      	add	sp, #116	; 0x74
 80192d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192d6:	4b7b      	ldr	r3, [pc, #492]	; (80194c4 <_vfiprintf_r+0x244>)
 80192d8:	429d      	cmp	r5, r3
 80192da:	d101      	bne.n	80192e0 <_vfiprintf_r+0x60>
 80192dc:	68b5      	ldr	r5, [r6, #8]
 80192de:	e7df      	b.n	80192a0 <_vfiprintf_r+0x20>
 80192e0:	4b79      	ldr	r3, [pc, #484]	; (80194c8 <_vfiprintf_r+0x248>)
 80192e2:	429d      	cmp	r5, r3
 80192e4:	bf08      	it	eq
 80192e6:	68f5      	ldreq	r5, [r6, #12]
 80192e8:	e7da      	b.n	80192a0 <_vfiprintf_r+0x20>
 80192ea:	89ab      	ldrh	r3, [r5, #12]
 80192ec:	0598      	lsls	r0, r3, #22
 80192ee:	d4ed      	bmi.n	80192cc <_vfiprintf_r+0x4c>
 80192f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80192f2:	f7ff fa85 	bl	8018800 <__retarget_lock_release_recursive>
 80192f6:	e7e9      	b.n	80192cc <_vfiprintf_r+0x4c>
 80192f8:	2300      	movs	r3, #0
 80192fa:	9309      	str	r3, [sp, #36]	; 0x24
 80192fc:	2320      	movs	r3, #32
 80192fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019302:	f8cd 800c 	str.w	r8, [sp, #12]
 8019306:	2330      	movs	r3, #48	; 0x30
 8019308:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80194cc <_vfiprintf_r+0x24c>
 801930c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019310:	f04f 0901 	mov.w	r9, #1
 8019314:	4623      	mov	r3, r4
 8019316:	469a      	mov	sl, r3
 8019318:	f813 2b01 	ldrb.w	r2, [r3], #1
 801931c:	b10a      	cbz	r2, 8019322 <_vfiprintf_r+0xa2>
 801931e:	2a25      	cmp	r2, #37	; 0x25
 8019320:	d1f9      	bne.n	8019316 <_vfiprintf_r+0x96>
 8019322:	ebba 0b04 	subs.w	fp, sl, r4
 8019326:	d00b      	beq.n	8019340 <_vfiprintf_r+0xc0>
 8019328:	465b      	mov	r3, fp
 801932a:	4622      	mov	r2, r4
 801932c:	4629      	mov	r1, r5
 801932e:	4630      	mov	r0, r6
 8019330:	f7ff ff93 	bl	801925a <__sfputs_r>
 8019334:	3001      	adds	r0, #1
 8019336:	f000 80aa 	beq.w	801948e <_vfiprintf_r+0x20e>
 801933a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801933c:	445a      	add	r2, fp
 801933e:	9209      	str	r2, [sp, #36]	; 0x24
 8019340:	f89a 3000 	ldrb.w	r3, [sl]
 8019344:	2b00      	cmp	r3, #0
 8019346:	f000 80a2 	beq.w	801948e <_vfiprintf_r+0x20e>
 801934a:	2300      	movs	r3, #0
 801934c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019354:	f10a 0a01 	add.w	sl, sl, #1
 8019358:	9304      	str	r3, [sp, #16]
 801935a:	9307      	str	r3, [sp, #28]
 801935c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019360:	931a      	str	r3, [sp, #104]	; 0x68
 8019362:	4654      	mov	r4, sl
 8019364:	2205      	movs	r2, #5
 8019366:	f814 1b01 	ldrb.w	r1, [r4], #1
 801936a:	4858      	ldr	r0, [pc, #352]	; (80194cc <_vfiprintf_r+0x24c>)
 801936c:	f7e6 ff50 	bl	8000210 <memchr>
 8019370:	9a04      	ldr	r2, [sp, #16]
 8019372:	b9d8      	cbnz	r0, 80193ac <_vfiprintf_r+0x12c>
 8019374:	06d1      	lsls	r1, r2, #27
 8019376:	bf44      	itt	mi
 8019378:	2320      	movmi	r3, #32
 801937a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801937e:	0713      	lsls	r3, r2, #28
 8019380:	bf44      	itt	mi
 8019382:	232b      	movmi	r3, #43	; 0x2b
 8019384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019388:	f89a 3000 	ldrb.w	r3, [sl]
 801938c:	2b2a      	cmp	r3, #42	; 0x2a
 801938e:	d015      	beq.n	80193bc <_vfiprintf_r+0x13c>
 8019390:	9a07      	ldr	r2, [sp, #28]
 8019392:	4654      	mov	r4, sl
 8019394:	2000      	movs	r0, #0
 8019396:	f04f 0c0a 	mov.w	ip, #10
 801939a:	4621      	mov	r1, r4
 801939c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80193a0:	3b30      	subs	r3, #48	; 0x30
 80193a2:	2b09      	cmp	r3, #9
 80193a4:	d94e      	bls.n	8019444 <_vfiprintf_r+0x1c4>
 80193a6:	b1b0      	cbz	r0, 80193d6 <_vfiprintf_r+0x156>
 80193a8:	9207      	str	r2, [sp, #28]
 80193aa:	e014      	b.n	80193d6 <_vfiprintf_r+0x156>
 80193ac:	eba0 0308 	sub.w	r3, r0, r8
 80193b0:	fa09 f303 	lsl.w	r3, r9, r3
 80193b4:	4313      	orrs	r3, r2
 80193b6:	9304      	str	r3, [sp, #16]
 80193b8:	46a2      	mov	sl, r4
 80193ba:	e7d2      	b.n	8019362 <_vfiprintf_r+0xe2>
 80193bc:	9b03      	ldr	r3, [sp, #12]
 80193be:	1d19      	adds	r1, r3, #4
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	9103      	str	r1, [sp, #12]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	bfbb      	ittet	lt
 80193c8:	425b      	neglt	r3, r3
 80193ca:	f042 0202 	orrlt.w	r2, r2, #2
 80193ce:	9307      	strge	r3, [sp, #28]
 80193d0:	9307      	strlt	r3, [sp, #28]
 80193d2:	bfb8      	it	lt
 80193d4:	9204      	strlt	r2, [sp, #16]
 80193d6:	7823      	ldrb	r3, [r4, #0]
 80193d8:	2b2e      	cmp	r3, #46	; 0x2e
 80193da:	d10c      	bne.n	80193f6 <_vfiprintf_r+0x176>
 80193dc:	7863      	ldrb	r3, [r4, #1]
 80193de:	2b2a      	cmp	r3, #42	; 0x2a
 80193e0:	d135      	bne.n	801944e <_vfiprintf_r+0x1ce>
 80193e2:	9b03      	ldr	r3, [sp, #12]
 80193e4:	1d1a      	adds	r2, r3, #4
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	9203      	str	r2, [sp, #12]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	bfb8      	it	lt
 80193ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80193f2:	3402      	adds	r4, #2
 80193f4:	9305      	str	r3, [sp, #20]
 80193f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80194dc <_vfiprintf_r+0x25c>
 80193fa:	7821      	ldrb	r1, [r4, #0]
 80193fc:	2203      	movs	r2, #3
 80193fe:	4650      	mov	r0, sl
 8019400:	f7e6 ff06 	bl	8000210 <memchr>
 8019404:	b140      	cbz	r0, 8019418 <_vfiprintf_r+0x198>
 8019406:	2340      	movs	r3, #64	; 0x40
 8019408:	eba0 000a 	sub.w	r0, r0, sl
 801940c:	fa03 f000 	lsl.w	r0, r3, r0
 8019410:	9b04      	ldr	r3, [sp, #16]
 8019412:	4303      	orrs	r3, r0
 8019414:	3401      	adds	r4, #1
 8019416:	9304      	str	r3, [sp, #16]
 8019418:	f814 1b01 	ldrb.w	r1, [r4], #1
 801941c:	482c      	ldr	r0, [pc, #176]	; (80194d0 <_vfiprintf_r+0x250>)
 801941e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019422:	2206      	movs	r2, #6
 8019424:	f7e6 fef4 	bl	8000210 <memchr>
 8019428:	2800      	cmp	r0, #0
 801942a:	d03f      	beq.n	80194ac <_vfiprintf_r+0x22c>
 801942c:	4b29      	ldr	r3, [pc, #164]	; (80194d4 <_vfiprintf_r+0x254>)
 801942e:	bb1b      	cbnz	r3, 8019478 <_vfiprintf_r+0x1f8>
 8019430:	9b03      	ldr	r3, [sp, #12]
 8019432:	3307      	adds	r3, #7
 8019434:	f023 0307 	bic.w	r3, r3, #7
 8019438:	3308      	adds	r3, #8
 801943a:	9303      	str	r3, [sp, #12]
 801943c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801943e:	443b      	add	r3, r7
 8019440:	9309      	str	r3, [sp, #36]	; 0x24
 8019442:	e767      	b.n	8019314 <_vfiprintf_r+0x94>
 8019444:	fb0c 3202 	mla	r2, ip, r2, r3
 8019448:	460c      	mov	r4, r1
 801944a:	2001      	movs	r0, #1
 801944c:	e7a5      	b.n	801939a <_vfiprintf_r+0x11a>
 801944e:	2300      	movs	r3, #0
 8019450:	3401      	adds	r4, #1
 8019452:	9305      	str	r3, [sp, #20]
 8019454:	4619      	mov	r1, r3
 8019456:	f04f 0c0a 	mov.w	ip, #10
 801945a:	4620      	mov	r0, r4
 801945c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019460:	3a30      	subs	r2, #48	; 0x30
 8019462:	2a09      	cmp	r2, #9
 8019464:	d903      	bls.n	801946e <_vfiprintf_r+0x1ee>
 8019466:	2b00      	cmp	r3, #0
 8019468:	d0c5      	beq.n	80193f6 <_vfiprintf_r+0x176>
 801946a:	9105      	str	r1, [sp, #20]
 801946c:	e7c3      	b.n	80193f6 <_vfiprintf_r+0x176>
 801946e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019472:	4604      	mov	r4, r0
 8019474:	2301      	movs	r3, #1
 8019476:	e7f0      	b.n	801945a <_vfiprintf_r+0x1da>
 8019478:	ab03      	add	r3, sp, #12
 801947a:	9300      	str	r3, [sp, #0]
 801947c:	462a      	mov	r2, r5
 801947e:	4b16      	ldr	r3, [pc, #88]	; (80194d8 <_vfiprintf_r+0x258>)
 8019480:	a904      	add	r1, sp, #16
 8019482:	4630      	mov	r0, r6
 8019484:	f7fd fe02 	bl	801708c <_printf_float>
 8019488:	4607      	mov	r7, r0
 801948a:	1c78      	adds	r0, r7, #1
 801948c:	d1d6      	bne.n	801943c <_vfiprintf_r+0x1bc>
 801948e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019490:	07d9      	lsls	r1, r3, #31
 8019492:	d405      	bmi.n	80194a0 <_vfiprintf_r+0x220>
 8019494:	89ab      	ldrh	r3, [r5, #12]
 8019496:	059a      	lsls	r2, r3, #22
 8019498:	d402      	bmi.n	80194a0 <_vfiprintf_r+0x220>
 801949a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801949c:	f7ff f9b0 	bl	8018800 <__retarget_lock_release_recursive>
 80194a0:	89ab      	ldrh	r3, [r5, #12]
 80194a2:	065b      	lsls	r3, r3, #25
 80194a4:	f53f af12 	bmi.w	80192cc <_vfiprintf_r+0x4c>
 80194a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80194aa:	e711      	b.n	80192d0 <_vfiprintf_r+0x50>
 80194ac:	ab03      	add	r3, sp, #12
 80194ae:	9300      	str	r3, [sp, #0]
 80194b0:	462a      	mov	r2, r5
 80194b2:	4b09      	ldr	r3, [pc, #36]	; (80194d8 <_vfiprintf_r+0x258>)
 80194b4:	a904      	add	r1, sp, #16
 80194b6:	4630      	mov	r0, r6
 80194b8:	f7fe f88c 	bl	80175d4 <_printf_i>
 80194bc:	e7e4      	b.n	8019488 <_vfiprintf_r+0x208>
 80194be:	bf00      	nop
 80194c0:	0801a2d8 	.word	0x0801a2d8
 80194c4:	0801a2f8 	.word	0x0801a2f8
 80194c8:	0801a2b8 	.word	0x0801a2b8
 80194cc:	0801a47c 	.word	0x0801a47c
 80194d0:	0801a486 	.word	0x0801a486
 80194d4:	0801708d 	.word	0x0801708d
 80194d8:	0801925b 	.word	0x0801925b
 80194dc:	0801a482 	.word	0x0801a482

080194e0 <__sread>:
 80194e0:	b510      	push	{r4, lr}
 80194e2:	460c      	mov	r4, r1
 80194e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194e8:	f000 faba 	bl	8019a60 <_read_r>
 80194ec:	2800      	cmp	r0, #0
 80194ee:	bfab      	itete	ge
 80194f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80194f2:	89a3      	ldrhlt	r3, [r4, #12]
 80194f4:	181b      	addge	r3, r3, r0
 80194f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80194fa:	bfac      	ite	ge
 80194fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80194fe:	81a3      	strhlt	r3, [r4, #12]
 8019500:	bd10      	pop	{r4, pc}

08019502 <__swrite>:
 8019502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019506:	461f      	mov	r7, r3
 8019508:	898b      	ldrh	r3, [r1, #12]
 801950a:	05db      	lsls	r3, r3, #23
 801950c:	4605      	mov	r5, r0
 801950e:	460c      	mov	r4, r1
 8019510:	4616      	mov	r6, r2
 8019512:	d505      	bpl.n	8019520 <__swrite+0x1e>
 8019514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019518:	2302      	movs	r3, #2
 801951a:	2200      	movs	r2, #0
 801951c:	f000 f9de 	bl	80198dc <_lseek_r>
 8019520:	89a3      	ldrh	r3, [r4, #12]
 8019522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801952a:	81a3      	strh	r3, [r4, #12]
 801952c:	4632      	mov	r2, r6
 801952e:	463b      	mov	r3, r7
 8019530:	4628      	mov	r0, r5
 8019532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019536:	f000 b877 	b.w	8019628 <_write_r>

0801953a <__sseek>:
 801953a:	b510      	push	{r4, lr}
 801953c:	460c      	mov	r4, r1
 801953e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019542:	f000 f9cb 	bl	80198dc <_lseek_r>
 8019546:	1c43      	adds	r3, r0, #1
 8019548:	89a3      	ldrh	r3, [r4, #12]
 801954a:	bf15      	itete	ne
 801954c:	6560      	strne	r0, [r4, #84]	; 0x54
 801954e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019556:	81a3      	strheq	r3, [r4, #12]
 8019558:	bf18      	it	ne
 801955a:	81a3      	strhne	r3, [r4, #12]
 801955c:	bd10      	pop	{r4, pc}

0801955e <__sclose>:
 801955e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019562:	f000 b8e9 	b.w	8019738 <_close_r>
	...

08019568 <__swbuf_r>:
 8019568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801956a:	460e      	mov	r6, r1
 801956c:	4614      	mov	r4, r2
 801956e:	4605      	mov	r5, r0
 8019570:	b118      	cbz	r0, 801957a <__swbuf_r+0x12>
 8019572:	6983      	ldr	r3, [r0, #24]
 8019574:	b90b      	cbnz	r3, 801957a <__swbuf_r+0x12>
 8019576:	f7ff f88d 	bl	8018694 <__sinit>
 801957a:	4b21      	ldr	r3, [pc, #132]	; (8019600 <__swbuf_r+0x98>)
 801957c:	429c      	cmp	r4, r3
 801957e:	d12b      	bne.n	80195d8 <__swbuf_r+0x70>
 8019580:	686c      	ldr	r4, [r5, #4]
 8019582:	69a3      	ldr	r3, [r4, #24]
 8019584:	60a3      	str	r3, [r4, #8]
 8019586:	89a3      	ldrh	r3, [r4, #12]
 8019588:	071a      	lsls	r2, r3, #28
 801958a:	d52f      	bpl.n	80195ec <__swbuf_r+0x84>
 801958c:	6923      	ldr	r3, [r4, #16]
 801958e:	b36b      	cbz	r3, 80195ec <__swbuf_r+0x84>
 8019590:	6923      	ldr	r3, [r4, #16]
 8019592:	6820      	ldr	r0, [r4, #0]
 8019594:	1ac0      	subs	r0, r0, r3
 8019596:	6963      	ldr	r3, [r4, #20]
 8019598:	b2f6      	uxtb	r6, r6
 801959a:	4283      	cmp	r3, r0
 801959c:	4637      	mov	r7, r6
 801959e:	dc04      	bgt.n	80195aa <__swbuf_r+0x42>
 80195a0:	4621      	mov	r1, r4
 80195a2:	4628      	mov	r0, r5
 80195a4:	f000 f95e 	bl	8019864 <_fflush_r>
 80195a8:	bb30      	cbnz	r0, 80195f8 <__swbuf_r+0x90>
 80195aa:	68a3      	ldr	r3, [r4, #8]
 80195ac:	3b01      	subs	r3, #1
 80195ae:	60a3      	str	r3, [r4, #8]
 80195b0:	6823      	ldr	r3, [r4, #0]
 80195b2:	1c5a      	adds	r2, r3, #1
 80195b4:	6022      	str	r2, [r4, #0]
 80195b6:	701e      	strb	r6, [r3, #0]
 80195b8:	6963      	ldr	r3, [r4, #20]
 80195ba:	3001      	adds	r0, #1
 80195bc:	4283      	cmp	r3, r0
 80195be:	d004      	beq.n	80195ca <__swbuf_r+0x62>
 80195c0:	89a3      	ldrh	r3, [r4, #12]
 80195c2:	07db      	lsls	r3, r3, #31
 80195c4:	d506      	bpl.n	80195d4 <__swbuf_r+0x6c>
 80195c6:	2e0a      	cmp	r6, #10
 80195c8:	d104      	bne.n	80195d4 <__swbuf_r+0x6c>
 80195ca:	4621      	mov	r1, r4
 80195cc:	4628      	mov	r0, r5
 80195ce:	f000 f949 	bl	8019864 <_fflush_r>
 80195d2:	b988      	cbnz	r0, 80195f8 <__swbuf_r+0x90>
 80195d4:	4638      	mov	r0, r7
 80195d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195d8:	4b0a      	ldr	r3, [pc, #40]	; (8019604 <__swbuf_r+0x9c>)
 80195da:	429c      	cmp	r4, r3
 80195dc:	d101      	bne.n	80195e2 <__swbuf_r+0x7a>
 80195de:	68ac      	ldr	r4, [r5, #8]
 80195e0:	e7cf      	b.n	8019582 <__swbuf_r+0x1a>
 80195e2:	4b09      	ldr	r3, [pc, #36]	; (8019608 <__swbuf_r+0xa0>)
 80195e4:	429c      	cmp	r4, r3
 80195e6:	bf08      	it	eq
 80195e8:	68ec      	ldreq	r4, [r5, #12]
 80195ea:	e7ca      	b.n	8019582 <__swbuf_r+0x1a>
 80195ec:	4621      	mov	r1, r4
 80195ee:	4628      	mov	r0, r5
 80195f0:	f000 f82c 	bl	801964c <__swsetup_r>
 80195f4:	2800      	cmp	r0, #0
 80195f6:	d0cb      	beq.n	8019590 <__swbuf_r+0x28>
 80195f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80195fc:	e7ea      	b.n	80195d4 <__swbuf_r+0x6c>
 80195fe:	bf00      	nop
 8019600:	0801a2d8 	.word	0x0801a2d8
 8019604:	0801a2f8 	.word	0x0801a2f8
 8019608:	0801a2b8 	.word	0x0801a2b8

0801960c <__ascii_wctomb>:
 801960c:	b149      	cbz	r1, 8019622 <__ascii_wctomb+0x16>
 801960e:	2aff      	cmp	r2, #255	; 0xff
 8019610:	bf85      	ittet	hi
 8019612:	238a      	movhi	r3, #138	; 0x8a
 8019614:	6003      	strhi	r3, [r0, #0]
 8019616:	700a      	strbls	r2, [r1, #0]
 8019618:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801961c:	bf98      	it	ls
 801961e:	2001      	movls	r0, #1
 8019620:	4770      	bx	lr
 8019622:	4608      	mov	r0, r1
 8019624:	4770      	bx	lr
	...

08019628 <_write_r>:
 8019628:	b538      	push	{r3, r4, r5, lr}
 801962a:	4d07      	ldr	r5, [pc, #28]	; (8019648 <_write_r+0x20>)
 801962c:	4604      	mov	r4, r0
 801962e:	4608      	mov	r0, r1
 8019630:	4611      	mov	r1, r2
 8019632:	2200      	movs	r2, #0
 8019634:	602a      	str	r2, [r5, #0]
 8019636:	461a      	mov	r2, r3
 8019638:	f000 fad8 	bl	8019bec <_write>
 801963c:	1c43      	adds	r3, r0, #1
 801963e:	d102      	bne.n	8019646 <_write_r+0x1e>
 8019640:	682b      	ldr	r3, [r5, #0]
 8019642:	b103      	cbz	r3, 8019646 <_write_r+0x1e>
 8019644:	6023      	str	r3, [r4, #0]
 8019646:	bd38      	pop	{r3, r4, r5, pc}
 8019648:	20002f6c 	.word	0x20002f6c

0801964c <__swsetup_r>:
 801964c:	4b32      	ldr	r3, [pc, #200]	; (8019718 <__swsetup_r+0xcc>)
 801964e:	b570      	push	{r4, r5, r6, lr}
 8019650:	681d      	ldr	r5, [r3, #0]
 8019652:	4606      	mov	r6, r0
 8019654:	460c      	mov	r4, r1
 8019656:	b125      	cbz	r5, 8019662 <__swsetup_r+0x16>
 8019658:	69ab      	ldr	r3, [r5, #24]
 801965a:	b913      	cbnz	r3, 8019662 <__swsetup_r+0x16>
 801965c:	4628      	mov	r0, r5
 801965e:	f7ff f819 	bl	8018694 <__sinit>
 8019662:	4b2e      	ldr	r3, [pc, #184]	; (801971c <__swsetup_r+0xd0>)
 8019664:	429c      	cmp	r4, r3
 8019666:	d10f      	bne.n	8019688 <__swsetup_r+0x3c>
 8019668:	686c      	ldr	r4, [r5, #4]
 801966a:	89a3      	ldrh	r3, [r4, #12]
 801966c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019670:	0719      	lsls	r1, r3, #28
 8019672:	d42c      	bmi.n	80196ce <__swsetup_r+0x82>
 8019674:	06dd      	lsls	r5, r3, #27
 8019676:	d411      	bmi.n	801969c <__swsetup_r+0x50>
 8019678:	2309      	movs	r3, #9
 801967a:	6033      	str	r3, [r6, #0]
 801967c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019680:	81a3      	strh	r3, [r4, #12]
 8019682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019686:	e03e      	b.n	8019706 <__swsetup_r+0xba>
 8019688:	4b25      	ldr	r3, [pc, #148]	; (8019720 <__swsetup_r+0xd4>)
 801968a:	429c      	cmp	r4, r3
 801968c:	d101      	bne.n	8019692 <__swsetup_r+0x46>
 801968e:	68ac      	ldr	r4, [r5, #8]
 8019690:	e7eb      	b.n	801966a <__swsetup_r+0x1e>
 8019692:	4b24      	ldr	r3, [pc, #144]	; (8019724 <__swsetup_r+0xd8>)
 8019694:	429c      	cmp	r4, r3
 8019696:	bf08      	it	eq
 8019698:	68ec      	ldreq	r4, [r5, #12]
 801969a:	e7e6      	b.n	801966a <__swsetup_r+0x1e>
 801969c:	0758      	lsls	r0, r3, #29
 801969e:	d512      	bpl.n	80196c6 <__swsetup_r+0x7a>
 80196a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80196a2:	b141      	cbz	r1, 80196b6 <__swsetup_r+0x6a>
 80196a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80196a8:	4299      	cmp	r1, r3
 80196aa:	d002      	beq.n	80196b2 <__swsetup_r+0x66>
 80196ac:	4630      	mov	r0, r6
 80196ae:	f7fd fb6d 	bl	8016d8c <_free_r>
 80196b2:	2300      	movs	r3, #0
 80196b4:	6363      	str	r3, [r4, #52]	; 0x34
 80196b6:	89a3      	ldrh	r3, [r4, #12]
 80196b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80196bc:	81a3      	strh	r3, [r4, #12]
 80196be:	2300      	movs	r3, #0
 80196c0:	6063      	str	r3, [r4, #4]
 80196c2:	6923      	ldr	r3, [r4, #16]
 80196c4:	6023      	str	r3, [r4, #0]
 80196c6:	89a3      	ldrh	r3, [r4, #12]
 80196c8:	f043 0308 	orr.w	r3, r3, #8
 80196cc:	81a3      	strh	r3, [r4, #12]
 80196ce:	6923      	ldr	r3, [r4, #16]
 80196d0:	b94b      	cbnz	r3, 80196e6 <__swsetup_r+0x9a>
 80196d2:	89a3      	ldrh	r3, [r4, #12]
 80196d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80196d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80196dc:	d003      	beq.n	80196e6 <__swsetup_r+0x9a>
 80196de:	4621      	mov	r1, r4
 80196e0:	4630      	mov	r0, r6
 80196e2:	f000 f933 	bl	801994c <__smakebuf_r>
 80196e6:	89a0      	ldrh	r0, [r4, #12]
 80196e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80196ec:	f010 0301 	ands.w	r3, r0, #1
 80196f0:	d00a      	beq.n	8019708 <__swsetup_r+0xbc>
 80196f2:	2300      	movs	r3, #0
 80196f4:	60a3      	str	r3, [r4, #8]
 80196f6:	6963      	ldr	r3, [r4, #20]
 80196f8:	425b      	negs	r3, r3
 80196fa:	61a3      	str	r3, [r4, #24]
 80196fc:	6923      	ldr	r3, [r4, #16]
 80196fe:	b943      	cbnz	r3, 8019712 <__swsetup_r+0xc6>
 8019700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019704:	d1ba      	bne.n	801967c <__swsetup_r+0x30>
 8019706:	bd70      	pop	{r4, r5, r6, pc}
 8019708:	0781      	lsls	r1, r0, #30
 801970a:	bf58      	it	pl
 801970c:	6963      	ldrpl	r3, [r4, #20]
 801970e:	60a3      	str	r3, [r4, #8]
 8019710:	e7f4      	b.n	80196fc <__swsetup_r+0xb0>
 8019712:	2000      	movs	r0, #0
 8019714:	e7f7      	b.n	8019706 <__swsetup_r+0xba>
 8019716:	bf00      	nop
 8019718:	20000184 	.word	0x20000184
 801971c:	0801a2d8 	.word	0x0801a2d8
 8019720:	0801a2f8 	.word	0x0801a2f8
 8019724:	0801a2b8 	.word	0x0801a2b8

08019728 <abort>:
 8019728:	b508      	push	{r3, lr}
 801972a:	2006      	movs	r0, #6
 801972c:	f000 f9d2 	bl	8019ad4 <raise>
 8019730:	2001      	movs	r0, #1
 8019732:	f000 fa63 	bl	8019bfc <_exit>
	...

08019738 <_close_r>:
 8019738:	b538      	push	{r3, r4, r5, lr}
 801973a:	4d06      	ldr	r5, [pc, #24]	; (8019754 <_close_r+0x1c>)
 801973c:	2300      	movs	r3, #0
 801973e:	4604      	mov	r4, r0
 8019740:	4608      	mov	r0, r1
 8019742:	602b      	str	r3, [r5, #0]
 8019744:	f000 fa0c 	bl	8019b60 <_close>
 8019748:	1c43      	adds	r3, r0, #1
 801974a:	d102      	bne.n	8019752 <_close_r+0x1a>
 801974c:	682b      	ldr	r3, [r5, #0]
 801974e:	b103      	cbz	r3, 8019752 <_close_r+0x1a>
 8019750:	6023      	str	r3, [r4, #0]
 8019752:	bd38      	pop	{r3, r4, r5, pc}
 8019754:	20002f6c 	.word	0x20002f6c

08019758 <__sflush_r>:
 8019758:	898a      	ldrh	r2, [r1, #12]
 801975a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801975e:	4605      	mov	r5, r0
 8019760:	0710      	lsls	r0, r2, #28
 8019762:	460c      	mov	r4, r1
 8019764:	d458      	bmi.n	8019818 <__sflush_r+0xc0>
 8019766:	684b      	ldr	r3, [r1, #4]
 8019768:	2b00      	cmp	r3, #0
 801976a:	dc05      	bgt.n	8019778 <__sflush_r+0x20>
 801976c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801976e:	2b00      	cmp	r3, #0
 8019770:	dc02      	bgt.n	8019778 <__sflush_r+0x20>
 8019772:	2000      	movs	r0, #0
 8019774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801977a:	2e00      	cmp	r6, #0
 801977c:	d0f9      	beq.n	8019772 <__sflush_r+0x1a>
 801977e:	2300      	movs	r3, #0
 8019780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019784:	682f      	ldr	r7, [r5, #0]
 8019786:	602b      	str	r3, [r5, #0]
 8019788:	d032      	beq.n	80197f0 <__sflush_r+0x98>
 801978a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801978c:	89a3      	ldrh	r3, [r4, #12]
 801978e:	075a      	lsls	r2, r3, #29
 8019790:	d505      	bpl.n	801979e <__sflush_r+0x46>
 8019792:	6863      	ldr	r3, [r4, #4]
 8019794:	1ac0      	subs	r0, r0, r3
 8019796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019798:	b10b      	cbz	r3, 801979e <__sflush_r+0x46>
 801979a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801979c:	1ac0      	subs	r0, r0, r3
 801979e:	2300      	movs	r3, #0
 80197a0:	4602      	mov	r2, r0
 80197a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80197a4:	6a21      	ldr	r1, [r4, #32]
 80197a6:	4628      	mov	r0, r5
 80197a8:	47b0      	blx	r6
 80197aa:	1c43      	adds	r3, r0, #1
 80197ac:	89a3      	ldrh	r3, [r4, #12]
 80197ae:	d106      	bne.n	80197be <__sflush_r+0x66>
 80197b0:	6829      	ldr	r1, [r5, #0]
 80197b2:	291d      	cmp	r1, #29
 80197b4:	d82c      	bhi.n	8019810 <__sflush_r+0xb8>
 80197b6:	4a2a      	ldr	r2, [pc, #168]	; (8019860 <__sflush_r+0x108>)
 80197b8:	40ca      	lsrs	r2, r1
 80197ba:	07d6      	lsls	r6, r2, #31
 80197bc:	d528      	bpl.n	8019810 <__sflush_r+0xb8>
 80197be:	2200      	movs	r2, #0
 80197c0:	6062      	str	r2, [r4, #4]
 80197c2:	04d9      	lsls	r1, r3, #19
 80197c4:	6922      	ldr	r2, [r4, #16]
 80197c6:	6022      	str	r2, [r4, #0]
 80197c8:	d504      	bpl.n	80197d4 <__sflush_r+0x7c>
 80197ca:	1c42      	adds	r2, r0, #1
 80197cc:	d101      	bne.n	80197d2 <__sflush_r+0x7a>
 80197ce:	682b      	ldr	r3, [r5, #0]
 80197d0:	b903      	cbnz	r3, 80197d4 <__sflush_r+0x7c>
 80197d2:	6560      	str	r0, [r4, #84]	; 0x54
 80197d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80197d6:	602f      	str	r7, [r5, #0]
 80197d8:	2900      	cmp	r1, #0
 80197da:	d0ca      	beq.n	8019772 <__sflush_r+0x1a>
 80197dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197e0:	4299      	cmp	r1, r3
 80197e2:	d002      	beq.n	80197ea <__sflush_r+0x92>
 80197e4:	4628      	mov	r0, r5
 80197e6:	f7fd fad1 	bl	8016d8c <_free_r>
 80197ea:	2000      	movs	r0, #0
 80197ec:	6360      	str	r0, [r4, #52]	; 0x34
 80197ee:	e7c1      	b.n	8019774 <__sflush_r+0x1c>
 80197f0:	6a21      	ldr	r1, [r4, #32]
 80197f2:	2301      	movs	r3, #1
 80197f4:	4628      	mov	r0, r5
 80197f6:	47b0      	blx	r6
 80197f8:	1c41      	adds	r1, r0, #1
 80197fa:	d1c7      	bne.n	801978c <__sflush_r+0x34>
 80197fc:	682b      	ldr	r3, [r5, #0]
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d0c4      	beq.n	801978c <__sflush_r+0x34>
 8019802:	2b1d      	cmp	r3, #29
 8019804:	d001      	beq.n	801980a <__sflush_r+0xb2>
 8019806:	2b16      	cmp	r3, #22
 8019808:	d101      	bne.n	801980e <__sflush_r+0xb6>
 801980a:	602f      	str	r7, [r5, #0]
 801980c:	e7b1      	b.n	8019772 <__sflush_r+0x1a>
 801980e:	89a3      	ldrh	r3, [r4, #12]
 8019810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019814:	81a3      	strh	r3, [r4, #12]
 8019816:	e7ad      	b.n	8019774 <__sflush_r+0x1c>
 8019818:	690f      	ldr	r7, [r1, #16]
 801981a:	2f00      	cmp	r7, #0
 801981c:	d0a9      	beq.n	8019772 <__sflush_r+0x1a>
 801981e:	0793      	lsls	r3, r2, #30
 8019820:	680e      	ldr	r6, [r1, #0]
 8019822:	bf08      	it	eq
 8019824:	694b      	ldreq	r3, [r1, #20]
 8019826:	600f      	str	r7, [r1, #0]
 8019828:	bf18      	it	ne
 801982a:	2300      	movne	r3, #0
 801982c:	eba6 0807 	sub.w	r8, r6, r7
 8019830:	608b      	str	r3, [r1, #8]
 8019832:	f1b8 0f00 	cmp.w	r8, #0
 8019836:	dd9c      	ble.n	8019772 <__sflush_r+0x1a>
 8019838:	6a21      	ldr	r1, [r4, #32]
 801983a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801983c:	4643      	mov	r3, r8
 801983e:	463a      	mov	r2, r7
 8019840:	4628      	mov	r0, r5
 8019842:	47b0      	blx	r6
 8019844:	2800      	cmp	r0, #0
 8019846:	dc06      	bgt.n	8019856 <__sflush_r+0xfe>
 8019848:	89a3      	ldrh	r3, [r4, #12]
 801984a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801984e:	81a3      	strh	r3, [r4, #12]
 8019850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019854:	e78e      	b.n	8019774 <__sflush_r+0x1c>
 8019856:	4407      	add	r7, r0
 8019858:	eba8 0800 	sub.w	r8, r8, r0
 801985c:	e7e9      	b.n	8019832 <__sflush_r+0xda>
 801985e:	bf00      	nop
 8019860:	20400001 	.word	0x20400001

08019864 <_fflush_r>:
 8019864:	b538      	push	{r3, r4, r5, lr}
 8019866:	690b      	ldr	r3, [r1, #16]
 8019868:	4605      	mov	r5, r0
 801986a:	460c      	mov	r4, r1
 801986c:	b913      	cbnz	r3, 8019874 <_fflush_r+0x10>
 801986e:	2500      	movs	r5, #0
 8019870:	4628      	mov	r0, r5
 8019872:	bd38      	pop	{r3, r4, r5, pc}
 8019874:	b118      	cbz	r0, 801987e <_fflush_r+0x1a>
 8019876:	6983      	ldr	r3, [r0, #24]
 8019878:	b90b      	cbnz	r3, 801987e <_fflush_r+0x1a>
 801987a:	f7fe ff0b 	bl	8018694 <__sinit>
 801987e:	4b14      	ldr	r3, [pc, #80]	; (80198d0 <_fflush_r+0x6c>)
 8019880:	429c      	cmp	r4, r3
 8019882:	d11b      	bne.n	80198bc <_fflush_r+0x58>
 8019884:	686c      	ldr	r4, [r5, #4]
 8019886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d0ef      	beq.n	801986e <_fflush_r+0xa>
 801988e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019890:	07d0      	lsls	r0, r2, #31
 8019892:	d404      	bmi.n	801989e <_fflush_r+0x3a>
 8019894:	0599      	lsls	r1, r3, #22
 8019896:	d402      	bmi.n	801989e <_fflush_r+0x3a>
 8019898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801989a:	f7fe ffb0 	bl	80187fe <__retarget_lock_acquire_recursive>
 801989e:	4628      	mov	r0, r5
 80198a0:	4621      	mov	r1, r4
 80198a2:	f7ff ff59 	bl	8019758 <__sflush_r>
 80198a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80198a8:	07da      	lsls	r2, r3, #31
 80198aa:	4605      	mov	r5, r0
 80198ac:	d4e0      	bmi.n	8019870 <_fflush_r+0xc>
 80198ae:	89a3      	ldrh	r3, [r4, #12]
 80198b0:	059b      	lsls	r3, r3, #22
 80198b2:	d4dd      	bmi.n	8019870 <_fflush_r+0xc>
 80198b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80198b6:	f7fe ffa3 	bl	8018800 <__retarget_lock_release_recursive>
 80198ba:	e7d9      	b.n	8019870 <_fflush_r+0xc>
 80198bc:	4b05      	ldr	r3, [pc, #20]	; (80198d4 <_fflush_r+0x70>)
 80198be:	429c      	cmp	r4, r3
 80198c0:	d101      	bne.n	80198c6 <_fflush_r+0x62>
 80198c2:	68ac      	ldr	r4, [r5, #8]
 80198c4:	e7df      	b.n	8019886 <_fflush_r+0x22>
 80198c6:	4b04      	ldr	r3, [pc, #16]	; (80198d8 <_fflush_r+0x74>)
 80198c8:	429c      	cmp	r4, r3
 80198ca:	bf08      	it	eq
 80198cc:	68ec      	ldreq	r4, [r5, #12]
 80198ce:	e7da      	b.n	8019886 <_fflush_r+0x22>
 80198d0:	0801a2d8 	.word	0x0801a2d8
 80198d4:	0801a2f8 	.word	0x0801a2f8
 80198d8:	0801a2b8 	.word	0x0801a2b8

080198dc <_lseek_r>:
 80198dc:	b538      	push	{r3, r4, r5, lr}
 80198de:	4d07      	ldr	r5, [pc, #28]	; (80198fc <_lseek_r+0x20>)
 80198e0:	4604      	mov	r4, r0
 80198e2:	4608      	mov	r0, r1
 80198e4:	4611      	mov	r1, r2
 80198e6:	2200      	movs	r2, #0
 80198e8:	602a      	str	r2, [r5, #0]
 80198ea:	461a      	mov	r2, r3
 80198ec:	f000 f960 	bl	8019bb0 <_lseek>
 80198f0:	1c43      	adds	r3, r0, #1
 80198f2:	d102      	bne.n	80198fa <_lseek_r+0x1e>
 80198f4:	682b      	ldr	r3, [r5, #0]
 80198f6:	b103      	cbz	r3, 80198fa <_lseek_r+0x1e>
 80198f8:	6023      	str	r3, [r4, #0]
 80198fa:	bd38      	pop	{r3, r4, r5, pc}
 80198fc:	20002f6c 	.word	0x20002f6c

08019900 <__swhatbuf_r>:
 8019900:	b570      	push	{r4, r5, r6, lr}
 8019902:	460e      	mov	r6, r1
 8019904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019908:	2900      	cmp	r1, #0
 801990a:	b096      	sub	sp, #88	; 0x58
 801990c:	4614      	mov	r4, r2
 801990e:	461d      	mov	r5, r3
 8019910:	da08      	bge.n	8019924 <__swhatbuf_r+0x24>
 8019912:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019916:	2200      	movs	r2, #0
 8019918:	602a      	str	r2, [r5, #0]
 801991a:	061a      	lsls	r2, r3, #24
 801991c:	d410      	bmi.n	8019940 <__swhatbuf_r+0x40>
 801991e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019922:	e00e      	b.n	8019942 <__swhatbuf_r+0x42>
 8019924:	466a      	mov	r2, sp
 8019926:	f000 f8f1 	bl	8019b0c <_fstat_r>
 801992a:	2800      	cmp	r0, #0
 801992c:	dbf1      	blt.n	8019912 <__swhatbuf_r+0x12>
 801992e:	9a01      	ldr	r2, [sp, #4]
 8019930:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019934:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019938:	425a      	negs	r2, r3
 801993a:	415a      	adcs	r2, r3
 801993c:	602a      	str	r2, [r5, #0]
 801993e:	e7ee      	b.n	801991e <__swhatbuf_r+0x1e>
 8019940:	2340      	movs	r3, #64	; 0x40
 8019942:	2000      	movs	r0, #0
 8019944:	6023      	str	r3, [r4, #0]
 8019946:	b016      	add	sp, #88	; 0x58
 8019948:	bd70      	pop	{r4, r5, r6, pc}
	...

0801994c <__smakebuf_r>:
 801994c:	898b      	ldrh	r3, [r1, #12]
 801994e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019950:	079d      	lsls	r5, r3, #30
 8019952:	4606      	mov	r6, r0
 8019954:	460c      	mov	r4, r1
 8019956:	d507      	bpl.n	8019968 <__smakebuf_r+0x1c>
 8019958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801995c:	6023      	str	r3, [r4, #0]
 801995e:	6123      	str	r3, [r4, #16]
 8019960:	2301      	movs	r3, #1
 8019962:	6163      	str	r3, [r4, #20]
 8019964:	b002      	add	sp, #8
 8019966:	bd70      	pop	{r4, r5, r6, pc}
 8019968:	ab01      	add	r3, sp, #4
 801996a:	466a      	mov	r2, sp
 801996c:	f7ff ffc8 	bl	8019900 <__swhatbuf_r>
 8019970:	9900      	ldr	r1, [sp, #0]
 8019972:	4605      	mov	r5, r0
 8019974:	4630      	mov	r0, r6
 8019976:	f7fd fa75 	bl	8016e64 <_malloc_r>
 801997a:	b948      	cbnz	r0, 8019990 <__smakebuf_r+0x44>
 801997c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019980:	059a      	lsls	r2, r3, #22
 8019982:	d4ef      	bmi.n	8019964 <__smakebuf_r+0x18>
 8019984:	f023 0303 	bic.w	r3, r3, #3
 8019988:	f043 0302 	orr.w	r3, r3, #2
 801998c:	81a3      	strh	r3, [r4, #12]
 801998e:	e7e3      	b.n	8019958 <__smakebuf_r+0xc>
 8019990:	4b0d      	ldr	r3, [pc, #52]	; (80199c8 <__smakebuf_r+0x7c>)
 8019992:	62b3      	str	r3, [r6, #40]	; 0x28
 8019994:	89a3      	ldrh	r3, [r4, #12]
 8019996:	6020      	str	r0, [r4, #0]
 8019998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801999c:	81a3      	strh	r3, [r4, #12]
 801999e:	9b00      	ldr	r3, [sp, #0]
 80199a0:	6163      	str	r3, [r4, #20]
 80199a2:	9b01      	ldr	r3, [sp, #4]
 80199a4:	6120      	str	r0, [r4, #16]
 80199a6:	b15b      	cbz	r3, 80199c0 <__smakebuf_r+0x74>
 80199a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199ac:	4630      	mov	r0, r6
 80199ae:	f000 f8bf 	bl	8019b30 <_isatty_r>
 80199b2:	b128      	cbz	r0, 80199c0 <__smakebuf_r+0x74>
 80199b4:	89a3      	ldrh	r3, [r4, #12]
 80199b6:	f023 0303 	bic.w	r3, r3, #3
 80199ba:	f043 0301 	orr.w	r3, r3, #1
 80199be:	81a3      	strh	r3, [r4, #12]
 80199c0:	89a0      	ldrh	r0, [r4, #12]
 80199c2:	4305      	orrs	r5, r0
 80199c4:	81a5      	strh	r5, [r4, #12]
 80199c6:	e7cd      	b.n	8019964 <__smakebuf_r+0x18>
 80199c8:	0801862d 	.word	0x0801862d

080199cc <memmove>:
 80199cc:	4288      	cmp	r0, r1
 80199ce:	b510      	push	{r4, lr}
 80199d0:	eb01 0402 	add.w	r4, r1, r2
 80199d4:	d902      	bls.n	80199dc <memmove+0x10>
 80199d6:	4284      	cmp	r4, r0
 80199d8:	4623      	mov	r3, r4
 80199da:	d807      	bhi.n	80199ec <memmove+0x20>
 80199dc:	1e43      	subs	r3, r0, #1
 80199de:	42a1      	cmp	r1, r4
 80199e0:	d008      	beq.n	80199f4 <memmove+0x28>
 80199e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80199e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80199ea:	e7f8      	b.n	80199de <memmove+0x12>
 80199ec:	4402      	add	r2, r0
 80199ee:	4601      	mov	r1, r0
 80199f0:	428a      	cmp	r2, r1
 80199f2:	d100      	bne.n	80199f6 <memmove+0x2a>
 80199f4:	bd10      	pop	{r4, pc}
 80199f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80199fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80199fe:	e7f7      	b.n	80199f0 <memmove+0x24>

08019a00 <_realloc_r>:
 8019a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a04:	4680      	mov	r8, r0
 8019a06:	4614      	mov	r4, r2
 8019a08:	460e      	mov	r6, r1
 8019a0a:	b921      	cbnz	r1, 8019a16 <_realloc_r+0x16>
 8019a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a10:	4611      	mov	r1, r2
 8019a12:	f7fd ba27 	b.w	8016e64 <_malloc_r>
 8019a16:	b92a      	cbnz	r2, 8019a24 <_realloc_r+0x24>
 8019a18:	f7fd f9b8 	bl	8016d8c <_free_r>
 8019a1c:	4625      	mov	r5, r4
 8019a1e:	4628      	mov	r0, r5
 8019a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a24:	f000 f894 	bl	8019b50 <_malloc_usable_size_r>
 8019a28:	4284      	cmp	r4, r0
 8019a2a:	4607      	mov	r7, r0
 8019a2c:	d802      	bhi.n	8019a34 <_realloc_r+0x34>
 8019a2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019a32:	d812      	bhi.n	8019a5a <_realloc_r+0x5a>
 8019a34:	4621      	mov	r1, r4
 8019a36:	4640      	mov	r0, r8
 8019a38:	f7fd fa14 	bl	8016e64 <_malloc_r>
 8019a3c:	4605      	mov	r5, r0
 8019a3e:	2800      	cmp	r0, #0
 8019a40:	d0ed      	beq.n	8019a1e <_realloc_r+0x1e>
 8019a42:	42bc      	cmp	r4, r7
 8019a44:	4622      	mov	r2, r4
 8019a46:	4631      	mov	r1, r6
 8019a48:	bf28      	it	cs
 8019a4a:	463a      	movcs	r2, r7
 8019a4c:	f7fd f988 	bl	8016d60 <memcpy>
 8019a50:	4631      	mov	r1, r6
 8019a52:	4640      	mov	r0, r8
 8019a54:	f7fd f99a 	bl	8016d8c <_free_r>
 8019a58:	e7e1      	b.n	8019a1e <_realloc_r+0x1e>
 8019a5a:	4635      	mov	r5, r6
 8019a5c:	e7df      	b.n	8019a1e <_realloc_r+0x1e>
	...

08019a60 <_read_r>:
 8019a60:	b538      	push	{r3, r4, r5, lr}
 8019a62:	4d07      	ldr	r5, [pc, #28]	; (8019a80 <_read_r+0x20>)
 8019a64:	4604      	mov	r4, r0
 8019a66:	4608      	mov	r0, r1
 8019a68:	4611      	mov	r1, r2
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	602a      	str	r2, [r5, #0]
 8019a6e:	461a      	mov	r2, r3
 8019a70:	f000 f8a6 	bl	8019bc0 <_read>
 8019a74:	1c43      	adds	r3, r0, #1
 8019a76:	d102      	bne.n	8019a7e <_read_r+0x1e>
 8019a78:	682b      	ldr	r3, [r5, #0]
 8019a7a:	b103      	cbz	r3, 8019a7e <_read_r+0x1e>
 8019a7c:	6023      	str	r3, [r4, #0]
 8019a7e:	bd38      	pop	{r3, r4, r5, pc}
 8019a80:	20002f6c 	.word	0x20002f6c

08019a84 <_raise_r>:
 8019a84:	291f      	cmp	r1, #31
 8019a86:	b538      	push	{r3, r4, r5, lr}
 8019a88:	4604      	mov	r4, r0
 8019a8a:	460d      	mov	r5, r1
 8019a8c:	d904      	bls.n	8019a98 <_raise_r+0x14>
 8019a8e:	2316      	movs	r3, #22
 8019a90:	6003      	str	r3, [r0, #0]
 8019a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a96:	bd38      	pop	{r3, r4, r5, pc}
 8019a98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019a9a:	b112      	cbz	r2, 8019aa2 <_raise_r+0x1e>
 8019a9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019aa0:	b94b      	cbnz	r3, 8019ab6 <_raise_r+0x32>
 8019aa2:	4620      	mov	r0, r4
 8019aa4:	f000 f830 	bl	8019b08 <_getpid_r>
 8019aa8:	462a      	mov	r2, r5
 8019aaa:	4601      	mov	r1, r0
 8019aac:	4620      	mov	r0, r4
 8019aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019ab2:	f000 b817 	b.w	8019ae4 <_kill_r>
 8019ab6:	2b01      	cmp	r3, #1
 8019ab8:	d00a      	beq.n	8019ad0 <_raise_r+0x4c>
 8019aba:	1c59      	adds	r1, r3, #1
 8019abc:	d103      	bne.n	8019ac6 <_raise_r+0x42>
 8019abe:	2316      	movs	r3, #22
 8019ac0:	6003      	str	r3, [r0, #0]
 8019ac2:	2001      	movs	r0, #1
 8019ac4:	e7e7      	b.n	8019a96 <_raise_r+0x12>
 8019ac6:	2400      	movs	r4, #0
 8019ac8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019acc:	4628      	mov	r0, r5
 8019ace:	4798      	blx	r3
 8019ad0:	2000      	movs	r0, #0
 8019ad2:	e7e0      	b.n	8019a96 <_raise_r+0x12>

08019ad4 <raise>:
 8019ad4:	4b02      	ldr	r3, [pc, #8]	; (8019ae0 <raise+0xc>)
 8019ad6:	4601      	mov	r1, r0
 8019ad8:	6818      	ldr	r0, [r3, #0]
 8019ada:	f7ff bfd3 	b.w	8019a84 <_raise_r>
 8019ade:	bf00      	nop
 8019ae0:	20000184 	.word	0x20000184

08019ae4 <_kill_r>:
 8019ae4:	b538      	push	{r3, r4, r5, lr}
 8019ae6:	4d07      	ldr	r5, [pc, #28]	; (8019b04 <_kill_r+0x20>)
 8019ae8:	2300      	movs	r3, #0
 8019aea:	4604      	mov	r4, r0
 8019aec:	4608      	mov	r0, r1
 8019aee:	4611      	mov	r1, r2
 8019af0:	602b      	str	r3, [r5, #0]
 8019af2:	f000 f855 	bl	8019ba0 <_kill>
 8019af6:	1c43      	adds	r3, r0, #1
 8019af8:	d102      	bne.n	8019b00 <_kill_r+0x1c>
 8019afa:	682b      	ldr	r3, [r5, #0]
 8019afc:	b103      	cbz	r3, 8019b00 <_kill_r+0x1c>
 8019afe:	6023      	str	r3, [r4, #0]
 8019b00:	bd38      	pop	{r3, r4, r5, pc}
 8019b02:	bf00      	nop
 8019b04:	20002f6c 	.word	0x20002f6c

08019b08 <_getpid_r>:
 8019b08:	f000 b83a 	b.w	8019b80 <_getpid>

08019b0c <_fstat_r>:
 8019b0c:	b538      	push	{r3, r4, r5, lr}
 8019b0e:	4d07      	ldr	r5, [pc, #28]	; (8019b2c <_fstat_r+0x20>)
 8019b10:	2300      	movs	r3, #0
 8019b12:	4604      	mov	r4, r0
 8019b14:	4608      	mov	r0, r1
 8019b16:	4611      	mov	r1, r2
 8019b18:	602b      	str	r3, [r5, #0]
 8019b1a:	f000 f829 	bl	8019b70 <_fstat>
 8019b1e:	1c43      	adds	r3, r0, #1
 8019b20:	d102      	bne.n	8019b28 <_fstat_r+0x1c>
 8019b22:	682b      	ldr	r3, [r5, #0]
 8019b24:	b103      	cbz	r3, 8019b28 <_fstat_r+0x1c>
 8019b26:	6023      	str	r3, [r4, #0]
 8019b28:	bd38      	pop	{r3, r4, r5, pc}
 8019b2a:	bf00      	nop
 8019b2c:	20002f6c 	.word	0x20002f6c

08019b30 <_isatty_r>:
 8019b30:	b538      	push	{r3, r4, r5, lr}
 8019b32:	4d06      	ldr	r5, [pc, #24]	; (8019b4c <_isatty_r+0x1c>)
 8019b34:	2300      	movs	r3, #0
 8019b36:	4604      	mov	r4, r0
 8019b38:	4608      	mov	r0, r1
 8019b3a:	602b      	str	r3, [r5, #0]
 8019b3c:	f000 f828 	bl	8019b90 <_isatty>
 8019b40:	1c43      	adds	r3, r0, #1
 8019b42:	d102      	bne.n	8019b4a <_isatty_r+0x1a>
 8019b44:	682b      	ldr	r3, [r5, #0]
 8019b46:	b103      	cbz	r3, 8019b4a <_isatty_r+0x1a>
 8019b48:	6023      	str	r3, [r4, #0]
 8019b4a:	bd38      	pop	{r3, r4, r5, pc}
 8019b4c:	20002f6c 	.word	0x20002f6c

08019b50 <_malloc_usable_size_r>:
 8019b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b54:	1f18      	subs	r0, r3, #4
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	bfbc      	itt	lt
 8019b5a:	580b      	ldrlt	r3, [r1, r0]
 8019b5c:	18c0      	addlt	r0, r0, r3
 8019b5e:	4770      	bx	lr

08019b60 <_close>:
 8019b60:	4b02      	ldr	r3, [pc, #8]	; (8019b6c <_close+0xc>)
 8019b62:	2258      	movs	r2, #88	; 0x58
 8019b64:	601a      	str	r2, [r3, #0]
 8019b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b6a:	4770      	bx	lr
 8019b6c:	20002f6c 	.word	0x20002f6c

08019b70 <_fstat>:
 8019b70:	4b02      	ldr	r3, [pc, #8]	; (8019b7c <_fstat+0xc>)
 8019b72:	2258      	movs	r2, #88	; 0x58
 8019b74:	601a      	str	r2, [r3, #0]
 8019b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b7a:	4770      	bx	lr
 8019b7c:	20002f6c 	.word	0x20002f6c

08019b80 <_getpid>:
 8019b80:	4b02      	ldr	r3, [pc, #8]	; (8019b8c <_getpid+0xc>)
 8019b82:	2258      	movs	r2, #88	; 0x58
 8019b84:	601a      	str	r2, [r3, #0]
 8019b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b8a:	4770      	bx	lr
 8019b8c:	20002f6c 	.word	0x20002f6c

08019b90 <_isatty>:
 8019b90:	4b02      	ldr	r3, [pc, #8]	; (8019b9c <_isatty+0xc>)
 8019b92:	2258      	movs	r2, #88	; 0x58
 8019b94:	601a      	str	r2, [r3, #0]
 8019b96:	2000      	movs	r0, #0
 8019b98:	4770      	bx	lr
 8019b9a:	bf00      	nop
 8019b9c:	20002f6c 	.word	0x20002f6c

08019ba0 <_kill>:
 8019ba0:	4b02      	ldr	r3, [pc, #8]	; (8019bac <_kill+0xc>)
 8019ba2:	2258      	movs	r2, #88	; 0x58
 8019ba4:	601a      	str	r2, [r3, #0]
 8019ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019baa:	4770      	bx	lr
 8019bac:	20002f6c 	.word	0x20002f6c

08019bb0 <_lseek>:
 8019bb0:	4b02      	ldr	r3, [pc, #8]	; (8019bbc <_lseek+0xc>)
 8019bb2:	2258      	movs	r2, #88	; 0x58
 8019bb4:	601a      	str	r2, [r3, #0]
 8019bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019bba:	4770      	bx	lr
 8019bbc:	20002f6c 	.word	0x20002f6c

08019bc0 <_read>:
 8019bc0:	4b02      	ldr	r3, [pc, #8]	; (8019bcc <_read+0xc>)
 8019bc2:	2258      	movs	r2, #88	; 0x58
 8019bc4:	601a      	str	r2, [r3, #0]
 8019bc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019bca:	4770      	bx	lr
 8019bcc:	20002f6c 	.word	0x20002f6c

08019bd0 <_sbrk>:
 8019bd0:	4a04      	ldr	r2, [pc, #16]	; (8019be4 <_sbrk+0x14>)
 8019bd2:	6811      	ldr	r1, [r2, #0]
 8019bd4:	4603      	mov	r3, r0
 8019bd6:	b909      	cbnz	r1, 8019bdc <_sbrk+0xc>
 8019bd8:	4903      	ldr	r1, [pc, #12]	; (8019be8 <_sbrk+0x18>)
 8019bda:	6011      	str	r1, [r2, #0]
 8019bdc:	6810      	ldr	r0, [r2, #0]
 8019bde:	4403      	add	r3, r0
 8019be0:	6013      	str	r3, [r2, #0]
 8019be2:	4770      	bx	lr
 8019be4:	20002f70 	.word	0x20002f70
 8019be8:	20002f78 	.word	0x20002f78

08019bec <_write>:
 8019bec:	4b02      	ldr	r3, [pc, #8]	; (8019bf8 <_write+0xc>)
 8019bee:	2258      	movs	r2, #88	; 0x58
 8019bf0:	601a      	str	r2, [r3, #0]
 8019bf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019bf6:	4770      	bx	lr
 8019bf8:	20002f6c 	.word	0x20002f6c

08019bfc <_exit>:
 8019bfc:	e7fe      	b.n	8019bfc <_exit>
	...

08019c00 <_init>:
 8019c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c02:	bf00      	nop
 8019c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c06:	bc08      	pop	{r3}
 8019c08:	469e      	mov	lr, r3
 8019c0a:	4770      	bx	lr

08019c0c <_fini>:
 8019c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c0e:	bf00      	nop
 8019c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c12:	bc08      	pop	{r3}
 8019c14:	469e      	mov	lr, r3
 8019c16:	4770      	bx	lr
