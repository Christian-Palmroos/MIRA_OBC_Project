
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e24  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08012fe8  08012fe8  00022fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080134e8  080134e8  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080134e8  080134e8  000234e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080134f0  080134f0  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080134f0  080134f0  000234f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080134f4  080134f4  000234f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  080134f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002594  20000354  0801384c  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200028e8  0801384c  000328e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c254  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005825  00000000  00000000  0005c5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002310  00000000  00000000  00061e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020c8  00000000  00000000  00064110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000895e  00000000  00000000  000661d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c883  00000000  00000000  0006eb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121a99  00000000  00000000  0009b3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bce52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a63c  00000000  00000000  001bcea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c74e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c75ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000354 	.word	0x20000354
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012fcc 	.word	0x08012fcc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000358 	.word	0x20000358
 80001fc:	08012fcc 	.word	0x08012fcc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <BSP_I2C2_Init+0x74>)
 8000eea:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4918      	ldr	r1, [pc, #96]	; (8000f54 <BSP_I2C2_Init+0x78>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d122      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000efc:	f002 f86d 	bl	8002fda <HAL_I2C_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11c      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000f06:	4811      	ldr	r0, [pc, #68]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f08:	f000 f86a 	bl	8000fe0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f14:	f000 f820 	bl	8000f58 <MX_I2C2_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f1e:	f06f 0307 	mvn.w	r3, #7
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e00c      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <BSP_I2C2_Init+0x70>)
 8000f2a:	f002 f864 	bl	8002ff6 <HAL_I2CEx_ConfigAnalogFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f34:	f06f 0307 	mvn.w	r3, #7
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000370 	.word	0x20000370
 8000f50:	40005800 	.word	0x40005800
 8000f54:	200003c4 	.word	0x200003c4

08000f58 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C2_Init+0x80>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C2_Init+0x84>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 ff8e 	bl	8002ebc <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f002 f822 	bl	8002ff6 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f002 f864 	bl	800308c <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005800 	.word	0x40005800
 8000fdc:	307075b1 	.word	0x307075b1

08000fe0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ae      	sub	sp, #184	; 0xb8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2294      	movs	r2, #148	; 0x94
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00f fa77 	bl	80104e4 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fa32 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <I2C2_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <I2C2_MspInit+0xb8>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <I2C2_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	4619      	mov	r1, r3
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <I2C2_MspInit+0xbc>)
 8001048:	f001 fd5c 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800106c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <I2C2_MspInit+0xbc>)
 8001074:	f001 fd46 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C2_MspInit+0xb8>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <I2C2_MspInit+0xb8>)
 800107e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <I2C2_MspInit+0xb8>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	37b8      	adds	r7, #184	; 0xb8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6858      	ldr	r0, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8adb      	ldrh	r3, [r3, #22]
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	f001 fec7 	bl	8002e58 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	1cf9      	adds	r1, r7, #3
 80010d4:	2201      	movs	r2, #1
 80010d6:	f007 fbf7 	bl	80088c8 <HAL_SPI_Transmit>
 80010da:	4603      	mov	r3, r0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f107 010f 	add.w	r1, r7, #15
 80010ea:	2201      	movs	r2, #1
 80010ec:	f007 fd5a 	bl	8008ba4 <HAL_SPI_Receive>
 80010f0:	4603      	mov	r3, r0
 80010f2:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6858      	ldr	r0, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	8adb      	ldrh	r3, [r3, #22]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	f001 feaa 	bl	8002e58 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	70fb      	strb	r3, [r7, #3]
 800111a:	4613      	mov	r3, r2
 800111c:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001124:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001126:	78bb      	ldrb	r3, [r7, #2]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b21b      	sxth	r3, r3
 8001134:	b29b      	uxth	r3, r3
 8001136:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6858      	ldr	r0, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	8adb      	ldrh	r3, [r3, #22]
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	f001 fe88 	bl	8002e58 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f107 010a 	add.w	r1, r7, #10
 8001154:	2202      	movs	r2, #2
 8001156:	f007 fbb7 	bl	80088c8 <HAL_SPI_Transmit>
 800115a:	4603      	mov	r3, r0
 800115c:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6858      	ldr	r0, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8adb      	ldrh	r3, [r3, #22]
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	f001 fe75 	bl	8002e58 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b088      	sub	sp, #32
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	4611      	mov	r1, r2
 8001182:	461a      	mov	r2, r3
 8001184:	460b      	mov	r3, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6858      	ldr	r0, [r3, #4]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8adb      	ldrh	r3, [r3, #22]
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	f001 fe5c 	bl	8002e58 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f107 0117 	add.w	r1, r7, #23
 80011ac:	2201      	movs	r2, #1
 80011ae:	f007 fb8b 	bl	80088c8 <HAL_SPI_Transmit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	b292      	uxth	r2, r2
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 f830 	bl	800922c <HAL_SPI_Transmit_DMA>
 80011cc:	e012      	b.n	80011f4 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	68b9      	ldr	r1, [r7, #8]
 80011dc:	f007 fb74 	bl	80088c8 <HAL_SPI_Transmit>
 80011e0:	4603      	mov	r3, r0
 80011e2:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6858      	ldr	r0, [r3, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8adb      	ldrh	r3, [r3, #22]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f001 fe32 	bl	8002e58 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800120c:	b2db      	uxtb	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	2101      	movs	r1, #1
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff7b 	bl	800110e <write_register>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	2b2c      	cmp	r3, #44	; 0x2c
 8001230:	d801      	bhi.n	8001236 <set_OCP+0x16>
    imax = 45;
 8001232:	232d      	movs	r3, #45	; 0x2d
 8001234:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	2bf0      	cmp	r3, #240	; 0xf0
 800123a:	d901      	bls.n	8001240 <set_OCP+0x20>
    imax = 240;
 800123c:	23f0      	movs	r3, #240	; 0xf0
 800123e:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	2b81      	cmp	r3, #129	; 0x81
 8001244:	d809      	bhi.n	800125a <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	3b2d      	subs	r3, #45	; 0x2d
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <set_OCP+0x68>)
 800124c:	fb82 1203 	smull	r1, r2, r2, r3
 8001250:	1052      	asrs	r2, r2, #1
 8001252:	17db      	asrs	r3, r3, #31
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e008      	b.n	800126c <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	331e      	adds	r3, #30
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <set_OCP+0x68>)
 8001260:	fb82 1203 	smull	r1, r2, r2, r3
 8001264:	1092      	asrs	r2, r2, #2
 8001266:	17db      	asrs	r3, r3, #31
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	f043 0320 	orr.w	r3, r3, #32
 8001272:	b2db      	uxtb	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	210b      	movs	r1, #11
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff48 	bl	800110e <write_register>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	66666667 	.word	0x66666667

0800128c <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 800128c:	b5b0      	push	{r4, r5, r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001294:	211d      	movs	r1, #29
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ff02 	bl	80010a0 <read_register>
 800129c:	4603      	mov	r3, r0
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2200      	movs	r2, #0
 80012a6:	461c      	mov	r4, r3
 80012a8:	4615      	mov	r5, r2
 80012aa:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80012ae:	211e      	movs	r1, #30
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fef5 	bl	80010a0 <read_register>
 80012b6:	4603      	mov	r3, r0
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 80012bc:	2304      	movs	r3, #4
 80012be:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b0a      	cmp	r3, #10
 80012c4:	d908      	bls.n	80012d8 <set_low_data_rate_optimization+0x4c>
 80012c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012ca:	1fd1      	subs	r1, r2, #7
 80012cc:	430b      	orrs	r3, r1
 80012ce:	d103      	bne.n	80012d8 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 80012d0:	7ffb      	ldrb	r3, [r7, #31]
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	461a      	mov	r2, r3
 80012dc:	2126      	movs	r1, #38	; 0x26
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ff15 	bl	800110e <write_register>
}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bdb0      	pop	{r4, r5, r7, pc}

080012ec <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 80012f4:	2100      	movs	r1, #0
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff7f 	bl	80011fa <set_mode>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 800130c:	2101      	movs	r1, #1
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff73 	bl	80011fa <set_mode>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001324:	211d      	movs	r1, #29
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff feba 	bl	80010a0 <read_register>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	f023 0301 	bic.w	r3, r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	461a      	mov	r2, r3
 800133c:	211d      	movs	r1, #29
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fee5 	bl	800110e <write_register>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10e      	bne.n	800137e <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	d901      	bls.n	800136a <lora_set_tx_power+0x1e>
      level = 15;
 8001366:	230f      	movs	r3, #15
 8001368:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001370:	b2db      	uxtb	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	2109      	movs	r1, #9
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fec9 	bl	800110e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 800137c:	e02e      	b.n	80013dc <lora_set_tx_power+0x90>
    if (level > 20) {
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	2b14      	cmp	r3, #20
 8001382:	d901      	bls.n	8001388 <lora_set_tx_power+0x3c>
      level = 20;
 8001384:	2314      	movs	r3, #20
 8001386:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d801      	bhi.n	8001392 <lora_set_tx_power+0x46>
      level = 2;
 800138e:	2302      	movs	r3, #2
 8001390:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	2b11      	cmp	r3, #17
 8001396:	d90c      	bls.n	80013b2 <lora_set_tx_power+0x66>
      level -= 3;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	3b03      	subs	r3, #3
 800139c:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 800139e:	2287      	movs	r2, #135	; 0x87
 80013a0:	214d      	movs	r1, #77	; 0x4d
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff feb3 	bl	800110e <write_register>
      set_OCP(lora, 140);
 80013a8:	218c      	movs	r1, #140	; 0x8c
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff38 	bl	8001220 <set_OCP>
 80013b0:	e008      	b.n	80013c4 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 80013b2:	2284      	movs	r2, #132	; 0x84
 80013b4:	214d      	movs	r1, #77	; 0x4d
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fea9 	bl	800110e <write_register>
      set_OCP(lora, 97);
 80013bc:	2161      	movs	r1, #97	; 0x61
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ff2e 	bl	8001220 <set_OCP>
    level -= 2;
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	3b02      	subs	r3, #2
 80013c8:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	2109      	movs	r1, #9
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fe99 	bl	800110e <write_register>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80013f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013f4:	f04f 0000 	mov.w	r0, #0
 80013f8:	f04f 0100 	mov.w	r1, #0
 80013fc:	04d9      	lsls	r1, r3, #19
 80013fe:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001402:	04d0      	lsls	r0, r2, #19
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <lora_set_frequency+0x88>)
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	f7ff fbe5 	bl	8000bd8 <__aeabi_uldivmod>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8001416:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	0c02      	lsrs	r2, r0, #16
 8001424:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001428:	0c0b      	lsrs	r3, r1, #16
 800142a:	b2d3      	uxtb	r3, r2
 800142c:	461a      	mov	r2, r3
 800142e:	2106      	movs	r1, #6
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff fe6c 	bl	800110e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8001436:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	0a02      	lsrs	r2, r0, #8
 8001444:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001448:	0a0b      	lsrs	r3, r1, #8
 800144a:	b2d3      	uxtb	r3, r2
 800144c:	461a      	mov	r2, r3
 800144e:	2107      	movs	r1, #7
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff fe5c 	bl	800110e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8001456:	7c3b      	ldrb	r3, [r7, #16]
 8001458:	461a      	mov	r2, r3
 800145a:	2108      	movs	r1, #8
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff fe56 	bl	800110e <write_register>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	01e84800 	.word	0x01e84800

08001470 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d802      	bhi.n	8001488 <lora_set_spreading_factor+0x18>
    sf = 6;
 8001482:	2306      	movs	r3, #6
 8001484:	70fb      	strb	r3, [r7, #3]
 8001486:	e004      	b.n	8001492 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	2b0c      	cmp	r3, #12
 800148c:	d901      	bls.n	8001492 <lora_set_spreading_factor+0x22>
    sf = 12;
 800148e:	230c      	movs	r3, #12
 8001490:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	2b06      	cmp	r3, #6
 8001496:	d10a      	bne.n	80014ae <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001498:	22c5      	movs	r2, #197	; 0xc5
 800149a:	2131      	movs	r1, #49	; 0x31
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fe36 	bl	800110e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80014a2:	220c      	movs	r2, #12
 80014a4:	2137      	movs	r1, #55	; 0x37
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fe31 	bl	800110e <write_register>
 80014ac:	e009      	b.n	80014c2 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 80014ae:	22c3      	movs	r2, #195	; 0xc3
 80014b0:	2131      	movs	r1, #49	; 0x31
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fe2b 	bl	800110e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 80014b8:	220a      	movs	r2, #10
 80014ba:	2137      	movs	r1, #55	; 0x37
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fe26 	bl	800110e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 80014c2:	211e      	movs	r1, #30
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fdeb 	bl	80010a0 <read_register>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	b25a      	sxtb	r2, r3
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	461a      	mov	r2, r3
 80014e8:	211e      	movs	r1, #30
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fe0f 	bl	800110e <write_register>

  set_low_data_rate_optimization(lora);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fecb 	bl	800128c <set_low_data_rate_optimization>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	b29b      	uxth	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	2120      	movs	r1, #32
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fdf9 	bl	800110e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	2121      	movs	r1, #33	; 0x21
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fdef 	bl	800110e <write_register>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8001540:	2142      	movs	r1, #66	; 0x42
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fdac 	bl	80010a0 <read_register>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 800155a:	2101      	movs	r1, #1
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fd9f 	bl	80010a0 <read_register>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b03      	cmp	r3, #3
 800156e:	d101      	bne.n	8001574 <lora_is_transmitting+0x22>
 8001570:	2305      	movs	r3, #5
 8001572:	e000      	b.n	8001576 <lora_is_transmitting+0x24>
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	4611      	mov	r1, r2
 800158a:	461a      	mov	r2, r3
 800158c:	460b      	mov	r3, r1
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	4613      	mov	r3, r2
 8001592:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f7ff ffdc 	bl	8001552 <lora_is_transmitting>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80015a0:	2305      	movs	r3, #5
 80015a2:	e02a      	b.n	80015fa <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 80015a4:	2101      	movs	r1, #1
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f7ff fe27 	bl	80011fa <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 f83a 	bl	8001626 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	7d1b      	ldrb	r3, [r3, #20]
 80015b6:	461a      	mov	r2, r3
 80015b8:	210d      	movs	r1, #13
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f7ff fda7 	bl	800110e <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	7d1b      	ldrb	r3, [r3, #20]
 80015c4:	461a      	mov	r2, r3
 80015c6:	210e      	movs	r1, #14
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff fda0 	bl	800110e <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	461a      	mov	r2, r3
 80015d2:	2122      	movs	r1, #34	; 0x22
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f7ff fd9a 	bl	800110e <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 80015da:	79bb      	ldrb	r3, [r7, #6]
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff fdc8 	bl	8001176 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 80015e6:	79bb      	ldrb	r3, [r7, #6]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <lora_send_packet_base+0x72>
    return LORA_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e004      	b.n	80015fa <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 80015f0:	2103      	movs	r1, #3
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff fe01 	bl	80011fa <set_mode>
  return LORA_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	4613      	mov	r3, r2
 800160e:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	2302      	movs	r3, #2
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff ffb1 	bl	800157e <lora_send_packet_base>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 800162e:	2208      	movs	r2, #8
 8001630:	2112      	movs	r1, #18
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fd6b 	bl	800110e <write_register>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	887a      	ldrh	r2, [r7, #2]
 800165e:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8001660:	6a3a      	ldr	r2, [r7, #32]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800167e:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f7ff ff59 	bl	8001538 <lora_version>
 8001686:	4603      	mov	r3, r0
 8001688:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	2b12      	cmp	r3, #18
 800168e:	d001      	beq.n	8001694 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8001690:	2304      	movs	r3, #4
 8001692:	e031      	b.n	80016f8 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f7ff fe29 	bl	80012ec <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f7ff fe26 	bl	80012ec <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80016a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7ff fe9d 	bl	80013e4 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 80016aa:	2107      	movs	r1, #7
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f7ff fedf 	bl	8001470 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 80016b2:	210a      	movs	r1, #10
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff ff22 	bl	80014fe <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f7ff fe2e 	bl	800131c <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 80016c0:	210c      	movs	r1, #12
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7ff fcec 	bl	80010a0 <read_register>
 80016c8:	4603      	mov	r3, r0
 80016ca:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80016cc:	7dbb      	ldrb	r3, [r7, #22]
 80016ce:	f043 0303 	orr.w	r3, r3, #3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	210c      	movs	r1, #12
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f7ff fd18 	bl	800110e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80016de:	2204      	movs	r2, #4
 80016e0:	2126      	movs	r1, #38	; 0x26
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7ff fd13 	bl	800110e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80016e8:	2111      	movs	r1, #17
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff fe2e 	bl	800134c <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f7ff fe07 	bl	8001304 <lora_mode_standby>

  return LORA_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	f5ad 6d28 	sub.w	sp, sp, #2688	; 0xa80
 8001706:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "STM32 FATFS works great!"; /* File write buffer. */
 8001708:	4b71      	ldr	r3, [pc, #452]	; (80018d0 <main+0x1d0>)
 800170a:	f607 242c 	addw	r4, r7, #2604	; 0xa2c
 800170e:	461d      	mov	r5, r3
 8001710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001714:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001718:	c403      	stmia	r4!, {r0, r1}
 800171a:	7022      	strb	r2, [r4, #0]
 800171c:	f607 2345 	addw	r3, r7, #2629	; 0xa45
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	761a      	strb	r2, [r3, #24]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 8001730:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001734:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8001738:	461a      	mov	r2, r3
 800173a:	2300      	movs	r3, #0
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	6053      	str	r3, [r2, #4]
 8001740:	6093      	str	r3, [r2, #8]
 8001742:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 8001744:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001748:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 8001756:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800175a:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 8001766:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800176a:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	3304      	adds	r3, #4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 8001782:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001786:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	3304      	adds	r3, #4
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 800179e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80017a2:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	3304      	adds	r3, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 80017ba:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80017be:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80017c2:	4a44      	ldr	r2, [pc, #272]	; (80018d4 <main+0x1d4>)
 80017c4:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 80017c6:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80017ca:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	3304      	adds	r3, #4
 80017d4:	2224      	movs	r2, #36	; 0x24
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f00e fe83 	bl	80104e4 <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 80017de:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80017e2:	f6a3 2324 	subw	r3, r3, #2596	; 0xa24
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	3304      	adds	r3, #4
 80017ec:	2224      	movs	r2, #36	; 0x24
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00e fe77 	bl	80104e4 <memset>
//	int message;
//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8001802:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 8001806:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800180a:	f6a3 2378 	subw	r3, r3, #2680	; 0xa78
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	3304      	adds	r3, #4
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001822:	f000 fe50 	bl	80024c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001826:	f000 f863 	bl	80018f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800182a:	f000 fa7b 	bl	8001d24 <MX_GPIO_Init>
  MX_I2C1_Init();
 800182e:	f000 f8c5 	bl	80019bc <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8001832:	f000 f903 	bl	8001a3c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001836:	f000 f923 	bl	8001a80 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800183a:	f000 f9d5 	bl	8001be8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800183e:	f000 fa21 	bl	8001c84 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001842:	f00c f9f7 	bl	800dc34 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001846:	f00e f84f 	bl	800f8e8 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 800184a:	f000 f957 	bl	8001afc <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800184e:	f000 f8a1 	bl	8001994 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  // Initialize HAL for uart interrupts
  HAL_MspInit();
 8001852:	f000 fb41 	bl	8001ed8 <HAL_MspInit>
  // Initialize i2c2 with custom driver
  BSP_I2C2_Init();
 8001856:	f7ff fb41 	bl	8000edc <BSP_I2C2_Init>
  //Initialize msp for both uarts
  HAL_UART_MspInit(&huart1);
 800185a:	481f      	ldr	r0, [pc, #124]	; (80018d8 <main+0x1d8>)
 800185c:	f000 fca4 	bl	80021a8 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 8001860:	481e      	ldr	r0, [pc, #120]	; (80018dc <main+0x1dc>)
 8001862:	f000 fca1 	bl	80021a8 <HAL_UART_MspInit>
//	else {
//		HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
//	}


  uint8_t res = lora_init(&lora, &hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin, LORA_BASE_FREQUENCY_US);
 8001866:	f107 001c 	add.w	r0, r7, #28
 800186a:	a317      	add	r3, pc, #92	; (adr r3, 80018c8 <main+0x1c8>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	e9cd 2300 	strd	r2, r3, [sp]
 8001874:	2320      	movs	r3, #32
 8001876:	4a1a      	ldr	r2, [pc, #104]	; (80018e0 <main+0x1e0>)
 8001878:	491a      	ldr	r1, [pc, #104]	; (80018e4 <main+0x1e4>)
 800187a:	f7ff fee1 	bl	8001640 <lora_init>
 800187e:	4603      	mov	r3, r0
 8001880:	f887 3a77 	strb.w	r3, [r7, #2679]	; 0xa77
  if (res != LORA_OK) {
 8001884:	f897 3a77 	ldrb.w	r3, [r7, #2679]	; 0xa77
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <main+0x194>
	  // Initialization failed
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800188c:	2108      	movs	r1, #8
 800188e:	4816      	ldr	r0, [pc, #88]	; (80018e8 <main+0x1e8>)
 8001890:	f001 fafa 	bl	8002e88 <HAL_GPIO_TogglePin>
	}
  res = lora_send_packet(&lora, (uint8_t *)"test", 4);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	2204      	movs	r2, #4
 800189a:	4914      	ldr	r1, [pc, #80]	; (80018ec <main+0x1ec>)
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff feb0 	bl	8001602 <lora_send_packet>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f887 3a77 	strb.w	r3, [r7, #2679]	; 0xa77
      if (res != LORA_OK) {
 80018a8:	f897 3a77 	ldrb.w	r3, [r7, #2679]	; 0xa77
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <main+0x1b8>
        // Send failed
    	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80018b0:	2110      	movs	r1, #16
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <main+0x1e8>)
 80018b4:	f001 fae8 	bl	8002e88 <HAL_GPIO_TogglePin>
      }
	  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80018b8:	2120      	movs	r1, #32
 80018ba:	480b      	ldr	r0, [pc, #44]	; (80018e8 <main+0x1e8>)
 80018bc:	f001 fae4 	bl	8002e88 <HAL_GPIO_TogglePin>

  // Checking radio status

  while(1);
 80018c0:	e7fe      	b.n	80018c0 <main+0x1c0>
 80018c2:	bf00      	nop
 80018c4:	f3af 8000 	nop.w
 80018c8:	3689cac0 	.word	0x3689cac0
 80018cc:	00000000 	.word	0x00000000
 80018d0:	08012ff0 	.word	0x08012ff0
 80018d4:	00202d20 	.word	0x00202d20
 80018d8:	2000054c 	.word	0x2000054c
 80018dc:	200005dc 	.word	0x200005dc
 80018e0:	48000800 	.word	0x48000800
 80018e4:	2000049c 	.word	0x2000049c
 80018e8:	48000c00 	.word	0x48000c00
 80018ec:	08012fe8 	.word	0x08012fe8

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b096      	sub	sp, #88	; 0x58
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2244      	movs	r2, #68	; 0x44
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f00e fdf0 	bl	80104e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001912:	2000      	movs	r0, #0
 8001914:	f002 fdf2 	bl	80044fc <HAL_PWREx_ControlVoltageScaling>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800191e:	f000 fad1 	bl	8001ec4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001922:	2321      	movs	r3, #33	; 0x21
 8001924:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800192a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800192c:	2301      	movs	r3, #1
 800192e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001930:	2302      	movs	r3, #2
 8001932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001934:	2303      	movs	r3, #3
 8001936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001938:	2301      	movs	r3, #1
 800193a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800193c:	231e      	movs	r3, #30
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001940:	2302      	movs	r3, #2
 8001942:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001944:	2302      	movs	r3, #2
 8001946:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001948:	2302      	movs	r3, #2
 800194a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4618      	mov	r0, r3
 8001952:	f002 fe87 	bl	8004664 <HAL_RCC_OscConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800195c:	f000 fab2 	bl	8001ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001960:	230f      	movs	r3, #15
 8001962:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001964:	2303      	movs	r3, #3
 8001966:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	2105      	movs	r1, #5
 8001978:	4618      	mov	r0, r3
 800197a:	f003 fa8d 	bl	8004e98 <HAL_RCC_ClockConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001984:	f000 fa9e 	bl	8001ec4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001988:	f003 fc84 	bl	8005294 <HAL_RCC_EnableCSS>
}
 800198c:	bf00      	nop
 800198e:	3758      	adds	r7, #88	; 0x58
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	201a      	movs	r0, #26
 800199e:	f000 ff06 	bl	80027ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80019a2:	201a      	movs	r0, #26
 80019a4:	f000 ff1f 	bl	80027e6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	2026      	movs	r0, #38	; 0x26
 80019ae:	f000 fefe 	bl	80027ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019b2:	2026      	movs	r0, #38	; 0x26
 80019b4:	f000 ff17 	bl	80027e6 <HAL_NVIC_EnableIRQ>
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MX_I2C1_Init+0x74>)
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <MX_I2C1_Init+0x78>)
 80019c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_I2C1_Init+0x74>)
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <MX_I2C1_Init+0x7c>)
 80019ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_I2C1_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <MX_I2C1_Init+0x74>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <MX_I2C1_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_I2C1_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_I2C1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_I2C1_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_I2C1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f6:	480e      	ldr	r0, [pc, #56]	; (8001a30 <MX_I2C1_Init+0x74>)
 80019f8:	f001 fa60 	bl	8002ebc <HAL_I2C_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a02:	f000 fa5f 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a06:	2100      	movs	r1, #0
 8001a08:	4809      	ldr	r0, [pc, #36]	; (8001a30 <MX_I2C1_Init+0x74>)
 8001a0a:	f001 faf4 	bl	8002ff6 <HAL_I2CEx_ConfigAnalogFilter>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a14:	f000 fa56 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_I2C1_Init+0x74>)
 8001a1c:	f001 fb36 	bl	800308c <HAL_I2CEx_ConfigDigitalFilter>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a26:	f000 fa4d 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200003c8 	.word	0x200003c8
 8001a34:	40005400 	.word	0x40005400
 8001a38:	307075b1 	.word	0x307075b1

08001a3c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <MX_SDMMC1_SD_Init+0x3c>)
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <MX_SDMMC1_SD_Init+0x40>)
 8001a44:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_SDMMC1_SD_Init+0x3c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <MX_SDMMC1_SD_Init+0x3c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_SDMMC1_SD_Init+0x3c>)
 8001a54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a58:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <MX_SDMMC1_SD_Init+0x3c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <MX_SDMMC1_SD_Init+0x3c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <MX_SDMMC1_SD_Init+0x3c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2000041c 	.word	0x2000041c
 8001a7c:	50062400 	.word	0x50062400

08001a80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001a86:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <MX_SPI1_Init+0x78>)
 8001a88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001a8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a92:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001a9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ab6:	2228      	movs	r2, #40	; 0x28
 8001ab8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ace:	2207      	movs	r2, #7
 8001ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ada:	2208      	movs	r2, #8
 8001adc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_SPI1_Init+0x74>)
 8001ae0:	f006 fe4f 	bl	8008782 <HAL_SPI_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001aea:	f000 f9eb 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000049c 	.word	0x2000049c
 8001af8:	40013000 	.word	0x40013000

08001afc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b092      	sub	sp, #72	; 0x48
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b16:	463b      	mov	r3, r7
 8001b18:	222c      	movs	r2, #44	; 0x2c
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00e fce1 	bl	80104e4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <MX_TIM17_Init+0xe4>)
 8001b24:	4a2f      	ldr	r2, [pc, #188]	; (8001be4 <MX_TIM17_Init+0xe8>)
 8001b26:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <MX_TIM17_Init+0xe4>)
 8001b2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b2e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <MX_TIM17_Init+0xe4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <MX_TIM17_Init+0xe4>)
 8001b38:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001b3c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <MX_TIM17_Init+0xe4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b44:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <MX_TIM17_Init+0xe4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <MX_TIM17_Init+0xe4>)
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b50:	4823      	ldr	r0, [pc, #140]	; (8001be0 <MX_TIM17_Init+0xe4>)
 8001b52:	f007 febb 	bl	80098cc <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8001b5c:	f000 f9b2 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001b60:	481f      	ldr	r0, [pc, #124]	; (8001be0 <MX_TIM17_Init+0xe4>)
 8001b62:	f007 ff0a 	bl	800997a <HAL_TIM_OC_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8001b6c:	f000 f9aa 	bl	8001ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b90:	2200      	movs	r2, #0
 8001b92:	4619      	mov	r1, r3
 8001b94:	4812      	ldr	r0, [pc, #72]	; (8001be0 <MX_TIM17_Init+0xe4>)
 8001b96:	f008 f871 	bl	8009c7c <HAL_TIM_OC_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8001ba0:	f000 f990 	bl	8001ec4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	; (8001be0 <MX_TIM17_Init+0xe4>)
 8001bc8:	f008 fc74 	bl	800a4b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8001bd2:	f000 f977 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	3748      	adds	r7, #72	; 0x48
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000500 	.word	0x20000500
 8001be4:	40014800 	.word	0x40014800

08001be8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001bee:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <MX_USART1_UART_Init+0x94>)
 8001bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001bf4:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <MX_USART1_UART_Init+0x98>)
 8001bf6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c04:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c0c:	220c      	movs	r2, #12
 8001c0e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c2e:	4812      	ldr	r0, [pc, #72]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c30:	f008 fcdc 	bl	800a5ec <HAL_UART_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001c3a:	f000 f943 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c42:	f009 fe0a 	bl	800b85a <HAL_UARTEx_SetTxFifoThreshold>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001c4c:	f000 f93a 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c50:	2100      	movs	r1, #0
 8001c52:	4809      	ldr	r0, [pc, #36]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c54:	f009 fe3f 	bl	800b8d6 <HAL_UARTEx_SetRxFifoThreshold>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001c5e:	f000 f931 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_USART1_UART_Init+0x90>)
 8001c64:	f009 fdc0 	bl	800b7e8 <HAL_UARTEx_DisableFifoMode>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001c6e:	f000 f929 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000054c 	.word	0x2000054c
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	0001c138 	.word	0x0001c138

08001c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001c8a:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <MX_USART2_UART_Init+0x9c>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c8e:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001c90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001cc8:	2210      	movs	r2, #16
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001cce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cd2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd4:	4811      	ldr	r0, [pc, #68]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001cd6:	f008 fc89 	bl	800a5ec <HAL_UART_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8001ce0:	f000 f8f0 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	480d      	ldr	r0, [pc, #52]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001ce8:	f009 fdb7 	bl	800b85a <HAL_UARTEx_SetTxFifoThreshold>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8001cf2:	f000 f8e7 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4808      	ldr	r0, [pc, #32]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001cfa:	f009 fdec 	bl	800b8d6 <HAL_UARTEx_SetRxFifoThreshold>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8001d04:	f000 f8de 	bl	8001ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d08:	4804      	ldr	r0, [pc, #16]	; (8001d1c <MX_USART2_UART_Init+0x98>)
 8001d0a:	f009 fd6d 	bl	800b7e8 <HAL_UARTEx_DisableFifoMode>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8001d14:	f000 f8d6 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200005dc 	.word	0x200005dc
 8001d20:	40004400 	.word	0x40004400

08001d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3e:	4a5c      	ldr	r2, [pc, #368]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d40:	f043 0310 	orr.w	r3, r3, #16
 8001d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d46:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	4a56      	ldr	r2, [pc, #344]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5e:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6a:	4b51      	ldr	r3, [pc, #324]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	4a50      	ldr	r2, [pc, #320]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d76:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8e:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4a44      	ldr	r2, [pc, #272]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db2:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a3e      	ldr	r2, [pc, #248]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbe:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <MX_GPIO_Init+0x18c>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f641 013c 	movw	r1, #6204	; 0x183c
 8001dd0:	4838      	ldr	r0, [pc, #224]	; (8001eb4 <MX_GPIO_Init+0x190>)
 8001dd2:	f001 f841 	bl	8002e58 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2130      	movs	r1, #48	; 0x30
 8001dda:	4837      	ldr	r0, [pc, #220]	; (8001eb8 <MX_GPIO_Init+0x194>)
 8001ddc:	f001 f83c 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2178      	movs	r1, #120	; 0x78
 8001de4:	4835      	ldr	r0, [pc, #212]	; (8001ebc <MX_GPIO_Init+0x198>)
 8001de6:	f001 f837 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8001dea:	f641 033c 	movw	r3, #6204	; 0x183c
 8001dee:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	482c      	ldr	r0, [pc, #176]	; (8001eb4 <MX_GPIO_Init+0x190>)
 8001e04:	f000 fe7e 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8001e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8001e16:	f107 031c 	add.w	r3, r7, #28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4826      	ldr	r0, [pc, #152]	; (8001eb8 <MX_GPIO_Init+0x194>)
 8001e1e:	f000 fe71 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 8001e22:	f248 0302 	movw	r3, #32770	; 0x8002
 8001e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3a:	f000 fe63 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8001e3e:	2330      	movs	r3, #48	; 0x30
 8001e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e42:	2301      	movs	r3, #1
 8001e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4619      	mov	r1, r3
 8001e54:	4818      	ldr	r0, [pc, #96]	; (8001eb8 <MX_GPIO_Init+0x194>)
 8001e56:	f000 fe55 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8001e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <MX_GPIO_Init+0x190>)
 8001e70:	f000 fe48 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001e74:	2378      	movs	r3, #120	; 0x78
 8001e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480c      	ldr	r0, [pc, #48]	; (8001ebc <MX_GPIO_Init+0x198>)
 8001e8c:	f000 fe3a 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8001e90:	2320      	movs	r3, #32
 8001e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <MX_GPIO_Init+0x19c>)
 8001ea4:	f000 fe2e 	bl	8002b04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ea8:	bf00      	nop
 8001eaa:	3730      	adds	r7, #48	; 0x30
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	48001000 	.word	0x48001000
 8001eb8:	48000800 	.word	0x48000800
 8001ebc:	48000c00 	.word	0x48000c00
 8001ec0:	48000400 	.word	0x48000400

08001ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec8:	b672      	cpsid	i
}
 8001eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8001ecc:	4801      	ldr	r0, [pc, #4]	; (8001ed4 <Error_Handler+0x10>)
 8001ece:	f00f f85b 	bl	8010f88 <iprintf>
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <Error_Handler+0xe>
 8001ed4:	08013024 	.word	0x08013024

08001ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_MspInit+0x44>)
 8001eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_MspInit+0x44>)
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_MspInit+0x44>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6593      	str	r3, [r2, #88]	; 0x58
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_MspInit+0x44>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000

08001f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0ae      	sub	sp, #184	; 0xb8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	2294      	movs	r2, #148	; 0x94
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f00e facf 	bl	80104e4 <memset>
  if(hi2c->Instance==I2C1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a21      	ldr	r2, [pc, #132]	; (8001fd0 <HAL_I2C_MspInit+0xb0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d13a      	bne.n	8001fc6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f50:	2340      	movs	r3, #64	; 0x40
 8001f52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 fa85 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f68:	f7ff ffac 	bl	8001ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_I2C_MspInit+0xb4>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <HAL_I2C_MspInit+0xb4>)
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_I2C_MspInit+0xb4>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f84:	23c0      	movs	r3, #192	; 0xc0
 8001f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f8a:	2312      	movs	r3, #18
 8001f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <HAL_I2C_MspInit+0xb8>)
 8001faa:	f000 fdab 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_I2C_MspInit+0xb4>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <HAL_I2C_MspInit+0xb4>)
 8001fb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_I2C_MspInit+0xb4>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	37b8      	adds	r7, #184	; 0xb8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40005400 	.word	0x40005400
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	48000400 	.word	0x48000400

08001fdc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b0b0      	sub	sp, #192	; 0xc0
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff4:	f107 0318 	add.w	r3, r7, #24
 8001ff8:	2294      	movs	r2, #148	; 0x94
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f00e fa71 	bl	80104e4 <memset>
  if(hsd->Instance==SDMMC1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a33      	ldr	r2, [pc, #204]	; (80020d4 <HAL_SD_MspInit+0xf8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d15e      	bne.n	80020ca <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800200c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002010:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fa25 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8002028:	f7ff ff4c 	bl	8001ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_SD_MspInit+0xfc>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <HAL_SD_MspInit+0xfc>)
 8002032:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_SD_MspInit+0xfc>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_SD_MspInit+0xfc>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <HAL_SD_MspInit+0xfc>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002050:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <HAL_SD_MspInit+0xfc>)
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_SD_MspInit+0xfc>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_SD_MspInit+0xfc>)
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_SD_MspInit+0xfc>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002074:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800208e:	230c      	movs	r3, #12
 8002090:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002094:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002098:	4619      	mov	r1, r3
 800209a:	4810      	ldr	r0, [pc, #64]	; (80020dc <HAL_SD_MspInit+0x100>)
 800209c:	f000 fd32 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020a0:	2304      	movs	r3, #4
 80020a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020b8:	230c      	movs	r3, #12
 80020ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020c2:	4619      	mov	r1, r3
 80020c4:	4806      	ldr	r0, [pc, #24]	; (80020e0 <HAL_SD_MspInit+0x104>)
 80020c6:	f000 fd1d 	bl	8002b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80020ca:	bf00      	nop
 80020cc:	37c0      	adds	r7, #192	; 0xc0
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	50062400 	.word	0x50062400
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48000800 	.word	0x48000800
 80020e0:	48000c00 	.word	0x48000c00

080020e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a17      	ldr	r2, [pc, #92]	; (8002160 <HAL_SPI_MspInit+0x7c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d128      	bne.n	8002158 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_SPI_MspInit+0x80>)
 8002108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210a:	4a16      	ldr	r2, [pc, #88]	; (8002164 <HAL_SPI_MspInit+0x80>)
 800210c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002110:	6613      	str	r3, [r2, #96]	; 0x60
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_SPI_MspInit+0x80>)
 8002114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_SPI_MspInit+0x80>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <HAL_SPI_MspInit+0x80>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_SPI_MspInit+0x80>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LORA0_NSS_Pin|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 8002136:	23f0      	movs	r3, #240	; 0xf0
 8002138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002146:	2305      	movs	r3, #5
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002154:	f000 fcd6 	bl	8002b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40013000 	.word	0x40013000
 8002164:	40021000 	.word	0x40021000

08002168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_TIM_Base_MspInit+0x38>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d10b      	bne.n	8002192 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_TIM_Base_MspInit+0x3c>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002184:	6613      	str	r3, [r2, #96]	; 0x60
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40014800 	.word	0x40014800
 80021a4:	40021000 	.word	0x40021000

080021a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b0b0      	sub	sp, #192	; 0xc0
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c0:	f107 0318 	add.w	r3, r7, #24
 80021c4:	2294      	movs	r2, #148	; 0x94
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f00e f98b 	bl	80104e4 <memset>
  if(huart->Instance==USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a43      	ldr	r2, [pc, #268]	; (80022e0 <HAL_UART_MspInit+0x138>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d13d      	bne.n	8002254 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021d8:	2301      	movs	r3, #1
 80021da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021dc:	2300      	movs	r3, #0
 80021de:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e0:	f107 0318 	add.w	r3, r7, #24
 80021e4:	4618      	mov	r0, r3
 80021e6:	f003 f941 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021f0:	f7ff fe68 	bl	8001ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 80021f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f8:	4a3a      	ldr	r2, [pc, #232]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 80021fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 8002202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220c:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002210:	4a34      	ldr	r2, [pc, #208]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002218:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 800221a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8002224:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002228:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800223e:	2307      	movs	r3, #7
 8002240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002248:	4619      	mov	r1, r3
 800224a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224e:	f000 fc59 	bl	8002b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002252:	e040      	b.n	80022d6 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a23      	ldr	r2, [pc, #140]	; (80022e8 <HAL_UART_MspInit+0x140>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d13b      	bne.n	80022d6 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800225e:	2302      	movs	r3, #2
 8002260:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002262:	2300      	movs	r3, #0
 8002264:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002266:	f107 0318 	add.w	r3, r7, #24
 800226a:	4618      	mov	r0, r3
 800226c:	f003 f8fe 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8002276:	f7ff fe25 	bl	8001ec4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	6593      	str	r3, [r2, #88]	; 0x58
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_UART_MspInit+0x13c>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 80022aa:	230c      	movs	r3, #12
 80022ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022bc:	2303      	movs	r3, #3
 80022be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022c2:	2307      	movs	r3, #7
 80022c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022cc:	4619      	mov	r1, r3
 80022ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d2:	f000 fc17 	bl	8002b04 <HAL_GPIO_Init>
}
 80022d6:	bf00      	nop
 80022d8:	37c0      	adds	r7, #192	; 0xc0
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40013800 	.word	0x40013800
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40004400 	.word	0x40004400

080022ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80022f0:	f002 ffe0 	bl	80052b4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <NMI_Handler+0x8>

080022f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <HardFault_Handler+0x4>

080022fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <MemManage_Handler+0x4>

08002302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <BusFault_Handler+0x4>

08002308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <UsageFault_Handler+0x4>

0800230e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800233c:	f000 f918 	bl	8002570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
  if (tick) {tick--;}
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 800235e:	701a      	strb	r2, [r3, #0]
  if (tickGPS) {tickGPS--;}
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8002376:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 800237a:	f007 fb5f 	bl	8009a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000cb8 	.word	0x20000cb8
 8002388:	20000cb9 	.word	0x20000cb9
 800238c:	20000500 	.word	0x20000500

08002390 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

    char c = huart2.Instance->RDR;
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <USART2_IRQHandler+0x90>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800239c:	b29b      	uxth	r3, r3
 800239e:	71fb      	strb	r3, [r7, #7]
    if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <USART2_IRQHandler+0x94>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
    	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <USART2_IRQHandler+0x98>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <USART2_IRQHandler+0x94>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	1c59      	adds	r1, r3, #1
 80023b0:	b2c8      	uxtb	r0, r1
 80023b2:	491c      	ldr	r1, [pc, #112]	; (8002424 <USART2_IRQHandler+0x94>)
 80023b4:	7008      	strb	r0, [r1, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	79fa      	ldrb	r2, [r7, #7]
 80023ba:	701a      	strb	r2, [r3, #0]

    if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	2b0a      	cmp	r3, #10
 80023c0:	d126      	bne.n	8002410 <USART2_IRQHandler+0x80>
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <USART2_IRQHandler+0x9c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d022      	beq.n	8002410 <USART2_IRQHandler+0x80>
    {
    	//tickGPS = 1;
    	gps_rxBuffer[gps_rxBufferPos] = 0;
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <USART2_IRQHandler+0x98>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <USART2_IRQHandler+0x94>)
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	4413      	add	r3, r2
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
    	gps_data_ready |= 1;
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <USART2_IRQHandler+0xa0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <USART2_IRQHandler+0xa0>)
 80023e4:	6013      	str	r3, [r2, #0]
    	gps_send_ready ^= 1;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <USART2_IRQHandler+0x9c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f083 0301 	eor.w	r3, r3, #1
 80023ee:	4a0f      	ldr	r2, [pc, #60]	; (800242c <USART2_IRQHandler+0x9c>)
 80023f0:	6013      	str	r3, [r2, #0]
    	gps_rxBufferPos = 0;
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <USART2_IRQHandler+0x94>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <USART2_IRQHandler+0x98>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <USART2_IRQHandler+0xa4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d103      	bne.n	800240a <USART2_IRQHandler+0x7a>
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <USART2_IRQHandler+0x98>)
 8002404:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <USART2_IRQHandler+0xa8>)
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e002      	b.n	8002410 <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <USART2_IRQHandler+0x98>)
 800240c:	4a09      	ldr	r2, [pc, #36]	; (8002434 <USART2_IRQHandler+0xa4>)
 800240e:	601a      	str	r2, [r3, #0]

    //HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	  //rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002410:	4803      	ldr	r0, [pc, #12]	; (8002420 <USART2_IRQHandler+0x90>)
 8002412:	f008 f93b 	bl	800a68c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200005dc 	.word	0x200005dc
 8002424:	20000cb0 	.word	0x20000cb0
 8002428:	20000cac 	.word	0x20000cac
 800242c:	20000000 	.word	0x20000000
 8002430:	20000cb4 	.word	0x20000cb4
 8002434:	2000066c 	.word	0x2000066c
 8002438:	2000098c 	.word	0x2000098c

0800243c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <OTG_FS_IRQHandler+0x10>)
 8002442:	f000 ffc2 	bl	80033ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200021a8 	.word	0x200021a8

08002450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <SystemInit+0x20>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <SystemInit+0x20>)
 800245c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002478:	f7ff ffea 	bl	8002450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800247e:	490d      	ldr	r1, [pc, #52]	; (80024b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <LoopForever+0xe>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002494:	4c0a      	ldr	r4, [pc, #40]	; (80024c0 <LoopForever+0x16>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024a2:	f00d ffe5 	bl	8010470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024a6:	f7ff f92b 	bl	8001700 <main>

080024aa <LoopForever>:

LoopForever:
    b LoopForever
 80024aa:	e7fe      	b.n	80024aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024ac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 80024b8:	080134f8 	.word	0x080134f8
  ldr r2, =_sbss
 80024bc:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 80024c0:	200028e8 	.word	0x200028e8

080024c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC1_IRQHandler>

080024c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d0:	2003      	movs	r0, #3
 80024d2:	f000 f961 	bl	8002798 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d6:	200f      	movs	r0, #15
 80024d8:	f000 f80e 	bl	80024f8 <HAL_InitTick>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	71fb      	strb	r3, [r7, #7]
 80024e6:	e001      	b.n	80024ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024e8:	f7ff fcf6 	bl	8001ed8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024ec:	79fb      	ldrb	r3, [r7, #7]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_InitTick+0x6c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d023      	beq.n	8002554 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <HAL_InitTick+0x70>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_InitTick+0x6c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f96d 	bl	8002802 <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b0f      	cmp	r3, #15
 8002532:	d809      	bhi.n	8002548 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002534:	2200      	movs	r2, #0
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800253c:	f000 f937 	bl	80027ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002540:	4a0a      	ldr	r2, [pc, #40]	; (800256c <HAL_InitTick+0x74>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e007      	b.n	8002558 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e004      	b.n	8002558 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	e001      	b.n	8002558 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	2000000c 	.word	0x2000000c
 8002568:	20000004 	.word	0x20000004
 800256c:	20000008 	.word	0x20000008

08002570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_IncTick+0x20>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_IncTick+0x24>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4413      	add	r3, r2
 8002580:	4a04      	ldr	r2, [pc, #16]	; (8002594 <HAL_IncTick+0x24>)
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	2000000c 	.word	0x2000000c
 8002594:	20000cbc 	.word	0x20000cbc

08002598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return uwTick;
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_GetTick+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000cbc 	.word	0x20000cbc

080025b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7ff ffee 	bl	8002598 <HAL_GetTick>
 80025bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c8:	d005      	beq.n	80025d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_Delay+0x44>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4413      	add	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025d6:	bf00      	nop
 80025d8:	f7ff ffde 	bl	8002598 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d8f7      	bhi.n	80025d8 <HAL_Delay+0x28>
  {
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000000c 	.word	0x2000000c

080025f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <__NVIC_SetPriorityGrouping+0x44>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262a:	4a04      	ldr	r2, [pc, #16]	; (800263c <__NVIC_SetPriorityGrouping+0x44>)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	60d3      	str	r3, [r2, #12]
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <__NVIC_GetPriorityGrouping+0x18>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	f003 0307 	and.w	r3, r3, #7
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	2b00      	cmp	r3, #0
 800266c:	db0b      	blt.n	8002686 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	4907      	ldr	r1, [pc, #28]	; (8002694 <__NVIC_EnableIRQ+0x38>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2001      	movs	r0, #1
 800267e:	fa00 f202 	lsl.w	r2, r0, r2
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000e100 	.word	0xe000e100

08002698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db0a      	blt.n	80026c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	490c      	ldr	r1, [pc, #48]	; (80026e4 <__NVIC_SetPriority+0x4c>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	440b      	add	r3, r1
 80026bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c0:	e00a      	b.n	80026d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4908      	ldr	r1, [pc, #32]	; (80026e8 <__NVIC_SetPriority+0x50>)
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	3b04      	subs	r3, #4
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	440b      	add	r3, r1
 80026d6:	761a      	strb	r2, [r3, #24]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000e100 	.word	0xe000e100
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f1c3 0307 	rsb	r3, r3, #7
 8002706:	2b04      	cmp	r3, #4
 8002708:	bf28      	it	cs
 800270a:	2304      	movcs	r3, #4
 800270c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3304      	adds	r3, #4
 8002712:	2b06      	cmp	r3, #6
 8002714:	d902      	bls.n	800271c <NVIC_EncodePriority+0x30>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3b03      	subs	r3, #3
 800271a:	e000      	b.n	800271e <NVIC_EncodePriority+0x32>
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	401a      	ands	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	43d9      	mvns	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	4313      	orrs	r3, r2
         );
}
 8002746:	4618      	mov	r0, r3
 8002748:	3724      	adds	r7, #36	; 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002764:	d301      	bcc.n	800276a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002766:	2301      	movs	r3, #1
 8002768:	e00f      	b.n	800278a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <SysTick_Config+0x40>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002772:	210f      	movs	r1, #15
 8002774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002778:	f7ff ff8e 	bl	8002698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <SysTick_Config+0x40>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002782:	4b04      	ldr	r3, [pc, #16]	; (8002794 <SysTick_Config+0x40>)
 8002784:	2207      	movs	r2, #7
 8002786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	e000e010 	.word	0xe000e010

08002798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ff29 	bl	80025f8 <__NVIC_SetPriorityGrouping>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027c0:	f7ff ff3e 	bl	8002640 <__NVIC_GetPriorityGrouping>
 80027c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	6978      	ldr	r0, [r7, #20]
 80027cc:	f7ff ff8e 	bl	80026ec <NVIC_EncodePriority>
 80027d0:	4602      	mov	r2, r0
 80027d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff5d 	bl	8002698 <__NVIC_SetPriority>
}
 80027de:	bf00      	nop
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff31 	bl	800265c <__NVIC_EnableIRQ>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ffa2 	bl	8002754 <SysTick_Config>
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_DMA_Start_IT+0x20>
 8002836:	2302      	movs	r3, #2
 8002838:	e066      	b.n	8002908 <HAL_DMA_Start_IT+0xee>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d155      	bne.n	80028fa <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2202      	movs	r2, #2
 8002852:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f907 	bl	8002a86 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 020e 	orr.w	r2, r2, #14
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e00f      	b.n	80028b2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0204 	bic.w	r2, r2, #4
 80028a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 020a 	orr.w	r2, r2, #10
 80028b0:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ce:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e005      	b.n	8002906 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002902:	2302      	movs	r3, #2
 8002904:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d008      	beq.n	800293a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2204      	movs	r2, #4
 800292c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e040      	b.n	80029bc <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 020e 	bic.w	r2, r2, #14
 8002948:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002958:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f003 021c 	and.w	r2, r3, #28
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002986:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00c      	beq.n	80029aa <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800299e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d005      	beq.n	80029ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2204      	movs	r2, #4
 80029e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e047      	b.n	8002a7c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 020e 	bic.w	r2, r2, #14
 80029fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	f003 021c 	and.w	r2, r3, #28
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00c      	beq.n	8002a5c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a5a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
    }
  }
  return status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a9c:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d004      	beq.n	8002ab0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002aae:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f003 021c 	and.w	r2, r3, #28
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	2101      	movs	r1, #1
 8002abe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d108      	bne.n	8002ae6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ae4:	e007      	b.n	8002af6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	60da      	str	r2, [r3, #12]
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b12:	e166      	b.n	8002de2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8158 	beq.w	8002ddc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d005      	beq.n	8002b44 <HAL_GPIO_Init+0x40>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d130      	bne.n	8002ba6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 0201 	and.w	r2, r3, #1
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d017      	beq.n	8002be2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d123      	bne.n	8002c36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	220f      	movs	r2, #15
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	08da      	lsrs	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3208      	adds	r2, #8
 8002c30:	6939      	ldr	r1, [r7, #16]
 8002c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	2203      	movs	r2, #3
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0203 	and.w	r2, r3, #3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80b2 	beq.w	8002ddc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c78:	4b61      	ldr	r3, [pc, #388]	; (8002e00 <HAL_GPIO_Init+0x2fc>)
 8002c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7c:	4a60      	ldr	r2, [pc, #384]	; (8002e00 <HAL_GPIO_Init+0x2fc>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6613      	str	r3, [r2, #96]	; 0x60
 8002c84:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_GPIO_Init+0x2fc>)
 8002c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c90:	4a5c      	ldr	r2, [pc, #368]	; (8002e04 <HAL_GPIO_Init+0x300>)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	3302      	adds	r3, #2
 8002c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cba:	d02b      	beq.n	8002d14 <HAL_GPIO_Init+0x210>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a52      	ldr	r2, [pc, #328]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d025      	beq.n	8002d10 <HAL_GPIO_Init+0x20c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a51      	ldr	r2, [pc, #324]	; (8002e0c <HAL_GPIO_Init+0x308>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d01f      	beq.n	8002d0c <HAL_GPIO_Init+0x208>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a50      	ldr	r2, [pc, #320]	; (8002e10 <HAL_GPIO_Init+0x30c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d019      	beq.n	8002d08 <HAL_GPIO_Init+0x204>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a4f      	ldr	r2, [pc, #316]	; (8002e14 <HAL_GPIO_Init+0x310>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <HAL_GPIO_Init+0x200>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a4e      	ldr	r2, [pc, #312]	; (8002e18 <HAL_GPIO_Init+0x314>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00d      	beq.n	8002d00 <HAL_GPIO_Init+0x1fc>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a4d      	ldr	r2, [pc, #308]	; (8002e1c <HAL_GPIO_Init+0x318>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d007      	beq.n	8002cfc <HAL_GPIO_Init+0x1f8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a4c      	ldr	r2, [pc, #304]	; (8002e20 <HAL_GPIO_Init+0x31c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d101      	bne.n	8002cf8 <HAL_GPIO_Init+0x1f4>
 8002cf4:	2307      	movs	r3, #7
 8002cf6:	e00e      	b.n	8002d16 <HAL_GPIO_Init+0x212>
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	e00c      	b.n	8002d16 <HAL_GPIO_Init+0x212>
 8002cfc:	2306      	movs	r3, #6
 8002cfe:	e00a      	b.n	8002d16 <HAL_GPIO_Init+0x212>
 8002d00:	2305      	movs	r3, #5
 8002d02:	e008      	b.n	8002d16 <HAL_GPIO_Init+0x212>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e006      	b.n	8002d16 <HAL_GPIO_Init+0x212>
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e004      	b.n	8002d16 <HAL_GPIO_Init+0x212>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e002      	b.n	8002d16 <HAL_GPIO_Init+0x212>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_GPIO_Init+0x212>
 8002d14:	2300      	movs	r3, #0
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	f002 0203 	and.w	r2, r2, #3
 8002d1c:	0092      	lsls	r2, r2, #2
 8002d1e:	4093      	lsls	r3, r2
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d26:	4937      	ldr	r1, [pc, #220]	; (8002e04 <HAL_GPIO_Init+0x300>)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d34:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_GPIO_Init+0x320>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d58:	4a32      	ldr	r2, [pc, #200]	; (8002e24 <HAL_GPIO_Init+0x320>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_GPIO_Init+0x320>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d82:	4a28      	ldr	r2, [pc, #160]	; (8002e24 <HAL_GPIO_Init+0x320>)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <HAL_GPIO_Init+0x320>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <HAL_GPIO_Init+0x320>)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_GPIO_Init+0x320>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dd6:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <HAL_GPIO_Init+0x320>)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3301      	adds	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f47f ae91 	bne.w	8002b14 <HAL_GPIO_Init+0x10>
  }
}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40010000 	.word	0x40010000
 8002e08:	48000400 	.word	0x48000400
 8002e0c:	48000800 	.word	0x48000800
 8002e10:	48000c00 	.word	0x48000c00
 8002e14:	48001000 	.word	0x48001000
 8002e18:	48001400 	.word	0x48001400
 8002e1c:	48001800 	.word	0x48001800
 8002e20:	48001c00 	.word	0x48001c00
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	e001      	b.n	8002e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
 8002e64:	4613      	mov	r3, r2
 8002e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e68:	787b      	ldrb	r3, [r7, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e74:	e002      	b.n	8002e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	43d9      	mvns	r1, r3
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e081      	b.n	8002fd2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff f81c 	bl	8001f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	e006      	b.n	8002f44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d104      	bne.n	8002f56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69d9      	ldr	r1, [r3, #28]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1a      	ldr	r2, [r3, #32]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe8:	b2db      	uxtb	r3, r3
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b20      	cmp	r3, #32
 800300a:	d138      	bne.n	800307e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003016:	2302      	movs	r3, #2
 8003018:	e032      	b.n	8003080 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2224      	movs	r2, #36	; 0x24
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003048:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800307e:	2302      	movs	r3, #2
  }
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d139      	bne.n	8003116 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e033      	b.n	8003118 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003126:	b08f      	sub	sp, #60	; 0x3c
 8003128:	af0a      	add	r7, sp, #40	; 0x28
 800312a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e116      	b.n	8003364 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d106      	bne.n	8003156 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f00c fda9 	bl	800fca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2203      	movs	r2, #3
 800315a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f009 fafa 	bl	800c76e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	687e      	ldr	r6, [r7, #4]
 8003182:	466d      	mov	r5, sp
 8003184:	f106 0410 	add.w	r4, r6, #16
 8003188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800318a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800318c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800318e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003190:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003194:	e885 0003 	stmia.w	r5, {r0, r1}
 8003198:	1d33      	adds	r3, r6, #4
 800319a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800319c:	6838      	ldr	r0, [r7, #0]
 800319e:	f009 fa0d 	bl	800c5bc <USB_CoreInit>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0d7      	b.n	8003364 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f009 fae8 	bl	800c790 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	e04a      	b.n	800325c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	333d      	adds	r3, #61	; 0x3d
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	333c      	adds	r3, #60	; 0x3c
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	b298      	uxth	r0, r3
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3344      	adds	r3, #68	; 0x44
 8003202:	4602      	mov	r2, r0
 8003204:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3340      	adds	r3, #64	; 0x40
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	3348      	adds	r3, #72	; 0x48
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	334c      	adds	r3, #76	; 0x4c
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	3354      	adds	r3, #84	; 0x54
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	3301      	adds	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	429a      	cmp	r2, r3
 8003264:	d3af      	bcc.n	80031c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	e044      	b.n	80032f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800326c:	7bfa      	ldrb	r2, [r7, #15]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	3301      	adds	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
 80032f6:	7bfa      	ldrb	r2, [r7, #15]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3b5      	bcc.n	800326c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	687e      	ldr	r6, [r7, #4]
 8003308:	466d      	mov	r5, sp
 800330a:	f106 0410 	add.w	r4, r6, #16
 800330e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003316:	e894 0003 	ldmia.w	r4, {r0, r1}
 800331a:	e885 0003 	stmia.w	r5, {r0, r1}
 800331e:	1d33      	adds	r3, r6, #4
 8003320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003322:	6838      	ldr	r0, [r7, #0]
 8003324:	f009 fa80 	bl	800c828 <USB_DevInit>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e014      	b.n	8003364 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b01      	cmp	r3, #1
 8003350:	d102      	bne.n	8003358 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f001 f882 	bl	800445c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f00a fb08 	bl	800d972 <USB_DevDisconnect>

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800336c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_PCD_Start+0x1c>
 8003384:	2302      	movs	r3, #2
 8003386:	e01c      	b.n	80033c2 <HAL_PCD_Start+0x56>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f009 f9cf 	bl	800c74c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f00a fabc 	bl	800d930 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033ca:	b590      	push	{r4, r7, lr}
 80033cc:	b08d      	sub	sp, #52	; 0x34
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f00a fb7a 	bl	800dada <USB_GetMode>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 847e 	bne.w	8003cea <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f00a fade 	bl	800d9b4 <USB_ReadInterrupts>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8474 	beq.w	8003ce8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f00a facb 	bl	800d9b4 <USB_ReadInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d107      	bne.n	8003438 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f002 0202 	and.w	r2, r2, #2
 8003436:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f00a fab9 	bl	800d9b4 <USB_ReadInterrupts>
 8003442:	4603      	mov	r3, r0
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b10      	cmp	r3, #16
 800344a:	d161      	bne.n	8003510 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0210 	bic.w	r2, r2, #16
 800345a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f003 020f 	and.w	r2, r3, #15
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	3304      	adds	r3, #4
 800347a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	0c5b      	lsrs	r3, r3, #17
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	2b02      	cmp	r3, #2
 8003486:	d124      	bne.n	80034d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d035      	beq.n	8003500 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800349e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	6a38      	ldr	r0, [r7, #32]
 80034a8:	f00a f8f0 	bl	800d68c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034b8:	441a      	add	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	6a1a      	ldr	r2, [r3, #32]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ca:	441a      	add	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	621a      	str	r2, [r3, #32]
 80034d0:	e016      	b.n	8003500 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	0c5b      	lsrs	r3, r3, #17
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d110      	bne.n	8003500 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e4:	2208      	movs	r2, #8
 80034e6:	4619      	mov	r1, r3
 80034e8:	6a38      	ldr	r0, [r7, #32]
 80034ea:	f00a f8cf 	bl	800d68c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	6a1a      	ldr	r2, [r3, #32]
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034fa:	441a      	add	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0210 	orr.w	r2, r2, #16
 800350e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f00a fa4d 	bl	800d9b4 <USB_ReadInterrupts>
 800351a:	4603      	mov	r3, r0
 800351c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003520:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003524:	f040 80a7 	bne.w	8003676 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f00a fa52 	bl	800d9da <USB_ReadDevAllOutEpInterrupt>
 8003536:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003538:	e099      	b.n	800366e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 808e 	beq.w	8003662 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f00a fa76 	bl	800da42 <USB_ReadDevOutEPInterrupt>
 8003556:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356e:	461a      	mov	r2, r3
 8003570:	2301      	movs	r3, #1
 8003572:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fe96 	bl	80042a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00c      	beq.n	80035a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003592:	461a      	mov	r2, r3
 8003594:	2308      	movs	r3, #8
 8003596:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fed2 	bl	8004344 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d008      	beq.n	80035bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b6:	461a      	mov	r2, r3
 80035b8:	2310      	movs	r3, #16
 80035ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d030      	beq.n	8003628 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ce:	2b80      	cmp	r3, #128	; 0x80
 80035d0:	d109      	bne.n	80035e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4413      	add	r3, r2
 80035f8:	3304      	adds	r3, #4
 80035fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	78db      	ldrb	r3, [r3, #3]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2200      	movs	r2, #0
 8003608:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	b2db      	uxtb	r3, r3
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f00c fc8d 	bl	800ff30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003622:	461a      	mov	r2, r3
 8003624:	2302      	movs	r3, #2
 8003626:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363e:	461a      	mov	r2, r3
 8003640:	2320      	movs	r3, #32
 8003642:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365a:	461a      	mov	r2, r3
 800365c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003660:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	3301      	adds	r3, #1
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	f47f af62 	bne.w	800353a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f00a f99a 	bl	800d9b4 <USB_ReadInterrupts>
 8003680:	4603      	mov	r3, r0
 8003682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003686:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800368a:	f040 80a4 	bne.w	80037d6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f00a f9bb 	bl	800da0e <USB_ReadDevAllInEpInterrupt>
 8003698:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800369e:	e096      	b.n	80037ce <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 808b 	beq.w	80037c2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f00a f9e1 	bl	800da7e <USB_ReadDevInEPInterrupt>
 80036bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	2201      	movs	r2, #1
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69f9      	ldr	r1, [r7, #28]
 80036e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036e8:	4013      	ands	r3, r2
 80036ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f8:	461a      	mov	r2, r3
 80036fa:	2301      	movs	r3, #1
 80036fc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	b2db      	uxtb	r3, r3
 8003702:	4619      	mov	r1, r3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f00c fb7e 	bl	800fe06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003720:	461a      	mov	r2, r3
 8003722:	2308      	movs	r3, #8
 8003724:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373c:	461a      	mov	r2, r3
 800373e:	2310      	movs	r3, #16
 8003740:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003758:	461a      	mov	r2, r3
 800375a:	2340      	movs	r3, #64	; 0x40
 800375c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d023      	beq.n	80037b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800376a:	6a38      	ldr	r0, [r7, #32]
 800376c:	f009 f9a8 	bl	800cac0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	3338      	adds	r3, #56	; 0x38
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	3304      	adds	r3, #4
 8003782:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	78db      	ldrb	r3, [r3, #3]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d108      	bne.n	800379e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2200      	movs	r2, #0
 8003790:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	b2db      	uxtb	r3, r3
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f00c fbdb 	bl	800ff54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037aa:	461a      	mov	r2, r3
 80037ac:	2302      	movs	r3, #2
 80037ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fcea 	bl	8004196 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	3301      	adds	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f47f af65 	bne.w	80036a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f00a f8ea 	bl	800d9b4 <USB_ReadInterrupts>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ea:	d122      	bne.n	8003832 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003806:	2b01      	cmp	r3, #1
 8003808:	d108      	bne.n	800381c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003812:	2100      	movs	r1, #0
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fe45 	bl	80044a4 <HAL_PCDEx_LPM_Callback>
 800381a:	e002      	b.n	8003822 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f00c fb5f 	bl	800fee0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f00a f8bc 	bl	800d9b4 <USB_ReadInterrupts>
 800383c:	4603      	mov	r3, r0
 800383e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003846:	d112      	bne.n	800386e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d102      	bne.n	800385e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f00c fb1b 	bl	800fe94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800386c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f00a f89e 	bl	800d9b4 <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800387e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003882:	d121      	bne.n	80038c8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003892:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800389a:	2b00      	cmp	r3, #0
 800389c:	d111      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	f003 020f 	and.w	r2, r3, #15
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038b8:	2101      	movs	r1, #1
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fdf2 	bl	80044a4 <HAL_PCDEx_LPM_Callback>
 80038c0:	e002      	b.n	80038c8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f00c fae6 	bl	800fe94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f00a f871 	bl	800d9b4 <USB_ReadInterrupts>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038dc:	f040 80b5 	bne.w	8003a4a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2110      	movs	r1, #16
 80038fa:	4618      	mov	r0, r3
 80038fc:	f009 f8e0 	bl	800cac0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003900:	2300      	movs	r3, #0
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003904:	e046      	b.n	8003994 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	461a      	mov	r2, r3
 8003914:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003918:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800392a:	0151      	lsls	r1, r2, #5
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	440a      	add	r2, r1
 8003930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003934:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003938:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003946:	461a      	mov	r2, r3
 8003948:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800394c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395e:	0151      	lsls	r1, r2, #5
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	440a      	add	r2, r1
 8003964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003968:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800396c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800397e:	0151      	lsls	r1, r2, #5
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	440a      	add	r2, r1
 8003984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003988:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800398c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003990:	3301      	adds	r3, #1
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800399a:	429a      	cmp	r2, r3
 800399c:	d3b3      	bcc.n	8003906 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d016      	beq.n	80039e8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ca:	f043 030b 	orr.w	r3, r3, #11
 80039ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e0:	f043 030b 	orr.w	r3, r3, #11
 80039e4:	6453      	str	r3, [r2, #68]	; 0x44
 80039e6:	e015      	b.n	8003a14 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80039fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0e:	f043 030b 	orr.w	r3, r3, #11
 8003a12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f00a f881 	bl	800db3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f009 ffb0 	bl	800d9b4 <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5e:	d124      	bne.n	8003aaa <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f00a f846 	bl	800daf6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f009 f8a3 	bl	800cbba <USB_GetDevSpeed>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681c      	ldr	r4, [r3, #0]
 8003a80:	f001 fbd0 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 8003a84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f008 fdc0 	bl	800c614 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f00c f9de 	bl	800fe56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f009 ff80 	bl	800d9b4 <USB_ReadInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d10a      	bne.n	8003ad4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f00c f9bb 	bl	800fe3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f002 0208 	and.w	r2, r2, #8
 8003ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f009 ff6b 	bl	800d9b4 <USB_ReadInterrupts>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	d122      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af4:	2301      	movs	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
 8003af8:	e014      	b.n	8003b24 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d105      	bne.n	8003b1e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fb0b 	bl	8004134 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	3301      	adds	r3, #1
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d3e5      	bcc.n	8003afa <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f009 ff3e 	bl	800d9b4 <USB_ReadInterrupts>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b42:	d13b      	bne.n	8003bbc <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b44:	2301      	movs	r3, #1
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
 8003b48:	e02b      	b.n	8003ba2 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	3340      	adds	r3, #64	; 0x40
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d115      	bne.n	8003b9c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	da12      	bge.n	8003b9c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	333f      	adds	r3, #63	; 0x3f
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 facc 	bl	8004134 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d3ce      	bcc.n	8003b4a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f009 fef7 	bl	800d9b4 <USB_ReadInterrupts>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bd0:	d155      	bne.n	8003c7e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd6:	e045      	b.n	8003c64 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d12e      	bne.n	8003c5e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	da2b      	bge.n	8003c5e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d121      	bne.n	8003c5e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c5a:	6053      	str	r3, [r2, #4]
            break;
 8003c5c:	e007      	b.n	8003c6e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	3301      	adds	r3, #1
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d3b4      	bcc.n	8003bd8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f009 fe96 	bl	800d9b4 <USB_ReadInterrupts>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d10a      	bne.n	8003caa <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f00c f96f 	bl	800ff78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f009 fe80 	bl	800d9b4 <USB_ReadInterrupts>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d115      	bne.n	8003cea <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f00c f95f 	bl	800ff94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	e000      	b.n	8003cea <HAL_PCD_IRQHandler+0x920>
      return;
 8003ce8:	bf00      	nop
    }
  }
}
 8003cea:	3734      	adds	r7, #52	; 0x34
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd90      	pop	{r4, r7, pc}

08003cf0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_PCD_SetAddress+0x1a>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e013      	b.n	8003d32 <HAL_PCD_SetAddress+0x42>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f009 fdde 	bl	800d8e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	4608      	mov	r0, r1
 8003d44:	4611      	mov	r1, r2
 8003d46:	461a      	mov	r2, r3
 8003d48:	4603      	mov	r3, r0
 8003d4a:	70fb      	strb	r3, [r7, #3]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	803b      	strh	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	da0f      	bge.n	8003d80 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	f003 020f 	and.w	r2, r3, #15
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	3338      	adds	r3, #56	; 0x38
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	3304      	adds	r3, #4
 8003d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	705a      	strb	r2, [r3, #1]
 8003d7e:	e00f      	b.n	8003da0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	3304      	adds	r3, #4
 8003d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dac:	883a      	ldrh	r2, [r7, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	78ba      	ldrb	r2, [r7, #2]
 8003db6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d004      	beq.n	8003dca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dca:	78bb      	ldrb	r3, [r7, #2]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d102      	bne.n	8003dd6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_PCD_EP_Open+0xaa>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e00e      	b.n	8003e02 <HAL_PCD_EP_Open+0xc8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68f9      	ldr	r1, [r7, #12]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f008 ff00 	bl	800cbf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e00:	7afb      	ldrb	r3, [r7, #11]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	da0f      	bge.n	8003e3e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	f003 020f 	and.w	r2, r3, #15
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	3338      	adds	r3, #56	; 0x38
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4413      	add	r3, r2
 8003e32:	3304      	adds	r3, #4
 8003e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	705a      	strb	r2, [r3, #1]
 8003e3c:	e00f      	b.n	8003e5e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	f003 020f 	and.w	r2, r3, #15
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	3304      	adds	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_PCD_EP_Close+0x6e>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e00e      	b.n	8003e96 <HAL_PCD_EP_Close+0x8c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68f9      	ldr	r1, [r7, #12]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f008 ff3e 	bl	800cd08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eae:	7afb      	ldrb	r3, [r7, #11]
 8003eb0:	f003 020f 	and.w	r2, r3, #15
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2200      	movs	r2, #0
 8003ede:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eec:	7afb      	ldrb	r3, [r7, #11]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6979      	ldr	r1, [r7, #20]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f009 f9bf 	bl	800d280 <USB_EP0StartXfer>
 8003f02:	e005      	b.n	8003f10 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6979      	ldr	r1, [r7, #20]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f008 ffd8 	bl	800cec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 020f 	and.w	r2, r3, #15
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003f3c:	681b      	ldr	r3, [r3, #0]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	460b      	mov	r3, r1
 8003f58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	3338      	adds	r3, #56	; 0x38
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3304      	adds	r3, #4
 8003f70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2201      	movs	r2, #1
 8003f88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f96:	7afb      	ldrb	r3, [r7, #11]
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f009 f96a 	bl	800d280 <USB_EP0StartXfer>
 8003fac:	e005      	b.n	8003fba <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6979      	ldr	r1, [r7, #20]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f008 ff83 	bl	800cec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d901      	bls.n	8003fe2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e04e      	b.n	8004080 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	da0f      	bge.n	800400a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	f003 020f 	and.w	r2, r3, #15
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	3338      	adds	r3, #56	; 0x38
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3304      	adds	r3, #4
 8004000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	705a      	strb	r2, [r3, #1]
 8004008:	e00d      	b.n	8004026 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4413      	add	r3, r2
 800401c:	3304      	adds	r3, #4
 800401e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_PCD_EP_SetStall+0x82>
 8004042:	2302      	movs	r3, #2
 8004044:	e01c      	b.n	8004080 <HAL_PCD_EP_SetStall+0xbc>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	4618      	mov	r0, r3
 8004056:	f009 fb71 	bl	800d73c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	2b00      	cmp	r3, #0
 8004062:	d108      	bne.n	8004076 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f009 fd63 	bl	800db3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 020f 	and.w	r2, r3, #15
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d901      	bls.n	80040a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e042      	b.n	800412c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	da0f      	bge.n	80040ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	f003 020f 	and.w	r2, r3, #15
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	3338      	adds	r3, #56	; 0x38
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	705a      	strb	r2, [r3, #1]
 80040cc:	e00f      	b.n	80040ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4413      	add	r3, r2
 80040e4:	3304      	adds	r3, #4
 80040e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_PCD_EP_ClrStall+0x86>
 800410a:	2302      	movs	r3, #2
 800410c:	e00e      	b.n	800412c <HAL_PCD_EP_ClrStall+0xa4>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68f9      	ldr	r1, [r7, #12]
 800411c:	4618      	mov	r0, r3
 800411e:	f009 fb7b 	bl	800d818 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004144:	2b00      	cmp	r3, #0
 8004146:	da0c      	bge.n	8004162 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	f003 020f 	and.w	r2, r3, #15
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	3338      	adds	r3, #56	; 0x38
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	3304      	adds	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e00c      	b.n	800417c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	3304      	adds	r3, #4
 800417a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68f9      	ldr	r1, [r7, #12]
 8004182:	4618      	mov	r0, r3
 8004184:	f009 f99e 	bl	800d4c4 <USB_EPStopXfer>
 8004188:	4603      	mov	r3, r0
 800418a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800418c:	7afb      	ldrb	r3, [r7, #11]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b088      	sub	sp, #32
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	3338      	adds	r3, #56	; 0x38
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	3304      	adds	r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1a      	ldr	r2, [r3, #32]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d901      	bls.n	80041ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e067      	b.n	800429e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d902      	bls.n	80041ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	3303      	adds	r3, #3
 80041ee:	089b      	lsrs	r3, r3, #2
 80041f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041f2:	e026      	b.n	8004242 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	699a      	ldr	r2, [r3, #24]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	429a      	cmp	r2, r3
 8004208:	d902      	bls.n	8004210 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3303      	adds	r3, #3
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6919      	ldr	r1, [r3, #16]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	b29b      	uxth	r3, r3
 8004224:	6978      	ldr	r0, [r7, #20]
 8004226:	f009 f9f7 	bl	800d618 <USB_WritePacket>

    ep->xfer_buff  += len;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	441a      	add	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1a      	ldr	r2, [r3, #32]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	441a      	add	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	b29b      	uxth	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	429a      	cmp	r2, r3
 8004256:	d809      	bhi.n	800426c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1a      	ldr	r2, [r3, #32]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004260:	429a      	cmp	r2, r3
 8004262:	d203      	bcs.n	800426c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1c3      	bne.n	80041f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	429a      	cmp	r2, r3
 8004276:	d811      	bhi.n	800429c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	2201      	movs	r2, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	43db      	mvns	r3, r3
 8004292:	6939      	ldr	r1, [r7, #16]
 8004294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004298:	4013      	ands	r3, r2
 800429a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	333c      	adds	r3, #60	; 0x3c
 80042c0:	3304      	adds	r3, #4
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a19      	ldr	r2, [pc, #100]	; (8004340 <PCD_EP_OutXfrComplete_int+0x98>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d124      	bne.n	8004328 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	461a      	mov	r2, r3
 80042f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fa:	6093      	str	r3, [r2, #8]
 80042fc:	e01a      	b.n	8004334 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004314:	461a      	mov	r2, r3
 8004316:	2320      	movs	r3, #32
 8004318:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f00b fd55 	bl	800fdd0 <HAL_PCD_DataOutStageCallback>
 8004326:	e005      	b.n	8004334 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f00b fd4e 	bl	800fdd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	4f54310a 	.word	0x4f54310a

08004344 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	333c      	adds	r3, #60	; 0x3c
 800435c:	3304      	adds	r3, #4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a0c      	ldr	r2, [pc, #48]	; (80043a8 <PCD_EP_OutSetupPacket_int+0x64>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d90e      	bls.n	8004398 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	461a      	mov	r2, r3
 8004392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004396:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f00b fd07 	bl	800fdac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	4f54300a 	.word	0x4f54300a

080043ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
 80043b8:	4613      	mov	r3, r2
 80043ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d107      	bne.n	80043da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043ca:	883b      	ldrh	r3, [r7, #0]
 80043cc:	0419      	lsls	r1, r3, #16
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
 80043d8:	e028      	b.n	800442c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	4413      	add	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
 80043ec:	e00d      	b.n	800440a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	3340      	adds	r3, #64	; 0x40
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4413      	add	r3, r2
 8004402:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	3301      	adds	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	7bfa      	ldrb	r2, [r7, #15]
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	3b01      	subs	r3, #1
 8004410:	429a      	cmp	r2, r3
 8004412:	d3ec      	bcc.n	80043ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004414:	883b      	ldrh	r3, [r7, #0]
 8004416:	0418      	lsls	r0, r3, #16
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6819      	ldr	r1, [r3, #0]
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	3b01      	subs	r3, #1
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	4302      	orrs	r2, r0
 8004424:	3340      	adds	r3, #64	; 0x40
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	887a      	ldrh	r2, [r7, #2]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	f043 0303 	orr.w	r3, r3, #3
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044c0:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044cc:	d102      	bne.n	80044d4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80044ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d2:	e00b      	b.n	80044ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80044d4:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80044d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e2:	d102      	bne.n	80044ea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80044e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044e8:	e000      	b.n	80044ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80044ea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40007000 	.word	0x40007000

080044fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d141      	bne.n	800458e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800450a:	4b4b      	ldr	r3, [pc, #300]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004516:	d131      	bne.n	800457c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004518:	4b47      	ldr	r3, [pc, #284]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800451e:	4a46      	ldr	r2, [pc, #280]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004524:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004528:	4b43      	ldr	r3, [pc, #268]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004530:	4a41      	ldr	r2, [pc, #260]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004536:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004538:	4b40      	ldr	r3, [pc, #256]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2232      	movs	r2, #50	; 0x32
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	4a3f      	ldr	r2, [pc, #252]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	0c9b      	lsrs	r3, r3, #18
 800454a:	3301      	adds	r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800454e:	e002      	b.n	8004556 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3b01      	subs	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004556:	4b38      	ldr	r3, [pc, #224]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004562:	d102      	bne.n	800456a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f2      	bne.n	8004550 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800456a:	4b33      	ldr	r3, [pc, #204]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004576:	d158      	bne.n	800462a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e057      	b.n	800462c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800457c:	4b2e      	ldr	r3, [pc, #184]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004582:	4a2d      	ldr	r2, [pc, #180]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004588:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800458c:	e04d      	b.n	800462a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004594:	d141      	bne.n	800461a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004596:	4b28      	ldr	r3, [pc, #160]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800459e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a2:	d131      	bne.n	8004608 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045a4:	4b24      	ldr	r3, [pc, #144]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045aa:	4a23      	ldr	r2, [pc, #140]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045b4:	4b20      	ldr	r3, [pc, #128]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045bc:	4a1e      	ldr	r2, [pc, #120]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2232      	movs	r2, #50	; 0x32
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	4a1c      	ldr	r2, [pc, #112]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	0c9b      	lsrs	r3, r3, #18
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045da:	e002      	b.n	80045e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3b01      	subs	r3, #1
 80045e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045e2:	4b15      	ldr	r3, [pc, #84]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ee:	d102      	bne.n	80045f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f2      	bne.n	80045dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004602:	d112      	bne.n	800462a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e011      	b.n	800462c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800460a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460e:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004614:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004618:	e007      	b.n	800462a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004622:	4a05      	ldr	r2, [pc, #20]	; (8004638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004628:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	40007000 	.word	0x40007000
 800463c:	20000004 	.word	0x20000004
 8004640:	431bde83 	.word	0x431bde83

08004644 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_PWREx_EnableVddUSB+0x1c>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4a04      	ldr	r2, [pc, #16]	; (8004660 <HAL_PWREx_EnableVddUSB+0x1c>)
 800464e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004652:	6053      	str	r3, [r2, #4]
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40007000 	.word	0x40007000

08004664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f000 bc08 	b.w	8004e88 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004678:	4b96      	ldr	r3, [pc, #600]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 030c 	and.w	r3, r3, #12
 8004680:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004682:	4b94      	ldr	r3, [pc, #592]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80e4 	beq.w	8004862 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <HAL_RCC_OscConfig+0x4c>
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	f040 808b 	bne.w	80047be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	f040 8087 	bne.w	80047be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046b0:	4b88      	ldr	r3, [pc, #544]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_RCC_OscConfig+0x64>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e3df      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1a      	ldr	r2, [r3, #32]
 80046cc:	4b81      	ldr	r3, [pc, #516]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <HAL_RCC_OscConfig+0x7e>
 80046d8:	4b7e      	ldr	r3, [pc, #504]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e0:	e005      	b.n	80046ee <HAL_RCC_OscConfig+0x8a>
 80046e2:	4b7c      	ldr	r3, [pc, #496]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80046e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d223      	bcs.n	800473a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fdf8 	bl	80052ec <RCC_SetFlashLatencyFromMSIRange>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e3c0      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004706:	4b73      	ldr	r3, [pc, #460]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a72      	ldr	r2, [pc, #456]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 800470c:	f043 0308 	orr.w	r3, r3, #8
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	4b70      	ldr	r3, [pc, #448]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	496d      	ldr	r1, [pc, #436]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004724:	4b6b      	ldr	r3, [pc, #428]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	4968      	ldr	r1, [pc, #416]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004734:	4313      	orrs	r3, r2
 8004736:	604b      	str	r3, [r1, #4]
 8004738:	e025      	b.n	8004786 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800473a:	4b66      	ldr	r3, [pc, #408]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a65      	ldr	r2, [pc, #404]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004740:	f043 0308 	orr.w	r3, r3, #8
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4b63      	ldr	r3, [pc, #396]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	4960      	ldr	r1, [pc, #384]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004754:	4313      	orrs	r3, r2
 8004756:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004758:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	495b      	ldr	r1, [pc, #364]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fdb8 	bl	80052ec <RCC_SetFlashLatencyFromMSIRange>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e380      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004786:	f000 fcc1 	bl	800510c <HAL_RCC_GetSysClockFreq>
 800478a:	4602      	mov	r2, r0
 800478c:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	4950      	ldr	r1, [pc, #320]	; (80048d8 <HAL_RCC_OscConfig+0x274>)
 8004798:	5ccb      	ldrb	r3, [r1, r3]
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	fa22 f303 	lsr.w	r3, r2, r3
 80047a2:	4a4e      	ldr	r2, [pc, #312]	; (80048dc <HAL_RCC_OscConfig+0x278>)
 80047a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047a6:	4b4e      	ldr	r3, [pc, #312]	; (80048e0 <HAL_RCC_OscConfig+0x27c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fd fea4 	bl	80024f8 <HAL_InitTick>
 80047b0:	4603      	mov	r3, r0
 80047b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d052      	beq.n	8004860 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	e364      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d032      	beq.n	800482c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047c6:	4b43      	ldr	r3, [pc, #268]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a42      	ldr	r2, [pc, #264]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047d2:	f7fd fee1 	bl	8002598 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047da:	f7fd fedd 	bl	8002598 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e34d      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047ec:	4b39      	ldr	r3, [pc, #228]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f0      	beq.n	80047da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047f8:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a35      	ldr	r2, [pc, #212]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80047fe:	f043 0308 	orr.w	r3, r3, #8
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4930      	ldr	r1, [pc, #192]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004812:	4313      	orrs	r3, r2
 8004814:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004816:	4b2f      	ldr	r3, [pc, #188]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	492b      	ldr	r1, [pc, #172]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004826:	4313      	orrs	r3, r2
 8004828:	604b      	str	r3, [r1, #4]
 800482a:	e01a      	b.n	8004862 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800482c:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a28      	ldr	r2, [pc, #160]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004838:	f7fd feae 	bl	8002598 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004840:	f7fd feaa 	bl	8002598 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e31a      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004852:	4b20      	ldr	r3, [pc, #128]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x1dc>
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004860:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d073      	beq.n	8004956 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d005      	beq.n	8004880 <HAL_RCC_OscConfig+0x21c>
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b0c      	cmp	r3, #12
 8004878:	d10e      	bne.n	8004898 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b03      	cmp	r3, #3
 800487e:	d10b      	bne.n	8004898 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d063      	beq.n	8004954 <HAL_RCC_OscConfig+0x2f0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d15f      	bne.n	8004954 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e2f7      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a0:	d106      	bne.n	80048b0 <HAL_RCC_OscConfig+0x24c>
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e025      	b.n	80048fc <HAL_RCC_OscConfig+0x298>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b8:	d114      	bne.n	80048e4 <HAL_RCC_OscConfig+0x280>
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a05      	ldr	r2, [pc, #20]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80048c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a02      	ldr	r2, [pc, #8]	; (80048d4 <HAL_RCC_OscConfig+0x270>)
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e013      	b.n	80048fc <HAL_RCC_OscConfig+0x298>
 80048d4:	40021000 	.word	0x40021000
 80048d8:	08013084 	.word	0x08013084
 80048dc:	20000004 	.word	0x20000004
 80048e0:	20000008 	.word	0x20000008
 80048e4:	4ba0      	ldr	r3, [pc, #640]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a9f      	ldr	r2, [pc, #636]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 80048ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b9d      	ldr	r3, [pc, #628]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a9c      	ldr	r2, [pc, #624]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 80048f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d013      	beq.n	800492c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fd fe48 	bl	8002598 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800490c:	f7fd fe44 	bl	8002598 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e2b4      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800491e:	4b92      	ldr	r3, [pc, #584]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x2a8>
 800492a:	e014      	b.n	8004956 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fd fe34 	bl	8002598 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004934:	f7fd fe30 	bl	8002598 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e2a0      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004946:	4b88      	ldr	r3, [pc, #544]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x2d0>
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d060      	beq.n	8004a24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b04      	cmp	r3, #4
 8004966:	d005      	beq.n	8004974 <HAL_RCC_OscConfig+0x310>
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d119      	bne.n	80049a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d116      	bne.n	80049a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004974:	4b7c      	ldr	r3, [pc, #496]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_OscConfig+0x328>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e27d      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498c:	4b76      	ldr	r3, [pc, #472]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	061b      	lsls	r3, r3, #24
 800499a:	4973      	ldr	r1, [pc, #460]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 800499c:	4313      	orrs	r3, r2
 800499e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049a0:	e040      	b.n	8004a24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d023      	beq.n	80049f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049aa:	4b6f      	ldr	r3, [pc, #444]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a6e      	ldr	r2, [pc, #440]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 80049b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b6:	f7fd fdef 	bl	8002598 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049be:	f7fd fdeb 	bl	8002598 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e25b      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049d0:	4b65      	ldr	r3, [pc, #404]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049dc:	4b62      	ldr	r3, [pc, #392]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	061b      	lsls	r3, r3, #24
 80049ea:	495f      	ldr	r1, [pc, #380]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]
 80049f0:	e018      	b.n	8004a24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049f2:	4b5d      	ldr	r3, [pc, #372]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a5c      	ldr	r2, [pc, #368]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 80049f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fe:	f7fd fdcb 	bl	8002598 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a06:	f7fd fdc7 	bl	8002598 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e237      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a18:	4b53      	ldr	r3, [pc, #332]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f0      	bne.n	8004a06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d03c      	beq.n	8004aaa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01c      	beq.n	8004a72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a38:	4b4b      	ldr	r3, [pc, #300]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a3e:	4a4a      	ldr	r2, [pc, #296]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7fd fda6 	bl	8002598 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a50:	f7fd fda2 	bl	8002598 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e212      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a62:	4b41      	ldr	r3, [pc, #260]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ef      	beq.n	8004a50 <HAL_RCC_OscConfig+0x3ec>
 8004a70:	e01b      	b.n	8004aaa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a72:	4b3d      	ldr	r3, [pc, #244]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a78:	4a3b      	ldr	r2, [pc, #236]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a82:	f7fd fd89 	bl	8002598 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8a:	f7fd fd85 	bl	8002598 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e1f5      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a9c:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ef      	bne.n	8004a8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80a6 	beq.w	8004c04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004abc:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10d      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac8:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	4a26      	ldr	r2, [pc, #152]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad4:	4b24      	ldr	r3, [pc, #144]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae4:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <HAL_RCC_OscConfig+0x508>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d118      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004af0:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <HAL_RCC_OscConfig+0x508>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <HAL_RCC_OscConfig+0x508>)
 8004af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004afc:	f7fd fd4c 	bl	8002598 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b04:	f7fd fd48 	bl	8002598 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e1b8      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <HAL_RCC_OscConfig+0x508>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d108      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4d8>
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b3a:	e029      	b.n	8004b90 <HAL_RCC_OscConfig+0x52c>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b05      	cmp	r3, #5
 8004b42:	d115      	bne.n	8004b70 <HAL_RCC_OscConfig+0x50c>
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	4a07      	ldr	r2, [pc, #28]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004b4c:	f043 0304 	orr.w	r3, r3, #4
 8004b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	4a03      	ldr	r2, [pc, #12]	; (8004b68 <HAL_RCC_OscConfig+0x504>)
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b64:	e014      	b.n	8004b90 <HAL_RCC_OscConfig+0x52c>
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40007000 	.word	0x40007000
 8004b70:	4b9d      	ldr	r3, [pc, #628]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	4a9c      	ldr	r2, [pc, #624]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b80:	4b99      	ldr	r3, [pc, #612]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	4a98      	ldr	r2, [pc, #608]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004b88:	f023 0304 	bic.w	r3, r3, #4
 8004b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d016      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b98:	f7fd fcfe 	bl	8002598 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba0:	f7fd fcfa 	bl	8002598 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e168      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb6:	4b8c      	ldr	r3, [pc, #560]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0ed      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x53c>
 8004bc4:	e015      	b.n	8004bf2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fd fce7 	bl	8002598 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fd fce3 	bl	8002598 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e151      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004be4:	4b80      	ldr	r3, [pc, #512]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1ed      	bne.n	8004bce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf2:	7ffb      	ldrb	r3, [r7, #31]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d105      	bne.n	8004c04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf8:	4b7b      	ldr	r3, [pc, #492]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfc:	4a7a      	ldr	r2, [pc, #488]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d03c      	beq.n	8004c8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01c      	beq.n	8004c52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c18:	4b73      	ldr	r3, [pc, #460]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c1e:	4a72      	ldr	r2, [pc, #456]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c28:	f7fd fcb6 	bl	8002598 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c30:	f7fd fcb2 	bl	8002598 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e122      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c42:	4b69      	ldr	r3, [pc, #420]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0ef      	beq.n	8004c30 <HAL_RCC_OscConfig+0x5cc>
 8004c50:	e01b      	b.n	8004c8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c52:	4b65      	ldr	r3, [pc, #404]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c58:	4a63      	ldr	r2, [pc, #396]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c62:	f7fd fc99 	bl	8002598 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c6a:	f7fd fc95 	bl	8002598 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e105      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c7c:	4b5a      	ldr	r3, [pc, #360]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1ef      	bne.n	8004c6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80f9 	beq.w	8004e86 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	f040 80cf 	bne.w	8004e3c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c9e:	4b52      	ldr	r3, [pc, #328]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f003 0203 	and.w	r2, r3, #3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d12c      	bne.n	8004d0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d123      	bne.n	8004d0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d11b      	bne.n	8004d0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d113      	bne.n	8004d0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	085b      	lsrs	r3, r3, #1
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d109      	bne.n	8004d0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	085b      	lsrs	r3, r3, #1
 8004d04:	3b01      	subs	r3, #1
 8004d06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d071      	beq.n	8004df0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	d068      	beq.n	8004de4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d12:	4b35      	ldr	r3, [pc, #212]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d1e:	4b32      	ldr	r3, [pc, #200]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0ac      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d2e:	4b2e      	ldr	r3, [pc, #184]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a2d      	ldr	r2, [pc, #180]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d3a:	f7fd fc2d 	bl	8002598 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d42:	f7fd fc29 	bl	8002598 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e099      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d54:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f0      	bne.n	8004d42 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d60:	4b21      	ldr	r3, [pc, #132]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_RCC_OscConfig+0x788>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d70:	3a01      	subs	r2, #1
 8004d72:	0112      	lsls	r2, r2, #4
 8004d74:	4311      	orrs	r1, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d7a:	0212      	lsls	r2, r2, #8
 8004d7c:	4311      	orrs	r1, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d82:	0852      	lsrs	r2, r2, #1
 8004d84:	3a01      	subs	r2, #1
 8004d86:	0552      	lsls	r2, r2, #21
 8004d88:	4311      	orrs	r1, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d8e:	0852      	lsrs	r2, r2, #1
 8004d90:	3a01      	subs	r2, #1
 8004d92:	0652      	lsls	r2, r2, #25
 8004d94:	4311      	orrs	r1, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d9a:	06d2      	lsls	r2, r2, #27
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	4912      	ldr	r1, [pc, #72]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004da4:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a0f      	ldr	r2, [pc, #60]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004db0:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4a0c      	ldr	r2, [pc, #48]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dbc:	f7fd fbec 	bl	8002598 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc4:	f7fd fbe8 	bl	8002598 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e058      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dd6:	4b04      	ldr	r3, [pc, #16]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004de2:	e050      	b.n	8004e86 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e04f      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
 8004de8:	40021000 	.word	0x40021000
 8004dec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df0:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <HAL_RCC_OscConfig+0x82c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d144      	bne.n	8004e86 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004dfc:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <HAL_RCC_OscConfig+0x82c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a23      	ldr	r2, [pc, #140]	; (8004e90 <HAL_RCC_OscConfig+0x82c>)
 8004e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e08:	4b21      	ldr	r3, [pc, #132]	; (8004e90 <HAL_RCC_OscConfig+0x82c>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4a20      	ldr	r2, [pc, #128]	; (8004e90 <HAL_RCC_OscConfig+0x82c>)
 8004e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e14:	f7fd fbc0 	bl	8002598 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fd fbbc 	bl	8002598 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e02c      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e2e:	4b18      	ldr	r3, [pc, #96]	; (8004e90 <HAL_RCC_OscConfig+0x82c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x7b8>
 8004e3a:	e024      	b.n	8004e86 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b0c      	cmp	r3, #12
 8004e40:	d01f      	beq.n	8004e82 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <HAL_RCC_OscConfig+0x82c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a12      	ldr	r2, [pc, #72]	; (8004e90 <HAL_RCC_OscConfig+0x82c>)
 8004e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fd fba3 	bl	8002598 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e56:	f7fd fb9f 	bl	8002598 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e00f      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCC_OscConfig+0x82c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f0      	bne.n	8004e56 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_RCC_OscConfig+0x82c>)
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	4905      	ldr	r1, [pc, #20]	; (8004e90 <HAL_RCC_OscConfig+0x82c>)
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_RCC_OscConfig+0x830>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60cb      	str	r3, [r1, #12]
 8004e80:	e001      	b.n	8004e86 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40021000 	.word	0x40021000
 8004e94:	feeefffc 	.word	0xfeeefffc

08004e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e11d      	b.n	80050ec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b90      	ldr	r3, [pc, #576]	; (80050f4 <HAL_RCC_ClockConfig+0x25c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d910      	bls.n	8004ee0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b8d      	ldr	r3, [pc, #564]	; (80050f4 <HAL_RCC_ClockConfig+0x25c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 020f 	bic.w	r2, r3, #15
 8004ec6:	498b      	ldr	r1, [pc, #556]	; (80050f4 <HAL_RCC_ClockConfig+0x25c>)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b89      	ldr	r3, [pc, #548]	; (80050f4 <HAL_RCC_ClockConfig+0x25c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e105      	b.n	80050ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d010      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	4b81      	ldr	r3, [pc, #516]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d908      	bls.n	8004f0e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004efc:	4b7e      	ldr	r3, [pc, #504]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	497b      	ldr	r1, [pc, #492]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d079      	beq.n	800500e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d11e      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f22:	4b75      	ldr	r3, [pc, #468]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e0dc      	b.n	80050ec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004f32:	f000 fa35 	bl	80053a0 <RCC_GetSysClockFreqFromPLLSource>
 8004f36:	4603      	mov	r3, r0
 8004f38:	4a70      	ldr	r2, [pc, #448]	; (80050fc <HAL_RCC_ClockConfig+0x264>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d946      	bls.n	8004fcc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f3e:	4b6e      	ldr	r3, [pc, #440]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d140      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f4a:	4b6b      	ldr	r3, [pc, #428]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f52:	4a69      	ldr	r2, [pc, #420]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e035      	b.n	8004fcc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f68:	4b63      	ldr	r3, [pc, #396]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d115      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0b9      	b.n	80050ec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f80:	4b5d      	ldr	r3, [pc, #372]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0ad      	b.n	80050ec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f90:	4b59      	ldr	r3, [pc, #356]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0a5      	b.n	80050ec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004fa0:	f000 f8b4 	bl	800510c <HAL_RCC_GetSysClockFreq>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4a55      	ldr	r2, [pc, #340]	; (80050fc <HAL_RCC_ClockConfig+0x264>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d90f      	bls.n	8004fcc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004fac:	4b52      	ldr	r3, [pc, #328]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d109      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fb8:	4b4f      	ldr	r3, [pc, #316]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc0:	4a4d      	ldr	r2, [pc, #308]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fcc:	4b4a      	ldr	r3, [pc, #296]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f023 0203 	bic.w	r2, r3, #3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4947      	ldr	r1, [pc, #284]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fde:	f7fd fadb 	bl	8002598 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe6:	f7fd fad7 	bl	8002598 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e077      	b.n	80050ec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffc:	4b3e      	ldr	r3, [pc, #248]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 020c 	and.w	r2, r3, #12
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	429a      	cmp	r2, r3
 800500c:	d1eb      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d105      	bne.n	8005020 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005014:	4b38      	ldr	r3, [pc, #224]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a37      	ldr	r2, [pc, #220]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 800501a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800501e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d010      	beq.n	800504e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	4b31      	ldr	r3, [pc, #196]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005038:	429a      	cmp	r2, r3
 800503a:	d208      	bcs.n	800504e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503c:	4b2e      	ldr	r3, [pc, #184]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	492b      	ldr	r1, [pc, #172]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 800504a:	4313      	orrs	r3, r2
 800504c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800504e:	4b29      	ldr	r3, [pc, #164]	; (80050f4 <HAL_RCC_ClockConfig+0x25c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d210      	bcs.n	800507e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505c:	4b25      	ldr	r3, [pc, #148]	; (80050f4 <HAL_RCC_ClockConfig+0x25c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f023 020f 	bic.w	r2, r3, #15
 8005064:	4923      	ldr	r1, [pc, #140]	; (80050f4 <HAL_RCC_ClockConfig+0x25c>)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	4313      	orrs	r3, r2
 800506a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506c:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <HAL_RCC_ClockConfig+0x25c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d001      	beq.n	800507e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e036      	b.n	80050ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	4918      	ldr	r1, [pc, #96]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 8005098:	4313      	orrs	r3, r2
 800509a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d009      	beq.n	80050bc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a8:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4910      	ldr	r1, [pc, #64]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050bc:	f000 f826 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <HAL_RCC_ClockConfig+0x260>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	490c      	ldr	r1, [pc, #48]	; (8005100 <HAL_RCC_ClockConfig+0x268>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	4a0a      	ldr	r2, [pc, #40]	; (8005104 <HAL_RCC_ClockConfig+0x26c>)
 80050da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <HAL_RCC_ClockConfig+0x270>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fd fa09 	bl	80024f8 <HAL_InitTick>
 80050e6:	4603      	mov	r3, r0
 80050e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40022000 	.word	0x40022000
 80050f8:	40021000 	.word	0x40021000
 80050fc:	04c4b400 	.word	0x04c4b400
 8005100:	08013084 	.word	0x08013084
 8005104:	20000004 	.word	0x20000004
 8005108:	20000008 	.word	0x20000008

0800510c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800510c:	b480      	push	{r7}
 800510e:	b089      	sub	sp, #36	; 0x24
 8005110:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511a:	4b3e      	ldr	r3, [pc, #248]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005124:	4b3b      	ldr	r3, [pc, #236]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x34>
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b0c      	cmp	r3, #12
 8005138:	d121      	bne.n	800517e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d11e      	bne.n	800517e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005140:	4b34      	ldr	r3, [pc, #208]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d107      	bne.n	800515c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800514c:	4b31      	ldr	r3, [pc, #196]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800514e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	e005      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800515c:	4b2d      	ldr	r3, [pc, #180]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005168:	4a2b      	ldr	r2, [pc, #172]	; (8005218 <HAL_RCC_GetSysClockFreq+0x10c>)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005170:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10d      	bne.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800517c:	e00a      	b.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d102      	bne.n	800518a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <HAL_RCC_GetSysClockFreq+0x110>)
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e004      	b.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d101      	bne.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005190:	4b23      	ldr	r3, [pc, #140]	; (8005220 <HAL_RCC_GetSysClockFreq+0x114>)
 8005192:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d134      	bne.n	8005204 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800519a:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d003      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0xac>
 80051b0:	e005      	b.n	80051be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051b2:	4b1a      	ldr	r3, [pc, #104]	; (800521c <HAL_RCC_GetSysClockFreq+0x110>)
 80051b4:	617b      	str	r3, [r7, #20]
      break;
 80051b6:	e005      	b.n	80051c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051b8:	4b19      	ldr	r3, [pc, #100]	; (8005220 <HAL_RCC_GetSysClockFreq+0x114>)
 80051ba:	617b      	str	r3, [r7, #20]
      break;
 80051bc:	e002      	b.n	80051c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	617b      	str	r3, [r7, #20]
      break;
 80051c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051c4:	4b13      	ldr	r3, [pc, #76]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	091b      	lsrs	r3, r3, #4
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	3301      	adds	r3, #1
 80051d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	fb03 f202 	mul.w	r2, r3, r2
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	0e5b      	lsrs	r3, r3, #25
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	3301      	adds	r3, #1
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005202:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005204:	69bb      	ldr	r3, [r7, #24]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3724      	adds	r7, #36	; 0x24
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000
 8005218:	0801309c 	.word	0x0801309c
 800521c:	00f42400 	.word	0x00f42400
 8005220:	007a1200 	.word	0x007a1200

08005224 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005228:	4b03      	ldr	r3, [pc, #12]	; (8005238 <HAL_RCC_GetHCLKFreq+0x14>)
 800522a:	681b      	ldr	r3, [r3, #0]
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	20000004 	.word	0x20000004

0800523c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005240:	f7ff fff0 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 8005244:	4602      	mov	r2, r0
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	4904      	ldr	r1, [pc, #16]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005252:	5ccb      	ldrb	r3, [r1, r3]
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800525c:	4618      	mov	r0, r3
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40021000 	.word	0x40021000
 8005264:	08013094 	.word	0x08013094

08005268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800526c:	f7ff ffda 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 8005270:	4602      	mov	r2, r0
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	0adb      	lsrs	r3, r3, #11
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	4904      	ldr	r1, [pc, #16]	; (8005290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40021000 	.word	0x40021000
 8005290:	08013094 	.word	0x08013094

08005294 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005298:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <HAL_RCC_EnableCSS+0x1c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a04      	ldr	r2, [pc, #16]	; (80052b0 <HAL_RCC_EnableCSS+0x1c>)
 800529e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052a2:	6013      	str	r3, [r2, #0]
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000

080052b4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80052b8:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d105      	bne.n	80052d2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80052c6:	f000 f809 	bl	80052dc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80052ca:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80052cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052d0:	621a      	str	r2, [r3, #32]
  }
}
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000

080052dc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052f8:	4b27      	ldr	r3, [pc, #156]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005304:	f7ff f8da 	bl	80044bc <HAL_PWREx_GetVoltageRange>
 8005308:	6178      	str	r0, [r7, #20]
 800530a:	e014      	b.n	8005336 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800530c:	4b22      	ldr	r3, [pc, #136]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005310:	4a21      	ldr	r2, [pc, #132]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005316:	6593      	str	r3, [r2, #88]	; 0x58
 8005318:	4b1f      	ldr	r3, [pc, #124]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800531a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005324:	f7ff f8ca 	bl	80044bc <HAL_PWREx_GetVoltageRange>
 8005328:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800532a:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	4a1a      	ldr	r2, [pc, #104]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005334:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800533c:	d10b      	bne.n	8005356 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	d913      	bls.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2ba0      	cmp	r3, #160	; 0xa0
 8005348:	d902      	bls.n	8005350 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800534a:	2302      	movs	r3, #2
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	e00d      	b.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005350:	2301      	movs	r3, #1
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	e00a      	b.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b7f      	cmp	r3, #127	; 0x7f
 800535a:	d902      	bls.n	8005362 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800535c:	2302      	movs	r3, #2
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	e004      	b.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b70      	cmp	r3, #112	; 0x70
 8005366:	d101      	bne.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005368:	2301      	movs	r3, #1
 800536a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800536c:	4b0b      	ldr	r3, [pc, #44]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f023 020f 	bic.w	r2, r3, #15
 8005374:	4909      	ldr	r1, [pc, #36]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800537c:	4b07      	ldr	r3, [pc, #28]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	429a      	cmp	r2, r3
 8005388:	d001      	beq.n	800538e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40021000 	.word	0x40021000
 800539c:	40022000 	.word	0x40022000

080053a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053a6:	4b2d      	ldr	r3, [pc, #180]	; (800545c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d00b      	beq.n	80053ce <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d825      	bhi.n	8005408 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d008      	beq.n	80053d4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d11f      	bne.n	8005408 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80053c8:	4b25      	ldr	r3, [pc, #148]	; (8005460 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053ca:	613b      	str	r3, [r7, #16]
    break;
 80053cc:	e01f      	b.n	800540e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80053ce:	4b25      	ldr	r3, [pc, #148]	; (8005464 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80053d0:	613b      	str	r3, [r7, #16]
    break;
 80053d2:	e01c      	b.n	800540e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053d4:	4b21      	ldr	r3, [pc, #132]	; (800545c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d107      	bne.n	80053f0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053e0:	4b1e      	ldr	r3, [pc, #120]	; (800545c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e6:	0a1b      	lsrs	r3, r3, #8
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e005      	b.n	80053fc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053f0:	4b1a      	ldr	r3, [pc, #104]	; (800545c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80053fc:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005404:	613b      	str	r3, [r7, #16]
    break;
 8005406:	e002      	b.n	800540e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	613b      	str	r3, [r7, #16]
    break;
 800540c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800540e:	4b13      	ldr	r3, [pc, #76]	; (800545c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	3301      	adds	r3, #1
 800541a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	0a1b      	lsrs	r3, r3, #8
 8005422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	fb03 f202 	mul.w	r2, r3, r2
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005434:	4b09      	ldr	r3, [pc, #36]	; (800545c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	0e5b      	lsrs	r3, r3, #25
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	3301      	adds	r3, #1
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	fbb2 f3f3 	udiv	r3, r2, r3
 800544c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800544e:	683b      	ldr	r3, [r7, #0]
}
 8005450:	4618      	mov	r0, r3
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40021000 	.word	0x40021000
 8005460:	00f42400 	.word	0x00f42400
 8005464:	007a1200 	.word	0x007a1200
 8005468:	0801309c 	.word	0x0801309c

0800546c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005474:	2300      	movs	r3, #0
 8005476:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005478:	2300      	movs	r3, #0
 800547a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005484:	2b00      	cmp	r3, #0
 8005486:	d040      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548c:	2b80      	cmp	r3, #128	; 0x80
 800548e:	d02a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005490:	2b80      	cmp	r3, #128	; 0x80
 8005492:	d825      	bhi.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005494:	2b60      	cmp	r3, #96	; 0x60
 8005496:	d026      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005498:	2b60      	cmp	r3, #96	; 0x60
 800549a:	d821      	bhi.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800549c:	2b40      	cmp	r3, #64	; 0x40
 800549e:	d006      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x42>
 80054a0:	2b40      	cmp	r3, #64	; 0x40
 80054a2:	d81d      	bhi.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d009      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d010      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x62>
 80054ac:	e018      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054ae:	4b89      	ldr	r3, [pc, #548]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	4a88      	ldr	r2, [pc, #544]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054ba:	e015      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 fa24 	bl	8006910 <RCCEx_PLLSAI1_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054cc:	e00c      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3320      	adds	r3, #32
 80054d2:	2100      	movs	r1, #0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 fb0f 	bl	8006af8 <RCCEx_PLLSAI2_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054de:	e003      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	74fb      	strb	r3, [r7, #19]
      break;
 80054e4:	e000      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80054e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10b      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054ee:	4b79      	ldr	r3, [pc, #484]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054f4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054fc:	4975      	ldr	r1, [pc, #468]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005504:	e001      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005506:	7cfb      	ldrb	r3, [r7, #19]
 8005508:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d047      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551e:	d030      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005524:	d82a      	bhi.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800552a:	d02a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800552c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005530:	d824      	bhi.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005536:	d008      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553c:	d81e      	bhi.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	d010      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005548:	e018      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800554a:	4b62      	ldr	r3, [pc, #392]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	4a61      	ldr	r2, [pc, #388]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005554:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005556:	e015      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3304      	adds	r3, #4
 800555c:	2100      	movs	r1, #0
 800555e:	4618      	mov	r0, r3
 8005560:	f001 f9d6 	bl	8006910 <RCCEx_PLLSAI1_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005568:	e00c      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3320      	adds	r3, #32
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fac1 	bl	8006af8 <RCCEx_PLLSAI2_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800557a:	e003      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	74fb      	strb	r3, [r7, #19]
      break;
 8005580:	e000      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10b      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800558a:	4b52      	ldr	r3, [pc, #328]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800558c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	494e      	ldr	r1, [pc, #312]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80055a0:	e001      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a2:	7cfb      	ldrb	r3, [r7, #19]
 80055a4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 809f 	beq.w	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b4:	2300      	movs	r3, #0
 80055b6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055b8:	4b46      	ldr	r3, [pc, #280]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80055c8:	2300      	movs	r3, #0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ce:	4b41      	ldr	r3, [pc, #260]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d2:	4a40      	ldr	r2, [pc, #256]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d8:	6593      	str	r3, [r2, #88]	; 0x58
 80055da:	4b3e      	ldr	r3, [pc, #248]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e6:	2301      	movs	r3, #1
 80055e8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055ea:	4b3b      	ldr	r3, [pc, #236]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a3a      	ldr	r2, [pc, #232]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f6:	f7fc ffcf 	bl	8002598 <HAL_GetTick>
 80055fa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055fc:	e009      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fe:	f7fc ffcb 	bl	8002598 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d902      	bls.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	74fb      	strb	r3, [r7, #19]
        break;
 8005610:	e005      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005612:	4b31      	ldr	r3, [pc, #196]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0ef      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800561e:	7cfb      	ldrb	r3, [r7, #19]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d15b      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005624:	4b2b      	ldr	r3, [pc, #172]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d01f      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	429a      	cmp	r2, r3
 8005640:	d019      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005642:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800564e:	4b21      	ldr	r3, [pc, #132]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005654:	4a1f      	ldr	r2, [pc, #124]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800565e:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005664:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800566e:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d016      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fc ff8a 	bl	8002598 <HAL_GetTick>
 8005684:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005686:	e00b      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005688:	f7fc ff86 	bl	8002598 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	f241 3288 	movw	r2, #5000	; 0x1388
 8005696:	4293      	cmp	r3, r2
 8005698:	d902      	bls.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	74fb      	strb	r3, [r7, #19]
            break;
 800569e:	e006      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0ec      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80056ae:	7cfb      	ldrb	r3, [r7, #19]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10c      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b4:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c4:	4903      	ldr	r1, [pc, #12]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056cc:	e008      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056ce:	7cfb      	ldrb	r3, [r7, #19]
 80056d0:	74bb      	strb	r3, [r7, #18]
 80056d2:	e005      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80056d4:	40021000 	.word	0x40021000
 80056d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056dc:	7cfb      	ldrb	r3, [r7, #19]
 80056de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056e0:	7c7b      	ldrb	r3, [r7, #17]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d105      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e6:	4ba0      	ldr	r3, [pc, #640]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ea:	4a9f      	ldr	r2, [pc, #636]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056fe:	4b9a      	ldr	r3, [pc, #616]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005704:	f023 0203 	bic.w	r2, r3, #3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570c:	4996      	ldr	r1, [pc, #600]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005720:	4b91      	ldr	r3, [pc, #580]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005726:	f023 020c 	bic.w	r2, r3, #12
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	498e      	ldr	r1, [pc, #568]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005742:	4b89      	ldr	r3, [pc, #548]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005748:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005750:	4985      	ldr	r1, [pc, #532]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005764:	4b80      	ldr	r3, [pc, #512]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005772:	497d      	ldr	r1, [pc, #500]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005786:	4b78      	ldr	r3, [pc, #480]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005794:	4974      	ldr	r1, [pc, #464]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057a8:	4b6f      	ldr	r3, [pc, #444]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	496c      	ldr	r1, [pc, #432]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ca:	4b67      	ldr	r3, [pc, #412]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d8:	4963      	ldr	r1, [pc, #396]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057ec:	4b5e      	ldr	r3, [pc, #376]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057fa:	495b      	ldr	r1, [pc, #364]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800580e:	4b56      	ldr	r3, [pc, #344]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581c:	4952      	ldr	r1, [pc, #328]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005830:	4b4d      	ldr	r3, [pc, #308]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583e:	494a      	ldr	r1, [pc, #296]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005852:	4b45      	ldr	r3, [pc, #276]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005860:	4941      	ldr	r1, [pc, #260]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005874:	4b3c      	ldr	r3, [pc, #240]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800587a:	f023 0203 	bic.w	r2, r3, #3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005882:	4939      	ldr	r1, [pc, #228]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d028      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005896:	4b34      	ldr	r3, [pc, #208]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a4:	4930      	ldr	r1, [pc, #192]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058b4:	d106      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058b6:	4b2c      	ldr	r3, [pc, #176]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	4a2b      	ldr	r2, [pc, #172]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058c0:	60d3      	str	r3, [r2, #12]
 80058c2:	e011      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058cc:	d10c      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3304      	adds	r3, #4
 80058d2:	2101      	movs	r1, #1
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 f81b 	bl	8006910 <RCCEx_PLLSAI1_Config>
 80058da:	4603      	mov	r3, r0
 80058dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058de:	7cfb      	ldrb	r3, [r7, #19]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80058e4:	7cfb      	ldrb	r3, [r7, #19]
 80058e6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d04d      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058fc:	d108      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80058fe:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005900:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005904:	4a18      	ldr	r2, [pc, #96]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800590a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800590e:	e012      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005910:	4b15      	ldr	r3, [pc, #84]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005916:	4a14      	ldr	r2, [pc, #80]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800591c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005920:	4b11      	ldr	r3, [pc, #68]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005926:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800592e:	490e      	ldr	r1, [pc, #56]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800593a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800593e:	d106      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005940:	4b09      	ldr	r3, [pc, #36]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	4a08      	ldr	r2, [pc, #32]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800594a:	60d3      	str	r3, [r2, #12]
 800594c:	e020      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005956:	d109      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005958:	4b03      	ldr	r3, [pc, #12]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a02      	ldr	r2, [pc, #8]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005962:	60d3      	str	r3, [r2, #12]
 8005964:	e014      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005966:	bf00      	nop
 8005968:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005970:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005974:	d10c      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3304      	adds	r3, #4
 800597a:	2101      	movs	r1, #1
 800597c:	4618      	mov	r0, r3
 800597e:	f000 ffc7 	bl	8006910 <RCCEx_PLLSAI1_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005986:	7cfb      	ldrb	r3, [r7, #19]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800598c:	7cfb      	ldrb	r3, [r7, #19]
 800598e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d028      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800599c:	4b4a      	ldr	r3, [pc, #296]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059aa:	4947      	ldr	r1, [pc, #284]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ba:	d106      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059bc:	4b42      	ldr	r3, [pc, #264]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4a41      	ldr	r2, [pc, #260]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059c6:	60d3      	str	r3, [r2, #12]
 80059c8:	e011      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059d2:	d10c      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 ff98 	bl	8006910 <RCCEx_PLLSAI1_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059e4:	7cfb      	ldrb	r3, [r7, #19]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80059ea:	7cfb      	ldrb	r3, [r7, #19]
 80059ec:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01e      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059fa:	4b33      	ldr	r3, [pc, #204]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a0a:	492f      	ldr	r1, [pc, #188]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a1c:	d10c      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3304      	adds	r3, #4
 8005a22:	2102      	movs	r1, #2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 ff73 	bl	8006910 <RCCEx_PLLSAI1_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005a34:	7cfb      	ldrb	r3, [r7, #19]
 8005a36:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a44:	4b20      	ldr	r3, [pc, #128]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a4a:	f023 0204 	bic.w	r2, r3, #4
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a54:	491c      	ldr	r1, [pc, #112]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00b      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a68:	4b17      	ldr	r3, [pc, #92]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a6e:	f023 0218 	bic.w	r2, r3, #24
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a78:	4913      	ldr	r1, [pc, #76]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d017      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a9c:	490a      	ldr	r1, [pc, #40]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aae:	d105      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4a04      	ldr	r2, [pc, #16]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005abc:	7cbb      	ldrb	r3, [r7, #18]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40021000 	.word	0x40021000

08005acc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ade:	d13e      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005ae0:	4bb6      	ldr	r3, [pc, #728]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aea:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af2:	d028      	beq.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005afa:	f200 86f4 	bhi.w	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b04:	d005      	beq.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b0c:	d00e      	beq.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005b0e:	f000 beea 	b.w	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b12:	4baa      	ldr	r3, [pc, #680]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	f040 86e4 	bne.w	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8005b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b26:	61fb      	str	r3, [r7, #28]
      break;
 8005b28:	f000 bedf 	b.w	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005b2c:	4ba3      	ldr	r3, [pc, #652]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	f040 86d9 	bne.w	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8005b3c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b40:	61fb      	str	r3, [r7, #28]
      break;
 8005b42:	f000 bed4 	b.w	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b46:	4b9d      	ldr	r3, [pc, #628]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b52:	f040 86ce 	bne.w	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8005b56:	4b9a      	ldr	r3, [pc, #616]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005b58:	61fb      	str	r3, [r7, #28]
      break;
 8005b5a:	f000 beca 	b.w	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b5e:	4b97      	ldr	r3, [pc, #604]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d036      	beq.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d840      	bhi.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d003      	beq.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d020      	beq.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005b80:	e039      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005b82:	4b8e      	ldr	r3, [pc, #568]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d116      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005b8e:	4b8b      	ldr	r3, [pc, #556]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005b9a:	4b88      	ldr	r3, [pc, #544]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	091b      	lsrs	r3, r3, #4
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	e005      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005ba6:	4b85      	ldr	r3, [pc, #532]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bac:	0a1b      	lsrs	r3, r3, #8
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	4a84      	ldr	r2, [pc, #528]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005bba:	e01f      	b.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61bb      	str	r3, [r7, #24]
      break;
 8005bc0:	e01c      	b.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bc2:	4b7e      	ldr	r3, [pc, #504]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bce:	d102      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005bd0:	4b7d      	ldr	r3, [pc, #500]	; (8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005bd2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005bd4:	e012      	b.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61bb      	str	r3, [r7, #24]
      break;
 8005bda:	e00f      	b.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bdc:	4b77      	ldr	r3, [pc, #476]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be8:	d102      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005bea:	4b78      	ldr	r3, [pc, #480]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005bec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005bee:	e005      	b.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61bb      	str	r3, [r7, #24]
      break;
 8005bf4:	e002      	b.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61bb      	str	r3, [r7, #24]
      break;
 8005bfa:	bf00      	nop
    }

    switch(PeriphClk)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c02:	f000 8606 	beq.w	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c0c:	f200 8673 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c16:	f000 8469 	beq.w	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c20:	f200 8669 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c2a:	f000 8531 	beq.w	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c34:	f200 865f 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c3e:	f000 8187 	beq.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c48:	f200 8655 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c52:	f000 80cd 	beq.w	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c5c:	f200 864b 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c66:	f000 8430 	beq.w	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	f200 8641 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c7a:	f000 83e4 	beq.w	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c84:	f200 8637 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8e:	f000 80af 	beq.w	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c98:	f200 862d 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca2:	f000 809d 	beq.w	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cac:	f200 8623 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cb6:	f000 808b 	beq.w	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc0:	f200 8619 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cca:	f000 8554 	beq.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd4:	f200 860f 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cde:	f000 8500 	beq.w	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce8:	f200 8605 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cf2:	f000 84a1 	beq.w	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cfc:	f200 85fb 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b80      	cmp	r3, #128	; 0x80
 8005d04:	f000 846c 	beq.w	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b80      	cmp	r3, #128	; 0x80
 8005d0c:	f200 85f3 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d84c      	bhi.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 85ec 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	2b1f      	cmp	r3, #31
 8005d24:	f200 85e7 	bhi.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08006145 	.word	0x08006145
 8005d34:	080061b3 	.word	0x080061b3
 8005d38:	080068f7 	.word	0x080068f7
 8005d3c:	08006247 	.word	0x08006247
 8005d40:	080068f7 	.word	0x080068f7
 8005d44:	080068f7 	.word	0x080068f7
 8005d48:	080068f7 	.word	0x080068f7
 8005d4c:	080062bf 	.word	0x080062bf
 8005d50:	080068f7 	.word	0x080068f7
 8005d54:	080068f7 	.word	0x080068f7
 8005d58:	080068f7 	.word	0x080068f7
 8005d5c:	080068f7 	.word	0x080068f7
 8005d60:	080068f7 	.word	0x080068f7
 8005d64:	080068f7 	.word	0x080068f7
 8005d68:	080068f7 	.word	0x080068f7
 8005d6c:	08006343 	.word	0x08006343
 8005d70:	080068f7 	.word	0x080068f7
 8005d74:	080068f7 	.word	0x080068f7
 8005d78:	080068f7 	.word	0x080068f7
 8005d7c:	080068f7 	.word	0x080068f7
 8005d80:	080068f7 	.word	0x080068f7
 8005d84:	080068f7 	.word	0x080068f7
 8005d88:	080068f7 	.word	0x080068f7
 8005d8c:	080068f7 	.word	0x080068f7
 8005d90:	080068f7 	.word	0x080068f7
 8005d94:	080068f7 	.word	0x080068f7
 8005d98:	080068f7 	.word	0x080068f7
 8005d9c:	080068f7 	.word	0x080068f7
 8005da0:	080068f7 	.word	0x080068f7
 8005da4:	080068f7 	.word	0x080068f7
 8005da8:	080068f7 	.word	0x080068f7
 8005dac:	080063c5 	.word	0x080063c5
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b40      	cmp	r3, #64	; 0x40
 8005db4:	f000 83e8 	beq.w	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005db8:	f000 bd9d 	b.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	0003d090 	.word	0x0003d090
 8005dc4:	0801309c 	.word	0x0801309c
 8005dc8:	00f42400 	.word	0x00f42400
 8005dcc:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005dd0:	69b9      	ldr	r1, [r7, #24]
 8005dd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005dd6:	f000 ff83 	bl	8006ce0 <RCCEx_GetSAIxPeriphCLKFreq>
 8005dda:	61f8      	str	r0, [r7, #28]
      break;
 8005ddc:	f000 bd8e 	b.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005de0:	69b9      	ldr	r1, [r7, #24]
 8005de2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005de6:	f000 ff7b 	bl	8006ce0 <RCCEx_GetSAIxPeriphCLKFreq>
 8005dea:	61f8      	str	r0, [r7, #28]
      break;
 8005dec:	f000 bd86 	b.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005df0:	4b9a      	ldr	r3, [pc, #616]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e02:	d015      	beq.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e0a:	f200 8092 	bhi.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e14:	d029      	beq.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e1c:	f200 8089 	bhi.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d07b      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e2c:	d04a      	beq.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8005e2e:	e080      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e30:	4b8a      	ldr	r3, [pc, #552]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d17d      	bne.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005e3c:	4b87      	ldr	r3, [pc, #540]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8005e48:	4b84      	ldr	r3, [pc, #528]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	e005      	b.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8005e54:	4b81      	ldr	r3, [pc, #516]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e5a:	0a1b      	lsrs	r3, r3, #8
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	4a7f      	ldr	r2, [pc, #508]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e66:	61fb      	str	r3, [r7, #28]
          break;
 8005e68:	e066      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005e6a:	4b7c      	ldr	r3, [pc, #496]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e76:	d162      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005e78:	4b78      	ldr	r3, [pc, #480]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e84:	d15b      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e86:	4b75      	ldr	r3, [pc, #468]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e90:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	fb03 f202 	mul.w	r2, r3, r2
 8005e9a:	4b70      	ldr	r3, [pc, #448]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eaa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005eac:	4b6b      	ldr	r3, [pc, #428]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	0d5b      	lsrs	r3, r3, #21
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec0:	61fb      	str	r3, [r7, #28]
          break;
 8005ec2:	e03c      	b.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005ec4:	4b65      	ldr	r3, [pc, #404]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed0:	d138      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005ed2:	4b62      	ldr	r3, [pc, #392]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ede:	d131      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ee0:	4b5e      	ldr	r3, [pc, #376]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eea:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	fb03 f202 	mul.w	r2, r3, r2
 8005ef4:	4b59      	ldr	r3, [pc, #356]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	3301      	adds	r3, #1
 8005f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f04:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005f06:	4b55      	ldr	r3, [pc, #340]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	0d5b      	lsrs	r3, r3, #21
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	3301      	adds	r3, #1
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1a:	61fb      	str	r3, [r7, #28]
          break;
 8005f1c:	e012      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005f1e:	4b4f      	ldr	r3, [pc, #316]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d10e      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8005f2c:	4b4d      	ldr	r3, [pc, #308]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f2e:	61fb      	str	r3, [r7, #28]
          break;
 8005f30:	e00b      	b.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8005f32:	bf00      	nop
 8005f34:	f000 bce2 	b.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f38:	bf00      	nop
 8005f3a:	f000 bcdf 	b.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f3e:	bf00      	nop
 8005f40:	f000 bcdc 	b.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f44:	bf00      	nop
 8005f46:	f000 bcd9 	b.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005f4a:	bf00      	nop
        break;
 8005f4c:	f000 bcd6 	b.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005f50:	4b42      	ldr	r3, [pc, #264]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f5e:	d13d      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005f60:	4b3e      	ldr	r3, [pc, #248]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f6c:	f040 84c5 	bne.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005f70:	4b3a      	ldr	r3, [pc, #232]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7c:	f040 84bd 	bne.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f80:	4b36      	ldr	r3, [pc, #216]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	0a1b      	lsrs	r3, r3, #8
 8005f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f8a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	fb03 f202 	mul.w	r2, r3, r2
 8005f94:	4b31      	ldr	r3, [pc, #196]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	091b      	lsrs	r3, r3, #4
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005fa6:	4b2d      	ldr	r3, [pc, #180]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	0edb      	lsrs	r3, r3, #27
 8005fac:	f003 031f 	and.w	r3, r3, #31
 8005fb0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005fb8:	4b28      	ldr	r3, [pc, #160]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8005fc4:	2311      	movs	r3, #17
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	e001      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8005fca:	2307      	movs	r3, #7
 8005fcc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	61fb      	str	r3, [r7, #28]
      break;
 8005fd8:	f000 bc8f 	b.w	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005fdc:	4b1f      	ldr	r3, [pc, #124]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005fee:	d016      	beq.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ff6:	f200 809b 	bhi.w	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006000:	d032      	beq.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006008:	f200 8092 	bhi.w	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 8084 	beq.w	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800601a:	d052      	beq.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800601c:	e088      	b.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800601e:	4b0f      	ldr	r3, [pc, #60]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b02      	cmp	r3, #2
 8006028:	f040 8084 	bne.w	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006038:	4b08      	ldr	r3, [pc, #32]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	091b      	lsrs	r3, r3, #4
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	e005      	b.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8006044:	4b05      	ldr	r3, [pc, #20]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	4a03      	ldr	r2, [pc, #12]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006056:	61fb      	str	r3, [r7, #28]
          break;
 8006058:	e06c      	b.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000
 8006060:	0801309c 	.word	0x0801309c
 8006064:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006068:	4ba5      	ldr	r3, [pc, #660]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006074:	d160      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006076:	4ba2      	ldr	r3, [pc, #648]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800607e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006082:	d159      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006084:	4b9e      	ldr	r3, [pc, #632]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	0a1b      	lsrs	r3, r3, #8
 800608a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	fb03 f202 	mul.w	r2, r3, r2
 8006098:	4b99      	ldr	r3, [pc, #612]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	091b      	lsrs	r3, r3, #4
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	3301      	adds	r3, #1
 80060a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80060aa:	4b95      	ldr	r3, [pc, #596]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	0d5b      	lsrs	r3, r3, #21
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	3301      	adds	r3, #1
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80060be:	61fb      	str	r3, [r7, #28]
          break;
 80060c0:	e03a      	b.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80060c2:	4b8f      	ldr	r3, [pc, #572]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ce:	d135      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80060d0:	4b8b      	ldr	r3, [pc, #556]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060dc:	d12e      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80060de:	4b88      	ldr	r3, [pc, #544]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	0a1b      	lsrs	r3, r3, #8
 80060e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	fb03 f202 	mul.w	r2, r3, r2
 80060f2:	4b83      	ldr	r3, [pc, #524]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	3301      	adds	r3, #1
 80060fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006102:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006104:	4b7e      	ldr	r3, [pc, #504]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	0d5b      	lsrs	r3, r3, #21
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	3301      	adds	r3, #1
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	fbb2 f3f3 	udiv	r3, r2, r3
 8006118:	61fb      	str	r3, [r7, #28]
          break;
 800611a:	e00f      	b.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800611c:	4b78      	ldr	r3, [pc, #480]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800611e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b02      	cmp	r3, #2
 8006128:	d10a      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800612a:	4b76      	ldr	r3, [pc, #472]	; (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800612c:	61fb      	str	r3, [r7, #28]
          break;
 800612e:	e007      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8006130:	bf00      	nop
 8006132:	e3e2      	b.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006134:	bf00      	nop
 8006136:	e3e0      	b.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006138:	bf00      	nop
 800613a:	e3de      	b.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800613c:	bf00      	nop
 800613e:	e3dc      	b.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006140:	bf00      	nop
      break;
 8006142:	e3da      	b.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006144:	4b6e      	ldr	r3, [pc, #440]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b03      	cmp	r3, #3
 8006154:	d827      	bhi.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006156:	a201      	add	r2, pc, #4	; (adr r2, 800615c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	0800616d 	.word	0x0800616d
 8006160:	08006175 	.word	0x08006175
 8006164:	0800617d 	.word	0x0800617d
 8006168:	08006191 	.word	0x08006191
          frequency = HAL_RCC_GetPCLK2Freq();
 800616c:	f7ff f87c 	bl	8005268 <HAL_RCC_GetPCLK2Freq>
 8006170:	61f8      	str	r0, [r7, #28]
          break;
 8006172:	e01d      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006174:	f7fe ffca 	bl	800510c <HAL_RCC_GetSysClockFreq>
 8006178:	61f8      	str	r0, [r7, #28]
          break;
 800617a:	e019      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800617c:	4b60      	ldr	r3, [pc, #384]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006188:	d10f      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800618a:	4b5f      	ldr	r3, [pc, #380]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800618c:	61fb      	str	r3, [r7, #28]
          break;
 800618e:	e00c      	b.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006190:	4b5b      	ldr	r3, [pc, #364]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b02      	cmp	r3, #2
 800619c:	d107      	bne.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800619e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061a2:	61fb      	str	r3, [r7, #28]
          break;
 80061a4:	e003      	b.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 80061a6:	bf00      	nop
 80061a8:	e3a8      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061aa:	bf00      	nop
 80061ac:	e3a6      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80061ae:	bf00      	nop
        break;
 80061b0:	e3a4      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80061b2:	4b53      	ldr	r3, [pc, #332]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b8:	f003 030c 	and.w	r3, r3, #12
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b0c      	cmp	r3, #12
 80061c2:	d83a      	bhi.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	08006201 	.word	0x08006201
 80061d0:	0800623b 	.word	0x0800623b
 80061d4:	0800623b 	.word	0x0800623b
 80061d8:	0800623b 	.word	0x0800623b
 80061dc:	08006209 	.word	0x08006209
 80061e0:	0800623b 	.word	0x0800623b
 80061e4:	0800623b 	.word	0x0800623b
 80061e8:	0800623b 	.word	0x0800623b
 80061ec:	08006211 	.word	0x08006211
 80061f0:	0800623b 	.word	0x0800623b
 80061f4:	0800623b 	.word	0x0800623b
 80061f8:	0800623b 	.word	0x0800623b
 80061fc:	08006225 	.word	0x08006225
          frequency = HAL_RCC_GetPCLK1Freq();
 8006200:	f7ff f81c 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8006204:	61f8      	str	r0, [r7, #28]
          break;
 8006206:	e01d      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8006208:	f7fe ff80 	bl	800510c <HAL_RCC_GetSysClockFreq>
 800620c:	61f8      	str	r0, [r7, #28]
          break;
 800620e:	e019      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006210:	4b3b      	ldr	r3, [pc, #236]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621c:	d10f      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800621e:	4b3a      	ldr	r3, [pc, #232]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006220:	61fb      	str	r3, [r7, #28]
          break;
 8006222:	e00c      	b.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006224:	4b36      	ldr	r3, [pc, #216]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b02      	cmp	r3, #2
 8006230:	d107      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8006232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006236:	61fb      	str	r3, [r7, #28]
          break;
 8006238:	e003      	b.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800623a:	bf00      	nop
 800623c:	e35e      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800623e:	bf00      	nop
 8006240:	e35c      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006242:	bf00      	nop
        break;
 8006244:	e35a      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006246:	4b2e      	ldr	r3, [pc, #184]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b30      	cmp	r3, #48	; 0x30
 8006256:	d021      	beq.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b30      	cmp	r3, #48	; 0x30
 800625c:	d829      	bhi.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b20      	cmp	r3, #32
 8006262:	d011      	beq.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b20      	cmp	r3, #32
 8006268:	d823      	bhi.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b10      	cmp	r3, #16
 8006274:	d004      	beq.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8006276:	e01c      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006278:	f7fe ffe0 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 800627c:	61f8      	str	r0, [r7, #28]
          break;
 800627e:	e01d      	b.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006280:	f7fe ff44 	bl	800510c <HAL_RCC_GetSysClockFreq>
 8006284:	61f8      	str	r0, [r7, #28]
          break;
 8006286:	e019      	b.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006288:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006294:	d10f      	bne.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8006296:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006298:	61fb      	str	r3, [r7, #28]
          break;
 800629a:	e00c      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800629c:	4b18      	ldr	r3, [pc, #96]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d107      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 80062aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ae:	61fb      	str	r3, [r7, #28]
          break;
 80062b0:	e003      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80062b2:	bf00      	nop
 80062b4:	e322      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062b6:	bf00      	nop
 80062b8:	e320      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80062ba:	bf00      	nop
        break;
 80062bc:	e31e      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80062be:	4b10      	ldr	r3, [pc, #64]	; (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2bc0      	cmp	r3, #192	; 0xc0
 80062ce:	d027      	beq.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2bc0      	cmp	r3, #192	; 0xc0
 80062d4:	d82f      	bhi.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b80      	cmp	r3, #128	; 0x80
 80062da:	d017      	beq.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b80      	cmp	r3, #128	; 0x80
 80062e0:	d829      	bhi.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d004      	beq.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80062ee:	e022      	b.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062f0:	f7fe ffa4 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 80062f4:	61f8      	str	r0, [r7, #28]
          break;
 80062f6:	e023      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80062f8:	f7fe ff08 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80062fc:	61f8      	str	r0, [r7, #28]
          break;
 80062fe:	e01f      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8006300:	40021000 	.word	0x40021000
 8006304:	02dc6c00 	.word	0x02dc6c00
 8006308:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800630c:	4b9b      	ldr	r3, [pc, #620]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006318:	d10f      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800631a:	4b99      	ldr	r3, [pc, #612]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800631c:	61fb      	str	r3, [r7, #28]
          break;
 800631e:	e00c      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006320:	4b96      	ldr	r3, [pc, #600]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b02      	cmp	r3, #2
 800632c:	d107      	bne.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800632e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006332:	61fb      	str	r3, [r7, #28]
          break;
 8006334:	e003      	b.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8006336:	bf00      	nop
 8006338:	e2e0      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800633a:	bf00      	nop
 800633c:	e2de      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800633e:	bf00      	nop
        break;
 8006340:	e2dc      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006342:	4b8e      	ldr	r3, [pc, #568]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006354:	d025      	beq.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800635c:	d82c      	bhi.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006364:	d013      	beq.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636c:	d824      	bhi.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637a:	d004      	beq.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800637c:	e01c      	b.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800637e:	f7fe ff5d 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8006382:	61f8      	str	r0, [r7, #28]
          break;
 8006384:	e01d      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006386:	f7fe fec1 	bl	800510c <HAL_RCC_GetSysClockFreq>
 800638a:	61f8      	str	r0, [r7, #28]
          break;
 800638c:	e019      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800638e:	4b7b      	ldr	r3, [pc, #492]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639a:	d10f      	bne.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800639c:	4b78      	ldr	r3, [pc, #480]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800639e:	61fb      	str	r3, [r7, #28]
          break;
 80063a0:	e00c      	b.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063a2:	4b76      	ldr	r3, [pc, #472]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d107      	bne.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80063b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b4:	61fb      	str	r3, [r7, #28]
          break;
 80063b6:	e003      	b.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80063b8:	bf00      	nop
 80063ba:	e29f      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063bc:	bf00      	nop
 80063be:	e29d      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80063c0:	bf00      	nop
        break;
 80063c2:	e29b      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80063c4:	4b6d      	ldr	r3, [pc, #436]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063d6:	d025      	beq.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063de:	d82c      	bhi.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063e6:	d013      	beq.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ee:	d824      	bhi.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d004      	beq.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fc:	d004      	beq.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80063fe:	e01c      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006400:	f7fe ff1c 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8006404:	61f8      	str	r0, [r7, #28]
          break;
 8006406:	e01d      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8006408:	f7fe fe80 	bl	800510c <HAL_RCC_GetSysClockFreq>
 800640c:	61f8      	str	r0, [r7, #28]
          break;
 800640e:	e019      	b.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006410:	4b5a      	ldr	r3, [pc, #360]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800641c:	d10f      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800641e:	4b58      	ldr	r3, [pc, #352]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006420:	61fb      	str	r3, [r7, #28]
          break;
 8006422:	e00c      	b.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006424:	4b55      	ldr	r3, [pc, #340]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b02      	cmp	r3, #2
 8006430:	d107      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8006432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006436:	61fb      	str	r3, [r7, #28]
          break;
 8006438:	e003      	b.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800643a:	bf00      	nop
 800643c:	e25e      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800643e:	bf00      	nop
 8006440:	e25c      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006442:	bf00      	nop
        break;
 8006444:	e25a      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006446:	4b4d      	ldr	r3, [pc, #308]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006458:	d007      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006460:	d12f      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006462:	f7fe fe53 	bl	800510c <HAL_RCC_GetSysClockFreq>
 8006466:	61f8      	str	r0, [r7, #28]
          break;
 8006468:	e02e      	b.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800646a:	4b44      	ldr	r3, [pc, #272]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006476:	d126      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006478:	4b40      	ldr	r3, [pc, #256]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d020      	beq.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006484:	4b3d      	ldr	r3, [pc, #244]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	0a1b      	lsrs	r3, r3, #8
 800648a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800648e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	fb03 f202 	mul.w	r2, r3, r2
 8006498:	4b38      	ldr	r3, [pc, #224]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	3301      	adds	r3, #1
 80064a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80064aa:	4b34      	ldr	r3, [pc, #208]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	0e5b      	lsrs	r3, r3, #25
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	3301      	adds	r3, #1
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	61fb      	str	r3, [r7, #28]
          break;
 80064c0:	e001      	b.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80064c2:	bf00      	nop
 80064c4:	e21a      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80064c6:	bf00      	nop
        break;
 80064c8:	e218      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80064ca:	4b2c      	ldr	r3, [pc, #176]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d103      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7fe fec4 	bl	8005268 <HAL_RCC_GetPCLK2Freq>
 80064e0:	61f8      	str	r0, [r7, #28]
        break;
 80064e2:	e20b      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80064e4:	f7fe fe12 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80064e8:	61f8      	str	r0, [r7, #28]
        break;
 80064ea:	e207      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80064ec:	4b23      	ldr	r3, [pc, #140]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064f2:	f003 0318 	and.w	r3, r3, #24
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b10      	cmp	r3, #16
 80064fc:	d010      	beq.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b10      	cmp	r3, #16
 8006502:	d834      	bhi.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d024      	beq.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8006510:	e02d      	b.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006512:	69b9      	ldr	r1, [r7, #24]
 8006514:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006518:	f000 fbe2 	bl	8006ce0 <RCCEx_GetSAIxPeriphCLKFreq>
 800651c:	61f8      	str	r0, [r7, #28]
          break;
 800651e:	e02b      	b.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006520:	4b16      	ldr	r3, [pc, #88]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b02      	cmp	r3, #2
 800652a:	d122      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800652c:	4b13      	ldr	r3, [pc, #76]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006538:	4b10      	ldr	r3, [pc, #64]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	091b      	lsrs	r3, r3, #4
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	e005      	b.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8006544:	4b0d      	ldr	r3, [pc, #52]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	4a0c      	ldr	r2, [pc, #48]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006556:	61fb      	str	r3, [r7, #28]
          break;
 8006558:	e00b      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800655a:	4b08      	ldr	r3, [pc, #32]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006566:	d106      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8006568:	4b05      	ldr	r3, [pc, #20]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800656a:	61fb      	str	r3, [r7, #28]
          break;
 800656c:	e003      	b.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800656e:	bf00      	nop
 8006570:	e1c4      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006572:	bf00      	nop
 8006574:	e1c2      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006576:	bf00      	nop
        break;
 8006578:	e1c0      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800657a:	bf00      	nop
 800657c:	40021000 	.word	0x40021000
 8006580:	00f42400 	.word	0x00f42400
 8006584:	0801309c 	.word	0x0801309c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006588:	4b96      	ldr	r3, [pc, #600]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659a:	d013      	beq.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a2:	d819      	bhi.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b0:	d004      	beq.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80065b2:	e011      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065b4:	f7fe fe42 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 80065b8:	61f8      	str	r0, [r7, #28]
          break;
 80065ba:	e010      	b.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80065bc:	f7fe fda6 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80065c0:	61f8      	str	r0, [r7, #28]
          break;
 80065c2:	e00c      	b.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065c4:	4b87      	ldr	r3, [pc, #540]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d0:	d104      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80065d2:	4b85      	ldr	r3, [pc, #532]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80065d4:	61fb      	str	r3, [r7, #28]
          break;
 80065d6:	e001      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80065d8:	bf00      	nop
 80065da:	e18f      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80065dc:	bf00      	nop
        break;
 80065de:	e18d      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80065e0:	4b80      	ldr	r3, [pc, #512]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f2:	d013      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fa:	d819      	bhi.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d004      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006608:	d004      	beq.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800660a:	e011      	b.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800660c:	f7fe fe16 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8006610:	61f8      	str	r0, [r7, #28]
          break;
 8006612:	e010      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006614:	f7fe fd7a 	bl	800510c <HAL_RCC_GetSysClockFreq>
 8006618:	61f8      	str	r0, [r7, #28]
          break;
 800661a:	e00c      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800661c:	4b71      	ldr	r3, [pc, #452]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006628:	d104      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800662a:	4b6f      	ldr	r3, [pc, #444]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800662c:	61fb      	str	r3, [r7, #28]
          break;
 800662e:	e001      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8006630:	bf00      	nop
 8006632:	e163      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006634:	bf00      	nop
        break;
 8006636:	e161      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006638:	4b6a      	ldr	r3, [pc, #424]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800664a:	d013      	beq.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006652:	d819      	bhi.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006660:	d004      	beq.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8006662:	e011      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006664:	f7fe fdea 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8006668:	61f8      	str	r0, [r7, #28]
          break;
 800666a:	e010      	b.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800666c:	f7fe fd4e 	bl	800510c <HAL_RCC_GetSysClockFreq>
 8006670:	61f8      	str	r0, [r7, #28]
          break;
 8006672:	e00c      	b.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006674:	4b5b      	ldr	r3, [pc, #364]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800667c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006680:	d104      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8006682:	4b59      	ldr	r3, [pc, #356]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8006684:	61fb      	str	r3, [r7, #28]
          break;
 8006686:	e001      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8006688:	bf00      	nop
 800668a:	e137      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800668c:	bf00      	nop
        break;
 800668e:	e135      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006690:	4b54      	ldr	r3, [pc, #336]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d011      	beq.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d818      	bhi.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d004      	beq.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80066b4:	e011      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066b6:	f7fe fdc1 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 80066ba:	61f8      	str	r0, [r7, #28]
          break;
 80066bc:	e010      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80066be:	f7fe fd25 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80066c2:	61f8      	str	r0, [r7, #28]
          break;
 80066c4:	e00c      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066c6:	4b47      	ldr	r3, [pc, #284]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d2:	d104      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80066d4:	4b44      	ldr	r3, [pc, #272]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80066d6:	61fb      	str	r3, [r7, #28]
          break;
 80066d8:	e001      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80066da:	bf00      	nop
 80066dc:	e10e      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80066de:	bf00      	nop
        break;
 80066e0:	e10c      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80066e2:	4b40      	ldr	r3, [pc, #256]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066f4:	d02c      	beq.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066fc:	d833      	bhi.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006704:	d01a      	beq.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800670c:	d82b      	bhi.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800671a:	d004      	beq.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800671c:	e023      	b.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800671e:	f7fe fd8d 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8006722:	61f8      	str	r0, [r7, #28]
          break;
 8006724:	e026      	b.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006726:	4b2f      	ldr	r3, [pc, #188]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b02      	cmp	r3, #2
 8006732:	d11a      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8006734:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006738:	61fb      	str	r3, [r7, #28]
          break;
 800673a:	e016      	b.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800673c:	4b29      	ldr	r3, [pc, #164]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006748:	d111      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800674a:	4b27      	ldr	r3, [pc, #156]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800674c:	61fb      	str	r3, [r7, #28]
          break;
 800674e:	e00e      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006750:	4b24      	ldr	r3, [pc, #144]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b02      	cmp	r3, #2
 800675c:	d109      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800675e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006762:	61fb      	str	r3, [r7, #28]
          break;
 8006764:	e005      	b.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8006766:	bf00      	nop
 8006768:	e0c8      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800676a:	bf00      	nop
 800676c:	e0c6      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800676e:	bf00      	nop
 8006770:	e0c4      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006772:	bf00      	nop
        break;
 8006774:	e0c2      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006776:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006788:	d030      	beq.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006790:	d837      	bhi.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006798:	d01a      	beq.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067a0:	d82f      	bhi.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ae:	d004      	beq.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80067b0:	e027      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067b2:	f7fe fd43 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 80067b6:	61f8      	str	r0, [r7, #28]
          break;
 80067b8:	e02a      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d11e      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80067c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80067cc:	61fb      	str	r3, [r7, #28]
          break;
 80067ce:	e01a      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067d0:	4b04      	ldr	r3, [pc, #16]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067dc:	d115      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80067de:	4b02      	ldr	r3, [pc, #8]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80067e0:	61fb      	str	r3, [r7, #28]
          break;
 80067e2:	e012      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80067e4:	40021000 	.word	0x40021000
 80067e8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80067ec:	4b46      	ldr	r3, [pc, #280]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d109      	bne.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80067fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067fe:	61fb      	str	r3, [r7, #28]
          break;
 8006800:	e005      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8006802:	bf00      	nop
 8006804:	e07a      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8006806:	bf00      	nop
 8006808:	e078      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800680a:	bf00      	nop
 800680c:	e076      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800680e:	bf00      	nop
        break;
 8006810:	e074      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006812:	4b3d      	ldr	r3, [pc, #244]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006818:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006824:	d02c      	beq.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800682c:	d855      	bhi.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d004      	beq.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800683a:	d004      	beq.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800683c:	e04d      	b.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800683e:	f7fe fc65 	bl	800510c <HAL_RCC_GetSysClockFreq>
 8006842:	61f8      	str	r0, [r7, #28]
          break;
 8006844:	e04e      	b.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006846:	4b30      	ldr	r3, [pc, #192]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b02      	cmp	r3, #2
 8006850:	d145      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006852:	4b2d      	ldr	r3, [pc, #180]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800685e:	4b2a      	ldr	r3, [pc, #168]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	091b      	lsrs	r3, r3, #4
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	e005      	b.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800686a:	4b27      	ldr	r3, [pc, #156]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800686c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006870:	0a1b      	lsrs	r3, r3, #8
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	4a25      	ldr	r2, [pc, #148]	; (800690c <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8006878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687c:	61fb      	str	r3, [r7, #28]
          break;
 800687e:	e02e      	b.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006880:	4b21      	ldr	r3, [pc, #132]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800688c:	d129      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800688e:	4b1e      	ldr	r3, [pc, #120]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689a:	d122      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800689c:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	0a1b      	lsrs	r3, r3, #8
 80068a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	fb03 f202 	mul.w	r2, r3, r2
 80068b0:	4b15      	ldr	r3, [pc, #84]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	091b      	lsrs	r3, r3, #4
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	3301      	adds	r3, #1
 80068bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80068c2:	4b11      	ldr	r3, [pc, #68]	; (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	0d5b      	lsrs	r3, r3, #21
 80068c8:	f003 0303 	and.w	r3, r3, #3
 80068cc:	3301      	adds	r3, #1
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d6:	61fb      	str	r3, [r7, #28]
          break;
 80068d8:	e003      	b.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80068da:	bf00      	nop
 80068dc:	e00e      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068de:	bf00      	nop
 80068e0:	e00c      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80068e2:	bf00      	nop
        break;
 80068e4:	e00a      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068e6:	bf00      	nop
 80068e8:	e008      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068ea:	bf00      	nop
 80068ec:	e006      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068ee:	bf00      	nop
 80068f0:	e004      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068f2:	bf00      	nop
 80068f4:	e002      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068f6:	bf00      	nop
 80068f8:	e000      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80068fa:	bf00      	nop
    }
  }

  return(frequency);
 80068fc:	69fb      	ldr	r3, [r7, #28]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3720      	adds	r7, #32
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40021000 	.word	0x40021000
 800690c:	0801309c 	.word	0x0801309c

08006910 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800691e:	4b72      	ldr	r3, [pc, #456]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00e      	beq.n	8006948 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800692a:	4b6f      	ldr	r3, [pc, #444]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f003 0203 	and.w	r2, r3, #3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d103      	bne.n	8006942 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
       ||
 800693e:	2b00      	cmp	r3, #0
 8006940:	d142      	bne.n	80069c8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	73fb      	strb	r3, [r7, #15]
 8006946:	e03f      	b.n	80069c8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b03      	cmp	r3, #3
 800694e:	d018      	beq.n	8006982 <RCCEx_PLLSAI1_Config+0x72>
 8006950:	2b03      	cmp	r3, #3
 8006952:	d825      	bhi.n	80069a0 <RCCEx_PLLSAI1_Config+0x90>
 8006954:	2b01      	cmp	r3, #1
 8006956:	d002      	beq.n	800695e <RCCEx_PLLSAI1_Config+0x4e>
 8006958:	2b02      	cmp	r3, #2
 800695a:	d009      	beq.n	8006970 <RCCEx_PLLSAI1_Config+0x60>
 800695c:	e020      	b.n	80069a0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800695e:	4b62      	ldr	r3, [pc, #392]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d11d      	bne.n	80069a6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800696e:	e01a      	b.n	80069a6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006970:	4b5d      	ldr	r3, [pc, #372]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006978:	2b00      	cmp	r3, #0
 800697a:	d116      	bne.n	80069aa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006980:	e013      	b.n	80069aa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006982:	4b59      	ldr	r3, [pc, #356]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10f      	bne.n	80069ae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800698e:	4b56      	ldr	r3, [pc, #344]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d109      	bne.n	80069ae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800699e:	e006      	b.n	80069ae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	73fb      	strb	r3, [r7, #15]
      break;
 80069a4:	e004      	b.n	80069b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069a6:	bf00      	nop
 80069a8:	e002      	b.n	80069b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069aa:	bf00      	nop
 80069ac:	e000      	b.n	80069b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d108      	bne.n	80069c8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80069b6:	4b4c      	ldr	r3, [pc, #304]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f023 0203 	bic.w	r2, r3, #3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4949      	ldr	r1, [pc, #292]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 8086 	bne.w	8006adc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069d0:	4b45      	ldr	r3, [pc, #276]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a44      	ldr	r2, [pc, #272]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069dc:	f7fb fddc 	bl	8002598 <HAL_GetTick>
 80069e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069e2:	e009      	b.n	80069f8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069e4:	f7fb fdd8 	bl	8002598 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d902      	bls.n	80069f8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	73fb      	strb	r3, [r7, #15]
        break;
 80069f6:	e005      	b.n	8006a04 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069f8:	4b3b      	ldr	r3, [pc, #236]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1ef      	bne.n	80069e4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d168      	bne.n	8006adc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d113      	bne.n	8006a38 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a10:	4b35      	ldr	r3, [pc, #212]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	4b35      	ldr	r3, [pc, #212]	; (8006aec <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6892      	ldr	r2, [r2, #8]
 8006a1c:	0211      	lsls	r1, r2, #8
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	68d2      	ldr	r2, [r2, #12]
 8006a22:	06d2      	lsls	r2, r2, #27
 8006a24:	4311      	orrs	r1, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6852      	ldr	r2, [r2, #4]
 8006a2a:	3a01      	subs	r2, #1
 8006a2c:	0112      	lsls	r2, r2, #4
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	492d      	ldr	r1, [pc, #180]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	610b      	str	r3, [r1, #16]
 8006a36:	e02d      	b.n	8006a94 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d115      	bne.n	8006a6a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	4b2b      	ldr	r3, [pc, #172]	; (8006af0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6892      	ldr	r2, [r2, #8]
 8006a4a:	0211      	lsls	r1, r2, #8
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6912      	ldr	r2, [r2, #16]
 8006a50:	0852      	lsrs	r2, r2, #1
 8006a52:	3a01      	subs	r2, #1
 8006a54:	0552      	lsls	r2, r2, #21
 8006a56:	4311      	orrs	r1, r2
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6852      	ldr	r2, [r2, #4]
 8006a5c:	3a01      	subs	r2, #1
 8006a5e:	0112      	lsls	r2, r2, #4
 8006a60:	430a      	orrs	r2, r1
 8006a62:	4921      	ldr	r1, [pc, #132]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	610b      	str	r3, [r1, #16]
 8006a68:	e014      	b.n	8006a94 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	4b21      	ldr	r3, [pc, #132]	; (8006af4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6892      	ldr	r2, [r2, #8]
 8006a76:	0211      	lsls	r1, r2, #8
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6952      	ldr	r2, [r2, #20]
 8006a7c:	0852      	lsrs	r2, r2, #1
 8006a7e:	3a01      	subs	r2, #1
 8006a80:	0652      	lsls	r2, r2, #25
 8006a82:	4311      	orrs	r1, r2
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6852      	ldr	r2, [r2, #4]
 8006a88:	3a01      	subs	r2, #1
 8006a8a:	0112      	lsls	r2, r2, #4
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	4916      	ldr	r1, [pc, #88]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a94:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa0:	f7fb fd7a 	bl	8002598 <HAL_GetTick>
 8006aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aa6:	e009      	b.n	8006abc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aa8:	f7fb fd76 	bl	8002598 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d902      	bls.n	8006abc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8006aba:	e005      	b.n	8006ac8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006abc:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0ef      	beq.n	8006aa8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ace:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ad0:	691a      	ldr	r2, [r3, #16]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	4904      	ldr	r1, [pc, #16]	; (8006ae8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	07ff800f 	.word	0x07ff800f
 8006af0:	ff9f800f 	.word	0xff9f800f
 8006af4:	f9ff800f 	.word	0xf9ff800f

08006af8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b06:	4b72      	ldr	r3, [pc, #456]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00e      	beq.n	8006b30 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006b12:	4b6f      	ldr	r3, [pc, #444]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f003 0203 	and.w	r2, r3, #3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d103      	bne.n	8006b2a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
       ||
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d142      	bne.n	8006bb0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	73fb      	strb	r3, [r7, #15]
 8006b2e:	e03f      	b.n	8006bb0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d018      	beq.n	8006b6a <RCCEx_PLLSAI2_Config+0x72>
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d825      	bhi.n	8006b88 <RCCEx_PLLSAI2_Config+0x90>
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d002      	beq.n	8006b46 <RCCEx_PLLSAI2_Config+0x4e>
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d009      	beq.n	8006b58 <RCCEx_PLLSAI2_Config+0x60>
 8006b44:	e020      	b.n	8006b88 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b46:	4b62      	ldr	r3, [pc, #392]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d11d      	bne.n	8006b8e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b56:	e01a      	b.n	8006b8e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b58:	4b5d      	ldr	r3, [pc, #372]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d116      	bne.n	8006b92 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b68:	e013      	b.n	8006b92 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b6a:	4b59      	ldr	r3, [pc, #356]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10f      	bne.n	8006b96 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b76:	4b56      	ldr	r3, [pc, #344]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d109      	bne.n	8006b96 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b86:	e006      	b.n	8006b96 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b8c:	e004      	b.n	8006b98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b8e:	bf00      	nop
 8006b90:	e002      	b.n	8006b98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b92:	bf00      	nop
 8006b94:	e000      	b.n	8006b98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b96:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d108      	bne.n	8006bb0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006b9e:	4b4c      	ldr	r3, [pc, #304]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f023 0203 	bic.w	r2, r3, #3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4949      	ldr	r1, [pc, #292]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f040 8086 	bne.w	8006cc4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bb8:	4b45      	ldr	r3, [pc, #276]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a44      	ldr	r2, [pc, #272]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc4:	f7fb fce8 	bl	8002598 <HAL_GetTick>
 8006bc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bca:	e009      	b.n	8006be0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bcc:	f7fb fce4 	bl	8002598 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d902      	bls.n	8006be0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	73fb      	strb	r3, [r7, #15]
        break;
 8006bde:	e005      	b.n	8006bec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006be0:	4b3b      	ldr	r3, [pc, #236]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1ef      	bne.n	8006bcc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d168      	bne.n	8006cc4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d113      	bne.n	8006c20 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bf8:	4b35      	ldr	r3, [pc, #212]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bfa:	695a      	ldr	r2, [r3, #20]
 8006bfc:	4b35      	ldr	r3, [pc, #212]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006bfe:	4013      	ands	r3, r2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6892      	ldr	r2, [r2, #8]
 8006c04:	0211      	lsls	r1, r2, #8
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68d2      	ldr	r2, [r2, #12]
 8006c0a:	06d2      	lsls	r2, r2, #27
 8006c0c:	4311      	orrs	r1, r2
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	6852      	ldr	r2, [r2, #4]
 8006c12:	3a01      	subs	r2, #1
 8006c14:	0112      	lsls	r2, r2, #4
 8006c16:	430a      	orrs	r2, r1
 8006c18:	492d      	ldr	r1, [pc, #180]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	614b      	str	r3, [r1, #20]
 8006c1e:	e02d      	b.n	8006c7c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d115      	bne.n	8006c52 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c26:	4b2a      	ldr	r3, [pc, #168]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c28:	695a      	ldr	r2, [r3, #20]
 8006c2a:	4b2b      	ldr	r3, [pc, #172]	; (8006cd8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6892      	ldr	r2, [r2, #8]
 8006c32:	0211      	lsls	r1, r2, #8
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6912      	ldr	r2, [r2, #16]
 8006c38:	0852      	lsrs	r2, r2, #1
 8006c3a:	3a01      	subs	r2, #1
 8006c3c:	0552      	lsls	r2, r2, #21
 8006c3e:	4311      	orrs	r1, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6852      	ldr	r2, [r2, #4]
 8006c44:	3a01      	subs	r2, #1
 8006c46:	0112      	lsls	r2, r2, #4
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	4921      	ldr	r1, [pc, #132]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	614b      	str	r3, [r1, #20]
 8006c50:	e014      	b.n	8006c7c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c52:	4b1f      	ldr	r3, [pc, #124]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	4b21      	ldr	r3, [pc, #132]	; (8006cdc <RCCEx_PLLSAI2_Config+0x1e4>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6892      	ldr	r2, [r2, #8]
 8006c5e:	0211      	lsls	r1, r2, #8
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6952      	ldr	r2, [r2, #20]
 8006c64:	0852      	lsrs	r2, r2, #1
 8006c66:	3a01      	subs	r2, #1
 8006c68:	0652      	lsls	r2, r2, #25
 8006c6a:	4311      	orrs	r1, r2
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6852      	ldr	r2, [r2, #4]
 8006c70:	3a01      	subs	r2, #1
 8006c72:	0112      	lsls	r2, r2, #4
 8006c74:	430a      	orrs	r2, r1
 8006c76:	4916      	ldr	r1, [pc, #88]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c7c:	4b14      	ldr	r3, [pc, #80]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a13      	ldr	r2, [pc, #76]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c88:	f7fb fc86 	bl	8002598 <HAL_GetTick>
 8006c8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c8e:	e009      	b.n	8006ca4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c90:	f7fb fc82 	bl	8002598 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d902      	bls.n	8006ca4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	73fb      	strb	r3, [r7, #15]
          break;
 8006ca2:	e005      	b.n	8006cb0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ca4:	4b0a      	ldr	r3, [pc, #40]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0ef      	beq.n	8006c90 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006cb6:	4b06      	ldr	r3, [pc, #24]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cb8:	695a      	ldr	r2, [r3, #20]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	4904      	ldr	r1, [pc, #16]	; (8006cd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	07ff800f 	.word	0x07ff800f
 8006cd8:	ff9f800f 	.word	0xff9f800f
 8006cdc:	f9ff800f 	.word	0xf9ff800f

08006ce0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b089      	sub	sp, #36	; 0x24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cfc:	d10b      	bne.n	8006d16 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006cfe:	4b7e      	ldr	r3, [pc, #504]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d04:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006d08:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b60      	cmp	r3, #96	; 0x60
 8006d0e:	d112      	bne.n	8006d36 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d10:	4b7a      	ldr	r3, [pc, #488]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	e00f      	b.n	8006d36 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1c:	d10b      	bne.n	8006d36 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006d1e:	4b76      	ldr	r3, [pc, #472]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d28:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d30:	d101      	bne.n	8006d36 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006d32:	4b72      	ldr	r3, [pc, #456]	; (8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006d34:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f040 80d6 	bne.w	8006eea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b40      	cmp	r3, #64	; 0x40
 8006d46:	d003      	beq.n	8006d50 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4e:	d13b      	bne.n	8006dc8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006d50:	4b69      	ldr	r3, [pc, #420]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d5c:	f040 80c4 	bne.w	8006ee8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006d60:	4b65      	ldr	r3, [pc, #404]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80bd 	beq.w	8006ee8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006d6e:	4b62      	ldr	r3, [pc, #392]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	091b      	lsrs	r3, r3, #4
 8006d74:	f003 030f 	and.w	r3, r3, #15
 8006d78:	3301      	adds	r3, #1
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d80:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006d82:	4b5d      	ldr	r3, [pc, #372]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	0a1b      	lsrs	r3, r3, #8
 8006d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006d8e:	4b5a      	ldr	r3, [pc, #360]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	0edb      	lsrs	r3, r3, #27
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006da0:	4b55      	ldr	r3, [pc, #340]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006dac:	2311      	movs	r3, #17
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	e001      	b.n	8006db6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006db2:	2307      	movs	r3, #7
 8006db4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	fb03 f202 	mul.w	r2, r3, r2
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006dc6:	e08f      	b.n	8006ee8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d13a      	bne.n	8006e44 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006dce:	4b4a      	ldr	r3, [pc, #296]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dda:	f040 8086 	bne.w	8006eea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006dde:	4b46      	ldr	r3, [pc, #280]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d07f      	beq.n	8006eea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006dea:	4b43      	ldr	r3, [pc, #268]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	091b      	lsrs	r3, r3, #4
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	3301      	adds	r3, #1
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006dfe:	4b3e      	ldr	r3, [pc, #248]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	0a1b      	lsrs	r3, r3, #8
 8006e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e08:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006e0a:	4b3b      	ldr	r3, [pc, #236]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	0edb      	lsrs	r3, r3, #27
 8006e10:	f003 031f 	and.w	r3, r3, #31
 8006e14:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006e1c:	4b36      	ldr	r3, [pc, #216]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006e28:	2311      	movs	r3, #17
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	e001      	b.n	8006e32 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006e2e:	2307      	movs	r3, #7
 8006e30:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	fb03 f202 	mul.w	r2, r3, r2
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e40:	61fb      	str	r3, [r7, #28]
 8006e42:	e052      	b.n	8006eea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	2b80      	cmp	r3, #128	; 0x80
 8006e48:	d003      	beq.n	8006e52 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e50:	d109      	bne.n	8006e66 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e52:	4b29      	ldr	r3, [pc, #164]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5e:	d144      	bne.n	8006eea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006e60:	4b27      	ldr	r3, [pc, #156]	; (8006f00 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006e62:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e64:	e041      	b.n	8006eea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d003      	beq.n	8006e74 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e72:	d13a      	bne.n	8006eea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006e74:	4b20      	ldr	r3, [pc, #128]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e80:	d133      	bne.n	8006eea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006e82:	4b1d      	ldr	r3, [pc, #116]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d02d      	beq.n	8006eea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006e8e:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	091b      	lsrs	r3, r3, #4
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	3301      	adds	r3, #1
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006ea2:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	0a1b      	lsrs	r3, r3, #8
 8006ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eac:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006eae:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	0edb      	lsrs	r3, r3, #27
 8006eb4:	f003 031f 	and.w	r3, r3, #31
 8006eb8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006ec0:	4b0d      	ldr	r3, [pc, #52]	; (8006ef8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006ecc:	2311      	movs	r3, #17
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	e001      	b.n	8006ed6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006ed2:	2307      	movs	r3, #7
 8006ed4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	fb03 f202 	mul.w	r2, r3, r2
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	e000      	b.n	8006eea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006ee8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006eea:	69fb      	ldr	r3, [r7, #28]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3724      	adds	r7, #36	; 0x24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	40021000 	.word	0x40021000
 8006efc:	001fff68 	.word	0x001fff68
 8006f00:	00f42400 	.word	0x00f42400

08006f04 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08a      	sub	sp, #40	; 0x28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e078      	b.n	8007008 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d105      	bne.n	8006f2e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7fb f857 	bl	8001fdc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2203      	movs	r2, #3
 8006f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f86a 	bl	8007010 <HAL_SD_InitCard>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e060      	b.n	8007008 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006f46:	f107 0308 	add.w	r3, r7, #8
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fdcd 	bl	8007aec <HAL_SD_GetCardStatus>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e055      	b.n	8007008 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006f5c:	7e3b      	ldrb	r3, [r7, #24]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006f62:	7e7b      	ldrb	r3, [r7, #25]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d10a      	bne.n	8006f86 <HAL_SD_Init+0x82>
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d102      	bne.n	8006f7c <HAL_SD_Init+0x78>
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f82:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f84:	e00b      	b.n	8006f9e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d104      	bne.n	8006f98 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f94:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f96:	e002      	b.n	8006f9e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fe83 	bl	8007cb0 <HAL_SD_ConfigWideBusOperation>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e029      	b.n	8007008 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006fb4:	f7fb faf0 	bl	8002598 <HAL_GetTick>
 8006fb8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006fba:	e014      	b.n	8006fe6 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006fbc:	f7fb faec 	bl	8002598 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fca:	d10c      	bne.n	8006fe6 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e010      	b.n	8007008 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 ff76 	bl	8007ed8 <HAL_SD_GetCardState>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d1e4      	bne.n	8006fbc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3728      	adds	r7, #40	; 0x28
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007010:	b5b0      	push	{r4, r5, r7, lr}
 8007012:	b08e      	sub	sp, #56	; 0x38
 8007014:	af04      	add	r7, sp, #16
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007018:	2300      	movs	r3, #0
 800701a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007020:	2300      	movs	r3, #0
 8007022:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007028:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800702c:	f7fe fd4e 	bl	8005acc <HAL_RCCEx_GetPeriphCLKFreq>
 8007030:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007046:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e079      	b.n	8007140 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	4a3d      	ldr	r2, [pc, #244]	; (8007148 <HAL_SD_InitCard+0x138>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	091b      	lsrs	r3, r3, #4
 8007058:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d107      	bne.n	8007078 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0210 	orr.w	r2, r2, #16
 8007076:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681d      	ldr	r5, [r3, #0]
 800707c:	466c      	mov	r4, sp
 800707e:	f107 0314 	add.w	r3, r7, #20
 8007082:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800708a:	f107 0308 	add.w	r3, r7, #8
 800708e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007090:	4628      	mov	r0, r5
 8007092:	f004 fcad 	bl	800b9f0 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4618      	mov	r0, r3
 800709c:	f004 fcf0 	bl	800ba80 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80070ac:	4a27      	ldr	r2, [pc, #156]	; (800714c <HAL_SD_InitCard+0x13c>)
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	3301      	adds	r3, #1
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fb fa7a 	bl	80025b0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 ffeb 	bl	8008098 <SD_PowerON>
 80070c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00b      	beq.n	80070e2 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e02e      	b.n	8007140 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 ff18 	bl	8007f18 <SD_InitCard>
 80070e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00b      	beq.n	8007108 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e01b      	b.n	8007140 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007110:	4618      	mov	r0, r3
 8007112:	f004 fd4b 	bl	800bbac <SDMMC_CmdBlockLength>
 8007116:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00f      	beq.n	800713e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a0b      	ldr	r2, [pc, #44]	; (8007150 <HAL_SD_InitCard+0x140>)
 8007124:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3728      	adds	r7, #40	; 0x28
 8007144:	46bd      	mov	sp, r7
 8007146:	bdb0      	pop	{r4, r5, r7, pc}
 8007148:	014f8b59 	.word	0x014f8b59
 800714c:	00012110 	.word	0x00012110
 8007150:	1fe00fff 	.word	0x1fe00fff

08007154 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b092      	sub	sp, #72	; 0x48
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007162:	f7fb fa19 	bl	8002598 <HAL_GetTick>
 8007166:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d107      	bne.n	8007186 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e170      	b.n	8007468 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b01      	cmp	r3, #1
 8007190:	f040 8163 	bne.w	800745a <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800719a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	441a      	add	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d907      	bls.n	80071b8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e157      	b.n	8007468 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2203      	movs	r2, #3
 80071bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2200      	movs	r2, #0
 80071c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d002      	beq.n	80071d6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80071d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d2:	025b      	lsls	r3, r3, #9
 80071d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071da:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	025b      	lsls	r3, r3, #9
 80071e0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80071e2:	2390      	movs	r3, #144	; 0x90
 80071e4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80071e6:	2302      	movs	r3, #2
 80071e8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80071ee:	2300      	movs	r3, #0
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f107 0214 	add.w	r2, r7, #20
 80071fa:	4611      	mov	r1, r2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f004 fca9 	bl	800bb54 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007210:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d90a      	bls.n	800722e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2202      	movs	r2, #2
 800721c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007224:	4618      	mov	r0, r3
 8007226:	f004 fd07 	bl	800bc38 <SDMMC_CmdReadMultiBlock>
 800722a:	6478      	str	r0, [r7, #68]	; 0x44
 800722c:	e009      	b.n	8007242 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800723a:	4618      	mov	r0, r3
 800723c:	f004 fcd9 	bl	800bbf2 <SDMMC_CmdReadSingleBlock>
 8007240:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007244:	2b00      	cmp	r3, #0
 8007246:	d012      	beq.n	800726e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a88      	ldr	r2, [pc, #544]	; (8007470 <HAL_SD_ReadBlocks+0x31c>)
 800724e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007256:	431a      	orrs	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e0fc      	b.n	8007468 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007272:	e061      	b.n	8007338 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d03c      	beq.n	80072fc <HAL_SD_ReadBlocks+0x1a8>
 8007282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d039      	beq.n	80072fc <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007288:	2300      	movs	r3, #0
 800728a:	643b      	str	r3, [r7, #64]	; 0x40
 800728c:	e033      	b.n	80072f6 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f004 fbd6 	bl	800ba44 <SDMMC_ReadFIFO>
 8007298:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	b2da      	uxtb	r2, r3
 800729e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80072a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a4:	3301      	adds	r3, #1
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80072a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072aa:	3b01      	subs	r3, #1
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	0a1b      	lsrs	r3, r3, #8
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80072b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ba:	3301      	adds	r3, #1
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80072be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c0:	3b01      	subs	r3, #1
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	0c1b      	lsrs	r3, r3, #16
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80072ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d0:	3301      	adds	r3, #1
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80072d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d6:	3b01      	subs	r3, #1
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80072da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072dc:	0e1b      	lsrs	r3, r3, #24
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80072e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e6:	3301      	adds	r3, #1
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80072ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ec:	3b01      	subs	r3, #1
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80072f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f2:	3301      	adds	r3, #1
 80072f4:	643b      	str	r3, [r7, #64]	; 0x40
 80072f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f8:	2b07      	cmp	r3, #7
 80072fa:	d9c8      	bls.n	800728e <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80072fc:	f7fb f94c 	bl	8002598 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007308:	429a      	cmp	r2, r3
 800730a:	d902      	bls.n	8007312 <HAL_SD_ReadBlocks+0x1be>
 800730c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800730e:	2b00      	cmp	r3, #0
 8007310:	d112      	bne.n	8007338 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a56      	ldr	r2, [pc, #344]	; (8007470 <HAL_SD_ReadBlocks+0x31c>)
 8007318:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e097      	b.n	8007468 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007342:	2b00      	cmp	r3, #0
 8007344:	d096      	beq.n	8007274 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007354:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007360:	2b00      	cmp	r3, #0
 8007362:	d022      	beq.n	80073aa <HAL_SD_ReadBlocks+0x256>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d91f      	bls.n	80073aa <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	2b03      	cmp	r3, #3
 8007370:	d01b      	beq.n	80073aa <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4618      	mov	r0, r3
 8007378:	f004 fcc8 	bl	800bd0c <SDMMC_CmdStopTransfer>
 800737c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800737e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007380:	2b00      	cmp	r3, #0
 8007382:	d012      	beq.n	80073aa <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a39      	ldr	r2, [pc, #228]	; (8007470 <HAL_SD_ReadBlocks+0x31c>)
 800738a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007392:	431a      	orrs	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e05e      	b.n	8007468 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d012      	beq.n	80073de <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a2c      	ldr	r2, [pc, #176]	; (8007470 <HAL_SD_ReadBlocks+0x31c>)
 80073be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	f043 0208 	orr.w	r2, r3, #8
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e044      	b.n	8007468 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d012      	beq.n	8007412 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1f      	ldr	r2, [pc, #124]	; (8007470 <HAL_SD_ReadBlocks+0x31c>)
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	f043 0202 	orr.w	r2, r3, #2
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e02a      	b.n	8007468 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d012      	beq.n	8007446 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a12      	ldr	r2, [pc, #72]	; (8007470 <HAL_SD_ReadBlocks+0x31c>)
 8007426:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	f043 0220 	orr.w	r2, r3, #32
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e010      	b.n	8007468 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a0a      	ldr	r2, [pc, #40]	; (8007474 <HAL_SD_ReadBlocks+0x320>)
 800744c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	e006      	b.n	8007468 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
  }
}
 8007468:	4618      	mov	r0, r3
 800746a:	3748      	adds	r7, #72	; 0x48
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	1fe00fff 	.word	0x1fe00fff
 8007474:	18000f3a 	.word	0x18000f3a

08007478 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b092      	sub	sp, #72	; 0x48
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007486:	f7fb f887 	bl	8002598 <HAL_GetTick>
 800748a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d107      	bne.n	80074aa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e174      	b.n	8007794 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	f040 8167 	bne.w	8007786 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80074be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	441a      	add	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d907      	bls.n	80074dc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e15b      	b.n	8007794 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2203      	movs	r2, #3
 80074e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2200      	movs	r2, #0
 80074ea:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d002      	beq.n	80074fa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	025b      	lsls	r3, r3, #9
 80074f8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80074fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074fe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	025b      	lsls	r3, r3, #9
 8007504:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007506:	2390      	movs	r3, #144	; 0x90
 8007508:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800750a:	2300      	movs	r3, #0
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800750e:	2300      	movs	r3, #0
 8007510:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007512:	2300      	movs	r3, #0
 8007514:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f107 0218 	add.w	r2, r7, #24
 800751e:	4611      	mov	r1, r2
 8007520:	4618      	mov	r0, r3
 8007522:	f004 fb17 	bl	800bb54 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007534:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d90a      	bls.n	8007552 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2220      	movs	r2, #32
 8007540:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007548:	4618      	mov	r0, r3
 800754a:	f004 fbbb 	bl	800bcc4 <SDMMC_CmdWriteMultiBlock>
 800754e:	6478      	str	r0, [r7, #68]	; 0x44
 8007550:	e009      	b.n	8007566 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2210      	movs	r2, #16
 8007556:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800755e:	4618      	mov	r0, r3
 8007560:	f004 fb8d 	bl	800bc7e <SDMMC_CmdWriteSingleBlock>
 8007564:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007568:	2b00      	cmp	r3, #0
 800756a:	d012      	beq.n	8007592 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a8a      	ldr	r2, [pc, #552]	; (800779c <HAL_SD_WriteBlocks+0x324>)
 8007572:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800757a:	431a      	orrs	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e100      	b.n	8007794 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007596:	e065      	b.n	8007664 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d040      	beq.n	8007628 <HAL_SD_WriteBlocks+0x1b0>
 80075a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d03d      	beq.n	8007628 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80075ac:	2300      	movs	r3, #0
 80075ae:	643b      	str	r3, [r7, #64]	; 0x40
 80075b0:	e037      	b.n	8007622 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 80075b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80075b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ba:	3301      	adds	r3, #1
 80075bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80075be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c0:	3b01      	subs	r3, #1
 80075c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80075c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	021a      	lsls	r2, r3, #8
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80075d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d2:	3301      	adds	r3, #1
 80075d4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80075d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d8:	3b01      	subs	r3, #1
 80075da:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80075dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	041a      	lsls	r2, r3, #16
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80075e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ea:	3301      	adds	r3, #1
 80075ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80075ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f0:	3b01      	subs	r3, #1
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80075f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	061a      	lsls	r2, r3, #24
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007602:	3301      	adds	r3, #1
 8007604:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007608:	3b01      	subs	r3, #1
 800760a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f107 0214 	add.w	r2, r7, #20
 8007614:	4611      	mov	r1, r2
 8007616:	4618      	mov	r0, r3
 8007618:	f004 fa21 	bl	800ba5e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800761c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800761e:	3301      	adds	r3, #1
 8007620:	643b      	str	r3, [r7, #64]	; 0x40
 8007622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007624:	2b07      	cmp	r3, #7
 8007626:	d9c4      	bls.n	80075b2 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007628:	f7fa ffb6 	bl	8002598 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007634:	429a      	cmp	r2, r3
 8007636:	d902      	bls.n	800763e <HAL_SD_WriteBlocks+0x1c6>
 8007638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800763a:	2b00      	cmp	r3, #0
 800763c:	d112      	bne.n	8007664 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a56      	ldr	r2, [pc, #344]	; (800779c <HAL_SD_WriteBlocks+0x324>)
 8007644:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800764a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800764c:	431a      	orrs	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e097      	b.n	8007794 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800766e:	2b00      	cmp	r3, #0
 8007670:	d092      	beq.n	8007598 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007680:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768c:	2b00      	cmp	r3, #0
 800768e:	d022      	beq.n	80076d6 <HAL_SD_WriteBlocks+0x25e>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d91f      	bls.n	80076d6 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769a:	2b03      	cmp	r3, #3
 800769c:	d01b      	beq.n	80076d6 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f004 fb32 	bl	800bd0c <SDMMC_CmdStopTransfer>
 80076a8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80076aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d012      	beq.n	80076d6 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a39      	ldr	r2, [pc, #228]	; (800779c <HAL_SD_WriteBlocks+0x324>)
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076be:	431a      	orrs	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e05e      	b.n	8007794 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076dc:	f003 0308 	and.w	r3, r3, #8
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d012      	beq.n	800770a <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a2c      	ldr	r2, [pc, #176]	; (800779c <HAL_SD_WriteBlocks+0x324>)
 80076ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	f043 0208 	orr.w	r2, r3, #8
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e044      	b.n	8007794 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d012      	beq.n	800773e <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1f      	ldr	r2, [pc, #124]	; (800779c <HAL_SD_WriteBlocks+0x324>)
 800771e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	f043 0202 	orr.w	r2, r3, #2
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e02a      	b.n	8007794 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b00      	cmp	r3, #0
 800774a:	d012      	beq.n	8007772 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a12      	ldr	r2, [pc, #72]	; (800779c <HAL_SD_WriteBlocks+0x324>)
 8007752:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	f043 0210 	orr.w	r2, r3, #16
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e010      	b.n	8007794 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a0a      	ldr	r2, [pc, #40]	; (80077a0 <HAL_SD_WriteBlocks+0x328>)
 8007778:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e006      	b.n	8007794 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
  }
}
 8007794:	4618      	mov	r0, r3
 8007796:	3748      	adds	r7, #72	; 0x48
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	1fe00fff 	.word	0x1fe00fff
 80077a0:	18000f3a 	.word	0x18000f3a

080077a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b2:	0f9b      	lsrs	r3, r3, #30
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077be:	0e9b      	lsrs	r3, r3, #26
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d0:	0e1b      	lsrs	r3, r3, #24
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 0303 	and.w	r3, r3, #3
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e2:	0c1b      	lsrs	r3, r3, #16
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ee:	0a1b      	lsrs	r3, r3, #8
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007804:	0d1b      	lsrs	r3, r3, #20
 8007806:	b29a      	uxth	r2, r3
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007810:	0c1b      	lsrs	r3, r3, #16
 8007812:	b2db      	uxtb	r3, r3
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	b2da      	uxtb	r2, r3
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007822:	0bdb      	lsrs	r3, r3, #15
 8007824:	b2db      	uxtb	r3, r3
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	b2da      	uxtb	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007834:	0b9b      	lsrs	r3, r3, #14
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	b2da      	uxtb	r2, r3
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007846:	0b5b      	lsrs	r3, r3, #13
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	b2da      	uxtb	r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007858:	0b1b      	lsrs	r3, r3, #12
 800785a:	b2db      	uxtb	r3, r3
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	b2da      	uxtb	r2, r3
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2200      	movs	r2, #0
 800786a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007870:	2b00      	cmp	r3, #0
 8007872:	d163      	bne.n	800793c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007878:	009a      	lsls	r2, r3, #2
 800787a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800787e:	4013      	ands	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007884:	0f92      	lsrs	r2, r2, #30
 8007886:	431a      	orrs	r2, r3
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007890:	0edb      	lsrs	r3, r3, #27
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	b2da      	uxtb	r2, r3
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078a2:	0e1b      	lsrs	r3, r3, #24
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b4:	0d5b      	lsrs	r3, r3, #21
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078c6:	0c9b      	lsrs	r3, r3, #18
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d8:	0bdb      	lsrs	r3, r3, #15
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	7e1b      	ldrb	r3, [r3, #24]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	3302      	adds	r3, #2
 80078fc:	2201      	movs	r2, #1
 80078fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007906:	fb03 f202 	mul.w	r2, r3, r2
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	7a1b      	ldrb	r3, [r3, #8]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	f003 030f 	and.w	r3, r3, #15
 8007918:	2201      	movs	r2, #1
 800791a:	409a      	lsls	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007928:	0a52      	lsrs	r2, r2, #9
 800792a:	fb03 f202 	mul.w	r2, r3, r2
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007938:	659a      	str	r2, [r3, #88]	; 0x58
 800793a:	e031      	b.n	80079a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d11d      	bne.n	8007980 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007948:	041b      	lsls	r3, r3, #16
 800794a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007952:	0c1b      	lsrs	r3, r3, #16
 8007954:	431a      	orrs	r2, r3
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	3301      	adds	r3, #1
 8007960:	029a      	lsls	r2, r3, #10
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007974:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	659a      	str	r2, [r3, #88]	; 0x58
 800797e:	e00f      	b.n	80079a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a58      	ldr	r2, [pc, #352]	; (8007ae8 <HAL_SD_GetCardCSD+0x344>)
 8007986:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e09d      	b.n	8007adc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079a4:	0b9b      	lsrs	r3, r3, #14
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079b6:	09db      	lsrs	r3, r3, #7
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d8:	0fdb      	lsrs	r3, r3, #31
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e4:	0f5b      	lsrs	r3, r3, #29
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079f6:	0e9b      	lsrs	r3, r3, #26
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a08:	0d9b      	lsrs	r3, r3, #22
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1a:	0d5b      	lsrs	r3, r3, #21
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a36:	0c1b      	lsrs	r3, r3, #16
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a4a:	0bdb      	lsrs	r3, r3, #15
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a5e:	0b9b      	lsrs	r3, r3, #14
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a72:	0b5b      	lsrs	r3, r3, #13
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a86:	0b1b      	lsrs	r3, r3, #12
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a9a:	0a9b      	lsrs	r3, r3, #10
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	f003 0303 	and.w	r3, r3, #3
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac2:	085b      	lsrs	r3, r3, #1
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	1fe00fff 	.word	0x1fe00fff

08007aec <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b094      	sub	sp, #80	; 0x50
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007afc:	f107 0308 	add.w	r3, r7, #8
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fbd4 	bl	80082b0 <SD_SendSDStatus>
 8007b08:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d011      	beq.n	8007b34 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a4f      	ldr	r2, [pc, #316]	; (8007c54 <HAL_SD_GetCardStatus+0x168>)
 8007b16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007b32:	e070      	b.n	8007c16 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	099b      	lsrs	r3, r3, #6
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	f003 0303 	and.w	r3, r3, #3
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	0a1b      	lsrs	r3, r3, #8
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	0e1b      	lsrs	r3, r3, #24
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	4313      	orrs	r3, r2
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	061a      	lsls	r2, r3, #24
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b7a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	0a1b      	lsrs	r3, r3, #8
 8007b80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007b84:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	0e1b      	lsrs	r3, r3, #24
 8007b8a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	0a1b      	lsrs	r3, r3, #8
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	0d1b      	lsrs	r3, r3, #20
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 030f 	and.w	r3, r3, #15
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	0c1b      	lsrs	r3, r3, #16
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	0a9b      	lsrs	r3, r3, #10
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	0a1b      	lsrs	r3, r3, #8
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	091b      	lsrs	r3, r3, #4
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	f003 030f 	and.w	r3, r3, #15
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	0e1b      	lsrs	r3, r3, #24
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f003 ffc4 	bl	800bbac <SDMMC_CmdBlockLength>
 8007c24:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00d      	beq.n	8007c48 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a08      	ldr	r2, [pc, #32]	; (8007c54 <HAL_SD_GetCardStatus+0x168>)
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007c48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3750      	adds	r7, #80	; 0x50
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	1fe00fff 	.word	0x1fe00fff

08007c58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007cb0:	b5b0      	push	{r4, r5, r7, lr}
 8007cb2:	b090      	sub	sp, #64	; 0x40
 8007cb4:	af04      	add	r7, sp, #16
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d02e      	beq.n	8007d2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cd6:	d106      	bne.n	8007ce6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38
 8007ce4:	e029      	b.n	8007d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cec:	d10a      	bne.n	8007d04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fbd6 	bl	80084a0 <SD_WideBus_Enable>
 8007cf4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	639a      	str	r2, [r3, #56]	; 0x38
 8007d02:	e01a      	b.n	8007d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10a      	bne.n	8007d20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fc13 	bl	8008536 <SD_WideBus_Disable>
 8007d10:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8007d1e:	e00c      	b.n	8007d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	639a      	str	r2, [r3, #56]	; 0x38
 8007d2c:	e005      	b.n	8007d3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a60      	ldr	r2, [pc, #384]	; (8007ec8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007d48:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d50:	e097      	b.n	8007e82 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007d52:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007d56:	f7fd feb9 	bl	8005acc <HAL_RCCEx_GetPeriphCLKFreq>
 8007d5a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 8086 	beq.w	8007e70 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	695a      	ldr	r2, [r3, #20]
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	4952      	ldr	r1, [pc, #328]	; (8007ecc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007d82:	fba1 1303 	umull	r1, r3, r1, r3
 8007d86:	0e1b      	lsrs	r3, r3, #24
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d303      	bcc.n	8007d94 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	61fb      	str	r3, [r7, #28]
 8007d92:	e05a      	b.n	8007e4a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d9c:	d103      	bne.n	8007da6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	61fb      	str	r3, [r7, #28]
 8007da4:	e051      	b.n	8007e4a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dae:	d126      	bne.n	8007dfe <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10e      	bne.n	8007dd6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	4a45      	ldr	r2, [pc, #276]	; (8007ed0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d906      	bls.n	8007dce <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	4a42      	ldr	r2, [pc, #264]	; (8007ecc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc8:	0e5b      	lsrs	r3, r3, #25
 8007dca:	61fb      	str	r3, [r7, #28]
 8007dcc:	e03d      	b.n	8007e4a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	61fb      	str	r3, [r7, #28]
 8007dd4:	e039      	b.n	8007e4a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de2:	4a3b      	ldr	r2, [pc, #236]	; (8007ed0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d906      	bls.n	8007df6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	4a38      	ldr	r2, [pc, #224]	; (8007ecc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007dec:	fba2 2303 	umull	r2, r3, r2, r3
 8007df0:	0e5b      	lsrs	r3, r3, #25
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	e029      	b.n	8007e4a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	61fb      	str	r3, [r7, #28]
 8007dfc:	e025      	b.n	8007e4a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10e      	bne.n	8007e24 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	4a32      	ldr	r2, [pc, #200]	; (8007ed4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d906      	bls.n	8007e1c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	4a2e      	ldr	r2, [pc, #184]	; (8007ecc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007e12:	fba2 2303 	umull	r2, r3, r2, r3
 8007e16:	0e1b      	lsrs	r3, r3, #24
 8007e18:	61fb      	str	r3, [r7, #28]
 8007e1a:	e016      	b.n	8007e4a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	61fb      	str	r3, [r7, #28]
 8007e22:	e012      	b.n	8007e4a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e30:	4a28      	ldr	r2, [pc, #160]	; (8007ed4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d906      	bls.n	8007e44 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	4a24      	ldr	r2, [pc, #144]	; (8007ecc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3e:	0e1b      	lsrs	r3, r3, #24
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	e002      	b.n	8007e4a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681d      	ldr	r5, [r3, #0]
 8007e54:	466c      	mov	r4, sp
 8007e56:	f107 0318 	add.w	r3, r7, #24
 8007e5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e62:	f107 030c 	add.w	r3, r7, #12
 8007e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e68:	4628      	mov	r0, r5
 8007e6a:	f003 fdc1 	bl	800b9f0 <SDMMC_Init>
 8007e6e:	e008      	b.n	8007e82 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f003 fe8e 	bl	800bbac <SDMMC_CmdBlockLength>
 8007e90:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00c      	beq.n	8007eb2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a0a      	ldr	r2, [pc, #40]	; (8007ec8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007eba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3730      	adds	r7, #48	; 0x30
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	1fe00fff 	.word	0x1fe00fff
 8007ecc:	55e63b89 	.word	0x55e63b89
 8007ed0:	02faf080 	.word	0x02faf080
 8007ed4:	017d7840 	.word	0x017d7840

08007ed8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ee4:	f107 030c 	add.w	r3, r7, #12
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fab0 	bl	8008450 <SD_SendStatus>
 8007ef0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	0a5b      	lsrs	r3, r3, #9
 8007f08:	f003 030f 	and.w	r3, r3, #15
 8007f0c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007f0e:	693b      	ldr	r3, [r7, #16]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f18:	b5b0      	push	{r4, r5, r7, lr}
 8007f1a:	b090      	sub	sp, #64	; 0x40
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007f20:	2301      	movs	r3, #1
 8007f22:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f003 fdbb 	bl	800baa4 <SDMMC_GetPowerState>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d102      	bne.n	8007f3a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007f38:	e0a9      	b.n	800808e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d02e      	beq.n	8007fa0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f004 f800 	bl	800bf4c <SDMMC_CmdSendCID>
 8007f4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <SD_InitCard+0x40>
    {
      return errorstate;
 8007f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f56:	e09a      	b.n	800808e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f003 fde5 	bl	800bb2e <SDMMC_GetResponse>
 8007f64:	4602      	mov	r2, r0
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2104      	movs	r1, #4
 8007f70:	4618      	mov	r0, r3
 8007f72:	f003 fddc 	bl	800bb2e <SDMMC_GetResponse>
 8007f76:	4602      	mov	r2, r0
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2108      	movs	r1, #8
 8007f82:	4618      	mov	r0, r3
 8007f84:	f003 fdd3 	bl	800bb2e <SDMMC_GetResponse>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	210c      	movs	r1, #12
 8007f94:	4618      	mov	r0, r3
 8007f96:	f003 fdca 	bl	800bb2e <SDMMC_GetResponse>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d00d      	beq.n	8007fc4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f107 020e 	add.w	r2, r7, #14
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f004 f809 	bl	800bfca <SDMMC_CmdSetRelAdd>
 8007fb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <SD_InitCard+0xac>
    {
      return errorstate;
 8007fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc2:	e064      	b.n	800808e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc8:	2b03      	cmp	r3, #3
 8007fca:	d036      	beq.n	800803a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007fcc:	89fb      	ldrh	r3, [r7, #14]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fdc:	041b      	lsls	r3, r3, #16
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	f003 ffd2 	bl	800bf8a <SDMMC_CmdSendCSD>
 8007fe6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <SD_InitCard+0xda>
    {
      return errorstate;
 8007fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff0:	e04d      	b.n	800808e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f003 fd98 	bl	800bb2e <SDMMC_GetResponse>
 8007ffe:	4602      	mov	r2, r0
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2104      	movs	r1, #4
 800800a:	4618      	mov	r0, r3
 800800c:	f003 fd8f 	bl	800bb2e <SDMMC_GetResponse>
 8008010:	4602      	mov	r2, r0
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2108      	movs	r1, #8
 800801c:	4618      	mov	r0, r3
 800801e:	f003 fd86 	bl	800bb2e <SDMMC_GetResponse>
 8008022:	4602      	mov	r2, r0
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	210c      	movs	r1, #12
 800802e:	4618      	mov	r0, r3
 8008030:	f003 fd7d 	bl	800bb2e <SDMMC_GetResponse>
 8008034:	4602      	mov	r2, r0
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2104      	movs	r1, #4
 8008040:	4618      	mov	r0, r3
 8008042:	f003 fd74 	bl	800bb2e <SDMMC_GetResponse>
 8008046:	4603      	mov	r3, r0
 8008048:	0d1a      	lsrs	r2, r3, #20
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800804e:	f107 0310 	add.w	r3, r7, #16
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff fba5 	bl	80077a4 <HAL_SD_GetCardCSD>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008060:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008064:	e013      	b.n	800808e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6819      	ldr	r1, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800806e:	041b      	lsls	r3, r3, #16
 8008070:	2200      	movs	r2, #0
 8008072:	461c      	mov	r4, r3
 8008074:	4615      	mov	r5, r2
 8008076:	4622      	mov	r2, r4
 8008078:	462b      	mov	r3, r5
 800807a:	4608      	mov	r0, r1
 800807c:	f003 fe7c 	bl	800bd78 <SDMMC_CmdSelDesel>
 8008080:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <SD_InitCard+0x174>
  {
    return errorstate;
 8008088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808a:	e000      	b.n	800808e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3740      	adds	r7, #64	; 0x40
 8008092:	46bd      	mov	sp, r7
 8008094:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008098 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61fb      	str	r3, [r7, #28]
 80080a8:	2300      	movs	r3, #0
 80080aa:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80080ac:	f7fa fa74 	bl	8002598 <HAL_GetTick>
 80080b0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f003 fe82 	bl	800bdc0 <SDMMC_CmdGoIdleState>
 80080bc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <SD_PowerON+0x30>
  {
    return errorstate;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	e0ed      	b.n	80082a4 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f003 fe95 	bl	800bdfc <SDMMC_CmdOperCond>
 80080d2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00d      	beq.n	80080f6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f003 fe6b 	bl	800bdc0 <SDMMC_CmdGoIdleState>
 80080ea:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d004      	beq.n	80080fc <SD_PowerON+0x64>
    {
      return errorstate;
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	e0d6      	b.n	80082a4 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	2b01      	cmp	r3, #1
 8008102:	d137      	bne.n	8008174 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2100      	movs	r1, #0
 800810a:	4618      	mov	r0, r3
 800810c:	f003 fe96 	bl	800be3c <SDMMC_CmdAppCommand>
 8008110:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d02d      	beq.n	8008174 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008118:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800811c:	e0c2      	b.n	80082a4 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2100      	movs	r1, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f003 fe89 	bl	800be3c <SDMMC_CmdAppCommand>
 800812a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <SD_PowerON+0x9e>
    {
      return errorstate;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	e0b6      	b.n	80082a4 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	495c      	ldr	r1, [pc, #368]	; (80082ac <SD_PowerON+0x214>)
 800813c:	4618      	mov	r0, r3
 800813e:	f003 fea0 	bl	800be82 <SDMMC_CmdAppOperCommand>
 8008142:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800814a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800814e:	e0a9      	b.n	80082a4 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2100      	movs	r1, #0
 8008156:	4618      	mov	r0, r3
 8008158:	f003 fce9 	bl	800bb2e <SDMMC_GetResponse>
 800815c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	0fdb      	lsrs	r3, r3, #31
 8008162:	2b01      	cmp	r3, #1
 8008164:	d101      	bne.n	800816a <SD_PowerON+0xd2>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <SD_PowerON+0xd4>
 800816a:	2300      	movs	r3, #0
 800816c:	61bb      	str	r3, [r7, #24]

    count++;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800817a:	4293      	cmp	r3, r2
 800817c:	d802      	bhi.n	8008184 <SD_PowerON+0xec>
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0cc      	beq.n	800811e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800818a:	4293      	cmp	r3, r2
 800818c:	d902      	bls.n	8008194 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800818e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008192:	e087      	b.n	80082a4 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d07e      	beq.n	800829c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d17a      	bne.n	80082a2 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d075      	beq.n	80082a2 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081bc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f042 0208 	orr.w	r2, r2, #8
 80081cc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f003 ff60 	bl	800c098 <SDMMC_CmdVoltageSwitch>
 80081d8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00c      	beq.n	80081fa <SD_PowerON+0x162>
        {
          return errorstate;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	e05f      	b.n	80082a4 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80081e4:	f7fa f9d8 	bl	8002598 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081f2:	d102      	bne.n	80081fa <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80081f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081f8:	e054      	b.n	80082a4 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008200:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008204:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008208:	d1ec      	bne.n	80081e4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008212:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800821e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008222:	d002      	beq.n	800822a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008224:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008228:	e03c      	b.n	80082a4 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800822a:	2001      	movs	r0, #1
 800822c:	f000 fa9e 	bl	800876c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0204 	orr.w	r2, r2, #4
 800823e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008240:	e00a      	b.n	8008258 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008242:	f7fa f9a9 	bl	8002598 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008250:	d102      	bne.n	8008258 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008252:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008256:	e025      	b.n	80082a4 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008266:	d1ec      	bne.n	8008242 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008270:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800827c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008280:	d102      	bne.n	8008288 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008282:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008286:	e00d      	b.n	80082a4 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2213      	movs	r2, #19
 800828e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008298:	639a      	str	r2, [r3, #56]	; 0x38
 800829a:	e002      	b.n	80082a2 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3720      	adds	r7, #32
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	c1100000 	.word	0xc1100000

080082b0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08c      	sub	sp, #48	; 0x30
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082ba:	f7fa f96d 	bl	8002598 <HAL_GetTick>
 80082be:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2100      	movs	r1, #0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f003 fc2f 	bl	800bb2e <SDMMC_GetResponse>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082da:	d102      	bne.n	80082e2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80082dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082e0:	e0b0      	b.n	8008444 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2140      	movs	r1, #64	; 0x40
 80082e8:	4618      	mov	r0, r3
 80082ea:	f003 fc5f 	bl	800bbac <SDMMC_CmdBlockLength>
 80082ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d005      	beq.n	8008302 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	e0a0      	b.n	8008444 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800830a:	041b      	lsls	r3, r3, #16
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f003 fd94 	bl	800be3c <SDMMC_CmdAppCommand>
 8008314:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	e08d      	b.n	8008444 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800832c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800832e:	2340      	movs	r3, #64	; 0x40
 8008330:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008332:	2360      	movs	r3, #96	; 0x60
 8008334:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008336:	2302      	movs	r3, #2
 8008338:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800833a:	2300      	movs	r3, #0
 800833c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800833e:	2301      	movs	r3, #1
 8008340:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f107 0208 	add.w	r2, r7, #8
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f003 fc01 	bl	800bb54 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4618      	mov	r0, r3
 8008358:	f003 fe7c 	bl	800c054 <SDMMC_CmdStatusRegister>
 800835c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d02b      	beq.n	80083bc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	e069      	b.n	8008444 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d013      	beq.n	80083a6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800837e:	2300      	movs	r3, #0
 8008380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008382:	e00d      	b.n	80083a0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4618      	mov	r0, r3
 800838a:	f003 fb5b 	bl	800ba44 <SDMMC_ReadFIFO>
 800838e:	4602      	mov	r2, r0
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	601a      	str	r2, [r3, #0]
        pData++;
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	3304      	adds	r3, #4
 8008398:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	3301      	adds	r3, #1
 800839e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	2b07      	cmp	r3, #7
 80083a4:	d9ee      	bls.n	8008384 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80083a6:	f7fa f8f7 	bl	8002598 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083b4:	d102      	bne.n	80083bc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80083b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083ba:	e043      	b.n	8008444 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0d2      	beq.n	8008370 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80083d8:	2308      	movs	r3, #8
 80083da:	e033      	b.n	8008444 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80083ea:	2302      	movs	r3, #2
 80083ec:	e02a      	b.n	8008444 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f4:	f003 0320 	and.w	r3, r3, #32
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d017      	beq.n	800842c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80083fc:	2320      	movs	r3, #32
 80083fe:	e021      	b.n	8008444 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f003 fb1d 	bl	800ba44 <SDMMC_ReadFIFO>
 800840a:	4602      	mov	r2, r0
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	601a      	str	r2, [r3, #0]
    pData++;
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	3304      	adds	r3, #4
 8008414:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008416:	f7fa f8bf 	bl	8002598 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008424:	d102      	bne.n	800842c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008426:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800842a:	e00b      	b.n	8008444 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e2      	bne.n	8008400 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a03      	ldr	r2, [pc, #12]	; (800844c <SD_SendSDStatus+0x19c>)
 8008440:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3730      	adds	r7, #48	; 0x30
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	18000f3a 	.word	0x18000f3a

08008450 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008460:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008464:	e018      	b.n	8008498 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800846e:	041b      	lsls	r3, r3, #16
 8008470:	4619      	mov	r1, r3
 8008472:	4610      	mov	r0, r2
 8008474:	f003 fdcb 	bl	800c00e <SDMMC_CmdSendStatus>
 8008478:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	e009      	b.n	8008498 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2100      	movs	r1, #0
 800848a:	4618      	mov	r0, r3
 800848c:	f003 fb4f 	bl	800bb2e <SDMMC_GetResponse>
 8008490:	4602      	mov	r2, r0
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80084a8:	2300      	movs	r3, #0
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	2300      	movs	r3, #0
 80084ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f003 fb39 	bl	800bb2e <SDMMC_GetResponse>
 80084bc:	4603      	mov	r3, r0
 80084be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084c6:	d102      	bne.n	80084ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80084c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084cc:	e02f      	b.n	800852e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80084ce:	f107 030c 	add.w	r3, r7, #12
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f879 	bl	80085cc <SD_FindSCR>
 80084da:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	e023      	b.n	800852e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01c      	beq.n	800852a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f8:	041b      	lsls	r3, r3, #16
 80084fa:	4619      	mov	r1, r3
 80084fc:	4610      	mov	r0, r2
 80084fe:	f003 fc9d 	bl	800be3c <SDMMC_CmdAppCommand>
 8008502:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	e00f      	b.n	800852e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2102      	movs	r1, #2
 8008514:	4618      	mov	r0, r3
 8008516:	f003 fcd4 	bl	800bec2 <SDMMC_CmdBusWidth>
 800851a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	e003      	b.n	800852e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008526:	2300      	movs	r3, #0
 8008528:	e001      	b.n	800852e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800852a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b086      	sub	sp, #24
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	2300      	movs	r3, #0
 8008544:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2100      	movs	r1, #0
 800854c:	4618      	mov	r0, r3
 800854e:	f003 faee 	bl	800bb2e <SDMMC_GetResponse>
 8008552:	4603      	mov	r3, r0
 8008554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800855c:	d102      	bne.n	8008564 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800855e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008562:	e02f      	b.n	80085c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008564:	f107 030c 	add.w	r3, r7, #12
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f82e 	bl	80085cc <SD_FindSCR>
 8008570:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	e023      	b.n	80085c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d01c      	beq.n	80085c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800858e:	041b      	lsls	r3, r3, #16
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f003 fc52 	bl	800be3c <SDMMC_CmdAppCommand>
 8008598:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	e00f      	b.n	80085c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f003 fc89 	bl	800bec2 <SDMMC_CmdBusWidth>
 80085b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	e003      	b.n	80085c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80085bc:	2300      	movs	r3, #0
 80085be:	e001      	b.n	80085c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08e      	sub	sp, #56	; 0x38
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80085d6:	f7f9 ffdf 	bl	8002598 <HAL_GetTick>
 80085da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80085e0:	2300      	movs	r3, #0
 80085e2:	60bb      	str	r3, [r7, #8]
 80085e4:	2300      	movs	r3, #0
 80085e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2108      	movs	r1, #8
 80085f2:	4618      	mov	r0, r3
 80085f4:	f003 fada 	bl	800bbac <SDMMC_CmdBlockLength>
 80085f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	e0ad      	b.n	8008760 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800860c:	041b      	lsls	r3, r3, #16
 800860e:	4619      	mov	r1, r3
 8008610:	4610      	mov	r0, r2
 8008612:	f003 fc13 	bl	800be3c <SDMMC_CmdAppCommand>
 8008616:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <SD_FindSCR+0x56>
  {
    return errorstate;
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	e09e      	b.n	8008760 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008626:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008628:	2308      	movs	r3, #8
 800862a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800862c:	2330      	movs	r3, #48	; 0x30
 800862e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008630:	2302      	movs	r3, #2
 8008632:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008634:	2300      	movs	r3, #0
 8008636:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008638:	2301      	movs	r3, #1
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f107 0210 	add.w	r2, r7, #16
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f003 fa84 	bl	800bb54 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4618      	mov	r0, r3
 8008652:	f003 fc59 	bl	800bf08 <SDMMC_CmdSendSCR>
 8008656:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	2b00      	cmp	r3, #0
 800865c:	d027      	beq.n	80086ae <SD_FindSCR+0xe2>
  {
    return errorstate;
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	e07e      	b.n	8008760 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d113      	bne.n	8008698 <SD_FindSCR+0xcc>
 8008670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008672:	2b00      	cmp	r3, #0
 8008674:	d110      	bne.n	8008698 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f003 f9e2 	bl	800ba44 <SDMMC_ReadFIFO>
 8008680:	4603      	mov	r3, r0
 8008682:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4618      	mov	r0, r3
 800868a:	f003 f9db 	bl	800ba44 <SDMMC_ReadFIFO>
 800868e:	4603      	mov	r3, r0
 8008690:	60fb      	str	r3, [r7, #12]
      index++;
 8008692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008694:	3301      	adds	r3, #1
 8008696:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008698:	f7f9 ff7e 	bl	8002598 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086a6:	d102      	bne.n	80086ae <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80086a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086ac:	e058      	b.n	8008760 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086b4:	f240 532a 	movw	r3, #1322	; 0x52a
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0d1      	beq.n	8008662 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c4:	f003 0308 	and.w	r3, r3, #8
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d005      	beq.n	80086d8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2208      	movs	r2, #8
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80086d4:	2308      	movs	r3, #8
 80086d6:	e043      	b.n	8008760 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086de:	f003 0302 	and.w	r3, r3, #2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2202      	movs	r2, #2
 80086ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80086ee:	2302      	movs	r3, #2
 80086f0:	e036      	b.n	8008760 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f8:	f003 0320 	and.w	r3, r3, #32
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2220      	movs	r2, #32
 8008706:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008708:	2320      	movs	r3, #32
 800870a:	e029      	b.n	8008760 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a15      	ldr	r2, [pc, #84]	; (8008768 <SD_FindSCR+0x19c>)
 8008712:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	061a      	lsls	r2, r3, #24
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	021b      	lsls	r3, r3, #8
 800871c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008720:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	0a1b      	lsrs	r3, r3, #8
 8008726:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800872a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	0e1b      	lsrs	r3, r3, #24
 8008730:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008734:	601a      	str	r2, [r3, #0]
    scr++;
 8008736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008738:	3304      	adds	r3, #4
 800873a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	061a      	lsls	r2, r3, #24
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008748:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	0a1b      	lsrs	r3, r3, #8
 800874e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008752:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	0e1b      	lsrs	r3, r3, #24
 8008758:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3738      	adds	r7, #56	; 0x38
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	18000f3a 	.word	0x18000f3a

0800876c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e095      	b.n	80088c0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	2b00      	cmp	r3, #0
 800879a:	d108      	bne.n	80087ae <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087a4:	d009      	beq.n	80087ba <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	61da      	str	r2, [r3, #28]
 80087ac:	e005      	b.n	80087ba <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d106      	bne.n	80087da <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7f9 fc85 	bl	80020e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2202      	movs	r2, #2
 80087de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087f0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087fa:	d902      	bls.n	8008802 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	e002      	b.n	8008808 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008806:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008810:	d007      	beq.n	8008822 <HAL_SPI_Init+0xa0>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800881a:	d002      	beq.n	8008822 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	431a      	orrs	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	431a      	orrs	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008850:	431a      	orrs	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008864:	ea42 0103 	orr.w	r1, r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	0c1b      	lsrs	r3, r3, #16
 800887e:	f003 0204 	and.w	r2, r3, #4
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	f003 0310 	and.w	r3, r3, #16
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008890:	f003 0308 	and.w	r3, r3, #8
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800889e:	ea42 0103 	orr.w	r1, r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	4613      	mov	r3, r2
 80088d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d101      	bne.n	80088ea <HAL_SPI_Transmit+0x22>
 80088e6:	2302      	movs	r3, #2
 80088e8:	e158      	b.n	8008b9c <HAL_SPI_Transmit+0x2d4>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088f2:	f7f9 fe51 	bl	8002598 <HAL_GetTick>
 80088f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088f8:	88fb      	ldrh	r3, [r7, #6]
 80088fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b01      	cmp	r3, #1
 8008906:	d002      	beq.n	800890e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008908:	2302      	movs	r3, #2
 800890a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800890c:	e13d      	b.n	8008b8a <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <HAL_SPI_Transmit+0x52>
 8008914:	88fb      	ldrh	r3, [r7, #6]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d102      	bne.n	8008920 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800891e:	e134      	b.n	8008b8a <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2203      	movs	r2, #3
 8008924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	88fa      	ldrh	r2, [r7, #6]
 8008938:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	88fa      	ldrh	r2, [r7, #6]
 800893e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800896a:	d10f      	bne.n	800898c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800897a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800898a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008996:	2b40      	cmp	r3, #64	; 0x40
 8008998:	d007      	beq.n	80089aa <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089b2:	d94b      	bls.n	8008a4c <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <HAL_SPI_Transmit+0xfa>
 80089bc:	8afb      	ldrh	r3, [r7, #22]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d13e      	bne.n	8008a40 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c6:	881a      	ldrh	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d2:	1c9a      	adds	r2, r3, #2
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089dc:	b29b      	uxth	r3, r3
 80089de:	3b01      	subs	r3, #1
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089e6:	e02b      	b.n	8008a40 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d112      	bne.n	8008a1c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	881a      	ldrh	r2, [r3, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	1c9a      	adds	r2, r3, #2
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	3b01      	subs	r3, #1
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a1a:	e011      	b.n	8008a40 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a1c:	f7f9 fdbc 	bl	8002598 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d803      	bhi.n	8008a34 <HAL_SPI_Transmit+0x16c>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a32:	d102      	bne.n	8008a3a <HAL_SPI_Transmit+0x172>
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d102      	bne.n	8008a40 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a3e:	e0a4      	b.n	8008b8a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1ce      	bne.n	80089e8 <HAL_SPI_Transmit+0x120>
 8008a4a:	e07c      	b.n	8008b46 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <HAL_SPI_Transmit+0x192>
 8008a54:	8afb      	ldrh	r3, [r7, #22]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d170      	bne.n	8008b3c <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d912      	bls.n	8008a8a <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a68:	881a      	ldrh	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	1c9a      	adds	r2, r3, #2
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	3b02      	subs	r3, #2
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a88:	e058      	b.n	8008b3c <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	330c      	adds	r3, #12
 8008a94:	7812      	ldrb	r2, [r2, #0]
 8008a96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008ab0:	e044      	b.n	8008b3c <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d12b      	bne.n	8008b18 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d912      	bls.n	8008af0 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	881a      	ldrh	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	1c9a      	adds	r2, r3, #2
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	3b02      	subs	r3, #2
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008aee:	e025      	b.n	8008b3c <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	330c      	adds	r3, #12
 8008afa:	7812      	ldrb	r2, [r2, #0]
 8008afc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b16:	e011      	b.n	8008b3c <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b18:	f7f9 fd3e 	bl	8002598 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d803      	bhi.n	8008b30 <HAL_SPI_Transmit+0x268>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b2e:	d102      	bne.n	8008b36 <HAL_SPI_Transmit+0x26e>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b3a:	e026      	b.n	8008b8a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1b5      	bne.n	8008ab2 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 fe78 	bl	8009840 <SPI_EndRxTxTransaction>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d002      	beq.n	8008b5c <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2220      	movs	r2, #32
 8008b5a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10a      	bne.n	8008b7a <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b64:	2300      	movs	r3, #0
 8008b66:	613b      	str	r3, [r7, #16]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	613b      	str	r3, [r7, #16]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	613b      	str	r3, [r7, #16]
 8008b78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	77fb      	strb	r3, [r7, #31]
 8008b86:	e000      	b.n	8008b8a <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008b88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3720      	adds	r7, #32
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b088      	sub	sp, #32
 8008ba8:	af02      	add	r7, sp, #8
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	603b      	str	r3, [r7, #0]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bc0:	d112      	bne.n	8008be8 <HAL_SPI_Receive+0x44>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10e      	bne.n	8008be8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2204      	movs	r2, #4
 8008bce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008bd2:	88fa      	ldrh	r2, [r7, #6]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 f910 	bl	8008e04 <HAL_SPI_TransmitReceive>
 8008be4:	4603      	mov	r3, r0
 8008be6:	e109      	b.n	8008dfc <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d101      	bne.n	8008bf6 <HAL_SPI_Receive+0x52>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e102      	b.n	8008dfc <HAL_SPI_Receive+0x258>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bfe:	f7f9 fccb 	bl	8002598 <HAL_GetTick>
 8008c02:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d002      	beq.n	8008c16 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008c10:	2302      	movs	r3, #2
 8008c12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c14:	e0e9      	b.n	8008dea <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <HAL_SPI_Receive+0x7e>
 8008c1c:	88fb      	ldrh	r3, [r7, #6]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d102      	bne.n	8008c28 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c26:	e0e0      	b.n	8008dea <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2204      	movs	r2, #4
 8008c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	88fa      	ldrh	r2, [r7, #6]
 8008c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	88fa      	ldrh	r2, [r7, #6]
 8008c48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c72:	d908      	bls.n	8008c86 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c82:	605a      	str	r2, [r3, #4]
 8008c84:	e007      	b.n	8008c96 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c94:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c9e:	d10f      	bne.n	8008cc0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008cbe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cca:	2b40      	cmp	r3, #64	; 0x40
 8008ccc:	d007      	beq.n	8008cde <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cdc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ce6:	d867      	bhi.n	8008db8 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ce8:	e030      	b.n	8008d4c <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d117      	bne.n	8008d28 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f103 020c 	add.w	r2, r3, #12
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	b2d2      	uxtb	r2, r2
 8008d08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	1c5a      	adds	r2, r3, #1
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008d26:	e011      	b.n	8008d4c <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d28:	f7f9 fc36 	bl	8002598 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d803      	bhi.n	8008d40 <HAL_SPI_Receive+0x19c>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d3e:	d102      	bne.n	8008d46 <HAL_SPI_Receive+0x1a2>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d102      	bne.n	8008d4c <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d4a:	e04e      	b.n	8008dea <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1c8      	bne.n	8008cea <HAL_SPI_Receive+0x146>
 8008d58:	e034      	b.n	8008dc4 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d115      	bne.n	8008d94 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	b292      	uxth	r2, r2
 8008d74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7a:	1c9a      	adds	r2, r3, #2
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008d92:	e011      	b.n	8008db8 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d94:	f7f9 fc00 	bl	8002598 <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d803      	bhi.n	8008dac <HAL_SPI_Receive+0x208>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008daa:	d102      	bne.n	8008db2 <HAL_SPI_Receive+0x20e>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008db6:	e018      	b.n	8008dea <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1ca      	bne.n	8008d5a <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 fce1 	bl	8009790 <SPI_EndRxTransaction>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	75fb      	strb	r3, [r7, #23]
 8008de6:	e000      	b.n	8008dea <HAL_SPI_Receive+0x246>
  }

error :
 8008de8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3718      	adds	r7, #24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	; 0x28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e12:	2301      	movs	r3, #1
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d101      	bne.n	8008e2a <HAL_SPI_TransmitReceive+0x26>
 8008e26:	2302      	movs	r3, #2
 8008e28:	e1fb      	b.n	8009222 <HAL_SPI_TransmitReceive+0x41e>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e32:	f7f9 fbb1 	bl	8002598 <HAL_GetTick>
 8008e36:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e3e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008e46:	887b      	ldrh	r3, [r7, #2]
 8008e48:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008e4a:	887b      	ldrh	r3, [r7, #2]
 8008e4c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e4e:	7efb      	ldrb	r3, [r7, #27]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d00e      	beq.n	8008e72 <HAL_SPI_TransmitReceive+0x6e>
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e5a:	d106      	bne.n	8008e6a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d102      	bne.n	8008e6a <HAL_SPI_TransmitReceive+0x66>
 8008e64:	7efb      	ldrb	r3, [r7, #27]
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d003      	beq.n	8008e72 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008e70:	e1cd      	b.n	800920e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d005      	beq.n	8008e84 <HAL_SPI_TransmitReceive+0x80>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <HAL_SPI_TransmitReceive+0x80>
 8008e7e:	887b      	ldrh	r3, [r7, #2]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d103      	bne.n	8008e8c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008e8a:	e1c0      	b.n	800920e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d003      	beq.n	8008ea0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2205      	movs	r2, #5
 8008e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	887a      	ldrh	r2, [r7, #2]
 8008eb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	887a      	ldrh	r2, [r7, #2]
 8008eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	887a      	ldrh	r2, [r7, #2]
 8008ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	887a      	ldrh	r2, [r7, #2]
 8008ecc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ee2:	d802      	bhi.n	8008eea <HAL_SPI_TransmitReceive+0xe6>
 8008ee4:	8a3b      	ldrh	r3, [r7, #16]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d908      	bls.n	8008efc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	e007      	b.n	8008f0c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f0a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f16:	2b40      	cmp	r3, #64	; 0x40
 8008f18:	d007      	beq.n	8008f2a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f32:	d97c      	bls.n	800902e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <HAL_SPI_TransmitReceive+0x13e>
 8008f3c:	8a7b      	ldrh	r3, [r7, #18]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d169      	bne.n	8009016 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	881a      	ldrh	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	1c9a      	adds	r2, r3, #2
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f66:	e056      	b.n	8009016 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d11b      	bne.n	8008fae <HAL_SPI_TransmitReceive+0x1aa>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d016      	beq.n	8008fae <HAL_SPI_TransmitReceive+0x1aa>
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d113      	bne.n	8008fae <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8a:	881a      	ldrh	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f96:	1c9a      	adds	r2, r3, #2
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d11c      	bne.n	8008ff6 <HAL_SPI_TransmitReceive+0x1f2>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d016      	beq.n	8008ff6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd2:	b292      	uxth	r2, r2
 8008fd4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	1c9a      	adds	r2, r3, #2
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ff6:	f7f9 facf 	bl	8002598 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009002:	429a      	cmp	r2, r3
 8009004:	d807      	bhi.n	8009016 <HAL_SPI_TransmitReceive+0x212>
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800900c:	d003      	beq.n	8009016 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009014:	e0fb      	b.n	800920e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800901a:	b29b      	uxth	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1a3      	bne.n	8008f68 <HAL_SPI_TransmitReceive+0x164>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009026:	b29b      	uxth	r3, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	d19d      	bne.n	8008f68 <HAL_SPI_TransmitReceive+0x164>
 800902c:	e0df      	b.n	80091ee <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <HAL_SPI_TransmitReceive+0x23a>
 8009036:	8a7b      	ldrh	r3, [r7, #18]
 8009038:	2b01      	cmp	r3, #1
 800903a:	f040 80cb 	bne.w	80091d4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009042:	b29b      	uxth	r3, r3
 8009044:	2b01      	cmp	r3, #1
 8009046:	d912      	bls.n	800906e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904c:	881a      	ldrh	r2, [r3, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	1c9a      	adds	r2, r3, #2
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009062:	b29b      	uxth	r3, r3
 8009064:	3b02      	subs	r3, #2
 8009066:	b29a      	uxth	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800906c:	e0b2      	b.n	80091d4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	330c      	adds	r3, #12
 8009078:	7812      	ldrb	r2, [r2, #0]
 800907a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800908a:	b29b      	uxth	r3, r3
 800908c:	3b01      	subs	r3, #1
 800908e:	b29a      	uxth	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009094:	e09e      	b.n	80091d4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d134      	bne.n	800910e <HAL_SPI_TransmitReceive+0x30a>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d02f      	beq.n	800910e <HAL_SPI_TransmitReceive+0x30a>
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d12c      	bne.n	800910e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d912      	bls.n	80090e4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c2:	881a      	ldrh	r2, [r3, #0]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	1c9a      	adds	r2, r3, #2
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090d8:	b29b      	uxth	r3, r3
 80090da:	3b02      	subs	r3, #2
 80090dc:	b29a      	uxth	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090e2:	e012      	b.n	800910a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	330c      	adds	r3, #12
 80090ee:	7812      	ldrb	r2, [r2, #0]
 80090f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f6:	1c5a      	adds	r2, r3, #1
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009100:	b29b      	uxth	r3, r3
 8009102:	3b01      	subs	r3, #1
 8009104:	b29a      	uxth	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b01      	cmp	r3, #1
 800911a:	d148      	bne.n	80091ae <HAL_SPI_TransmitReceive+0x3aa>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009122:	b29b      	uxth	r3, r3
 8009124:	2b00      	cmp	r3, #0
 8009126:	d042      	beq.n	80091ae <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800912e:	b29b      	uxth	r3, r3
 8009130:	2b01      	cmp	r3, #1
 8009132:	d923      	bls.n	800917c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913e:	b292      	uxth	r2, r2
 8009140:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009146:	1c9a      	adds	r2, r3, #2
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b02      	subs	r3, #2
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009164:	b29b      	uxth	r3, r3
 8009166:	2b01      	cmp	r3, #1
 8009168:	d81f      	bhi.n	80091aa <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009178:	605a      	str	r2, [r3, #4]
 800917a:	e016      	b.n	80091aa <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f103 020c 	add.w	r2, r3, #12
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009188:	7812      	ldrb	r2, [r2, #0]
 800918a:	b2d2      	uxtb	r2, r2
 800918c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800919e:	b29b      	uxth	r3, r3
 80091a0:	3b01      	subs	r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091aa:	2301      	movs	r3, #1
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80091ae:	f7f9 f9f3 	bl	8002598 <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d803      	bhi.n	80091c6 <HAL_SPI_TransmitReceive+0x3c2>
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c4:	d102      	bne.n	80091cc <HAL_SPI_TransmitReceive+0x3c8>
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d103      	bne.n	80091d4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80091d2:	e01c      	b.n	800920e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f47f af5b 	bne.w	8009096 <HAL_SPI_TransmitReceive+0x292>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f47f af54 	bne.w	8009096 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091ee:	69fa      	ldr	r2, [r7, #28]
 80091f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 fb24 	bl	8009840 <SPI_EndRxTxTransaction>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d006      	beq.n	800920c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2220      	movs	r2, #32
 8009208:	661a      	str	r2, [r3, #96]	; 0x60
 800920a:	e000      	b.n	800920e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800920c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800921e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009222:	4618      	mov	r0, r3
 8009224:	3728      	adds	r7, #40	; 0x28
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009244:	2b01      	cmp	r3, #1
 8009246:	d101      	bne.n	800924c <HAL_SPI_Transmit_DMA+0x20>
 8009248:	2302      	movs	r3, #2
 800924a:	e0d8      	b.n	80093fe <HAL_SPI_Transmit_DMA+0x1d2>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b01      	cmp	r3, #1
 800925e:	d002      	beq.n	8009266 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009260:	2302      	movs	r3, #2
 8009262:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009264:	e0c6      	b.n	80093f4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <HAL_SPI_Transmit_DMA+0x46>
 800926c:	88fb      	ldrh	r3, [r7, #6]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d102      	bne.n	8009278 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009276:	e0bd      	b.n	80093f4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2203      	movs	r2, #3
 800927c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	88fa      	ldrh	r2, [r7, #6]
 8009290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	88fa      	ldrh	r2, [r7, #6]
 8009296:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092c2:	d10f      	bne.n	80092e4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e8:	4a47      	ldr	r2, [pc, #284]	; (8009408 <HAL_SPI_Transmit_DMA+0x1dc>)
 80092ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f0:	4a46      	ldr	r2, [pc, #280]	; (800940c <HAL_SPI_Transmit_DMA+0x1e0>)
 80092f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f8:	4a45      	ldr	r2, [pc, #276]	; (8009410 <HAL_SPI_Transmit_DMA+0x1e4>)
 80092fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009300:	2200      	movs	r2, #0
 8009302:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009312:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800931c:	d82d      	bhi.n	800937a <HAL_SPI_Transmit_DMA+0x14e>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009328:	d127      	bne.n	800937a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800932e:	b29b      	uxth	r3, r3
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10f      	bne.n	8009358 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009346:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800934c:	b29b      	uxth	r3, r3
 800934e:	085b      	lsrs	r3, r3, #1
 8009350:	b29a      	uxth	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009356:	e010      	b.n	800937a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009366:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800936c:	b29b      	uxth	r3, r3
 800936e:	085b      	lsrs	r3, r3, #1
 8009370:	b29b      	uxth	r3, r3
 8009372:	3301      	adds	r3, #1
 8009374:	b29a      	uxth	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	4619      	mov	r1, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	330c      	adds	r3, #12
 800938a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009390:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009392:	f7f9 fa42 	bl	800281a <HAL_DMA_Start_IT>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00c      	beq.n	80093b6 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a0:	f043 0210 	orr.w	r2, r3, #16
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80093b4:	e01e      	b.n	80093f4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c0:	2b40      	cmp	r3, #64	; 0x40
 80093c2:	d007      	beq.n	80093d4 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093d2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f042 0220 	orr.w	r2, r2, #32
 80093e2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f042 0202 	orr.w	r2, r2, #2
 80093f2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	080094f7 	.word	0x080094f7
 800940c:	08009451 	.word	0x08009451
 8009410:	08009513 	.word	0x08009513

08009414 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800945e:	f7f9 f89b 	bl	8002598 <HAL_GetTick>
 8009462:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b20      	cmp	r3, #32
 8009470:	d03b      	beq.n	80094ea <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f022 0220 	bic.w	r2, r2, #32
 8009480:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f022 0202 	bic.w	r2, r2, #2
 8009490:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	2164      	movs	r1, #100	; 0x64
 8009496:	6978      	ldr	r0, [r7, #20]
 8009498:	f000 f9d2 	bl	8009840 <SPI_EndRxTxTransaction>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d005      	beq.n	80094ae <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094a6:	f043 0220 	orr.w	r2, r3, #32
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10a      	bne.n	80094cc <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2200      	movs	r2, #0
 80094d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80094e2:	6978      	ldr	r0, [r7, #20]
 80094e4:	f7ff ffaa 	bl	800943c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80094e8:	e002      	b.n	80094f0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80094ea:	6978      	ldr	r0, [r7, #20]
 80094ec:	f7ff ff92 	bl	8009414 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009502:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f7ff ff8f 	bl	8009428 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f022 0203 	bic.w	r2, r2, #3
 800952e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009534:	f043 0210 	orr.w	r2, r3, #16
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f7ff ff79 	bl	800943c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	603b      	str	r3, [r7, #0]
 8009560:	4613      	mov	r3, r2
 8009562:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009564:	f7f9 f818 	bl	8002598 <HAL_GetTick>
 8009568:	4602      	mov	r2, r0
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	1a9b      	subs	r3, r3, r2
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	4413      	add	r3, r2
 8009572:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009574:	f7f9 f810 	bl	8002598 <HAL_GetTick>
 8009578:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800957a:	4b39      	ldr	r3, [pc, #228]	; (8009660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	015b      	lsls	r3, r3, #5
 8009580:	0d1b      	lsrs	r3, r3, #20
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	fb02 f303 	mul.w	r3, r2, r3
 8009588:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800958a:	e054      	b.n	8009636 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009592:	d050      	beq.n	8009636 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009594:	f7f9 f800 	bl	8002598 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d902      	bls.n	80095aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d13d      	bne.n	8009626 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095c2:	d111      	bne.n	80095e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095cc:	d004      	beq.n	80095d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095d6:	d107      	bne.n	80095e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095f0:	d10f      	bne.n	8009612 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e017      	b.n	8009656 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	3b01      	subs	r3, #1
 8009634:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	4013      	ands	r3, r2
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	429a      	cmp	r2, r3
 8009644:	bf0c      	ite	eq
 8009646:	2301      	moveq	r3, #1
 8009648:	2300      	movne	r3, #0
 800964a:	b2db      	uxtb	r3, r3
 800964c:	461a      	mov	r2, r3
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	429a      	cmp	r2, r3
 8009652:	d19b      	bne.n	800958c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3720      	adds	r7, #32
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20000004 	.word	0x20000004

08009664 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08a      	sub	sp, #40	; 0x28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009676:	f7f8 ff8f 	bl	8002598 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	4413      	add	r3, r2
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009686:	f7f8 ff87 	bl	8002598 <HAL_GetTick>
 800968a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	330c      	adds	r3, #12
 8009692:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009694:	4b3d      	ldr	r3, [pc, #244]	; (800978c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	4613      	mov	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	00da      	lsls	r2, r3, #3
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	0d1b      	lsrs	r3, r3, #20
 80096a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096a6:	fb02 f303 	mul.w	r3, r2, r3
 80096aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80096ac:	e060      	b.n	8009770 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80096b4:	d107      	bne.n	80096c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096cc:	d050      	beq.n	8009770 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096ce:	f7f8 ff63 	bl	8002598 <HAL_GetTick>
 80096d2:	4602      	mov	r2, r0
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096da:	429a      	cmp	r2, r3
 80096dc:	d902      	bls.n	80096e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80096de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d13d      	bne.n	8009760 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096fc:	d111      	bne.n	8009722 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009706:	d004      	beq.n	8009712 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009710:	d107      	bne.n	8009722 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009720:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800972a:	d10f      	bne.n	800974c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800974a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e010      	b.n	8009782 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	3b01      	subs	r3, #1
 800976e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689a      	ldr	r2, [r3, #8]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	4013      	ands	r3, r2
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d196      	bne.n	80096ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3728      	adds	r7, #40	; 0x28
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000004 	.word	0x20000004

08009790 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af02      	add	r7, sp, #8
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097a4:	d111      	bne.n	80097ca <SPI_EndRxTransaction+0x3a>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ae:	d004      	beq.n	80097ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097b8:	d107      	bne.n	80097ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2200      	movs	r2, #0
 80097d2:	2180      	movs	r1, #128	; 0x80
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f7ff febd 	bl	8009554 <SPI_WaitFlagStateUntilTimeout>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d007      	beq.n	80097f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097e4:	f043 0220 	orr.w	r2, r3, #32
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e023      	b.n	8009838 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097f8:	d11d      	bne.n	8009836 <SPI_EndRxTransaction+0xa6>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009802:	d004      	beq.n	800980e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800980c:	d113      	bne.n	8009836 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2200      	movs	r2, #0
 8009816:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7ff ff22 	bl	8009664 <SPI_WaitFifoStateUntilTimeout>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d007      	beq.n	8009836 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800982a:	f043 0220 	orr.w	r2, r3, #32
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e000      	b.n	8009838 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af02      	add	r7, sp, #8
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2200      	movs	r2, #0
 8009854:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f7ff ff03 	bl	8009664 <SPI_WaitFifoStateUntilTimeout>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d007      	beq.n	8009874 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009868:	f043 0220 	orr.w	r2, r3, #32
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e027      	b.n	80098c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2200      	movs	r2, #0
 800987c:	2180      	movs	r1, #128	; 0x80
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff fe68 	bl	8009554 <SPI_WaitFlagStateUntilTimeout>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800988e:	f043 0220 	orr.w	r2, r3, #32
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e014      	b.n	80098c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7ff fedc 	bl	8009664 <SPI_WaitFifoStateUntilTimeout>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d007      	beq.n	80098c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b6:	f043 0220 	orr.w	r2, r3, #32
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e000      	b.n	80098c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e049      	b.n	8009972 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d106      	bne.n	80098f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7f8 fc38 	bl	8002168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3304      	adds	r3, #4
 8009908:	4619      	mov	r1, r3
 800990a:	4610      	mov	r0, r2
 800990c:	f000 fa62 	bl	8009dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e049      	b.n	8009a20 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	d106      	bne.n	80099a6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f841 	bl	8009a28 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2202      	movs	r2, #2
 80099aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3304      	adds	r3, #4
 80099b6:	4619      	mov	r1, r3
 80099b8:	4610      	mov	r0, r2
 80099ba:	f000 fa0b 	bl	8009dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	f003 0302 	and.w	r3, r3, #2
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d122      	bne.n	8009a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d11b      	bne.n	8009a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f06f 0202 	mvn.w	r2, #2
 8009a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	f003 0303 	and.w	r3, r3, #3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f98a 	bl	8009d98 <HAL_TIM_IC_CaptureCallback>
 8009a84:	e005      	b.n	8009a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f97c 	bl	8009d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f98d 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	f003 0304 	and.w	r3, r3, #4
 8009aa2:	2b04      	cmp	r3, #4
 8009aa4:	d122      	bne.n	8009aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d11b      	bne.n	8009aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f06f 0204 	mvn.w	r2, #4
 8009abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f960 	bl	8009d98 <HAL_TIM_IC_CaptureCallback>
 8009ad8:	e005      	b.n	8009ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f952 	bl	8009d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f963 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	f003 0308 	and.w	r3, r3, #8
 8009af6:	2b08      	cmp	r3, #8
 8009af8:	d122      	bne.n	8009b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	f003 0308 	and.w	r3, r3, #8
 8009b04:	2b08      	cmp	r3, #8
 8009b06:	d11b      	bne.n	8009b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f06f 0208 	mvn.w	r2, #8
 8009b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2204      	movs	r2, #4
 8009b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	f003 0303 	and.w	r3, r3, #3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f936 	bl	8009d98 <HAL_TIM_IC_CaptureCallback>
 8009b2c:	e005      	b.n	8009b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f928 	bl	8009d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f939 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	f003 0310 	and.w	r3, r3, #16
 8009b4a:	2b10      	cmp	r3, #16
 8009b4c:	d122      	bne.n	8009b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f003 0310 	and.w	r3, r3, #16
 8009b58:	2b10      	cmp	r3, #16
 8009b5a:	d11b      	bne.n	8009b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f06f 0210 	mvn.w	r2, #16
 8009b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2208      	movs	r2, #8
 8009b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f90c 	bl	8009d98 <HAL_TIM_IC_CaptureCallback>
 8009b80:	e005      	b.n	8009b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f8fe 	bl	8009d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f90f 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d10e      	bne.n	8009bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d107      	bne.n	8009bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f06f 0201 	mvn.w	r2, #1
 8009bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f8d8 	bl	8009d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bca:	2b80      	cmp	r3, #128	; 0x80
 8009bcc:	d10e      	bne.n	8009bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd8:	2b80      	cmp	r3, #128	; 0x80
 8009bda:	d107      	bne.n	8009bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fcec 	bl	800a5c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bfa:	d10e      	bne.n	8009c1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c06:	2b80      	cmp	r3, #128	; 0x80
 8009c08:	d107      	bne.n	8009c1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fcdf 	bl	800a5d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c24:	2b40      	cmp	r3, #64	; 0x40
 8009c26:	d10e      	bne.n	8009c46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c32:	2b40      	cmp	r3, #64	; 0x40
 8009c34:	d107      	bne.n	8009c46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f8bd 	bl	8009dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	f003 0320 	and.w	r3, r3, #32
 8009c50:	2b20      	cmp	r3, #32
 8009c52:	d10e      	bne.n	8009c72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	d107      	bne.n	8009c72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f06f 0220 	mvn.w	r2, #32
 8009c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fc9f 	bl	800a5b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d101      	bne.n	8009c9a <HAL_TIM_OC_ConfigChannel+0x1e>
 8009c96:	2302      	movs	r3, #2
 8009c98:	e066      	b.n	8009d68 <HAL_TIM_OC_ConfigChannel+0xec>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b14      	cmp	r3, #20
 8009ca6:	d857      	bhi.n	8009d58 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009ca8:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cae:	bf00      	nop
 8009cb0:	08009d05 	.word	0x08009d05
 8009cb4:	08009d59 	.word	0x08009d59
 8009cb8:	08009d59 	.word	0x08009d59
 8009cbc:	08009d59 	.word	0x08009d59
 8009cc0:	08009d13 	.word	0x08009d13
 8009cc4:	08009d59 	.word	0x08009d59
 8009cc8:	08009d59 	.word	0x08009d59
 8009ccc:	08009d59 	.word	0x08009d59
 8009cd0:	08009d21 	.word	0x08009d21
 8009cd4:	08009d59 	.word	0x08009d59
 8009cd8:	08009d59 	.word	0x08009d59
 8009cdc:	08009d59 	.word	0x08009d59
 8009ce0:	08009d2f 	.word	0x08009d2f
 8009ce4:	08009d59 	.word	0x08009d59
 8009ce8:	08009d59 	.word	0x08009d59
 8009cec:	08009d59 	.word	0x08009d59
 8009cf0:	08009d3d 	.word	0x08009d3d
 8009cf4:	08009d59 	.word	0x08009d59
 8009cf8:	08009d59 	.word	0x08009d59
 8009cfc:	08009d59 	.word	0x08009d59
 8009d00:	08009d4b 	.word	0x08009d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68b9      	ldr	r1, [r7, #8]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 f8fc 	bl	8009f08 <TIM_OC1_SetConfig>
      break;
 8009d10:	e025      	b.n	8009d5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 f985 	bl	800a028 <TIM_OC2_SetConfig>
      break;
 8009d1e:	e01e      	b.n	8009d5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68b9      	ldr	r1, [r7, #8]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fa08 	bl	800a13c <TIM_OC3_SetConfig>
      break;
 8009d2c:	e017      	b.n	8009d5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 fa89 	bl	800a24c <TIM_OC4_SetConfig>
      break;
 8009d3a:	e010      	b.n	8009d5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 faec 	bl	800a320 <TIM_OC5_SetConfig>
      break;
 8009d48:	e009      	b.n	8009d5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68b9      	ldr	r1, [r7, #8]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fb49 	bl	800a3e8 <TIM_OC6_SetConfig>
      break;
 8009d56:	e002      	b.n	8009d5e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3718      	adds	r7, #24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a40      	ldr	r2, [pc, #256]	; (8009ee8 <TIM_Base_SetConfig+0x114>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d013      	beq.n	8009e14 <TIM_Base_SetConfig+0x40>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df2:	d00f      	beq.n	8009e14 <TIM_Base_SetConfig+0x40>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a3d      	ldr	r2, [pc, #244]	; (8009eec <TIM_Base_SetConfig+0x118>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00b      	beq.n	8009e14 <TIM_Base_SetConfig+0x40>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a3c      	ldr	r2, [pc, #240]	; (8009ef0 <TIM_Base_SetConfig+0x11c>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d007      	beq.n	8009e14 <TIM_Base_SetConfig+0x40>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a3b      	ldr	r2, [pc, #236]	; (8009ef4 <TIM_Base_SetConfig+0x120>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d003      	beq.n	8009e14 <TIM_Base_SetConfig+0x40>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a3a      	ldr	r2, [pc, #232]	; (8009ef8 <TIM_Base_SetConfig+0x124>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d108      	bne.n	8009e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a2f      	ldr	r2, [pc, #188]	; (8009ee8 <TIM_Base_SetConfig+0x114>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d01f      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e34:	d01b      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a2c      	ldr	r2, [pc, #176]	; (8009eec <TIM_Base_SetConfig+0x118>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d017      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a2b      	ldr	r2, [pc, #172]	; (8009ef0 <TIM_Base_SetConfig+0x11c>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d013      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a2a      	ldr	r2, [pc, #168]	; (8009ef4 <TIM_Base_SetConfig+0x120>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d00f      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a29      	ldr	r2, [pc, #164]	; (8009ef8 <TIM_Base_SetConfig+0x124>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d00b      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a28      	ldr	r2, [pc, #160]	; (8009efc <TIM_Base_SetConfig+0x128>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d007      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a27      	ldr	r2, [pc, #156]	; (8009f00 <TIM_Base_SetConfig+0x12c>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d003      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a26      	ldr	r2, [pc, #152]	; (8009f04 <TIM_Base_SetConfig+0x130>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d108      	bne.n	8009e80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a10      	ldr	r2, [pc, #64]	; (8009ee8 <TIM_Base_SetConfig+0x114>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d00f      	beq.n	8009ecc <TIM_Base_SetConfig+0xf8>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a12      	ldr	r2, [pc, #72]	; (8009ef8 <TIM_Base_SetConfig+0x124>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d00b      	beq.n	8009ecc <TIM_Base_SetConfig+0xf8>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a11      	ldr	r2, [pc, #68]	; (8009efc <TIM_Base_SetConfig+0x128>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d007      	beq.n	8009ecc <TIM_Base_SetConfig+0xf8>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a10      	ldr	r2, [pc, #64]	; (8009f00 <TIM_Base_SetConfig+0x12c>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d003      	beq.n	8009ecc <TIM_Base_SetConfig+0xf8>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a0f      	ldr	r2, [pc, #60]	; (8009f04 <TIM_Base_SetConfig+0x130>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d103      	bne.n	8009ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	691a      	ldr	r2, [r3, #16]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	615a      	str	r2, [r3, #20]
}
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	40012c00 	.word	0x40012c00
 8009eec:	40000400 	.word	0x40000400
 8009ef0:	40000800 	.word	0x40000800
 8009ef4:	40000c00 	.word	0x40000c00
 8009ef8:	40013400 	.word	0x40013400
 8009efc:	40014000 	.word	0x40014000
 8009f00:	40014400 	.word	0x40014400
 8009f04:	40014800 	.word	0x40014800

08009f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	f023 0201 	bic.w	r2, r3, #1
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f023 0303 	bic.w	r3, r3, #3
 8009f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f023 0302 	bic.w	r3, r3, #2
 8009f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a2c      	ldr	r2, [pc, #176]	; (800a014 <TIM_OC1_SetConfig+0x10c>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d00f      	beq.n	8009f88 <TIM_OC1_SetConfig+0x80>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a2b      	ldr	r2, [pc, #172]	; (800a018 <TIM_OC1_SetConfig+0x110>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d00b      	beq.n	8009f88 <TIM_OC1_SetConfig+0x80>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a2a      	ldr	r2, [pc, #168]	; (800a01c <TIM_OC1_SetConfig+0x114>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d007      	beq.n	8009f88 <TIM_OC1_SetConfig+0x80>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a29      	ldr	r2, [pc, #164]	; (800a020 <TIM_OC1_SetConfig+0x118>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d003      	beq.n	8009f88 <TIM_OC1_SetConfig+0x80>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a28      	ldr	r2, [pc, #160]	; (800a024 <TIM_OC1_SetConfig+0x11c>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d10c      	bne.n	8009fa2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f023 0308 	bic.w	r3, r3, #8
 8009f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f023 0304 	bic.w	r3, r3, #4
 8009fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a1b      	ldr	r2, [pc, #108]	; (800a014 <TIM_OC1_SetConfig+0x10c>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d00f      	beq.n	8009fca <TIM_OC1_SetConfig+0xc2>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a1a      	ldr	r2, [pc, #104]	; (800a018 <TIM_OC1_SetConfig+0x110>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d00b      	beq.n	8009fca <TIM_OC1_SetConfig+0xc2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a19      	ldr	r2, [pc, #100]	; (800a01c <TIM_OC1_SetConfig+0x114>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d007      	beq.n	8009fca <TIM_OC1_SetConfig+0xc2>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a18      	ldr	r2, [pc, #96]	; (800a020 <TIM_OC1_SetConfig+0x118>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d003      	beq.n	8009fca <TIM_OC1_SetConfig+0xc2>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a17      	ldr	r2, [pc, #92]	; (800a024 <TIM_OC1_SetConfig+0x11c>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d111      	bne.n	8009fee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	685a      	ldr	r2, [r3, #4]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	621a      	str	r2, [r3, #32]
}
 800a008:	bf00      	nop
 800a00a:	371c      	adds	r7, #28
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	40012c00 	.word	0x40012c00
 800a018:	40013400 	.word	0x40013400
 800a01c:	40014000 	.word	0x40014000
 800a020:	40014400 	.word	0x40014400
 800a024:	40014800 	.word	0x40014800

0800a028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	f023 0210 	bic.w	r2, r3, #16
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a05a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	f023 0320 	bic.w	r3, r3, #32
 800a076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	011b      	lsls	r3, r3, #4
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	4313      	orrs	r3, r2
 800a082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a28      	ldr	r2, [pc, #160]	; (800a128 <TIM_OC2_SetConfig+0x100>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d003      	beq.n	800a094 <TIM_OC2_SetConfig+0x6c>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a27      	ldr	r2, [pc, #156]	; (800a12c <TIM_OC2_SetConfig+0x104>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d10d      	bne.n	800a0b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a09a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	011b      	lsls	r3, r3, #4
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a1d      	ldr	r2, [pc, #116]	; (800a128 <TIM_OC2_SetConfig+0x100>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d00f      	beq.n	800a0d8 <TIM_OC2_SetConfig+0xb0>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a1c      	ldr	r2, [pc, #112]	; (800a12c <TIM_OC2_SetConfig+0x104>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d00b      	beq.n	800a0d8 <TIM_OC2_SetConfig+0xb0>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a1b      	ldr	r2, [pc, #108]	; (800a130 <TIM_OC2_SetConfig+0x108>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d007      	beq.n	800a0d8 <TIM_OC2_SetConfig+0xb0>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a1a      	ldr	r2, [pc, #104]	; (800a134 <TIM_OC2_SetConfig+0x10c>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d003      	beq.n	800a0d8 <TIM_OC2_SetConfig+0xb0>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a19      	ldr	r2, [pc, #100]	; (800a138 <TIM_OC2_SetConfig+0x110>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d113      	bne.n	800a100 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	621a      	str	r2, [r3, #32]
}
 800a11a:	bf00      	nop
 800a11c:	371c      	adds	r7, #28
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	40012c00 	.word	0x40012c00
 800a12c:	40013400 	.word	0x40013400
 800a130:	40014000 	.word	0x40014000
 800a134:	40014400 	.word	0x40014400
 800a138:	40014800 	.word	0x40014800

0800a13c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a16a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 0303 	bic.w	r3, r3, #3
 800a176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	4313      	orrs	r3, r2
 800a180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	4313      	orrs	r3, r2
 800a194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a27      	ldr	r2, [pc, #156]	; (800a238 <TIM_OC3_SetConfig+0xfc>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d003      	beq.n	800a1a6 <TIM_OC3_SetConfig+0x6a>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a26      	ldr	r2, [pc, #152]	; (800a23c <TIM_OC3_SetConfig+0x100>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d10d      	bne.n	800a1c2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	021b      	lsls	r3, r3, #8
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a1c      	ldr	r2, [pc, #112]	; (800a238 <TIM_OC3_SetConfig+0xfc>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d00f      	beq.n	800a1ea <TIM_OC3_SetConfig+0xae>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a1b      	ldr	r2, [pc, #108]	; (800a23c <TIM_OC3_SetConfig+0x100>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00b      	beq.n	800a1ea <TIM_OC3_SetConfig+0xae>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a1a      	ldr	r2, [pc, #104]	; (800a240 <TIM_OC3_SetConfig+0x104>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d007      	beq.n	800a1ea <TIM_OC3_SetConfig+0xae>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a19      	ldr	r2, [pc, #100]	; (800a244 <TIM_OC3_SetConfig+0x108>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d003      	beq.n	800a1ea <TIM_OC3_SetConfig+0xae>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a18      	ldr	r2, [pc, #96]	; (800a248 <TIM_OC3_SetConfig+0x10c>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d113      	bne.n	800a212 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	011b      	lsls	r3, r3, #4
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	4313      	orrs	r3, r2
 800a204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	011b      	lsls	r3, r3, #4
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	4313      	orrs	r3, r2
 800a210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	621a      	str	r2, [r3, #32]
}
 800a22c:	bf00      	nop
 800a22e:	371c      	adds	r7, #28
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	40012c00 	.word	0x40012c00
 800a23c:	40013400 	.word	0x40013400
 800a240:	40014000 	.word	0x40014000
 800a244:	40014400 	.word	0x40014400
 800a248:	40014800 	.word	0x40014800

0800a24c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a27a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	021b      	lsls	r3, r3, #8
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	4313      	orrs	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a29a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	031b      	lsls	r3, r3, #12
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a18      	ldr	r2, [pc, #96]	; (800a30c <TIM_OC4_SetConfig+0xc0>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d00f      	beq.n	800a2d0 <TIM_OC4_SetConfig+0x84>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a17      	ldr	r2, [pc, #92]	; (800a310 <TIM_OC4_SetConfig+0xc4>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d00b      	beq.n	800a2d0 <TIM_OC4_SetConfig+0x84>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a16      	ldr	r2, [pc, #88]	; (800a314 <TIM_OC4_SetConfig+0xc8>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d007      	beq.n	800a2d0 <TIM_OC4_SetConfig+0x84>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a15      	ldr	r2, [pc, #84]	; (800a318 <TIM_OC4_SetConfig+0xcc>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d003      	beq.n	800a2d0 <TIM_OC4_SetConfig+0x84>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a14      	ldr	r2, [pc, #80]	; (800a31c <TIM_OC4_SetConfig+0xd0>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d109      	bne.n	800a2e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	695b      	ldr	r3, [r3, #20]
 800a2dc:	019b      	lsls	r3, r3, #6
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	621a      	str	r2, [r3, #32]
}
 800a2fe:	bf00      	nop
 800a300:	371c      	adds	r7, #28
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	40012c00 	.word	0x40012c00
 800a310:	40013400 	.word	0x40013400
 800a314:	40014000 	.word	0x40014000
 800a318:	40014400 	.word	0x40014400
 800a31c:	40014800 	.word	0x40014800

0800a320 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a1b      	ldr	r3, [r3, #32]
 800a32e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a34e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a364:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	041b      	lsls	r3, r3, #16
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	4313      	orrs	r3, r2
 800a370:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a17      	ldr	r2, [pc, #92]	; (800a3d4 <TIM_OC5_SetConfig+0xb4>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d00f      	beq.n	800a39a <TIM_OC5_SetConfig+0x7a>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <TIM_OC5_SetConfig+0xb8>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d00b      	beq.n	800a39a <TIM_OC5_SetConfig+0x7a>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a15      	ldr	r2, [pc, #84]	; (800a3dc <TIM_OC5_SetConfig+0xbc>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d007      	beq.n	800a39a <TIM_OC5_SetConfig+0x7a>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a14      	ldr	r2, [pc, #80]	; (800a3e0 <TIM_OC5_SetConfig+0xc0>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d003      	beq.n	800a39a <TIM_OC5_SetConfig+0x7a>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a13      	ldr	r2, [pc, #76]	; (800a3e4 <TIM_OC5_SetConfig+0xc4>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d109      	bne.n	800a3ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	021b      	lsls	r3, r3, #8
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	685a      	ldr	r2, [r3, #4]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	621a      	str	r2, [r3, #32]
}
 800a3c8:	bf00      	nop
 800a3ca:	371c      	adds	r7, #28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	40012c00 	.word	0x40012c00
 800a3d8:	40013400 	.word	0x40013400
 800a3dc:	40014000 	.word	0x40014000
 800a3e0:	40014400 	.word	0x40014400
 800a3e4:	40014800 	.word	0x40014800

0800a3e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a41a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	021b      	lsls	r3, r3, #8
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	4313      	orrs	r3, r2
 800a426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a42e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	051b      	lsls	r3, r3, #20
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	4313      	orrs	r3, r2
 800a43a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a18      	ldr	r2, [pc, #96]	; (800a4a0 <TIM_OC6_SetConfig+0xb8>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d00f      	beq.n	800a464 <TIM_OC6_SetConfig+0x7c>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a17      	ldr	r2, [pc, #92]	; (800a4a4 <TIM_OC6_SetConfig+0xbc>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d00b      	beq.n	800a464 <TIM_OC6_SetConfig+0x7c>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a16      	ldr	r2, [pc, #88]	; (800a4a8 <TIM_OC6_SetConfig+0xc0>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d007      	beq.n	800a464 <TIM_OC6_SetConfig+0x7c>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a15      	ldr	r2, [pc, #84]	; (800a4ac <TIM_OC6_SetConfig+0xc4>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d003      	beq.n	800a464 <TIM_OC6_SetConfig+0x7c>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a14      	ldr	r2, [pc, #80]	; (800a4b0 <TIM_OC6_SetConfig+0xc8>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d109      	bne.n	800a478 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a46a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	029b      	lsls	r3, r3, #10
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	4313      	orrs	r3, r2
 800a476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	685a      	ldr	r2, [r3, #4]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	621a      	str	r2, [r3, #32]
}
 800a492:	bf00      	nop
 800a494:	371c      	adds	r7, #28
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	40012c00 	.word	0x40012c00
 800a4a4:	40013400 	.word	0x40013400
 800a4a8:	40014000 	.word	0x40014000
 800a4ac:	40014400 	.word	0x40014400
 800a4b0:	40014800 	.word	0x40014800

0800a4b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d101      	bne.n	800a4d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4cc:	2302      	movs	r3, #2
 800a4ce:	e065      	b.n	800a59c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	4313      	orrs	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a536:	4313      	orrs	r3, r2
 800a538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	041b      	lsls	r3, r3, #16
 800a546:	4313      	orrs	r3, r2
 800a548:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a16      	ldr	r2, [pc, #88]	; (800a5a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d004      	beq.n	800a55e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a14      	ldr	r2, [pc, #80]	; (800a5ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d115      	bne.n	800a58a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a568:	051b      	lsls	r3, r3, #20
 800a56a:	4313      	orrs	r3, r2
 800a56c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	69db      	ldr	r3, [r3, #28]
 800a578:	4313      	orrs	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	4313      	orrs	r3, r2
 800a588:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	40012c00 	.word	0x40012c00
 800a5ac:	40013400 	.word	0x40013400

0800a5b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d101      	bne.n	800a5fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e042      	b.n	800a684 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a604:	2b00      	cmp	r3, #0
 800a606:	d106      	bne.n	800a616 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7f7 fdc9 	bl	80021a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2224      	movs	r2, #36	; 0x24
 800a61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 0201 	bic.w	r2, r2, #1
 800a62c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fb64 	bl	800acfc <UART_SetConfig>
 800a634:	4603      	mov	r3, r0
 800a636:	2b01      	cmp	r3, #1
 800a638:	d101      	bne.n	800a63e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e022      	b.n	800a684 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fe54 	bl	800b2f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	685a      	ldr	r2, [r3, #4]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a65a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	689a      	ldr	r2, [r3, #8]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a66a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f042 0201 	orr.w	r2, r2, #1
 800a67a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fedb 	bl	800b438 <UART_CheckIdleState>
 800a682:	4603      	mov	r3, r0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b0ba      	sub	sp, #232	; 0xe8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a6b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a6b6:	f640 030f 	movw	r3, #2063	; 0x80f
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a6c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d11b      	bne.n	800a700 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6cc:	f003 0320 	and.w	r3, r3, #32
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d015      	beq.n	800a700 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a6d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6d8:	f003 0320 	and.w	r3, r3, #32
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d105      	bne.n	800a6ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d009      	beq.n	800a700 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 82d6 	beq.w	800aca2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	4798      	blx	r3
      }
      return;
 800a6fe:	e2d0      	b.n	800aca2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800a700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 811f 	beq.w	800a948 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a70a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a70e:	4b8b      	ldr	r3, [pc, #556]	; (800a93c <HAL_UART_IRQHandler+0x2b0>)
 800a710:	4013      	ands	r3, r2
 800a712:	2b00      	cmp	r3, #0
 800a714:	d106      	bne.n	800a724 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a716:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a71a:	4b89      	ldr	r3, [pc, #548]	; (800a940 <HAL_UART_IRQHandler+0x2b4>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 8112 	beq.w	800a948 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a728:	f003 0301 	and.w	r3, r3, #1
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d011      	beq.n	800a754 <HAL_UART_IRQHandler+0xc8>
 800a730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00b      	beq.n	800a754 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2201      	movs	r2, #1
 800a742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a74a:	f043 0201 	orr.w	r2, r3, #1
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a758:	f003 0302 	and.w	r3, r3, #2
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d011      	beq.n	800a784 <HAL_UART_IRQHandler+0xf8>
 800a760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00b      	beq.n	800a784 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2202      	movs	r2, #2
 800a772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a77a:	f043 0204 	orr.w	r2, r3, #4
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a788:	f003 0304 	and.w	r3, r3, #4
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d011      	beq.n	800a7b4 <HAL_UART_IRQHandler+0x128>
 800a790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00b      	beq.n	800a7b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2204      	movs	r2, #4
 800a7a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7aa:	f043 0202 	orr.w	r2, r3, #2
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7b8:	f003 0308 	and.w	r3, r3, #8
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d017      	beq.n	800a7f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7c4:	f003 0320 	and.w	r3, r3, #32
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d105      	bne.n	800a7d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a7cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a7d0:	4b5a      	ldr	r3, [pc, #360]	; (800a93c <HAL_UART_IRQHandler+0x2b0>)
 800a7d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00b      	beq.n	800a7f0 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2208      	movs	r2, #8
 800a7de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7e6:	f043 0208 	orr.w	r2, r3, #8
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a7f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d012      	beq.n	800a822 <HAL_UART_IRQHandler+0x196>
 800a7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00c      	beq.n	800a822 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a818:	f043 0220 	orr.w	r2, r3, #32
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f000 823c 	beq.w	800aca6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d013      	beq.n	800a862 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a83a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a83e:	f003 0320 	and.w	r3, r3, #32
 800a842:	2b00      	cmp	r3, #0
 800a844:	d105      	bne.n	800a852 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a84a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d007      	beq.n	800a862 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a856:	2b00      	cmp	r3, #0
 800a858:	d003      	beq.n	800a862 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a868:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a876:	2b40      	cmp	r3, #64	; 0x40
 800a878:	d005      	beq.n	800a886 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a87a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a87e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a882:	2b00      	cmp	r3, #0
 800a884:	d04f      	beq.n	800a926 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fee9 	bl	800b65e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a896:	2b40      	cmp	r3, #64	; 0x40
 800a898:	d141      	bne.n	800a91e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a8a8:	e853 3f00 	ldrex	r3, [r3]
 800a8ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a8b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a8c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a8ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a8d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a8d6:	e841 2300 	strex	r3, r2, [r1]
 800a8da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a8de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1d9      	bne.n	800a89a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d013      	beq.n	800a916 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8f2:	4a14      	ldr	r2, [pc, #80]	; (800a944 <HAL_UART_IRQHandler+0x2b8>)
 800a8f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7f8 f864 	bl	80029c8 <HAL_DMA_Abort_IT>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d017      	beq.n	800a936 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a910:	4610      	mov	r0, r2
 800a912:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a914:	e00f      	b.n	800a936 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f9da 	bl	800acd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a91c:	e00b      	b.n	800a936 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f9d6 	bl	800acd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a924:	e007      	b.n	800a936 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f9d2 	bl	800acd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a934:	e1b7      	b.n	800aca6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a936:	bf00      	nop
    return;
 800a938:	e1b5      	b.n	800aca6 <HAL_UART_IRQHandler+0x61a>
 800a93a:	bf00      	nop
 800a93c:	10000001 	.word	0x10000001
 800a940:	04000120 	.word	0x04000120
 800a944:	0800b72b 	.word	0x0800b72b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	f040 814a 	bne.w	800abe6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a956:	f003 0310 	and.w	r3, r3, #16
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f000 8143 	beq.w	800abe6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a964:	f003 0310 	and.w	r3, r3, #16
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 813c 	beq.w	800abe6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2210      	movs	r2, #16
 800a974:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a980:	2b40      	cmp	r3, #64	; 0x40
 800a982:	f040 80b5 	bne.w	800aaf0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a992:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 8187 	beq.w	800acaa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	f080 817f 	bcs.w	800acaa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0320 	and.w	r3, r3, #32
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f040 8086 	bne.w	800aad4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9d4:	e853 3f00 	ldrex	r3, [r3]
 800a9d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a9dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a9f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a9fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa02:	e841 2300 	strex	r3, r2, [r1]
 800aa06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1da      	bne.n	800a9c8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3308      	adds	r3, #8
 800aa18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa1c:	e853 3f00 	ldrex	r3, [r3]
 800aa20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa24:	f023 0301 	bic.w	r3, r3, #1
 800aa28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3308      	adds	r3, #8
 800aa32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e1      	bne.n	800aa12 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3308      	adds	r3, #8
 800aa54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	3308      	adds	r3, #8
 800aa6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aa72:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aa74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa7a:	e841 2300 	strex	r3, r2, [r1]
 800aa7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1e3      	bne.n	800aa4e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2220      	movs	r2, #32
 800aa8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa9c:	e853 3f00 	ldrex	r3, [r3]
 800aaa0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aaa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaa4:	f023 0310 	bic.w	r3, r3, #16
 800aaa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	461a      	mov	r2, r3
 800aab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aab6:	65bb      	str	r3, [r7, #88]	; 0x58
 800aab8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aabc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aabe:	e841 2300 	strex	r3, r2, [r1]
 800aac2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e4      	bne.n	800aa94 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aace:	4618      	mov	r0, r3
 800aad0:	f7f7 ff1e 	bl	8002910 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f8fb 	bl	800ace4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aaee:	e0dc      	b.n	800acaa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 80ce 	beq.w	800acae <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800ab12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 80c9 	beq.w	800acae <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab24:	e853 3f00 	ldrex	r3, [r3]
 800ab28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab3e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab46:	e841 2300 	strex	r3, r2, [r1]
 800ab4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1e4      	bne.n	800ab1c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3308      	adds	r3, #8
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	623b      	str	r3, [r7, #32]
   return(result);
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab68:	f023 0301 	bic.w	r3, r3, #1
 800ab6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3308      	adds	r3, #8
 800ab76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ab7a:	633a      	str	r2, [r7, #48]	; 0x30
 800ab7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab82:	e841 2300 	strex	r3, r2, [r1]
 800ab86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1e1      	bne.n	800ab52 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2220      	movs	r2, #32
 800ab92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	e853 3f00 	ldrex	r3, [r3]
 800abae:	60fb      	str	r3, [r7, #12]
   return(result);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f023 0310 	bic.w	r3, r3, #16
 800abb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	461a      	mov	r2, r3
 800abc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800abc4:	61fb      	str	r3, [r7, #28]
 800abc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc8:	69b9      	ldr	r1, [r7, #24]
 800abca:	69fa      	ldr	r2, [r7, #28]
 800abcc:	e841 2300 	strex	r3, r2, [r1]
 800abd0:	617b      	str	r3, [r7, #20]
   return(result);
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1e4      	bne.n	800aba2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f880 	bl	800ace4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800abe4:	e063      	b.n	800acae <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800abe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00e      	beq.n	800ac10 <HAL_UART_IRQHandler+0x584>
 800abf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d008      	beq.n	800ac10 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ac06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fdcf 	bl	800b7ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac0e:	e051      	b.n	800acb4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ac10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d014      	beq.n	800ac46 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ac1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d105      	bne.n	800ac34 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ac28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d008      	beq.n	800ac46 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d03a      	beq.n	800acb2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	4798      	blx	r3
    }
    return;
 800ac44:	e035      	b.n	800acb2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d009      	beq.n	800ac66 <HAL_UART_IRQHandler+0x5da>
 800ac52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fd79 	bl	800b756 <UART_EndTransmit_IT>
    return;
 800ac64:	e026      	b.n	800acb4 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ac66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d009      	beq.n	800ac86 <HAL_UART_IRQHandler+0x5fa>
 800ac72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d003      	beq.n	800ac86 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fda8 	bl	800b7d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac84:	e016      	b.n	800acb4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ac86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d010      	beq.n	800acb4 <HAL_UART_IRQHandler+0x628>
 800ac92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	da0c      	bge.n	800acb4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fd90 	bl	800b7c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aca0:	e008      	b.n	800acb4 <HAL_UART_IRQHandler+0x628>
      return;
 800aca2:	bf00      	nop
 800aca4:	e006      	b.n	800acb4 <HAL_UART_IRQHandler+0x628>
    return;
 800aca6:	bf00      	nop
 800aca8:	e004      	b.n	800acb4 <HAL_UART_IRQHandler+0x628>
      return;
 800acaa:	bf00      	nop
 800acac:	e002      	b.n	800acb4 <HAL_UART_IRQHandler+0x628>
      return;
 800acae:	bf00      	nop
 800acb0:	e000      	b.n	800acb4 <HAL_UART_IRQHandler+0x628>
    return;
 800acb2:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800acb4:	37e8      	adds	r7, #232	; 0xe8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop

0800acbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	460b      	mov	r3, r1
 800acee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad00:	b08c      	sub	sp, #48	; 0x30
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	431a      	orrs	r2, r3
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	69db      	ldr	r3, [r3, #28]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	4baa      	ldr	r3, [pc, #680]	; (800afd4 <UART_SetConfig+0x2d8>)
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	6812      	ldr	r2, [r2, #0]
 800ad32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad34:	430b      	orrs	r3, r1
 800ad36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	68da      	ldr	r2, [r3, #12]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a9f      	ldr	r2, [pc, #636]	; (800afd8 <UART_SetConfig+0x2dc>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d004      	beq.n	800ad68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad64:	4313      	orrs	r3, r2
 800ad66:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ad72:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	6812      	ldr	r2, [r2, #0]
 800ad7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad7c:	430b      	orrs	r3, r1
 800ad7e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad86:	f023 010f 	bic.w	r1, r3, #15
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a90      	ldr	r2, [pc, #576]	; (800afdc <UART_SetConfig+0x2e0>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d125      	bne.n	800adec <UART_SetConfig+0xf0>
 800ada0:	4b8f      	ldr	r3, [pc, #572]	; (800afe0 <UART_SetConfig+0x2e4>)
 800ada2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada6:	f003 0303 	and.w	r3, r3, #3
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d81a      	bhi.n	800ade4 <UART_SetConfig+0xe8>
 800adae:	a201      	add	r2, pc, #4	; (adr r2, 800adb4 <UART_SetConfig+0xb8>)
 800adb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb4:	0800adc5 	.word	0x0800adc5
 800adb8:	0800add5 	.word	0x0800add5
 800adbc:	0800adcd 	.word	0x0800adcd
 800adc0:	0800addd 	.word	0x0800addd
 800adc4:	2301      	movs	r3, #1
 800adc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adca:	e116      	b.n	800affa <UART_SetConfig+0x2fe>
 800adcc:	2302      	movs	r3, #2
 800adce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800add2:	e112      	b.n	800affa <UART_SetConfig+0x2fe>
 800add4:	2304      	movs	r3, #4
 800add6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adda:	e10e      	b.n	800affa <UART_SetConfig+0x2fe>
 800addc:	2308      	movs	r3, #8
 800adde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ade2:	e10a      	b.n	800affa <UART_SetConfig+0x2fe>
 800ade4:	2310      	movs	r3, #16
 800ade6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adea:	e106      	b.n	800affa <UART_SetConfig+0x2fe>
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a7c      	ldr	r2, [pc, #496]	; (800afe4 <UART_SetConfig+0x2e8>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d138      	bne.n	800ae68 <UART_SetConfig+0x16c>
 800adf6:	4b7a      	ldr	r3, [pc, #488]	; (800afe0 <UART_SetConfig+0x2e4>)
 800adf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adfc:	f003 030c 	and.w	r3, r3, #12
 800ae00:	2b0c      	cmp	r3, #12
 800ae02:	d82d      	bhi.n	800ae60 <UART_SetConfig+0x164>
 800ae04:	a201      	add	r2, pc, #4	; (adr r2, 800ae0c <UART_SetConfig+0x110>)
 800ae06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0a:	bf00      	nop
 800ae0c:	0800ae41 	.word	0x0800ae41
 800ae10:	0800ae61 	.word	0x0800ae61
 800ae14:	0800ae61 	.word	0x0800ae61
 800ae18:	0800ae61 	.word	0x0800ae61
 800ae1c:	0800ae51 	.word	0x0800ae51
 800ae20:	0800ae61 	.word	0x0800ae61
 800ae24:	0800ae61 	.word	0x0800ae61
 800ae28:	0800ae61 	.word	0x0800ae61
 800ae2c:	0800ae49 	.word	0x0800ae49
 800ae30:	0800ae61 	.word	0x0800ae61
 800ae34:	0800ae61 	.word	0x0800ae61
 800ae38:	0800ae61 	.word	0x0800ae61
 800ae3c:	0800ae59 	.word	0x0800ae59
 800ae40:	2300      	movs	r3, #0
 800ae42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae46:	e0d8      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae48:	2302      	movs	r3, #2
 800ae4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae4e:	e0d4      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae50:	2304      	movs	r3, #4
 800ae52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae56:	e0d0      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae58:	2308      	movs	r3, #8
 800ae5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae5e:	e0cc      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae60:	2310      	movs	r3, #16
 800ae62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae66:	e0c8      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a5e      	ldr	r2, [pc, #376]	; (800afe8 <UART_SetConfig+0x2ec>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d125      	bne.n	800aebe <UART_SetConfig+0x1c2>
 800ae72:	4b5b      	ldr	r3, [pc, #364]	; (800afe0 <UART_SetConfig+0x2e4>)
 800ae74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ae7c:	2b30      	cmp	r3, #48	; 0x30
 800ae7e:	d016      	beq.n	800aeae <UART_SetConfig+0x1b2>
 800ae80:	2b30      	cmp	r3, #48	; 0x30
 800ae82:	d818      	bhi.n	800aeb6 <UART_SetConfig+0x1ba>
 800ae84:	2b20      	cmp	r3, #32
 800ae86:	d00a      	beq.n	800ae9e <UART_SetConfig+0x1a2>
 800ae88:	2b20      	cmp	r3, #32
 800ae8a:	d814      	bhi.n	800aeb6 <UART_SetConfig+0x1ba>
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <UART_SetConfig+0x19a>
 800ae90:	2b10      	cmp	r3, #16
 800ae92:	d008      	beq.n	800aea6 <UART_SetConfig+0x1aa>
 800ae94:	e00f      	b.n	800aeb6 <UART_SetConfig+0x1ba>
 800ae96:	2300      	movs	r3, #0
 800ae98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae9c:	e0ad      	b.n	800affa <UART_SetConfig+0x2fe>
 800ae9e:	2302      	movs	r3, #2
 800aea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aea4:	e0a9      	b.n	800affa <UART_SetConfig+0x2fe>
 800aea6:	2304      	movs	r3, #4
 800aea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aeac:	e0a5      	b.n	800affa <UART_SetConfig+0x2fe>
 800aeae:	2308      	movs	r3, #8
 800aeb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aeb4:	e0a1      	b.n	800affa <UART_SetConfig+0x2fe>
 800aeb6:	2310      	movs	r3, #16
 800aeb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aebc:	e09d      	b.n	800affa <UART_SetConfig+0x2fe>
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a4a      	ldr	r2, [pc, #296]	; (800afec <UART_SetConfig+0x2f0>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d125      	bne.n	800af14 <UART_SetConfig+0x218>
 800aec8:	4b45      	ldr	r3, [pc, #276]	; (800afe0 <UART_SetConfig+0x2e4>)
 800aeca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aece:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aed2:	2bc0      	cmp	r3, #192	; 0xc0
 800aed4:	d016      	beq.n	800af04 <UART_SetConfig+0x208>
 800aed6:	2bc0      	cmp	r3, #192	; 0xc0
 800aed8:	d818      	bhi.n	800af0c <UART_SetConfig+0x210>
 800aeda:	2b80      	cmp	r3, #128	; 0x80
 800aedc:	d00a      	beq.n	800aef4 <UART_SetConfig+0x1f8>
 800aede:	2b80      	cmp	r3, #128	; 0x80
 800aee0:	d814      	bhi.n	800af0c <UART_SetConfig+0x210>
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d002      	beq.n	800aeec <UART_SetConfig+0x1f0>
 800aee6:	2b40      	cmp	r3, #64	; 0x40
 800aee8:	d008      	beq.n	800aefc <UART_SetConfig+0x200>
 800aeea:	e00f      	b.n	800af0c <UART_SetConfig+0x210>
 800aeec:	2300      	movs	r3, #0
 800aeee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aef2:	e082      	b.n	800affa <UART_SetConfig+0x2fe>
 800aef4:	2302      	movs	r3, #2
 800aef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aefa:	e07e      	b.n	800affa <UART_SetConfig+0x2fe>
 800aefc:	2304      	movs	r3, #4
 800aefe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af02:	e07a      	b.n	800affa <UART_SetConfig+0x2fe>
 800af04:	2308      	movs	r3, #8
 800af06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af0a:	e076      	b.n	800affa <UART_SetConfig+0x2fe>
 800af0c:	2310      	movs	r3, #16
 800af0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af12:	e072      	b.n	800affa <UART_SetConfig+0x2fe>
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a35      	ldr	r2, [pc, #212]	; (800aff0 <UART_SetConfig+0x2f4>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d12a      	bne.n	800af74 <UART_SetConfig+0x278>
 800af1e:	4b30      	ldr	r3, [pc, #192]	; (800afe0 <UART_SetConfig+0x2e4>)
 800af20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af2c:	d01a      	beq.n	800af64 <UART_SetConfig+0x268>
 800af2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af32:	d81b      	bhi.n	800af6c <UART_SetConfig+0x270>
 800af34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af38:	d00c      	beq.n	800af54 <UART_SetConfig+0x258>
 800af3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af3e:	d815      	bhi.n	800af6c <UART_SetConfig+0x270>
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <UART_SetConfig+0x250>
 800af44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af48:	d008      	beq.n	800af5c <UART_SetConfig+0x260>
 800af4a:	e00f      	b.n	800af6c <UART_SetConfig+0x270>
 800af4c:	2300      	movs	r3, #0
 800af4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af52:	e052      	b.n	800affa <UART_SetConfig+0x2fe>
 800af54:	2302      	movs	r3, #2
 800af56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af5a:	e04e      	b.n	800affa <UART_SetConfig+0x2fe>
 800af5c:	2304      	movs	r3, #4
 800af5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af62:	e04a      	b.n	800affa <UART_SetConfig+0x2fe>
 800af64:	2308      	movs	r3, #8
 800af66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af6a:	e046      	b.n	800affa <UART_SetConfig+0x2fe>
 800af6c:	2310      	movs	r3, #16
 800af6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af72:	e042      	b.n	800affa <UART_SetConfig+0x2fe>
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a17      	ldr	r2, [pc, #92]	; (800afd8 <UART_SetConfig+0x2dc>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d13a      	bne.n	800aff4 <UART_SetConfig+0x2f8>
 800af7e:	4b18      	ldr	r3, [pc, #96]	; (800afe0 <UART_SetConfig+0x2e4>)
 800af80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800af88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af8c:	d01a      	beq.n	800afc4 <UART_SetConfig+0x2c8>
 800af8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af92:	d81b      	bhi.n	800afcc <UART_SetConfig+0x2d0>
 800af94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af98:	d00c      	beq.n	800afb4 <UART_SetConfig+0x2b8>
 800af9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af9e:	d815      	bhi.n	800afcc <UART_SetConfig+0x2d0>
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d003      	beq.n	800afac <UART_SetConfig+0x2b0>
 800afa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afa8:	d008      	beq.n	800afbc <UART_SetConfig+0x2c0>
 800afaa:	e00f      	b.n	800afcc <UART_SetConfig+0x2d0>
 800afac:	2300      	movs	r3, #0
 800afae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afb2:	e022      	b.n	800affa <UART_SetConfig+0x2fe>
 800afb4:	2302      	movs	r3, #2
 800afb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afba:	e01e      	b.n	800affa <UART_SetConfig+0x2fe>
 800afbc:	2304      	movs	r3, #4
 800afbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afc2:	e01a      	b.n	800affa <UART_SetConfig+0x2fe>
 800afc4:	2308      	movs	r3, #8
 800afc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afca:	e016      	b.n	800affa <UART_SetConfig+0x2fe>
 800afcc:	2310      	movs	r3, #16
 800afce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afd2:	e012      	b.n	800affa <UART_SetConfig+0x2fe>
 800afd4:	cfff69f3 	.word	0xcfff69f3
 800afd8:	40008000 	.word	0x40008000
 800afdc:	40013800 	.word	0x40013800
 800afe0:	40021000 	.word	0x40021000
 800afe4:	40004400 	.word	0x40004400
 800afe8:	40004800 	.word	0x40004800
 800afec:	40004c00 	.word	0x40004c00
 800aff0:	40005000 	.word	0x40005000
 800aff4:	2310      	movs	r3, #16
 800aff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4aae      	ldr	r2, [pc, #696]	; (800b2b8 <UART_SetConfig+0x5bc>)
 800b000:	4293      	cmp	r3, r2
 800b002:	f040 8097 	bne.w	800b134 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b00a:	2b08      	cmp	r3, #8
 800b00c:	d823      	bhi.n	800b056 <UART_SetConfig+0x35a>
 800b00e:	a201      	add	r2, pc, #4	; (adr r2, 800b014 <UART_SetConfig+0x318>)
 800b010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b014:	0800b039 	.word	0x0800b039
 800b018:	0800b057 	.word	0x0800b057
 800b01c:	0800b041 	.word	0x0800b041
 800b020:	0800b057 	.word	0x0800b057
 800b024:	0800b047 	.word	0x0800b047
 800b028:	0800b057 	.word	0x0800b057
 800b02c:	0800b057 	.word	0x0800b057
 800b030:	0800b057 	.word	0x0800b057
 800b034:	0800b04f 	.word	0x0800b04f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b038:	f7fa f900 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 800b03c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b03e:	e010      	b.n	800b062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b040:	4b9e      	ldr	r3, [pc, #632]	; (800b2bc <UART_SetConfig+0x5c0>)
 800b042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b044:	e00d      	b.n	800b062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b046:	f7fa f861 	bl	800510c <HAL_RCC_GetSysClockFreq>
 800b04a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b04c:	e009      	b.n	800b062 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b04e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b054:	e005      	b.n	800b062 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b056:	2300      	movs	r3, #0
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b060:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 8130 	beq.w	800b2ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	4a94      	ldr	r2, [pc, #592]	; (800b2c0 <UART_SetConfig+0x5c4>)
 800b070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b074:	461a      	mov	r2, r3
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	fbb3 f3f2 	udiv	r3, r3, r2
 800b07c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	4613      	mov	r3, r2
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	4413      	add	r3, r2
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d305      	bcc.n	800b09a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b094:	69ba      	ldr	r2, [r7, #24]
 800b096:	429a      	cmp	r2, r3
 800b098:	d903      	bls.n	800b0a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b0a0:	e113      	b.n	800b2ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	60bb      	str	r3, [r7, #8]
 800b0a8:	60fa      	str	r2, [r7, #12]
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ae:	4a84      	ldr	r2, [pc, #528]	; (800b2c0 <UART_SetConfig+0x5c4>)
 800b0b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	603b      	str	r3, [r7, #0]
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b0c4:	f7f5 fd88 	bl	8000bd8 <__aeabi_uldivmod>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	f04f 0200 	mov.w	r2, #0
 800b0d4:	f04f 0300 	mov.w	r3, #0
 800b0d8:	020b      	lsls	r3, r1, #8
 800b0da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b0de:	0202      	lsls	r2, r0, #8
 800b0e0:	6979      	ldr	r1, [r7, #20]
 800b0e2:	6849      	ldr	r1, [r1, #4]
 800b0e4:	0849      	lsrs	r1, r1, #1
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	eb12 0804 	adds.w	r8, r2, r4
 800b0f0:	eb43 0905 	adc.w	r9, r3, r5
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	469a      	mov	sl, r3
 800b0fc:	4693      	mov	fp, r2
 800b0fe:	4652      	mov	r2, sl
 800b100:	465b      	mov	r3, fp
 800b102:	4640      	mov	r0, r8
 800b104:	4649      	mov	r1, r9
 800b106:	f7f5 fd67 	bl	8000bd8 <__aeabi_uldivmod>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4613      	mov	r3, r2
 800b110:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b118:	d308      	bcc.n	800b12c <UART_SetConfig+0x430>
 800b11a:	6a3b      	ldr	r3, [r7, #32]
 800b11c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b120:	d204      	bcs.n	800b12c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	6a3a      	ldr	r2, [r7, #32]
 800b128:	60da      	str	r2, [r3, #12]
 800b12a:	e0ce      	b.n	800b2ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b132:	e0ca      	b.n	800b2ca <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	69db      	ldr	r3, [r3, #28]
 800b138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b13c:	d166      	bne.n	800b20c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b13e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b142:	2b08      	cmp	r3, #8
 800b144:	d827      	bhi.n	800b196 <UART_SetConfig+0x49a>
 800b146:	a201      	add	r2, pc, #4	; (adr r2, 800b14c <UART_SetConfig+0x450>)
 800b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14c:	0800b171 	.word	0x0800b171
 800b150:	0800b179 	.word	0x0800b179
 800b154:	0800b181 	.word	0x0800b181
 800b158:	0800b197 	.word	0x0800b197
 800b15c:	0800b187 	.word	0x0800b187
 800b160:	0800b197 	.word	0x0800b197
 800b164:	0800b197 	.word	0x0800b197
 800b168:	0800b197 	.word	0x0800b197
 800b16c:	0800b18f 	.word	0x0800b18f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b170:	f7fa f864 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 800b174:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b176:	e014      	b.n	800b1a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b178:	f7fa f876 	bl	8005268 <HAL_RCC_GetPCLK2Freq>
 800b17c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b17e:	e010      	b.n	800b1a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b180:	4b4e      	ldr	r3, [pc, #312]	; (800b2bc <UART_SetConfig+0x5c0>)
 800b182:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b184:	e00d      	b.n	800b1a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b186:	f7f9 ffc1 	bl	800510c <HAL_RCC_GetSysClockFreq>
 800b18a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b18c:	e009      	b.n	800b1a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b18e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b192:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b194:	e005      	b.n	800b1a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b196:	2300      	movs	r3, #0
 800b198:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b19a:	2301      	movs	r3, #1
 800b19c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b1a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f000 8090 	beq.w	800b2ca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ae:	4a44      	ldr	r2, [pc, #272]	; (800b2c0 <UART_SetConfig+0x5c4>)
 800b1b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1bc:	005a      	lsls	r2, r3, #1
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	085b      	lsrs	r3, r3, #1
 800b1c4:	441a      	add	r2, r3
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	2b0f      	cmp	r3, #15
 800b1d4:	d916      	bls.n	800b204 <UART_SetConfig+0x508>
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1dc:	d212      	bcs.n	800b204 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	f023 030f 	bic.w	r3, r3, #15
 800b1e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	085b      	lsrs	r3, r3, #1
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	f003 0307 	and.w	r3, r3, #7
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	8bfb      	ldrh	r3, [r7, #30]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	8bfa      	ldrh	r2, [r7, #30]
 800b200:	60da      	str	r2, [r3, #12]
 800b202:	e062      	b.n	800b2ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b20a:	e05e      	b.n	800b2ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b20c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b210:	2b08      	cmp	r3, #8
 800b212:	d828      	bhi.n	800b266 <UART_SetConfig+0x56a>
 800b214:	a201      	add	r2, pc, #4	; (adr r2, 800b21c <UART_SetConfig+0x520>)
 800b216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21a:	bf00      	nop
 800b21c:	0800b241 	.word	0x0800b241
 800b220:	0800b249 	.word	0x0800b249
 800b224:	0800b251 	.word	0x0800b251
 800b228:	0800b267 	.word	0x0800b267
 800b22c:	0800b257 	.word	0x0800b257
 800b230:	0800b267 	.word	0x0800b267
 800b234:	0800b267 	.word	0x0800b267
 800b238:	0800b267 	.word	0x0800b267
 800b23c:	0800b25f 	.word	0x0800b25f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b240:	f7f9 fffc 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 800b244:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b246:	e014      	b.n	800b272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b248:	f7fa f80e 	bl	8005268 <HAL_RCC_GetPCLK2Freq>
 800b24c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b24e:	e010      	b.n	800b272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b250:	4b1a      	ldr	r3, [pc, #104]	; (800b2bc <UART_SetConfig+0x5c0>)
 800b252:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b254:	e00d      	b.n	800b272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b256:	f7f9 ff59 	bl	800510c <HAL_RCC_GetSysClockFreq>
 800b25a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b25c:	e009      	b.n	800b272 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b25e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b262:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b264:	e005      	b.n	800b272 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b266:	2300      	movs	r3, #0
 800b268:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b270:	bf00      	nop
    }

    if (pclk != 0U)
 800b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b274:	2b00      	cmp	r3, #0
 800b276:	d028      	beq.n	800b2ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27c:	4a10      	ldr	r2, [pc, #64]	; (800b2c0 <UART_SetConfig+0x5c4>)
 800b27e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b282:	461a      	mov	r2, r3
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	fbb3 f2f2 	udiv	r2, r3, r2
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	085b      	lsrs	r3, r3, #1
 800b290:	441a      	add	r2, r3
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	fbb2 f3f3 	udiv	r3, r2, r3
 800b29a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b29c:	6a3b      	ldr	r3, [r7, #32]
 800b29e:	2b0f      	cmp	r3, #15
 800b2a0:	d910      	bls.n	800b2c4 <UART_SetConfig+0x5c8>
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2a8:	d20c      	bcs.n	800b2c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	60da      	str	r2, [r3, #12]
 800b2b4:	e009      	b.n	800b2ca <UART_SetConfig+0x5ce>
 800b2b6:	bf00      	nop
 800b2b8:	40008000 	.word	0x40008000
 800b2bc:	00f42400 	.word	0x00f42400
 800b2c0:	080130cc 	.word	0x080130cc
      }
      else
      {
        ret = HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b2e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3730      	adds	r7, #48	; 0x30
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b2f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00a      	beq.n	800b31e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	430a      	orrs	r2, r1
 800b31c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b322:	f003 0302 	and.w	r3, r3, #2
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00a      	beq.n	800b340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	430a      	orrs	r2, r1
 800b33e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b344:	f003 0304 	and.w	r3, r3, #4
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00a      	beq.n	800b362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b366:	f003 0308 	and.w	r3, r3, #8
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00a      	beq.n	800b384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	430a      	orrs	r2, r1
 800b382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b388:	f003 0310 	and.w	r3, r3, #16
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00a      	beq.n	800b3a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	430a      	orrs	r2, r1
 800b3a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3aa:	f003 0320 	and.w	r3, r3, #32
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00a      	beq.n	800b3c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	430a      	orrs	r2, r1
 800b3c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d01a      	beq.n	800b40a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3f2:	d10a      	bne.n	800b40a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	430a      	orrs	r2, r1
 800b408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00a      	beq.n	800b42c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	430a      	orrs	r2, r1
 800b42a:	605a      	str	r2, [r3, #4]
  }
}
 800b42c:	bf00      	nop
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af02      	add	r7, sp, #8
 800b43e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b448:	f7f7 f8a6 	bl	8002598 <HAL_GetTick>
 800b44c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0308 	and.w	r3, r3, #8
 800b458:	2b08      	cmp	r3, #8
 800b45a:	d10e      	bne.n	800b47a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b45c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f82f 	bl	800b4ce <UART_WaitOnFlagUntilTimeout>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b476:	2303      	movs	r3, #3
 800b478:	e025      	b.n	800b4c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0304 	and.w	r3, r3, #4
 800b484:	2b04      	cmp	r3, #4
 800b486:	d10e      	bne.n	800b4a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f819 	bl	800b4ce <UART_WaitOnFlagUntilTimeout>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e00f      	b.n	800b4c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2220      	movs	r2, #32
 800b4b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b09c      	sub	sp, #112	; 0x70
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	60f8      	str	r0, [r7, #12]
 800b4d6:	60b9      	str	r1, [r7, #8]
 800b4d8:	603b      	str	r3, [r7, #0]
 800b4da:	4613      	mov	r3, r2
 800b4dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4de:	e0a9      	b.n	800b634 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4e6:	f000 80a5 	beq.w	800b634 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4ea:	f7f7 f855 	bl	8002598 <HAL_GetTick>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d302      	bcc.n	800b500 <UART_WaitOnFlagUntilTimeout+0x32>
 800b4fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d140      	bne.n	800b582 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b508:	e853 3f00 	ldrex	r3, [r3]
 800b50c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b50e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b514:	667b      	str	r3, [r7, #100]	; 0x64
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b51e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b520:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b522:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b524:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b526:	e841 2300 	strex	r3, r2, [r1]
 800b52a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b52c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1e6      	bne.n	800b500 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3308      	adds	r3, #8
 800b538:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b544:	f023 0301 	bic.w	r3, r3, #1
 800b548:	663b      	str	r3, [r7, #96]	; 0x60
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3308      	adds	r3, #8
 800b550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b552:	64ba      	str	r2, [r7, #72]	; 0x48
 800b554:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e5      	bne.n	800b532 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2220      	movs	r2, #32
 800b56a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2220      	movs	r2, #32
 800b572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b57e:	2303      	movs	r3, #3
 800b580:	e069      	b.n	800b656 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 0304 	and.w	r3, r3, #4
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d051      	beq.n	800b634 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b59a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b59e:	d149      	bne.n	800b634 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b2:	e853 3f00 	ldrex	r3, [r3]
 800b5b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5c8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5d0:	e841 2300 	strex	r3, r2, [r1]
 800b5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e6      	bne.n	800b5aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3308      	adds	r3, #8
 800b5e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	e853 3f00 	ldrex	r3, [r3]
 800b5ea:	613b      	str	r3, [r7, #16]
   return(result);
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	f023 0301 	bic.w	r3, r3, #1
 800b5f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5fc:	623a      	str	r2, [r7, #32]
 800b5fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b600:	69f9      	ldr	r1, [r7, #28]
 800b602:	6a3a      	ldr	r2, [r7, #32]
 800b604:	e841 2300 	strex	r3, r2, [r1]
 800b608:	61bb      	str	r3, [r7, #24]
   return(result);
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1e5      	bne.n	800b5dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2220      	movs	r2, #32
 800b614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2220      	movs	r2, #32
 800b61c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2220      	movs	r2, #32
 800b624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b630:	2303      	movs	r3, #3
 800b632:	e010      	b.n	800b656 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	69da      	ldr	r2, [r3, #28]
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	4013      	ands	r3, r2
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	429a      	cmp	r2, r3
 800b642:	bf0c      	ite	eq
 800b644:	2301      	moveq	r3, #1
 800b646:	2300      	movne	r3, #0
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	461a      	mov	r2, r3
 800b64c:	79fb      	ldrb	r3, [r7, #7]
 800b64e:	429a      	cmp	r2, r3
 800b650:	f43f af46 	beq.w	800b4e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3770      	adds	r7, #112	; 0x70
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b65e:	b480      	push	{r7}
 800b660:	b095      	sub	sp, #84	; 0x54
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66e:	e853 3f00 	ldrex	r3, [r3]
 800b672:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b67a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b684:	643b      	str	r3, [r7, #64]	; 0x40
 800b686:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b68a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e6      	bne.n	800b666 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3308      	adds	r3, #8
 800b69e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	e853 3f00 	ldrex	r3, [r3]
 800b6a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6ae:	f023 0301 	bic.w	r3, r3, #1
 800b6b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	3308      	adds	r3, #8
 800b6ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c4:	e841 2300 	strex	r3, r2, [r1]
 800b6c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d1e3      	bne.n	800b698 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d118      	bne.n	800b70a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	e853 3f00 	ldrex	r3, [r3]
 800b6e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	f023 0310 	bic.w	r3, r3, #16
 800b6ec:	647b      	str	r3, [r7, #68]	; 0x44
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6f6:	61bb      	str	r3, [r7, #24]
 800b6f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fa:	6979      	ldr	r1, [r7, #20]
 800b6fc:	69ba      	ldr	r2, [r7, #24]
 800b6fe:	e841 2300 	strex	r3, r2, [r1]
 800b702:	613b      	str	r3, [r7, #16]
   return(result);
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1e6      	bne.n	800b6d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2220      	movs	r2, #32
 800b70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b71e:	bf00      	nop
 800b720:	3754      	adds	r7, #84	; 0x54
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b084      	sub	sp, #16
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b736:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f7ff fac1 	bl	800acd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b74e:	bf00      	nop
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b088      	sub	sp, #32
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	e853 3f00 	ldrex	r3, [r3]
 800b76a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b772:	61fb      	str	r3, [r7, #28]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	461a      	mov	r2, r3
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	61bb      	str	r3, [r7, #24]
 800b77e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b780:	6979      	ldr	r1, [r7, #20]
 800b782:	69ba      	ldr	r2, [r7, #24]
 800b784:	e841 2300 	strex	r3, r2, [r1]
 800b788:	613b      	str	r3, [r7, #16]
   return(result);
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1e6      	bne.n	800b75e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2220      	movs	r2, #32
 800b794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7ff fa8c 	bl	800acbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7a4:	bf00      	nop
 800b7a6:	3720      	adds	r7, #32
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b7c8:	bf00      	nop
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d101      	bne.n	800b7fe <HAL_UARTEx_DisableFifoMode+0x16>
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	e027      	b.n	800b84e <HAL_UARTEx_DisableFifoMode+0x66>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2224      	movs	r2, #36	; 0x24
 800b80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f022 0201 	bic.w	r2, r2, #1
 800b824:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b82c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2220      	movs	r2, #32
 800b840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3714      	adds	r7, #20
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b084      	sub	sp, #16
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d101      	bne.n	800b872 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b86e:	2302      	movs	r3, #2
 800b870:	e02d      	b.n	800b8ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2224      	movs	r2, #36	; 0x24
 800b87e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f022 0201 	bic.w	r2, r2, #1
 800b898:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f850 	bl	800b954 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2220      	movs	r2, #32
 800b8c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b084      	sub	sp, #16
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
 800b8de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d101      	bne.n	800b8ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	e02d      	b.n	800b94a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2224      	movs	r2, #36	; 0x24
 800b8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f022 0201 	bic.w	r2, r2, #1
 800b914:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	430a      	orrs	r2, r1
 800b928:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f812 	bl	800b954 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2220      	movs	r2, #32
 800b93c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
	...

0800b954 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b960:	2b00      	cmp	r3, #0
 800b962:	d108      	bne.n	800b976 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b974:	e031      	b.n	800b9da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b976:	2308      	movs	r3, #8
 800b978:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b97a:	2308      	movs	r3, #8
 800b97c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	0e5b      	lsrs	r3, r3, #25
 800b986:	b2db      	uxtb	r3, r3
 800b988:	f003 0307 	and.w	r3, r3, #7
 800b98c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	0f5b      	lsrs	r3, r3, #29
 800b996:	b2db      	uxtb	r3, r3
 800b998:	f003 0307 	and.w	r3, r3, #7
 800b99c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	7b3a      	ldrb	r2, [r7, #12]
 800b9a2:	4911      	ldr	r1, [pc, #68]	; (800b9e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b9a4:	5c8a      	ldrb	r2, [r1, r2]
 800b9a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b9aa:	7b3a      	ldrb	r2, [r7, #12]
 800b9ac:	490f      	ldr	r1, [pc, #60]	; (800b9ec <UARTEx_SetNbDataToProcess+0x98>)
 800b9ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	7b7a      	ldrb	r2, [r7, #13]
 800b9c0:	4909      	ldr	r1, [pc, #36]	; (800b9e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b9c2:	5c8a      	ldrb	r2, [r1, r2]
 800b9c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b9c8:	7b7a      	ldrb	r2, [r7, #13]
 800b9ca:	4908      	ldr	r1, [pc, #32]	; (800b9ec <UARTEx_SetNbDataToProcess+0x98>)
 800b9cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b9da:	bf00      	nop
 800b9dc:	3714      	adds	r7, #20
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	080130e4 	.word	0x080130e4
 800b9ec:	080130ec 	.word	0x080130ec

0800b9f0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b9f0:	b084      	sub	sp, #16
 800b9f2:	b480      	push	{r7}
 800b9f4:	b085      	sub	sp, #20
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	f107 001c 	add.w	r0, r7, #28
 800b9fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800ba06:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800ba08:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ba0a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800ba0e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800ba12:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ba14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800ba16:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685a      	ldr	r2, [r3, #4]
 800ba22:	4b07      	ldr	r3, [pc, #28]	; (800ba40 <SDMMC_Init+0x50>)
 800ba24:	4013      	ands	r3, r2
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	431a      	orrs	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	b004      	add	sp, #16
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	ffc02c00 	.word	0xffc02c00

0800ba44 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b083      	sub	sp, #12
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f043 0203 	orr.w	r2, r3, #3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ba94:	2002      	movs	r0, #2
 800ba96:	f7f6 fd8b 	bl	80025b0 <HAL_Delay>

  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 0303 	and.w	r3, r3, #3
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800baca:	2300      	movs	r3, #0
 800bacc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bade:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bae4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800baea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	4313      	orrs	r3, r2
 800baf0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68da      	ldr	r2, [r3, #12]
 800baf6:	4b06      	ldr	r3, [pc, #24]	; (800bb10 <SDMMC_SendCommand+0x50>)
 800baf8:	4013      	ands	r3, r2
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	431a      	orrs	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	fffee0c0 	.word	0xfffee0c0

0800bb14 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	b2db      	uxtb	r3, r3
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	370c      	adds	r7, #12
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bb2e:	b480      	push	{r7}
 800bb30:	b085      	sub	sp, #20
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3314      	adds	r3, #20
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	4413      	add	r3, r2
 800bb42:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	685a      	ldr	r2, [r3, #4]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bb7a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bb80:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bb86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	431a      	orrs	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0

}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3714      	adds	r7, #20
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bbba:	2310      	movs	r3, #16
 800bbbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbce:	f107 0308 	add.w	r3, r7, #8
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7ff ff73 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bbda:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbde:	2110      	movs	r1, #16
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 fa7b 	bl	800c0dc <SDMMC_GetCmdResp1>
 800bbe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbe8:	69fb      	ldr	r3, [r7, #28]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3720      	adds	r7, #32
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b088      	sub	sp, #32
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bc00:	2311      	movs	r3, #17
 800bc02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc14:	f107 0308 	add.w	r3, r7, #8
 800bc18:	4619      	mov	r1, r3
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7ff ff50 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bc20:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc24:	2111      	movs	r1, #17
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fa58 	bl	800c0dc <SDMMC_GetCmdResp1>
 800bc2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc2e:	69fb      	ldr	r3, [r7, #28]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3720      	adds	r7, #32
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b088      	sub	sp, #32
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bc46:	2312      	movs	r3, #18
 800bc48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc50:	2300      	movs	r3, #0
 800bc52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc5a:	f107 0308 	add.w	r3, r7, #8
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7ff ff2d 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bc66:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc6a:	2112      	movs	r1, #18
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fa35 	bl	800c0dc <SDMMC_GetCmdResp1>
 800bc72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc74:	69fb      	ldr	r3, [r7, #28]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3720      	adds	r7, #32
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b088      	sub	sp, #32
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bc8c:	2318      	movs	r3, #24
 800bc8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc96:	2300      	movs	r3, #0
 800bc98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bca0:	f107 0308 	add.w	r3, r7, #8
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7ff ff0a 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bcac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcb0:	2118      	movs	r1, #24
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fa12 	bl	800c0dc <SDMMC_GetCmdResp1>
 800bcb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcba:	69fb      	ldr	r3, [r7, #28]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3720      	adds	r7, #32
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b088      	sub	sp, #32
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bcd2:	2319      	movs	r3, #25
 800bcd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bce4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bce6:	f107 0308 	add.w	r3, r7, #8
 800bcea:	4619      	mov	r1, r3
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7ff fee7 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bcf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf6:	2119      	movs	r1, #25
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f9ef 	bl	800c0dc <SDMMC_GetCmdResp1>
 800bcfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd00:	69fb      	ldr	r3, [r7, #28]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3720      	adds	r7, #32
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
	...

0800bd0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bd14:	2300      	movs	r3, #0
 800bd16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bd18:	230c      	movs	r3, #12
 800bd1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd22:	2300      	movs	r3, #0
 800bd24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd2a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd44:	f107 0308 	add.w	r3, r7, #8
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7ff feb8 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bd50:	4a08      	ldr	r2, [pc, #32]	; (800bd74 <SDMMC_CmdStopTransfer+0x68>)
 800bd52:	210c      	movs	r1, #12
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f9c1 	bl	800c0dc <SDMMC_GetCmdResp1>
 800bd5a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800bd68:	69fb      	ldr	r3, [r7, #28]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3720      	adds	r7, #32
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	05f5e100 	.word	0x05f5e100

0800bd78 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b08a      	sub	sp, #40	; 0x28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bd88:	2307      	movs	r3, #7
 800bd8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd90:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd92:	2300      	movs	r3, #0
 800bd94:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd9a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd9c:	f107 0310 	add.w	r3, r7, #16
 800bda0:	4619      	mov	r1, r3
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7ff fe8c 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bda8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdac:	2107      	movs	r1, #7
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f000 f994 	bl	800c0dc <SDMMC_GetCmdResp1>
 800bdb4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3728      	adds	r7, #40	; 0x28
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bddc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdde:	f107 0308 	add.w	r3, r7, #8
 800bde2:	4619      	mov	r1, r3
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f7ff fe6b 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fbb8 	bl	800c560 <SDMMC_GetCmdError>
 800bdf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdf2:	69fb      	ldr	r3, [r7, #28]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3720      	adds	r7, #32
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b088      	sub	sp, #32
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800be04:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800be08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800be0a:	2308      	movs	r3, #8
 800be0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be14:	2300      	movs	r3, #0
 800be16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be1e:	f107 0308 	add.w	r3, r7, #8
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7ff fe4b 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fb4a 	bl	800c4c4 <SDMMC_GetCmdResp7>
 800be30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be32:	69fb      	ldr	r3, [r7, #28]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3720      	adds	r7, #32
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800be4a:	2337      	movs	r3, #55	; 0x37
 800be4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be54:	2300      	movs	r3, #0
 800be56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be5e:	f107 0308 	add.w	r3, r7, #8
 800be62:	4619      	mov	r1, r3
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f7ff fe2b 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800be6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800be6e:	2137      	movs	r1, #55	; 0x37
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 f933 	bl	800c0dc <SDMMC_GetCmdResp1>
 800be76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be78:	69fb      	ldr	r3, [r7, #28]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3720      	adds	r7, #32
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b088      	sub	sp, #32
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800be90:	2329      	movs	r3, #41	; 0x29
 800be92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be9a:	2300      	movs	r3, #0
 800be9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bea4:	f107 0308 	add.w	r3, r7, #8
 800bea8:	4619      	mov	r1, r3
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7ff fe08 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fa4f 	bl	800c354 <SDMMC_GetCmdResp3>
 800beb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800beb8:	69fb      	ldr	r3, [r7, #28]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3720      	adds	r7, #32
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b088      	sub	sp, #32
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
 800beca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bed0:	2306      	movs	r3, #6
 800bed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beda:	2300      	movs	r3, #0
 800bedc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bee2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bee4:	f107 0308 	add.w	r3, r7, #8
 800bee8:	4619      	mov	r1, r3
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff fde8 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bef0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bef4:	2106      	movs	r1, #6
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f8f0 	bl	800c0dc <SDMMC_GetCmdResp1>
 800befc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800befe:	69fb      	ldr	r3, [r7, #28]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3720      	adds	r7, #32
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bf10:	2300      	movs	r3, #0
 800bf12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bf14:	2333      	movs	r3, #51	; 0x33
 800bf16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf28:	f107 0308 	add.w	r3, r7, #8
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff fdc6 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bf34:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf38:	2133      	movs	r1, #51	; 0x33
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 f8ce 	bl	800c0dc <SDMMC_GetCmdResp1>
 800bf40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf42:	69fb      	ldr	r3, [r7, #28]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3720      	adds	r7, #32
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b088      	sub	sp, #32
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bf58:	2302      	movs	r3, #2
 800bf5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bf5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bf60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf62:	2300      	movs	r3, #0
 800bf64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf6c:	f107 0308 	add.w	r3, r7, #8
 800bf70:	4619      	mov	r1, r3
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7ff fda4 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f9a1 	bl	800c2c0 <SDMMC_GetCmdResp2>
 800bf7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf80:	69fb      	ldr	r3, [r7, #28]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3720      	adds	r7, #32
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b088      	sub	sp, #32
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bf98:	2309      	movs	r3, #9
 800bf9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bf9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bfa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfac:	f107 0308 	add.w	r3, r7, #8
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7ff fd84 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f981 	bl	800c2c0 <SDMMC_GetCmdResp2>
 800bfbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfc0:	69fb      	ldr	r3, [r7, #28]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3720      	adds	r7, #32
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b088      	sub	sp, #32
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bfd8:	2303      	movs	r3, #3
 800bfda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfec:	f107 0308 	add.w	r3, r7, #8
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff fd64 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bff8:	683a      	ldr	r2, [r7, #0]
 800bffa:	2103      	movs	r1, #3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f9e9 	bl	800c3d4 <SDMMC_GetCmdResp6>
 800c002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c004:	69fb      	ldr	r3, [r7, #28]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3720      	adds	r7, #32
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b088      	sub	sp, #32
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c01c:	230d      	movs	r3, #13
 800c01e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c020:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c026:	2300      	movs	r3, #0
 800c028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c02a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c02e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c030:	f107 0308 	add.w	r3, r7, #8
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7ff fd42 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c03c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c040:	210d      	movs	r1, #13
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f84a 	bl	800c0dc <SDMMC_GetCmdResp1>
 800c048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c04a:	69fb      	ldr	r3, [r7, #28]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3720      	adds	r7, #32
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c05c:	2300      	movs	r3, #0
 800c05e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c060:	230d      	movs	r3, #13
 800c062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c064:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c06a:	2300      	movs	r3, #0
 800c06c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c06e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c074:	f107 0308 	add.w	r3, r7, #8
 800c078:	4619      	mov	r1, r3
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7ff fd20 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c080:	f241 3288 	movw	r2, #5000	; 0x1388
 800c084:	210d      	movs	r1, #13
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f828 	bl	800c0dc <SDMMC_GetCmdResp1>
 800c08c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c08e:	69fb      	ldr	r3, [r7, #28]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3720      	adds	r7, #32
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b088      	sub	sp, #32
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c0a4:	230b      	movs	r3, #11
 800c0a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0b8:	f107 0308 	add.w	r3, r7, #8
 800c0bc:	4619      	mov	r1, r3
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7ff fcfe 	bl	800bac0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800c0c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0c8:	210b      	movs	r1, #11
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f806 	bl	800c0dc <SDMMC_GetCmdResp1>
 800c0d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0d2:	69fb      	ldr	r3, [r7, #28]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3720      	adds	r7, #32
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b088      	sub	sp, #32
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	607a      	str	r2, [r7, #4]
 800c0e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c0ea:	4b70      	ldr	r3, [pc, #448]	; (800c2ac <SDMMC_GetCmdResp1+0x1d0>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a70      	ldr	r2, [pc, #448]	; (800c2b0 <SDMMC_GetCmdResp1+0x1d4>)
 800c0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0f4:	0a5a      	lsrs	r2, r3, #9
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	fb02 f303 	mul.w	r3, r2, r3
 800c0fc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	1e5a      	subs	r2, r3, #1
 800c102:	61fa      	str	r2, [r7, #28]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d102      	bne.n	800c10e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c108:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c10c:	e0c9      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c112:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	4b67      	ldr	r3, [pc, #412]	; (800c2b4 <SDMMC_GetCmdResp1+0x1d8>)
 800c118:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d0ef      	beq.n	800c0fe <SDMMC_GetCmdResp1+0x22>
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1ea      	bne.n	800c0fe <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12c:	f003 0304 	and.w	r3, r3, #4
 800c130:	2b00      	cmp	r3, #0
 800c132:	d004      	beq.n	800c13e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2204      	movs	r2, #4
 800c138:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c13a:	2304      	movs	r3, #4
 800c13c:	e0b1      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c142:	f003 0301 	and.w	r3, r3, #1
 800c146:	2b00      	cmp	r3, #0
 800c148:	d004      	beq.n	800c154 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2201      	movs	r2, #1
 800c14e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c150:	2301      	movs	r3, #1
 800c152:	e0a6      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4a58      	ldr	r2, [pc, #352]	; (800c2b8 <SDMMC_GetCmdResp1+0x1dc>)
 800c158:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c15a:	68f8      	ldr	r0, [r7, #12]
 800c15c:	f7ff fcda 	bl	800bb14 <SDMMC_GetCommandResponse>
 800c160:	4603      	mov	r3, r0
 800c162:	461a      	mov	r2, r3
 800c164:	7afb      	ldrb	r3, [r7, #11]
 800c166:	4293      	cmp	r3, r2
 800c168:	d001      	beq.n	800c16e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e099      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c16e:	2100      	movs	r1, #0
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f7ff fcdc 	bl	800bb2e <SDMMC_GetResponse>
 800c176:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c178:	697a      	ldr	r2, [r7, #20]
 800c17a:	4b50      	ldr	r3, [pc, #320]	; (800c2bc <SDMMC_GetCmdResp1+0x1e0>)
 800c17c:	4013      	ands	r3, r2
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c182:	2300      	movs	r3, #0
 800c184:	e08d      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	da02      	bge.n	800c192 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c18c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c190:	e087      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c19c:	2340      	movs	r3, #64	; 0x40
 800c19e:	e080      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c1aa:	2380      	movs	r3, #128	; 0x80
 800c1ac:	e079      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c1b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1bc:	e071      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c1c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1cc:	e069      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d002      	beq.n	800c1de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1dc:	e061      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c1e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c1ec:	e059      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c1f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1fc:	e051      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c20c:	e049      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c218:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c21c:	e041      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c22c:	e039      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c23c:	e031      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c248:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c24c:	e029      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c254:	2b00      	cmp	r3, #0
 800c256:	d002      	beq.n	800c25e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c258:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c25c:	e021      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c268:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c26c:	e019      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c278:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c27c:	e011      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c288:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c28c:	e009      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f003 0308 	and.w	r3, r3, #8
 800c294:	2b00      	cmp	r3, #0
 800c296:	d002      	beq.n	800c29e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c298:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c29c:	e001      	b.n	800c2a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c29e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3720      	adds	r7, #32
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20000004 	.word	0x20000004
 800c2b0:	10624dd3 	.word	0x10624dd3
 800c2b4:	00200045 	.word	0x00200045
 800c2b8:	002000c5 	.word	0x002000c5
 800c2bc:	fdffe008 	.word	0xfdffe008

0800c2c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2c8:	4b1f      	ldr	r3, [pc, #124]	; (800c348 <SDMMC_GetCmdResp2+0x88>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a1f      	ldr	r2, [pc, #124]	; (800c34c <SDMMC_GetCmdResp2+0x8c>)
 800c2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d2:	0a5b      	lsrs	r3, r3, #9
 800c2d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2d8:	fb02 f303 	mul.w	r3, r2, r3
 800c2dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	1e5a      	subs	r2, r3, #1
 800c2e2:	60fa      	str	r2, [r7, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d102      	bne.n	800c2ee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2ec:	e026      	b.n	800c33c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d0ef      	beq.n	800c2de <SDMMC_GetCmdResp2+0x1e>
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1ea      	bne.n	800c2de <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c30c:	f003 0304 	and.w	r3, r3, #4
 800c310:	2b00      	cmp	r3, #0
 800c312:	d004      	beq.n	800c31e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2204      	movs	r2, #4
 800c318:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c31a:	2304      	movs	r3, #4
 800c31c:	e00e      	b.n	800c33c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c322:	f003 0301 	and.w	r3, r3, #1
 800c326:	2b00      	cmp	r3, #0
 800c328:	d004      	beq.n	800c334 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2201      	movs	r2, #1
 800c32e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c330:	2301      	movs	r3, #1
 800c332:	e003      	b.n	800c33c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4a06      	ldr	r2, [pc, #24]	; (800c350 <SDMMC_GetCmdResp2+0x90>)
 800c338:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c33a:	2300      	movs	r3, #0
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3714      	adds	r7, #20
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr
 800c348:	20000004 	.word	0x20000004
 800c34c:	10624dd3 	.word	0x10624dd3
 800c350:	002000c5 	.word	0x002000c5

0800c354 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c35c:	4b1a      	ldr	r3, [pc, #104]	; (800c3c8 <SDMMC_GetCmdResp3+0x74>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a1a      	ldr	r2, [pc, #104]	; (800c3cc <SDMMC_GetCmdResp3+0x78>)
 800c362:	fba2 2303 	umull	r2, r3, r2, r3
 800c366:	0a5b      	lsrs	r3, r3, #9
 800c368:	f241 3288 	movw	r2, #5000	; 0x1388
 800c36c:	fb02 f303 	mul.w	r3, r2, r3
 800c370:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	1e5a      	subs	r2, r3, #1
 800c376:	60fa      	str	r2, [r7, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d102      	bne.n	800c382 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c37c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c380:	e01b      	b.n	800c3ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c386:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d0ef      	beq.n	800c372 <SDMMC_GetCmdResp3+0x1e>
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1ea      	bne.n	800c372 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3a0:	f003 0304 	and.w	r3, r3, #4
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d004      	beq.n	800c3b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2204      	movs	r2, #4
 800c3ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3ae:	2304      	movs	r3, #4
 800c3b0:	e003      	b.n	800c3ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4a06      	ldr	r2, [pc, #24]	; (800c3d0 <SDMMC_GetCmdResp3+0x7c>)
 800c3b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	20000004 	.word	0x20000004
 800c3cc:	10624dd3 	.word	0x10624dd3
 800c3d0:	002000c5 	.word	0x002000c5

0800c3d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b088      	sub	sp, #32
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	607a      	str	r2, [r7, #4]
 800c3e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c3e2:	4b35      	ldr	r3, [pc, #212]	; (800c4b8 <SDMMC_GetCmdResp6+0xe4>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a35      	ldr	r2, [pc, #212]	; (800c4bc <SDMMC_GetCmdResp6+0xe8>)
 800c3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ec:	0a5b      	lsrs	r3, r3, #9
 800c3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3f2:	fb02 f303 	mul.w	r3, r2, r3
 800c3f6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	1e5a      	subs	r2, r3, #1
 800c3fc:	61fa      	str	r2, [r7, #28]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d102      	bne.n	800c408 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c402:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c406:	e052      	b.n	800c4ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c40c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c414:	2b00      	cmp	r3, #0
 800c416:	d0ef      	beq.n	800c3f8 <SDMMC_GetCmdResp6+0x24>
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1ea      	bne.n	800c3f8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c426:	f003 0304 	and.w	r3, r3, #4
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d004      	beq.n	800c438 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2204      	movs	r2, #4
 800c432:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c434:	2304      	movs	r3, #4
 800c436:	e03a      	b.n	800c4ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43c:	f003 0301 	and.w	r3, r3, #1
 800c440:	2b00      	cmp	r3, #0
 800c442:	d004      	beq.n	800c44e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2201      	movs	r2, #1
 800c448:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e02f      	b.n	800c4ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f7ff fb60 	bl	800bb14 <SDMMC_GetCommandResponse>
 800c454:	4603      	mov	r3, r0
 800c456:	461a      	mov	r2, r3
 800c458:	7afb      	ldrb	r3, [r7, #11]
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d001      	beq.n	800c462 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c45e:	2301      	movs	r3, #1
 800c460:	e025      	b.n	800c4ae <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	4a16      	ldr	r2, [pc, #88]	; (800c4c0 <SDMMC_GetCmdResp6+0xec>)
 800c466:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c468:	2100      	movs	r1, #0
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f7ff fb5f 	bl	800bb2e <SDMMC_GetResponse>
 800c470:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d106      	bne.n	800c48a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	0c1b      	lsrs	r3, r3, #16
 800c480:	b29a      	uxth	r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c486:	2300      	movs	r3, #0
 800c488:	e011      	b.n	800c4ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d002      	beq.n	800c49a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c498:	e009      	b.n	800c4ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c4a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4a8:	e001      	b.n	800c4ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c4aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3720      	adds	r7, #32
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	20000004 	.word	0x20000004
 800c4bc:	10624dd3 	.word	0x10624dd3
 800c4c0:	002000c5 	.word	0x002000c5

0800c4c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4cc:	4b22      	ldr	r3, [pc, #136]	; (800c558 <SDMMC_GetCmdResp7+0x94>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a22      	ldr	r2, [pc, #136]	; (800c55c <SDMMC_GetCmdResp7+0x98>)
 800c4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4d6:	0a5b      	lsrs	r3, r3, #9
 800c4d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4dc:	fb02 f303 	mul.w	r3, r2, r3
 800c4e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	1e5a      	subs	r2, r3, #1
 800c4e6:	60fa      	str	r2, [r7, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d102      	bne.n	800c4f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4f0:	e02c      	b.n	800c54c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d0ef      	beq.n	800c4e2 <SDMMC_GetCmdResp7+0x1e>
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1ea      	bne.n	800c4e2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c510:	f003 0304 	and.w	r3, r3, #4
 800c514:	2b00      	cmp	r3, #0
 800c516:	d004      	beq.n	800c522 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2204      	movs	r2, #4
 800c51c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c51e:	2304      	movs	r3, #4
 800c520:	e014      	b.n	800c54c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c526:	f003 0301 	and.w	r3, r3, #1
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d004      	beq.n	800c538 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2201      	movs	r2, #1
 800c532:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c534:	2301      	movs	r3, #1
 800c536:	e009      	b.n	800c54c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2240      	movs	r2, #64	; 0x40
 800c548:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c54a:	2300      	movs	r3, #0

}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr
 800c558:	20000004 	.word	0x20000004
 800c55c:	10624dd3 	.word	0x10624dd3

0800c560 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c568:	4b11      	ldr	r3, [pc, #68]	; (800c5b0 <SDMMC_GetCmdError+0x50>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a11      	ldr	r2, [pc, #68]	; (800c5b4 <SDMMC_GetCmdError+0x54>)
 800c56e:	fba2 2303 	umull	r2, r3, r2, r3
 800c572:	0a5b      	lsrs	r3, r3, #9
 800c574:	f241 3288 	movw	r2, #5000	; 0x1388
 800c578:	fb02 f303 	mul.w	r3, r2, r3
 800c57c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	1e5a      	subs	r2, r3, #1
 800c582:	60fa      	str	r2, [r7, #12]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d102      	bne.n	800c58e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c58c:	e009      	b.n	800c5a2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0f1      	beq.n	800c57e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a06      	ldr	r2, [pc, #24]	; (800c5b8 <SDMMC_GetCmdError+0x58>)
 800c59e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3714      	adds	r7, #20
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	20000004 	.word	0x20000004
 800c5b4:	10624dd3 	.word	0x10624dd3
 800c5b8:	002000c5 	.word	0x002000c5

0800c5bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c5bc:	b084      	sub	sp, #16
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	f107 001c 	add.w	r0, r7, #28
 800c5ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f001 faf6 	bl	800dbcc <USB_CoreReset>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800c5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d106      	bne.n	800c5f8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	639a      	str	r2, [r3, #56]	; 0x38
 800c5f6:	e005      	b.n	800c604 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800c604:	7bfb      	ldrb	r3, [r7, #15]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c610:	b004      	add	sp, #16
 800c612:	4770      	bx	lr

0800c614 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c614:	b480      	push	{r7}
 800c616:	b087      	sub	sp, #28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	4613      	mov	r3, r2
 800c620:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c622:	79fb      	ldrb	r3, [r7, #7]
 800c624:	2b02      	cmp	r3, #2
 800c626:	d165      	bne.n	800c6f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	4a3e      	ldr	r2, [pc, #248]	; (800c724 <USB_SetTurnaroundTime+0x110>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d906      	bls.n	800c63e <USB_SetTurnaroundTime+0x2a>
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	4a3d      	ldr	r2, [pc, #244]	; (800c728 <USB_SetTurnaroundTime+0x114>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d202      	bcs.n	800c63e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c638:	230f      	movs	r3, #15
 800c63a:	617b      	str	r3, [r7, #20]
 800c63c:	e05c      	b.n	800c6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	4a39      	ldr	r2, [pc, #228]	; (800c728 <USB_SetTurnaroundTime+0x114>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d306      	bcc.n	800c654 <USB_SetTurnaroundTime+0x40>
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	4a38      	ldr	r2, [pc, #224]	; (800c72c <USB_SetTurnaroundTime+0x118>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d202      	bcs.n	800c654 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c64e:	230e      	movs	r3, #14
 800c650:	617b      	str	r3, [r7, #20]
 800c652:	e051      	b.n	800c6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	4a35      	ldr	r2, [pc, #212]	; (800c72c <USB_SetTurnaroundTime+0x118>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d306      	bcc.n	800c66a <USB_SetTurnaroundTime+0x56>
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	4a34      	ldr	r2, [pc, #208]	; (800c730 <USB_SetTurnaroundTime+0x11c>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d202      	bcs.n	800c66a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c664:	230d      	movs	r3, #13
 800c666:	617b      	str	r3, [r7, #20]
 800c668:	e046      	b.n	800c6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	4a30      	ldr	r2, [pc, #192]	; (800c730 <USB_SetTurnaroundTime+0x11c>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d306      	bcc.n	800c680 <USB_SetTurnaroundTime+0x6c>
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	4a2f      	ldr	r2, [pc, #188]	; (800c734 <USB_SetTurnaroundTime+0x120>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d802      	bhi.n	800c680 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c67a:	230c      	movs	r3, #12
 800c67c:	617b      	str	r3, [r7, #20]
 800c67e:	e03b      	b.n	800c6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	4a2c      	ldr	r2, [pc, #176]	; (800c734 <USB_SetTurnaroundTime+0x120>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d906      	bls.n	800c696 <USB_SetTurnaroundTime+0x82>
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	4a2b      	ldr	r2, [pc, #172]	; (800c738 <USB_SetTurnaroundTime+0x124>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d802      	bhi.n	800c696 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c690:	230b      	movs	r3, #11
 800c692:	617b      	str	r3, [r7, #20]
 800c694:	e030      	b.n	800c6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	4a27      	ldr	r2, [pc, #156]	; (800c738 <USB_SetTurnaroundTime+0x124>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d906      	bls.n	800c6ac <USB_SetTurnaroundTime+0x98>
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	4a26      	ldr	r2, [pc, #152]	; (800c73c <USB_SetTurnaroundTime+0x128>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d802      	bhi.n	800c6ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c6a6:	230a      	movs	r3, #10
 800c6a8:	617b      	str	r3, [r7, #20]
 800c6aa:	e025      	b.n	800c6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	4a23      	ldr	r2, [pc, #140]	; (800c73c <USB_SetTurnaroundTime+0x128>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d906      	bls.n	800c6c2 <USB_SetTurnaroundTime+0xae>
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	4a22      	ldr	r2, [pc, #136]	; (800c740 <USB_SetTurnaroundTime+0x12c>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d202      	bcs.n	800c6c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c6bc:	2309      	movs	r3, #9
 800c6be:	617b      	str	r3, [r7, #20]
 800c6c0:	e01a      	b.n	800c6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	4a1e      	ldr	r2, [pc, #120]	; (800c740 <USB_SetTurnaroundTime+0x12c>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d306      	bcc.n	800c6d8 <USB_SetTurnaroundTime+0xc4>
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	4a1d      	ldr	r2, [pc, #116]	; (800c744 <USB_SetTurnaroundTime+0x130>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d802      	bhi.n	800c6d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c6d2:	2308      	movs	r3, #8
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	e00f      	b.n	800c6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	4a1a      	ldr	r2, [pc, #104]	; (800c744 <USB_SetTurnaroundTime+0x130>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d906      	bls.n	800c6ee <USB_SetTurnaroundTime+0xda>
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	4a19      	ldr	r2, [pc, #100]	; (800c748 <USB_SetTurnaroundTime+0x134>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d202      	bcs.n	800c6ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c6e8:	2307      	movs	r3, #7
 800c6ea:	617b      	str	r3, [r7, #20]
 800c6ec:	e004      	b.n	800c6f8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c6ee:	2306      	movs	r3, #6
 800c6f0:	617b      	str	r3, [r7, #20]
 800c6f2:	e001      	b.n	800c6f8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c6f4:	2309      	movs	r3, #9
 800c6f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	68da      	ldr	r2, [r3, #12]
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	029b      	lsls	r3, r3, #10
 800c70c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c710:	431a      	orrs	r2, r3
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	371c      	adds	r7, #28
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr
 800c724:	00d8acbf 	.word	0x00d8acbf
 800c728:	00e4e1c0 	.word	0x00e4e1c0
 800c72c:	00f42400 	.word	0x00f42400
 800c730:	01067380 	.word	0x01067380
 800c734:	011a499f 	.word	0x011a499f
 800c738:	01312cff 	.word	0x01312cff
 800c73c:	014ca43f 	.word	0x014ca43f
 800c740:	016e3600 	.word	0x016e3600
 800c744:	01a6ab1f 	.word	0x01a6ab1f
 800c748:	01e84800 	.word	0x01e84800

0800c74c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	f043 0201 	orr.w	r2, r3, #1
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c76e:	b480      	push	{r7}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	f023 0201 	bic.w	r2, r3, #1
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	460b      	mov	r3, r1
 800c79a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c79c:	2300      	movs	r3, #0
 800c79e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c7ac:	78fb      	ldrb	r3, [r7, #3]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d115      	bne.n	800c7de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c7be:	2001      	movs	r0, #1
 800c7c0:	f7f5 fef6 	bl	80025b0 <HAL_Delay>
      ms++;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f001 f985 	bl	800dada <USB_GetMode>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d01e      	beq.n	800c814 <USB_SetCurrentMode+0x84>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2b31      	cmp	r3, #49	; 0x31
 800c7da:	d9f0      	bls.n	800c7be <USB_SetCurrentMode+0x2e>
 800c7dc:	e01a      	b.n	800c814 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c7de:	78fb      	ldrb	r3, [r7, #3]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d115      	bne.n	800c810 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c7f0:	2001      	movs	r0, #1
 800c7f2:	f7f5 fedd 	bl	80025b0 <HAL_Delay>
      ms++;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f001 f96c 	bl	800dada <USB_GetMode>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d005      	beq.n	800c814 <USB_SetCurrentMode+0x84>
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2b31      	cmp	r3, #49	; 0x31
 800c80c:	d9f0      	bls.n	800c7f0 <USB_SetCurrentMode+0x60>
 800c80e:	e001      	b.n	800c814 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	e005      	b.n	800c820 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2b32      	cmp	r3, #50	; 0x32
 800c818:	d101      	bne.n	800c81e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c81a:	2301      	movs	r3, #1
 800c81c:	e000      	b.n	800c820 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c828:	b084      	sub	sp, #16
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b086      	sub	sp, #24
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c842:	2300      	movs	r3, #0
 800c844:	613b      	str	r3, [r7, #16]
 800c846:	e009      	b.n	800c85c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	3340      	adds	r3, #64	; 0x40
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	4413      	add	r3, r2
 800c852:	2200      	movs	r2, #0
 800c854:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	3301      	adds	r3, #1
 800c85a:	613b      	str	r3, [r7, #16]
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	2b0e      	cmp	r3, #14
 800c860:	d9f2      	bls.n	800c848 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c864:	2b00      	cmp	r3, #0
 800c866:	d11c      	bne.n	800c8a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c876:	f043 0302 	orr.w	r3, r3, #2
 800c87a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c880:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	e005      	b.n	800c8ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	680b      	ldr	r3, [r1, #0]
 800c8cc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c8ce:	2103      	movs	r1, #3
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 f959 	bl	800cb88 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c8d6:	2110      	movs	r1, #16
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f8f1 	bl	800cac0 <USB_FlushTxFifo>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d001      	beq.n	800c8e8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f91d 	bl	800cb28 <USB_FlushRxFifo>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d001      	beq.n	800c8f8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8fe:	461a      	mov	r2, r3
 800c900:	2300      	movs	r3, #0
 800c902:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c90a:	461a      	mov	r2, r3
 800c90c:	2300      	movs	r3, #0
 800c90e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c916:	461a      	mov	r2, r3
 800c918:	2300      	movs	r3, #0
 800c91a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c91c:	2300      	movs	r3, #0
 800c91e:	613b      	str	r3, [r7, #16]
 800c920:	e043      	b.n	800c9aa <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	015a      	lsls	r2, r3, #5
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	4413      	add	r3, r2
 800c92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c938:	d118      	bne.n	800c96c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10a      	bne.n	800c956 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	015a      	lsls	r2, r3, #5
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	4413      	add	r3, r2
 800c948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c94c:	461a      	mov	r2, r3
 800c94e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	e013      	b.n	800c97e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	015a      	lsls	r2, r3, #5
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	4413      	add	r3, r2
 800c95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c962:	461a      	mov	r2, r3
 800c964:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c968:	6013      	str	r3, [r2, #0]
 800c96a:	e008      	b.n	800c97e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	015a      	lsls	r2, r3, #5
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	4413      	add	r3, r2
 800c974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c978:	461a      	mov	r2, r3
 800c97a:	2300      	movs	r3, #0
 800c97c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	015a      	lsls	r2, r3, #5
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	4413      	add	r3, r2
 800c986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c98a:	461a      	mov	r2, r3
 800c98c:	2300      	movs	r3, #0
 800c98e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	015a      	lsls	r2, r3, #5
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	4413      	add	r3, r2
 800c998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c99c:	461a      	mov	r2, r3
 800c99e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c9a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	613b      	str	r3, [r7, #16]
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	693a      	ldr	r2, [r7, #16]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d3b7      	bcc.n	800c922 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	613b      	str	r3, [r7, #16]
 800c9b6:	e043      	b.n	800ca40 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	015a      	lsls	r2, r3, #5
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9ce:	d118      	bne.n	800ca02 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10a      	bne.n	800c9ec <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	015a      	lsls	r2, r3, #5
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	4413      	add	r3, r2
 800c9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	e013      	b.n	800ca14 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	015a      	lsls	r2, r3, #5
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c9fe:	6013      	str	r3, [r2, #0]
 800ca00:	e008      	b.n	800ca14 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	015a      	lsls	r2, r3, #5
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	4413      	add	r3, r2
 800ca0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca0e:	461a      	mov	r2, r3
 800ca10:	2300      	movs	r3, #0
 800ca12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	015a      	lsls	r2, r3, #5
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca20:	461a      	mov	r2, r3
 800ca22:	2300      	movs	r3, #0
 800ca24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	015a      	lsls	r2, r3, #5
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca32:	461a      	mov	r2, r3
 800ca34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	613b      	str	r3, [r7, #16]
 800ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d3b7      	bcc.n	800c9b8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ca68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	f043 0210 	orr.w	r2, r3, #16
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	699a      	ldr	r2, [r3, #24]
 800ca7a:	4b10      	ldr	r3, [pc, #64]	; (800cabc <USB_DevInit+0x294>)
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ca82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d005      	beq.n	800ca94 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	699b      	ldr	r3, [r3, #24]
 800ca8c:	f043 0208 	orr.w	r2, r3, #8
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ca94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d107      	bne.n	800caaa <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800caa2:	f043 0304 	orr.w	r3, r3, #4
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800caaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3718      	adds	r7, #24
 800cab0:	46bd      	mov	sp, r7
 800cab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cab6:	b004      	add	sp, #16
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	803c3800 	.word	0x803c3800

0800cac0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800caca:	2300      	movs	r3, #0
 800cacc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3301      	adds	r3, #1
 800cad2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	4a13      	ldr	r2, [pc, #76]	; (800cb24 <USB_FlushTxFifo+0x64>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d901      	bls.n	800cae0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cadc:	2303      	movs	r3, #3
 800cade:	e01b      	b.n	800cb18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	daf2      	bge.n	800cace <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cae8:	2300      	movs	r3, #0
 800caea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	019b      	lsls	r3, r3, #6
 800caf0:	f043 0220 	orr.w	r2, r3, #32
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3301      	adds	r3, #1
 800cafc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	4a08      	ldr	r2, [pc, #32]	; (800cb24 <USB_FlushTxFifo+0x64>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d901      	bls.n	800cb0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cb06:	2303      	movs	r3, #3
 800cb08:	e006      	b.n	800cb18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	f003 0320 	and.w	r3, r3, #32
 800cb12:	2b20      	cmp	r3, #32
 800cb14:	d0f0      	beq.n	800caf8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3714      	adds	r7, #20
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	00030d40 	.word	0x00030d40

0800cb28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb30:	2300      	movs	r3, #0
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	3301      	adds	r3, #1
 800cb38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	4a11      	ldr	r2, [pc, #68]	; (800cb84 <USB_FlushRxFifo+0x5c>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d901      	bls.n	800cb46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cb42:	2303      	movs	r3, #3
 800cb44:	e018      	b.n	800cb78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	daf2      	bge.n	800cb34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2210      	movs	r2, #16
 800cb56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	4a08      	ldr	r2, [pc, #32]	; (800cb84 <USB_FlushRxFifo+0x5c>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d901      	bls.n	800cb6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cb66:	2303      	movs	r3, #3
 800cb68:	e006      	b.n	800cb78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	f003 0310 	and.w	r3, r3, #16
 800cb72:	2b10      	cmp	r3, #16
 800cb74:	d0f0      	beq.n	800cb58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr
 800cb84:	00030d40 	.word	0x00030d40

0800cb88 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	460b      	mov	r3, r1
 800cb92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	78fb      	ldrb	r3, [r7, #3]
 800cba2:	68f9      	ldr	r1, [r7, #12]
 800cba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr

0800cbba <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b087      	sub	sp, #28
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	f003 0306 	and.w	r3, r3, #6
 800cbd2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d002      	beq.n	800cbe0 <USB_GetDevSpeed+0x26>
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2b06      	cmp	r3, #6
 800cbde:	d102      	bne.n	800cbe6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	75fb      	strb	r3, [r7, #23]
 800cbe4:	e001      	b.n	800cbea <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800cbe6:	230f      	movs	r3, #15
 800cbe8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	371c      	adds	r7, #28
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	785b      	ldrb	r3, [r3, #1]
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d13a      	bne.n	800cc8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc1a:	69da      	ldr	r2, [r3, #28]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	f003 030f 	and.w	r3, r3, #15
 800cc24:	2101      	movs	r1, #1
 800cc26:	fa01 f303 	lsl.w	r3, r1, r3
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	68f9      	ldr	r1, [r7, #12]
 800cc2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc32:	4313      	orrs	r3, r2
 800cc34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	015a      	lsls	r2, r3, #5
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d155      	bne.n	800ccf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	791b      	ldrb	r3, [r3, #4]
 800cc66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cc68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	059b      	lsls	r3, r3, #22
 800cc6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cc70:	4313      	orrs	r3, r2
 800cc72:	68ba      	ldr	r2, [r7, #8]
 800cc74:	0151      	lsls	r1, r2, #5
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	440a      	add	r2, r1
 800cc7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc86:	6013      	str	r3, [r2, #0]
 800cc88:	e036      	b.n	800ccf8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc90:	69da      	ldr	r2, [r3, #28]
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	f003 030f 	and.w	r3, r3, #15
 800cc9a:	2101      	movs	r1, #1
 800cc9c:	fa01 f303 	lsl.w	r3, r1, r3
 800cca0:	041b      	lsls	r3, r3, #16
 800cca2:	68f9      	ldr	r1, [r7, #12]
 800cca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	015a      	lsls	r2, r3, #5
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d11a      	bne.n	800ccf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	015a      	lsls	r2, r3, #5
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4413      	add	r3, r2
 800ccca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	791b      	ldrb	r3, [r3, #4]
 800ccdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ccde:	430b      	orrs	r3, r1
 800cce0:	4313      	orrs	r3, r2
 800cce2:	68ba      	ldr	r2, [r7, #8]
 800cce4:	0151      	lsls	r1, r2, #5
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	440a      	add	r2, r1
 800ccea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccf6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3714      	adds	r7, #20
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
	...

0800cd08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b085      	sub	sp, #20
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	785b      	ldrb	r3, [r3, #1]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d161      	bne.n	800cde8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	015a      	lsls	r2, r3, #5
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd3a:	d11f      	bne.n	800cd7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	015a      	lsls	r2, r3, #5
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	4413      	add	r3, r2
 800cd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	0151      	lsls	r1, r2, #5
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	440a      	add	r2, r1
 800cd52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	0151      	lsls	r1, r2, #5
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	440a      	add	r2, r1
 800cd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	f003 030f 	and.w	r3, r3, #15
 800cd8c:	2101      	movs	r1, #1
 800cd8e:	fa01 f303 	lsl.w	r3, r1, r3
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	43db      	mvns	r3, r3
 800cd96:	68f9      	ldr	r1, [r7, #12]
 800cd98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd9c:	4013      	ands	r3, r2
 800cd9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cda6:	69da      	ldr	r2, [r3, #28]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	f003 030f 	and.w	r3, r3, #15
 800cdb0:	2101      	movs	r1, #1
 800cdb2:	fa01 f303 	lsl.w	r3, r1, r3
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	43db      	mvns	r3, r3
 800cdba:	68f9      	ldr	r1, [r7, #12]
 800cdbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	015a      	lsls	r2, r3, #5
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4413      	add	r3, r2
 800cdcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	0159      	lsls	r1, r3, #5
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	440b      	add	r3, r1
 800cdda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdde:	4619      	mov	r1, r3
 800cde0:	4b35      	ldr	r3, [pc, #212]	; (800ceb8 <USB_DeactivateEndpoint+0x1b0>)
 800cde2:	4013      	ands	r3, r2
 800cde4:	600b      	str	r3, [r1, #0]
 800cde6:	e060      	b.n	800ceaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	015a      	lsls	r2, r3, #5
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	4413      	add	r3, r2
 800cdf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdfe:	d11f      	bne.n	800ce40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	015a      	lsls	r2, r3, #5
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	4413      	add	r3, r2
 800ce08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	0151      	lsls	r1, r2, #5
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	440a      	add	r2, r1
 800ce16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	015a      	lsls	r2, r3, #5
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	4413      	add	r3, r2
 800ce28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	0151      	lsls	r1, r2, #5
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	440a      	add	r2, r1
 800ce36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	f003 030f 	and.w	r3, r3, #15
 800ce50:	2101      	movs	r1, #1
 800ce52:	fa01 f303 	lsl.w	r3, r1, r3
 800ce56:	041b      	lsls	r3, r3, #16
 800ce58:	43db      	mvns	r3, r3
 800ce5a:	68f9      	ldr	r1, [r7, #12]
 800ce5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce60:	4013      	ands	r3, r2
 800ce62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce6a:	69da      	ldr	r2, [r3, #28]
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	f003 030f 	and.w	r3, r3, #15
 800ce74:	2101      	movs	r1, #1
 800ce76:	fa01 f303 	lsl.w	r3, r1, r3
 800ce7a:	041b      	lsls	r3, r3, #16
 800ce7c:	43db      	mvns	r3, r3
 800ce7e:	68f9      	ldr	r1, [r7, #12]
 800ce80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce84:	4013      	ands	r3, r2
 800ce86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	015a      	lsls	r2, r3, #5
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	4413      	add	r3, r2
 800ce90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	0159      	lsls	r1, r3, #5
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	440b      	add	r3, r1
 800ce9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea2:	4619      	mov	r1, r3
 800cea4:	4b05      	ldr	r3, [pc, #20]	; (800cebc <USB_DeactivateEndpoint+0x1b4>)
 800cea6:	4013      	ands	r3, r2
 800cea8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3714      	adds	r7, #20
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr
 800ceb8:	ec337800 	.word	0xec337800
 800cebc:	eff37800 	.word	0xeff37800

0800cec0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	785b      	ldrb	r3, [r3, #1]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	f040 810a 	bne.w	800d0f2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	699b      	ldr	r3, [r3, #24]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d132      	bne.n	800cf4c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	015a      	lsls	r2, r3, #5
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	4413      	add	r3, r2
 800ceee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cef2:	691b      	ldr	r3, [r3, #16]
 800cef4:	693a      	ldr	r2, [r7, #16]
 800cef6:	0151      	lsls	r1, r2, #5
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	440a      	add	r2, r1
 800cefc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cf04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cf08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	015a      	lsls	r2, r3, #5
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	4413      	add	r3, r2
 800cf12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	0151      	lsls	r1, r2, #5
 800cf1c:	697a      	ldr	r2, [r7, #20]
 800cf1e:	440a      	add	r2, r1
 800cf20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	015a      	lsls	r2, r3, #5
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	4413      	add	r3, r2
 800cf32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	693a      	ldr	r2, [r7, #16]
 800cf3a:	0151      	lsls	r1, r2, #5
 800cf3c:	697a      	ldr	r2, [r7, #20]
 800cf3e:	440a      	add	r2, r1
 800cf40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf44:	0cdb      	lsrs	r3, r3, #19
 800cf46:	04db      	lsls	r3, r3, #19
 800cf48:	6113      	str	r3, [r2, #16]
 800cf4a:	e074      	b.n	800d036 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	015a      	lsls	r2, r3, #5
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	4413      	add	r3, r2
 800cf54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	0151      	lsls	r1, r2, #5
 800cf5e:	697a      	ldr	r2, [r7, #20]
 800cf60:	440a      	add	r2, r1
 800cf62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf66:	0cdb      	lsrs	r3, r3, #19
 800cf68:	04db      	lsls	r3, r3, #19
 800cf6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	015a      	lsls	r2, r3, #5
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	4413      	add	r3, r2
 800cf74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf78:	691b      	ldr	r3, [r3, #16]
 800cf7a:	693a      	ldr	r2, [r7, #16]
 800cf7c:	0151      	lsls	r1, r2, #5
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	440a      	add	r2, r1
 800cf82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cf8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cf8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	015a      	lsls	r2, r3, #5
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	4413      	add	r3, r2
 800cf98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf9c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	6999      	ldr	r1, [r3, #24]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	440b      	add	r3, r1
 800cfa8:	1e59      	subs	r1, r3, #1
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	fbb1 f3f3 	udiv	r3, r1, r3
 800cfb2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800cfb4:	4b9e      	ldr	r3, [pc, #632]	; (800d230 <USB_EPStartXfer+0x370>)
 800cfb6:	400b      	ands	r3, r1
 800cfb8:	6939      	ldr	r1, [r7, #16]
 800cfba:	0148      	lsls	r0, r1, #5
 800cfbc:	6979      	ldr	r1, [r7, #20]
 800cfbe:	4401      	add	r1, r0
 800cfc0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	015a      	lsls	r2, r3, #5
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	4413      	add	r3, r2
 800cfd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd4:	691a      	ldr	r2, [r3, #16]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cfde:	6939      	ldr	r1, [r7, #16]
 800cfe0:	0148      	lsls	r0, r1, #5
 800cfe2:	6979      	ldr	r1, [r7, #20]
 800cfe4:	4401      	add	r1, r0
 800cfe6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cfea:	4313      	orrs	r3, r2
 800cfec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	791b      	ldrb	r3, [r3, #4]
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d11f      	bne.n	800d036 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	015a      	lsls	r2, r3, #5
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	4413      	add	r3, r2
 800cffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	0151      	lsls	r1, r2, #5
 800d008:	697a      	ldr	r2, [r7, #20]
 800d00a:	440a      	add	r2, r1
 800d00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d010:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d014:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	015a      	lsls	r2, r3, #5
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	4413      	add	r3, r2
 800d01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	693a      	ldr	r2, [r7, #16]
 800d026:	0151      	lsls	r1, r2, #5
 800d028:	697a      	ldr	r2, [r7, #20]
 800d02a:	440a      	add	r2, r1
 800d02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d030:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d034:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	015a      	lsls	r2, r3, #5
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	4413      	add	r3, r2
 800d03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	693a      	ldr	r2, [r7, #16]
 800d046:	0151      	lsls	r1, r2, #5
 800d048:	697a      	ldr	r2, [r7, #20]
 800d04a:	440a      	add	r2, r1
 800d04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d050:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d054:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	791b      	ldrb	r3, [r3, #4]
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d015      	beq.n	800d08a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	2b00      	cmp	r3, #0
 800d064:	f000 8106 	beq.w	800d274 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d06e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	f003 030f 	and.w	r3, r3, #15
 800d078:	2101      	movs	r1, #1
 800d07a:	fa01 f303 	lsl.w	r3, r1, r3
 800d07e:	6979      	ldr	r1, [r7, #20]
 800d080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d084:	4313      	orrs	r3, r2
 800d086:	634b      	str	r3, [r1, #52]	; 0x34
 800d088:	e0f4      	b.n	800d274 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d096:	2b00      	cmp	r3, #0
 800d098:	d110      	bne.n	800d0bc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	015a      	lsls	r2, r3, #5
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	693a      	ldr	r2, [r7, #16]
 800d0aa:	0151      	lsls	r1, r2, #5
 800d0ac:	697a      	ldr	r2, [r7, #20]
 800d0ae:	440a      	add	r2, r1
 800d0b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d0b8:	6013      	str	r3, [r2, #0]
 800d0ba:	e00f      	b.n	800d0dc <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	015a      	lsls	r2, r3, #5
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	693a      	ldr	r2, [r7, #16]
 800d0cc:	0151      	lsls	r1, r2, #5
 800d0ce:	697a      	ldr	r2, [r7, #20]
 800d0d0:	440a      	add	r2, r1
 800d0d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0da:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	6919      	ldr	r1, [r3, #16]
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	781a      	ldrb	r2, [r3, #0]
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 fa94 	bl	800d618 <USB_WritePacket>
 800d0f0:	e0c0      	b.n	800d274 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	015a      	lsls	r2, r3, #5
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	0151      	lsls	r1, r2, #5
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	440a      	add	r2, r1
 800d108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d10c:	0cdb      	lsrs	r3, r3, #19
 800d10e:	04db      	lsls	r3, r3, #19
 800d110:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	015a      	lsls	r2, r3, #5
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	4413      	add	r3, r2
 800d11a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	0151      	lsls	r1, r2, #5
 800d124:	697a      	ldr	r2, [r7, #20]
 800d126:	440a      	add	r2, r1
 800d128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d12c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d130:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d134:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	699b      	ldr	r3, [r3, #24]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d123      	bne.n	800d186 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	015a      	lsls	r2, r3, #5
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	4413      	add	r3, r2
 800d146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d14a:	691a      	ldr	r2, [r3, #16]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d154:	6939      	ldr	r1, [r7, #16]
 800d156:	0148      	lsls	r0, r1, #5
 800d158:	6979      	ldr	r1, [r7, #20]
 800d15a:	4401      	add	r1, r0
 800d15c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d160:	4313      	orrs	r3, r2
 800d162:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	015a      	lsls	r2, r3, #5
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	4413      	add	r3, r2
 800d16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	693a      	ldr	r2, [r7, #16]
 800d174:	0151      	lsls	r1, r2, #5
 800d176:	697a      	ldr	r2, [r7, #20]
 800d178:	440a      	add	r2, r1
 800d17a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d17e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d182:	6113      	str	r3, [r2, #16]
 800d184:	e037      	b.n	800d1f6 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	699a      	ldr	r2, [r3, #24]
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	4413      	add	r3, r2
 800d190:	1e5a      	subs	r2, r3, #1
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	fbb2 f3f3 	udiv	r3, r2, r3
 800d19a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	89fa      	ldrh	r2, [r7, #14]
 800d1a2:	fb03 f202 	mul.w	r2, r3, r2
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	015a      	lsls	r2, r3, #5
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	4413      	add	r3, r2
 800d1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1b6:	691a      	ldr	r2, [r3, #16]
 800d1b8:	89fb      	ldrh	r3, [r7, #14]
 800d1ba:	04d9      	lsls	r1, r3, #19
 800d1bc:	4b1c      	ldr	r3, [pc, #112]	; (800d230 <USB_EPStartXfer+0x370>)
 800d1be:	400b      	ands	r3, r1
 800d1c0:	6939      	ldr	r1, [r7, #16]
 800d1c2:	0148      	lsls	r0, r1, #5
 800d1c4:	6979      	ldr	r1, [r7, #20]
 800d1c6:	4401      	add	r1, r0
 800d1c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	015a      	lsls	r2, r3, #5
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1dc:	691a      	ldr	r2, [r3, #16]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1e6:	6939      	ldr	r1, [r7, #16]
 800d1e8:	0148      	lsls	r0, r1, #5
 800d1ea:	6979      	ldr	r1, [r7, #20]
 800d1ec:	4401      	add	r1, r0
 800d1ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	791b      	ldrb	r3, [r3, #4]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d12a      	bne.n	800d254 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d112      	bne.n	800d234 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	015a      	lsls	r2, r3, #5
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	4413      	add	r3, r2
 800d216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	693a      	ldr	r2, [r7, #16]
 800d21e:	0151      	lsls	r1, r2, #5
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	440a      	add	r2, r1
 800d224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d22c:	6013      	str	r3, [r2, #0]
 800d22e:	e011      	b.n	800d254 <USB_EPStartXfer+0x394>
 800d230:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	015a      	lsls	r2, r3, #5
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	4413      	add	r3, r2
 800d23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	0151      	lsls	r1, r2, #5
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	440a      	add	r2, r1
 800d24a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d24e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d252:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	015a      	lsls	r2, r3, #5
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	4413      	add	r3, r2
 800d25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	0151      	lsls	r1, r2, #5
 800d266:	697a      	ldr	r2, [r7, #20]
 800d268:	440a      	add	r2, r1
 800d26a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d26e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d272:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	3718      	adds	r7, #24
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop

0800d280 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	785b      	ldrb	r3, [r3, #1]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	f040 80ab 	bne.w	800d3f4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	699b      	ldr	r3, [r3, #24]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d132      	bne.n	800d30c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	68ba      	ldr	r2, [r7, #8]
 800d2b6:	0151      	lsls	r1, r2, #5
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	440a      	add	r2, r1
 800d2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d2c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d2c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	015a      	lsls	r2, r3, #5
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d6:	691b      	ldr	r3, [r3, #16]
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	0151      	lsls	r1, r2, #5
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	440a      	add	r2, r1
 800d2e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	015a      	lsls	r2, r3, #5
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	0151      	lsls	r1, r2, #5
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	440a      	add	r2, r1
 800d300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d304:	0cdb      	lsrs	r3, r3, #19
 800d306:	04db      	lsls	r3, r3, #19
 800d308:	6113      	str	r3, [r2, #16]
 800d30a:	e04e      	b.n	800d3aa <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	015a      	lsls	r2, r3, #5
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	4413      	add	r3, r2
 800d314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	0151      	lsls	r1, r2, #5
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	440a      	add	r2, r1
 800d322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d326:	0cdb      	lsrs	r3, r3, #19
 800d328:	04db      	lsls	r3, r3, #19
 800d32a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	015a      	lsls	r2, r3, #5
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	4413      	add	r3, r2
 800d334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	0151      	lsls	r1, r2, #5
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	440a      	add	r2, r1
 800d342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d346:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d34a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d34e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	699a      	ldr	r2, [r3, #24]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d903      	bls.n	800d364 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	68da      	ldr	r2, [r3, #12]
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	015a      	lsls	r2, r3, #5
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	4413      	add	r3, r2
 800d36c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	0151      	lsls	r1, r2, #5
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	440a      	add	r2, r1
 800d37a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d37e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d382:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	015a      	lsls	r2, r3, #5
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	4413      	add	r3, r2
 800d38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d390:	691a      	ldr	r2, [r3, #16]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	699b      	ldr	r3, [r3, #24]
 800d396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d39a:	68b9      	ldr	r1, [r7, #8]
 800d39c:	0148      	lsls	r0, r1, #5
 800d39e:	68f9      	ldr	r1, [r7, #12]
 800d3a0:	4401      	add	r1, r0
 800d3a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	015a      	lsls	r2, r3, #5
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	0151      	lsls	r1, r2, #5
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	440a      	add	r2, r1
 800d3c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3c8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	699b      	ldr	r3, [r3, #24]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d071      	beq.n	800d4b6 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	f003 030f 	and.w	r3, r3, #15
 800d3e2:	2101      	movs	r1, #1
 800d3e4:	fa01 f303 	lsl.w	r3, r1, r3
 800d3e8:	68f9      	ldr	r1, [r7, #12]
 800d3ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	634b      	str	r3, [r1, #52]	; 0x34
 800d3f2:	e060      	b.n	800d4b6 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	015a      	lsls	r2, r3, #5
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d400:	691b      	ldr	r3, [r3, #16]
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	0151      	lsls	r1, r2, #5
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	440a      	add	r2, r1
 800d40a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d40e:	0cdb      	lsrs	r3, r3, #19
 800d410:	04db      	lsls	r3, r3, #19
 800d412:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	015a      	lsls	r2, r3, #5
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	4413      	add	r3, r2
 800d41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	68ba      	ldr	r2, [r7, #8]
 800d424:	0151      	lsls	r1, r2, #5
 800d426:	68fa      	ldr	r2, [r7, #12]
 800d428:	440a      	add	r2, r1
 800d42a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d42e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d432:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d436:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	699b      	ldr	r3, [r3, #24]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d003      	beq.n	800d448 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	68da      	ldr	r2, [r3, #12]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	68da      	ldr	r2, [r3, #12]
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	015a      	lsls	r2, r3, #5
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	4413      	add	r3, r2
 800d458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d45c:	691b      	ldr	r3, [r3, #16]
 800d45e:	68ba      	ldr	r2, [r7, #8]
 800d460:	0151      	lsls	r1, r2, #5
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	440a      	add	r2, r1
 800d466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d46a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d46e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	015a      	lsls	r2, r3, #5
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	4413      	add	r3, r2
 800d478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d47c:	691a      	ldr	r2, [r3, #16]
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	69db      	ldr	r3, [r3, #28]
 800d482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d486:	68b9      	ldr	r1, [r7, #8]
 800d488:	0148      	lsls	r0, r1, #5
 800d48a:	68f9      	ldr	r1, [r7, #12]
 800d48c:	4401      	add	r1, r0
 800d48e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d492:	4313      	orrs	r3, r2
 800d494:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	015a      	lsls	r2, r3, #5
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	4413      	add	r3, r2
 800d49e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	68ba      	ldr	r2, [r7, #8]
 800d4a6:	0151      	lsls	r1, r2, #5
 800d4a8:	68fa      	ldr	r2, [r7, #12]
 800d4aa:	440a      	add	r2, r1
 800d4ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3714      	adds	r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b087      	sub	sp, #28
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	785b      	ldrb	r3, [r3, #1]
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d14a      	bne.n	800d578 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	015a      	lsls	r2, r3, #5
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4fa:	f040 8086 	bne.w	800d60a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	015a      	lsls	r2, r3, #5
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	4413      	add	r3, r2
 800d508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	683a      	ldr	r2, [r7, #0]
 800d510:	7812      	ldrb	r2, [r2, #0]
 800d512:	0151      	lsls	r1, r2, #5
 800d514:	693a      	ldr	r2, [r7, #16]
 800d516:	440a      	add	r2, r1
 800d518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d51c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d520:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	015a      	lsls	r2, r3, #5
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	4413      	add	r3, r2
 800d52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	683a      	ldr	r2, [r7, #0]
 800d534:	7812      	ldrb	r2, [r2, #0]
 800d536:	0151      	lsls	r1, r2, #5
 800d538:	693a      	ldr	r2, [r7, #16]
 800d53a:	440a      	add	r2, r1
 800d53c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d544:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	3301      	adds	r3, #1
 800d54a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f242 7210 	movw	r2, #10000	; 0x2710
 800d552:	4293      	cmp	r3, r2
 800d554:	d902      	bls.n	800d55c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d556:	2301      	movs	r3, #1
 800d558:	75fb      	strb	r3, [r7, #23]
          break;
 800d55a:	e056      	b.n	800d60a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	015a      	lsls	r2, r3, #5
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	4413      	add	r3, r2
 800d566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d574:	d0e7      	beq.n	800d546 <USB_EPStopXfer+0x82>
 800d576:	e048      	b.n	800d60a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	015a      	lsls	r2, r3, #5
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	4413      	add	r3, r2
 800d582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d58c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d590:	d13b      	bne.n	800d60a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	015a      	lsls	r2, r3, #5
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	4413      	add	r3, r2
 800d59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	683a      	ldr	r2, [r7, #0]
 800d5a4:	7812      	ldrb	r2, [r2, #0]
 800d5a6:	0151      	lsls	r1, r2, #5
 800d5a8:	693a      	ldr	r2, [r7, #16]
 800d5aa:	440a      	add	r2, r1
 800d5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d5b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	015a      	lsls	r2, r3, #5
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	4413      	add	r3, r2
 800d5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	7812      	ldrb	r2, [r2, #0]
 800d5ca:	0151      	lsls	r1, r2, #5
 800d5cc:	693a      	ldr	r2, [r7, #16]
 800d5ce:	440a      	add	r2, r1
 800d5d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f242 7210 	movw	r2, #10000	; 0x2710
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d902      	bls.n	800d5f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	75fb      	strb	r3, [r7, #23]
          break;
 800d5ee:	e00c      	b.n	800d60a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	015a      	lsls	r2, r3, #5
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d604:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d608:	d0e7      	beq.n	800d5da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	371c      	adds	r7, #28
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800d618:	b480      	push	{r7}
 800d61a:	b089      	sub	sp, #36	; 0x24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	4611      	mov	r1, r2
 800d624:	461a      	mov	r2, r3
 800d626:	460b      	mov	r3, r1
 800d628:	71fb      	strb	r3, [r7, #7]
 800d62a:	4613      	mov	r3, r2
 800d62c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800d636:	88bb      	ldrh	r3, [r7, #4]
 800d638:	3303      	adds	r3, #3
 800d63a:	089b      	lsrs	r3, r3, #2
 800d63c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800d63e:	2300      	movs	r3, #0
 800d640:	61bb      	str	r3, [r7, #24]
 800d642:	e018      	b.n	800d676 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d644:	79fb      	ldrb	r3, [r7, #7]
 800d646:	031a      	lsls	r2, r3, #12
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	4413      	add	r3, r2
 800d64c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d650:	461a      	mov	r2, r3
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	6013      	str	r3, [r2, #0]
    pSrc++;
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	3301      	adds	r3, #1
 800d65c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	3301      	adds	r3, #1
 800d662:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	3301      	adds	r3, #1
 800d668:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	3301      	adds	r3, #1
 800d66e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	3301      	adds	r3, #1
 800d674:	61bb      	str	r3, [r7, #24]
 800d676:	69ba      	ldr	r2, [r7, #24]
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d3e2      	bcc.n	800d644 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3724      	adds	r7, #36	; 0x24
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b08b      	sub	sp, #44	; 0x2c
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	4613      	mov	r3, r2
 800d698:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d6a2:	88fb      	ldrh	r3, [r7, #6]
 800d6a4:	089b      	lsrs	r3, r3, #2
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d6aa:	88fb      	ldrh	r3, [r7, #6]
 800d6ac:	f003 0303 	and.w	r3, r3, #3
 800d6b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	623b      	str	r3, [r7, #32]
 800d6b6:	e014      	b.n	800d6e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c2:	601a      	str	r2, [r3, #0]
    pDest++;
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d8:	3301      	adds	r3, #1
 800d6da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	623b      	str	r3, [r7, #32]
 800d6e2:	6a3a      	ldr	r2, [r7, #32]
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d3e6      	bcc.n	800d6b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d6ea:	8bfb      	ldrh	r3, [r7, #30]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01e      	beq.n	800d72e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	f107 0310 	add.w	r3, r7, #16
 800d700:	6812      	ldr	r2, [r2, #0]
 800d702:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	6a3b      	ldr	r3, [r7, #32]
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	00db      	lsls	r3, r3, #3
 800d70c:	fa22 f303 	lsr.w	r3, r2, r3
 800d710:	b2da      	uxtb	r2, r3
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	701a      	strb	r2, [r3, #0]
      i++;
 800d716:	6a3b      	ldr	r3, [r7, #32]
 800d718:	3301      	adds	r3, #1
 800d71a:	623b      	str	r3, [r7, #32]
      pDest++;
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	3301      	adds	r3, #1
 800d720:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d722:	8bfb      	ldrh	r3, [r7, #30]
 800d724:	3b01      	subs	r3, #1
 800d726:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d728:	8bfb      	ldrh	r3, [r7, #30]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1ea      	bne.n	800d704 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d730:	4618      	mov	r0, r3
 800d732:	372c      	adds	r7, #44	; 0x2c
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	785b      	ldrb	r3, [r3, #1]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d12c      	bne.n	800d7b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	015a      	lsls	r2, r3, #5
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	4413      	add	r3, r2
 800d760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	db12      	blt.n	800d790 <USB_EPSetStall+0x54>
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00f      	beq.n	800d790 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	015a      	lsls	r2, r3, #5
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	4413      	add	r3, r2
 800d778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	0151      	lsls	r1, r2, #5
 800d782:	68fa      	ldr	r2, [r7, #12]
 800d784:	440a      	add	r2, r1
 800d786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d78a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d78e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	015a      	lsls	r2, r3, #5
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	4413      	add	r3, r2
 800d798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	0151      	lsls	r1, r2, #5
 800d7a2:	68fa      	ldr	r2, [r7, #12]
 800d7a4:	440a      	add	r2, r1
 800d7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d7ae:	6013      	str	r3, [r2, #0]
 800d7b0:	e02b      	b.n	800d80a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	015a      	lsls	r2, r3, #5
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	db12      	blt.n	800d7ea <USB_EPSetStall+0xae>
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00f      	beq.n	800d7ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	015a      	lsls	r2, r3, #5
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	0151      	lsls	r1, r2, #5
 800d7dc:	68fa      	ldr	r2, [r7, #12]
 800d7de:	440a      	add	r2, r1
 800d7e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d7e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	015a      	lsls	r2, r3, #5
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	0151      	lsls	r1, r2, #5
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	440a      	add	r2, r1
 800d800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d808:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3714      	adds	r7, #20
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	785b      	ldrb	r3, [r3, #1]
 800d830:	2b01      	cmp	r3, #1
 800d832:	d128      	bne.n	800d886 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	015a      	lsls	r2, r3, #5
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	4413      	add	r3, r2
 800d83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	0151      	lsls	r1, r2, #5
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	440a      	add	r2, r1
 800d84a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d84e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d852:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	791b      	ldrb	r3, [r3, #4]
 800d858:	2b03      	cmp	r3, #3
 800d85a:	d003      	beq.n	800d864 <USB_EPClearStall+0x4c>
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	791b      	ldrb	r3, [r3, #4]
 800d860:	2b02      	cmp	r3, #2
 800d862:	d138      	bne.n	800d8d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	015a      	lsls	r2, r3, #5
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	4413      	add	r3, r2
 800d86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	0151      	lsls	r1, r2, #5
 800d876:	68fa      	ldr	r2, [r7, #12]
 800d878:	440a      	add	r2, r1
 800d87a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d87e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d882:	6013      	str	r3, [r2, #0]
 800d884:	e027      	b.n	800d8d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	015a      	lsls	r2, r3, #5
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	4413      	add	r3, r2
 800d88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	0151      	lsls	r1, r2, #5
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	440a      	add	r2, r1
 800d89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	791b      	ldrb	r3, [r3, #4]
 800d8aa:	2b03      	cmp	r3, #3
 800d8ac:	d003      	beq.n	800d8b6 <USB_EPClearStall+0x9e>
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	791b      	ldrb	r3, [r3, #4]
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	d10f      	bne.n	800d8d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	015a      	lsls	r2, r3, #5
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	4413      	add	r3, r2
 800d8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68ba      	ldr	r2, [r7, #8]
 800d8c6:	0151      	lsls	r1, r2, #5
 800d8c8:	68fa      	ldr	r2, [r7, #12]
 800d8ca:	440a      	add	r2, r1
 800d8cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d902:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d906:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	78fb      	ldrb	r3, [r7, #3]
 800d912:	011b      	lsls	r3, r3, #4
 800d914:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d918:	68f9      	ldr	r1, [r7, #12]
 800d91a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d91e:	4313      	orrs	r3, r2
 800d920:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d922:	2300      	movs	r3, #0
}
 800d924:	4618      	mov	r0, r3
 800d926:	3714      	adds	r7, #20
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d94a:	f023 0303 	bic.w	r3, r3, #3
 800d94e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d95e:	f023 0302 	bic.w	r3, r3, #2
 800d962:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d964:	2300      	movs	r3, #0
}
 800d966:	4618      	mov	r0, r3
 800d968:	3714      	adds	r7, #20
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d972:	b480      	push	{r7}
 800d974:	b085      	sub	sp, #20
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d98c:	f023 0303 	bic.w	r3, r3, #3
 800d990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9a0:	f043 0302 	orr.w	r3, r3, #2
 800d9a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3714      	adds	r7, #20
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b085      	sub	sp, #20
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	695b      	ldr	r3, [r3, #20]
 800d9c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	699b      	ldr	r3, [r3, #24]
 800d9c6:	68fa      	ldr	r2, [r7, #12]
 800d9c8:	4013      	ands	r3, r2
 800d9ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3714      	adds	r7, #20
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b085      	sub	sp, #20
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9ec:	699b      	ldr	r3, [r3, #24]
 800d9ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9f6:	69db      	ldr	r3, [r3, #28]
 800d9f8:	68ba      	ldr	r2, [r7, #8]
 800d9fa:	4013      	ands	r3, r2
 800d9fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	0c1b      	lsrs	r3, r3, #16
}
 800da02:	4618      	mov	r0, r3
 800da04:	3714      	adds	r7, #20
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800da0e:	b480      	push	{r7}
 800da10:	b085      	sub	sp, #20
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da20:	699b      	ldr	r3, [r3, #24]
 800da22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da2a:	69db      	ldr	r3, [r3, #28]
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	4013      	ands	r3, r2
 800da30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	b29b      	uxth	r3, r3
}
 800da36:	4618      	mov	r0, r3
 800da38:	3714      	adds	r7, #20
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr

0800da42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800da42:	b480      	push	{r7}
 800da44:	b085      	sub	sp, #20
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	460b      	mov	r3, r1
 800da4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800da52:	78fb      	ldrb	r3, [r7, #3]
 800da54:	015a      	lsls	r2, r3, #5
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	4413      	add	r3, r2
 800da5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da68:	695b      	ldr	r3, [r3, #20]
 800da6a:	68ba      	ldr	r2, [r7, #8]
 800da6c:	4013      	ands	r3, r2
 800da6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da70:	68bb      	ldr	r3, [r7, #8]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3714      	adds	r7, #20
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr

0800da7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800da7e:	b480      	push	{r7}
 800da80:	b087      	sub	sp, #28
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	460b      	mov	r3, r1
 800da88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800daa2:	78fb      	ldrb	r3, [r7, #3]
 800daa4:	f003 030f 	and.w	r3, r3, #15
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	fa22 f303 	lsr.w	r3, r2, r3
 800daae:	01db      	lsls	r3, r3, #7
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	4313      	orrs	r3, r2
 800dab6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dab8:	78fb      	ldrb	r3, [r7, #3]
 800daba:	015a      	lsls	r2, r3, #5
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	4413      	add	r3, r2
 800dac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	693a      	ldr	r2, [r7, #16]
 800dac8:	4013      	ands	r3, r2
 800daca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dacc:	68bb      	ldr	r3, [r7, #8]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	371c      	adds	r7, #28
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr

0800dada <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dada:	b480      	push	{r7}
 800dadc:	b083      	sub	sp, #12
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	695b      	ldr	r3, [r3, #20]
 800dae6:	f003 0301 	and.w	r3, r3, #1
}
 800daea:	4618      	mov	r0, r3
 800daec:	370c      	adds	r7, #12
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b085      	sub	sp, #20
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800db14:	f023 0307 	bic.w	r3, r3, #7
 800db18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	333c      	adds	r3, #60	; 0x3c
 800db4e:	3304      	adds	r3, #4
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	4a1c      	ldr	r2, [pc, #112]	; (800dbc8 <USB_EP0_OutStart+0x8c>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d90a      	bls.n	800db72 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db6c:	d101      	bne.n	800db72 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800db6e:	2300      	movs	r3, #0
 800db70:	e024      	b.n	800dbbc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db78:	461a      	mov	r2, r3
 800db7a:	2300      	movs	r3, #0
 800db7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db84:	691b      	ldr	r3, [r3, #16]
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db98:	691b      	ldr	r3, [r3, #16]
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dba0:	f043 0318 	orr.w	r3, r3, #24
 800dba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800dbb8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800dbba:	2300      	movs	r3, #0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3714      	adds	r7, #20
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr
 800dbc8:	4f54300a 	.word	0x4f54300a

0800dbcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	4a13      	ldr	r2, [pc, #76]	; (800dc30 <USB_CoreReset+0x64>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d901      	bls.n	800dbea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dbe6:	2303      	movs	r3, #3
 800dbe8:	e01b      	b.n	800dc22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	daf2      	bge.n	800dbd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	691b      	ldr	r3, [r3, #16]
 800dbfa:	f043 0201 	orr.w	r2, r3, #1
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	3301      	adds	r3, #1
 800dc06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	4a09      	ldr	r2, [pc, #36]	; (800dc30 <USB_CoreReset+0x64>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d901      	bls.n	800dc14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dc10:	2303      	movs	r3, #3
 800dc12:	e006      	b.n	800dc22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	f003 0301 	and.w	r3, r3, #1
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d0f0      	beq.n	800dc02 <USB_CoreReset+0x36>

  return HAL_OK;
 800dc20:	2300      	movs	r3, #0
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3714      	adds	r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop
 800dc30:	00030d40 	.word	0x00030d40

0800dc34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dc38:	4904      	ldr	r1, [pc, #16]	; (800dc4c <MX_FATFS_Init+0x18>)
 800dc3a:	4805      	ldr	r0, [pc, #20]	; (800dc50 <MX_FATFS_Init+0x1c>)
 800dc3c:	f001 fe44 	bl	800f8c8 <FATFS_LinkDriver>
 800dc40:	4603      	mov	r3, r0
 800dc42:	461a      	mov	r2, r3
 800dc44:	4b03      	ldr	r3, [pc, #12]	; (800dc54 <MX_FATFS_Init+0x20>)
 800dc46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dc48:	bf00      	nop
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	20000cc4 	.word	0x20000cc4
 800dc50:	080130f4 	.word	0x080130f4
 800dc54:	20000cc0 	.word	0x20000cc0

0800dc58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dc62:	f000 f879 	bl	800dd58 <BSP_SD_IsDetected>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d001      	beq.n	800dc70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	e012      	b.n	800dc96 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800dc70:	480b      	ldr	r0, [pc, #44]	; (800dca0 <BSP_SD_Init+0x48>)
 800dc72:	f7f9 f947 	bl	8006f04 <HAL_SD_Init>
 800dc76:	4603      	mov	r3, r0
 800dc78:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800dc7a:	79fb      	ldrb	r3, [r7, #7]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d109      	bne.n	800dc94 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800dc80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800dc84:	4806      	ldr	r0, [pc, #24]	; (800dca0 <BSP_SD_Init+0x48>)
 800dc86:	f7fa f813 	bl	8007cb0 <HAL_SD_ConfigWideBusOperation>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800dc90:	2301      	movs	r3, #1
 800dc92:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800dc94:	79fb      	ldrb	r3, [r7, #7]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	2000041c 	.word	0x2000041c

0800dca4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b088      	sub	sp, #32
 800dca8:	af02      	add	r7, sp, #8
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
 800dcb0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	68ba      	ldr	r2, [r7, #8]
 800dcbe:	68f9      	ldr	r1, [r7, #12]
 800dcc0:	4806      	ldr	r0, [pc, #24]	; (800dcdc <BSP_SD_ReadBlocks+0x38>)
 800dcc2:	f7f9 fa47 	bl	8007154 <HAL_SD_ReadBlocks>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dccc:	2301      	movs	r3, #1
 800dcce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dcd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3718      	adds	r7, #24
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	2000041c 	.word	0x2000041c

0800dce0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b088      	sub	sp, #32
 800dce4:	af02      	add	r7, sp, #8
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	607a      	str	r2, [r7, #4]
 800dcec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	68ba      	ldr	r2, [r7, #8]
 800dcfa:	68f9      	ldr	r1, [r7, #12]
 800dcfc:	4806      	ldr	r0, [pc, #24]	; (800dd18 <BSP_SD_WriteBlocks+0x38>)
 800dcfe:	f7f9 fbbb 	bl	8007478 <HAL_SD_WriteBlocks>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d001      	beq.n	800dd0c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dd0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3718      	adds	r7, #24
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	2000041c 	.word	0x2000041c

0800dd1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dd20:	4805      	ldr	r0, [pc, #20]	; (800dd38 <BSP_SD_GetCardState+0x1c>)
 800dd22:	f7fa f8d9 	bl	8007ed8 <HAL_SD_GetCardState>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b04      	cmp	r3, #4
 800dd2a:	bf14      	ite	ne
 800dd2c:	2301      	movne	r3, #1
 800dd2e:	2300      	moveq	r3, #0
 800dd30:	b2db      	uxtb	r3, r3
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	2000041c 	.word	0x2000041c

0800dd3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dd44:	6879      	ldr	r1, [r7, #4]
 800dd46:	4803      	ldr	r0, [pc, #12]	; (800dd54 <BSP_SD_GetCardInfo+0x18>)
 800dd48:	f7f9 ff86 	bl	8007c58 <HAL_SD_GetCardInfo>
}
 800dd4c:	bf00      	nop
 800dd4e:	3708      	adds	r7, #8
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	2000041c 	.word	0x2000041c

0800dd58 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dd62:	f000 f80b 	bl	800dd7c <BSP_PlatformIsDetected>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d101      	bne.n	800dd70 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dd70:	79fb      	ldrb	r3, [r7, #7]
 800dd72:	b2db      	uxtb	r3, r3
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dd82:	2301      	movs	r3, #1
 800dd84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dd86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dd8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dd8e:	f7f5 f84b 	bl	8002e28 <HAL_GPIO_ReadPin>
 800dd92:	4603      	mov	r3, r0
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d001      	beq.n	800dd9c <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dd9c:	79fb      	ldrb	r3, [r7, #7]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
	...

0800dda8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	4603      	mov	r3, r0
 800ddb0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ddb2:	4b0b      	ldr	r3, [pc, #44]	; (800dde0 <SD_CheckStatus+0x38>)
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ddb8:	f7ff ffb0 	bl	800dd1c <BSP_SD_GetCardState>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d107      	bne.n	800ddd2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ddc2:	4b07      	ldr	r3, [pc, #28]	; (800dde0 <SD_CheckStatus+0x38>)
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	f023 0301 	bic.w	r3, r3, #1
 800ddcc:	b2da      	uxtb	r2, r3
 800ddce:	4b04      	ldr	r3, [pc, #16]	; (800dde0 <SD_CheckStatus+0x38>)
 800ddd0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ddd2:	4b03      	ldr	r3, [pc, #12]	; (800dde0 <SD_CheckStatus+0x38>)
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	b2db      	uxtb	r3, r3
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	2000000d 	.word	0x2000000d

0800dde4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ddee:	4b0b      	ldr	r3, [pc, #44]	; (800de1c <SD_initialize+0x38>)
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ddf4:	f7ff ff30 	bl	800dc58 <BSP_SD_Init>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d107      	bne.n	800de0e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ddfe:	79fb      	ldrb	r3, [r7, #7]
 800de00:	4618      	mov	r0, r3
 800de02:	f7ff ffd1 	bl	800dda8 <SD_CheckStatus>
 800de06:	4603      	mov	r3, r0
 800de08:	461a      	mov	r2, r3
 800de0a:	4b04      	ldr	r3, [pc, #16]	; (800de1c <SD_initialize+0x38>)
 800de0c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800de0e:	4b03      	ldr	r3, [pc, #12]	; (800de1c <SD_initialize+0x38>)
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	b2db      	uxtb	r3, r3
}
 800de14:	4618      	mov	r0, r3
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	2000000d 	.word	0x2000000d

0800de20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	4603      	mov	r3, r0
 800de28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800de2a:	79fb      	ldrb	r3, [r7, #7]
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7ff ffbb 	bl	800dda8 <SD_CheckStatus>
 800de32:	4603      	mov	r3, r0
}
 800de34:	4618      	mov	r0, r3
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	60b9      	str	r1, [r7, #8]
 800de44:	607a      	str	r2, [r7, #4]
 800de46:	603b      	str	r3, [r7, #0]
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800de50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de54:	683a      	ldr	r2, [r7, #0]
 800de56:	6879      	ldr	r1, [r7, #4]
 800de58:	68b8      	ldr	r0, [r7, #8]
 800de5a:	f7ff ff23 	bl	800dca4 <BSP_SD_ReadBlocks>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d107      	bne.n	800de74 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800de64:	bf00      	nop
 800de66:	f7ff ff59 	bl	800dd1c <BSP_SD_GetCardState>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d1fa      	bne.n	800de66 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800de74:	7dfb      	ldrb	r3, [r7, #23]
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b086      	sub	sp, #24
 800de82:	af00      	add	r7, sp, #0
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
 800de88:	603b      	str	r3, [r7, #0]
 800de8a:	4603      	mov	r3, r0
 800de8c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de8e:	2301      	movs	r3, #1
 800de90:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800de92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	6879      	ldr	r1, [r7, #4]
 800de9a:	68b8      	ldr	r0, [r7, #8]
 800de9c:	f7ff ff20 	bl	800dce0 <BSP_SD_WriteBlocks>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d107      	bne.n	800deb6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800dea6:	bf00      	nop
 800dea8:	f7ff ff38 	bl	800dd1c <BSP_SD_GetCardState>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1fa      	bne.n	800dea8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800deb2:	2300      	movs	r3, #0
 800deb4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800deb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3718      	adds	r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08c      	sub	sp, #48	; 0x30
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	4603      	mov	r3, r0
 800dec8:	603a      	str	r2, [r7, #0]
 800deca:	71fb      	strb	r3, [r7, #7]
 800decc:	460b      	mov	r3, r1
 800dece:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ded0:	2301      	movs	r3, #1
 800ded2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ded6:	4b25      	ldr	r3, [pc, #148]	; (800df6c <SD_ioctl+0xac>)
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	f003 0301 	and.w	r3, r3, #1
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <SD_ioctl+0x28>
 800dee4:	2303      	movs	r3, #3
 800dee6:	e03c      	b.n	800df62 <SD_ioctl+0xa2>

  switch (cmd)
 800dee8:	79bb      	ldrb	r3, [r7, #6]
 800deea:	2b03      	cmp	r3, #3
 800deec:	d834      	bhi.n	800df58 <SD_ioctl+0x98>
 800deee:	a201      	add	r2, pc, #4	; (adr r2, 800def4 <SD_ioctl+0x34>)
 800def0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def4:	0800df05 	.word	0x0800df05
 800def8:	0800df0d 	.word	0x0800df0d
 800defc:	0800df25 	.word	0x0800df25
 800df00:	0800df3f 	.word	0x0800df3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800df04:	2300      	movs	r3, #0
 800df06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df0a:	e028      	b.n	800df5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800df0c:	f107 0308 	add.w	r3, r7, #8
 800df10:	4618      	mov	r0, r3
 800df12:	f7ff ff13 	bl	800dd3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800df16:	6a3a      	ldr	r2, [r7, #32]
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df22:	e01c      	b.n	800df5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df24:	f107 0308 	add.w	r3, r7, #8
 800df28:	4618      	mov	r0, r3
 800df2a:	f7ff ff07 	bl	800dd3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800df2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df30:	b29a      	uxth	r2, r3
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800df36:	2300      	movs	r3, #0
 800df38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df3c:	e00f      	b.n	800df5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df3e:	f107 0308 	add.w	r3, r7, #8
 800df42:	4618      	mov	r0, r3
 800df44:	f7ff fefa 	bl	800dd3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	0a5a      	lsrs	r2, r3, #9
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df50:	2300      	movs	r3, #0
 800df52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df56:	e002      	b.n	800df5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800df58:	2304      	movs	r3, #4
 800df5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800df5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800df62:	4618      	mov	r0, r3
 800df64:	3730      	adds	r7, #48	; 0x30
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	2000000d 	.word	0x2000000d

0800df70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	460b      	mov	r3, r1
 800df7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800df7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800df80:	f002 fa58 	bl	8010434 <USBD_static_malloc>
 800df84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d105      	bne.n	800df98 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800df94:	2302      	movs	r3, #2
 800df96:	e066      	b.n	800e066 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	68fa      	ldr	r2, [r7, #12]
 800df9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	7c1b      	ldrb	r3, [r3, #16]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d119      	bne.n	800dfdc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dfa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfac:	2202      	movs	r2, #2
 800dfae:	2181      	movs	r1, #129	; 0x81
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f002 f879 	bl	80100a8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2201      	movs	r2, #1
 800dfba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dfbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfc0:	2202      	movs	r2, #2
 800dfc2:	2101      	movs	r1, #1
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f002 f86f 	bl	80100a8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2201      	movs	r2, #1
 800dfce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2210      	movs	r2, #16
 800dfd6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800dfda:	e016      	b.n	800e00a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dfdc:	2340      	movs	r3, #64	; 0x40
 800dfde:	2202      	movs	r2, #2
 800dfe0:	2181      	movs	r1, #129	; 0x81
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f002 f860 	bl	80100a8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2201      	movs	r2, #1
 800dfec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dfee:	2340      	movs	r3, #64	; 0x40
 800dff0:	2202      	movs	r2, #2
 800dff2:	2101      	movs	r1, #1
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f002 f857 	bl	80100a8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2201      	movs	r2, #1
 800dffe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2210      	movs	r2, #16
 800e006:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e00a:	2308      	movs	r3, #8
 800e00c:	2203      	movs	r2, #3
 800e00e:	2182      	movs	r1, #130	; 0x82
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f002 f849 	bl	80100a8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2201      	movs	r2, #1
 800e01a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2200      	movs	r2, #0
 800e02c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2200      	movs	r2, #0
 800e034:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	7c1b      	ldrb	r3, [r3, #16]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d109      	bne.n	800e054 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e04a:	2101      	movs	r1, #1
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f002 f9a5 	bl	801039c <USBD_LL_PrepareReceive>
 800e052:	e007      	b.n	800e064 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e05a:	2340      	movs	r3, #64	; 0x40
 800e05c:	2101      	movs	r1, #1
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f002 f99c 	bl	801039c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b082      	sub	sp, #8
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
 800e076:	460b      	mov	r3, r1
 800e078:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e07a:	2181      	movs	r1, #129	; 0x81
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f002 f851 	bl	8010124 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e088:	2101      	movs	r1, #1
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f002 f84a 	bl	8010124 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2200      	movs	r2, #0
 800e094:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e098:	2182      	movs	r1, #130	; 0x82
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f002 f842 	bl	8010124 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00e      	beq.n	800e0d8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f002 f9c0 	bl	8010450 <USBD_static_free>
    pdev->pClassData = NULL;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
	...

0800e0e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b086      	sub	sp, #24
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0fe:	2300      	movs	r3, #0
 800e100:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d101      	bne.n	800e10c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e108:	2303      	movs	r3, #3
 800e10a:	e0af      	b.n	800e26c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e114:	2b00      	cmp	r3, #0
 800e116:	d03f      	beq.n	800e198 <USBD_CDC_Setup+0xb4>
 800e118:	2b20      	cmp	r3, #32
 800e11a:	f040 809f 	bne.w	800e25c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	88db      	ldrh	r3, [r3, #6]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d02e      	beq.n	800e184 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	b25b      	sxtb	r3, r3
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	da16      	bge.n	800e15e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	683a      	ldr	r2, [r7, #0]
 800e13a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e13c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	88d2      	ldrh	r2, [r2, #6]
 800e142:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	88db      	ldrh	r3, [r3, #6]
 800e148:	2b07      	cmp	r3, #7
 800e14a:	bf28      	it	cs
 800e14c:	2307      	movcs	r3, #7
 800e14e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	89fa      	ldrh	r2, [r7, #14]
 800e154:	4619      	mov	r1, r3
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f001 fae9 	bl	800f72e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e15c:	e085      	b.n	800e26a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	785a      	ldrb	r2, [r3, #1]
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	88db      	ldrh	r3, [r3, #6]
 800e16c:	b2da      	uxtb	r2, r3
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e174:	6939      	ldr	r1, [r7, #16]
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	88db      	ldrh	r3, [r3, #6]
 800e17a:	461a      	mov	r2, r3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f001 fb02 	bl	800f786 <USBD_CtlPrepareRx>
      break;
 800e182:	e072      	b.n	800e26a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	683a      	ldr	r2, [r7, #0]
 800e18e:	7850      	ldrb	r0, [r2, #1]
 800e190:	2200      	movs	r2, #0
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	4798      	blx	r3
      break;
 800e196:	e068      	b.n	800e26a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	785b      	ldrb	r3, [r3, #1]
 800e19c:	2b0b      	cmp	r3, #11
 800e19e:	d852      	bhi.n	800e246 <USBD_CDC_Setup+0x162>
 800e1a0:	a201      	add	r2, pc, #4	; (adr r2, 800e1a8 <USBD_CDC_Setup+0xc4>)
 800e1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a6:	bf00      	nop
 800e1a8:	0800e1d9 	.word	0x0800e1d9
 800e1ac:	0800e255 	.word	0x0800e255
 800e1b0:	0800e247 	.word	0x0800e247
 800e1b4:	0800e247 	.word	0x0800e247
 800e1b8:	0800e247 	.word	0x0800e247
 800e1bc:	0800e247 	.word	0x0800e247
 800e1c0:	0800e247 	.word	0x0800e247
 800e1c4:	0800e247 	.word	0x0800e247
 800e1c8:	0800e247 	.word	0x0800e247
 800e1cc:	0800e247 	.word	0x0800e247
 800e1d0:	0800e203 	.word	0x0800e203
 800e1d4:	0800e22d 	.word	0x0800e22d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	2b03      	cmp	r3, #3
 800e1e2:	d107      	bne.n	800e1f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e1e4:	f107 030a 	add.w	r3, r7, #10
 800e1e8:	2202      	movs	r2, #2
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f001 fa9e 	bl	800f72e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e1f2:	e032      	b.n	800e25a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e1f4:	6839      	ldr	r1, [r7, #0]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f001 fa28 	bl	800f64c <USBD_CtlError>
            ret = USBD_FAIL;
 800e1fc:	2303      	movs	r3, #3
 800e1fe:	75fb      	strb	r3, [r7, #23]
          break;
 800e200:	e02b      	b.n	800e25a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	2b03      	cmp	r3, #3
 800e20c:	d107      	bne.n	800e21e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e20e:	f107 030d 	add.w	r3, r7, #13
 800e212:	2201      	movs	r2, #1
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f001 fa89 	bl	800f72e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e21c:	e01d      	b.n	800e25a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e21e:	6839      	ldr	r1, [r7, #0]
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f001 fa13 	bl	800f64c <USBD_CtlError>
            ret = USBD_FAIL;
 800e226:	2303      	movs	r3, #3
 800e228:	75fb      	strb	r3, [r7, #23]
          break;
 800e22a:	e016      	b.n	800e25a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b03      	cmp	r3, #3
 800e236:	d00f      	beq.n	800e258 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e238:	6839      	ldr	r1, [r7, #0]
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f001 fa06 	bl	800f64c <USBD_CtlError>
            ret = USBD_FAIL;
 800e240:	2303      	movs	r3, #3
 800e242:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e244:	e008      	b.n	800e258 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e246:	6839      	ldr	r1, [r7, #0]
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f001 f9ff 	bl	800f64c <USBD_CtlError>
          ret = USBD_FAIL;
 800e24e:	2303      	movs	r3, #3
 800e250:	75fb      	strb	r3, [r7, #23]
          break;
 800e252:	e002      	b.n	800e25a <USBD_CDC_Setup+0x176>
          break;
 800e254:	bf00      	nop
 800e256:	e008      	b.n	800e26a <USBD_CDC_Setup+0x186>
          break;
 800e258:	bf00      	nop
      }
      break;
 800e25a:	e006      	b.n	800e26a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e25c:	6839      	ldr	r1, [r7, #0]
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f001 f9f4 	bl	800f64c <USBD_CtlError>
      ret = USBD_FAIL;
 800e264:	2303      	movs	r3, #3
 800e266:	75fb      	strb	r3, [r7, #23]
      break;
 800e268:	bf00      	nop
  }

  return (uint8_t)ret;
 800e26a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3718      	adds	r7, #24
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	460b      	mov	r3, r1
 800e27e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e286:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d101      	bne.n	800e296 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e292:	2303      	movs	r3, #3
 800e294:	e04f      	b.n	800e336 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e29c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e29e:	78fa      	ldrb	r2, [r7, #3]
 800e2a0:	6879      	ldr	r1, [r7, #4]
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	4413      	add	r3, r2
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	440b      	add	r3, r1
 800e2ac:	3318      	adds	r3, #24
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d029      	beq.n	800e308 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e2b4:	78fa      	ldrb	r2, [r7, #3]
 800e2b6:	6879      	ldr	r1, [r7, #4]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	440b      	add	r3, r1
 800e2c2:	3318      	adds	r3, #24
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	78f9      	ldrb	r1, [r7, #3]
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	00db      	lsls	r3, r3, #3
 800e2ce:	440b      	add	r3, r1
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	4403      	add	r3, r0
 800e2d4:	3348      	adds	r3, #72	; 0x48
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800e2dc:	fb01 f303 	mul.w	r3, r1, r3
 800e2e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d110      	bne.n	800e308 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e2e6:	78fa      	ldrb	r2, [r7, #3]
 800e2e8:	6879      	ldr	r1, [r7, #4]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	4413      	add	r3, r2
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	440b      	add	r3, r1
 800e2f4:	3318      	adds	r3, #24
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e2fa:	78f9      	ldrb	r1, [r7, #3]
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	2200      	movs	r2, #0
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f002 f813 	bl	801032c <USBD_LL_Transmit>
 800e306:	e015      	b.n	800e334 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00b      	beq.n	800e334 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	68ba      	ldr	r2, [r7, #8]
 800e326:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e32a:	68ba      	ldr	r2, [r7, #8]
 800e32c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e330:	78fa      	ldrb	r2, [r7, #3]
 800e332:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e334:	2300      	movs	r3, #0
}
 800e336:	4618      	mov	r0, r3
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b084      	sub	sp, #16
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e350:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d101      	bne.n	800e360 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e35c:	2303      	movs	r3, #3
 800e35e:	e015      	b.n	800e38c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e360:	78fb      	ldrb	r3, [r7, #3]
 800e362:	4619      	mov	r1, r3
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f002 f851 	bl	801040c <USBD_LL_GetRxDataSize>
 800e36a:	4602      	mov	r2, r0
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e378:	68db      	ldr	r3, [r3, #12]
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e386:	4611      	mov	r1, r2
 800e388:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d101      	bne.n	800e3ae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	e01b      	b.n	800e3e6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d015      	beq.n	800e3e4 <USBD_CDC_EP0_RxReady+0x50>
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e3be:	2bff      	cmp	r3, #255	; 0xff
 800e3c0:	d010      	beq.n	800e3e4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3c8:	689b      	ldr	r3, [r3, #8]
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e3d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e3d8:	b292      	uxth	r2, r2
 800e3da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	22ff      	movs	r2, #255	; 0xff
 800e3e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
	...

0800e3f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2243      	movs	r2, #67	; 0x43
 800e3fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e3fe:	4b03      	ldr	r3, [pc, #12]	; (800e40c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e400:	4618      	mov	r0, r3
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr
 800e40c:	20000098 	.word	0x20000098

0800e410 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2243      	movs	r2, #67	; 0x43
 800e41c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e41e:	4b03      	ldr	r3, [pc, #12]	; (800e42c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e420:	4618      	mov	r0, r3
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	20000054 	.word	0x20000054

0800e430 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2243      	movs	r2, #67	; 0x43
 800e43c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e43e:	4b03      	ldr	r3, [pc, #12]	; (800e44c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e440:	4618      	mov	r0, r3
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	200000dc 	.word	0x200000dc

0800e450 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	220a      	movs	r2, #10
 800e45c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e45e:	4b03      	ldr	r3, [pc, #12]	; (800e46c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e460:	4618      	mov	r0, r3
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	20000010 	.word	0x20000010

0800e470 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d101      	bne.n	800e484 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e480:	2303      	movs	r3, #3
 800e482:	e004      	b.n	800e48e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	683a      	ldr	r2, [r7, #0]
 800e488:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e48c:	2300      	movs	r3, #0
}
 800e48e:	4618      	mov	r0, r3
 800e490:	370c      	adds	r7, #12
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr

0800e49a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e49a:	b480      	push	{r7}
 800e49c:	b087      	sub	sp, #28
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	60f8      	str	r0, [r7, #12]
 800e4a2:	60b9      	str	r1, [r7, #8]
 800e4a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d101      	bne.n	800e4b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e4b4:	2303      	movs	r3, #3
 800e4b6:	e008      	b.n	800e4ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e4c8:	2300      	movs	r3, #0
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	371c      	adds	r7, #28
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e4d6:	b480      	push	{r7}
 800e4d8:	b085      	sub	sp, #20
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d101      	bne.n	800e4f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e4ee:	2303      	movs	r3, #3
 800e4f0:	e004      	b.n	800e4fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	683a      	ldr	r2, [r7, #0]
 800e4f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e4fa:	2300      	movs	r3, #0
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3714      	adds	r7, #20
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e516:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e522:	2303      	movs	r3, #3
 800e524:	e016      	b.n	800e554 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	7c1b      	ldrb	r3, [r3, #16]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d109      	bne.n	800e542 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e534:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e538:	2101      	movs	r1, #1
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f001 ff2e 	bl	801039c <USBD_LL_PrepareReceive>
 800e540:	e007      	b.n	800e552 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e548:	2340      	movs	r3, #64	; 0x40
 800e54a:	2101      	movs	r1, #1
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f001 ff25 	bl	801039c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3710      	adds	r7, #16
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	4613      	mov	r3, r2
 800e568:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d101      	bne.n	800e574 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e570:	2303      	movs	r3, #3
 800e572:	e01f      	b.n	800e5b4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2200      	movs	r2, #0
 800e578:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2200      	movs	r2, #0
 800e580:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2200      	movs	r2, #0
 800e588:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d003      	beq.n	800e59a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2201      	movs	r2, #1
 800e59e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	79fa      	ldrb	r2, [r7, #7]
 800e5a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f001 fd01 	bl	800ffb0 <USBD_LL_Init>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e5b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3718      	adds	r7, #24
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b084      	sub	sp, #16
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d101      	bne.n	800e5d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e5d0:	2303      	movs	r3, #3
 800e5d2:	e016      	b.n	800e602 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	683a      	ldr	r2, [r7, #0]
 800e5d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d00b      	beq.n	800e600 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f0:	f107 020e 	add.w	r2, r7, #14
 800e5f4:	4610      	mov	r0, r2
 800e5f6:	4798      	blx	r3
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b082      	sub	sp, #8
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f001 fd16 	bl	8010044 <USBD_LL_Start>
 800e618:	4603      	mov	r3, r0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3708      	adds	r7, #8
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}

0800e622 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e622:	b480      	push	{r7}
 800e624:	b083      	sub	sp, #12
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	460b      	mov	r3, r1
 800e642:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e644:	2303      	movs	r3, #3
 800e646:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d009      	beq.n	800e666 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	78fa      	ldrb	r2, [r7, #3]
 800e65c:	4611      	mov	r1, r2
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	4798      	blx	r3
 800e662:	4603      	mov	r3, r0
 800e664:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e666:	7bfb      	ldrb	r3, [r7, #15]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	460b      	mov	r3, r1
 800e67a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e682:	2b00      	cmp	r3, #0
 800e684:	d007      	beq.n	800e696 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	78fa      	ldrb	r2, [r7, #3]
 800e690:	4611      	mov	r1, r2
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	4798      	blx	r3
  }

  return USBD_OK;
 800e696:	2300      	movs	r3, #0
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e6b0:	6839      	ldr	r1, [r7, #0]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f000 ff90 	bl	800f5d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e6d4:	f003 031f 	and.w	r3, r3, #31
 800e6d8:	2b02      	cmp	r3, #2
 800e6da:	d01a      	beq.n	800e712 <USBD_LL_SetupStage+0x72>
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d822      	bhi.n	800e726 <USBD_LL_SetupStage+0x86>
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d002      	beq.n	800e6ea <USBD_LL_SetupStage+0x4a>
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d00a      	beq.n	800e6fe <USBD_LL_SetupStage+0x5e>
 800e6e8:	e01d      	b.n	800e726 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 fa62 	bl	800ebbc <USBD_StdDevReq>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	73fb      	strb	r3, [r7, #15]
      break;
 800e6fc:	e020      	b.n	800e740 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e704:	4619      	mov	r1, r3
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 fac6 	bl	800ec98 <USBD_StdItfReq>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73fb      	strb	r3, [r7, #15]
      break;
 800e710:	e016      	b.n	800e740 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e718:	4619      	mov	r1, r3
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 fb05 	bl	800ed2a <USBD_StdEPReq>
 800e720:	4603      	mov	r3, r0
 800e722:	73fb      	strb	r3, [r7, #15]
      break;
 800e724:	e00c      	b.n	800e740 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e72c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e730:	b2db      	uxtb	r3, r3
 800e732:	4619      	mov	r1, r3
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f001 fd2b 	bl	8010190 <USBD_LL_StallEP>
 800e73a:	4603      	mov	r3, r0
 800e73c:	73fb      	strb	r3, [r7, #15]
      break;
 800e73e:	bf00      	nop
  }

  return ret;
 800e740:	7bfb      	ldrb	r3, [r7, #15]
}
 800e742:	4618      	mov	r0, r3
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}

0800e74a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b086      	sub	sp, #24
 800e74e:	af00      	add	r7, sp, #0
 800e750:	60f8      	str	r0, [r7, #12]
 800e752:	460b      	mov	r3, r1
 800e754:	607a      	str	r2, [r7, #4]
 800e756:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e758:	7afb      	ldrb	r3, [r7, #11]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d138      	bne.n	800e7d0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e764:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e76c:	2b03      	cmp	r3, #3
 800e76e:	d14a      	bne.n	800e806 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	689a      	ldr	r2, [r3, #8]
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d913      	bls.n	800e7a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	689a      	ldr	r2, [r3, #8]
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	1ad2      	subs	r2, r2, r3
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	68da      	ldr	r2, [r3, #12]
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	4293      	cmp	r3, r2
 800e794:	bf28      	it	cs
 800e796:	4613      	movcs	r3, r2
 800e798:	461a      	mov	r2, r3
 800e79a:	6879      	ldr	r1, [r7, #4]
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f001 f80f 	bl	800f7c0 <USBD_CtlContinueRx>
 800e7a2:	e030      	b.n	800e806 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	2b03      	cmp	r3, #3
 800e7ae:	d10b      	bne.n	800e7c8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d005      	beq.n	800e7c8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7c2:	691b      	ldr	r3, [r3, #16]
 800e7c4:	68f8      	ldr	r0, [r7, #12]
 800e7c6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f001 f80a 	bl	800f7e2 <USBD_CtlSendStatus>
 800e7ce:	e01a      	b.n	800e806 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	2b03      	cmp	r3, #3
 800e7da:	d114      	bne.n	800e806 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7e2:	699b      	ldr	r3, [r3, #24]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d00e      	beq.n	800e806 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7ee:	699b      	ldr	r3, [r3, #24]
 800e7f0:	7afa      	ldrb	r2, [r7, #11]
 800e7f2:	4611      	mov	r1, r2
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	4798      	blx	r3
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e7fc:	7dfb      	ldrb	r3, [r7, #23]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d001      	beq.n	800e806 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e802:	7dfb      	ldrb	r3, [r7, #23]
 800e804:	e000      	b.n	800e808 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3718      	adds	r7, #24
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b086      	sub	sp, #24
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	460b      	mov	r3, r1
 800e81a:	607a      	str	r2, [r7, #4]
 800e81c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e81e:	7afb      	ldrb	r3, [r7, #11]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d16b      	bne.n	800e8fc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	3314      	adds	r3, #20
 800e828:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e830:	2b02      	cmp	r3, #2
 800e832:	d156      	bne.n	800e8e2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	689a      	ldr	r2, [r3, #8]
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	68db      	ldr	r3, [r3, #12]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d914      	bls.n	800e86a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	689a      	ldr	r2, [r3, #8]
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	1ad2      	subs	r2, r2, r3
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	689b      	ldr	r3, [r3, #8]
 800e852:	461a      	mov	r2, r3
 800e854:	6879      	ldr	r1, [r7, #4]
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f000 ff84 	bl	800f764 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e85c:	2300      	movs	r3, #0
 800e85e:	2200      	movs	r2, #0
 800e860:	2100      	movs	r1, #0
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	f001 fd9a 	bl	801039c <USBD_LL_PrepareReceive>
 800e868:	e03b      	b.n	800e8e2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	68da      	ldr	r2, [r3, #12]
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	429a      	cmp	r2, r3
 800e874:	d11c      	bne.n	800e8b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	685a      	ldr	r2, [r3, #4]
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e87e:	429a      	cmp	r2, r3
 800e880:	d316      	bcc.n	800e8b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	685a      	ldr	r2, [r3, #4]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d20f      	bcs.n	800e8b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e890:	2200      	movs	r2, #0
 800e892:	2100      	movs	r1, #0
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f000 ff65 	bl	800f764 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2200      	movs	r2, #0
 800e89e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2100      	movs	r1, #0
 800e8a8:	68f8      	ldr	r0, [r7, #12]
 800e8aa:	f001 fd77 	bl	801039c <USBD_LL_PrepareReceive>
 800e8ae:	e018      	b.n	800e8e2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	2b03      	cmp	r3, #3
 800e8ba:	d10b      	bne.n	800e8d4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d005      	beq.n	800e8d4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e8d4:	2180      	movs	r1, #128	; 0x80
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f001 fc5a 	bl	8010190 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e8dc:	68f8      	ldr	r0, [r7, #12]
 800e8de:	f000 ff93 	bl	800f808 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d122      	bne.n	800e932 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f7ff fe98 	bl	800e622 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e8fa:	e01a      	b.n	800e932 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e902:	b2db      	uxtb	r3, r3
 800e904:	2b03      	cmp	r3, #3
 800e906:	d114      	bne.n	800e932 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e90e:	695b      	ldr	r3, [r3, #20]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d00e      	beq.n	800e932 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e91a:	695b      	ldr	r3, [r3, #20]
 800e91c:	7afa      	ldrb	r2, [r7, #11]
 800e91e:	4611      	mov	r1, r2
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	4798      	blx	r3
 800e924:	4603      	mov	r3, r0
 800e926:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e928:	7dfb      	ldrb	r3, [r7, #23]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d001      	beq.n	800e932 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e92e:	7dfb      	ldrb	r3, [r7, #23]
 800e930:	e000      	b.n	800e934 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3718      	adds	r7, #24
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e96c:	2303      	movs	r3, #3
 800e96e:	e02f      	b.n	800e9d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00f      	beq.n	800e99a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d009      	beq.n	800e99a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	6852      	ldr	r2, [r2, #4]
 800e992:	b2d2      	uxtb	r2, r2
 800e994:	4611      	mov	r1, r2
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e99a:	2340      	movs	r3, #64	; 0x40
 800e99c:	2200      	movs	r2, #0
 800e99e:	2100      	movs	r1, #0
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f001 fb81 	bl	80100a8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2240      	movs	r2, #64	; 0x40
 800e9b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e9b6:	2340      	movs	r3, #64	; 0x40
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	2180      	movs	r1, #128	; 0x80
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f001 fb73 	bl	80100a8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2240      	movs	r2, #64	; 0x40
 800e9cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	78fa      	ldrb	r2, [r7, #3]
 800e9e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e9ea:	2300      	movs	r3, #0
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	370c      	adds	r7, #12
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2204      	movs	r2, #4
 800ea12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ea16:	2300      	movs	r3, #0
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	2b04      	cmp	r3, #4
 800ea36:	d106      	bne.n	800ea46 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ea3e:	b2da      	uxtb	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ea46:	2300      	movs	r3, #0
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d101      	bne.n	800ea6a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ea66:	2303      	movs	r3, #3
 800ea68:	e012      	b.n	800ea90 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	2b03      	cmp	r3, #3
 800ea74:	d10b      	bne.n	800ea8e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea7c:	69db      	ldr	r3, [r3, #28]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d005      	beq.n	800ea8e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea88:	69db      	ldr	r3, [r3, #28]
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d101      	bne.n	800eab2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800eaae:	2303      	movs	r3, #3
 800eab0:	e014      	b.n	800eadc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b03      	cmp	r3, #3
 800eabc:	d10d      	bne.n	800eada <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eac4:	6a1b      	ldr	r3, [r3, #32]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d007      	beq.n	800eada <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ead0:	6a1b      	ldr	r3, [r3, #32]
 800ead2:	78fa      	ldrb	r2, [r7, #3]
 800ead4:	4611      	mov	r1, r2
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	460b      	mov	r3, r1
 800eaee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800eafa:	2303      	movs	r3, #3
 800eafc:	e014      	b.n	800eb28 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	2b03      	cmp	r3, #3
 800eb08:	d10d      	bne.n	800eb26 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d007      	beq.n	800eb26 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1e:	78fa      	ldrb	r2, [r7, #3]
 800eb20:	4611      	mov	r1, r2
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb26:	2300      	movs	r3, #0
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	370c      	adds	r7, #12
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr

0800eb46 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b082      	sub	sp, #8
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2201      	movs	r2, #1
 800eb52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d009      	beq.n	800eb74 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	6852      	ldr	r2, [r2, #4]
 800eb6c:	b2d2      	uxtb	r2, r2
 800eb6e:	4611      	mov	r1, r2
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	4798      	blx	r3
  }

  return USBD_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3708      	adds	r7, #8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eb7e:	b480      	push	{r7}
 800eb80:	b087      	sub	sp, #28
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	3301      	adds	r3, #1
 800eb94:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eb9c:	8a3b      	ldrh	r3, [r7, #16]
 800eb9e:	021b      	lsls	r3, r3, #8
 800eba0:	b21a      	sxth	r2, r3
 800eba2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eba6:	4313      	orrs	r3, r2
 800eba8:	b21b      	sxth	r3, r3
 800ebaa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ebac:	89fb      	ldrh	r3, [r7, #14]
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	371c      	adds	r7, #28
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr
	...

0800ebbc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ebd2:	2b40      	cmp	r3, #64	; 0x40
 800ebd4:	d005      	beq.n	800ebe2 <USBD_StdDevReq+0x26>
 800ebd6:	2b40      	cmp	r3, #64	; 0x40
 800ebd8:	d853      	bhi.n	800ec82 <USBD_StdDevReq+0xc6>
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d00b      	beq.n	800ebf6 <USBD_StdDevReq+0x3a>
 800ebde:	2b20      	cmp	r3, #32
 800ebe0:	d14f      	bne.n	800ec82 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	6839      	ldr	r1, [r7, #0]
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	4798      	blx	r3
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	73fb      	strb	r3, [r7, #15]
      break;
 800ebf4:	e04a      	b.n	800ec8c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	785b      	ldrb	r3, [r3, #1]
 800ebfa:	2b09      	cmp	r3, #9
 800ebfc:	d83b      	bhi.n	800ec76 <USBD_StdDevReq+0xba>
 800ebfe:	a201      	add	r2, pc, #4	; (adr r2, 800ec04 <USBD_StdDevReq+0x48>)
 800ec00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec04:	0800ec59 	.word	0x0800ec59
 800ec08:	0800ec6d 	.word	0x0800ec6d
 800ec0c:	0800ec77 	.word	0x0800ec77
 800ec10:	0800ec63 	.word	0x0800ec63
 800ec14:	0800ec77 	.word	0x0800ec77
 800ec18:	0800ec37 	.word	0x0800ec37
 800ec1c:	0800ec2d 	.word	0x0800ec2d
 800ec20:	0800ec77 	.word	0x0800ec77
 800ec24:	0800ec4f 	.word	0x0800ec4f
 800ec28:	0800ec41 	.word	0x0800ec41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 f9de 	bl	800eff0 <USBD_GetDescriptor>
          break;
 800ec34:	e024      	b.n	800ec80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 fb43 	bl	800f2c4 <USBD_SetAddress>
          break;
 800ec3e:	e01f      	b.n	800ec80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ec40:	6839      	ldr	r1, [r7, #0]
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 fb82 	bl	800f34c <USBD_SetConfig>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	73fb      	strb	r3, [r7, #15]
          break;
 800ec4c:	e018      	b.n	800ec80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ec4e:	6839      	ldr	r1, [r7, #0]
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 fc21 	bl	800f498 <USBD_GetConfig>
          break;
 800ec56:	e013      	b.n	800ec80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ec58:	6839      	ldr	r1, [r7, #0]
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f000 fc52 	bl	800f504 <USBD_GetStatus>
          break;
 800ec60:	e00e      	b.n	800ec80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ec62:	6839      	ldr	r1, [r7, #0]
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 fc81 	bl	800f56c <USBD_SetFeature>
          break;
 800ec6a:	e009      	b.n	800ec80 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ec6c:	6839      	ldr	r1, [r7, #0]
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 fc90 	bl	800f594 <USBD_ClrFeature>
          break;
 800ec74:	e004      	b.n	800ec80 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ec76:	6839      	ldr	r1, [r7, #0]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 fce7 	bl	800f64c <USBD_CtlError>
          break;
 800ec7e:	bf00      	nop
      }
      break;
 800ec80:	e004      	b.n	800ec8c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ec82:	6839      	ldr	r1, [r7, #0]
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 fce1 	bl	800f64c <USBD_CtlError>
      break;
 800ec8a:	bf00      	nop
  }

  return ret;
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop

0800ec98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eca2:	2300      	movs	r3, #0
 800eca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecae:	2b40      	cmp	r3, #64	; 0x40
 800ecb0:	d005      	beq.n	800ecbe <USBD_StdItfReq+0x26>
 800ecb2:	2b40      	cmp	r3, #64	; 0x40
 800ecb4:	d82f      	bhi.n	800ed16 <USBD_StdItfReq+0x7e>
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d001      	beq.n	800ecbe <USBD_StdItfReq+0x26>
 800ecba:	2b20      	cmp	r3, #32
 800ecbc:	d12b      	bne.n	800ed16 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	3b01      	subs	r3, #1
 800ecc8:	2b02      	cmp	r3, #2
 800ecca:	d81d      	bhi.n	800ed08 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	889b      	ldrh	r3, [r3, #4]
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d813      	bhi.n	800ecfe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecdc:	689b      	ldr	r3, [r3, #8]
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	4798      	blx	r3
 800ece4:	4603      	mov	r3, r0
 800ece6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	88db      	ldrh	r3, [r3, #6]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d110      	bne.n	800ed12 <USBD_StdItfReq+0x7a>
 800ecf0:	7bfb      	ldrb	r3, [r7, #15]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d10d      	bne.n	800ed12 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f000 fd73 	bl	800f7e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ecfc:	e009      	b.n	800ed12 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ecfe:	6839      	ldr	r1, [r7, #0]
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 fca3 	bl	800f64c <USBD_CtlError>
          break;
 800ed06:	e004      	b.n	800ed12 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ed08:	6839      	ldr	r1, [r7, #0]
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f000 fc9e 	bl	800f64c <USBD_CtlError>
          break;
 800ed10:	e000      	b.n	800ed14 <USBD_StdItfReq+0x7c>
          break;
 800ed12:	bf00      	nop
      }
      break;
 800ed14:	e004      	b.n	800ed20 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ed16:	6839      	ldr	r1, [r7, #0]
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 fc97 	bl	800f64c <USBD_CtlError>
      break;
 800ed1e:	bf00      	nop
  }

  return ret;
 800ed20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b084      	sub	sp, #16
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ed34:	2300      	movs	r3, #0
 800ed36:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	889b      	ldrh	r3, [r3, #4]
 800ed3c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed46:	2b40      	cmp	r3, #64	; 0x40
 800ed48:	d007      	beq.n	800ed5a <USBD_StdEPReq+0x30>
 800ed4a:	2b40      	cmp	r3, #64	; 0x40
 800ed4c:	f200 8145 	bhi.w	800efda <USBD_StdEPReq+0x2b0>
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d00c      	beq.n	800ed6e <USBD_StdEPReq+0x44>
 800ed54:	2b20      	cmp	r3, #32
 800ed56:	f040 8140 	bne.w	800efda <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed60:	689b      	ldr	r3, [r3, #8]
 800ed62:	6839      	ldr	r1, [r7, #0]
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	4798      	blx	r3
 800ed68:	4603      	mov	r3, r0
 800ed6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ed6c:	e13a      	b.n	800efe4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	785b      	ldrb	r3, [r3, #1]
 800ed72:	2b03      	cmp	r3, #3
 800ed74:	d007      	beq.n	800ed86 <USBD_StdEPReq+0x5c>
 800ed76:	2b03      	cmp	r3, #3
 800ed78:	f300 8129 	bgt.w	800efce <USBD_StdEPReq+0x2a4>
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d07f      	beq.n	800ee80 <USBD_StdEPReq+0x156>
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d03c      	beq.n	800edfe <USBD_StdEPReq+0xd4>
 800ed84:	e123      	b.n	800efce <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	2b02      	cmp	r3, #2
 800ed90:	d002      	beq.n	800ed98 <USBD_StdEPReq+0x6e>
 800ed92:	2b03      	cmp	r3, #3
 800ed94:	d016      	beq.n	800edc4 <USBD_StdEPReq+0x9a>
 800ed96:	e02c      	b.n	800edf2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed98:	7bbb      	ldrb	r3, [r7, #14]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d00d      	beq.n	800edba <USBD_StdEPReq+0x90>
 800ed9e:	7bbb      	ldrb	r3, [r7, #14]
 800eda0:	2b80      	cmp	r3, #128	; 0x80
 800eda2:	d00a      	beq.n	800edba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eda4:	7bbb      	ldrb	r3, [r7, #14]
 800eda6:	4619      	mov	r1, r3
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f001 f9f1 	bl	8010190 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800edae:	2180      	movs	r1, #128	; 0x80
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f001 f9ed 	bl	8010190 <USBD_LL_StallEP>
 800edb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800edb8:	e020      	b.n	800edfc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800edba:	6839      	ldr	r1, [r7, #0]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 fc45 	bl	800f64c <USBD_CtlError>
              break;
 800edc2:	e01b      	b.n	800edfc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	885b      	ldrh	r3, [r3, #2]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d10e      	bne.n	800edea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800edcc:	7bbb      	ldrb	r3, [r7, #14]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d00b      	beq.n	800edea <USBD_StdEPReq+0xc0>
 800edd2:	7bbb      	ldrb	r3, [r7, #14]
 800edd4:	2b80      	cmp	r3, #128	; 0x80
 800edd6:	d008      	beq.n	800edea <USBD_StdEPReq+0xc0>
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	88db      	ldrh	r3, [r3, #6]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d104      	bne.n	800edea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ede0:	7bbb      	ldrb	r3, [r7, #14]
 800ede2:	4619      	mov	r1, r3
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f001 f9d3 	bl	8010190 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 fcf9 	bl	800f7e2 <USBD_CtlSendStatus>

              break;
 800edf0:	e004      	b.n	800edfc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800edf2:	6839      	ldr	r1, [r7, #0]
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 fc29 	bl	800f64c <USBD_CtlError>
              break;
 800edfa:	bf00      	nop
          }
          break;
 800edfc:	e0ec      	b.n	800efd8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	2b02      	cmp	r3, #2
 800ee08:	d002      	beq.n	800ee10 <USBD_StdEPReq+0xe6>
 800ee0a:	2b03      	cmp	r3, #3
 800ee0c:	d016      	beq.n	800ee3c <USBD_StdEPReq+0x112>
 800ee0e:	e030      	b.n	800ee72 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee10:	7bbb      	ldrb	r3, [r7, #14]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00d      	beq.n	800ee32 <USBD_StdEPReq+0x108>
 800ee16:	7bbb      	ldrb	r3, [r7, #14]
 800ee18:	2b80      	cmp	r3, #128	; 0x80
 800ee1a:	d00a      	beq.n	800ee32 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee1c:	7bbb      	ldrb	r3, [r7, #14]
 800ee1e:	4619      	mov	r1, r3
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f001 f9b5 	bl	8010190 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee26:	2180      	movs	r1, #128	; 0x80
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f001 f9b1 	bl	8010190 <USBD_LL_StallEP>
 800ee2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ee30:	e025      	b.n	800ee7e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ee32:	6839      	ldr	r1, [r7, #0]
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f000 fc09 	bl	800f64c <USBD_CtlError>
              break;
 800ee3a:	e020      	b.n	800ee7e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	885b      	ldrh	r3, [r3, #2]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d11b      	bne.n	800ee7c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ee44:	7bbb      	ldrb	r3, [r7, #14]
 800ee46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d004      	beq.n	800ee58 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ee4e:	7bbb      	ldrb	r3, [r7, #14]
 800ee50:	4619      	mov	r1, r3
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f001 f9d2 	bl	80101fc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f000 fcc2 	bl	800f7e2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	6839      	ldr	r1, [r7, #0]
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	4798      	blx	r3
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ee70:	e004      	b.n	800ee7c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 fbe9 	bl	800f64c <USBD_CtlError>
              break;
 800ee7a:	e000      	b.n	800ee7e <USBD_StdEPReq+0x154>
              break;
 800ee7c:	bf00      	nop
          }
          break;
 800ee7e:	e0ab      	b.n	800efd8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	2b02      	cmp	r3, #2
 800ee8a:	d002      	beq.n	800ee92 <USBD_StdEPReq+0x168>
 800ee8c:	2b03      	cmp	r3, #3
 800ee8e:	d032      	beq.n	800eef6 <USBD_StdEPReq+0x1cc>
 800ee90:	e097      	b.n	800efc2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee92:	7bbb      	ldrb	r3, [r7, #14]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d007      	beq.n	800eea8 <USBD_StdEPReq+0x17e>
 800ee98:	7bbb      	ldrb	r3, [r7, #14]
 800ee9a:	2b80      	cmp	r3, #128	; 0x80
 800ee9c:	d004      	beq.n	800eea8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ee9e:	6839      	ldr	r1, [r7, #0]
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f000 fbd3 	bl	800f64c <USBD_CtlError>
                break;
 800eea6:	e091      	b.n	800efcc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eea8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	da0b      	bge.n	800eec8 <USBD_StdEPReq+0x19e>
 800eeb0:	7bbb      	ldrb	r3, [r7, #14]
 800eeb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	4413      	add	r3, r2
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	3310      	adds	r3, #16
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	4413      	add	r3, r2
 800eec4:	3304      	adds	r3, #4
 800eec6:	e00b      	b.n	800eee0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eec8:	7bbb      	ldrb	r3, [r7, #14]
 800eeca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eece:	4613      	mov	r3, r2
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	4413      	add	r3, r2
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	4413      	add	r3, r2
 800eede:	3304      	adds	r3, #4
 800eee0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	2200      	movs	r2, #0
 800eee6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	2202      	movs	r2, #2
 800eeec:	4619      	mov	r1, r3
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 fc1d 	bl	800f72e <USBD_CtlSendData>
              break;
 800eef4:	e06a      	b.n	800efcc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	da11      	bge.n	800ef22 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eefe:	7bbb      	ldrb	r3, [r7, #14]
 800ef00:	f003 020f 	and.w	r2, r3, #15
 800ef04:	6879      	ldr	r1, [r7, #4]
 800ef06:	4613      	mov	r3, r2
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	4413      	add	r3, r2
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	440b      	add	r3, r1
 800ef10:	3324      	adds	r3, #36	; 0x24
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d117      	bne.n	800ef48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ef18:	6839      	ldr	r1, [r7, #0]
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 fb96 	bl	800f64c <USBD_CtlError>
                  break;
 800ef20:	e054      	b.n	800efcc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ef22:	7bbb      	ldrb	r3, [r7, #14]
 800ef24:	f003 020f 	and.w	r2, r3, #15
 800ef28:	6879      	ldr	r1, [r7, #4]
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	4413      	add	r3, r2
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	440b      	add	r3, r1
 800ef34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ef38:	881b      	ldrh	r3, [r3, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d104      	bne.n	800ef48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ef3e:	6839      	ldr	r1, [r7, #0]
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 fb83 	bl	800f64c <USBD_CtlError>
                  break;
 800ef46:	e041      	b.n	800efcc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	da0b      	bge.n	800ef68 <USBD_StdEPReq+0x23e>
 800ef50:	7bbb      	ldrb	r3, [r7, #14]
 800ef52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef56:	4613      	mov	r3, r2
 800ef58:	009b      	lsls	r3, r3, #2
 800ef5a:	4413      	add	r3, r2
 800ef5c:	009b      	lsls	r3, r3, #2
 800ef5e:	3310      	adds	r3, #16
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	4413      	add	r3, r2
 800ef64:	3304      	adds	r3, #4
 800ef66:	e00b      	b.n	800ef80 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ef68:	7bbb      	ldrb	r3, [r7, #14]
 800ef6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef6e:	4613      	mov	r3, r2
 800ef70:	009b      	lsls	r3, r3, #2
 800ef72:	4413      	add	r3, r2
 800ef74:	009b      	lsls	r3, r3, #2
 800ef76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	3304      	adds	r3, #4
 800ef80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ef82:	7bbb      	ldrb	r3, [r7, #14]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d002      	beq.n	800ef8e <USBD_StdEPReq+0x264>
 800ef88:	7bbb      	ldrb	r3, [r7, #14]
 800ef8a:	2b80      	cmp	r3, #128	; 0x80
 800ef8c:	d103      	bne.n	800ef96 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	2200      	movs	r2, #0
 800ef92:	601a      	str	r2, [r3, #0]
 800ef94:	e00e      	b.n	800efb4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ef96:	7bbb      	ldrb	r3, [r7, #14]
 800ef98:	4619      	mov	r1, r3
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f001 f964 	bl	8010268 <USBD_LL_IsStallEP>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d003      	beq.n	800efae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	2201      	movs	r2, #1
 800efaa:	601a      	str	r2, [r3, #0]
 800efac:	e002      	b.n	800efb4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	2200      	movs	r2, #0
 800efb2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	2202      	movs	r2, #2
 800efb8:	4619      	mov	r1, r3
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 fbb7 	bl	800f72e <USBD_CtlSendData>
              break;
 800efc0:	e004      	b.n	800efcc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800efc2:	6839      	ldr	r1, [r7, #0]
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 fb41 	bl	800f64c <USBD_CtlError>
              break;
 800efca:	bf00      	nop
          }
          break;
 800efcc:	e004      	b.n	800efd8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800efce:	6839      	ldr	r1, [r7, #0]
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 fb3b 	bl	800f64c <USBD_CtlError>
          break;
 800efd6:	bf00      	nop
      }
      break;
 800efd8:	e004      	b.n	800efe4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800efda:	6839      	ldr	r1, [r7, #0]
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 fb35 	bl	800f64c <USBD_CtlError>
      break;
 800efe2:	bf00      	nop
  }

  return ret;
 800efe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3710      	adds	r7, #16
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
	...

0800eff0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800effa:	2300      	movs	r3, #0
 800effc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800effe:	2300      	movs	r3, #0
 800f000:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f002:	2300      	movs	r3, #0
 800f004:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	885b      	ldrh	r3, [r3, #2]
 800f00a:	0a1b      	lsrs	r3, r3, #8
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	3b01      	subs	r3, #1
 800f010:	2b06      	cmp	r3, #6
 800f012:	f200 8128 	bhi.w	800f266 <USBD_GetDescriptor+0x276>
 800f016:	a201      	add	r2, pc, #4	; (adr r2, 800f01c <USBD_GetDescriptor+0x2c>)
 800f018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f01c:	0800f039 	.word	0x0800f039
 800f020:	0800f051 	.word	0x0800f051
 800f024:	0800f091 	.word	0x0800f091
 800f028:	0800f267 	.word	0x0800f267
 800f02c:	0800f267 	.word	0x0800f267
 800f030:	0800f207 	.word	0x0800f207
 800f034:	0800f233 	.word	0x0800f233
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	7c12      	ldrb	r2, [r2, #16]
 800f044:	f107 0108 	add.w	r1, r7, #8
 800f048:	4610      	mov	r0, r2
 800f04a:	4798      	blx	r3
 800f04c:	60f8      	str	r0, [r7, #12]
      break;
 800f04e:	e112      	b.n	800f276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	7c1b      	ldrb	r3, [r3, #16]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d10d      	bne.n	800f074 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f060:	f107 0208 	add.w	r2, r7, #8
 800f064:	4610      	mov	r0, r2
 800f066:	4798      	blx	r3
 800f068:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	3301      	adds	r3, #1
 800f06e:	2202      	movs	r2, #2
 800f070:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f072:	e100      	b.n	800f276 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07c:	f107 0208 	add.w	r2, r7, #8
 800f080:	4610      	mov	r0, r2
 800f082:	4798      	blx	r3
 800f084:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	3301      	adds	r3, #1
 800f08a:	2202      	movs	r2, #2
 800f08c:	701a      	strb	r2, [r3, #0]
      break;
 800f08e:	e0f2      	b.n	800f276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	885b      	ldrh	r3, [r3, #2]
 800f094:	b2db      	uxtb	r3, r3
 800f096:	2b05      	cmp	r3, #5
 800f098:	f200 80ac 	bhi.w	800f1f4 <USBD_GetDescriptor+0x204>
 800f09c:	a201      	add	r2, pc, #4	; (adr r2, 800f0a4 <USBD_GetDescriptor+0xb4>)
 800f09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a2:	bf00      	nop
 800f0a4:	0800f0bd 	.word	0x0800f0bd
 800f0a8:	0800f0f1 	.word	0x0800f0f1
 800f0ac:	0800f125 	.word	0x0800f125
 800f0b0:	0800f159 	.word	0x0800f159
 800f0b4:	0800f18d 	.word	0x0800f18d
 800f0b8:	0800f1c1 	.word	0x0800f1c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00b      	beq.n	800f0e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	7c12      	ldrb	r2, [r2, #16]
 800f0d4:	f107 0108 	add.w	r1, r7, #8
 800f0d8:	4610      	mov	r0, r2
 800f0da:	4798      	blx	r3
 800f0dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0de:	e091      	b.n	800f204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f0e0:	6839      	ldr	r1, [r7, #0]
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 fab2 	bl	800f64c <USBD_CtlError>
            err++;
 800f0e8:	7afb      	ldrb	r3, [r7, #11]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	72fb      	strb	r3, [r7, #11]
          break;
 800f0ee:	e089      	b.n	800f204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0f6:	689b      	ldr	r3, [r3, #8]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00b      	beq.n	800f114 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f102:	689b      	ldr	r3, [r3, #8]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	7c12      	ldrb	r2, [r2, #16]
 800f108:	f107 0108 	add.w	r1, r7, #8
 800f10c:	4610      	mov	r0, r2
 800f10e:	4798      	blx	r3
 800f110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f112:	e077      	b.n	800f204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f114:	6839      	ldr	r1, [r7, #0]
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f000 fa98 	bl	800f64c <USBD_CtlError>
            err++;
 800f11c:	7afb      	ldrb	r3, [r7, #11]
 800f11e:	3301      	adds	r3, #1
 800f120:	72fb      	strb	r3, [r7, #11]
          break;
 800f122:	e06f      	b.n	800f204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00b      	beq.n	800f148 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	7c12      	ldrb	r2, [r2, #16]
 800f13c:	f107 0108 	add.w	r1, r7, #8
 800f140:	4610      	mov	r0, r2
 800f142:	4798      	blx	r3
 800f144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f146:	e05d      	b.n	800f204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f148:	6839      	ldr	r1, [r7, #0]
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 fa7e 	bl	800f64c <USBD_CtlError>
            err++;
 800f150:	7afb      	ldrb	r3, [r7, #11]
 800f152:	3301      	adds	r3, #1
 800f154:	72fb      	strb	r3, [r7, #11]
          break;
 800f156:	e055      	b.n	800f204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f15e:	691b      	ldr	r3, [r3, #16]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00b      	beq.n	800f17c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f16a:	691b      	ldr	r3, [r3, #16]
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	7c12      	ldrb	r2, [r2, #16]
 800f170:	f107 0108 	add.w	r1, r7, #8
 800f174:	4610      	mov	r0, r2
 800f176:	4798      	blx	r3
 800f178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f17a:	e043      	b.n	800f204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f17c:	6839      	ldr	r1, [r7, #0]
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 fa64 	bl	800f64c <USBD_CtlError>
            err++;
 800f184:	7afb      	ldrb	r3, [r7, #11]
 800f186:	3301      	adds	r3, #1
 800f188:	72fb      	strb	r3, [r7, #11]
          break;
 800f18a:	e03b      	b.n	800f204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f192:	695b      	ldr	r3, [r3, #20]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d00b      	beq.n	800f1b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f19e:	695b      	ldr	r3, [r3, #20]
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	7c12      	ldrb	r2, [r2, #16]
 800f1a4:	f107 0108 	add.w	r1, r7, #8
 800f1a8:	4610      	mov	r0, r2
 800f1aa:	4798      	blx	r3
 800f1ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1ae:	e029      	b.n	800f204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f1b0:	6839      	ldr	r1, [r7, #0]
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 fa4a 	bl	800f64c <USBD_CtlError>
            err++;
 800f1b8:	7afb      	ldrb	r3, [r7, #11]
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	72fb      	strb	r3, [r7, #11]
          break;
 800f1be:	e021      	b.n	800f204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d00b      	beq.n	800f1e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1d2:	699b      	ldr	r3, [r3, #24]
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	7c12      	ldrb	r2, [r2, #16]
 800f1d8:	f107 0108 	add.w	r1, r7, #8
 800f1dc:	4610      	mov	r0, r2
 800f1de:	4798      	blx	r3
 800f1e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1e2:	e00f      	b.n	800f204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f1e4:	6839      	ldr	r1, [r7, #0]
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 fa30 	bl	800f64c <USBD_CtlError>
            err++;
 800f1ec:	7afb      	ldrb	r3, [r7, #11]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	72fb      	strb	r3, [r7, #11]
          break;
 800f1f2:	e007      	b.n	800f204 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f1f4:	6839      	ldr	r1, [r7, #0]
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 fa28 	bl	800f64c <USBD_CtlError>
          err++;
 800f1fc:	7afb      	ldrb	r3, [r7, #11]
 800f1fe:	3301      	adds	r3, #1
 800f200:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f202:	bf00      	nop
      }
      break;
 800f204:	e037      	b.n	800f276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	7c1b      	ldrb	r3, [r3, #16]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d109      	bne.n	800f222 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f216:	f107 0208 	add.w	r2, r7, #8
 800f21a:	4610      	mov	r0, r2
 800f21c:	4798      	blx	r3
 800f21e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f220:	e029      	b.n	800f276 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f222:	6839      	ldr	r1, [r7, #0]
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f000 fa11 	bl	800f64c <USBD_CtlError>
        err++;
 800f22a:	7afb      	ldrb	r3, [r7, #11]
 800f22c:	3301      	adds	r3, #1
 800f22e:	72fb      	strb	r3, [r7, #11]
      break;
 800f230:	e021      	b.n	800f276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	7c1b      	ldrb	r3, [r3, #16]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d10d      	bne.n	800f256 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f242:	f107 0208 	add.w	r2, r7, #8
 800f246:	4610      	mov	r0, r2
 800f248:	4798      	blx	r3
 800f24a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	3301      	adds	r3, #1
 800f250:	2207      	movs	r2, #7
 800f252:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f254:	e00f      	b.n	800f276 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f256:	6839      	ldr	r1, [r7, #0]
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 f9f7 	bl	800f64c <USBD_CtlError>
        err++;
 800f25e:	7afb      	ldrb	r3, [r7, #11]
 800f260:	3301      	adds	r3, #1
 800f262:	72fb      	strb	r3, [r7, #11]
      break;
 800f264:	e007      	b.n	800f276 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f266:	6839      	ldr	r1, [r7, #0]
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 f9ef 	bl	800f64c <USBD_CtlError>
      err++;
 800f26e:	7afb      	ldrb	r3, [r7, #11]
 800f270:	3301      	adds	r3, #1
 800f272:	72fb      	strb	r3, [r7, #11]
      break;
 800f274:	bf00      	nop
  }

  if (err != 0U)
 800f276:	7afb      	ldrb	r3, [r7, #11]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d11e      	bne.n	800f2ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	88db      	ldrh	r3, [r3, #6]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d016      	beq.n	800f2b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f284:	893b      	ldrh	r3, [r7, #8]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00e      	beq.n	800f2a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	88da      	ldrh	r2, [r3, #6]
 800f28e:	893b      	ldrh	r3, [r7, #8]
 800f290:	4293      	cmp	r3, r2
 800f292:	bf28      	it	cs
 800f294:	4613      	movcs	r3, r2
 800f296:	b29b      	uxth	r3, r3
 800f298:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f29a:	893b      	ldrh	r3, [r7, #8]
 800f29c:	461a      	mov	r2, r3
 800f29e:	68f9      	ldr	r1, [r7, #12]
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 fa44 	bl	800f72e <USBD_CtlSendData>
 800f2a6:	e009      	b.n	800f2bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f2a8:	6839      	ldr	r1, [r7, #0]
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 f9ce 	bl	800f64c <USBD_CtlError>
 800f2b0:	e004      	b.n	800f2bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 fa95 	bl	800f7e2 <USBD_CtlSendStatus>
 800f2b8:	e000      	b.n	800f2bc <USBD_GetDescriptor+0x2cc>
    return;
 800f2ba:	bf00      	nop
  }
}
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop

0800f2c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	889b      	ldrh	r3, [r3, #4]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d131      	bne.n	800f33a <USBD_SetAddress+0x76>
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	88db      	ldrh	r3, [r3, #6]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d12d      	bne.n	800f33a <USBD_SetAddress+0x76>
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	885b      	ldrh	r3, [r3, #2]
 800f2e2:	2b7f      	cmp	r3, #127	; 0x7f
 800f2e4:	d829      	bhi.n	800f33a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	885b      	ldrh	r3, [r3, #2]
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	2b03      	cmp	r3, #3
 800f2fc:	d104      	bne.n	800f308 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f2fe:	6839      	ldr	r1, [r7, #0]
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f000 f9a3 	bl	800f64c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f306:	e01d      	b.n	800f344 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	7bfa      	ldrb	r2, [r7, #15]
 800f30c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f310:	7bfb      	ldrb	r3, [r7, #15]
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 ffd3 	bl	80102c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fa61 	bl	800f7e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f320:	7bfb      	ldrb	r3, [r7, #15]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d004      	beq.n	800f330 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2202      	movs	r2, #2
 800f32a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f32e:	e009      	b.n	800f344 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2201      	movs	r2, #1
 800f334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f338:	e004      	b.n	800f344 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f33a:	6839      	ldr	r1, [r7, #0]
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 f985 	bl	800f64c <USBD_CtlError>
  }
}
 800f342:	bf00      	nop
 800f344:	bf00      	nop
 800f346:	3710      	adds	r7, #16
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f356:	2300      	movs	r3, #0
 800f358:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	885b      	ldrh	r3, [r3, #2]
 800f35e:	b2da      	uxtb	r2, r3
 800f360:	4b4c      	ldr	r3, [pc, #304]	; (800f494 <USBD_SetConfig+0x148>)
 800f362:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f364:	4b4b      	ldr	r3, [pc, #300]	; (800f494 <USBD_SetConfig+0x148>)
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d905      	bls.n	800f378 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f36c:	6839      	ldr	r1, [r7, #0]
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 f96c 	bl	800f64c <USBD_CtlError>
    return USBD_FAIL;
 800f374:	2303      	movs	r3, #3
 800f376:	e088      	b.n	800f48a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	2b02      	cmp	r3, #2
 800f382:	d002      	beq.n	800f38a <USBD_SetConfig+0x3e>
 800f384:	2b03      	cmp	r3, #3
 800f386:	d025      	beq.n	800f3d4 <USBD_SetConfig+0x88>
 800f388:	e071      	b.n	800f46e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f38a:	4b42      	ldr	r3, [pc, #264]	; (800f494 <USBD_SetConfig+0x148>)
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d01c      	beq.n	800f3cc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f392:	4b40      	ldr	r3, [pc, #256]	; (800f494 <USBD_SetConfig+0x148>)
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	461a      	mov	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f39c:	4b3d      	ldr	r3, [pc, #244]	; (800f494 <USBD_SetConfig+0x148>)
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f7ff f948 	bl	800e638 <USBD_SetClassConfig>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f3ac:	7bfb      	ldrb	r3, [r7, #15]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d004      	beq.n	800f3bc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f3b2:	6839      	ldr	r1, [r7, #0]
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f000 f949 	bl	800f64c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f3ba:	e065      	b.n	800f488 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 fa10 	bl	800f7e2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2203      	movs	r2, #3
 800f3c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f3ca:	e05d      	b.n	800f488 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f000 fa08 	bl	800f7e2 <USBD_CtlSendStatus>
      break;
 800f3d2:	e059      	b.n	800f488 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f3d4:	4b2f      	ldr	r3, [pc, #188]	; (800f494 <USBD_SetConfig+0x148>)
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d112      	bne.n	800f402 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2202      	movs	r2, #2
 800f3e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f3e4:	4b2b      	ldr	r3, [pc, #172]	; (800f494 <USBD_SetConfig+0x148>)
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f3ee:	4b29      	ldr	r3, [pc, #164]	; (800f494 <USBD_SetConfig+0x148>)
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f7ff f93b 	bl	800e670 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 f9f1 	bl	800f7e2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f400:	e042      	b.n	800f488 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f402:	4b24      	ldr	r3, [pc, #144]	; (800f494 <USBD_SetConfig+0x148>)
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	461a      	mov	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d02a      	beq.n	800f466 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	b2db      	uxtb	r3, r3
 800f416:	4619      	mov	r1, r3
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7ff f929 	bl	800e670 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f41e:	4b1d      	ldr	r3, [pc, #116]	; (800f494 <USBD_SetConfig+0x148>)
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	461a      	mov	r2, r3
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f428:	4b1a      	ldr	r3, [pc, #104]	; (800f494 <USBD_SetConfig+0x148>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	4619      	mov	r1, r3
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7ff f902 	bl	800e638 <USBD_SetClassConfig>
 800f434:	4603      	mov	r3, r0
 800f436:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f438:	7bfb      	ldrb	r3, [r7, #15]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00f      	beq.n	800f45e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 f903 	bl	800f64c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	4619      	mov	r1, r3
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f7ff f90e 	bl	800e670 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2202      	movs	r2, #2
 800f458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f45c:	e014      	b.n	800f488 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 f9bf 	bl	800f7e2 <USBD_CtlSendStatus>
      break;
 800f464:	e010      	b.n	800f488 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 f9bb 	bl	800f7e2 <USBD_CtlSendStatus>
      break;
 800f46c:	e00c      	b.n	800f488 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f46e:	6839      	ldr	r1, [r7, #0]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 f8eb 	bl	800f64c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f476:	4b07      	ldr	r3, [pc, #28]	; (800f494 <USBD_SetConfig+0x148>)
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	4619      	mov	r1, r3
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff f8f7 	bl	800e670 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f482:	2303      	movs	r3, #3
 800f484:	73fb      	strb	r3, [r7, #15]
      break;
 800f486:	bf00      	nop
  }

  return ret;
 800f488:	7bfb      	ldrb	r3, [r7, #15]
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3710      	adds	r7, #16
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	20000cc8 	.word	0x20000cc8

0800f498 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	88db      	ldrh	r3, [r3, #6]
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	d004      	beq.n	800f4b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f4aa:	6839      	ldr	r1, [r7, #0]
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 f8cd 	bl	800f64c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f4b2:	e023      	b.n	800f4fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	2b02      	cmp	r3, #2
 800f4be:	dc02      	bgt.n	800f4c6 <USBD_GetConfig+0x2e>
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	dc03      	bgt.n	800f4cc <USBD_GetConfig+0x34>
 800f4c4:	e015      	b.n	800f4f2 <USBD_GetConfig+0x5a>
 800f4c6:	2b03      	cmp	r3, #3
 800f4c8:	d00b      	beq.n	800f4e2 <USBD_GetConfig+0x4a>
 800f4ca:	e012      	b.n	800f4f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	3308      	adds	r3, #8
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	4619      	mov	r1, r3
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 f927 	bl	800f72e <USBD_CtlSendData>
        break;
 800f4e0:	e00c      	b.n	800f4fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	3304      	adds	r3, #4
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 f91f 	bl	800f72e <USBD_CtlSendData>
        break;
 800f4f0:	e004      	b.n	800f4fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f4f2:	6839      	ldr	r1, [r7, #0]
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 f8a9 	bl	800f64c <USBD_CtlError>
        break;
 800f4fa:	bf00      	nop
}
 800f4fc:	bf00      	nop
 800f4fe:	3708      	adds	r7, #8
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f514:	b2db      	uxtb	r3, r3
 800f516:	3b01      	subs	r3, #1
 800f518:	2b02      	cmp	r3, #2
 800f51a:	d81e      	bhi.n	800f55a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	88db      	ldrh	r3, [r3, #6]
 800f520:	2b02      	cmp	r3, #2
 800f522:	d004      	beq.n	800f52e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f524:	6839      	ldr	r1, [r7, #0]
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 f890 	bl	800f64c <USBD_CtlError>
        break;
 800f52c:	e01a      	b.n	800f564 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2201      	movs	r2, #1
 800f532:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d005      	beq.n	800f54a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	f043 0202 	orr.w	r2, r3, #2
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	330c      	adds	r3, #12
 800f54e:	2202      	movs	r2, #2
 800f550:	4619      	mov	r1, r3
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 f8eb 	bl	800f72e <USBD_CtlSendData>
      break;
 800f558:	e004      	b.n	800f564 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f55a:	6839      	ldr	r1, [r7, #0]
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f000 f875 	bl	800f64c <USBD_CtlError>
      break;
 800f562:	bf00      	nop
  }
}
 800f564:	bf00      	nop
 800f566:	3708      	adds	r7, #8
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}

0800f56c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	885b      	ldrh	r3, [r3, #2]
 800f57a:	2b01      	cmp	r3, #1
 800f57c:	d106      	bne.n	800f58c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2201      	movs	r2, #1
 800f582:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 f92b 	bl	800f7e2 <USBD_CtlSendStatus>
  }
}
 800f58c:	bf00      	nop
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	2b02      	cmp	r3, #2
 800f5aa:	d80b      	bhi.n	800f5c4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	885b      	ldrh	r3, [r3, #2]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d10c      	bne.n	800f5ce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 f910 	bl	800f7e2 <USBD_CtlSendStatus>
      }
      break;
 800f5c2:	e004      	b.n	800f5ce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f5c4:	6839      	ldr	r1, [r7, #0]
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 f840 	bl	800f64c <USBD_CtlError>
      break;
 800f5cc:	e000      	b.n	800f5d0 <USBD_ClrFeature+0x3c>
      break;
 800f5ce:	bf00      	nop
  }
}
 800f5d0:	bf00      	nop
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	781a      	ldrb	r2, [r3, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	781a      	ldrb	r2, [r3, #0]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	3301      	adds	r3, #1
 800f600:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f7ff fabb 	bl	800eb7e <SWAPBYTE>
 800f608:	4603      	mov	r3, r0
 800f60a:	461a      	mov	r2, r3
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	3301      	adds	r3, #1
 800f614:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3301      	adds	r3, #1
 800f61a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f7ff faae 	bl	800eb7e <SWAPBYTE>
 800f622:	4603      	mov	r3, r0
 800f624:	461a      	mov	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3301      	adds	r3, #1
 800f62e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	3301      	adds	r3, #1
 800f634:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f7ff faa1 	bl	800eb7e <SWAPBYTE>
 800f63c:	4603      	mov	r3, r0
 800f63e:	461a      	mov	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	80da      	strh	r2, [r3, #6]
}
 800f644:	bf00      	nop
 800f646:	3710      	adds	r7, #16
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f656:	2180      	movs	r1, #128	; 0x80
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f000 fd99 	bl	8010190 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f65e:	2100      	movs	r1, #0
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 fd95 	bl	8010190 <USBD_LL_StallEP>
}
 800f666:	bf00      	nop
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b086      	sub	sp, #24
 800f672:	af00      	add	r7, sp, #0
 800f674:	60f8      	str	r0, [r7, #12]
 800f676:	60b9      	str	r1, [r7, #8]
 800f678:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f67a:	2300      	movs	r3, #0
 800f67c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d036      	beq.n	800f6f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f688:	6938      	ldr	r0, [r7, #16]
 800f68a:	f000 f836 	bl	800f6fa <USBD_GetLen>
 800f68e:	4603      	mov	r3, r0
 800f690:	3301      	adds	r3, #1
 800f692:	b29b      	uxth	r3, r3
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	b29a      	uxth	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f69c:	7dfb      	ldrb	r3, [r7, #23]
 800f69e:	68ba      	ldr	r2, [r7, #8]
 800f6a0:	4413      	add	r3, r2
 800f6a2:	687a      	ldr	r2, [r7, #4]
 800f6a4:	7812      	ldrb	r2, [r2, #0]
 800f6a6:	701a      	strb	r2, [r3, #0]
  idx++;
 800f6a8:	7dfb      	ldrb	r3, [r7, #23]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f6ae:	7dfb      	ldrb	r3, [r7, #23]
 800f6b0:	68ba      	ldr	r2, [r7, #8]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	2203      	movs	r2, #3
 800f6b6:	701a      	strb	r2, [r3, #0]
  idx++;
 800f6b8:	7dfb      	ldrb	r3, [r7, #23]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f6be:	e013      	b.n	800f6e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f6c0:	7dfb      	ldrb	r3, [r7, #23]
 800f6c2:	68ba      	ldr	r2, [r7, #8]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	693a      	ldr	r2, [r7, #16]
 800f6c8:	7812      	ldrb	r2, [r2, #0]
 800f6ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	613b      	str	r3, [r7, #16]
    idx++;
 800f6d2:	7dfb      	ldrb	r3, [r7, #23]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f6d8:	7dfb      	ldrb	r3, [r7, #23]
 800f6da:	68ba      	ldr	r2, [r7, #8]
 800f6dc:	4413      	add	r3, r2
 800f6de:	2200      	movs	r2, #0
 800f6e0:	701a      	strb	r2, [r3, #0]
    idx++;
 800f6e2:	7dfb      	ldrb	r3, [r7, #23]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d1e7      	bne.n	800f6c0 <USBD_GetString+0x52>
 800f6f0:	e000      	b.n	800f6f4 <USBD_GetString+0x86>
    return;
 800f6f2:	bf00      	nop
  }
}
 800f6f4:	3718      	adds	r7, #24
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}

0800f6fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f6fa:	b480      	push	{r7}
 800f6fc:	b085      	sub	sp, #20
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f702:	2300      	movs	r3, #0
 800f704:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f70a:	e005      	b.n	800f718 <USBD_GetLen+0x1e>
  {
    len++;
 800f70c:	7bfb      	ldrb	r3, [r7, #15]
 800f70e:	3301      	adds	r3, #1
 800f710:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	3301      	adds	r3, #1
 800f716:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d1f5      	bne.n	800f70c <USBD_GetLen+0x12>
  }

  return len;
 800f720:	7bfb      	ldrb	r3, [r7, #15]
}
 800f722:	4618      	mov	r0, r3
 800f724:	3714      	adds	r7, #20
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr

0800f72e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f72e:	b580      	push	{r7, lr}
 800f730:	b084      	sub	sp, #16
 800f732:	af00      	add	r7, sp, #0
 800f734:	60f8      	str	r0, [r7, #12]
 800f736:	60b9      	str	r1, [r7, #8]
 800f738:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2202      	movs	r2, #2
 800f73e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	68ba      	ldr	r2, [r7, #8]
 800f752:	2100      	movs	r1, #0
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f000 fde9 	bl	801032c <USBD_LL_Transmit>

  return USBD_OK;
 800f75a:	2300      	movs	r3, #0
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3710      	adds	r7, #16
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	68ba      	ldr	r2, [r7, #8]
 800f774:	2100      	movs	r1, #0
 800f776:	68f8      	ldr	r0, [r7, #12]
 800f778:	f000 fdd8 	bl	801032c <USBD_LL_Transmit>

  return USBD_OK;
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3710      	adds	r7, #16
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}

0800f786 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f786:	b580      	push	{r7, lr}
 800f788:	b084      	sub	sp, #16
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	60f8      	str	r0, [r7, #12]
 800f78e:	60b9      	str	r1, [r7, #8]
 800f790:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2203      	movs	r2, #3
 800f796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	68ba      	ldr	r2, [r7, #8]
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	68f8      	ldr	r0, [r7, #12]
 800f7b2:	f000 fdf3 	bl	801039c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7b6:	2300      	movs	r3, #0
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	68ba      	ldr	r2, [r7, #8]
 800f7d0:	2100      	movs	r1, #0
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	f000 fde2 	bl	801039c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7d8:	2300      	movs	r3, #0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3710      	adds	r7, #16
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}

0800f7e2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f7e2:	b580      	push	{r7, lr}
 800f7e4:	b082      	sub	sp, #8
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2204      	movs	r2, #4
 800f7ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	2100      	movs	r1, #0
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 fd97 	bl	801032c <USBD_LL_Transmit>

  return USBD_OK;
 800f7fe:	2300      	movs	r3, #0
}
 800f800:	4618      	mov	r0, r3
 800f802:	3708      	adds	r7, #8
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2205      	movs	r2, #5
 800f814:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f818:	2300      	movs	r3, #0
 800f81a:	2200      	movs	r2, #0
 800f81c:	2100      	movs	r1, #0
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fdbc 	bl	801039c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f824:	2300      	movs	r3, #0
}
 800f826:	4618      	mov	r0, r3
 800f828:	3708      	adds	r7, #8
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
	...

0800f830 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f830:	b480      	push	{r7}
 800f832:	b087      	sub	sp, #28
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	4613      	mov	r3, r2
 800f83c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f83e:	2301      	movs	r3, #1
 800f840:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f842:	2300      	movs	r3, #0
 800f844:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f846:	4b1f      	ldr	r3, [pc, #124]	; (800f8c4 <FATFS_LinkDriverEx+0x94>)
 800f848:	7a5b      	ldrb	r3, [r3, #9]
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d131      	bne.n	800f8b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f850:	4b1c      	ldr	r3, [pc, #112]	; (800f8c4 <FATFS_LinkDriverEx+0x94>)
 800f852:	7a5b      	ldrb	r3, [r3, #9]
 800f854:	b2db      	uxtb	r3, r3
 800f856:	461a      	mov	r2, r3
 800f858:	4b1a      	ldr	r3, [pc, #104]	; (800f8c4 <FATFS_LinkDriverEx+0x94>)
 800f85a:	2100      	movs	r1, #0
 800f85c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f85e:	4b19      	ldr	r3, [pc, #100]	; (800f8c4 <FATFS_LinkDriverEx+0x94>)
 800f860:	7a5b      	ldrb	r3, [r3, #9]
 800f862:	b2db      	uxtb	r3, r3
 800f864:	4a17      	ldr	r2, [pc, #92]	; (800f8c4 <FATFS_LinkDriverEx+0x94>)
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	4413      	add	r3, r2
 800f86a:	68fa      	ldr	r2, [r7, #12]
 800f86c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f86e:	4b15      	ldr	r3, [pc, #84]	; (800f8c4 <FATFS_LinkDriverEx+0x94>)
 800f870:	7a5b      	ldrb	r3, [r3, #9]
 800f872:	b2db      	uxtb	r3, r3
 800f874:	461a      	mov	r2, r3
 800f876:	4b13      	ldr	r3, [pc, #76]	; (800f8c4 <FATFS_LinkDriverEx+0x94>)
 800f878:	4413      	add	r3, r2
 800f87a:	79fa      	ldrb	r2, [r7, #7]
 800f87c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f87e:	4b11      	ldr	r3, [pc, #68]	; (800f8c4 <FATFS_LinkDriverEx+0x94>)
 800f880:	7a5b      	ldrb	r3, [r3, #9]
 800f882:	b2db      	uxtb	r3, r3
 800f884:	1c5a      	adds	r2, r3, #1
 800f886:	b2d1      	uxtb	r1, r2
 800f888:	4a0e      	ldr	r2, [pc, #56]	; (800f8c4 <FATFS_LinkDriverEx+0x94>)
 800f88a:	7251      	strb	r1, [r2, #9]
 800f88c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f88e:	7dbb      	ldrb	r3, [r7, #22]
 800f890:	3330      	adds	r3, #48	; 0x30
 800f892:	b2da      	uxtb	r2, r3
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	3301      	adds	r3, #1
 800f89c:	223a      	movs	r2, #58	; 0x3a
 800f89e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	3302      	adds	r3, #2
 800f8a4:	222f      	movs	r2, #47	; 0x2f
 800f8a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	3303      	adds	r3, #3
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f8b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	371c      	adds	r7, #28
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr
 800f8c2:	bf00      	nop
 800f8c4:	20000ccc 	.word	0x20000ccc

0800f8c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	6839      	ldr	r1, [r7, #0]
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f7ff ffaa 	bl	800f830 <FATFS_LinkDriverEx>
 800f8dc:	4603      	mov	r3, r0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3708      	adds	r7, #8
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
	...

0800f8e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	4912      	ldr	r1, [pc, #72]	; (800f938 <MX_USB_DEVICE_Init+0x50>)
 800f8f0:	4812      	ldr	r0, [pc, #72]	; (800f93c <MX_USB_DEVICE_Init+0x54>)
 800f8f2:	f7fe fe33 	bl	800e55c <USBD_Init>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d001      	beq.n	800f900 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f8fc:	f7f2 fae2 	bl	8001ec4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f900:	490f      	ldr	r1, [pc, #60]	; (800f940 <MX_USB_DEVICE_Init+0x58>)
 800f902:	480e      	ldr	r0, [pc, #56]	; (800f93c <MX_USB_DEVICE_Init+0x54>)
 800f904:	f7fe fe5a 	bl	800e5bc <USBD_RegisterClass>
 800f908:	4603      	mov	r3, r0
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d001      	beq.n	800f912 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f90e:	f7f2 fad9 	bl	8001ec4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f912:	490c      	ldr	r1, [pc, #48]	; (800f944 <MX_USB_DEVICE_Init+0x5c>)
 800f914:	4809      	ldr	r0, [pc, #36]	; (800f93c <MX_USB_DEVICE_Init+0x54>)
 800f916:	f7fe fdab 	bl	800e470 <USBD_CDC_RegisterInterface>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d001      	beq.n	800f924 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f920:	f7f2 fad0 	bl	8001ec4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f924:	4805      	ldr	r0, [pc, #20]	; (800f93c <MX_USB_DEVICE_Init+0x54>)
 800f926:	f7fe fe70 	bl	800e60a <USBD_Start>
 800f92a:	4603      	mov	r3, r0
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d001      	beq.n	800f934 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f930:	f7f2 fac8 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f934:	bf00      	nop
 800f936:	bd80      	pop	{r7, pc}
 800f938:	20000134 	.word	0x20000134
 800f93c:	20000cd8 	.word	0x20000cd8
 800f940:	2000001c 	.word	0x2000001c
 800f944:	20000120 	.word	0x20000120

0800f948 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f94c:	2200      	movs	r2, #0
 800f94e:	4905      	ldr	r1, [pc, #20]	; (800f964 <CDC_Init_FS+0x1c>)
 800f950:	4805      	ldr	r0, [pc, #20]	; (800f968 <CDC_Init_FS+0x20>)
 800f952:	f7fe fda2 	bl	800e49a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f956:	4905      	ldr	r1, [pc, #20]	; (800f96c <CDC_Init_FS+0x24>)
 800f958:	4803      	ldr	r0, [pc, #12]	; (800f968 <CDC_Init_FS+0x20>)
 800f95a:	f7fe fdbc 	bl	800e4d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f95e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f960:	4618      	mov	r0, r3
 800f962:	bd80      	pop	{r7, pc}
 800f964:	200017a8 	.word	0x200017a8
 800f968:	20000cd8 	.word	0x20000cd8
 800f96c:	20000fa8 	.word	0x20000fa8

0800f970 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f970:	b480      	push	{r7}
 800f972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f974:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f976:	4618      	mov	r0, r3
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f980:	b480      	push	{r7}
 800f982:	b083      	sub	sp, #12
 800f984:	af00      	add	r7, sp, #0
 800f986:	4603      	mov	r3, r0
 800f988:	6039      	str	r1, [r7, #0]
 800f98a:	71fb      	strb	r3, [r7, #7]
 800f98c:	4613      	mov	r3, r2
 800f98e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f990:	79fb      	ldrb	r3, [r7, #7]
 800f992:	2b23      	cmp	r3, #35	; 0x23
 800f994:	d84a      	bhi.n	800fa2c <CDC_Control_FS+0xac>
 800f996:	a201      	add	r2, pc, #4	; (adr r2, 800f99c <CDC_Control_FS+0x1c>)
 800f998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f99c:	0800fa2d 	.word	0x0800fa2d
 800f9a0:	0800fa2d 	.word	0x0800fa2d
 800f9a4:	0800fa2d 	.word	0x0800fa2d
 800f9a8:	0800fa2d 	.word	0x0800fa2d
 800f9ac:	0800fa2d 	.word	0x0800fa2d
 800f9b0:	0800fa2d 	.word	0x0800fa2d
 800f9b4:	0800fa2d 	.word	0x0800fa2d
 800f9b8:	0800fa2d 	.word	0x0800fa2d
 800f9bc:	0800fa2d 	.word	0x0800fa2d
 800f9c0:	0800fa2d 	.word	0x0800fa2d
 800f9c4:	0800fa2d 	.word	0x0800fa2d
 800f9c8:	0800fa2d 	.word	0x0800fa2d
 800f9cc:	0800fa2d 	.word	0x0800fa2d
 800f9d0:	0800fa2d 	.word	0x0800fa2d
 800f9d4:	0800fa2d 	.word	0x0800fa2d
 800f9d8:	0800fa2d 	.word	0x0800fa2d
 800f9dc:	0800fa2d 	.word	0x0800fa2d
 800f9e0:	0800fa2d 	.word	0x0800fa2d
 800f9e4:	0800fa2d 	.word	0x0800fa2d
 800f9e8:	0800fa2d 	.word	0x0800fa2d
 800f9ec:	0800fa2d 	.word	0x0800fa2d
 800f9f0:	0800fa2d 	.word	0x0800fa2d
 800f9f4:	0800fa2d 	.word	0x0800fa2d
 800f9f8:	0800fa2d 	.word	0x0800fa2d
 800f9fc:	0800fa2d 	.word	0x0800fa2d
 800fa00:	0800fa2d 	.word	0x0800fa2d
 800fa04:	0800fa2d 	.word	0x0800fa2d
 800fa08:	0800fa2d 	.word	0x0800fa2d
 800fa0c:	0800fa2d 	.word	0x0800fa2d
 800fa10:	0800fa2d 	.word	0x0800fa2d
 800fa14:	0800fa2d 	.word	0x0800fa2d
 800fa18:	0800fa2d 	.word	0x0800fa2d
 800fa1c:	0800fa2d 	.word	0x0800fa2d
 800fa20:	0800fa2d 	.word	0x0800fa2d
 800fa24:	0800fa2d 	.word	0x0800fa2d
 800fa28:	0800fa2d 	.word	0x0800fa2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fa2c:	bf00      	nop
  }

  return (USBD_OK);
 800fa2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr

0800fa3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fa46:	6879      	ldr	r1, [r7, #4]
 800fa48:	4805      	ldr	r0, [pc, #20]	; (800fa60 <CDC_Receive_FS+0x24>)
 800fa4a:	f7fe fd44 	bl	800e4d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fa4e:	4804      	ldr	r0, [pc, #16]	; (800fa60 <CDC_Receive_FS+0x24>)
 800fa50:	f7fe fd5a 	bl	800e508 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fa54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3708      	adds	r7, #8
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
 800fa5e:	bf00      	nop
 800fa60:	20000cd8 	.word	0x20000cd8

0800fa64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b087      	sub	sp, #28
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fa72:	2300      	movs	r3, #0
 800fa74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fa76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	371c      	adds	r7, #28
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr
	...

0800fa88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	4603      	mov	r3, r0
 800fa90:	6039      	str	r1, [r7, #0]
 800fa92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	2212      	movs	r2, #18
 800fa98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fa9a:	4b03      	ldr	r3, [pc, #12]	; (800faa8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	370c      	adds	r7, #12
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr
 800faa8:	20000150 	.word	0x20000150

0800faac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	4603      	mov	r3, r0
 800fab4:	6039      	str	r1, [r7, #0]
 800fab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	2204      	movs	r2, #4
 800fabc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fabe:	4b03      	ldr	r3, [pc, #12]	; (800facc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr
 800facc:	20000164 	.word	0x20000164

0800fad0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	4603      	mov	r3, r0
 800fad8:	6039      	str	r1, [r7, #0]
 800fada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fadc:	79fb      	ldrb	r3, [r7, #7]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d105      	bne.n	800faee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fae2:	683a      	ldr	r2, [r7, #0]
 800fae4:	4907      	ldr	r1, [pc, #28]	; (800fb04 <USBD_FS_ProductStrDescriptor+0x34>)
 800fae6:	4808      	ldr	r0, [pc, #32]	; (800fb08 <USBD_FS_ProductStrDescriptor+0x38>)
 800fae8:	f7ff fdc1 	bl	800f66e <USBD_GetString>
 800faec:	e004      	b.n	800faf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800faee:	683a      	ldr	r2, [r7, #0]
 800faf0:	4904      	ldr	r1, [pc, #16]	; (800fb04 <USBD_FS_ProductStrDescriptor+0x34>)
 800faf2:	4805      	ldr	r0, [pc, #20]	; (800fb08 <USBD_FS_ProductStrDescriptor+0x38>)
 800faf4:	f7ff fdbb 	bl	800f66e <USBD_GetString>
  }
  return USBD_StrDesc;
 800faf8:	4b02      	ldr	r3, [pc, #8]	; (800fb04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3708      	adds	r7, #8
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	20001fa8 	.word	0x20001fa8
 800fb08:	0801303c 	.word	0x0801303c

0800fb0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	4603      	mov	r3, r0
 800fb14:	6039      	str	r1, [r7, #0]
 800fb16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fb18:	683a      	ldr	r2, [r7, #0]
 800fb1a:	4904      	ldr	r1, [pc, #16]	; (800fb2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fb1c:	4804      	ldr	r0, [pc, #16]	; (800fb30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fb1e:	f7ff fda6 	bl	800f66e <USBD_GetString>
  return USBD_StrDesc;
 800fb22:	4b02      	ldr	r3, [pc, #8]	; (800fb2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	20001fa8 	.word	0x20001fa8
 800fb30:	08013054 	.word	0x08013054

0800fb34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	6039      	str	r1, [r7, #0]
 800fb3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	221a      	movs	r2, #26
 800fb44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fb46:	f000 f843 	bl	800fbd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fb4a:	4b02      	ldr	r3, [pc, #8]	; (800fb54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	20000168 	.word	0x20000168

0800fb58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	4603      	mov	r3, r0
 800fb60:	6039      	str	r1, [r7, #0]
 800fb62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fb64:	79fb      	ldrb	r3, [r7, #7]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d105      	bne.n	800fb76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb6a:	683a      	ldr	r2, [r7, #0]
 800fb6c:	4907      	ldr	r1, [pc, #28]	; (800fb8c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb6e:	4808      	ldr	r0, [pc, #32]	; (800fb90 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb70:	f7ff fd7d 	bl	800f66e <USBD_GetString>
 800fb74:	e004      	b.n	800fb80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb76:	683a      	ldr	r2, [r7, #0]
 800fb78:	4904      	ldr	r1, [pc, #16]	; (800fb8c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb7a:	4805      	ldr	r0, [pc, #20]	; (800fb90 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb7c:	f7ff fd77 	bl	800f66e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb80:	4b02      	ldr	r3, [pc, #8]	; (800fb8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	20001fa8 	.word	0x20001fa8
 800fb90:	08013068 	.word	0x08013068

0800fb94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	6039      	str	r1, [r7, #0]
 800fb9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fba0:	79fb      	ldrb	r3, [r7, #7]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d105      	bne.n	800fbb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fba6:	683a      	ldr	r2, [r7, #0]
 800fba8:	4907      	ldr	r1, [pc, #28]	; (800fbc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fbaa:	4808      	ldr	r0, [pc, #32]	; (800fbcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fbac:	f7ff fd5f 	bl	800f66e <USBD_GetString>
 800fbb0:	e004      	b.n	800fbbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fbb2:	683a      	ldr	r2, [r7, #0]
 800fbb4:	4904      	ldr	r1, [pc, #16]	; (800fbc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fbb6:	4805      	ldr	r0, [pc, #20]	; (800fbcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fbb8:	f7ff fd59 	bl	800f66e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fbbc:	4b02      	ldr	r3, [pc, #8]	; (800fbc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3708      	adds	r7, #8
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	20001fa8 	.word	0x20001fa8
 800fbcc:	08013074 	.word	0x08013074

0800fbd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fbd6:	4b0f      	ldr	r3, [pc, #60]	; (800fc14 <Get_SerialNum+0x44>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fbdc:	4b0e      	ldr	r3, [pc, #56]	; (800fc18 <Get_SerialNum+0x48>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fbe2:	4b0e      	ldr	r3, [pc, #56]	; (800fc1c <Get_SerialNum+0x4c>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4413      	add	r3, r2
 800fbee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d009      	beq.n	800fc0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fbf6:	2208      	movs	r2, #8
 800fbf8:	4909      	ldr	r1, [pc, #36]	; (800fc20 <Get_SerialNum+0x50>)
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f000 f814 	bl	800fc28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fc00:	2204      	movs	r2, #4
 800fc02:	4908      	ldr	r1, [pc, #32]	; (800fc24 <Get_SerialNum+0x54>)
 800fc04:	68b8      	ldr	r0, [r7, #8]
 800fc06:	f000 f80f 	bl	800fc28 <IntToUnicode>
  }
}
 800fc0a:	bf00      	nop
 800fc0c:	3710      	adds	r7, #16
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
 800fc12:	bf00      	nop
 800fc14:	1fff7590 	.word	0x1fff7590
 800fc18:	1fff7594 	.word	0x1fff7594
 800fc1c:	1fff7598 	.word	0x1fff7598
 800fc20:	2000016a 	.word	0x2000016a
 800fc24:	2000017a 	.word	0x2000017a

0800fc28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b087      	sub	sp, #28
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	4613      	mov	r3, r2
 800fc34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fc36:	2300      	movs	r3, #0
 800fc38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	75fb      	strb	r3, [r7, #23]
 800fc3e:	e027      	b.n	800fc90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	0f1b      	lsrs	r3, r3, #28
 800fc44:	2b09      	cmp	r3, #9
 800fc46:	d80b      	bhi.n	800fc60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	0f1b      	lsrs	r3, r3, #28
 800fc4c:	b2da      	uxtb	r2, r3
 800fc4e:	7dfb      	ldrb	r3, [r7, #23]
 800fc50:	005b      	lsls	r3, r3, #1
 800fc52:	4619      	mov	r1, r3
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	440b      	add	r3, r1
 800fc58:	3230      	adds	r2, #48	; 0x30
 800fc5a:	b2d2      	uxtb	r2, r2
 800fc5c:	701a      	strb	r2, [r3, #0]
 800fc5e:	e00a      	b.n	800fc76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	0f1b      	lsrs	r3, r3, #28
 800fc64:	b2da      	uxtb	r2, r3
 800fc66:	7dfb      	ldrb	r3, [r7, #23]
 800fc68:	005b      	lsls	r3, r3, #1
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	440b      	add	r3, r1
 800fc70:	3237      	adds	r2, #55	; 0x37
 800fc72:	b2d2      	uxtb	r2, r2
 800fc74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	011b      	lsls	r3, r3, #4
 800fc7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc7c:	7dfb      	ldrb	r3, [r7, #23]
 800fc7e:	005b      	lsls	r3, r3, #1
 800fc80:	3301      	adds	r3, #1
 800fc82:	68ba      	ldr	r2, [r7, #8]
 800fc84:	4413      	add	r3, r2
 800fc86:	2200      	movs	r2, #0
 800fc88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc8a:	7dfb      	ldrb	r3, [r7, #23]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	75fb      	strb	r3, [r7, #23]
 800fc90:	7dfa      	ldrb	r2, [r7, #23]
 800fc92:	79fb      	ldrb	r3, [r7, #7]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d3d3      	bcc.n	800fc40 <IntToUnicode+0x18>
  }
}
 800fc98:	bf00      	nop
 800fc9a:	bf00      	nop
 800fc9c:	371c      	adds	r7, #28
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca4:	4770      	bx	lr
	...

0800fca8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b0b0      	sub	sp, #192	; 0xc0
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fcb0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	601a      	str	r2, [r3, #0]
 800fcb8:	605a      	str	r2, [r3, #4]
 800fcba:	609a      	str	r2, [r3, #8]
 800fcbc:	60da      	str	r2, [r3, #12]
 800fcbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800fcc0:	f107 0318 	add.w	r3, r7, #24
 800fcc4:	2294      	movs	r2, #148	; 0x94
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f000 fc0b 	bl	80104e4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fcd6:	d163      	bne.n	800fda0 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fcd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fcdc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800fcde:	2300      	movs	r3, #0
 800fce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fce4:	f107 0318 	add.w	r3, r7, #24
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7f5 fbbf 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800fcf4:	f7f2 f8e6 	bl	8001ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fcf8:	4b2b      	ldr	r3, [pc, #172]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fcfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcfc:	4a2a      	ldr	r2, [pc, #168]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fcfe:	f043 0301 	orr.w	r3, r3, #1
 800fd02:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fd04:	4b28      	ldr	r3, [pc, #160]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fd06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd08:	f003 0301 	and.w	r3, r3, #1
 800fd0c:	617b      	str	r3, [r7, #20]
 800fd0e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fd10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fd14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd18:	2302      	movs	r3, #2
 800fd1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd24:	2303      	movs	r3, #3
 800fd26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fd2a:	230a      	movs	r3, #10
 800fd2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800fd34:	4619      	mov	r1, r3
 800fd36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fd3a:	f7f2 fee3 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fd3e:	4b1a      	ldr	r3, [pc, #104]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fd40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd42:	4a19      	ldr	r2, [pc, #100]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fd44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fd48:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fd4a:	4b17      	ldr	r3, [pc, #92]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fd4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fd52:	613b      	str	r3, [r7, #16]
 800fd54:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fd56:	4b14      	ldr	r3, [pc, #80]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fd58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d114      	bne.n	800fd8c <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fd62:	4b11      	ldr	r3, [pc, #68]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fd64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd66:	4a10      	ldr	r2, [pc, #64]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fd68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd6c:	6593      	str	r3, [r2, #88]	; 0x58
 800fd6e:	4b0e      	ldr	r3, [pc, #56]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd76:	60fb      	str	r3, [r7, #12]
 800fd78:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800fd7a:	f7f4 fc63 	bl	8004644 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800fd7e:	4b0a      	ldr	r3, [pc, #40]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fd80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd82:	4a09      	ldr	r2, [pc, #36]	; (800fda8 <HAL_PCD_MspInit+0x100>)
 800fd84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd88:	6593      	str	r3, [r2, #88]	; 0x58
 800fd8a:	e001      	b.n	800fd90 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800fd8c:	f7f4 fc5a 	bl	8004644 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fd90:	2200      	movs	r2, #0
 800fd92:	2100      	movs	r1, #0
 800fd94:	2043      	movs	r0, #67	; 0x43
 800fd96:	f7f2 fd0a 	bl	80027ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fd9a:	2043      	movs	r0, #67	; 0x43
 800fd9c:	f7f2 fd23 	bl	80027e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fda0:	bf00      	nop
 800fda2:	37c0      	adds	r7, #192	; 0xc0
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	40021000 	.word	0x40021000

0800fdac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	4610      	mov	r0, r2
 800fdc4:	f7fe fc6c 	bl	800e6a0 <USBD_LL_SetupStage>
}
 800fdc8:	bf00      	nop
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	460b      	mov	r3, r1
 800fdda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fde2:	78fa      	ldrb	r2, [r7, #3]
 800fde4:	6879      	ldr	r1, [r7, #4]
 800fde6:	4613      	mov	r3, r2
 800fde8:	00db      	lsls	r3, r3, #3
 800fdea:	4413      	add	r3, r2
 800fdec:	009b      	lsls	r3, r3, #2
 800fdee:	440b      	add	r3, r1
 800fdf0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	78fb      	ldrb	r3, [r7, #3]
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	f7fe fca6 	bl	800e74a <USBD_LL_DataOutStage>
}
 800fdfe:	bf00      	nop
 800fe00:	3708      	adds	r7, #8
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b082      	sub	sp, #8
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
 800fe0e:	460b      	mov	r3, r1
 800fe10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800fe18:	78fa      	ldrb	r2, [r7, #3]
 800fe1a:	6879      	ldr	r1, [r7, #4]
 800fe1c:	4613      	mov	r3, r2
 800fe1e:	00db      	lsls	r3, r3, #3
 800fe20:	4413      	add	r3, r2
 800fe22:	009b      	lsls	r3, r3, #2
 800fe24:	440b      	add	r3, r1
 800fe26:	334c      	adds	r3, #76	; 0x4c
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	78fb      	ldrb	r3, [r7, #3]
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	f7fe fcef 	bl	800e810 <USBD_LL_DataInStage>
}
 800fe32:	bf00      	nop
 800fe34:	3708      	adds	r7, #8
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b082      	sub	sp, #8
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fe fe03 	bl	800ea54 <USBD_LL_SOF>
}
 800fe4e:	bf00      	nop
 800fe50:	3708      	adds	r7, #8
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}

0800fe56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe56:	b580      	push	{r7, lr}
 800fe58:	b084      	sub	sp, #16
 800fe5a:	af00      	add	r7, sp, #0
 800fe5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fe5e:	2301      	movs	r3, #1
 800fe60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	68db      	ldr	r3, [r3, #12]
 800fe66:	2b02      	cmp	r3, #2
 800fe68:	d001      	beq.n	800fe6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fe6a:	f7f2 f82b 	bl	8001ec4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fe74:	7bfa      	ldrb	r2, [r7, #15]
 800fe76:	4611      	mov	r1, r2
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7fe fdad 	bl	800e9d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fe fd59 	bl	800e93c <USBD_LL_Reset>
}
 800fe8a:	bf00      	nop
 800fe8c:	3710      	adds	r7, #16
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
	...

0800fe94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	6812      	ldr	r2, [r2, #0]
 800feaa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800feae:	f043 0301 	orr.w	r3, r3, #1
 800feb2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800feba:	4618      	mov	r0, r3
 800febc:	f7fe fd9c 	bl	800e9f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6a1b      	ldr	r3, [r3, #32]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d005      	beq.n	800fed4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fec8:	4b04      	ldr	r3, [pc, #16]	; (800fedc <HAL_PCD_SuspendCallback+0x48>)
 800feca:	691b      	ldr	r3, [r3, #16]
 800fecc:	4a03      	ldr	r2, [pc, #12]	; (800fedc <HAL_PCD_SuspendCallback+0x48>)
 800fece:	f043 0306 	orr.w	r3, r3, #6
 800fed2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fed4:	bf00      	nop
 800fed6:	3708      	adds	r7, #8
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	e000ed00 	.word	0xe000ed00

0800fee0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	6812      	ldr	r2, [r2, #0]
 800fef6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fefa:	f023 0301 	bic.w	r3, r3, #1
 800fefe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6a1b      	ldr	r3, [r3, #32]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d007      	beq.n	800ff18 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ff08:	4b08      	ldr	r3, [pc, #32]	; (800ff2c <HAL_PCD_ResumeCallback+0x4c>)
 800ff0a:	691b      	ldr	r3, [r3, #16]
 800ff0c:	4a07      	ldr	r2, [pc, #28]	; (800ff2c <HAL_PCD_ResumeCallback+0x4c>)
 800ff0e:	f023 0306 	bic.w	r3, r3, #6
 800ff12:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ff14:	f000 faa6 	bl	8010464 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7fe fd80 	bl	800ea24 <USBD_LL_Resume>
}
 800ff24:	bf00      	nop
 800ff26:	3708      	adds	r7, #8
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	e000ed00 	.word	0xe000ed00

0800ff30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	460b      	mov	r3, r1
 800ff3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ff42:	78fa      	ldrb	r2, [r7, #3]
 800ff44:	4611      	mov	r1, r2
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fe fdcc 	bl	800eae4 <USBD_LL_IsoOUTIncomplete>
}
 800ff4c:	bf00      	nop
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ff66:	78fa      	ldrb	r2, [r7, #3]
 800ff68:	4611      	mov	r1, r2
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7fe fd94 	bl	800ea98 <USBD_LL_IsoINIncomplete>
}
 800ff70:	bf00      	nop
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fe fdd2 	bl	800eb30 <USBD_LL_DevConnected>
}
 800ff8c:	bf00      	nop
 800ff8e:	3708      	adds	r7, #8
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe fdcf 	bl	800eb46 <USBD_LL_DevDisconnected>
}
 800ffa8:	bf00      	nop
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d139      	bne.n	8010034 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ffc0:	4a1f      	ldr	r2, [pc, #124]	; (8010040 <USBD_LL_Init+0x90>)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	4a1d      	ldr	r2, [pc, #116]	; (8010040 <USBD_LL_Init+0x90>)
 800ffcc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ffd0:	4b1b      	ldr	r3, [pc, #108]	; (8010040 <USBD_LL_Init+0x90>)
 800ffd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ffd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ffd8:	4b19      	ldr	r3, [pc, #100]	; (8010040 <USBD_LL_Init+0x90>)
 800ffda:	2206      	movs	r2, #6
 800ffdc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ffde:	4b18      	ldr	r3, [pc, #96]	; (8010040 <USBD_LL_Init+0x90>)
 800ffe0:	2202      	movs	r2, #2
 800ffe2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ffe4:	4b16      	ldr	r3, [pc, #88]	; (8010040 <USBD_LL_Init+0x90>)
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ffea:	4b15      	ldr	r3, [pc, #84]	; (8010040 <USBD_LL_Init+0x90>)
 800ffec:	2200      	movs	r2, #0
 800ffee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fff0:	4b13      	ldr	r3, [pc, #76]	; (8010040 <USBD_LL_Init+0x90>)
 800fff2:	2200      	movs	r2, #0
 800fff4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fff6:	4b12      	ldr	r3, [pc, #72]	; (8010040 <USBD_LL_Init+0x90>)
 800fff8:	2200      	movs	r2, #0
 800fffa:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fffc:	4b10      	ldr	r3, [pc, #64]	; (8010040 <USBD_LL_Init+0x90>)
 800fffe:	2200      	movs	r2, #0
 8010000:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010002:	4b0f      	ldr	r3, [pc, #60]	; (8010040 <USBD_LL_Init+0x90>)
 8010004:	2200      	movs	r2, #0
 8010006:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010008:	480d      	ldr	r0, [pc, #52]	; (8010040 <USBD_LL_Init+0x90>)
 801000a:	f7f3 f88b 	bl	8003124 <HAL_PCD_Init>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d001      	beq.n	8010018 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8010014:	f7f1 ff56 	bl	8001ec4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010018:	2180      	movs	r1, #128	; 0x80
 801001a:	4809      	ldr	r0, [pc, #36]	; (8010040 <USBD_LL_Init+0x90>)
 801001c:	f7f4 fa0d 	bl	800443a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010020:	2240      	movs	r2, #64	; 0x40
 8010022:	2100      	movs	r1, #0
 8010024:	4806      	ldr	r0, [pc, #24]	; (8010040 <USBD_LL_Init+0x90>)
 8010026:	f7f4 f9c1 	bl	80043ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801002a:	2280      	movs	r2, #128	; 0x80
 801002c:	2101      	movs	r1, #1
 801002e:	4804      	ldr	r0, [pc, #16]	; (8010040 <USBD_LL_Init+0x90>)
 8010030:	f7f4 f9bc 	bl	80043ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3708      	adds	r7, #8
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	200021a8 	.word	0x200021a8

08010044 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801004c:	2300      	movs	r3, #0
 801004e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010050:	2300      	movs	r3, #0
 8010052:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801005a:	4618      	mov	r0, r3
 801005c:	f7f3 f986 	bl	800336c <HAL_PCD_Start>
 8010060:	4603      	mov	r3, r0
 8010062:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010064:	7bbb      	ldrb	r3, [r7, #14]
 8010066:	2b03      	cmp	r3, #3
 8010068:	d816      	bhi.n	8010098 <USBD_LL_Start+0x54>
 801006a:	a201      	add	r2, pc, #4	; (adr r2, 8010070 <USBD_LL_Start+0x2c>)
 801006c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010070:	08010081 	.word	0x08010081
 8010074:	08010087 	.word	0x08010087
 8010078:	0801008d 	.word	0x0801008d
 801007c:	08010093 	.word	0x08010093
    case HAL_OK :
      usb_status = USBD_OK;
 8010080:	2300      	movs	r3, #0
 8010082:	73fb      	strb	r3, [r7, #15]
    break;
 8010084:	e00b      	b.n	801009e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010086:	2303      	movs	r3, #3
 8010088:	73fb      	strb	r3, [r7, #15]
    break;
 801008a:	e008      	b.n	801009e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801008c:	2301      	movs	r3, #1
 801008e:	73fb      	strb	r3, [r7, #15]
    break;
 8010090:	e005      	b.n	801009e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010092:	2303      	movs	r3, #3
 8010094:	73fb      	strb	r3, [r7, #15]
    break;
 8010096:	e002      	b.n	801009e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8010098:	2303      	movs	r3, #3
 801009a:	73fb      	strb	r3, [r7, #15]
    break;
 801009c:	bf00      	nop
  }
  return usb_status;
 801009e:	7bfb      	ldrb	r3, [r7, #15]
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	4608      	mov	r0, r1
 80100b2:	4611      	mov	r1, r2
 80100b4:	461a      	mov	r2, r3
 80100b6:	4603      	mov	r3, r0
 80100b8:	70fb      	strb	r3, [r7, #3]
 80100ba:	460b      	mov	r3, r1
 80100bc:	70bb      	strb	r3, [r7, #2]
 80100be:	4613      	mov	r3, r2
 80100c0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100c2:	2300      	movs	r3, #0
 80100c4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100c6:	2300      	movs	r3, #0
 80100c8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80100d0:	78bb      	ldrb	r3, [r7, #2]
 80100d2:	883a      	ldrh	r2, [r7, #0]
 80100d4:	78f9      	ldrb	r1, [r7, #3]
 80100d6:	f7f3 fe30 	bl	8003d3a <HAL_PCD_EP_Open>
 80100da:	4603      	mov	r3, r0
 80100dc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80100de:	7bbb      	ldrb	r3, [r7, #14]
 80100e0:	2b03      	cmp	r3, #3
 80100e2:	d817      	bhi.n	8010114 <USBD_LL_OpenEP+0x6c>
 80100e4:	a201      	add	r2, pc, #4	; (adr r2, 80100ec <USBD_LL_OpenEP+0x44>)
 80100e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ea:	bf00      	nop
 80100ec:	080100fd 	.word	0x080100fd
 80100f0:	08010103 	.word	0x08010103
 80100f4:	08010109 	.word	0x08010109
 80100f8:	0801010f 	.word	0x0801010f
    case HAL_OK :
      usb_status = USBD_OK;
 80100fc:	2300      	movs	r3, #0
 80100fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010100:	e00b      	b.n	801011a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010102:	2303      	movs	r3, #3
 8010104:	73fb      	strb	r3, [r7, #15]
    break;
 8010106:	e008      	b.n	801011a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010108:	2301      	movs	r3, #1
 801010a:	73fb      	strb	r3, [r7, #15]
    break;
 801010c:	e005      	b.n	801011a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801010e:	2303      	movs	r3, #3
 8010110:	73fb      	strb	r3, [r7, #15]
    break;
 8010112:	e002      	b.n	801011a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010114:	2303      	movs	r3, #3
 8010116:	73fb      	strb	r3, [r7, #15]
    break;
 8010118:	bf00      	nop
  }
  return usb_status;
 801011a:	7bfb      	ldrb	r3, [r7, #15]
}
 801011c:	4618      	mov	r0, r3
 801011e:	3710      	adds	r7, #16
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}

08010124 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b084      	sub	sp, #16
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	460b      	mov	r3, r1
 801012e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010130:	2300      	movs	r3, #0
 8010132:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010134:	2300      	movs	r3, #0
 8010136:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801013e:	78fa      	ldrb	r2, [r7, #3]
 8010140:	4611      	mov	r1, r2
 8010142:	4618      	mov	r0, r3
 8010144:	f7f3 fe61 	bl	8003e0a <HAL_PCD_EP_Close>
 8010148:	4603      	mov	r3, r0
 801014a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801014c:	7bbb      	ldrb	r3, [r7, #14]
 801014e:	2b03      	cmp	r3, #3
 8010150:	d816      	bhi.n	8010180 <USBD_LL_CloseEP+0x5c>
 8010152:	a201      	add	r2, pc, #4	; (adr r2, 8010158 <USBD_LL_CloseEP+0x34>)
 8010154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010158:	08010169 	.word	0x08010169
 801015c:	0801016f 	.word	0x0801016f
 8010160:	08010175 	.word	0x08010175
 8010164:	0801017b 	.word	0x0801017b
    case HAL_OK :
      usb_status = USBD_OK;
 8010168:	2300      	movs	r3, #0
 801016a:	73fb      	strb	r3, [r7, #15]
    break;
 801016c:	e00b      	b.n	8010186 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801016e:	2303      	movs	r3, #3
 8010170:	73fb      	strb	r3, [r7, #15]
    break;
 8010172:	e008      	b.n	8010186 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010174:	2301      	movs	r3, #1
 8010176:	73fb      	strb	r3, [r7, #15]
    break;
 8010178:	e005      	b.n	8010186 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801017a:	2303      	movs	r3, #3
 801017c:	73fb      	strb	r3, [r7, #15]
    break;
 801017e:	e002      	b.n	8010186 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010180:	2303      	movs	r3, #3
 8010182:	73fb      	strb	r3, [r7, #15]
    break;
 8010184:	bf00      	nop
  }
  return usb_status;
 8010186:	7bfb      	ldrb	r3, [r7, #15]
}
 8010188:	4618      	mov	r0, r3
 801018a:	3710      	adds	r7, #16
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	460b      	mov	r3, r1
 801019a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801019c:	2300      	movs	r3, #0
 801019e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101a0:	2300      	movs	r3, #0
 80101a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80101aa:	78fa      	ldrb	r2, [r7, #3]
 80101ac:	4611      	mov	r1, r2
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7f3 ff08 	bl	8003fc4 <HAL_PCD_EP_SetStall>
 80101b4:	4603      	mov	r3, r0
 80101b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80101b8:	7bbb      	ldrb	r3, [r7, #14]
 80101ba:	2b03      	cmp	r3, #3
 80101bc:	d816      	bhi.n	80101ec <USBD_LL_StallEP+0x5c>
 80101be:	a201      	add	r2, pc, #4	; (adr r2, 80101c4 <USBD_LL_StallEP+0x34>)
 80101c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101c4:	080101d5 	.word	0x080101d5
 80101c8:	080101db 	.word	0x080101db
 80101cc:	080101e1 	.word	0x080101e1
 80101d0:	080101e7 	.word	0x080101e7
    case HAL_OK :
      usb_status = USBD_OK;
 80101d4:	2300      	movs	r3, #0
 80101d6:	73fb      	strb	r3, [r7, #15]
    break;
 80101d8:	e00b      	b.n	80101f2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80101da:	2303      	movs	r3, #3
 80101dc:	73fb      	strb	r3, [r7, #15]
    break;
 80101de:	e008      	b.n	80101f2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80101e0:	2301      	movs	r3, #1
 80101e2:	73fb      	strb	r3, [r7, #15]
    break;
 80101e4:	e005      	b.n	80101f2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80101e6:	2303      	movs	r3, #3
 80101e8:	73fb      	strb	r3, [r7, #15]
    break;
 80101ea:	e002      	b.n	80101f2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80101ec:	2303      	movs	r3, #3
 80101ee:	73fb      	strb	r3, [r7, #15]
    break;
 80101f0:	bf00      	nop
  }
  return usb_status;
 80101f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3710      	adds	r7, #16
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}

080101fc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	460b      	mov	r3, r1
 8010206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010208:	2300      	movs	r3, #0
 801020a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801020c:	2300      	movs	r3, #0
 801020e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010216:	78fa      	ldrb	r2, [r7, #3]
 8010218:	4611      	mov	r1, r2
 801021a:	4618      	mov	r0, r3
 801021c:	f7f3 ff34 	bl	8004088 <HAL_PCD_EP_ClrStall>
 8010220:	4603      	mov	r3, r0
 8010222:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010224:	7bbb      	ldrb	r3, [r7, #14]
 8010226:	2b03      	cmp	r3, #3
 8010228:	d816      	bhi.n	8010258 <USBD_LL_ClearStallEP+0x5c>
 801022a:	a201      	add	r2, pc, #4	; (adr r2, 8010230 <USBD_LL_ClearStallEP+0x34>)
 801022c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010230:	08010241 	.word	0x08010241
 8010234:	08010247 	.word	0x08010247
 8010238:	0801024d 	.word	0x0801024d
 801023c:	08010253 	.word	0x08010253
    case HAL_OK :
      usb_status = USBD_OK;
 8010240:	2300      	movs	r3, #0
 8010242:	73fb      	strb	r3, [r7, #15]
    break;
 8010244:	e00b      	b.n	801025e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010246:	2303      	movs	r3, #3
 8010248:	73fb      	strb	r3, [r7, #15]
    break;
 801024a:	e008      	b.n	801025e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801024c:	2301      	movs	r3, #1
 801024e:	73fb      	strb	r3, [r7, #15]
    break;
 8010250:	e005      	b.n	801025e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010252:	2303      	movs	r3, #3
 8010254:	73fb      	strb	r3, [r7, #15]
    break;
 8010256:	e002      	b.n	801025e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010258:	2303      	movs	r3, #3
 801025a:	73fb      	strb	r3, [r7, #15]
    break;
 801025c:	bf00      	nop
  }
  return usb_status;
 801025e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3710      	adds	r7, #16
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	460b      	mov	r3, r1
 8010272:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801027a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801027c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010280:	2b00      	cmp	r3, #0
 8010282:	da0b      	bge.n	801029c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010284:	78fb      	ldrb	r3, [r7, #3]
 8010286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801028a:	68f9      	ldr	r1, [r7, #12]
 801028c:	4613      	mov	r3, r2
 801028e:	00db      	lsls	r3, r3, #3
 8010290:	4413      	add	r3, r2
 8010292:	009b      	lsls	r3, r3, #2
 8010294:	440b      	add	r3, r1
 8010296:	333e      	adds	r3, #62	; 0x3e
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	e00b      	b.n	80102b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801029c:	78fb      	ldrb	r3, [r7, #3]
 801029e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80102a2:	68f9      	ldr	r1, [r7, #12]
 80102a4:	4613      	mov	r3, r2
 80102a6:	00db      	lsls	r3, r3, #3
 80102a8:	4413      	add	r3, r2
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	440b      	add	r3, r1
 80102ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80102b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3714      	adds	r7, #20
 80102b8:	46bd      	mov	sp, r7
 80102ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102be:	4770      	bx	lr

080102c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	460b      	mov	r3, r1
 80102ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102cc:	2300      	movs	r3, #0
 80102ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102d0:	2300      	movs	r3, #0
 80102d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80102da:	78fa      	ldrb	r2, [r7, #3]
 80102dc:	4611      	mov	r1, r2
 80102de:	4618      	mov	r0, r3
 80102e0:	f7f3 fd06 	bl	8003cf0 <HAL_PCD_SetAddress>
 80102e4:	4603      	mov	r3, r0
 80102e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80102e8:	7bbb      	ldrb	r3, [r7, #14]
 80102ea:	2b03      	cmp	r3, #3
 80102ec:	d816      	bhi.n	801031c <USBD_LL_SetUSBAddress+0x5c>
 80102ee:	a201      	add	r2, pc, #4	; (adr r2, 80102f4 <USBD_LL_SetUSBAddress+0x34>)
 80102f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f4:	08010305 	.word	0x08010305
 80102f8:	0801030b 	.word	0x0801030b
 80102fc:	08010311 	.word	0x08010311
 8010300:	08010317 	.word	0x08010317
    case HAL_OK :
      usb_status = USBD_OK;
 8010304:	2300      	movs	r3, #0
 8010306:	73fb      	strb	r3, [r7, #15]
    break;
 8010308:	e00b      	b.n	8010322 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801030a:	2303      	movs	r3, #3
 801030c:	73fb      	strb	r3, [r7, #15]
    break;
 801030e:	e008      	b.n	8010322 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010310:	2301      	movs	r3, #1
 8010312:	73fb      	strb	r3, [r7, #15]
    break;
 8010314:	e005      	b.n	8010322 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010316:	2303      	movs	r3, #3
 8010318:	73fb      	strb	r3, [r7, #15]
    break;
 801031a:	e002      	b.n	8010322 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 801031c:	2303      	movs	r3, #3
 801031e:	73fb      	strb	r3, [r7, #15]
    break;
 8010320:	bf00      	nop
  }
  return usb_status;
 8010322:	7bfb      	ldrb	r3, [r7, #15]
}
 8010324:	4618      	mov	r0, r3
 8010326:	3710      	adds	r7, #16
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b086      	sub	sp, #24
 8010330:	af00      	add	r7, sp, #0
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	607a      	str	r2, [r7, #4]
 8010336:	603b      	str	r3, [r7, #0]
 8010338:	460b      	mov	r3, r1
 801033a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801033c:	2300      	movs	r3, #0
 801033e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010340:	2300      	movs	r3, #0
 8010342:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801034a:	7af9      	ldrb	r1, [r7, #11]
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	f7f3 fdfb 	bl	8003f4a <HAL_PCD_EP_Transmit>
 8010354:	4603      	mov	r3, r0
 8010356:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010358:	7dbb      	ldrb	r3, [r7, #22]
 801035a:	2b03      	cmp	r3, #3
 801035c:	d816      	bhi.n	801038c <USBD_LL_Transmit+0x60>
 801035e:	a201      	add	r2, pc, #4	; (adr r2, 8010364 <USBD_LL_Transmit+0x38>)
 8010360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010364:	08010375 	.word	0x08010375
 8010368:	0801037b 	.word	0x0801037b
 801036c:	08010381 	.word	0x08010381
 8010370:	08010387 	.word	0x08010387
    case HAL_OK :
      usb_status = USBD_OK;
 8010374:	2300      	movs	r3, #0
 8010376:	75fb      	strb	r3, [r7, #23]
    break;
 8010378:	e00b      	b.n	8010392 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801037a:	2303      	movs	r3, #3
 801037c:	75fb      	strb	r3, [r7, #23]
    break;
 801037e:	e008      	b.n	8010392 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010380:	2301      	movs	r3, #1
 8010382:	75fb      	strb	r3, [r7, #23]
    break;
 8010384:	e005      	b.n	8010392 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010386:	2303      	movs	r3, #3
 8010388:	75fb      	strb	r3, [r7, #23]
    break;
 801038a:	e002      	b.n	8010392 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801038c:	2303      	movs	r3, #3
 801038e:	75fb      	strb	r3, [r7, #23]
    break;
 8010390:	bf00      	nop
  }
  return usb_status;
 8010392:	7dfb      	ldrb	r3, [r7, #23]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3718      	adds	r7, #24
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b086      	sub	sp, #24
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	607a      	str	r2, [r7, #4]
 80103a6:	603b      	str	r3, [r7, #0]
 80103a8:	460b      	mov	r3, r1
 80103aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103ac:	2300      	movs	r3, #0
 80103ae:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103b0:	2300      	movs	r3, #0
 80103b2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80103ba:	7af9      	ldrb	r1, [r7, #11]
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	f7f3 fd6d 	bl	8003e9e <HAL_PCD_EP_Receive>
 80103c4:	4603      	mov	r3, r0
 80103c6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80103c8:	7dbb      	ldrb	r3, [r7, #22]
 80103ca:	2b03      	cmp	r3, #3
 80103cc:	d816      	bhi.n	80103fc <USBD_LL_PrepareReceive+0x60>
 80103ce:	a201      	add	r2, pc, #4	; (adr r2, 80103d4 <USBD_LL_PrepareReceive+0x38>)
 80103d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103d4:	080103e5 	.word	0x080103e5
 80103d8:	080103eb 	.word	0x080103eb
 80103dc:	080103f1 	.word	0x080103f1
 80103e0:	080103f7 	.word	0x080103f7
    case HAL_OK :
      usb_status = USBD_OK;
 80103e4:	2300      	movs	r3, #0
 80103e6:	75fb      	strb	r3, [r7, #23]
    break;
 80103e8:	e00b      	b.n	8010402 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80103ea:	2303      	movs	r3, #3
 80103ec:	75fb      	strb	r3, [r7, #23]
    break;
 80103ee:	e008      	b.n	8010402 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80103f0:	2301      	movs	r3, #1
 80103f2:	75fb      	strb	r3, [r7, #23]
    break;
 80103f4:	e005      	b.n	8010402 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80103f6:	2303      	movs	r3, #3
 80103f8:	75fb      	strb	r3, [r7, #23]
    break;
 80103fa:	e002      	b.n	8010402 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80103fc:	2303      	movs	r3, #3
 80103fe:	75fb      	strb	r3, [r7, #23]
    break;
 8010400:	bf00      	nop
  }
  return usb_status;
 8010402:	7dfb      	ldrb	r3, [r7, #23]
}
 8010404:	4618      	mov	r0, r3
 8010406:	3718      	adds	r7, #24
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	460b      	mov	r3, r1
 8010416:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801041e:	78fa      	ldrb	r2, [r7, #3]
 8010420:	4611      	mov	r1, r2
 8010422:	4618      	mov	r0, r3
 8010424:	f7f3 fd79 	bl	8003f1a <HAL_PCD_EP_GetRxCount>
 8010428:	4603      	mov	r3, r0
}
 801042a:	4618      	mov	r0, r3
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
	...

08010434 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010434:	b480      	push	{r7}
 8010436:	b083      	sub	sp, #12
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801043c:	4b03      	ldr	r3, [pc, #12]	; (801044c <USBD_static_malloc+0x18>)
}
 801043e:	4618      	mov	r0, r3
 8010440:	370c      	adds	r7, #12
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr
 801044a:	bf00      	nop
 801044c:	200026b4 	.word	0x200026b4

08010450 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010450:	b480      	push	{r7}
 8010452:	b083      	sub	sp, #12
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]

}
 8010458:	bf00      	nop
 801045a:	370c      	adds	r7, #12
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr

08010464 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010468:	f7f1 fa42 	bl	80018f0 <SystemClock_Config>
}
 801046c:	bf00      	nop
 801046e:	bd80      	pop	{r7, pc}

08010470 <__libc_init_array>:
 8010470:	b570      	push	{r4, r5, r6, lr}
 8010472:	4d0d      	ldr	r5, [pc, #52]	; (80104a8 <__libc_init_array+0x38>)
 8010474:	4c0d      	ldr	r4, [pc, #52]	; (80104ac <__libc_init_array+0x3c>)
 8010476:	1b64      	subs	r4, r4, r5
 8010478:	10a4      	asrs	r4, r4, #2
 801047a:	2600      	movs	r6, #0
 801047c:	42a6      	cmp	r6, r4
 801047e:	d109      	bne.n	8010494 <__libc_init_array+0x24>
 8010480:	4d0b      	ldr	r5, [pc, #44]	; (80104b0 <__libc_init_array+0x40>)
 8010482:	4c0c      	ldr	r4, [pc, #48]	; (80104b4 <__libc_init_array+0x44>)
 8010484:	f002 fda2 	bl	8012fcc <_init>
 8010488:	1b64      	subs	r4, r4, r5
 801048a:	10a4      	asrs	r4, r4, #2
 801048c:	2600      	movs	r6, #0
 801048e:	42a6      	cmp	r6, r4
 8010490:	d105      	bne.n	801049e <__libc_init_array+0x2e>
 8010492:	bd70      	pop	{r4, r5, r6, pc}
 8010494:	f855 3b04 	ldr.w	r3, [r5], #4
 8010498:	4798      	blx	r3
 801049a:	3601      	adds	r6, #1
 801049c:	e7ee      	b.n	801047c <__libc_init_array+0xc>
 801049e:	f855 3b04 	ldr.w	r3, [r5], #4
 80104a2:	4798      	blx	r3
 80104a4:	3601      	adds	r6, #1
 80104a6:	e7f2      	b.n	801048e <__libc_init_array+0x1e>
 80104a8:	080134f0 	.word	0x080134f0
 80104ac:	080134f0 	.word	0x080134f0
 80104b0:	080134f0 	.word	0x080134f0
 80104b4:	080134f4 	.word	0x080134f4

080104b8 <malloc>:
 80104b8:	4b02      	ldr	r3, [pc, #8]	; (80104c4 <malloc+0xc>)
 80104ba:	4601      	mov	r1, r0
 80104bc:	6818      	ldr	r0, [r3, #0]
 80104be:	f000 b885 	b.w	80105cc <_malloc_r>
 80104c2:	bf00      	nop
 80104c4:	20000184 	.word	0x20000184

080104c8 <memcpy>:
 80104c8:	440a      	add	r2, r1
 80104ca:	4291      	cmp	r1, r2
 80104cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80104d0:	d100      	bne.n	80104d4 <memcpy+0xc>
 80104d2:	4770      	bx	lr
 80104d4:	b510      	push	{r4, lr}
 80104d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104de:	4291      	cmp	r1, r2
 80104e0:	d1f9      	bne.n	80104d6 <memcpy+0xe>
 80104e2:	bd10      	pop	{r4, pc}

080104e4 <memset>:
 80104e4:	4402      	add	r2, r0
 80104e6:	4603      	mov	r3, r0
 80104e8:	4293      	cmp	r3, r2
 80104ea:	d100      	bne.n	80104ee <memset+0xa>
 80104ec:	4770      	bx	lr
 80104ee:	f803 1b01 	strb.w	r1, [r3], #1
 80104f2:	e7f9      	b.n	80104e8 <memset+0x4>

080104f4 <_free_r>:
 80104f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104f6:	2900      	cmp	r1, #0
 80104f8:	d044      	beq.n	8010584 <_free_r+0x90>
 80104fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104fe:	9001      	str	r0, [sp, #4]
 8010500:	2b00      	cmp	r3, #0
 8010502:	f1a1 0404 	sub.w	r4, r1, #4
 8010506:	bfb8      	it	lt
 8010508:	18e4      	addlt	r4, r4, r3
 801050a:	f001 fd21 	bl	8011f50 <__malloc_lock>
 801050e:	4a1e      	ldr	r2, [pc, #120]	; (8010588 <_free_r+0x94>)
 8010510:	9801      	ldr	r0, [sp, #4]
 8010512:	6813      	ldr	r3, [r2, #0]
 8010514:	b933      	cbnz	r3, 8010524 <_free_r+0x30>
 8010516:	6063      	str	r3, [r4, #4]
 8010518:	6014      	str	r4, [r2, #0]
 801051a:	b003      	add	sp, #12
 801051c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010520:	f001 bd1c 	b.w	8011f5c <__malloc_unlock>
 8010524:	42a3      	cmp	r3, r4
 8010526:	d908      	bls.n	801053a <_free_r+0x46>
 8010528:	6825      	ldr	r5, [r4, #0]
 801052a:	1961      	adds	r1, r4, r5
 801052c:	428b      	cmp	r3, r1
 801052e:	bf01      	itttt	eq
 8010530:	6819      	ldreq	r1, [r3, #0]
 8010532:	685b      	ldreq	r3, [r3, #4]
 8010534:	1949      	addeq	r1, r1, r5
 8010536:	6021      	streq	r1, [r4, #0]
 8010538:	e7ed      	b.n	8010516 <_free_r+0x22>
 801053a:	461a      	mov	r2, r3
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	b10b      	cbz	r3, 8010544 <_free_r+0x50>
 8010540:	42a3      	cmp	r3, r4
 8010542:	d9fa      	bls.n	801053a <_free_r+0x46>
 8010544:	6811      	ldr	r1, [r2, #0]
 8010546:	1855      	adds	r5, r2, r1
 8010548:	42a5      	cmp	r5, r4
 801054a:	d10b      	bne.n	8010564 <_free_r+0x70>
 801054c:	6824      	ldr	r4, [r4, #0]
 801054e:	4421      	add	r1, r4
 8010550:	1854      	adds	r4, r2, r1
 8010552:	42a3      	cmp	r3, r4
 8010554:	6011      	str	r1, [r2, #0]
 8010556:	d1e0      	bne.n	801051a <_free_r+0x26>
 8010558:	681c      	ldr	r4, [r3, #0]
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	6053      	str	r3, [r2, #4]
 801055e:	4421      	add	r1, r4
 8010560:	6011      	str	r1, [r2, #0]
 8010562:	e7da      	b.n	801051a <_free_r+0x26>
 8010564:	d902      	bls.n	801056c <_free_r+0x78>
 8010566:	230c      	movs	r3, #12
 8010568:	6003      	str	r3, [r0, #0]
 801056a:	e7d6      	b.n	801051a <_free_r+0x26>
 801056c:	6825      	ldr	r5, [r4, #0]
 801056e:	1961      	adds	r1, r4, r5
 8010570:	428b      	cmp	r3, r1
 8010572:	bf04      	itt	eq
 8010574:	6819      	ldreq	r1, [r3, #0]
 8010576:	685b      	ldreq	r3, [r3, #4]
 8010578:	6063      	str	r3, [r4, #4]
 801057a:	bf04      	itt	eq
 801057c:	1949      	addeq	r1, r1, r5
 801057e:	6021      	streq	r1, [r4, #0]
 8010580:	6054      	str	r4, [r2, #4]
 8010582:	e7ca      	b.n	801051a <_free_r+0x26>
 8010584:	b003      	add	sp, #12
 8010586:	bd30      	pop	{r4, r5, pc}
 8010588:	200028d4 	.word	0x200028d4

0801058c <sbrk_aligned>:
 801058c:	b570      	push	{r4, r5, r6, lr}
 801058e:	4e0e      	ldr	r6, [pc, #56]	; (80105c8 <sbrk_aligned+0x3c>)
 8010590:	460c      	mov	r4, r1
 8010592:	6831      	ldr	r1, [r6, #0]
 8010594:	4605      	mov	r5, r0
 8010596:	b911      	cbnz	r1, 801059e <sbrk_aligned+0x12>
 8010598:	f000 fd0e 	bl	8010fb8 <_sbrk_r>
 801059c:	6030      	str	r0, [r6, #0]
 801059e:	4621      	mov	r1, r4
 80105a0:	4628      	mov	r0, r5
 80105a2:	f000 fd09 	bl	8010fb8 <_sbrk_r>
 80105a6:	1c43      	adds	r3, r0, #1
 80105a8:	d00a      	beq.n	80105c0 <sbrk_aligned+0x34>
 80105aa:	1cc4      	adds	r4, r0, #3
 80105ac:	f024 0403 	bic.w	r4, r4, #3
 80105b0:	42a0      	cmp	r0, r4
 80105b2:	d007      	beq.n	80105c4 <sbrk_aligned+0x38>
 80105b4:	1a21      	subs	r1, r4, r0
 80105b6:	4628      	mov	r0, r5
 80105b8:	f000 fcfe 	bl	8010fb8 <_sbrk_r>
 80105bc:	3001      	adds	r0, #1
 80105be:	d101      	bne.n	80105c4 <sbrk_aligned+0x38>
 80105c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80105c4:	4620      	mov	r0, r4
 80105c6:	bd70      	pop	{r4, r5, r6, pc}
 80105c8:	200028d8 	.word	0x200028d8

080105cc <_malloc_r>:
 80105cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105d0:	1ccd      	adds	r5, r1, #3
 80105d2:	f025 0503 	bic.w	r5, r5, #3
 80105d6:	3508      	adds	r5, #8
 80105d8:	2d0c      	cmp	r5, #12
 80105da:	bf38      	it	cc
 80105dc:	250c      	movcc	r5, #12
 80105de:	2d00      	cmp	r5, #0
 80105e0:	4607      	mov	r7, r0
 80105e2:	db01      	blt.n	80105e8 <_malloc_r+0x1c>
 80105e4:	42a9      	cmp	r1, r5
 80105e6:	d905      	bls.n	80105f4 <_malloc_r+0x28>
 80105e8:	230c      	movs	r3, #12
 80105ea:	603b      	str	r3, [r7, #0]
 80105ec:	2600      	movs	r6, #0
 80105ee:	4630      	mov	r0, r6
 80105f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105f4:	4e2e      	ldr	r6, [pc, #184]	; (80106b0 <_malloc_r+0xe4>)
 80105f6:	f001 fcab 	bl	8011f50 <__malloc_lock>
 80105fa:	6833      	ldr	r3, [r6, #0]
 80105fc:	461c      	mov	r4, r3
 80105fe:	bb34      	cbnz	r4, 801064e <_malloc_r+0x82>
 8010600:	4629      	mov	r1, r5
 8010602:	4638      	mov	r0, r7
 8010604:	f7ff ffc2 	bl	801058c <sbrk_aligned>
 8010608:	1c43      	adds	r3, r0, #1
 801060a:	4604      	mov	r4, r0
 801060c:	d14d      	bne.n	80106aa <_malloc_r+0xde>
 801060e:	6834      	ldr	r4, [r6, #0]
 8010610:	4626      	mov	r6, r4
 8010612:	2e00      	cmp	r6, #0
 8010614:	d140      	bne.n	8010698 <_malloc_r+0xcc>
 8010616:	6823      	ldr	r3, [r4, #0]
 8010618:	4631      	mov	r1, r6
 801061a:	4638      	mov	r0, r7
 801061c:	eb04 0803 	add.w	r8, r4, r3
 8010620:	f000 fcca 	bl	8010fb8 <_sbrk_r>
 8010624:	4580      	cmp	r8, r0
 8010626:	d13a      	bne.n	801069e <_malloc_r+0xd2>
 8010628:	6821      	ldr	r1, [r4, #0]
 801062a:	3503      	adds	r5, #3
 801062c:	1a6d      	subs	r5, r5, r1
 801062e:	f025 0503 	bic.w	r5, r5, #3
 8010632:	3508      	adds	r5, #8
 8010634:	2d0c      	cmp	r5, #12
 8010636:	bf38      	it	cc
 8010638:	250c      	movcc	r5, #12
 801063a:	4629      	mov	r1, r5
 801063c:	4638      	mov	r0, r7
 801063e:	f7ff ffa5 	bl	801058c <sbrk_aligned>
 8010642:	3001      	adds	r0, #1
 8010644:	d02b      	beq.n	801069e <_malloc_r+0xd2>
 8010646:	6823      	ldr	r3, [r4, #0]
 8010648:	442b      	add	r3, r5
 801064a:	6023      	str	r3, [r4, #0]
 801064c:	e00e      	b.n	801066c <_malloc_r+0xa0>
 801064e:	6822      	ldr	r2, [r4, #0]
 8010650:	1b52      	subs	r2, r2, r5
 8010652:	d41e      	bmi.n	8010692 <_malloc_r+0xc6>
 8010654:	2a0b      	cmp	r2, #11
 8010656:	d916      	bls.n	8010686 <_malloc_r+0xba>
 8010658:	1961      	adds	r1, r4, r5
 801065a:	42a3      	cmp	r3, r4
 801065c:	6025      	str	r5, [r4, #0]
 801065e:	bf18      	it	ne
 8010660:	6059      	strne	r1, [r3, #4]
 8010662:	6863      	ldr	r3, [r4, #4]
 8010664:	bf08      	it	eq
 8010666:	6031      	streq	r1, [r6, #0]
 8010668:	5162      	str	r2, [r4, r5]
 801066a:	604b      	str	r3, [r1, #4]
 801066c:	4638      	mov	r0, r7
 801066e:	f104 060b 	add.w	r6, r4, #11
 8010672:	f001 fc73 	bl	8011f5c <__malloc_unlock>
 8010676:	f026 0607 	bic.w	r6, r6, #7
 801067a:	1d23      	adds	r3, r4, #4
 801067c:	1af2      	subs	r2, r6, r3
 801067e:	d0b6      	beq.n	80105ee <_malloc_r+0x22>
 8010680:	1b9b      	subs	r3, r3, r6
 8010682:	50a3      	str	r3, [r4, r2]
 8010684:	e7b3      	b.n	80105ee <_malloc_r+0x22>
 8010686:	6862      	ldr	r2, [r4, #4]
 8010688:	42a3      	cmp	r3, r4
 801068a:	bf0c      	ite	eq
 801068c:	6032      	streq	r2, [r6, #0]
 801068e:	605a      	strne	r2, [r3, #4]
 8010690:	e7ec      	b.n	801066c <_malloc_r+0xa0>
 8010692:	4623      	mov	r3, r4
 8010694:	6864      	ldr	r4, [r4, #4]
 8010696:	e7b2      	b.n	80105fe <_malloc_r+0x32>
 8010698:	4634      	mov	r4, r6
 801069a:	6876      	ldr	r6, [r6, #4]
 801069c:	e7b9      	b.n	8010612 <_malloc_r+0x46>
 801069e:	230c      	movs	r3, #12
 80106a0:	603b      	str	r3, [r7, #0]
 80106a2:	4638      	mov	r0, r7
 80106a4:	f001 fc5a 	bl	8011f5c <__malloc_unlock>
 80106a8:	e7a1      	b.n	80105ee <_malloc_r+0x22>
 80106aa:	6025      	str	r5, [r4, #0]
 80106ac:	e7de      	b.n	801066c <_malloc_r+0xa0>
 80106ae:	bf00      	nop
 80106b0:	200028d4 	.word	0x200028d4

080106b4 <__cvt>:
 80106b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106b8:	ec55 4b10 	vmov	r4, r5, d0
 80106bc:	2d00      	cmp	r5, #0
 80106be:	460e      	mov	r6, r1
 80106c0:	4619      	mov	r1, r3
 80106c2:	462b      	mov	r3, r5
 80106c4:	bfbb      	ittet	lt
 80106c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80106ca:	461d      	movlt	r5, r3
 80106cc:	2300      	movge	r3, #0
 80106ce:	232d      	movlt	r3, #45	; 0x2d
 80106d0:	700b      	strb	r3, [r1, #0]
 80106d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80106d8:	4691      	mov	r9, r2
 80106da:	f023 0820 	bic.w	r8, r3, #32
 80106de:	bfbc      	itt	lt
 80106e0:	4622      	movlt	r2, r4
 80106e2:	4614      	movlt	r4, r2
 80106e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80106e8:	d005      	beq.n	80106f6 <__cvt+0x42>
 80106ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80106ee:	d100      	bne.n	80106f2 <__cvt+0x3e>
 80106f0:	3601      	adds	r6, #1
 80106f2:	2102      	movs	r1, #2
 80106f4:	e000      	b.n	80106f8 <__cvt+0x44>
 80106f6:	2103      	movs	r1, #3
 80106f8:	ab03      	add	r3, sp, #12
 80106fa:	9301      	str	r3, [sp, #4]
 80106fc:	ab02      	add	r3, sp, #8
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	ec45 4b10 	vmov	d0, r4, r5
 8010704:	4653      	mov	r3, sl
 8010706:	4632      	mov	r2, r6
 8010708:	f000 fd12 	bl	8011130 <_dtoa_r>
 801070c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010710:	4607      	mov	r7, r0
 8010712:	d102      	bne.n	801071a <__cvt+0x66>
 8010714:	f019 0f01 	tst.w	r9, #1
 8010718:	d022      	beq.n	8010760 <__cvt+0xac>
 801071a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801071e:	eb07 0906 	add.w	r9, r7, r6
 8010722:	d110      	bne.n	8010746 <__cvt+0x92>
 8010724:	783b      	ldrb	r3, [r7, #0]
 8010726:	2b30      	cmp	r3, #48	; 0x30
 8010728:	d10a      	bne.n	8010740 <__cvt+0x8c>
 801072a:	2200      	movs	r2, #0
 801072c:	2300      	movs	r3, #0
 801072e:	4620      	mov	r0, r4
 8010730:	4629      	mov	r1, r5
 8010732:	f7f0 f9e1 	bl	8000af8 <__aeabi_dcmpeq>
 8010736:	b918      	cbnz	r0, 8010740 <__cvt+0x8c>
 8010738:	f1c6 0601 	rsb	r6, r6, #1
 801073c:	f8ca 6000 	str.w	r6, [sl]
 8010740:	f8da 3000 	ldr.w	r3, [sl]
 8010744:	4499      	add	r9, r3
 8010746:	2200      	movs	r2, #0
 8010748:	2300      	movs	r3, #0
 801074a:	4620      	mov	r0, r4
 801074c:	4629      	mov	r1, r5
 801074e:	f7f0 f9d3 	bl	8000af8 <__aeabi_dcmpeq>
 8010752:	b108      	cbz	r0, 8010758 <__cvt+0xa4>
 8010754:	f8cd 900c 	str.w	r9, [sp, #12]
 8010758:	2230      	movs	r2, #48	; 0x30
 801075a:	9b03      	ldr	r3, [sp, #12]
 801075c:	454b      	cmp	r3, r9
 801075e:	d307      	bcc.n	8010770 <__cvt+0xbc>
 8010760:	9b03      	ldr	r3, [sp, #12]
 8010762:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010764:	1bdb      	subs	r3, r3, r7
 8010766:	4638      	mov	r0, r7
 8010768:	6013      	str	r3, [r2, #0]
 801076a:	b004      	add	sp, #16
 801076c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010770:	1c59      	adds	r1, r3, #1
 8010772:	9103      	str	r1, [sp, #12]
 8010774:	701a      	strb	r2, [r3, #0]
 8010776:	e7f0      	b.n	801075a <__cvt+0xa6>

08010778 <__exponent>:
 8010778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801077a:	4603      	mov	r3, r0
 801077c:	2900      	cmp	r1, #0
 801077e:	bfb8      	it	lt
 8010780:	4249      	neglt	r1, r1
 8010782:	f803 2b02 	strb.w	r2, [r3], #2
 8010786:	bfb4      	ite	lt
 8010788:	222d      	movlt	r2, #45	; 0x2d
 801078a:	222b      	movge	r2, #43	; 0x2b
 801078c:	2909      	cmp	r1, #9
 801078e:	7042      	strb	r2, [r0, #1]
 8010790:	dd2a      	ble.n	80107e8 <__exponent+0x70>
 8010792:	f10d 0407 	add.w	r4, sp, #7
 8010796:	46a4      	mov	ip, r4
 8010798:	270a      	movs	r7, #10
 801079a:	46a6      	mov	lr, r4
 801079c:	460a      	mov	r2, r1
 801079e:	fb91 f6f7 	sdiv	r6, r1, r7
 80107a2:	fb07 1516 	mls	r5, r7, r6, r1
 80107a6:	3530      	adds	r5, #48	; 0x30
 80107a8:	2a63      	cmp	r2, #99	; 0x63
 80107aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80107ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80107b2:	4631      	mov	r1, r6
 80107b4:	dcf1      	bgt.n	801079a <__exponent+0x22>
 80107b6:	3130      	adds	r1, #48	; 0x30
 80107b8:	f1ae 0502 	sub.w	r5, lr, #2
 80107bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80107c0:	1c44      	adds	r4, r0, #1
 80107c2:	4629      	mov	r1, r5
 80107c4:	4561      	cmp	r1, ip
 80107c6:	d30a      	bcc.n	80107de <__exponent+0x66>
 80107c8:	f10d 0209 	add.w	r2, sp, #9
 80107cc:	eba2 020e 	sub.w	r2, r2, lr
 80107d0:	4565      	cmp	r5, ip
 80107d2:	bf88      	it	hi
 80107d4:	2200      	movhi	r2, #0
 80107d6:	4413      	add	r3, r2
 80107d8:	1a18      	subs	r0, r3, r0
 80107da:	b003      	add	sp, #12
 80107dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80107e6:	e7ed      	b.n	80107c4 <__exponent+0x4c>
 80107e8:	2330      	movs	r3, #48	; 0x30
 80107ea:	3130      	adds	r1, #48	; 0x30
 80107ec:	7083      	strb	r3, [r0, #2]
 80107ee:	70c1      	strb	r1, [r0, #3]
 80107f0:	1d03      	adds	r3, r0, #4
 80107f2:	e7f1      	b.n	80107d8 <__exponent+0x60>

080107f4 <_printf_float>:
 80107f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f8:	ed2d 8b02 	vpush	{d8}
 80107fc:	b08d      	sub	sp, #52	; 0x34
 80107fe:	460c      	mov	r4, r1
 8010800:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010804:	4616      	mov	r6, r2
 8010806:	461f      	mov	r7, r3
 8010808:	4605      	mov	r5, r0
 801080a:	f001 fb87 	bl	8011f1c <_localeconv_r>
 801080e:	f8d0 a000 	ldr.w	sl, [r0]
 8010812:	4650      	mov	r0, sl
 8010814:	f7ef fcf4 	bl	8000200 <strlen>
 8010818:	2300      	movs	r3, #0
 801081a:	930a      	str	r3, [sp, #40]	; 0x28
 801081c:	6823      	ldr	r3, [r4, #0]
 801081e:	9305      	str	r3, [sp, #20]
 8010820:	f8d8 3000 	ldr.w	r3, [r8]
 8010824:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010828:	3307      	adds	r3, #7
 801082a:	f023 0307 	bic.w	r3, r3, #7
 801082e:	f103 0208 	add.w	r2, r3, #8
 8010832:	f8c8 2000 	str.w	r2, [r8]
 8010836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801083e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010842:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010846:	9307      	str	r3, [sp, #28]
 8010848:	f8cd 8018 	str.w	r8, [sp, #24]
 801084c:	ee08 0a10 	vmov	s16, r0
 8010850:	4b9f      	ldr	r3, [pc, #636]	; (8010ad0 <_printf_float+0x2dc>)
 8010852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801085a:	f7f0 f97f 	bl	8000b5c <__aeabi_dcmpun>
 801085e:	bb88      	cbnz	r0, 80108c4 <_printf_float+0xd0>
 8010860:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010864:	4b9a      	ldr	r3, [pc, #616]	; (8010ad0 <_printf_float+0x2dc>)
 8010866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801086a:	f7f0 f959 	bl	8000b20 <__aeabi_dcmple>
 801086e:	bb48      	cbnz	r0, 80108c4 <_printf_float+0xd0>
 8010870:	2200      	movs	r2, #0
 8010872:	2300      	movs	r3, #0
 8010874:	4640      	mov	r0, r8
 8010876:	4649      	mov	r1, r9
 8010878:	f7f0 f948 	bl	8000b0c <__aeabi_dcmplt>
 801087c:	b110      	cbz	r0, 8010884 <_printf_float+0x90>
 801087e:	232d      	movs	r3, #45	; 0x2d
 8010880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010884:	4b93      	ldr	r3, [pc, #588]	; (8010ad4 <_printf_float+0x2e0>)
 8010886:	4894      	ldr	r0, [pc, #592]	; (8010ad8 <_printf_float+0x2e4>)
 8010888:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801088c:	bf94      	ite	ls
 801088e:	4698      	movls	r8, r3
 8010890:	4680      	movhi	r8, r0
 8010892:	2303      	movs	r3, #3
 8010894:	6123      	str	r3, [r4, #16]
 8010896:	9b05      	ldr	r3, [sp, #20]
 8010898:	f023 0204 	bic.w	r2, r3, #4
 801089c:	6022      	str	r2, [r4, #0]
 801089e:	f04f 0900 	mov.w	r9, #0
 80108a2:	9700      	str	r7, [sp, #0]
 80108a4:	4633      	mov	r3, r6
 80108a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80108a8:	4621      	mov	r1, r4
 80108aa:	4628      	mov	r0, r5
 80108ac:	f000 f9d8 	bl	8010c60 <_printf_common>
 80108b0:	3001      	adds	r0, #1
 80108b2:	f040 8090 	bne.w	80109d6 <_printf_float+0x1e2>
 80108b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108ba:	b00d      	add	sp, #52	; 0x34
 80108bc:	ecbd 8b02 	vpop	{d8}
 80108c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c4:	4642      	mov	r2, r8
 80108c6:	464b      	mov	r3, r9
 80108c8:	4640      	mov	r0, r8
 80108ca:	4649      	mov	r1, r9
 80108cc:	f7f0 f946 	bl	8000b5c <__aeabi_dcmpun>
 80108d0:	b140      	cbz	r0, 80108e4 <_printf_float+0xf0>
 80108d2:	464b      	mov	r3, r9
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	bfbc      	itt	lt
 80108d8:	232d      	movlt	r3, #45	; 0x2d
 80108da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80108de:	487f      	ldr	r0, [pc, #508]	; (8010adc <_printf_float+0x2e8>)
 80108e0:	4b7f      	ldr	r3, [pc, #508]	; (8010ae0 <_printf_float+0x2ec>)
 80108e2:	e7d1      	b.n	8010888 <_printf_float+0x94>
 80108e4:	6863      	ldr	r3, [r4, #4]
 80108e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80108ea:	9206      	str	r2, [sp, #24]
 80108ec:	1c5a      	adds	r2, r3, #1
 80108ee:	d13f      	bne.n	8010970 <_printf_float+0x17c>
 80108f0:	2306      	movs	r3, #6
 80108f2:	6063      	str	r3, [r4, #4]
 80108f4:	9b05      	ldr	r3, [sp, #20]
 80108f6:	6861      	ldr	r1, [r4, #4]
 80108f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80108fc:	2300      	movs	r3, #0
 80108fe:	9303      	str	r3, [sp, #12]
 8010900:	ab0a      	add	r3, sp, #40	; 0x28
 8010902:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010906:	ab09      	add	r3, sp, #36	; 0x24
 8010908:	ec49 8b10 	vmov	d0, r8, r9
 801090c:	9300      	str	r3, [sp, #0]
 801090e:	6022      	str	r2, [r4, #0]
 8010910:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010914:	4628      	mov	r0, r5
 8010916:	f7ff fecd 	bl	80106b4 <__cvt>
 801091a:	9b06      	ldr	r3, [sp, #24]
 801091c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801091e:	2b47      	cmp	r3, #71	; 0x47
 8010920:	4680      	mov	r8, r0
 8010922:	d108      	bne.n	8010936 <_printf_float+0x142>
 8010924:	1cc8      	adds	r0, r1, #3
 8010926:	db02      	blt.n	801092e <_printf_float+0x13a>
 8010928:	6863      	ldr	r3, [r4, #4]
 801092a:	4299      	cmp	r1, r3
 801092c:	dd41      	ble.n	80109b2 <_printf_float+0x1be>
 801092e:	f1ab 0b02 	sub.w	fp, fp, #2
 8010932:	fa5f fb8b 	uxtb.w	fp, fp
 8010936:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801093a:	d820      	bhi.n	801097e <_printf_float+0x18a>
 801093c:	3901      	subs	r1, #1
 801093e:	465a      	mov	r2, fp
 8010940:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010944:	9109      	str	r1, [sp, #36]	; 0x24
 8010946:	f7ff ff17 	bl	8010778 <__exponent>
 801094a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801094c:	1813      	adds	r3, r2, r0
 801094e:	2a01      	cmp	r2, #1
 8010950:	4681      	mov	r9, r0
 8010952:	6123      	str	r3, [r4, #16]
 8010954:	dc02      	bgt.n	801095c <_printf_float+0x168>
 8010956:	6822      	ldr	r2, [r4, #0]
 8010958:	07d2      	lsls	r2, r2, #31
 801095a:	d501      	bpl.n	8010960 <_printf_float+0x16c>
 801095c:	3301      	adds	r3, #1
 801095e:	6123      	str	r3, [r4, #16]
 8010960:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010964:	2b00      	cmp	r3, #0
 8010966:	d09c      	beq.n	80108a2 <_printf_float+0xae>
 8010968:	232d      	movs	r3, #45	; 0x2d
 801096a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801096e:	e798      	b.n	80108a2 <_printf_float+0xae>
 8010970:	9a06      	ldr	r2, [sp, #24]
 8010972:	2a47      	cmp	r2, #71	; 0x47
 8010974:	d1be      	bne.n	80108f4 <_printf_float+0x100>
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1bc      	bne.n	80108f4 <_printf_float+0x100>
 801097a:	2301      	movs	r3, #1
 801097c:	e7b9      	b.n	80108f2 <_printf_float+0xfe>
 801097e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010982:	d118      	bne.n	80109b6 <_printf_float+0x1c2>
 8010984:	2900      	cmp	r1, #0
 8010986:	6863      	ldr	r3, [r4, #4]
 8010988:	dd0b      	ble.n	80109a2 <_printf_float+0x1ae>
 801098a:	6121      	str	r1, [r4, #16]
 801098c:	b913      	cbnz	r3, 8010994 <_printf_float+0x1a0>
 801098e:	6822      	ldr	r2, [r4, #0]
 8010990:	07d0      	lsls	r0, r2, #31
 8010992:	d502      	bpl.n	801099a <_printf_float+0x1a6>
 8010994:	3301      	adds	r3, #1
 8010996:	440b      	add	r3, r1
 8010998:	6123      	str	r3, [r4, #16]
 801099a:	65a1      	str	r1, [r4, #88]	; 0x58
 801099c:	f04f 0900 	mov.w	r9, #0
 80109a0:	e7de      	b.n	8010960 <_printf_float+0x16c>
 80109a2:	b913      	cbnz	r3, 80109aa <_printf_float+0x1b6>
 80109a4:	6822      	ldr	r2, [r4, #0]
 80109a6:	07d2      	lsls	r2, r2, #31
 80109a8:	d501      	bpl.n	80109ae <_printf_float+0x1ba>
 80109aa:	3302      	adds	r3, #2
 80109ac:	e7f4      	b.n	8010998 <_printf_float+0x1a4>
 80109ae:	2301      	movs	r3, #1
 80109b0:	e7f2      	b.n	8010998 <_printf_float+0x1a4>
 80109b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80109b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109b8:	4299      	cmp	r1, r3
 80109ba:	db05      	blt.n	80109c8 <_printf_float+0x1d4>
 80109bc:	6823      	ldr	r3, [r4, #0]
 80109be:	6121      	str	r1, [r4, #16]
 80109c0:	07d8      	lsls	r0, r3, #31
 80109c2:	d5ea      	bpl.n	801099a <_printf_float+0x1a6>
 80109c4:	1c4b      	adds	r3, r1, #1
 80109c6:	e7e7      	b.n	8010998 <_printf_float+0x1a4>
 80109c8:	2900      	cmp	r1, #0
 80109ca:	bfd4      	ite	le
 80109cc:	f1c1 0202 	rsble	r2, r1, #2
 80109d0:	2201      	movgt	r2, #1
 80109d2:	4413      	add	r3, r2
 80109d4:	e7e0      	b.n	8010998 <_printf_float+0x1a4>
 80109d6:	6823      	ldr	r3, [r4, #0]
 80109d8:	055a      	lsls	r2, r3, #21
 80109da:	d407      	bmi.n	80109ec <_printf_float+0x1f8>
 80109dc:	6923      	ldr	r3, [r4, #16]
 80109de:	4642      	mov	r2, r8
 80109e0:	4631      	mov	r1, r6
 80109e2:	4628      	mov	r0, r5
 80109e4:	47b8      	blx	r7
 80109e6:	3001      	adds	r0, #1
 80109e8:	d12c      	bne.n	8010a44 <_printf_float+0x250>
 80109ea:	e764      	b.n	80108b6 <_printf_float+0xc2>
 80109ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80109f0:	f240 80e0 	bls.w	8010bb4 <_printf_float+0x3c0>
 80109f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80109f8:	2200      	movs	r2, #0
 80109fa:	2300      	movs	r3, #0
 80109fc:	f7f0 f87c 	bl	8000af8 <__aeabi_dcmpeq>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	d034      	beq.n	8010a6e <_printf_float+0x27a>
 8010a04:	4a37      	ldr	r2, [pc, #220]	; (8010ae4 <_printf_float+0x2f0>)
 8010a06:	2301      	movs	r3, #1
 8010a08:	4631      	mov	r1, r6
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	47b8      	blx	r7
 8010a0e:	3001      	adds	r0, #1
 8010a10:	f43f af51 	beq.w	80108b6 <_printf_float+0xc2>
 8010a14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	db02      	blt.n	8010a22 <_printf_float+0x22e>
 8010a1c:	6823      	ldr	r3, [r4, #0]
 8010a1e:	07d8      	lsls	r0, r3, #31
 8010a20:	d510      	bpl.n	8010a44 <_printf_float+0x250>
 8010a22:	ee18 3a10 	vmov	r3, s16
 8010a26:	4652      	mov	r2, sl
 8010a28:	4631      	mov	r1, r6
 8010a2a:	4628      	mov	r0, r5
 8010a2c:	47b8      	blx	r7
 8010a2e:	3001      	adds	r0, #1
 8010a30:	f43f af41 	beq.w	80108b6 <_printf_float+0xc2>
 8010a34:	f04f 0800 	mov.w	r8, #0
 8010a38:	f104 091a 	add.w	r9, r4, #26
 8010a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a3e:	3b01      	subs	r3, #1
 8010a40:	4543      	cmp	r3, r8
 8010a42:	dc09      	bgt.n	8010a58 <_printf_float+0x264>
 8010a44:	6823      	ldr	r3, [r4, #0]
 8010a46:	079b      	lsls	r3, r3, #30
 8010a48:	f100 8105 	bmi.w	8010c56 <_printf_float+0x462>
 8010a4c:	68e0      	ldr	r0, [r4, #12]
 8010a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a50:	4298      	cmp	r0, r3
 8010a52:	bfb8      	it	lt
 8010a54:	4618      	movlt	r0, r3
 8010a56:	e730      	b.n	80108ba <_printf_float+0xc6>
 8010a58:	2301      	movs	r3, #1
 8010a5a:	464a      	mov	r2, r9
 8010a5c:	4631      	mov	r1, r6
 8010a5e:	4628      	mov	r0, r5
 8010a60:	47b8      	blx	r7
 8010a62:	3001      	adds	r0, #1
 8010a64:	f43f af27 	beq.w	80108b6 <_printf_float+0xc2>
 8010a68:	f108 0801 	add.w	r8, r8, #1
 8010a6c:	e7e6      	b.n	8010a3c <_printf_float+0x248>
 8010a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	dc39      	bgt.n	8010ae8 <_printf_float+0x2f4>
 8010a74:	4a1b      	ldr	r2, [pc, #108]	; (8010ae4 <_printf_float+0x2f0>)
 8010a76:	2301      	movs	r3, #1
 8010a78:	4631      	mov	r1, r6
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	47b8      	blx	r7
 8010a7e:	3001      	adds	r0, #1
 8010a80:	f43f af19 	beq.w	80108b6 <_printf_float+0xc2>
 8010a84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a88:	4313      	orrs	r3, r2
 8010a8a:	d102      	bne.n	8010a92 <_printf_float+0x29e>
 8010a8c:	6823      	ldr	r3, [r4, #0]
 8010a8e:	07d9      	lsls	r1, r3, #31
 8010a90:	d5d8      	bpl.n	8010a44 <_printf_float+0x250>
 8010a92:	ee18 3a10 	vmov	r3, s16
 8010a96:	4652      	mov	r2, sl
 8010a98:	4631      	mov	r1, r6
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	47b8      	blx	r7
 8010a9e:	3001      	adds	r0, #1
 8010aa0:	f43f af09 	beq.w	80108b6 <_printf_float+0xc2>
 8010aa4:	f04f 0900 	mov.w	r9, #0
 8010aa8:	f104 0a1a 	add.w	sl, r4, #26
 8010aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aae:	425b      	negs	r3, r3
 8010ab0:	454b      	cmp	r3, r9
 8010ab2:	dc01      	bgt.n	8010ab8 <_printf_float+0x2c4>
 8010ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ab6:	e792      	b.n	80109de <_printf_float+0x1ea>
 8010ab8:	2301      	movs	r3, #1
 8010aba:	4652      	mov	r2, sl
 8010abc:	4631      	mov	r1, r6
 8010abe:	4628      	mov	r0, r5
 8010ac0:	47b8      	blx	r7
 8010ac2:	3001      	adds	r0, #1
 8010ac4:	f43f aef7 	beq.w	80108b6 <_printf_float+0xc2>
 8010ac8:	f109 0901 	add.w	r9, r9, #1
 8010acc:	e7ee      	b.n	8010aac <_printf_float+0x2b8>
 8010ace:	bf00      	nop
 8010ad0:	7fefffff 	.word	0x7fefffff
 8010ad4:	0801310c 	.word	0x0801310c
 8010ad8:	08013110 	.word	0x08013110
 8010adc:	08013118 	.word	0x08013118
 8010ae0:	08013114 	.word	0x08013114
 8010ae4:	0801311c 	.word	0x0801311c
 8010ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010aea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010aec:	429a      	cmp	r2, r3
 8010aee:	bfa8      	it	ge
 8010af0:	461a      	movge	r2, r3
 8010af2:	2a00      	cmp	r2, #0
 8010af4:	4691      	mov	r9, r2
 8010af6:	dc37      	bgt.n	8010b68 <_printf_float+0x374>
 8010af8:	f04f 0b00 	mov.w	fp, #0
 8010afc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b00:	f104 021a 	add.w	r2, r4, #26
 8010b04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010b06:	9305      	str	r3, [sp, #20]
 8010b08:	eba3 0309 	sub.w	r3, r3, r9
 8010b0c:	455b      	cmp	r3, fp
 8010b0e:	dc33      	bgt.n	8010b78 <_printf_float+0x384>
 8010b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b14:	429a      	cmp	r2, r3
 8010b16:	db3b      	blt.n	8010b90 <_printf_float+0x39c>
 8010b18:	6823      	ldr	r3, [r4, #0]
 8010b1a:	07da      	lsls	r2, r3, #31
 8010b1c:	d438      	bmi.n	8010b90 <_printf_float+0x39c>
 8010b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b20:	9a05      	ldr	r2, [sp, #20]
 8010b22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b24:	1a9a      	subs	r2, r3, r2
 8010b26:	eba3 0901 	sub.w	r9, r3, r1
 8010b2a:	4591      	cmp	r9, r2
 8010b2c:	bfa8      	it	ge
 8010b2e:	4691      	movge	r9, r2
 8010b30:	f1b9 0f00 	cmp.w	r9, #0
 8010b34:	dc35      	bgt.n	8010ba2 <_printf_float+0x3ae>
 8010b36:	f04f 0800 	mov.w	r8, #0
 8010b3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b3e:	f104 0a1a 	add.w	sl, r4, #26
 8010b42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b46:	1a9b      	subs	r3, r3, r2
 8010b48:	eba3 0309 	sub.w	r3, r3, r9
 8010b4c:	4543      	cmp	r3, r8
 8010b4e:	f77f af79 	ble.w	8010a44 <_printf_float+0x250>
 8010b52:	2301      	movs	r3, #1
 8010b54:	4652      	mov	r2, sl
 8010b56:	4631      	mov	r1, r6
 8010b58:	4628      	mov	r0, r5
 8010b5a:	47b8      	blx	r7
 8010b5c:	3001      	adds	r0, #1
 8010b5e:	f43f aeaa 	beq.w	80108b6 <_printf_float+0xc2>
 8010b62:	f108 0801 	add.w	r8, r8, #1
 8010b66:	e7ec      	b.n	8010b42 <_printf_float+0x34e>
 8010b68:	4613      	mov	r3, r2
 8010b6a:	4631      	mov	r1, r6
 8010b6c:	4642      	mov	r2, r8
 8010b6e:	4628      	mov	r0, r5
 8010b70:	47b8      	blx	r7
 8010b72:	3001      	adds	r0, #1
 8010b74:	d1c0      	bne.n	8010af8 <_printf_float+0x304>
 8010b76:	e69e      	b.n	80108b6 <_printf_float+0xc2>
 8010b78:	2301      	movs	r3, #1
 8010b7a:	4631      	mov	r1, r6
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	9205      	str	r2, [sp, #20]
 8010b80:	47b8      	blx	r7
 8010b82:	3001      	adds	r0, #1
 8010b84:	f43f ae97 	beq.w	80108b6 <_printf_float+0xc2>
 8010b88:	9a05      	ldr	r2, [sp, #20]
 8010b8a:	f10b 0b01 	add.w	fp, fp, #1
 8010b8e:	e7b9      	b.n	8010b04 <_printf_float+0x310>
 8010b90:	ee18 3a10 	vmov	r3, s16
 8010b94:	4652      	mov	r2, sl
 8010b96:	4631      	mov	r1, r6
 8010b98:	4628      	mov	r0, r5
 8010b9a:	47b8      	blx	r7
 8010b9c:	3001      	adds	r0, #1
 8010b9e:	d1be      	bne.n	8010b1e <_printf_float+0x32a>
 8010ba0:	e689      	b.n	80108b6 <_printf_float+0xc2>
 8010ba2:	9a05      	ldr	r2, [sp, #20]
 8010ba4:	464b      	mov	r3, r9
 8010ba6:	4442      	add	r2, r8
 8010ba8:	4631      	mov	r1, r6
 8010baa:	4628      	mov	r0, r5
 8010bac:	47b8      	blx	r7
 8010bae:	3001      	adds	r0, #1
 8010bb0:	d1c1      	bne.n	8010b36 <_printf_float+0x342>
 8010bb2:	e680      	b.n	80108b6 <_printf_float+0xc2>
 8010bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010bb6:	2a01      	cmp	r2, #1
 8010bb8:	dc01      	bgt.n	8010bbe <_printf_float+0x3ca>
 8010bba:	07db      	lsls	r3, r3, #31
 8010bbc:	d538      	bpl.n	8010c30 <_printf_float+0x43c>
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	4642      	mov	r2, r8
 8010bc2:	4631      	mov	r1, r6
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	47b8      	blx	r7
 8010bc8:	3001      	adds	r0, #1
 8010bca:	f43f ae74 	beq.w	80108b6 <_printf_float+0xc2>
 8010bce:	ee18 3a10 	vmov	r3, s16
 8010bd2:	4652      	mov	r2, sl
 8010bd4:	4631      	mov	r1, r6
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	47b8      	blx	r7
 8010bda:	3001      	adds	r0, #1
 8010bdc:	f43f ae6b 	beq.w	80108b6 <_printf_float+0xc2>
 8010be0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010be4:	2200      	movs	r2, #0
 8010be6:	2300      	movs	r3, #0
 8010be8:	f7ef ff86 	bl	8000af8 <__aeabi_dcmpeq>
 8010bec:	b9d8      	cbnz	r0, 8010c26 <_printf_float+0x432>
 8010bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bf0:	f108 0201 	add.w	r2, r8, #1
 8010bf4:	3b01      	subs	r3, #1
 8010bf6:	4631      	mov	r1, r6
 8010bf8:	4628      	mov	r0, r5
 8010bfa:	47b8      	blx	r7
 8010bfc:	3001      	adds	r0, #1
 8010bfe:	d10e      	bne.n	8010c1e <_printf_float+0x42a>
 8010c00:	e659      	b.n	80108b6 <_printf_float+0xc2>
 8010c02:	2301      	movs	r3, #1
 8010c04:	4652      	mov	r2, sl
 8010c06:	4631      	mov	r1, r6
 8010c08:	4628      	mov	r0, r5
 8010c0a:	47b8      	blx	r7
 8010c0c:	3001      	adds	r0, #1
 8010c0e:	f43f ae52 	beq.w	80108b6 <_printf_float+0xc2>
 8010c12:	f108 0801 	add.w	r8, r8, #1
 8010c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	4543      	cmp	r3, r8
 8010c1c:	dcf1      	bgt.n	8010c02 <_printf_float+0x40e>
 8010c1e:	464b      	mov	r3, r9
 8010c20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010c24:	e6dc      	b.n	80109e0 <_printf_float+0x1ec>
 8010c26:	f04f 0800 	mov.w	r8, #0
 8010c2a:	f104 0a1a 	add.w	sl, r4, #26
 8010c2e:	e7f2      	b.n	8010c16 <_printf_float+0x422>
 8010c30:	2301      	movs	r3, #1
 8010c32:	4642      	mov	r2, r8
 8010c34:	e7df      	b.n	8010bf6 <_printf_float+0x402>
 8010c36:	2301      	movs	r3, #1
 8010c38:	464a      	mov	r2, r9
 8010c3a:	4631      	mov	r1, r6
 8010c3c:	4628      	mov	r0, r5
 8010c3e:	47b8      	blx	r7
 8010c40:	3001      	adds	r0, #1
 8010c42:	f43f ae38 	beq.w	80108b6 <_printf_float+0xc2>
 8010c46:	f108 0801 	add.w	r8, r8, #1
 8010c4a:	68e3      	ldr	r3, [r4, #12]
 8010c4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c4e:	1a5b      	subs	r3, r3, r1
 8010c50:	4543      	cmp	r3, r8
 8010c52:	dcf0      	bgt.n	8010c36 <_printf_float+0x442>
 8010c54:	e6fa      	b.n	8010a4c <_printf_float+0x258>
 8010c56:	f04f 0800 	mov.w	r8, #0
 8010c5a:	f104 0919 	add.w	r9, r4, #25
 8010c5e:	e7f4      	b.n	8010c4a <_printf_float+0x456>

08010c60 <_printf_common>:
 8010c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c64:	4616      	mov	r6, r2
 8010c66:	4699      	mov	r9, r3
 8010c68:	688a      	ldr	r2, [r1, #8]
 8010c6a:	690b      	ldr	r3, [r1, #16]
 8010c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c70:	4293      	cmp	r3, r2
 8010c72:	bfb8      	it	lt
 8010c74:	4613      	movlt	r3, r2
 8010c76:	6033      	str	r3, [r6, #0]
 8010c78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c7c:	4607      	mov	r7, r0
 8010c7e:	460c      	mov	r4, r1
 8010c80:	b10a      	cbz	r2, 8010c86 <_printf_common+0x26>
 8010c82:	3301      	adds	r3, #1
 8010c84:	6033      	str	r3, [r6, #0]
 8010c86:	6823      	ldr	r3, [r4, #0]
 8010c88:	0699      	lsls	r1, r3, #26
 8010c8a:	bf42      	ittt	mi
 8010c8c:	6833      	ldrmi	r3, [r6, #0]
 8010c8e:	3302      	addmi	r3, #2
 8010c90:	6033      	strmi	r3, [r6, #0]
 8010c92:	6825      	ldr	r5, [r4, #0]
 8010c94:	f015 0506 	ands.w	r5, r5, #6
 8010c98:	d106      	bne.n	8010ca8 <_printf_common+0x48>
 8010c9a:	f104 0a19 	add.w	sl, r4, #25
 8010c9e:	68e3      	ldr	r3, [r4, #12]
 8010ca0:	6832      	ldr	r2, [r6, #0]
 8010ca2:	1a9b      	subs	r3, r3, r2
 8010ca4:	42ab      	cmp	r3, r5
 8010ca6:	dc26      	bgt.n	8010cf6 <_printf_common+0x96>
 8010ca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010cac:	1e13      	subs	r3, r2, #0
 8010cae:	6822      	ldr	r2, [r4, #0]
 8010cb0:	bf18      	it	ne
 8010cb2:	2301      	movne	r3, #1
 8010cb4:	0692      	lsls	r2, r2, #26
 8010cb6:	d42b      	bmi.n	8010d10 <_printf_common+0xb0>
 8010cb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010cbc:	4649      	mov	r1, r9
 8010cbe:	4638      	mov	r0, r7
 8010cc0:	47c0      	blx	r8
 8010cc2:	3001      	adds	r0, #1
 8010cc4:	d01e      	beq.n	8010d04 <_printf_common+0xa4>
 8010cc6:	6823      	ldr	r3, [r4, #0]
 8010cc8:	68e5      	ldr	r5, [r4, #12]
 8010cca:	6832      	ldr	r2, [r6, #0]
 8010ccc:	f003 0306 	and.w	r3, r3, #6
 8010cd0:	2b04      	cmp	r3, #4
 8010cd2:	bf08      	it	eq
 8010cd4:	1aad      	subeq	r5, r5, r2
 8010cd6:	68a3      	ldr	r3, [r4, #8]
 8010cd8:	6922      	ldr	r2, [r4, #16]
 8010cda:	bf0c      	ite	eq
 8010cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ce0:	2500      	movne	r5, #0
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	bfc4      	itt	gt
 8010ce6:	1a9b      	subgt	r3, r3, r2
 8010ce8:	18ed      	addgt	r5, r5, r3
 8010cea:	2600      	movs	r6, #0
 8010cec:	341a      	adds	r4, #26
 8010cee:	42b5      	cmp	r5, r6
 8010cf0:	d11a      	bne.n	8010d28 <_printf_common+0xc8>
 8010cf2:	2000      	movs	r0, #0
 8010cf4:	e008      	b.n	8010d08 <_printf_common+0xa8>
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	4652      	mov	r2, sl
 8010cfa:	4649      	mov	r1, r9
 8010cfc:	4638      	mov	r0, r7
 8010cfe:	47c0      	blx	r8
 8010d00:	3001      	adds	r0, #1
 8010d02:	d103      	bne.n	8010d0c <_printf_common+0xac>
 8010d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d0c:	3501      	adds	r5, #1
 8010d0e:	e7c6      	b.n	8010c9e <_printf_common+0x3e>
 8010d10:	18e1      	adds	r1, r4, r3
 8010d12:	1c5a      	adds	r2, r3, #1
 8010d14:	2030      	movs	r0, #48	; 0x30
 8010d16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010d1a:	4422      	add	r2, r4
 8010d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d24:	3302      	adds	r3, #2
 8010d26:	e7c7      	b.n	8010cb8 <_printf_common+0x58>
 8010d28:	2301      	movs	r3, #1
 8010d2a:	4622      	mov	r2, r4
 8010d2c:	4649      	mov	r1, r9
 8010d2e:	4638      	mov	r0, r7
 8010d30:	47c0      	blx	r8
 8010d32:	3001      	adds	r0, #1
 8010d34:	d0e6      	beq.n	8010d04 <_printf_common+0xa4>
 8010d36:	3601      	adds	r6, #1
 8010d38:	e7d9      	b.n	8010cee <_printf_common+0x8e>
	...

08010d3c <_printf_i>:
 8010d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d40:	7e0f      	ldrb	r7, [r1, #24]
 8010d42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010d44:	2f78      	cmp	r7, #120	; 0x78
 8010d46:	4691      	mov	r9, r2
 8010d48:	4680      	mov	r8, r0
 8010d4a:	460c      	mov	r4, r1
 8010d4c:	469a      	mov	sl, r3
 8010d4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010d52:	d807      	bhi.n	8010d64 <_printf_i+0x28>
 8010d54:	2f62      	cmp	r7, #98	; 0x62
 8010d56:	d80a      	bhi.n	8010d6e <_printf_i+0x32>
 8010d58:	2f00      	cmp	r7, #0
 8010d5a:	f000 80d8 	beq.w	8010f0e <_printf_i+0x1d2>
 8010d5e:	2f58      	cmp	r7, #88	; 0x58
 8010d60:	f000 80a3 	beq.w	8010eaa <_printf_i+0x16e>
 8010d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d6c:	e03a      	b.n	8010de4 <_printf_i+0xa8>
 8010d6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d72:	2b15      	cmp	r3, #21
 8010d74:	d8f6      	bhi.n	8010d64 <_printf_i+0x28>
 8010d76:	a101      	add	r1, pc, #4	; (adr r1, 8010d7c <_printf_i+0x40>)
 8010d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010d7c:	08010dd5 	.word	0x08010dd5
 8010d80:	08010de9 	.word	0x08010de9
 8010d84:	08010d65 	.word	0x08010d65
 8010d88:	08010d65 	.word	0x08010d65
 8010d8c:	08010d65 	.word	0x08010d65
 8010d90:	08010d65 	.word	0x08010d65
 8010d94:	08010de9 	.word	0x08010de9
 8010d98:	08010d65 	.word	0x08010d65
 8010d9c:	08010d65 	.word	0x08010d65
 8010da0:	08010d65 	.word	0x08010d65
 8010da4:	08010d65 	.word	0x08010d65
 8010da8:	08010ef5 	.word	0x08010ef5
 8010dac:	08010e19 	.word	0x08010e19
 8010db0:	08010ed7 	.word	0x08010ed7
 8010db4:	08010d65 	.word	0x08010d65
 8010db8:	08010d65 	.word	0x08010d65
 8010dbc:	08010f17 	.word	0x08010f17
 8010dc0:	08010d65 	.word	0x08010d65
 8010dc4:	08010e19 	.word	0x08010e19
 8010dc8:	08010d65 	.word	0x08010d65
 8010dcc:	08010d65 	.word	0x08010d65
 8010dd0:	08010edf 	.word	0x08010edf
 8010dd4:	682b      	ldr	r3, [r5, #0]
 8010dd6:	1d1a      	adds	r2, r3, #4
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	602a      	str	r2, [r5, #0]
 8010ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010de4:	2301      	movs	r3, #1
 8010de6:	e0a3      	b.n	8010f30 <_printf_i+0x1f4>
 8010de8:	6820      	ldr	r0, [r4, #0]
 8010dea:	6829      	ldr	r1, [r5, #0]
 8010dec:	0606      	lsls	r6, r0, #24
 8010dee:	f101 0304 	add.w	r3, r1, #4
 8010df2:	d50a      	bpl.n	8010e0a <_printf_i+0xce>
 8010df4:	680e      	ldr	r6, [r1, #0]
 8010df6:	602b      	str	r3, [r5, #0]
 8010df8:	2e00      	cmp	r6, #0
 8010dfa:	da03      	bge.n	8010e04 <_printf_i+0xc8>
 8010dfc:	232d      	movs	r3, #45	; 0x2d
 8010dfe:	4276      	negs	r6, r6
 8010e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e04:	485e      	ldr	r0, [pc, #376]	; (8010f80 <_printf_i+0x244>)
 8010e06:	230a      	movs	r3, #10
 8010e08:	e019      	b.n	8010e3e <_printf_i+0x102>
 8010e0a:	680e      	ldr	r6, [r1, #0]
 8010e0c:	602b      	str	r3, [r5, #0]
 8010e0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010e12:	bf18      	it	ne
 8010e14:	b236      	sxthne	r6, r6
 8010e16:	e7ef      	b.n	8010df8 <_printf_i+0xbc>
 8010e18:	682b      	ldr	r3, [r5, #0]
 8010e1a:	6820      	ldr	r0, [r4, #0]
 8010e1c:	1d19      	adds	r1, r3, #4
 8010e1e:	6029      	str	r1, [r5, #0]
 8010e20:	0601      	lsls	r1, r0, #24
 8010e22:	d501      	bpl.n	8010e28 <_printf_i+0xec>
 8010e24:	681e      	ldr	r6, [r3, #0]
 8010e26:	e002      	b.n	8010e2e <_printf_i+0xf2>
 8010e28:	0646      	lsls	r6, r0, #25
 8010e2a:	d5fb      	bpl.n	8010e24 <_printf_i+0xe8>
 8010e2c:	881e      	ldrh	r6, [r3, #0]
 8010e2e:	4854      	ldr	r0, [pc, #336]	; (8010f80 <_printf_i+0x244>)
 8010e30:	2f6f      	cmp	r7, #111	; 0x6f
 8010e32:	bf0c      	ite	eq
 8010e34:	2308      	moveq	r3, #8
 8010e36:	230a      	movne	r3, #10
 8010e38:	2100      	movs	r1, #0
 8010e3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e3e:	6865      	ldr	r5, [r4, #4]
 8010e40:	60a5      	str	r5, [r4, #8]
 8010e42:	2d00      	cmp	r5, #0
 8010e44:	bfa2      	ittt	ge
 8010e46:	6821      	ldrge	r1, [r4, #0]
 8010e48:	f021 0104 	bicge.w	r1, r1, #4
 8010e4c:	6021      	strge	r1, [r4, #0]
 8010e4e:	b90e      	cbnz	r6, 8010e54 <_printf_i+0x118>
 8010e50:	2d00      	cmp	r5, #0
 8010e52:	d04d      	beq.n	8010ef0 <_printf_i+0x1b4>
 8010e54:	4615      	mov	r5, r2
 8010e56:	fbb6 f1f3 	udiv	r1, r6, r3
 8010e5a:	fb03 6711 	mls	r7, r3, r1, r6
 8010e5e:	5dc7      	ldrb	r7, [r0, r7]
 8010e60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010e64:	4637      	mov	r7, r6
 8010e66:	42bb      	cmp	r3, r7
 8010e68:	460e      	mov	r6, r1
 8010e6a:	d9f4      	bls.n	8010e56 <_printf_i+0x11a>
 8010e6c:	2b08      	cmp	r3, #8
 8010e6e:	d10b      	bne.n	8010e88 <_printf_i+0x14c>
 8010e70:	6823      	ldr	r3, [r4, #0]
 8010e72:	07de      	lsls	r6, r3, #31
 8010e74:	d508      	bpl.n	8010e88 <_printf_i+0x14c>
 8010e76:	6923      	ldr	r3, [r4, #16]
 8010e78:	6861      	ldr	r1, [r4, #4]
 8010e7a:	4299      	cmp	r1, r3
 8010e7c:	bfde      	ittt	le
 8010e7e:	2330      	movle	r3, #48	; 0x30
 8010e80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010e84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010e88:	1b52      	subs	r2, r2, r5
 8010e8a:	6122      	str	r2, [r4, #16]
 8010e8c:	f8cd a000 	str.w	sl, [sp]
 8010e90:	464b      	mov	r3, r9
 8010e92:	aa03      	add	r2, sp, #12
 8010e94:	4621      	mov	r1, r4
 8010e96:	4640      	mov	r0, r8
 8010e98:	f7ff fee2 	bl	8010c60 <_printf_common>
 8010e9c:	3001      	adds	r0, #1
 8010e9e:	d14c      	bne.n	8010f3a <_printf_i+0x1fe>
 8010ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ea4:	b004      	add	sp, #16
 8010ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eaa:	4835      	ldr	r0, [pc, #212]	; (8010f80 <_printf_i+0x244>)
 8010eac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010eb0:	6829      	ldr	r1, [r5, #0]
 8010eb2:	6823      	ldr	r3, [r4, #0]
 8010eb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8010eb8:	6029      	str	r1, [r5, #0]
 8010eba:	061d      	lsls	r5, r3, #24
 8010ebc:	d514      	bpl.n	8010ee8 <_printf_i+0x1ac>
 8010ebe:	07df      	lsls	r7, r3, #31
 8010ec0:	bf44      	itt	mi
 8010ec2:	f043 0320 	orrmi.w	r3, r3, #32
 8010ec6:	6023      	strmi	r3, [r4, #0]
 8010ec8:	b91e      	cbnz	r6, 8010ed2 <_printf_i+0x196>
 8010eca:	6823      	ldr	r3, [r4, #0]
 8010ecc:	f023 0320 	bic.w	r3, r3, #32
 8010ed0:	6023      	str	r3, [r4, #0]
 8010ed2:	2310      	movs	r3, #16
 8010ed4:	e7b0      	b.n	8010e38 <_printf_i+0xfc>
 8010ed6:	6823      	ldr	r3, [r4, #0]
 8010ed8:	f043 0320 	orr.w	r3, r3, #32
 8010edc:	6023      	str	r3, [r4, #0]
 8010ede:	2378      	movs	r3, #120	; 0x78
 8010ee0:	4828      	ldr	r0, [pc, #160]	; (8010f84 <_printf_i+0x248>)
 8010ee2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ee6:	e7e3      	b.n	8010eb0 <_printf_i+0x174>
 8010ee8:	0659      	lsls	r1, r3, #25
 8010eea:	bf48      	it	mi
 8010eec:	b2b6      	uxthmi	r6, r6
 8010eee:	e7e6      	b.n	8010ebe <_printf_i+0x182>
 8010ef0:	4615      	mov	r5, r2
 8010ef2:	e7bb      	b.n	8010e6c <_printf_i+0x130>
 8010ef4:	682b      	ldr	r3, [r5, #0]
 8010ef6:	6826      	ldr	r6, [r4, #0]
 8010ef8:	6961      	ldr	r1, [r4, #20]
 8010efa:	1d18      	adds	r0, r3, #4
 8010efc:	6028      	str	r0, [r5, #0]
 8010efe:	0635      	lsls	r5, r6, #24
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	d501      	bpl.n	8010f08 <_printf_i+0x1cc>
 8010f04:	6019      	str	r1, [r3, #0]
 8010f06:	e002      	b.n	8010f0e <_printf_i+0x1d2>
 8010f08:	0670      	lsls	r0, r6, #25
 8010f0a:	d5fb      	bpl.n	8010f04 <_printf_i+0x1c8>
 8010f0c:	8019      	strh	r1, [r3, #0]
 8010f0e:	2300      	movs	r3, #0
 8010f10:	6123      	str	r3, [r4, #16]
 8010f12:	4615      	mov	r5, r2
 8010f14:	e7ba      	b.n	8010e8c <_printf_i+0x150>
 8010f16:	682b      	ldr	r3, [r5, #0]
 8010f18:	1d1a      	adds	r2, r3, #4
 8010f1a:	602a      	str	r2, [r5, #0]
 8010f1c:	681d      	ldr	r5, [r3, #0]
 8010f1e:	6862      	ldr	r2, [r4, #4]
 8010f20:	2100      	movs	r1, #0
 8010f22:	4628      	mov	r0, r5
 8010f24:	f7ef f974 	bl	8000210 <memchr>
 8010f28:	b108      	cbz	r0, 8010f2e <_printf_i+0x1f2>
 8010f2a:	1b40      	subs	r0, r0, r5
 8010f2c:	6060      	str	r0, [r4, #4]
 8010f2e:	6863      	ldr	r3, [r4, #4]
 8010f30:	6123      	str	r3, [r4, #16]
 8010f32:	2300      	movs	r3, #0
 8010f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f38:	e7a8      	b.n	8010e8c <_printf_i+0x150>
 8010f3a:	6923      	ldr	r3, [r4, #16]
 8010f3c:	462a      	mov	r2, r5
 8010f3e:	4649      	mov	r1, r9
 8010f40:	4640      	mov	r0, r8
 8010f42:	47d0      	blx	sl
 8010f44:	3001      	adds	r0, #1
 8010f46:	d0ab      	beq.n	8010ea0 <_printf_i+0x164>
 8010f48:	6823      	ldr	r3, [r4, #0]
 8010f4a:	079b      	lsls	r3, r3, #30
 8010f4c:	d413      	bmi.n	8010f76 <_printf_i+0x23a>
 8010f4e:	68e0      	ldr	r0, [r4, #12]
 8010f50:	9b03      	ldr	r3, [sp, #12]
 8010f52:	4298      	cmp	r0, r3
 8010f54:	bfb8      	it	lt
 8010f56:	4618      	movlt	r0, r3
 8010f58:	e7a4      	b.n	8010ea4 <_printf_i+0x168>
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	4632      	mov	r2, r6
 8010f5e:	4649      	mov	r1, r9
 8010f60:	4640      	mov	r0, r8
 8010f62:	47d0      	blx	sl
 8010f64:	3001      	adds	r0, #1
 8010f66:	d09b      	beq.n	8010ea0 <_printf_i+0x164>
 8010f68:	3501      	adds	r5, #1
 8010f6a:	68e3      	ldr	r3, [r4, #12]
 8010f6c:	9903      	ldr	r1, [sp, #12]
 8010f6e:	1a5b      	subs	r3, r3, r1
 8010f70:	42ab      	cmp	r3, r5
 8010f72:	dcf2      	bgt.n	8010f5a <_printf_i+0x21e>
 8010f74:	e7eb      	b.n	8010f4e <_printf_i+0x212>
 8010f76:	2500      	movs	r5, #0
 8010f78:	f104 0619 	add.w	r6, r4, #25
 8010f7c:	e7f5      	b.n	8010f6a <_printf_i+0x22e>
 8010f7e:	bf00      	nop
 8010f80:	0801311e 	.word	0x0801311e
 8010f84:	0801312f 	.word	0x0801312f

08010f88 <iprintf>:
 8010f88:	b40f      	push	{r0, r1, r2, r3}
 8010f8a:	4b0a      	ldr	r3, [pc, #40]	; (8010fb4 <iprintf+0x2c>)
 8010f8c:	b513      	push	{r0, r1, r4, lr}
 8010f8e:	681c      	ldr	r4, [r3, #0]
 8010f90:	b124      	cbz	r4, 8010f9c <iprintf+0x14>
 8010f92:	69a3      	ldr	r3, [r4, #24]
 8010f94:	b913      	cbnz	r3, 8010f9c <iprintf+0x14>
 8010f96:	4620      	mov	r0, r4
 8010f98:	f000 ff10 	bl	8011dbc <__sinit>
 8010f9c:	ab05      	add	r3, sp, #20
 8010f9e:	9a04      	ldr	r2, [sp, #16]
 8010fa0:	68a1      	ldr	r1, [r4, #8]
 8010fa2:	9301      	str	r3, [sp, #4]
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	f001 fba3 	bl	80126f0 <_vfiprintf_r>
 8010faa:	b002      	add	sp, #8
 8010fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fb0:	b004      	add	sp, #16
 8010fb2:	4770      	bx	lr
 8010fb4:	20000184 	.word	0x20000184

08010fb8 <_sbrk_r>:
 8010fb8:	b538      	push	{r3, r4, r5, lr}
 8010fba:	4d06      	ldr	r5, [pc, #24]	; (8010fd4 <_sbrk_r+0x1c>)
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	4608      	mov	r0, r1
 8010fc2:	602b      	str	r3, [r5, #0]
 8010fc4:	f001 ffea 	bl	8012f9c <_sbrk>
 8010fc8:	1c43      	adds	r3, r0, #1
 8010fca:	d102      	bne.n	8010fd2 <_sbrk_r+0x1a>
 8010fcc:	682b      	ldr	r3, [r5, #0]
 8010fce:	b103      	cbz	r3, 8010fd2 <_sbrk_r+0x1a>
 8010fd0:	6023      	str	r3, [r4, #0]
 8010fd2:	bd38      	pop	{r3, r4, r5, pc}
 8010fd4:	200028e0 	.word	0x200028e0

08010fd8 <__assert_func>:
 8010fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fda:	4614      	mov	r4, r2
 8010fdc:	461a      	mov	r2, r3
 8010fde:	4b09      	ldr	r3, [pc, #36]	; (8011004 <__assert_func+0x2c>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	4605      	mov	r5, r0
 8010fe4:	68d8      	ldr	r0, [r3, #12]
 8010fe6:	b14c      	cbz	r4, 8010ffc <__assert_func+0x24>
 8010fe8:	4b07      	ldr	r3, [pc, #28]	; (8011008 <__assert_func+0x30>)
 8010fea:	9100      	str	r1, [sp, #0]
 8010fec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ff0:	4906      	ldr	r1, [pc, #24]	; (801100c <__assert_func+0x34>)
 8010ff2:	462b      	mov	r3, r5
 8010ff4:	f000 ff60 	bl	8011eb8 <fiprintf>
 8010ff8:	f001 fdce 	bl	8012b98 <abort>
 8010ffc:	4b04      	ldr	r3, [pc, #16]	; (8011010 <__assert_func+0x38>)
 8010ffe:	461c      	mov	r4, r3
 8011000:	e7f3      	b.n	8010fea <__assert_func+0x12>
 8011002:	bf00      	nop
 8011004:	20000184 	.word	0x20000184
 8011008:	08013140 	.word	0x08013140
 801100c:	0801314d 	.word	0x0801314d
 8011010:	0801317b 	.word	0x0801317b

08011014 <quorem>:
 8011014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011018:	6903      	ldr	r3, [r0, #16]
 801101a:	690c      	ldr	r4, [r1, #16]
 801101c:	42a3      	cmp	r3, r4
 801101e:	4607      	mov	r7, r0
 8011020:	f2c0 8081 	blt.w	8011126 <quorem+0x112>
 8011024:	3c01      	subs	r4, #1
 8011026:	f101 0814 	add.w	r8, r1, #20
 801102a:	f100 0514 	add.w	r5, r0, #20
 801102e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011032:	9301      	str	r3, [sp, #4]
 8011034:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011038:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801103c:	3301      	adds	r3, #1
 801103e:	429a      	cmp	r2, r3
 8011040:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011044:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011048:	fbb2 f6f3 	udiv	r6, r2, r3
 801104c:	d331      	bcc.n	80110b2 <quorem+0x9e>
 801104e:	f04f 0e00 	mov.w	lr, #0
 8011052:	4640      	mov	r0, r8
 8011054:	46ac      	mov	ip, r5
 8011056:	46f2      	mov	sl, lr
 8011058:	f850 2b04 	ldr.w	r2, [r0], #4
 801105c:	b293      	uxth	r3, r2
 801105e:	fb06 e303 	mla	r3, r6, r3, lr
 8011062:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011066:	b29b      	uxth	r3, r3
 8011068:	ebaa 0303 	sub.w	r3, sl, r3
 801106c:	f8dc a000 	ldr.w	sl, [ip]
 8011070:	0c12      	lsrs	r2, r2, #16
 8011072:	fa13 f38a 	uxtah	r3, r3, sl
 8011076:	fb06 e202 	mla	r2, r6, r2, lr
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	9b00      	ldr	r3, [sp, #0]
 801107e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011082:	b292      	uxth	r2, r2
 8011084:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011088:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801108c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011090:	4581      	cmp	r9, r0
 8011092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011096:	f84c 3b04 	str.w	r3, [ip], #4
 801109a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801109e:	d2db      	bcs.n	8011058 <quorem+0x44>
 80110a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80110a4:	b92b      	cbnz	r3, 80110b2 <quorem+0x9e>
 80110a6:	9b01      	ldr	r3, [sp, #4]
 80110a8:	3b04      	subs	r3, #4
 80110aa:	429d      	cmp	r5, r3
 80110ac:	461a      	mov	r2, r3
 80110ae:	d32e      	bcc.n	801110e <quorem+0xfa>
 80110b0:	613c      	str	r4, [r7, #16]
 80110b2:	4638      	mov	r0, r7
 80110b4:	f001 f9da 	bl	801246c <__mcmp>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	db24      	blt.n	8011106 <quorem+0xf2>
 80110bc:	3601      	adds	r6, #1
 80110be:	4628      	mov	r0, r5
 80110c0:	f04f 0c00 	mov.w	ip, #0
 80110c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80110c8:	f8d0 e000 	ldr.w	lr, [r0]
 80110cc:	b293      	uxth	r3, r2
 80110ce:	ebac 0303 	sub.w	r3, ip, r3
 80110d2:	0c12      	lsrs	r2, r2, #16
 80110d4:	fa13 f38e 	uxtah	r3, r3, lr
 80110d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80110dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110e6:	45c1      	cmp	r9, r8
 80110e8:	f840 3b04 	str.w	r3, [r0], #4
 80110ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80110f0:	d2e8      	bcs.n	80110c4 <quorem+0xb0>
 80110f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80110f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80110fa:	b922      	cbnz	r2, 8011106 <quorem+0xf2>
 80110fc:	3b04      	subs	r3, #4
 80110fe:	429d      	cmp	r5, r3
 8011100:	461a      	mov	r2, r3
 8011102:	d30a      	bcc.n	801111a <quorem+0x106>
 8011104:	613c      	str	r4, [r7, #16]
 8011106:	4630      	mov	r0, r6
 8011108:	b003      	add	sp, #12
 801110a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801110e:	6812      	ldr	r2, [r2, #0]
 8011110:	3b04      	subs	r3, #4
 8011112:	2a00      	cmp	r2, #0
 8011114:	d1cc      	bne.n	80110b0 <quorem+0x9c>
 8011116:	3c01      	subs	r4, #1
 8011118:	e7c7      	b.n	80110aa <quorem+0x96>
 801111a:	6812      	ldr	r2, [r2, #0]
 801111c:	3b04      	subs	r3, #4
 801111e:	2a00      	cmp	r2, #0
 8011120:	d1f0      	bne.n	8011104 <quorem+0xf0>
 8011122:	3c01      	subs	r4, #1
 8011124:	e7eb      	b.n	80110fe <quorem+0xea>
 8011126:	2000      	movs	r0, #0
 8011128:	e7ee      	b.n	8011108 <quorem+0xf4>
 801112a:	0000      	movs	r0, r0
 801112c:	0000      	movs	r0, r0
	...

08011130 <_dtoa_r>:
 8011130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011134:	ed2d 8b04 	vpush	{d8-d9}
 8011138:	ec57 6b10 	vmov	r6, r7, d0
 801113c:	b093      	sub	sp, #76	; 0x4c
 801113e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011140:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011144:	9106      	str	r1, [sp, #24]
 8011146:	ee10 aa10 	vmov	sl, s0
 801114a:	4604      	mov	r4, r0
 801114c:	9209      	str	r2, [sp, #36]	; 0x24
 801114e:	930c      	str	r3, [sp, #48]	; 0x30
 8011150:	46bb      	mov	fp, r7
 8011152:	b975      	cbnz	r5, 8011172 <_dtoa_r+0x42>
 8011154:	2010      	movs	r0, #16
 8011156:	f7ff f9af 	bl	80104b8 <malloc>
 801115a:	4602      	mov	r2, r0
 801115c:	6260      	str	r0, [r4, #36]	; 0x24
 801115e:	b920      	cbnz	r0, 801116a <_dtoa_r+0x3a>
 8011160:	4ba7      	ldr	r3, [pc, #668]	; (8011400 <_dtoa_r+0x2d0>)
 8011162:	21ea      	movs	r1, #234	; 0xea
 8011164:	48a7      	ldr	r0, [pc, #668]	; (8011404 <_dtoa_r+0x2d4>)
 8011166:	f7ff ff37 	bl	8010fd8 <__assert_func>
 801116a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801116e:	6005      	str	r5, [r0, #0]
 8011170:	60c5      	str	r5, [r0, #12]
 8011172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011174:	6819      	ldr	r1, [r3, #0]
 8011176:	b151      	cbz	r1, 801118e <_dtoa_r+0x5e>
 8011178:	685a      	ldr	r2, [r3, #4]
 801117a:	604a      	str	r2, [r1, #4]
 801117c:	2301      	movs	r3, #1
 801117e:	4093      	lsls	r3, r2
 8011180:	608b      	str	r3, [r1, #8]
 8011182:	4620      	mov	r0, r4
 8011184:	f000 ff30 	bl	8011fe8 <_Bfree>
 8011188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801118a:	2200      	movs	r2, #0
 801118c:	601a      	str	r2, [r3, #0]
 801118e:	1e3b      	subs	r3, r7, #0
 8011190:	bfaa      	itet	ge
 8011192:	2300      	movge	r3, #0
 8011194:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011198:	f8c8 3000 	strge.w	r3, [r8]
 801119c:	4b9a      	ldr	r3, [pc, #616]	; (8011408 <_dtoa_r+0x2d8>)
 801119e:	bfbc      	itt	lt
 80111a0:	2201      	movlt	r2, #1
 80111a2:	f8c8 2000 	strlt.w	r2, [r8]
 80111a6:	ea33 030b 	bics.w	r3, r3, fp
 80111aa:	d11b      	bne.n	80111e4 <_dtoa_r+0xb4>
 80111ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80111ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80111b2:	6013      	str	r3, [r2, #0]
 80111b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111b8:	4333      	orrs	r3, r6
 80111ba:	f000 8592 	beq.w	8011ce2 <_dtoa_r+0xbb2>
 80111be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111c0:	b963      	cbnz	r3, 80111dc <_dtoa_r+0xac>
 80111c2:	4b92      	ldr	r3, [pc, #584]	; (801140c <_dtoa_r+0x2dc>)
 80111c4:	e022      	b.n	801120c <_dtoa_r+0xdc>
 80111c6:	4b92      	ldr	r3, [pc, #584]	; (8011410 <_dtoa_r+0x2e0>)
 80111c8:	9301      	str	r3, [sp, #4]
 80111ca:	3308      	adds	r3, #8
 80111cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80111ce:	6013      	str	r3, [r2, #0]
 80111d0:	9801      	ldr	r0, [sp, #4]
 80111d2:	b013      	add	sp, #76	; 0x4c
 80111d4:	ecbd 8b04 	vpop	{d8-d9}
 80111d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111dc:	4b8b      	ldr	r3, [pc, #556]	; (801140c <_dtoa_r+0x2dc>)
 80111de:	9301      	str	r3, [sp, #4]
 80111e0:	3303      	adds	r3, #3
 80111e2:	e7f3      	b.n	80111cc <_dtoa_r+0x9c>
 80111e4:	2200      	movs	r2, #0
 80111e6:	2300      	movs	r3, #0
 80111e8:	4650      	mov	r0, sl
 80111ea:	4659      	mov	r1, fp
 80111ec:	f7ef fc84 	bl	8000af8 <__aeabi_dcmpeq>
 80111f0:	ec4b ab19 	vmov	d9, sl, fp
 80111f4:	4680      	mov	r8, r0
 80111f6:	b158      	cbz	r0, 8011210 <_dtoa_r+0xe0>
 80111f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80111fa:	2301      	movs	r3, #1
 80111fc:	6013      	str	r3, [r2, #0]
 80111fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011200:	2b00      	cmp	r3, #0
 8011202:	f000 856b 	beq.w	8011cdc <_dtoa_r+0xbac>
 8011206:	4883      	ldr	r0, [pc, #524]	; (8011414 <_dtoa_r+0x2e4>)
 8011208:	6018      	str	r0, [r3, #0]
 801120a:	1e43      	subs	r3, r0, #1
 801120c:	9301      	str	r3, [sp, #4]
 801120e:	e7df      	b.n	80111d0 <_dtoa_r+0xa0>
 8011210:	ec4b ab10 	vmov	d0, sl, fp
 8011214:	aa10      	add	r2, sp, #64	; 0x40
 8011216:	a911      	add	r1, sp, #68	; 0x44
 8011218:	4620      	mov	r0, r4
 801121a:	f001 f9cd 	bl	80125b8 <__d2b>
 801121e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011222:	ee08 0a10 	vmov	s16, r0
 8011226:	2d00      	cmp	r5, #0
 8011228:	f000 8084 	beq.w	8011334 <_dtoa_r+0x204>
 801122c:	ee19 3a90 	vmov	r3, s19
 8011230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011234:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011238:	4656      	mov	r6, sl
 801123a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801123e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011242:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011246:	4b74      	ldr	r3, [pc, #464]	; (8011418 <_dtoa_r+0x2e8>)
 8011248:	2200      	movs	r2, #0
 801124a:	4630      	mov	r0, r6
 801124c:	4639      	mov	r1, r7
 801124e:	f7ef f833 	bl	80002b8 <__aeabi_dsub>
 8011252:	a365      	add	r3, pc, #404	; (adr r3, 80113e8 <_dtoa_r+0x2b8>)
 8011254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011258:	f7ef f9e6 	bl	8000628 <__aeabi_dmul>
 801125c:	a364      	add	r3, pc, #400	; (adr r3, 80113f0 <_dtoa_r+0x2c0>)
 801125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011262:	f7ef f82b 	bl	80002bc <__adddf3>
 8011266:	4606      	mov	r6, r0
 8011268:	4628      	mov	r0, r5
 801126a:	460f      	mov	r7, r1
 801126c:	f7ef f972 	bl	8000554 <__aeabi_i2d>
 8011270:	a361      	add	r3, pc, #388	; (adr r3, 80113f8 <_dtoa_r+0x2c8>)
 8011272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011276:	f7ef f9d7 	bl	8000628 <__aeabi_dmul>
 801127a:	4602      	mov	r2, r0
 801127c:	460b      	mov	r3, r1
 801127e:	4630      	mov	r0, r6
 8011280:	4639      	mov	r1, r7
 8011282:	f7ef f81b 	bl	80002bc <__adddf3>
 8011286:	4606      	mov	r6, r0
 8011288:	460f      	mov	r7, r1
 801128a:	f7ef fc7d 	bl	8000b88 <__aeabi_d2iz>
 801128e:	2200      	movs	r2, #0
 8011290:	9000      	str	r0, [sp, #0]
 8011292:	2300      	movs	r3, #0
 8011294:	4630      	mov	r0, r6
 8011296:	4639      	mov	r1, r7
 8011298:	f7ef fc38 	bl	8000b0c <__aeabi_dcmplt>
 801129c:	b150      	cbz	r0, 80112b4 <_dtoa_r+0x184>
 801129e:	9800      	ldr	r0, [sp, #0]
 80112a0:	f7ef f958 	bl	8000554 <__aeabi_i2d>
 80112a4:	4632      	mov	r2, r6
 80112a6:	463b      	mov	r3, r7
 80112a8:	f7ef fc26 	bl	8000af8 <__aeabi_dcmpeq>
 80112ac:	b910      	cbnz	r0, 80112b4 <_dtoa_r+0x184>
 80112ae:	9b00      	ldr	r3, [sp, #0]
 80112b0:	3b01      	subs	r3, #1
 80112b2:	9300      	str	r3, [sp, #0]
 80112b4:	9b00      	ldr	r3, [sp, #0]
 80112b6:	2b16      	cmp	r3, #22
 80112b8:	d85a      	bhi.n	8011370 <_dtoa_r+0x240>
 80112ba:	9a00      	ldr	r2, [sp, #0]
 80112bc:	4b57      	ldr	r3, [pc, #348]	; (801141c <_dtoa_r+0x2ec>)
 80112be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80112c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c6:	ec51 0b19 	vmov	r0, r1, d9
 80112ca:	f7ef fc1f 	bl	8000b0c <__aeabi_dcmplt>
 80112ce:	2800      	cmp	r0, #0
 80112d0:	d050      	beq.n	8011374 <_dtoa_r+0x244>
 80112d2:	9b00      	ldr	r3, [sp, #0]
 80112d4:	3b01      	subs	r3, #1
 80112d6:	9300      	str	r3, [sp, #0]
 80112d8:	2300      	movs	r3, #0
 80112da:	930b      	str	r3, [sp, #44]	; 0x2c
 80112dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80112de:	1b5d      	subs	r5, r3, r5
 80112e0:	1e6b      	subs	r3, r5, #1
 80112e2:	9305      	str	r3, [sp, #20]
 80112e4:	bf45      	ittet	mi
 80112e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80112ea:	9304      	strmi	r3, [sp, #16]
 80112ec:	2300      	movpl	r3, #0
 80112ee:	2300      	movmi	r3, #0
 80112f0:	bf4c      	ite	mi
 80112f2:	9305      	strmi	r3, [sp, #20]
 80112f4:	9304      	strpl	r3, [sp, #16]
 80112f6:	9b00      	ldr	r3, [sp, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	db3d      	blt.n	8011378 <_dtoa_r+0x248>
 80112fc:	9b05      	ldr	r3, [sp, #20]
 80112fe:	9a00      	ldr	r2, [sp, #0]
 8011300:	920a      	str	r2, [sp, #40]	; 0x28
 8011302:	4413      	add	r3, r2
 8011304:	9305      	str	r3, [sp, #20]
 8011306:	2300      	movs	r3, #0
 8011308:	9307      	str	r3, [sp, #28]
 801130a:	9b06      	ldr	r3, [sp, #24]
 801130c:	2b09      	cmp	r3, #9
 801130e:	f200 8089 	bhi.w	8011424 <_dtoa_r+0x2f4>
 8011312:	2b05      	cmp	r3, #5
 8011314:	bfc4      	itt	gt
 8011316:	3b04      	subgt	r3, #4
 8011318:	9306      	strgt	r3, [sp, #24]
 801131a:	9b06      	ldr	r3, [sp, #24]
 801131c:	f1a3 0302 	sub.w	r3, r3, #2
 8011320:	bfcc      	ite	gt
 8011322:	2500      	movgt	r5, #0
 8011324:	2501      	movle	r5, #1
 8011326:	2b03      	cmp	r3, #3
 8011328:	f200 8087 	bhi.w	801143a <_dtoa_r+0x30a>
 801132c:	e8df f003 	tbb	[pc, r3]
 8011330:	59383a2d 	.word	0x59383a2d
 8011334:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011338:	441d      	add	r5, r3
 801133a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801133e:	2b20      	cmp	r3, #32
 8011340:	bfc1      	itttt	gt
 8011342:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011346:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801134a:	fa0b f303 	lslgt.w	r3, fp, r3
 801134e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011352:	bfda      	itte	le
 8011354:	f1c3 0320 	rsble	r3, r3, #32
 8011358:	fa06 f003 	lslle.w	r0, r6, r3
 801135c:	4318      	orrgt	r0, r3
 801135e:	f7ef f8e9 	bl	8000534 <__aeabi_ui2d>
 8011362:	2301      	movs	r3, #1
 8011364:	4606      	mov	r6, r0
 8011366:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801136a:	3d01      	subs	r5, #1
 801136c:	930e      	str	r3, [sp, #56]	; 0x38
 801136e:	e76a      	b.n	8011246 <_dtoa_r+0x116>
 8011370:	2301      	movs	r3, #1
 8011372:	e7b2      	b.n	80112da <_dtoa_r+0x1aa>
 8011374:	900b      	str	r0, [sp, #44]	; 0x2c
 8011376:	e7b1      	b.n	80112dc <_dtoa_r+0x1ac>
 8011378:	9b04      	ldr	r3, [sp, #16]
 801137a:	9a00      	ldr	r2, [sp, #0]
 801137c:	1a9b      	subs	r3, r3, r2
 801137e:	9304      	str	r3, [sp, #16]
 8011380:	4253      	negs	r3, r2
 8011382:	9307      	str	r3, [sp, #28]
 8011384:	2300      	movs	r3, #0
 8011386:	930a      	str	r3, [sp, #40]	; 0x28
 8011388:	e7bf      	b.n	801130a <_dtoa_r+0x1da>
 801138a:	2300      	movs	r3, #0
 801138c:	9308      	str	r3, [sp, #32]
 801138e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011390:	2b00      	cmp	r3, #0
 8011392:	dc55      	bgt.n	8011440 <_dtoa_r+0x310>
 8011394:	2301      	movs	r3, #1
 8011396:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801139a:	461a      	mov	r2, r3
 801139c:	9209      	str	r2, [sp, #36]	; 0x24
 801139e:	e00c      	b.n	80113ba <_dtoa_r+0x28a>
 80113a0:	2301      	movs	r3, #1
 80113a2:	e7f3      	b.n	801138c <_dtoa_r+0x25c>
 80113a4:	2300      	movs	r3, #0
 80113a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113a8:	9308      	str	r3, [sp, #32]
 80113aa:	9b00      	ldr	r3, [sp, #0]
 80113ac:	4413      	add	r3, r2
 80113ae:	9302      	str	r3, [sp, #8]
 80113b0:	3301      	adds	r3, #1
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	9303      	str	r3, [sp, #12]
 80113b6:	bfb8      	it	lt
 80113b8:	2301      	movlt	r3, #1
 80113ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80113bc:	2200      	movs	r2, #0
 80113be:	6042      	str	r2, [r0, #4]
 80113c0:	2204      	movs	r2, #4
 80113c2:	f102 0614 	add.w	r6, r2, #20
 80113c6:	429e      	cmp	r6, r3
 80113c8:	6841      	ldr	r1, [r0, #4]
 80113ca:	d93d      	bls.n	8011448 <_dtoa_r+0x318>
 80113cc:	4620      	mov	r0, r4
 80113ce:	f000 fdcb 	bl	8011f68 <_Balloc>
 80113d2:	9001      	str	r0, [sp, #4]
 80113d4:	2800      	cmp	r0, #0
 80113d6:	d13b      	bne.n	8011450 <_dtoa_r+0x320>
 80113d8:	4b11      	ldr	r3, [pc, #68]	; (8011420 <_dtoa_r+0x2f0>)
 80113da:	4602      	mov	r2, r0
 80113dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80113e0:	e6c0      	b.n	8011164 <_dtoa_r+0x34>
 80113e2:	2301      	movs	r3, #1
 80113e4:	e7df      	b.n	80113a6 <_dtoa_r+0x276>
 80113e6:	bf00      	nop
 80113e8:	636f4361 	.word	0x636f4361
 80113ec:	3fd287a7 	.word	0x3fd287a7
 80113f0:	8b60c8b3 	.word	0x8b60c8b3
 80113f4:	3fc68a28 	.word	0x3fc68a28
 80113f8:	509f79fb 	.word	0x509f79fb
 80113fc:	3fd34413 	.word	0x3fd34413
 8011400:	0801328a 	.word	0x0801328a
 8011404:	080132a1 	.word	0x080132a1
 8011408:	7ff00000 	.word	0x7ff00000
 801140c:	08013286 	.word	0x08013286
 8011410:	0801327d 	.word	0x0801327d
 8011414:	0801311d 	.word	0x0801311d
 8011418:	3ff80000 	.word	0x3ff80000
 801141c:	08013400 	.word	0x08013400
 8011420:	080132fc 	.word	0x080132fc
 8011424:	2501      	movs	r5, #1
 8011426:	2300      	movs	r3, #0
 8011428:	9306      	str	r3, [sp, #24]
 801142a:	9508      	str	r5, [sp, #32]
 801142c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011430:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011434:	2200      	movs	r2, #0
 8011436:	2312      	movs	r3, #18
 8011438:	e7b0      	b.n	801139c <_dtoa_r+0x26c>
 801143a:	2301      	movs	r3, #1
 801143c:	9308      	str	r3, [sp, #32]
 801143e:	e7f5      	b.n	801142c <_dtoa_r+0x2fc>
 8011440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011442:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011446:	e7b8      	b.n	80113ba <_dtoa_r+0x28a>
 8011448:	3101      	adds	r1, #1
 801144a:	6041      	str	r1, [r0, #4]
 801144c:	0052      	lsls	r2, r2, #1
 801144e:	e7b8      	b.n	80113c2 <_dtoa_r+0x292>
 8011450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011452:	9a01      	ldr	r2, [sp, #4]
 8011454:	601a      	str	r2, [r3, #0]
 8011456:	9b03      	ldr	r3, [sp, #12]
 8011458:	2b0e      	cmp	r3, #14
 801145a:	f200 809d 	bhi.w	8011598 <_dtoa_r+0x468>
 801145e:	2d00      	cmp	r5, #0
 8011460:	f000 809a 	beq.w	8011598 <_dtoa_r+0x468>
 8011464:	9b00      	ldr	r3, [sp, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	dd32      	ble.n	80114d0 <_dtoa_r+0x3a0>
 801146a:	4ab7      	ldr	r2, [pc, #732]	; (8011748 <_dtoa_r+0x618>)
 801146c:	f003 030f 	and.w	r3, r3, #15
 8011470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011474:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011478:	9b00      	ldr	r3, [sp, #0]
 801147a:	05d8      	lsls	r0, r3, #23
 801147c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011480:	d516      	bpl.n	80114b0 <_dtoa_r+0x380>
 8011482:	4bb2      	ldr	r3, [pc, #712]	; (801174c <_dtoa_r+0x61c>)
 8011484:	ec51 0b19 	vmov	r0, r1, d9
 8011488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801148c:	f7ef f9f6 	bl	800087c <__aeabi_ddiv>
 8011490:	f007 070f 	and.w	r7, r7, #15
 8011494:	4682      	mov	sl, r0
 8011496:	468b      	mov	fp, r1
 8011498:	2503      	movs	r5, #3
 801149a:	4eac      	ldr	r6, [pc, #688]	; (801174c <_dtoa_r+0x61c>)
 801149c:	b957      	cbnz	r7, 80114b4 <_dtoa_r+0x384>
 801149e:	4642      	mov	r2, r8
 80114a0:	464b      	mov	r3, r9
 80114a2:	4650      	mov	r0, sl
 80114a4:	4659      	mov	r1, fp
 80114a6:	f7ef f9e9 	bl	800087c <__aeabi_ddiv>
 80114aa:	4682      	mov	sl, r0
 80114ac:	468b      	mov	fp, r1
 80114ae:	e028      	b.n	8011502 <_dtoa_r+0x3d2>
 80114b0:	2502      	movs	r5, #2
 80114b2:	e7f2      	b.n	801149a <_dtoa_r+0x36a>
 80114b4:	07f9      	lsls	r1, r7, #31
 80114b6:	d508      	bpl.n	80114ca <_dtoa_r+0x39a>
 80114b8:	4640      	mov	r0, r8
 80114ba:	4649      	mov	r1, r9
 80114bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80114c0:	f7ef f8b2 	bl	8000628 <__aeabi_dmul>
 80114c4:	3501      	adds	r5, #1
 80114c6:	4680      	mov	r8, r0
 80114c8:	4689      	mov	r9, r1
 80114ca:	107f      	asrs	r7, r7, #1
 80114cc:	3608      	adds	r6, #8
 80114ce:	e7e5      	b.n	801149c <_dtoa_r+0x36c>
 80114d0:	f000 809b 	beq.w	801160a <_dtoa_r+0x4da>
 80114d4:	9b00      	ldr	r3, [sp, #0]
 80114d6:	4f9d      	ldr	r7, [pc, #628]	; (801174c <_dtoa_r+0x61c>)
 80114d8:	425e      	negs	r6, r3
 80114da:	4b9b      	ldr	r3, [pc, #620]	; (8011748 <_dtoa_r+0x618>)
 80114dc:	f006 020f 	and.w	r2, r6, #15
 80114e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80114e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e8:	ec51 0b19 	vmov	r0, r1, d9
 80114ec:	f7ef f89c 	bl	8000628 <__aeabi_dmul>
 80114f0:	1136      	asrs	r6, r6, #4
 80114f2:	4682      	mov	sl, r0
 80114f4:	468b      	mov	fp, r1
 80114f6:	2300      	movs	r3, #0
 80114f8:	2502      	movs	r5, #2
 80114fa:	2e00      	cmp	r6, #0
 80114fc:	d17a      	bne.n	80115f4 <_dtoa_r+0x4c4>
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d1d3      	bne.n	80114aa <_dtoa_r+0x37a>
 8011502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011504:	2b00      	cmp	r3, #0
 8011506:	f000 8082 	beq.w	801160e <_dtoa_r+0x4de>
 801150a:	4b91      	ldr	r3, [pc, #580]	; (8011750 <_dtoa_r+0x620>)
 801150c:	2200      	movs	r2, #0
 801150e:	4650      	mov	r0, sl
 8011510:	4659      	mov	r1, fp
 8011512:	f7ef fafb 	bl	8000b0c <__aeabi_dcmplt>
 8011516:	2800      	cmp	r0, #0
 8011518:	d079      	beq.n	801160e <_dtoa_r+0x4de>
 801151a:	9b03      	ldr	r3, [sp, #12]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d076      	beq.n	801160e <_dtoa_r+0x4de>
 8011520:	9b02      	ldr	r3, [sp, #8]
 8011522:	2b00      	cmp	r3, #0
 8011524:	dd36      	ble.n	8011594 <_dtoa_r+0x464>
 8011526:	9b00      	ldr	r3, [sp, #0]
 8011528:	4650      	mov	r0, sl
 801152a:	4659      	mov	r1, fp
 801152c:	1e5f      	subs	r7, r3, #1
 801152e:	2200      	movs	r2, #0
 8011530:	4b88      	ldr	r3, [pc, #544]	; (8011754 <_dtoa_r+0x624>)
 8011532:	f7ef f879 	bl	8000628 <__aeabi_dmul>
 8011536:	9e02      	ldr	r6, [sp, #8]
 8011538:	4682      	mov	sl, r0
 801153a:	468b      	mov	fp, r1
 801153c:	3501      	adds	r5, #1
 801153e:	4628      	mov	r0, r5
 8011540:	f7ef f808 	bl	8000554 <__aeabi_i2d>
 8011544:	4652      	mov	r2, sl
 8011546:	465b      	mov	r3, fp
 8011548:	f7ef f86e 	bl	8000628 <__aeabi_dmul>
 801154c:	4b82      	ldr	r3, [pc, #520]	; (8011758 <_dtoa_r+0x628>)
 801154e:	2200      	movs	r2, #0
 8011550:	f7ee feb4 	bl	80002bc <__adddf3>
 8011554:	46d0      	mov	r8, sl
 8011556:	46d9      	mov	r9, fp
 8011558:	4682      	mov	sl, r0
 801155a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801155e:	2e00      	cmp	r6, #0
 8011560:	d158      	bne.n	8011614 <_dtoa_r+0x4e4>
 8011562:	4b7e      	ldr	r3, [pc, #504]	; (801175c <_dtoa_r+0x62c>)
 8011564:	2200      	movs	r2, #0
 8011566:	4640      	mov	r0, r8
 8011568:	4649      	mov	r1, r9
 801156a:	f7ee fea5 	bl	80002b8 <__aeabi_dsub>
 801156e:	4652      	mov	r2, sl
 8011570:	465b      	mov	r3, fp
 8011572:	4680      	mov	r8, r0
 8011574:	4689      	mov	r9, r1
 8011576:	f7ef fae7 	bl	8000b48 <__aeabi_dcmpgt>
 801157a:	2800      	cmp	r0, #0
 801157c:	f040 8295 	bne.w	8011aaa <_dtoa_r+0x97a>
 8011580:	4652      	mov	r2, sl
 8011582:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011586:	4640      	mov	r0, r8
 8011588:	4649      	mov	r1, r9
 801158a:	f7ef fabf 	bl	8000b0c <__aeabi_dcmplt>
 801158e:	2800      	cmp	r0, #0
 8011590:	f040 8289 	bne.w	8011aa6 <_dtoa_r+0x976>
 8011594:	ec5b ab19 	vmov	sl, fp, d9
 8011598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801159a:	2b00      	cmp	r3, #0
 801159c:	f2c0 8148 	blt.w	8011830 <_dtoa_r+0x700>
 80115a0:	9a00      	ldr	r2, [sp, #0]
 80115a2:	2a0e      	cmp	r2, #14
 80115a4:	f300 8144 	bgt.w	8011830 <_dtoa_r+0x700>
 80115a8:	4b67      	ldr	r3, [pc, #412]	; (8011748 <_dtoa_r+0x618>)
 80115aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80115b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	f280 80d5 	bge.w	8011764 <_dtoa_r+0x634>
 80115ba:	9b03      	ldr	r3, [sp, #12]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f300 80d1 	bgt.w	8011764 <_dtoa_r+0x634>
 80115c2:	f040 826f 	bne.w	8011aa4 <_dtoa_r+0x974>
 80115c6:	4b65      	ldr	r3, [pc, #404]	; (801175c <_dtoa_r+0x62c>)
 80115c8:	2200      	movs	r2, #0
 80115ca:	4640      	mov	r0, r8
 80115cc:	4649      	mov	r1, r9
 80115ce:	f7ef f82b 	bl	8000628 <__aeabi_dmul>
 80115d2:	4652      	mov	r2, sl
 80115d4:	465b      	mov	r3, fp
 80115d6:	f7ef faad 	bl	8000b34 <__aeabi_dcmpge>
 80115da:	9e03      	ldr	r6, [sp, #12]
 80115dc:	4637      	mov	r7, r6
 80115de:	2800      	cmp	r0, #0
 80115e0:	f040 8245 	bne.w	8011a6e <_dtoa_r+0x93e>
 80115e4:	9d01      	ldr	r5, [sp, #4]
 80115e6:	2331      	movs	r3, #49	; 0x31
 80115e8:	f805 3b01 	strb.w	r3, [r5], #1
 80115ec:	9b00      	ldr	r3, [sp, #0]
 80115ee:	3301      	adds	r3, #1
 80115f0:	9300      	str	r3, [sp, #0]
 80115f2:	e240      	b.n	8011a76 <_dtoa_r+0x946>
 80115f4:	07f2      	lsls	r2, r6, #31
 80115f6:	d505      	bpl.n	8011604 <_dtoa_r+0x4d4>
 80115f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115fc:	f7ef f814 	bl	8000628 <__aeabi_dmul>
 8011600:	3501      	adds	r5, #1
 8011602:	2301      	movs	r3, #1
 8011604:	1076      	asrs	r6, r6, #1
 8011606:	3708      	adds	r7, #8
 8011608:	e777      	b.n	80114fa <_dtoa_r+0x3ca>
 801160a:	2502      	movs	r5, #2
 801160c:	e779      	b.n	8011502 <_dtoa_r+0x3d2>
 801160e:	9f00      	ldr	r7, [sp, #0]
 8011610:	9e03      	ldr	r6, [sp, #12]
 8011612:	e794      	b.n	801153e <_dtoa_r+0x40e>
 8011614:	9901      	ldr	r1, [sp, #4]
 8011616:	4b4c      	ldr	r3, [pc, #304]	; (8011748 <_dtoa_r+0x618>)
 8011618:	4431      	add	r1, r6
 801161a:	910d      	str	r1, [sp, #52]	; 0x34
 801161c:	9908      	ldr	r1, [sp, #32]
 801161e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011622:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011626:	2900      	cmp	r1, #0
 8011628:	d043      	beq.n	80116b2 <_dtoa_r+0x582>
 801162a:	494d      	ldr	r1, [pc, #308]	; (8011760 <_dtoa_r+0x630>)
 801162c:	2000      	movs	r0, #0
 801162e:	f7ef f925 	bl	800087c <__aeabi_ddiv>
 8011632:	4652      	mov	r2, sl
 8011634:	465b      	mov	r3, fp
 8011636:	f7ee fe3f 	bl	80002b8 <__aeabi_dsub>
 801163a:	9d01      	ldr	r5, [sp, #4]
 801163c:	4682      	mov	sl, r0
 801163e:	468b      	mov	fp, r1
 8011640:	4649      	mov	r1, r9
 8011642:	4640      	mov	r0, r8
 8011644:	f7ef faa0 	bl	8000b88 <__aeabi_d2iz>
 8011648:	4606      	mov	r6, r0
 801164a:	f7ee ff83 	bl	8000554 <__aeabi_i2d>
 801164e:	4602      	mov	r2, r0
 8011650:	460b      	mov	r3, r1
 8011652:	4640      	mov	r0, r8
 8011654:	4649      	mov	r1, r9
 8011656:	f7ee fe2f 	bl	80002b8 <__aeabi_dsub>
 801165a:	3630      	adds	r6, #48	; 0x30
 801165c:	f805 6b01 	strb.w	r6, [r5], #1
 8011660:	4652      	mov	r2, sl
 8011662:	465b      	mov	r3, fp
 8011664:	4680      	mov	r8, r0
 8011666:	4689      	mov	r9, r1
 8011668:	f7ef fa50 	bl	8000b0c <__aeabi_dcmplt>
 801166c:	2800      	cmp	r0, #0
 801166e:	d163      	bne.n	8011738 <_dtoa_r+0x608>
 8011670:	4642      	mov	r2, r8
 8011672:	464b      	mov	r3, r9
 8011674:	4936      	ldr	r1, [pc, #216]	; (8011750 <_dtoa_r+0x620>)
 8011676:	2000      	movs	r0, #0
 8011678:	f7ee fe1e 	bl	80002b8 <__aeabi_dsub>
 801167c:	4652      	mov	r2, sl
 801167e:	465b      	mov	r3, fp
 8011680:	f7ef fa44 	bl	8000b0c <__aeabi_dcmplt>
 8011684:	2800      	cmp	r0, #0
 8011686:	f040 80b5 	bne.w	80117f4 <_dtoa_r+0x6c4>
 801168a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801168c:	429d      	cmp	r5, r3
 801168e:	d081      	beq.n	8011594 <_dtoa_r+0x464>
 8011690:	4b30      	ldr	r3, [pc, #192]	; (8011754 <_dtoa_r+0x624>)
 8011692:	2200      	movs	r2, #0
 8011694:	4650      	mov	r0, sl
 8011696:	4659      	mov	r1, fp
 8011698:	f7ee ffc6 	bl	8000628 <__aeabi_dmul>
 801169c:	4b2d      	ldr	r3, [pc, #180]	; (8011754 <_dtoa_r+0x624>)
 801169e:	4682      	mov	sl, r0
 80116a0:	468b      	mov	fp, r1
 80116a2:	4640      	mov	r0, r8
 80116a4:	4649      	mov	r1, r9
 80116a6:	2200      	movs	r2, #0
 80116a8:	f7ee ffbe 	bl	8000628 <__aeabi_dmul>
 80116ac:	4680      	mov	r8, r0
 80116ae:	4689      	mov	r9, r1
 80116b0:	e7c6      	b.n	8011640 <_dtoa_r+0x510>
 80116b2:	4650      	mov	r0, sl
 80116b4:	4659      	mov	r1, fp
 80116b6:	f7ee ffb7 	bl	8000628 <__aeabi_dmul>
 80116ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116bc:	9d01      	ldr	r5, [sp, #4]
 80116be:	930f      	str	r3, [sp, #60]	; 0x3c
 80116c0:	4682      	mov	sl, r0
 80116c2:	468b      	mov	fp, r1
 80116c4:	4649      	mov	r1, r9
 80116c6:	4640      	mov	r0, r8
 80116c8:	f7ef fa5e 	bl	8000b88 <__aeabi_d2iz>
 80116cc:	4606      	mov	r6, r0
 80116ce:	f7ee ff41 	bl	8000554 <__aeabi_i2d>
 80116d2:	3630      	adds	r6, #48	; 0x30
 80116d4:	4602      	mov	r2, r0
 80116d6:	460b      	mov	r3, r1
 80116d8:	4640      	mov	r0, r8
 80116da:	4649      	mov	r1, r9
 80116dc:	f7ee fdec 	bl	80002b8 <__aeabi_dsub>
 80116e0:	f805 6b01 	strb.w	r6, [r5], #1
 80116e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116e6:	429d      	cmp	r5, r3
 80116e8:	4680      	mov	r8, r0
 80116ea:	4689      	mov	r9, r1
 80116ec:	f04f 0200 	mov.w	r2, #0
 80116f0:	d124      	bne.n	801173c <_dtoa_r+0x60c>
 80116f2:	4b1b      	ldr	r3, [pc, #108]	; (8011760 <_dtoa_r+0x630>)
 80116f4:	4650      	mov	r0, sl
 80116f6:	4659      	mov	r1, fp
 80116f8:	f7ee fde0 	bl	80002bc <__adddf3>
 80116fc:	4602      	mov	r2, r0
 80116fe:	460b      	mov	r3, r1
 8011700:	4640      	mov	r0, r8
 8011702:	4649      	mov	r1, r9
 8011704:	f7ef fa20 	bl	8000b48 <__aeabi_dcmpgt>
 8011708:	2800      	cmp	r0, #0
 801170a:	d173      	bne.n	80117f4 <_dtoa_r+0x6c4>
 801170c:	4652      	mov	r2, sl
 801170e:	465b      	mov	r3, fp
 8011710:	4913      	ldr	r1, [pc, #76]	; (8011760 <_dtoa_r+0x630>)
 8011712:	2000      	movs	r0, #0
 8011714:	f7ee fdd0 	bl	80002b8 <__aeabi_dsub>
 8011718:	4602      	mov	r2, r0
 801171a:	460b      	mov	r3, r1
 801171c:	4640      	mov	r0, r8
 801171e:	4649      	mov	r1, r9
 8011720:	f7ef f9f4 	bl	8000b0c <__aeabi_dcmplt>
 8011724:	2800      	cmp	r0, #0
 8011726:	f43f af35 	beq.w	8011594 <_dtoa_r+0x464>
 801172a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801172c:	1e6b      	subs	r3, r5, #1
 801172e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011730:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011734:	2b30      	cmp	r3, #48	; 0x30
 8011736:	d0f8      	beq.n	801172a <_dtoa_r+0x5fa>
 8011738:	9700      	str	r7, [sp, #0]
 801173a:	e049      	b.n	80117d0 <_dtoa_r+0x6a0>
 801173c:	4b05      	ldr	r3, [pc, #20]	; (8011754 <_dtoa_r+0x624>)
 801173e:	f7ee ff73 	bl	8000628 <__aeabi_dmul>
 8011742:	4680      	mov	r8, r0
 8011744:	4689      	mov	r9, r1
 8011746:	e7bd      	b.n	80116c4 <_dtoa_r+0x594>
 8011748:	08013400 	.word	0x08013400
 801174c:	080133d8 	.word	0x080133d8
 8011750:	3ff00000 	.word	0x3ff00000
 8011754:	40240000 	.word	0x40240000
 8011758:	401c0000 	.word	0x401c0000
 801175c:	40140000 	.word	0x40140000
 8011760:	3fe00000 	.word	0x3fe00000
 8011764:	9d01      	ldr	r5, [sp, #4]
 8011766:	4656      	mov	r6, sl
 8011768:	465f      	mov	r7, fp
 801176a:	4642      	mov	r2, r8
 801176c:	464b      	mov	r3, r9
 801176e:	4630      	mov	r0, r6
 8011770:	4639      	mov	r1, r7
 8011772:	f7ef f883 	bl	800087c <__aeabi_ddiv>
 8011776:	f7ef fa07 	bl	8000b88 <__aeabi_d2iz>
 801177a:	4682      	mov	sl, r0
 801177c:	f7ee feea 	bl	8000554 <__aeabi_i2d>
 8011780:	4642      	mov	r2, r8
 8011782:	464b      	mov	r3, r9
 8011784:	f7ee ff50 	bl	8000628 <__aeabi_dmul>
 8011788:	4602      	mov	r2, r0
 801178a:	460b      	mov	r3, r1
 801178c:	4630      	mov	r0, r6
 801178e:	4639      	mov	r1, r7
 8011790:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011794:	f7ee fd90 	bl	80002b8 <__aeabi_dsub>
 8011798:	f805 6b01 	strb.w	r6, [r5], #1
 801179c:	9e01      	ldr	r6, [sp, #4]
 801179e:	9f03      	ldr	r7, [sp, #12]
 80117a0:	1bae      	subs	r6, r5, r6
 80117a2:	42b7      	cmp	r7, r6
 80117a4:	4602      	mov	r2, r0
 80117a6:	460b      	mov	r3, r1
 80117a8:	d135      	bne.n	8011816 <_dtoa_r+0x6e6>
 80117aa:	f7ee fd87 	bl	80002bc <__adddf3>
 80117ae:	4642      	mov	r2, r8
 80117b0:	464b      	mov	r3, r9
 80117b2:	4606      	mov	r6, r0
 80117b4:	460f      	mov	r7, r1
 80117b6:	f7ef f9c7 	bl	8000b48 <__aeabi_dcmpgt>
 80117ba:	b9d0      	cbnz	r0, 80117f2 <_dtoa_r+0x6c2>
 80117bc:	4642      	mov	r2, r8
 80117be:	464b      	mov	r3, r9
 80117c0:	4630      	mov	r0, r6
 80117c2:	4639      	mov	r1, r7
 80117c4:	f7ef f998 	bl	8000af8 <__aeabi_dcmpeq>
 80117c8:	b110      	cbz	r0, 80117d0 <_dtoa_r+0x6a0>
 80117ca:	f01a 0f01 	tst.w	sl, #1
 80117ce:	d110      	bne.n	80117f2 <_dtoa_r+0x6c2>
 80117d0:	4620      	mov	r0, r4
 80117d2:	ee18 1a10 	vmov	r1, s16
 80117d6:	f000 fc07 	bl	8011fe8 <_Bfree>
 80117da:	2300      	movs	r3, #0
 80117dc:	9800      	ldr	r0, [sp, #0]
 80117de:	702b      	strb	r3, [r5, #0]
 80117e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117e2:	3001      	adds	r0, #1
 80117e4:	6018      	str	r0, [r3, #0]
 80117e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f43f acf1 	beq.w	80111d0 <_dtoa_r+0xa0>
 80117ee:	601d      	str	r5, [r3, #0]
 80117f0:	e4ee      	b.n	80111d0 <_dtoa_r+0xa0>
 80117f2:	9f00      	ldr	r7, [sp, #0]
 80117f4:	462b      	mov	r3, r5
 80117f6:	461d      	mov	r5, r3
 80117f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117fc:	2a39      	cmp	r2, #57	; 0x39
 80117fe:	d106      	bne.n	801180e <_dtoa_r+0x6de>
 8011800:	9a01      	ldr	r2, [sp, #4]
 8011802:	429a      	cmp	r2, r3
 8011804:	d1f7      	bne.n	80117f6 <_dtoa_r+0x6c6>
 8011806:	9901      	ldr	r1, [sp, #4]
 8011808:	2230      	movs	r2, #48	; 0x30
 801180a:	3701      	adds	r7, #1
 801180c:	700a      	strb	r2, [r1, #0]
 801180e:	781a      	ldrb	r2, [r3, #0]
 8011810:	3201      	adds	r2, #1
 8011812:	701a      	strb	r2, [r3, #0]
 8011814:	e790      	b.n	8011738 <_dtoa_r+0x608>
 8011816:	4ba6      	ldr	r3, [pc, #664]	; (8011ab0 <_dtoa_r+0x980>)
 8011818:	2200      	movs	r2, #0
 801181a:	f7ee ff05 	bl	8000628 <__aeabi_dmul>
 801181e:	2200      	movs	r2, #0
 8011820:	2300      	movs	r3, #0
 8011822:	4606      	mov	r6, r0
 8011824:	460f      	mov	r7, r1
 8011826:	f7ef f967 	bl	8000af8 <__aeabi_dcmpeq>
 801182a:	2800      	cmp	r0, #0
 801182c:	d09d      	beq.n	801176a <_dtoa_r+0x63a>
 801182e:	e7cf      	b.n	80117d0 <_dtoa_r+0x6a0>
 8011830:	9a08      	ldr	r2, [sp, #32]
 8011832:	2a00      	cmp	r2, #0
 8011834:	f000 80d7 	beq.w	80119e6 <_dtoa_r+0x8b6>
 8011838:	9a06      	ldr	r2, [sp, #24]
 801183a:	2a01      	cmp	r2, #1
 801183c:	f300 80ba 	bgt.w	80119b4 <_dtoa_r+0x884>
 8011840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011842:	2a00      	cmp	r2, #0
 8011844:	f000 80b2 	beq.w	80119ac <_dtoa_r+0x87c>
 8011848:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801184c:	9e07      	ldr	r6, [sp, #28]
 801184e:	9d04      	ldr	r5, [sp, #16]
 8011850:	9a04      	ldr	r2, [sp, #16]
 8011852:	441a      	add	r2, r3
 8011854:	9204      	str	r2, [sp, #16]
 8011856:	9a05      	ldr	r2, [sp, #20]
 8011858:	2101      	movs	r1, #1
 801185a:	441a      	add	r2, r3
 801185c:	4620      	mov	r0, r4
 801185e:	9205      	str	r2, [sp, #20]
 8011860:	f000 fc7a 	bl	8012158 <__i2b>
 8011864:	4607      	mov	r7, r0
 8011866:	2d00      	cmp	r5, #0
 8011868:	dd0c      	ble.n	8011884 <_dtoa_r+0x754>
 801186a:	9b05      	ldr	r3, [sp, #20]
 801186c:	2b00      	cmp	r3, #0
 801186e:	dd09      	ble.n	8011884 <_dtoa_r+0x754>
 8011870:	42ab      	cmp	r3, r5
 8011872:	9a04      	ldr	r2, [sp, #16]
 8011874:	bfa8      	it	ge
 8011876:	462b      	movge	r3, r5
 8011878:	1ad2      	subs	r2, r2, r3
 801187a:	9204      	str	r2, [sp, #16]
 801187c:	9a05      	ldr	r2, [sp, #20]
 801187e:	1aed      	subs	r5, r5, r3
 8011880:	1ad3      	subs	r3, r2, r3
 8011882:	9305      	str	r3, [sp, #20]
 8011884:	9b07      	ldr	r3, [sp, #28]
 8011886:	b31b      	cbz	r3, 80118d0 <_dtoa_r+0x7a0>
 8011888:	9b08      	ldr	r3, [sp, #32]
 801188a:	2b00      	cmp	r3, #0
 801188c:	f000 80af 	beq.w	80119ee <_dtoa_r+0x8be>
 8011890:	2e00      	cmp	r6, #0
 8011892:	dd13      	ble.n	80118bc <_dtoa_r+0x78c>
 8011894:	4639      	mov	r1, r7
 8011896:	4632      	mov	r2, r6
 8011898:	4620      	mov	r0, r4
 801189a:	f000 fd1d 	bl	80122d8 <__pow5mult>
 801189e:	ee18 2a10 	vmov	r2, s16
 80118a2:	4601      	mov	r1, r0
 80118a4:	4607      	mov	r7, r0
 80118a6:	4620      	mov	r0, r4
 80118a8:	f000 fc6c 	bl	8012184 <__multiply>
 80118ac:	ee18 1a10 	vmov	r1, s16
 80118b0:	4680      	mov	r8, r0
 80118b2:	4620      	mov	r0, r4
 80118b4:	f000 fb98 	bl	8011fe8 <_Bfree>
 80118b8:	ee08 8a10 	vmov	s16, r8
 80118bc:	9b07      	ldr	r3, [sp, #28]
 80118be:	1b9a      	subs	r2, r3, r6
 80118c0:	d006      	beq.n	80118d0 <_dtoa_r+0x7a0>
 80118c2:	ee18 1a10 	vmov	r1, s16
 80118c6:	4620      	mov	r0, r4
 80118c8:	f000 fd06 	bl	80122d8 <__pow5mult>
 80118cc:	ee08 0a10 	vmov	s16, r0
 80118d0:	2101      	movs	r1, #1
 80118d2:	4620      	mov	r0, r4
 80118d4:	f000 fc40 	bl	8012158 <__i2b>
 80118d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118da:	2b00      	cmp	r3, #0
 80118dc:	4606      	mov	r6, r0
 80118de:	f340 8088 	ble.w	80119f2 <_dtoa_r+0x8c2>
 80118e2:	461a      	mov	r2, r3
 80118e4:	4601      	mov	r1, r0
 80118e6:	4620      	mov	r0, r4
 80118e8:	f000 fcf6 	bl	80122d8 <__pow5mult>
 80118ec:	9b06      	ldr	r3, [sp, #24]
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	4606      	mov	r6, r0
 80118f2:	f340 8081 	ble.w	80119f8 <_dtoa_r+0x8c8>
 80118f6:	f04f 0800 	mov.w	r8, #0
 80118fa:	6933      	ldr	r3, [r6, #16]
 80118fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011900:	6918      	ldr	r0, [r3, #16]
 8011902:	f000 fbd9 	bl	80120b8 <__hi0bits>
 8011906:	f1c0 0020 	rsb	r0, r0, #32
 801190a:	9b05      	ldr	r3, [sp, #20]
 801190c:	4418      	add	r0, r3
 801190e:	f010 001f 	ands.w	r0, r0, #31
 8011912:	f000 8092 	beq.w	8011a3a <_dtoa_r+0x90a>
 8011916:	f1c0 0320 	rsb	r3, r0, #32
 801191a:	2b04      	cmp	r3, #4
 801191c:	f340 808a 	ble.w	8011a34 <_dtoa_r+0x904>
 8011920:	f1c0 001c 	rsb	r0, r0, #28
 8011924:	9b04      	ldr	r3, [sp, #16]
 8011926:	4403      	add	r3, r0
 8011928:	9304      	str	r3, [sp, #16]
 801192a:	9b05      	ldr	r3, [sp, #20]
 801192c:	4403      	add	r3, r0
 801192e:	4405      	add	r5, r0
 8011930:	9305      	str	r3, [sp, #20]
 8011932:	9b04      	ldr	r3, [sp, #16]
 8011934:	2b00      	cmp	r3, #0
 8011936:	dd07      	ble.n	8011948 <_dtoa_r+0x818>
 8011938:	ee18 1a10 	vmov	r1, s16
 801193c:	461a      	mov	r2, r3
 801193e:	4620      	mov	r0, r4
 8011940:	f000 fd24 	bl	801238c <__lshift>
 8011944:	ee08 0a10 	vmov	s16, r0
 8011948:	9b05      	ldr	r3, [sp, #20]
 801194a:	2b00      	cmp	r3, #0
 801194c:	dd05      	ble.n	801195a <_dtoa_r+0x82a>
 801194e:	4631      	mov	r1, r6
 8011950:	461a      	mov	r2, r3
 8011952:	4620      	mov	r0, r4
 8011954:	f000 fd1a 	bl	801238c <__lshift>
 8011958:	4606      	mov	r6, r0
 801195a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801195c:	2b00      	cmp	r3, #0
 801195e:	d06e      	beq.n	8011a3e <_dtoa_r+0x90e>
 8011960:	ee18 0a10 	vmov	r0, s16
 8011964:	4631      	mov	r1, r6
 8011966:	f000 fd81 	bl	801246c <__mcmp>
 801196a:	2800      	cmp	r0, #0
 801196c:	da67      	bge.n	8011a3e <_dtoa_r+0x90e>
 801196e:	9b00      	ldr	r3, [sp, #0]
 8011970:	3b01      	subs	r3, #1
 8011972:	ee18 1a10 	vmov	r1, s16
 8011976:	9300      	str	r3, [sp, #0]
 8011978:	220a      	movs	r2, #10
 801197a:	2300      	movs	r3, #0
 801197c:	4620      	mov	r0, r4
 801197e:	f000 fb55 	bl	801202c <__multadd>
 8011982:	9b08      	ldr	r3, [sp, #32]
 8011984:	ee08 0a10 	vmov	s16, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	f000 81b1 	beq.w	8011cf0 <_dtoa_r+0xbc0>
 801198e:	2300      	movs	r3, #0
 8011990:	4639      	mov	r1, r7
 8011992:	220a      	movs	r2, #10
 8011994:	4620      	mov	r0, r4
 8011996:	f000 fb49 	bl	801202c <__multadd>
 801199a:	9b02      	ldr	r3, [sp, #8]
 801199c:	2b00      	cmp	r3, #0
 801199e:	4607      	mov	r7, r0
 80119a0:	f300 808e 	bgt.w	8011ac0 <_dtoa_r+0x990>
 80119a4:	9b06      	ldr	r3, [sp, #24]
 80119a6:	2b02      	cmp	r3, #2
 80119a8:	dc51      	bgt.n	8011a4e <_dtoa_r+0x91e>
 80119aa:	e089      	b.n	8011ac0 <_dtoa_r+0x990>
 80119ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80119ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80119b2:	e74b      	b.n	801184c <_dtoa_r+0x71c>
 80119b4:	9b03      	ldr	r3, [sp, #12]
 80119b6:	1e5e      	subs	r6, r3, #1
 80119b8:	9b07      	ldr	r3, [sp, #28]
 80119ba:	42b3      	cmp	r3, r6
 80119bc:	bfbf      	itttt	lt
 80119be:	9b07      	ldrlt	r3, [sp, #28]
 80119c0:	9607      	strlt	r6, [sp, #28]
 80119c2:	1af2      	sublt	r2, r6, r3
 80119c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80119c6:	bfb6      	itet	lt
 80119c8:	189b      	addlt	r3, r3, r2
 80119ca:	1b9e      	subge	r6, r3, r6
 80119cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80119ce:	9b03      	ldr	r3, [sp, #12]
 80119d0:	bfb8      	it	lt
 80119d2:	2600      	movlt	r6, #0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	bfb7      	itett	lt
 80119d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80119dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80119e0:	1a9d      	sublt	r5, r3, r2
 80119e2:	2300      	movlt	r3, #0
 80119e4:	e734      	b.n	8011850 <_dtoa_r+0x720>
 80119e6:	9e07      	ldr	r6, [sp, #28]
 80119e8:	9d04      	ldr	r5, [sp, #16]
 80119ea:	9f08      	ldr	r7, [sp, #32]
 80119ec:	e73b      	b.n	8011866 <_dtoa_r+0x736>
 80119ee:	9a07      	ldr	r2, [sp, #28]
 80119f0:	e767      	b.n	80118c2 <_dtoa_r+0x792>
 80119f2:	9b06      	ldr	r3, [sp, #24]
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	dc18      	bgt.n	8011a2a <_dtoa_r+0x8fa>
 80119f8:	f1ba 0f00 	cmp.w	sl, #0
 80119fc:	d115      	bne.n	8011a2a <_dtoa_r+0x8fa>
 80119fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a02:	b993      	cbnz	r3, 8011a2a <_dtoa_r+0x8fa>
 8011a04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011a08:	0d1b      	lsrs	r3, r3, #20
 8011a0a:	051b      	lsls	r3, r3, #20
 8011a0c:	b183      	cbz	r3, 8011a30 <_dtoa_r+0x900>
 8011a0e:	9b04      	ldr	r3, [sp, #16]
 8011a10:	3301      	adds	r3, #1
 8011a12:	9304      	str	r3, [sp, #16]
 8011a14:	9b05      	ldr	r3, [sp, #20]
 8011a16:	3301      	adds	r3, #1
 8011a18:	9305      	str	r3, [sp, #20]
 8011a1a:	f04f 0801 	mov.w	r8, #1
 8011a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	f47f af6a 	bne.w	80118fa <_dtoa_r+0x7ca>
 8011a26:	2001      	movs	r0, #1
 8011a28:	e76f      	b.n	801190a <_dtoa_r+0x7da>
 8011a2a:	f04f 0800 	mov.w	r8, #0
 8011a2e:	e7f6      	b.n	8011a1e <_dtoa_r+0x8ee>
 8011a30:	4698      	mov	r8, r3
 8011a32:	e7f4      	b.n	8011a1e <_dtoa_r+0x8ee>
 8011a34:	f43f af7d 	beq.w	8011932 <_dtoa_r+0x802>
 8011a38:	4618      	mov	r0, r3
 8011a3a:	301c      	adds	r0, #28
 8011a3c:	e772      	b.n	8011924 <_dtoa_r+0x7f4>
 8011a3e:	9b03      	ldr	r3, [sp, #12]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	dc37      	bgt.n	8011ab4 <_dtoa_r+0x984>
 8011a44:	9b06      	ldr	r3, [sp, #24]
 8011a46:	2b02      	cmp	r3, #2
 8011a48:	dd34      	ble.n	8011ab4 <_dtoa_r+0x984>
 8011a4a:	9b03      	ldr	r3, [sp, #12]
 8011a4c:	9302      	str	r3, [sp, #8]
 8011a4e:	9b02      	ldr	r3, [sp, #8]
 8011a50:	b96b      	cbnz	r3, 8011a6e <_dtoa_r+0x93e>
 8011a52:	4631      	mov	r1, r6
 8011a54:	2205      	movs	r2, #5
 8011a56:	4620      	mov	r0, r4
 8011a58:	f000 fae8 	bl	801202c <__multadd>
 8011a5c:	4601      	mov	r1, r0
 8011a5e:	4606      	mov	r6, r0
 8011a60:	ee18 0a10 	vmov	r0, s16
 8011a64:	f000 fd02 	bl	801246c <__mcmp>
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	f73f adbb 	bgt.w	80115e4 <_dtoa_r+0x4b4>
 8011a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a70:	9d01      	ldr	r5, [sp, #4]
 8011a72:	43db      	mvns	r3, r3
 8011a74:	9300      	str	r3, [sp, #0]
 8011a76:	f04f 0800 	mov.w	r8, #0
 8011a7a:	4631      	mov	r1, r6
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	f000 fab3 	bl	8011fe8 <_Bfree>
 8011a82:	2f00      	cmp	r7, #0
 8011a84:	f43f aea4 	beq.w	80117d0 <_dtoa_r+0x6a0>
 8011a88:	f1b8 0f00 	cmp.w	r8, #0
 8011a8c:	d005      	beq.n	8011a9a <_dtoa_r+0x96a>
 8011a8e:	45b8      	cmp	r8, r7
 8011a90:	d003      	beq.n	8011a9a <_dtoa_r+0x96a>
 8011a92:	4641      	mov	r1, r8
 8011a94:	4620      	mov	r0, r4
 8011a96:	f000 faa7 	bl	8011fe8 <_Bfree>
 8011a9a:	4639      	mov	r1, r7
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	f000 faa3 	bl	8011fe8 <_Bfree>
 8011aa2:	e695      	b.n	80117d0 <_dtoa_r+0x6a0>
 8011aa4:	2600      	movs	r6, #0
 8011aa6:	4637      	mov	r7, r6
 8011aa8:	e7e1      	b.n	8011a6e <_dtoa_r+0x93e>
 8011aaa:	9700      	str	r7, [sp, #0]
 8011aac:	4637      	mov	r7, r6
 8011aae:	e599      	b.n	80115e4 <_dtoa_r+0x4b4>
 8011ab0:	40240000 	.word	0x40240000
 8011ab4:	9b08      	ldr	r3, [sp, #32]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	f000 80ca 	beq.w	8011c50 <_dtoa_r+0xb20>
 8011abc:	9b03      	ldr	r3, [sp, #12]
 8011abe:	9302      	str	r3, [sp, #8]
 8011ac0:	2d00      	cmp	r5, #0
 8011ac2:	dd05      	ble.n	8011ad0 <_dtoa_r+0x9a0>
 8011ac4:	4639      	mov	r1, r7
 8011ac6:	462a      	mov	r2, r5
 8011ac8:	4620      	mov	r0, r4
 8011aca:	f000 fc5f 	bl	801238c <__lshift>
 8011ace:	4607      	mov	r7, r0
 8011ad0:	f1b8 0f00 	cmp.w	r8, #0
 8011ad4:	d05b      	beq.n	8011b8e <_dtoa_r+0xa5e>
 8011ad6:	6879      	ldr	r1, [r7, #4]
 8011ad8:	4620      	mov	r0, r4
 8011ada:	f000 fa45 	bl	8011f68 <_Balloc>
 8011ade:	4605      	mov	r5, r0
 8011ae0:	b928      	cbnz	r0, 8011aee <_dtoa_r+0x9be>
 8011ae2:	4b87      	ldr	r3, [pc, #540]	; (8011d00 <_dtoa_r+0xbd0>)
 8011ae4:	4602      	mov	r2, r0
 8011ae6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011aea:	f7ff bb3b 	b.w	8011164 <_dtoa_r+0x34>
 8011aee:	693a      	ldr	r2, [r7, #16]
 8011af0:	3202      	adds	r2, #2
 8011af2:	0092      	lsls	r2, r2, #2
 8011af4:	f107 010c 	add.w	r1, r7, #12
 8011af8:	300c      	adds	r0, #12
 8011afa:	f7fe fce5 	bl	80104c8 <memcpy>
 8011afe:	2201      	movs	r2, #1
 8011b00:	4629      	mov	r1, r5
 8011b02:	4620      	mov	r0, r4
 8011b04:	f000 fc42 	bl	801238c <__lshift>
 8011b08:	9b01      	ldr	r3, [sp, #4]
 8011b0a:	f103 0901 	add.w	r9, r3, #1
 8011b0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011b12:	4413      	add	r3, r2
 8011b14:	9305      	str	r3, [sp, #20]
 8011b16:	f00a 0301 	and.w	r3, sl, #1
 8011b1a:	46b8      	mov	r8, r7
 8011b1c:	9304      	str	r3, [sp, #16]
 8011b1e:	4607      	mov	r7, r0
 8011b20:	4631      	mov	r1, r6
 8011b22:	ee18 0a10 	vmov	r0, s16
 8011b26:	f7ff fa75 	bl	8011014 <quorem>
 8011b2a:	4641      	mov	r1, r8
 8011b2c:	9002      	str	r0, [sp, #8]
 8011b2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011b32:	ee18 0a10 	vmov	r0, s16
 8011b36:	f000 fc99 	bl	801246c <__mcmp>
 8011b3a:	463a      	mov	r2, r7
 8011b3c:	9003      	str	r0, [sp, #12]
 8011b3e:	4631      	mov	r1, r6
 8011b40:	4620      	mov	r0, r4
 8011b42:	f000 fcaf 	bl	80124a4 <__mdiff>
 8011b46:	68c2      	ldr	r2, [r0, #12]
 8011b48:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8011b4c:	4605      	mov	r5, r0
 8011b4e:	bb02      	cbnz	r2, 8011b92 <_dtoa_r+0xa62>
 8011b50:	4601      	mov	r1, r0
 8011b52:	ee18 0a10 	vmov	r0, s16
 8011b56:	f000 fc89 	bl	801246c <__mcmp>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	4629      	mov	r1, r5
 8011b5e:	4620      	mov	r0, r4
 8011b60:	9207      	str	r2, [sp, #28]
 8011b62:	f000 fa41 	bl	8011fe8 <_Bfree>
 8011b66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011b6a:	ea43 0102 	orr.w	r1, r3, r2
 8011b6e:	9b04      	ldr	r3, [sp, #16]
 8011b70:	430b      	orrs	r3, r1
 8011b72:	464d      	mov	r5, r9
 8011b74:	d10f      	bne.n	8011b96 <_dtoa_r+0xa66>
 8011b76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011b7a:	d02a      	beq.n	8011bd2 <_dtoa_r+0xaa2>
 8011b7c:	9b03      	ldr	r3, [sp, #12]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	dd02      	ble.n	8011b88 <_dtoa_r+0xa58>
 8011b82:	9b02      	ldr	r3, [sp, #8]
 8011b84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011b88:	f88b a000 	strb.w	sl, [fp]
 8011b8c:	e775      	b.n	8011a7a <_dtoa_r+0x94a>
 8011b8e:	4638      	mov	r0, r7
 8011b90:	e7ba      	b.n	8011b08 <_dtoa_r+0x9d8>
 8011b92:	2201      	movs	r2, #1
 8011b94:	e7e2      	b.n	8011b5c <_dtoa_r+0xa2c>
 8011b96:	9b03      	ldr	r3, [sp, #12]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	db04      	blt.n	8011ba6 <_dtoa_r+0xa76>
 8011b9c:	9906      	ldr	r1, [sp, #24]
 8011b9e:	430b      	orrs	r3, r1
 8011ba0:	9904      	ldr	r1, [sp, #16]
 8011ba2:	430b      	orrs	r3, r1
 8011ba4:	d122      	bne.n	8011bec <_dtoa_r+0xabc>
 8011ba6:	2a00      	cmp	r2, #0
 8011ba8:	ddee      	ble.n	8011b88 <_dtoa_r+0xa58>
 8011baa:	ee18 1a10 	vmov	r1, s16
 8011bae:	2201      	movs	r2, #1
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	f000 fbeb 	bl	801238c <__lshift>
 8011bb6:	4631      	mov	r1, r6
 8011bb8:	ee08 0a10 	vmov	s16, r0
 8011bbc:	f000 fc56 	bl	801246c <__mcmp>
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	dc03      	bgt.n	8011bcc <_dtoa_r+0xa9c>
 8011bc4:	d1e0      	bne.n	8011b88 <_dtoa_r+0xa58>
 8011bc6:	f01a 0f01 	tst.w	sl, #1
 8011bca:	d0dd      	beq.n	8011b88 <_dtoa_r+0xa58>
 8011bcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011bd0:	d1d7      	bne.n	8011b82 <_dtoa_r+0xa52>
 8011bd2:	2339      	movs	r3, #57	; 0x39
 8011bd4:	f88b 3000 	strb.w	r3, [fp]
 8011bd8:	462b      	mov	r3, r5
 8011bda:	461d      	mov	r5, r3
 8011bdc:	3b01      	subs	r3, #1
 8011bde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011be2:	2a39      	cmp	r2, #57	; 0x39
 8011be4:	d071      	beq.n	8011cca <_dtoa_r+0xb9a>
 8011be6:	3201      	adds	r2, #1
 8011be8:	701a      	strb	r2, [r3, #0]
 8011bea:	e746      	b.n	8011a7a <_dtoa_r+0x94a>
 8011bec:	2a00      	cmp	r2, #0
 8011bee:	dd07      	ble.n	8011c00 <_dtoa_r+0xad0>
 8011bf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011bf4:	d0ed      	beq.n	8011bd2 <_dtoa_r+0xaa2>
 8011bf6:	f10a 0301 	add.w	r3, sl, #1
 8011bfa:	f88b 3000 	strb.w	r3, [fp]
 8011bfe:	e73c      	b.n	8011a7a <_dtoa_r+0x94a>
 8011c00:	9b05      	ldr	r3, [sp, #20]
 8011c02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011c06:	4599      	cmp	r9, r3
 8011c08:	d047      	beq.n	8011c9a <_dtoa_r+0xb6a>
 8011c0a:	ee18 1a10 	vmov	r1, s16
 8011c0e:	2300      	movs	r3, #0
 8011c10:	220a      	movs	r2, #10
 8011c12:	4620      	mov	r0, r4
 8011c14:	f000 fa0a 	bl	801202c <__multadd>
 8011c18:	45b8      	cmp	r8, r7
 8011c1a:	ee08 0a10 	vmov	s16, r0
 8011c1e:	f04f 0300 	mov.w	r3, #0
 8011c22:	f04f 020a 	mov.w	r2, #10
 8011c26:	4641      	mov	r1, r8
 8011c28:	4620      	mov	r0, r4
 8011c2a:	d106      	bne.n	8011c3a <_dtoa_r+0xb0a>
 8011c2c:	f000 f9fe 	bl	801202c <__multadd>
 8011c30:	4680      	mov	r8, r0
 8011c32:	4607      	mov	r7, r0
 8011c34:	f109 0901 	add.w	r9, r9, #1
 8011c38:	e772      	b.n	8011b20 <_dtoa_r+0x9f0>
 8011c3a:	f000 f9f7 	bl	801202c <__multadd>
 8011c3e:	4639      	mov	r1, r7
 8011c40:	4680      	mov	r8, r0
 8011c42:	2300      	movs	r3, #0
 8011c44:	220a      	movs	r2, #10
 8011c46:	4620      	mov	r0, r4
 8011c48:	f000 f9f0 	bl	801202c <__multadd>
 8011c4c:	4607      	mov	r7, r0
 8011c4e:	e7f1      	b.n	8011c34 <_dtoa_r+0xb04>
 8011c50:	9b03      	ldr	r3, [sp, #12]
 8011c52:	9302      	str	r3, [sp, #8]
 8011c54:	9d01      	ldr	r5, [sp, #4]
 8011c56:	ee18 0a10 	vmov	r0, s16
 8011c5a:	4631      	mov	r1, r6
 8011c5c:	f7ff f9da 	bl	8011014 <quorem>
 8011c60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011c64:	9b01      	ldr	r3, [sp, #4]
 8011c66:	f805 ab01 	strb.w	sl, [r5], #1
 8011c6a:	1aea      	subs	r2, r5, r3
 8011c6c:	9b02      	ldr	r3, [sp, #8]
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	dd09      	ble.n	8011c86 <_dtoa_r+0xb56>
 8011c72:	ee18 1a10 	vmov	r1, s16
 8011c76:	2300      	movs	r3, #0
 8011c78:	220a      	movs	r2, #10
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	f000 f9d6 	bl	801202c <__multadd>
 8011c80:	ee08 0a10 	vmov	s16, r0
 8011c84:	e7e7      	b.n	8011c56 <_dtoa_r+0xb26>
 8011c86:	9b02      	ldr	r3, [sp, #8]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	bfc8      	it	gt
 8011c8c:	461d      	movgt	r5, r3
 8011c8e:	9b01      	ldr	r3, [sp, #4]
 8011c90:	bfd8      	it	le
 8011c92:	2501      	movle	r5, #1
 8011c94:	441d      	add	r5, r3
 8011c96:	f04f 0800 	mov.w	r8, #0
 8011c9a:	ee18 1a10 	vmov	r1, s16
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	f000 fb73 	bl	801238c <__lshift>
 8011ca6:	4631      	mov	r1, r6
 8011ca8:	ee08 0a10 	vmov	s16, r0
 8011cac:	f000 fbde 	bl	801246c <__mcmp>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	dc91      	bgt.n	8011bd8 <_dtoa_r+0xaa8>
 8011cb4:	d102      	bne.n	8011cbc <_dtoa_r+0xb8c>
 8011cb6:	f01a 0f01 	tst.w	sl, #1
 8011cba:	d18d      	bne.n	8011bd8 <_dtoa_r+0xaa8>
 8011cbc:	462b      	mov	r3, r5
 8011cbe:	461d      	mov	r5, r3
 8011cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cc4:	2a30      	cmp	r2, #48	; 0x30
 8011cc6:	d0fa      	beq.n	8011cbe <_dtoa_r+0xb8e>
 8011cc8:	e6d7      	b.n	8011a7a <_dtoa_r+0x94a>
 8011cca:	9a01      	ldr	r2, [sp, #4]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d184      	bne.n	8011bda <_dtoa_r+0xaaa>
 8011cd0:	9b00      	ldr	r3, [sp, #0]
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	2331      	movs	r3, #49	; 0x31
 8011cd8:	7013      	strb	r3, [r2, #0]
 8011cda:	e6ce      	b.n	8011a7a <_dtoa_r+0x94a>
 8011cdc:	4b09      	ldr	r3, [pc, #36]	; (8011d04 <_dtoa_r+0xbd4>)
 8011cde:	f7ff ba95 	b.w	801120c <_dtoa_r+0xdc>
 8011ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	f47f aa6e 	bne.w	80111c6 <_dtoa_r+0x96>
 8011cea:	4b07      	ldr	r3, [pc, #28]	; (8011d08 <_dtoa_r+0xbd8>)
 8011cec:	f7ff ba8e 	b.w	801120c <_dtoa_r+0xdc>
 8011cf0:	9b02      	ldr	r3, [sp, #8]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	dcae      	bgt.n	8011c54 <_dtoa_r+0xb24>
 8011cf6:	9b06      	ldr	r3, [sp, #24]
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	f73f aea8 	bgt.w	8011a4e <_dtoa_r+0x91e>
 8011cfe:	e7a9      	b.n	8011c54 <_dtoa_r+0xb24>
 8011d00:	080132fc 	.word	0x080132fc
 8011d04:	0801311c 	.word	0x0801311c
 8011d08:	0801327d 	.word	0x0801327d

08011d0c <std>:
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	b510      	push	{r4, lr}
 8011d10:	4604      	mov	r4, r0
 8011d12:	e9c0 3300 	strd	r3, r3, [r0]
 8011d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d1a:	6083      	str	r3, [r0, #8]
 8011d1c:	8181      	strh	r1, [r0, #12]
 8011d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8011d20:	81c2      	strh	r2, [r0, #14]
 8011d22:	6183      	str	r3, [r0, #24]
 8011d24:	4619      	mov	r1, r3
 8011d26:	2208      	movs	r2, #8
 8011d28:	305c      	adds	r0, #92	; 0x5c
 8011d2a:	f7fe fbdb 	bl	80104e4 <memset>
 8011d2e:	4b05      	ldr	r3, [pc, #20]	; (8011d44 <std+0x38>)
 8011d30:	6263      	str	r3, [r4, #36]	; 0x24
 8011d32:	4b05      	ldr	r3, [pc, #20]	; (8011d48 <std+0x3c>)
 8011d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d36:	4b05      	ldr	r3, [pc, #20]	; (8011d4c <std+0x40>)
 8011d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d3a:	4b05      	ldr	r3, [pc, #20]	; (8011d50 <std+0x44>)
 8011d3c:	6224      	str	r4, [r4, #32]
 8011d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8011d40:	bd10      	pop	{r4, pc}
 8011d42:	bf00      	nop
 8011d44:	08012951 	.word	0x08012951
 8011d48:	08012973 	.word	0x08012973
 8011d4c:	080129ab 	.word	0x080129ab
 8011d50:	080129cf 	.word	0x080129cf

08011d54 <_cleanup_r>:
 8011d54:	4901      	ldr	r1, [pc, #4]	; (8011d5c <_cleanup_r+0x8>)
 8011d56:	f000 b8c1 	b.w	8011edc <_fwalk_reent>
 8011d5a:	bf00      	nop
 8011d5c:	08012cd5 	.word	0x08012cd5

08011d60 <__sfmoreglue>:
 8011d60:	b570      	push	{r4, r5, r6, lr}
 8011d62:	2268      	movs	r2, #104	; 0x68
 8011d64:	1e4d      	subs	r5, r1, #1
 8011d66:	4355      	muls	r5, r2
 8011d68:	460e      	mov	r6, r1
 8011d6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d6e:	f7fe fc2d 	bl	80105cc <_malloc_r>
 8011d72:	4604      	mov	r4, r0
 8011d74:	b140      	cbz	r0, 8011d88 <__sfmoreglue+0x28>
 8011d76:	2100      	movs	r1, #0
 8011d78:	e9c0 1600 	strd	r1, r6, [r0]
 8011d7c:	300c      	adds	r0, #12
 8011d7e:	60a0      	str	r0, [r4, #8]
 8011d80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011d84:	f7fe fbae 	bl	80104e4 <memset>
 8011d88:	4620      	mov	r0, r4
 8011d8a:	bd70      	pop	{r4, r5, r6, pc}

08011d8c <__sfp_lock_acquire>:
 8011d8c:	4801      	ldr	r0, [pc, #4]	; (8011d94 <__sfp_lock_acquire+0x8>)
 8011d8e:	f000 b8ca 	b.w	8011f26 <__retarget_lock_acquire_recursive>
 8011d92:	bf00      	nop
 8011d94:	200028dd 	.word	0x200028dd

08011d98 <__sfp_lock_release>:
 8011d98:	4801      	ldr	r0, [pc, #4]	; (8011da0 <__sfp_lock_release+0x8>)
 8011d9a:	f000 b8c5 	b.w	8011f28 <__retarget_lock_release_recursive>
 8011d9e:	bf00      	nop
 8011da0:	200028dd 	.word	0x200028dd

08011da4 <__sinit_lock_acquire>:
 8011da4:	4801      	ldr	r0, [pc, #4]	; (8011dac <__sinit_lock_acquire+0x8>)
 8011da6:	f000 b8be 	b.w	8011f26 <__retarget_lock_acquire_recursive>
 8011daa:	bf00      	nop
 8011dac:	200028de 	.word	0x200028de

08011db0 <__sinit_lock_release>:
 8011db0:	4801      	ldr	r0, [pc, #4]	; (8011db8 <__sinit_lock_release+0x8>)
 8011db2:	f000 b8b9 	b.w	8011f28 <__retarget_lock_release_recursive>
 8011db6:	bf00      	nop
 8011db8:	200028de 	.word	0x200028de

08011dbc <__sinit>:
 8011dbc:	b510      	push	{r4, lr}
 8011dbe:	4604      	mov	r4, r0
 8011dc0:	f7ff fff0 	bl	8011da4 <__sinit_lock_acquire>
 8011dc4:	69a3      	ldr	r3, [r4, #24]
 8011dc6:	b11b      	cbz	r3, 8011dd0 <__sinit+0x14>
 8011dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dcc:	f7ff bff0 	b.w	8011db0 <__sinit_lock_release>
 8011dd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011dd4:	6523      	str	r3, [r4, #80]	; 0x50
 8011dd6:	4b13      	ldr	r3, [pc, #76]	; (8011e24 <__sinit+0x68>)
 8011dd8:	4a13      	ldr	r2, [pc, #76]	; (8011e28 <__sinit+0x6c>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	62a2      	str	r2, [r4, #40]	; 0x28
 8011dde:	42a3      	cmp	r3, r4
 8011de0:	bf04      	itt	eq
 8011de2:	2301      	moveq	r3, #1
 8011de4:	61a3      	streq	r3, [r4, #24]
 8011de6:	4620      	mov	r0, r4
 8011de8:	f000 f820 	bl	8011e2c <__sfp>
 8011dec:	6060      	str	r0, [r4, #4]
 8011dee:	4620      	mov	r0, r4
 8011df0:	f000 f81c 	bl	8011e2c <__sfp>
 8011df4:	60a0      	str	r0, [r4, #8]
 8011df6:	4620      	mov	r0, r4
 8011df8:	f000 f818 	bl	8011e2c <__sfp>
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	60e0      	str	r0, [r4, #12]
 8011e00:	2104      	movs	r1, #4
 8011e02:	6860      	ldr	r0, [r4, #4]
 8011e04:	f7ff ff82 	bl	8011d0c <std>
 8011e08:	68a0      	ldr	r0, [r4, #8]
 8011e0a:	2201      	movs	r2, #1
 8011e0c:	2109      	movs	r1, #9
 8011e0e:	f7ff ff7d 	bl	8011d0c <std>
 8011e12:	68e0      	ldr	r0, [r4, #12]
 8011e14:	2202      	movs	r2, #2
 8011e16:	2112      	movs	r1, #18
 8011e18:	f7ff ff78 	bl	8011d0c <std>
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	61a3      	str	r3, [r4, #24]
 8011e20:	e7d2      	b.n	8011dc8 <__sinit+0xc>
 8011e22:	bf00      	nop
 8011e24:	08013108 	.word	0x08013108
 8011e28:	08011d55 	.word	0x08011d55

08011e2c <__sfp>:
 8011e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e2e:	4607      	mov	r7, r0
 8011e30:	f7ff ffac 	bl	8011d8c <__sfp_lock_acquire>
 8011e34:	4b1e      	ldr	r3, [pc, #120]	; (8011eb0 <__sfp+0x84>)
 8011e36:	681e      	ldr	r6, [r3, #0]
 8011e38:	69b3      	ldr	r3, [r6, #24]
 8011e3a:	b913      	cbnz	r3, 8011e42 <__sfp+0x16>
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	f7ff ffbd 	bl	8011dbc <__sinit>
 8011e42:	3648      	adds	r6, #72	; 0x48
 8011e44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e48:	3b01      	subs	r3, #1
 8011e4a:	d503      	bpl.n	8011e54 <__sfp+0x28>
 8011e4c:	6833      	ldr	r3, [r6, #0]
 8011e4e:	b30b      	cbz	r3, 8011e94 <__sfp+0x68>
 8011e50:	6836      	ldr	r6, [r6, #0]
 8011e52:	e7f7      	b.n	8011e44 <__sfp+0x18>
 8011e54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e58:	b9d5      	cbnz	r5, 8011e90 <__sfp+0x64>
 8011e5a:	4b16      	ldr	r3, [pc, #88]	; (8011eb4 <__sfp+0x88>)
 8011e5c:	60e3      	str	r3, [r4, #12]
 8011e5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e62:	6665      	str	r5, [r4, #100]	; 0x64
 8011e64:	f000 f85e 	bl	8011f24 <__retarget_lock_init_recursive>
 8011e68:	f7ff ff96 	bl	8011d98 <__sfp_lock_release>
 8011e6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e74:	6025      	str	r5, [r4, #0]
 8011e76:	61a5      	str	r5, [r4, #24]
 8011e78:	2208      	movs	r2, #8
 8011e7a:	4629      	mov	r1, r5
 8011e7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011e80:	f7fe fb30 	bl	80104e4 <memset>
 8011e84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011e88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011e8c:	4620      	mov	r0, r4
 8011e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e90:	3468      	adds	r4, #104	; 0x68
 8011e92:	e7d9      	b.n	8011e48 <__sfp+0x1c>
 8011e94:	2104      	movs	r1, #4
 8011e96:	4638      	mov	r0, r7
 8011e98:	f7ff ff62 	bl	8011d60 <__sfmoreglue>
 8011e9c:	4604      	mov	r4, r0
 8011e9e:	6030      	str	r0, [r6, #0]
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	d1d5      	bne.n	8011e50 <__sfp+0x24>
 8011ea4:	f7ff ff78 	bl	8011d98 <__sfp_lock_release>
 8011ea8:	230c      	movs	r3, #12
 8011eaa:	603b      	str	r3, [r7, #0]
 8011eac:	e7ee      	b.n	8011e8c <__sfp+0x60>
 8011eae:	bf00      	nop
 8011eb0:	08013108 	.word	0x08013108
 8011eb4:	ffff0001 	.word	0xffff0001

08011eb8 <fiprintf>:
 8011eb8:	b40e      	push	{r1, r2, r3}
 8011eba:	b503      	push	{r0, r1, lr}
 8011ebc:	4601      	mov	r1, r0
 8011ebe:	ab03      	add	r3, sp, #12
 8011ec0:	4805      	ldr	r0, [pc, #20]	; (8011ed8 <fiprintf+0x20>)
 8011ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ec6:	6800      	ldr	r0, [r0, #0]
 8011ec8:	9301      	str	r3, [sp, #4]
 8011eca:	f000 fc11 	bl	80126f0 <_vfiprintf_r>
 8011ece:	b002      	add	sp, #8
 8011ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ed4:	b003      	add	sp, #12
 8011ed6:	4770      	bx	lr
 8011ed8:	20000184 	.word	0x20000184

08011edc <_fwalk_reent>:
 8011edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ee0:	4606      	mov	r6, r0
 8011ee2:	4688      	mov	r8, r1
 8011ee4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ee8:	2700      	movs	r7, #0
 8011eea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011eee:	f1b9 0901 	subs.w	r9, r9, #1
 8011ef2:	d505      	bpl.n	8011f00 <_fwalk_reent+0x24>
 8011ef4:	6824      	ldr	r4, [r4, #0]
 8011ef6:	2c00      	cmp	r4, #0
 8011ef8:	d1f7      	bne.n	8011eea <_fwalk_reent+0xe>
 8011efa:	4638      	mov	r0, r7
 8011efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f00:	89ab      	ldrh	r3, [r5, #12]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d907      	bls.n	8011f16 <_fwalk_reent+0x3a>
 8011f06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	d003      	beq.n	8011f16 <_fwalk_reent+0x3a>
 8011f0e:	4629      	mov	r1, r5
 8011f10:	4630      	mov	r0, r6
 8011f12:	47c0      	blx	r8
 8011f14:	4307      	orrs	r7, r0
 8011f16:	3568      	adds	r5, #104	; 0x68
 8011f18:	e7e9      	b.n	8011eee <_fwalk_reent+0x12>
	...

08011f1c <_localeconv_r>:
 8011f1c:	4800      	ldr	r0, [pc, #0]	; (8011f20 <_localeconv_r+0x4>)
 8011f1e:	4770      	bx	lr
 8011f20:	200002d8 	.word	0x200002d8

08011f24 <__retarget_lock_init_recursive>:
 8011f24:	4770      	bx	lr

08011f26 <__retarget_lock_acquire_recursive>:
 8011f26:	4770      	bx	lr

08011f28 <__retarget_lock_release_recursive>:
 8011f28:	4770      	bx	lr

08011f2a <__ascii_mbtowc>:
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	b901      	cbnz	r1, 8011f30 <__ascii_mbtowc+0x6>
 8011f2e:	a901      	add	r1, sp, #4
 8011f30:	b142      	cbz	r2, 8011f44 <__ascii_mbtowc+0x1a>
 8011f32:	b14b      	cbz	r3, 8011f48 <__ascii_mbtowc+0x1e>
 8011f34:	7813      	ldrb	r3, [r2, #0]
 8011f36:	600b      	str	r3, [r1, #0]
 8011f38:	7812      	ldrb	r2, [r2, #0]
 8011f3a:	1e10      	subs	r0, r2, #0
 8011f3c:	bf18      	it	ne
 8011f3e:	2001      	movne	r0, #1
 8011f40:	b002      	add	sp, #8
 8011f42:	4770      	bx	lr
 8011f44:	4610      	mov	r0, r2
 8011f46:	e7fb      	b.n	8011f40 <__ascii_mbtowc+0x16>
 8011f48:	f06f 0001 	mvn.w	r0, #1
 8011f4c:	e7f8      	b.n	8011f40 <__ascii_mbtowc+0x16>
	...

08011f50 <__malloc_lock>:
 8011f50:	4801      	ldr	r0, [pc, #4]	; (8011f58 <__malloc_lock+0x8>)
 8011f52:	f7ff bfe8 	b.w	8011f26 <__retarget_lock_acquire_recursive>
 8011f56:	bf00      	nop
 8011f58:	200028dc 	.word	0x200028dc

08011f5c <__malloc_unlock>:
 8011f5c:	4801      	ldr	r0, [pc, #4]	; (8011f64 <__malloc_unlock+0x8>)
 8011f5e:	f7ff bfe3 	b.w	8011f28 <__retarget_lock_release_recursive>
 8011f62:	bf00      	nop
 8011f64:	200028dc 	.word	0x200028dc

08011f68 <_Balloc>:
 8011f68:	b570      	push	{r4, r5, r6, lr}
 8011f6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	460d      	mov	r5, r1
 8011f70:	b976      	cbnz	r6, 8011f90 <_Balloc+0x28>
 8011f72:	2010      	movs	r0, #16
 8011f74:	f7fe faa0 	bl	80104b8 <malloc>
 8011f78:	4602      	mov	r2, r0
 8011f7a:	6260      	str	r0, [r4, #36]	; 0x24
 8011f7c:	b920      	cbnz	r0, 8011f88 <_Balloc+0x20>
 8011f7e:	4b18      	ldr	r3, [pc, #96]	; (8011fe0 <_Balloc+0x78>)
 8011f80:	4818      	ldr	r0, [pc, #96]	; (8011fe4 <_Balloc+0x7c>)
 8011f82:	2166      	movs	r1, #102	; 0x66
 8011f84:	f7ff f828 	bl	8010fd8 <__assert_func>
 8011f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f8c:	6006      	str	r6, [r0, #0]
 8011f8e:	60c6      	str	r6, [r0, #12]
 8011f90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011f92:	68f3      	ldr	r3, [r6, #12]
 8011f94:	b183      	cbz	r3, 8011fb8 <_Balloc+0x50>
 8011f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011f9e:	b9b8      	cbnz	r0, 8011fd0 <_Balloc+0x68>
 8011fa0:	2101      	movs	r1, #1
 8011fa2:	fa01 f605 	lsl.w	r6, r1, r5
 8011fa6:	1d72      	adds	r2, r6, #5
 8011fa8:	0092      	lsls	r2, r2, #2
 8011faa:	4620      	mov	r0, r4
 8011fac:	f000 fb60 	bl	8012670 <_calloc_r>
 8011fb0:	b160      	cbz	r0, 8011fcc <_Balloc+0x64>
 8011fb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011fb6:	e00e      	b.n	8011fd6 <_Balloc+0x6e>
 8011fb8:	2221      	movs	r2, #33	; 0x21
 8011fba:	2104      	movs	r1, #4
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	f000 fb57 	bl	8012670 <_calloc_r>
 8011fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fc4:	60f0      	str	r0, [r6, #12]
 8011fc6:	68db      	ldr	r3, [r3, #12]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d1e4      	bne.n	8011f96 <_Balloc+0x2e>
 8011fcc:	2000      	movs	r0, #0
 8011fce:	bd70      	pop	{r4, r5, r6, pc}
 8011fd0:	6802      	ldr	r2, [r0, #0]
 8011fd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011fdc:	e7f7      	b.n	8011fce <_Balloc+0x66>
 8011fde:	bf00      	nop
 8011fe0:	0801328a 	.word	0x0801328a
 8011fe4:	0801337a 	.word	0x0801337a

08011fe8 <_Bfree>:
 8011fe8:	b570      	push	{r4, r5, r6, lr}
 8011fea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011fec:	4605      	mov	r5, r0
 8011fee:	460c      	mov	r4, r1
 8011ff0:	b976      	cbnz	r6, 8012010 <_Bfree+0x28>
 8011ff2:	2010      	movs	r0, #16
 8011ff4:	f7fe fa60 	bl	80104b8 <malloc>
 8011ff8:	4602      	mov	r2, r0
 8011ffa:	6268      	str	r0, [r5, #36]	; 0x24
 8011ffc:	b920      	cbnz	r0, 8012008 <_Bfree+0x20>
 8011ffe:	4b09      	ldr	r3, [pc, #36]	; (8012024 <_Bfree+0x3c>)
 8012000:	4809      	ldr	r0, [pc, #36]	; (8012028 <_Bfree+0x40>)
 8012002:	218a      	movs	r1, #138	; 0x8a
 8012004:	f7fe ffe8 	bl	8010fd8 <__assert_func>
 8012008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801200c:	6006      	str	r6, [r0, #0]
 801200e:	60c6      	str	r6, [r0, #12]
 8012010:	b13c      	cbz	r4, 8012022 <_Bfree+0x3a>
 8012012:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012014:	6862      	ldr	r2, [r4, #4]
 8012016:	68db      	ldr	r3, [r3, #12]
 8012018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801201c:	6021      	str	r1, [r4, #0]
 801201e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012022:	bd70      	pop	{r4, r5, r6, pc}
 8012024:	0801328a 	.word	0x0801328a
 8012028:	0801337a 	.word	0x0801337a

0801202c <__multadd>:
 801202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012030:	690d      	ldr	r5, [r1, #16]
 8012032:	4607      	mov	r7, r0
 8012034:	460c      	mov	r4, r1
 8012036:	461e      	mov	r6, r3
 8012038:	f101 0c14 	add.w	ip, r1, #20
 801203c:	2000      	movs	r0, #0
 801203e:	f8dc 3000 	ldr.w	r3, [ip]
 8012042:	b299      	uxth	r1, r3
 8012044:	fb02 6101 	mla	r1, r2, r1, r6
 8012048:	0c1e      	lsrs	r6, r3, #16
 801204a:	0c0b      	lsrs	r3, r1, #16
 801204c:	fb02 3306 	mla	r3, r2, r6, r3
 8012050:	b289      	uxth	r1, r1
 8012052:	3001      	adds	r0, #1
 8012054:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012058:	4285      	cmp	r5, r0
 801205a:	f84c 1b04 	str.w	r1, [ip], #4
 801205e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012062:	dcec      	bgt.n	801203e <__multadd+0x12>
 8012064:	b30e      	cbz	r6, 80120aa <__multadd+0x7e>
 8012066:	68a3      	ldr	r3, [r4, #8]
 8012068:	42ab      	cmp	r3, r5
 801206a:	dc19      	bgt.n	80120a0 <__multadd+0x74>
 801206c:	6861      	ldr	r1, [r4, #4]
 801206e:	4638      	mov	r0, r7
 8012070:	3101      	adds	r1, #1
 8012072:	f7ff ff79 	bl	8011f68 <_Balloc>
 8012076:	4680      	mov	r8, r0
 8012078:	b928      	cbnz	r0, 8012086 <__multadd+0x5a>
 801207a:	4602      	mov	r2, r0
 801207c:	4b0c      	ldr	r3, [pc, #48]	; (80120b0 <__multadd+0x84>)
 801207e:	480d      	ldr	r0, [pc, #52]	; (80120b4 <__multadd+0x88>)
 8012080:	21b5      	movs	r1, #181	; 0xb5
 8012082:	f7fe ffa9 	bl	8010fd8 <__assert_func>
 8012086:	6922      	ldr	r2, [r4, #16]
 8012088:	3202      	adds	r2, #2
 801208a:	f104 010c 	add.w	r1, r4, #12
 801208e:	0092      	lsls	r2, r2, #2
 8012090:	300c      	adds	r0, #12
 8012092:	f7fe fa19 	bl	80104c8 <memcpy>
 8012096:	4621      	mov	r1, r4
 8012098:	4638      	mov	r0, r7
 801209a:	f7ff ffa5 	bl	8011fe8 <_Bfree>
 801209e:	4644      	mov	r4, r8
 80120a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80120a4:	3501      	adds	r5, #1
 80120a6:	615e      	str	r6, [r3, #20]
 80120a8:	6125      	str	r5, [r4, #16]
 80120aa:	4620      	mov	r0, r4
 80120ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120b0:	080132fc 	.word	0x080132fc
 80120b4:	0801337a 	.word	0x0801337a

080120b8 <__hi0bits>:
 80120b8:	0c03      	lsrs	r3, r0, #16
 80120ba:	041b      	lsls	r3, r3, #16
 80120bc:	b9d3      	cbnz	r3, 80120f4 <__hi0bits+0x3c>
 80120be:	0400      	lsls	r0, r0, #16
 80120c0:	2310      	movs	r3, #16
 80120c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80120c6:	bf04      	itt	eq
 80120c8:	0200      	lsleq	r0, r0, #8
 80120ca:	3308      	addeq	r3, #8
 80120cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80120d0:	bf04      	itt	eq
 80120d2:	0100      	lsleq	r0, r0, #4
 80120d4:	3304      	addeq	r3, #4
 80120d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80120da:	bf04      	itt	eq
 80120dc:	0080      	lsleq	r0, r0, #2
 80120de:	3302      	addeq	r3, #2
 80120e0:	2800      	cmp	r0, #0
 80120e2:	db05      	blt.n	80120f0 <__hi0bits+0x38>
 80120e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80120e8:	f103 0301 	add.w	r3, r3, #1
 80120ec:	bf08      	it	eq
 80120ee:	2320      	moveq	r3, #32
 80120f0:	4618      	mov	r0, r3
 80120f2:	4770      	bx	lr
 80120f4:	2300      	movs	r3, #0
 80120f6:	e7e4      	b.n	80120c2 <__hi0bits+0xa>

080120f8 <__lo0bits>:
 80120f8:	6803      	ldr	r3, [r0, #0]
 80120fa:	f013 0207 	ands.w	r2, r3, #7
 80120fe:	4601      	mov	r1, r0
 8012100:	d00b      	beq.n	801211a <__lo0bits+0x22>
 8012102:	07da      	lsls	r2, r3, #31
 8012104:	d423      	bmi.n	801214e <__lo0bits+0x56>
 8012106:	0798      	lsls	r0, r3, #30
 8012108:	bf49      	itett	mi
 801210a:	085b      	lsrmi	r3, r3, #1
 801210c:	089b      	lsrpl	r3, r3, #2
 801210e:	2001      	movmi	r0, #1
 8012110:	600b      	strmi	r3, [r1, #0]
 8012112:	bf5c      	itt	pl
 8012114:	600b      	strpl	r3, [r1, #0]
 8012116:	2002      	movpl	r0, #2
 8012118:	4770      	bx	lr
 801211a:	b298      	uxth	r0, r3
 801211c:	b9a8      	cbnz	r0, 801214a <__lo0bits+0x52>
 801211e:	0c1b      	lsrs	r3, r3, #16
 8012120:	2010      	movs	r0, #16
 8012122:	b2da      	uxtb	r2, r3
 8012124:	b90a      	cbnz	r2, 801212a <__lo0bits+0x32>
 8012126:	3008      	adds	r0, #8
 8012128:	0a1b      	lsrs	r3, r3, #8
 801212a:	071a      	lsls	r2, r3, #28
 801212c:	bf04      	itt	eq
 801212e:	091b      	lsreq	r3, r3, #4
 8012130:	3004      	addeq	r0, #4
 8012132:	079a      	lsls	r2, r3, #30
 8012134:	bf04      	itt	eq
 8012136:	089b      	lsreq	r3, r3, #2
 8012138:	3002      	addeq	r0, #2
 801213a:	07da      	lsls	r2, r3, #31
 801213c:	d403      	bmi.n	8012146 <__lo0bits+0x4e>
 801213e:	085b      	lsrs	r3, r3, #1
 8012140:	f100 0001 	add.w	r0, r0, #1
 8012144:	d005      	beq.n	8012152 <__lo0bits+0x5a>
 8012146:	600b      	str	r3, [r1, #0]
 8012148:	4770      	bx	lr
 801214a:	4610      	mov	r0, r2
 801214c:	e7e9      	b.n	8012122 <__lo0bits+0x2a>
 801214e:	2000      	movs	r0, #0
 8012150:	4770      	bx	lr
 8012152:	2020      	movs	r0, #32
 8012154:	4770      	bx	lr
	...

08012158 <__i2b>:
 8012158:	b510      	push	{r4, lr}
 801215a:	460c      	mov	r4, r1
 801215c:	2101      	movs	r1, #1
 801215e:	f7ff ff03 	bl	8011f68 <_Balloc>
 8012162:	4602      	mov	r2, r0
 8012164:	b928      	cbnz	r0, 8012172 <__i2b+0x1a>
 8012166:	4b05      	ldr	r3, [pc, #20]	; (801217c <__i2b+0x24>)
 8012168:	4805      	ldr	r0, [pc, #20]	; (8012180 <__i2b+0x28>)
 801216a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801216e:	f7fe ff33 	bl	8010fd8 <__assert_func>
 8012172:	2301      	movs	r3, #1
 8012174:	6144      	str	r4, [r0, #20]
 8012176:	6103      	str	r3, [r0, #16]
 8012178:	bd10      	pop	{r4, pc}
 801217a:	bf00      	nop
 801217c:	080132fc 	.word	0x080132fc
 8012180:	0801337a 	.word	0x0801337a

08012184 <__multiply>:
 8012184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012188:	4691      	mov	r9, r2
 801218a:	690a      	ldr	r2, [r1, #16]
 801218c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012190:	429a      	cmp	r2, r3
 8012192:	bfb8      	it	lt
 8012194:	460b      	movlt	r3, r1
 8012196:	460c      	mov	r4, r1
 8012198:	bfbc      	itt	lt
 801219a:	464c      	movlt	r4, r9
 801219c:	4699      	movlt	r9, r3
 801219e:	6927      	ldr	r7, [r4, #16]
 80121a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80121a4:	68a3      	ldr	r3, [r4, #8]
 80121a6:	6861      	ldr	r1, [r4, #4]
 80121a8:	eb07 060a 	add.w	r6, r7, sl
 80121ac:	42b3      	cmp	r3, r6
 80121ae:	b085      	sub	sp, #20
 80121b0:	bfb8      	it	lt
 80121b2:	3101      	addlt	r1, #1
 80121b4:	f7ff fed8 	bl	8011f68 <_Balloc>
 80121b8:	b930      	cbnz	r0, 80121c8 <__multiply+0x44>
 80121ba:	4602      	mov	r2, r0
 80121bc:	4b44      	ldr	r3, [pc, #272]	; (80122d0 <__multiply+0x14c>)
 80121be:	4845      	ldr	r0, [pc, #276]	; (80122d4 <__multiply+0x150>)
 80121c0:	f240 115d 	movw	r1, #349	; 0x15d
 80121c4:	f7fe ff08 	bl	8010fd8 <__assert_func>
 80121c8:	f100 0514 	add.w	r5, r0, #20
 80121cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80121d0:	462b      	mov	r3, r5
 80121d2:	2200      	movs	r2, #0
 80121d4:	4543      	cmp	r3, r8
 80121d6:	d321      	bcc.n	801221c <__multiply+0x98>
 80121d8:	f104 0314 	add.w	r3, r4, #20
 80121dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80121e0:	f109 0314 	add.w	r3, r9, #20
 80121e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80121e8:	9202      	str	r2, [sp, #8]
 80121ea:	1b3a      	subs	r2, r7, r4
 80121ec:	3a15      	subs	r2, #21
 80121ee:	f022 0203 	bic.w	r2, r2, #3
 80121f2:	3204      	adds	r2, #4
 80121f4:	f104 0115 	add.w	r1, r4, #21
 80121f8:	428f      	cmp	r7, r1
 80121fa:	bf38      	it	cc
 80121fc:	2204      	movcc	r2, #4
 80121fe:	9201      	str	r2, [sp, #4]
 8012200:	9a02      	ldr	r2, [sp, #8]
 8012202:	9303      	str	r3, [sp, #12]
 8012204:	429a      	cmp	r2, r3
 8012206:	d80c      	bhi.n	8012222 <__multiply+0x9e>
 8012208:	2e00      	cmp	r6, #0
 801220a:	dd03      	ble.n	8012214 <__multiply+0x90>
 801220c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012210:	2b00      	cmp	r3, #0
 8012212:	d05a      	beq.n	80122ca <__multiply+0x146>
 8012214:	6106      	str	r6, [r0, #16]
 8012216:	b005      	add	sp, #20
 8012218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221c:	f843 2b04 	str.w	r2, [r3], #4
 8012220:	e7d8      	b.n	80121d4 <__multiply+0x50>
 8012222:	f8b3 a000 	ldrh.w	sl, [r3]
 8012226:	f1ba 0f00 	cmp.w	sl, #0
 801222a:	d024      	beq.n	8012276 <__multiply+0xf2>
 801222c:	f104 0e14 	add.w	lr, r4, #20
 8012230:	46a9      	mov	r9, r5
 8012232:	f04f 0c00 	mov.w	ip, #0
 8012236:	f85e 2b04 	ldr.w	r2, [lr], #4
 801223a:	f8d9 1000 	ldr.w	r1, [r9]
 801223e:	fa1f fb82 	uxth.w	fp, r2
 8012242:	b289      	uxth	r1, r1
 8012244:	fb0a 110b 	mla	r1, sl, fp, r1
 8012248:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801224c:	f8d9 2000 	ldr.w	r2, [r9]
 8012250:	4461      	add	r1, ip
 8012252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012256:	fb0a c20b 	mla	r2, sl, fp, ip
 801225a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801225e:	b289      	uxth	r1, r1
 8012260:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012264:	4577      	cmp	r7, lr
 8012266:	f849 1b04 	str.w	r1, [r9], #4
 801226a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801226e:	d8e2      	bhi.n	8012236 <__multiply+0xb2>
 8012270:	9a01      	ldr	r2, [sp, #4]
 8012272:	f845 c002 	str.w	ip, [r5, r2]
 8012276:	9a03      	ldr	r2, [sp, #12]
 8012278:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801227c:	3304      	adds	r3, #4
 801227e:	f1b9 0f00 	cmp.w	r9, #0
 8012282:	d020      	beq.n	80122c6 <__multiply+0x142>
 8012284:	6829      	ldr	r1, [r5, #0]
 8012286:	f104 0c14 	add.w	ip, r4, #20
 801228a:	46ae      	mov	lr, r5
 801228c:	f04f 0a00 	mov.w	sl, #0
 8012290:	f8bc b000 	ldrh.w	fp, [ip]
 8012294:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012298:	fb09 220b 	mla	r2, r9, fp, r2
 801229c:	4492      	add	sl, r2
 801229e:	b289      	uxth	r1, r1
 80122a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80122a4:	f84e 1b04 	str.w	r1, [lr], #4
 80122a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80122ac:	f8be 1000 	ldrh.w	r1, [lr]
 80122b0:	0c12      	lsrs	r2, r2, #16
 80122b2:	fb09 1102 	mla	r1, r9, r2, r1
 80122b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80122ba:	4567      	cmp	r7, ip
 80122bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80122c0:	d8e6      	bhi.n	8012290 <__multiply+0x10c>
 80122c2:	9a01      	ldr	r2, [sp, #4]
 80122c4:	50a9      	str	r1, [r5, r2]
 80122c6:	3504      	adds	r5, #4
 80122c8:	e79a      	b.n	8012200 <__multiply+0x7c>
 80122ca:	3e01      	subs	r6, #1
 80122cc:	e79c      	b.n	8012208 <__multiply+0x84>
 80122ce:	bf00      	nop
 80122d0:	080132fc 	.word	0x080132fc
 80122d4:	0801337a 	.word	0x0801337a

080122d8 <__pow5mult>:
 80122d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122dc:	4615      	mov	r5, r2
 80122de:	f012 0203 	ands.w	r2, r2, #3
 80122e2:	4606      	mov	r6, r0
 80122e4:	460f      	mov	r7, r1
 80122e6:	d007      	beq.n	80122f8 <__pow5mult+0x20>
 80122e8:	4c25      	ldr	r4, [pc, #148]	; (8012380 <__pow5mult+0xa8>)
 80122ea:	3a01      	subs	r2, #1
 80122ec:	2300      	movs	r3, #0
 80122ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80122f2:	f7ff fe9b 	bl	801202c <__multadd>
 80122f6:	4607      	mov	r7, r0
 80122f8:	10ad      	asrs	r5, r5, #2
 80122fa:	d03d      	beq.n	8012378 <__pow5mult+0xa0>
 80122fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80122fe:	b97c      	cbnz	r4, 8012320 <__pow5mult+0x48>
 8012300:	2010      	movs	r0, #16
 8012302:	f7fe f8d9 	bl	80104b8 <malloc>
 8012306:	4602      	mov	r2, r0
 8012308:	6270      	str	r0, [r6, #36]	; 0x24
 801230a:	b928      	cbnz	r0, 8012318 <__pow5mult+0x40>
 801230c:	4b1d      	ldr	r3, [pc, #116]	; (8012384 <__pow5mult+0xac>)
 801230e:	481e      	ldr	r0, [pc, #120]	; (8012388 <__pow5mult+0xb0>)
 8012310:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012314:	f7fe fe60 	bl	8010fd8 <__assert_func>
 8012318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801231c:	6004      	str	r4, [r0, #0]
 801231e:	60c4      	str	r4, [r0, #12]
 8012320:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012328:	b94c      	cbnz	r4, 801233e <__pow5mult+0x66>
 801232a:	f240 2171 	movw	r1, #625	; 0x271
 801232e:	4630      	mov	r0, r6
 8012330:	f7ff ff12 	bl	8012158 <__i2b>
 8012334:	2300      	movs	r3, #0
 8012336:	f8c8 0008 	str.w	r0, [r8, #8]
 801233a:	4604      	mov	r4, r0
 801233c:	6003      	str	r3, [r0, #0]
 801233e:	f04f 0900 	mov.w	r9, #0
 8012342:	07eb      	lsls	r3, r5, #31
 8012344:	d50a      	bpl.n	801235c <__pow5mult+0x84>
 8012346:	4639      	mov	r1, r7
 8012348:	4622      	mov	r2, r4
 801234a:	4630      	mov	r0, r6
 801234c:	f7ff ff1a 	bl	8012184 <__multiply>
 8012350:	4639      	mov	r1, r7
 8012352:	4680      	mov	r8, r0
 8012354:	4630      	mov	r0, r6
 8012356:	f7ff fe47 	bl	8011fe8 <_Bfree>
 801235a:	4647      	mov	r7, r8
 801235c:	106d      	asrs	r5, r5, #1
 801235e:	d00b      	beq.n	8012378 <__pow5mult+0xa0>
 8012360:	6820      	ldr	r0, [r4, #0]
 8012362:	b938      	cbnz	r0, 8012374 <__pow5mult+0x9c>
 8012364:	4622      	mov	r2, r4
 8012366:	4621      	mov	r1, r4
 8012368:	4630      	mov	r0, r6
 801236a:	f7ff ff0b 	bl	8012184 <__multiply>
 801236e:	6020      	str	r0, [r4, #0]
 8012370:	f8c0 9000 	str.w	r9, [r0]
 8012374:	4604      	mov	r4, r0
 8012376:	e7e4      	b.n	8012342 <__pow5mult+0x6a>
 8012378:	4638      	mov	r0, r7
 801237a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801237e:	bf00      	nop
 8012380:	080134c8 	.word	0x080134c8
 8012384:	0801328a 	.word	0x0801328a
 8012388:	0801337a 	.word	0x0801337a

0801238c <__lshift>:
 801238c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012390:	460c      	mov	r4, r1
 8012392:	6849      	ldr	r1, [r1, #4]
 8012394:	6923      	ldr	r3, [r4, #16]
 8012396:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801239a:	68a3      	ldr	r3, [r4, #8]
 801239c:	4607      	mov	r7, r0
 801239e:	4691      	mov	r9, r2
 80123a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80123a4:	f108 0601 	add.w	r6, r8, #1
 80123a8:	42b3      	cmp	r3, r6
 80123aa:	db0b      	blt.n	80123c4 <__lshift+0x38>
 80123ac:	4638      	mov	r0, r7
 80123ae:	f7ff fddb 	bl	8011f68 <_Balloc>
 80123b2:	4605      	mov	r5, r0
 80123b4:	b948      	cbnz	r0, 80123ca <__lshift+0x3e>
 80123b6:	4602      	mov	r2, r0
 80123b8:	4b2a      	ldr	r3, [pc, #168]	; (8012464 <__lshift+0xd8>)
 80123ba:	482b      	ldr	r0, [pc, #172]	; (8012468 <__lshift+0xdc>)
 80123bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80123c0:	f7fe fe0a 	bl	8010fd8 <__assert_func>
 80123c4:	3101      	adds	r1, #1
 80123c6:	005b      	lsls	r3, r3, #1
 80123c8:	e7ee      	b.n	80123a8 <__lshift+0x1c>
 80123ca:	2300      	movs	r3, #0
 80123cc:	f100 0114 	add.w	r1, r0, #20
 80123d0:	f100 0210 	add.w	r2, r0, #16
 80123d4:	4618      	mov	r0, r3
 80123d6:	4553      	cmp	r3, sl
 80123d8:	db37      	blt.n	801244a <__lshift+0xbe>
 80123da:	6920      	ldr	r0, [r4, #16]
 80123dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80123e0:	f104 0314 	add.w	r3, r4, #20
 80123e4:	f019 091f 	ands.w	r9, r9, #31
 80123e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80123ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80123f0:	d02f      	beq.n	8012452 <__lshift+0xc6>
 80123f2:	f1c9 0e20 	rsb	lr, r9, #32
 80123f6:	468a      	mov	sl, r1
 80123f8:	f04f 0c00 	mov.w	ip, #0
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	fa02 f209 	lsl.w	r2, r2, r9
 8012402:	ea42 020c 	orr.w	r2, r2, ip
 8012406:	f84a 2b04 	str.w	r2, [sl], #4
 801240a:	f853 2b04 	ldr.w	r2, [r3], #4
 801240e:	4298      	cmp	r0, r3
 8012410:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012414:	d8f2      	bhi.n	80123fc <__lshift+0x70>
 8012416:	1b03      	subs	r3, r0, r4
 8012418:	3b15      	subs	r3, #21
 801241a:	f023 0303 	bic.w	r3, r3, #3
 801241e:	3304      	adds	r3, #4
 8012420:	f104 0215 	add.w	r2, r4, #21
 8012424:	4290      	cmp	r0, r2
 8012426:	bf38      	it	cc
 8012428:	2304      	movcc	r3, #4
 801242a:	f841 c003 	str.w	ip, [r1, r3]
 801242e:	f1bc 0f00 	cmp.w	ip, #0
 8012432:	d001      	beq.n	8012438 <__lshift+0xac>
 8012434:	f108 0602 	add.w	r6, r8, #2
 8012438:	3e01      	subs	r6, #1
 801243a:	4638      	mov	r0, r7
 801243c:	612e      	str	r6, [r5, #16]
 801243e:	4621      	mov	r1, r4
 8012440:	f7ff fdd2 	bl	8011fe8 <_Bfree>
 8012444:	4628      	mov	r0, r5
 8012446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801244a:	f842 0f04 	str.w	r0, [r2, #4]!
 801244e:	3301      	adds	r3, #1
 8012450:	e7c1      	b.n	80123d6 <__lshift+0x4a>
 8012452:	3904      	subs	r1, #4
 8012454:	f853 2b04 	ldr.w	r2, [r3], #4
 8012458:	f841 2f04 	str.w	r2, [r1, #4]!
 801245c:	4298      	cmp	r0, r3
 801245e:	d8f9      	bhi.n	8012454 <__lshift+0xc8>
 8012460:	e7ea      	b.n	8012438 <__lshift+0xac>
 8012462:	bf00      	nop
 8012464:	080132fc 	.word	0x080132fc
 8012468:	0801337a 	.word	0x0801337a

0801246c <__mcmp>:
 801246c:	b530      	push	{r4, r5, lr}
 801246e:	6902      	ldr	r2, [r0, #16]
 8012470:	690c      	ldr	r4, [r1, #16]
 8012472:	1b12      	subs	r2, r2, r4
 8012474:	d10e      	bne.n	8012494 <__mcmp+0x28>
 8012476:	f100 0314 	add.w	r3, r0, #20
 801247a:	3114      	adds	r1, #20
 801247c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012480:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012484:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012488:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801248c:	42a5      	cmp	r5, r4
 801248e:	d003      	beq.n	8012498 <__mcmp+0x2c>
 8012490:	d305      	bcc.n	801249e <__mcmp+0x32>
 8012492:	2201      	movs	r2, #1
 8012494:	4610      	mov	r0, r2
 8012496:	bd30      	pop	{r4, r5, pc}
 8012498:	4283      	cmp	r3, r0
 801249a:	d3f3      	bcc.n	8012484 <__mcmp+0x18>
 801249c:	e7fa      	b.n	8012494 <__mcmp+0x28>
 801249e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124a2:	e7f7      	b.n	8012494 <__mcmp+0x28>

080124a4 <__mdiff>:
 80124a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a8:	460c      	mov	r4, r1
 80124aa:	4606      	mov	r6, r0
 80124ac:	4611      	mov	r1, r2
 80124ae:	4620      	mov	r0, r4
 80124b0:	4690      	mov	r8, r2
 80124b2:	f7ff ffdb 	bl	801246c <__mcmp>
 80124b6:	1e05      	subs	r5, r0, #0
 80124b8:	d110      	bne.n	80124dc <__mdiff+0x38>
 80124ba:	4629      	mov	r1, r5
 80124bc:	4630      	mov	r0, r6
 80124be:	f7ff fd53 	bl	8011f68 <_Balloc>
 80124c2:	b930      	cbnz	r0, 80124d2 <__mdiff+0x2e>
 80124c4:	4b3a      	ldr	r3, [pc, #232]	; (80125b0 <__mdiff+0x10c>)
 80124c6:	4602      	mov	r2, r0
 80124c8:	f240 2132 	movw	r1, #562	; 0x232
 80124cc:	4839      	ldr	r0, [pc, #228]	; (80125b4 <__mdiff+0x110>)
 80124ce:	f7fe fd83 	bl	8010fd8 <__assert_func>
 80124d2:	2301      	movs	r3, #1
 80124d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80124d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124dc:	bfa4      	itt	ge
 80124de:	4643      	movge	r3, r8
 80124e0:	46a0      	movge	r8, r4
 80124e2:	4630      	mov	r0, r6
 80124e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80124e8:	bfa6      	itte	ge
 80124ea:	461c      	movge	r4, r3
 80124ec:	2500      	movge	r5, #0
 80124ee:	2501      	movlt	r5, #1
 80124f0:	f7ff fd3a 	bl	8011f68 <_Balloc>
 80124f4:	b920      	cbnz	r0, 8012500 <__mdiff+0x5c>
 80124f6:	4b2e      	ldr	r3, [pc, #184]	; (80125b0 <__mdiff+0x10c>)
 80124f8:	4602      	mov	r2, r0
 80124fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80124fe:	e7e5      	b.n	80124cc <__mdiff+0x28>
 8012500:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012504:	6926      	ldr	r6, [r4, #16]
 8012506:	60c5      	str	r5, [r0, #12]
 8012508:	f104 0914 	add.w	r9, r4, #20
 801250c:	f108 0514 	add.w	r5, r8, #20
 8012510:	f100 0e14 	add.w	lr, r0, #20
 8012514:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012518:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801251c:	f108 0210 	add.w	r2, r8, #16
 8012520:	46f2      	mov	sl, lr
 8012522:	2100      	movs	r1, #0
 8012524:	f859 3b04 	ldr.w	r3, [r9], #4
 8012528:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801252c:	fa1f f883 	uxth.w	r8, r3
 8012530:	fa11 f18b 	uxtah	r1, r1, fp
 8012534:	0c1b      	lsrs	r3, r3, #16
 8012536:	eba1 0808 	sub.w	r8, r1, r8
 801253a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801253e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012542:	fa1f f888 	uxth.w	r8, r8
 8012546:	1419      	asrs	r1, r3, #16
 8012548:	454e      	cmp	r6, r9
 801254a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801254e:	f84a 3b04 	str.w	r3, [sl], #4
 8012552:	d8e7      	bhi.n	8012524 <__mdiff+0x80>
 8012554:	1b33      	subs	r3, r6, r4
 8012556:	3b15      	subs	r3, #21
 8012558:	f023 0303 	bic.w	r3, r3, #3
 801255c:	3304      	adds	r3, #4
 801255e:	3415      	adds	r4, #21
 8012560:	42a6      	cmp	r6, r4
 8012562:	bf38      	it	cc
 8012564:	2304      	movcc	r3, #4
 8012566:	441d      	add	r5, r3
 8012568:	4473      	add	r3, lr
 801256a:	469e      	mov	lr, r3
 801256c:	462e      	mov	r6, r5
 801256e:	4566      	cmp	r6, ip
 8012570:	d30e      	bcc.n	8012590 <__mdiff+0xec>
 8012572:	f10c 0203 	add.w	r2, ip, #3
 8012576:	1b52      	subs	r2, r2, r5
 8012578:	f022 0203 	bic.w	r2, r2, #3
 801257c:	3d03      	subs	r5, #3
 801257e:	45ac      	cmp	ip, r5
 8012580:	bf38      	it	cc
 8012582:	2200      	movcc	r2, #0
 8012584:	441a      	add	r2, r3
 8012586:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801258a:	b17b      	cbz	r3, 80125ac <__mdiff+0x108>
 801258c:	6107      	str	r7, [r0, #16]
 801258e:	e7a3      	b.n	80124d8 <__mdiff+0x34>
 8012590:	f856 8b04 	ldr.w	r8, [r6], #4
 8012594:	fa11 f288 	uxtah	r2, r1, r8
 8012598:	1414      	asrs	r4, r2, #16
 801259a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801259e:	b292      	uxth	r2, r2
 80125a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80125a4:	f84e 2b04 	str.w	r2, [lr], #4
 80125a8:	1421      	asrs	r1, r4, #16
 80125aa:	e7e0      	b.n	801256e <__mdiff+0xca>
 80125ac:	3f01      	subs	r7, #1
 80125ae:	e7ea      	b.n	8012586 <__mdiff+0xe2>
 80125b0:	080132fc 	.word	0x080132fc
 80125b4:	0801337a 	.word	0x0801337a

080125b8 <__d2b>:
 80125b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80125bc:	4689      	mov	r9, r1
 80125be:	2101      	movs	r1, #1
 80125c0:	ec57 6b10 	vmov	r6, r7, d0
 80125c4:	4690      	mov	r8, r2
 80125c6:	f7ff fccf 	bl	8011f68 <_Balloc>
 80125ca:	4604      	mov	r4, r0
 80125cc:	b930      	cbnz	r0, 80125dc <__d2b+0x24>
 80125ce:	4602      	mov	r2, r0
 80125d0:	4b25      	ldr	r3, [pc, #148]	; (8012668 <__d2b+0xb0>)
 80125d2:	4826      	ldr	r0, [pc, #152]	; (801266c <__d2b+0xb4>)
 80125d4:	f240 310a 	movw	r1, #778	; 0x30a
 80125d8:	f7fe fcfe 	bl	8010fd8 <__assert_func>
 80125dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80125e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80125e4:	bb35      	cbnz	r5, 8012634 <__d2b+0x7c>
 80125e6:	2e00      	cmp	r6, #0
 80125e8:	9301      	str	r3, [sp, #4]
 80125ea:	d028      	beq.n	801263e <__d2b+0x86>
 80125ec:	4668      	mov	r0, sp
 80125ee:	9600      	str	r6, [sp, #0]
 80125f0:	f7ff fd82 	bl	80120f8 <__lo0bits>
 80125f4:	9900      	ldr	r1, [sp, #0]
 80125f6:	b300      	cbz	r0, 801263a <__d2b+0x82>
 80125f8:	9a01      	ldr	r2, [sp, #4]
 80125fa:	f1c0 0320 	rsb	r3, r0, #32
 80125fe:	fa02 f303 	lsl.w	r3, r2, r3
 8012602:	430b      	orrs	r3, r1
 8012604:	40c2      	lsrs	r2, r0
 8012606:	6163      	str	r3, [r4, #20]
 8012608:	9201      	str	r2, [sp, #4]
 801260a:	9b01      	ldr	r3, [sp, #4]
 801260c:	61a3      	str	r3, [r4, #24]
 801260e:	2b00      	cmp	r3, #0
 8012610:	bf14      	ite	ne
 8012612:	2202      	movne	r2, #2
 8012614:	2201      	moveq	r2, #1
 8012616:	6122      	str	r2, [r4, #16]
 8012618:	b1d5      	cbz	r5, 8012650 <__d2b+0x98>
 801261a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801261e:	4405      	add	r5, r0
 8012620:	f8c9 5000 	str.w	r5, [r9]
 8012624:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012628:	f8c8 0000 	str.w	r0, [r8]
 801262c:	4620      	mov	r0, r4
 801262e:	b003      	add	sp, #12
 8012630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012638:	e7d5      	b.n	80125e6 <__d2b+0x2e>
 801263a:	6161      	str	r1, [r4, #20]
 801263c:	e7e5      	b.n	801260a <__d2b+0x52>
 801263e:	a801      	add	r0, sp, #4
 8012640:	f7ff fd5a 	bl	80120f8 <__lo0bits>
 8012644:	9b01      	ldr	r3, [sp, #4]
 8012646:	6163      	str	r3, [r4, #20]
 8012648:	2201      	movs	r2, #1
 801264a:	6122      	str	r2, [r4, #16]
 801264c:	3020      	adds	r0, #32
 801264e:	e7e3      	b.n	8012618 <__d2b+0x60>
 8012650:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012654:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012658:	f8c9 0000 	str.w	r0, [r9]
 801265c:	6918      	ldr	r0, [r3, #16]
 801265e:	f7ff fd2b 	bl	80120b8 <__hi0bits>
 8012662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012666:	e7df      	b.n	8012628 <__d2b+0x70>
 8012668:	080132fc 	.word	0x080132fc
 801266c:	0801337a 	.word	0x0801337a

08012670 <_calloc_r>:
 8012670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012672:	fba1 2402 	umull	r2, r4, r1, r2
 8012676:	b94c      	cbnz	r4, 801268c <_calloc_r+0x1c>
 8012678:	4611      	mov	r1, r2
 801267a:	9201      	str	r2, [sp, #4]
 801267c:	f7fd ffa6 	bl	80105cc <_malloc_r>
 8012680:	9a01      	ldr	r2, [sp, #4]
 8012682:	4605      	mov	r5, r0
 8012684:	b930      	cbnz	r0, 8012694 <_calloc_r+0x24>
 8012686:	4628      	mov	r0, r5
 8012688:	b003      	add	sp, #12
 801268a:	bd30      	pop	{r4, r5, pc}
 801268c:	220c      	movs	r2, #12
 801268e:	6002      	str	r2, [r0, #0]
 8012690:	2500      	movs	r5, #0
 8012692:	e7f8      	b.n	8012686 <_calloc_r+0x16>
 8012694:	4621      	mov	r1, r4
 8012696:	f7fd ff25 	bl	80104e4 <memset>
 801269a:	e7f4      	b.n	8012686 <_calloc_r+0x16>

0801269c <__sfputc_r>:
 801269c:	6893      	ldr	r3, [r2, #8]
 801269e:	3b01      	subs	r3, #1
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	b410      	push	{r4}
 80126a4:	6093      	str	r3, [r2, #8]
 80126a6:	da08      	bge.n	80126ba <__sfputc_r+0x1e>
 80126a8:	6994      	ldr	r4, [r2, #24]
 80126aa:	42a3      	cmp	r3, r4
 80126ac:	db01      	blt.n	80126b2 <__sfputc_r+0x16>
 80126ae:	290a      	cmp	r1, #10
 80126b0:	d103      	bne.n	80126ba <__sfputc_r+0x1e>
 80126b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126b6:	f000 b98f 	b.w	80129d8 <__swbuf_r>
 80126ba:	6813      	ldr	r3, [r2, #0]
 80126bc:	1c58      	adds	r0, r3, #1
 80126be:	6010      	str	r0, [r2, #0]
 80126c0:	7019      	strb	r1, [r3, #0]
 80126c2:	4608      	mov	r0, r1
 80126c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126c8:	4770      	bx	lr

080126ca <__sfputs_r>:
 80126ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126cc:	4606      	mov	r6, r0
 80126ce:	460f      	mov	r7, r1
 80126d0:	4614      	mov	r4, r2
 80126d2:	18d5      	adds	r5, r2, r3
 80126d4:	42ac      	cmp	r4, r5
 80126d6:	d101      	bne.n	80126dc <__sfputs_r+0x12>
 80126d8:	2000      	movs	r0, #0
 80126da:	e007      	b.n	80126ec <__sfputs_r+0x22>
 80126dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126e0:	463a      	mov	r2, r7
 80126e2:	4630      	mov	r0, r6
 80126e4:	f7ff ffda 	bl	801269c <__sfputc_r>
 80126e8:	1c43      	adds	r3, r0, #1
 80126ea:	d1f3      	bne.n	80126d4 <__sfputs_r+0xa>
 80126ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080126f0 <_vfiprintf_r>:
 80126f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f4:	460d      	mov	r5, r1
 80126f6:	b09d      	sub	sp, #116	; 0x74
 80126f8:	4614      	mov	r4, r2
 80126fa:	4698      	mov	r8, r3
 80126fc:	4606      	mov	r6, r0
 80126fe:	b118      	cbz	r0, 8012708 <_vfiprintf_r+0x18>
 8012700:	6983      	ldr	r3, [r0, #24]
 8012702:	b90b      	cbnz	r3, 8012708 <_vfiprintf_r+0x18>
 8012704:	f7ff fb5a 	bl	8011dbc <__sinit>
 8012708:	4b89      	ldr	r3, [pc, #548]	; (8012930 <_vfiprintf_r+0x240>)
 801270a:	429d      	cmp	r5, r3
 801270c:	d11b      	bne.n	8012746 <_vfiprintf_r+0x56>
 801270e:	6875      	ldr	r5, [r6, #4]
 8012710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012712:	07d9      	lsls	r1, r3, #31
 8012714:	d405      	bmi.n	8012722 <_vfiprintf_r+0x32>
 8012716:	89ab      	ldrh	r3, [r5, #12]
 8012718:	059a      	lsls	r2, r3, #22
 801271a:	d402      	bmi.n	8012722 <_vfiprintf_r+0x32>
 801271c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801271e:	f7ff fc02 	bl	8011f26 <__retarget_lock_acquire_recursive>
 8012722:	89ab      	ldrh	r3, [r5, #12]
 8012724:	071b      	lsls	r3, r3, #28
 8012726:	d501      	bpl.n	801272c <_vfiprintf_r+0x3c>
 8012728:	692b      	ldr	r3, [r5, #16]
 801272a:	b9eb      	cbnz	r3, 8012768 <_vfiprintf_r+0x78>
 801272c:	4629      	mov	r1, r5
 801272e:	4630      	mov	r0, r6
 8012730:	f000 f9c4 	bl	8012abc <__swsetup_r>
 8012734:	b1c0      	cbz	r0, 8012768 <_vfiprintf_r+0x78>
 8012736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012738:	07dc      	lsls	r4, r3, #31
 801273a:	d50e      	bpl.n	801275a <_vfiprintf_r+0x6a>
 801273c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012740:	b01d      	add	sp, #116	; 0x74
 8012742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012746:	4b7b      	ldr	r3, [pc, #492]	; (8012934 <_vfiprintf_r+0x244>)
 8012748:	429d      	cmp	r5, r3
 801274a:	d101      	bne.n	8012750 <_vfiprintf_r+0x60>
 801274c:	68b5      	ldr	r5, [r6, #8]
 801274e:	e7df      	b.n	8012710 <_vfiprintf_r+0x20>
 8012750:	4b79      	ldr	r3, [pc, #484]	; (8012938 <_vfiprintf_r+0x248>)
 8012752:	429d      	cmp	r5, r3
 8012754:	bf08      	it	eq
 8012756:	68f5      	ldreq	r5, [r6, #12]
 8012758:	e7da      	b.n	8012710 <_vfiprintf_r+0x20>
 801275a:	89ab      	ldrh	r3, [r5, #12]
 801275c:	0598      	lsls	r0, r3, #22
 801275e:	d4ed      	bmi.n	801273c <_vfiprintf_r+0x4c>
 8012760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012762:	f7ff fbe1 	bl	8011f28 <__retarget_lock_release_recursive>
 8012766:	e7e9      	b.n	801273c <_vfiprintf_r+0x4c>
 8012768:	2300      	movs	r3, #0
 801276a:	9309      	str	r3, [sp, #36]	; 0x24
 801276c:	2320      	movs	r3, #32
 801276e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012772:	f8cd 800c 	str.w	r8, [sp, #12]
 8012776:	2330      	movs	r3, #48	; 0x30
 8012778:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801293c <_vfiprintf_r+0x24c>
 801277c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012780:	f04f 0901 	mov.w	r9, #1
 8012784:	4623      	mov	r3, r4
 8012786:	469a      	mov	sl, r3
 8012788:	f813 2b01 	ldrb.w	r2, [r3], #1
 801278c:	b10a      	cbz	r2, 8012792 <_vfiprintf_r+0xa2>
 801278e:	2a25      	cmp	r2, #37	; 0x25
 8012790:	d1f9      	bne.n	8012786 <_vfiprintf_r+0x96>
 8012792:	ebba 0b04 	subs.w	fp, sl, r4
 8012796:	d00b      	beq.n	80127b0 <_vfiprintf_r+0xc0>
 8012798:	465b      	mov	r3, fp
 801279a:	4622      	mov	r2, r4
 801279c:	4629      	mov	r1, r5
 801279e:	4630      	mov	r0, r6
 80127a0:	f7ff ff93 	bl	80126ca <__sfputs_r>
 80127a4:	3001      	adds	r0, #1
 80127a6:	f000 80aa 	beq.w	80128fe <_vfiprintf_r+0x20e>
 80127aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127ac:	445a      	add	r2, fp
 80127ae:	9209      	str	r2, [sp, #36]	; 0x24
 80127b0:	f89a 3000 	ldrb.w	r3, [sl]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	f000 80a2 	beq.w	80128fe <_vfiprintf_r+0x20e>
 80127ba:	2300      	movs	r3, #0
 80127bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80127c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127c4:	f10a 0a01 	add.w	sl, sl, #1
 80127c8:	9304      	str	r3, [sp, #16]
 80127ca:	9307      	str	r3, [sp, #28]
 80127cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80127d0:	931a      	str	r3, [sp, #104]	; 0x68
 80127d2:	4654      	mov	r4, sl
 80127d4:	2205      	movs	r2, #5
 80127d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127da:	4858      	ldr	r0, [pc, #352]	; (801293c <_vfiprintf_r+0x24c>)
 80127dc:	f7ed fd18 	bl	8000210 <memchr>
 80127e0:	9a04      	ldr	r2, [sp, #16]
 80127e2:	b9d8      	cbnz	r0, 801281c <_vfiprintf_r+0x12c>
 80127e4:	06d1      	lsls	r1, r2, #27
 80127e6:	bf44      	itt	mi
 80127e8:	2320      	movmi	r3, #32
 80127ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127ee:	0713      	lsls	r3, r2, #28
 80127f0:	bf44      	itt	mi
 80127f2:	232b      	movmi	r3, #43	; 0x2b
 80127f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127f8:	f89a 3000 	ldrb.w	r3, [sl]
 80127fc:	2b2a      	cmp	r3, #42	; 0x2a
 80127fe:	d015      	beq.n	801282c <_vfiprintf_r+0x13c>
 8012800:	9a07      	ldr	r2, [sp, #28]
 8012802:	4654      	mov	r4, sl
 8012804:	2000      	movs	r0, #0
 8012806:	f04f 0c0a 	mov.w	ip, #10
 801280a:	4621      	mov	r1, r4
 801280c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012810:	3b30      	subs	r3, #48	; 0x30
 8012812:	2b09      	cmp	r3, #9
 8012814:	d94e      	bls.n	80128b4 <_vfiprintf_r+0x1c4>
 8012816:	b1b0      	cbz	r0, 8012846 <_vfiprintf_r+0x156>
 8012818:	9207      	str	r2, [sp, #28]
 801281a:	e014      	b.n	8012846 <_vfiprintf_r+0x156>
 801281c:	eba0 0308 	sub.w	r3, r0, r8
 8012820:	fa09 f303 	lsl.w	r3, r9, r3
 8012824:	4313      	orrs	r3, r2
 8012826:	9304      	str	r3, [sp, #16]
 8012828:	46a2      	mov	sl, r4
 801282a:	e7d2      	b.n	80127d2 <_vfiprintf_r+0xe2>
 801282c:	9b03      	ldr	r3, [sp, #12]
 801282e:	1d19      	adds	r1, r3, #4
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	9103      	str	r1, [sp, #12]
 8012834:	2b00      	cmp	r3, #0
 8012836:	bfbb      	ittet	lt
 8012838:	425b      	neglt	r3, r3
 801283a:	f042 0202 	orrlt.w	r2, r2, #2
 801283e:	9307      	strge	r3, [sp, #28]
 8012840:	9307      	strlt	r3, [sp, #28]
 8012842:	bfb8      	it	lt
 8012844:	9204      	strlt	r2, [sp, #16]
 8012846:	7823      	ldrb	r3, [r4, #0]
 8012848:	2b2e      	cmp	r3, #46	; 0x2e
 801284a:	d10c      	bne.n	8012866 <_vfiprintf_r+0x176>
 801284c:	7863      	ldrb	r3, [r4, #1]
 801284e:	2b2a      	cmp	r3, #42	; 0x2a
 8012850:	d135      	bne.n	80128be <_vfiprintf_r+0x1ce>
 8012852:	9b03      	ldr	r3, [sp, #12]
 8012854:	1d1a      	adds	r2, r3, #4
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	9203      	str	r2, [sp, #12]
 801285a:	2b00      	cmp	r3, #0
 801285c:	bfb8      	it	lt
 801285e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012862:	3402      	adds	r4, #2
 8012864:	9305      	str	r3, [sp, #20]
 8012866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801294c <_vfiprintf_r+0x25c>
 801286a:	7821      	ldrb	r1, [r4, #0]
 801286c:	2203      	movs	r2, #3
 801286e:	4650      	mov	r0, sl
 8012870:	f7ed fcce 	bl	8000210 <memchr>
 8012874:	b140      	cbz	r0, 8012888 <_vfiprintf_r+0x198>
 8012876:	2340      	movs	r3, #64	; 0x40
 8012878:	eba0 000a 	sub.w	r0, r0, sl
 801287c:	fa03 f000 	lsl.w	r0, r3, r0
 8012880:	9b04      	ldr	r3, [sp, #16]
 8012882:	4303      	orrs	r3, r0
 8012884:	3401      	adds	r4, #1
 8012886:	9304      	str	r3, [sp, #16]
 8012888:	f814 1b01 	ldrb.w	r1, [r4], #1
 801288c:	482c      	ldr	r0, [pc, #176]	; (8012940 <_vfiprintf_r+0x250>)
 801288e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012892:	2206      	movs	r2, #6
 8012894:	f7ed fcbc 	bl	8000210 <memchr>
 8012898:	2800      	cmp	r0, #0
 801289a:	d03f      	beq.n	801291c <_vfiprintf_r+0x22c>
 801289c:	4b29      	ldr	r3, [pc, #164]	; (8012944 <_vfiprintf_r+0x254>)
 801289e:	bb1b      	cbnz	r3, 80128e8 <_vfiprintf_r+0x1f8>
 80128a0:	9b03      	ldr	r3, [sp, #12]
 80128a2:	3307      	adds	r3, #7
 80128a4:	f023 0307 	bic.w	r3, r3, #7
 80128a8:	3308      	adds	r3, #8
 80128aa:	9303      	str	r3, [sp, #12]
 80128ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128ae:	443b      	add	r3, r7
 80128b0:	9309      	str	r3, [sp, #36]	; 0x24
 80128b2:	e767      	b.n	8012784 <_vfiprintf_r+0x94>
 80128b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80128b8:	460c      	mov	r4, r1
 80128ba:	2001      	movs	r0, #1
 80128bc:	e7a5      	b.n	801280a <_vfiprintf_r+0x11a>
 80128be:	2300      	movs	r3, #0
 80128c0:	3401      	adds	r4, #1
 80128c2:	9305      	str	r3, [sp, #20]
 80128c4:	4619      	mov	r1, r3
 80128c6:	f04f 0c0a 	mov.w	ip, #10
 80128ca:	4620      	mov	r0, r4
 80128cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128d0:	3a30      	subs	r2, #48	; 0x30
 80128d2:	2a09      	cmp	r2, #9
 80128d4:	d903      	bls.n	80128de <_vfiprintf_r+0x1ee>
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d0c5      	beq.n	8012866 <_vfiprintf_r+0x176>
 80128da:	9105      	str	r1, [sp, #20]
 80128dc:	e7c3      	b.n	8012866 <_vfiprintf_r+0x176>
 80128de:	fb0c 2101 	mla	r1, ip, r1, r2
 80128e2:	4604      	mov	r4, r0
 80128e4:	2301      	movs	r3, #1
 80128e6:	e7f0      	b.n	80128ca <_vfiprintf_r+0x1da>
 80128e8:	ab03      	add	r3, sp, #12
 80128ea:	9300      	str	r3, [sp, #0]
 80128ec:	462a      	mov	r2, r5
 80128ee:	4b16      	ldr	r3, [pc, #88]	; (8012948 <_vfiprintf_r+0x258>)
 80128f0:	a904      	add	r1, sp, #16
 80128f2:	4630      	mov	r0, r6
 80128f4:	f7fd ff7e 	bl	80107f4 <_printf_float>
 80128f8:	4607      	mov	r7, r0
 80128fa:	1c78      	adds	r0, r7, #1
 80128fc:	d1d6      	bne.n	80128ac <_vfiprintf_r+0x1bc>
 80128fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012900:	07d9      	lsls	r1, r3, #31
 8012902:	d405      	bmi.n	8012910 <_vfiprintf_r+0x220>
 8012904:	89ab      	ldrh	r3, [r5, #12]
 8012906:	059a      	lsls	r2, r3, #22
 8012908:	d402      	bmi.n	8012910 <_vfiprintf_r+0x220>
 801290a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801290c:	f7ff fb0c 	bl	8011f28 <__retarget_lock_release_recursive>
 8012910:	89ab      	ldrh	r3, [r5, #12]
 8012912:	065b      	lsls	r3, r3, #25
 8012914:	f53f af12 	bmi.w	801273c <_vfiprintf_r+0x4c>
 8012918:	9809      	ldr	r0, [sp, #36]	; 0x24
 801291a:	e711      	b.n	8012740 <_vfiprintf_r+0x50>
 801291c:	ab03      	add	r3, sp, #12
 801291e:	9300      	str	r3, [sp, #0]
 8012920:	462a      	mov	r2, r5
 8012922:	4b09      	ldr	r3, [pc, #36]	; (8012948 <_vfiprintf_r+0x258>)
 8012924:	a904      	add	r1, sp, #16
 8012926:	4630      	mov	r0, r6
 8012928:	f7fe fa08 	bl	8010d3c <_printf_i>
 801292c:	e7e4      	b.n	80128f8 <_vfiprintf_r+0x208>
 801292e:	bf00      	nop
 8012930:	08013330 	.word	0x08013330
 8012934:	08013350 	.word	0x08013350
 8012938:	08013310 	.word	0x08013310
 801293c:	080134d4 	.word	0x080134d4
 8012940:	080134de 	.word	0x080134de
 8012944:	080107f5 	.word	0x080107f5
 8012948:	080126cb 	.word	0x080126cb
 801294c:	080134da 	.word	0x080134da

08012950 <__sread>:
 8012950:	b510      	push	{r4, lr}
 8012952:	460c      	mov	r4, r1
 8012954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012958:	f000 fa70 	bl	8012e3c <_read_r>
 801295c:	2800      	cmp	r0, #0
 801295e:	bfab      	itete	ge
 8012960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012962:	89a3      	ldrhlt	r3, [r4, #12]
 8012964:	181b      	addge	r3, r3, r0
 8012966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801296a:	bfac      	ite	ge
 801296c:	6563      	strge	r3, [r4, #84]	; 0x54
 801296e:	81a3      	strhlt	r3, [r4, #12]
 8012970:	bd10      	pop	{r4, pc}

08012972 <__swrite>:
 8012972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012976:	461f      	mov	r7, r3
 8012978:	898b      	ldrh	r3, [r1, #12]
 801297a:	05db      	lsls	r3, r3, #23
 801297c:	4605      	mov	r5, r0
 801297e:	460c      	mov	r4, r1
 8012980:	4616      	mov	r6, r2
 8012982:	d505      	bpl.n	8012990 <__swrite+0x1e>
 8012984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012988:	2302      	movs	r3, #2
 801298a:	2200      	movs	r2, #0
 801298c:	f000 f9de 	bl	8012d4c <_lseek_r>
 8012990:	89a3      	ldrh	r3, [r4, #12]
 8012992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801299a:	81a3      	strh	r3, [r4, #12]
 801299c:	4632      	mov	r2, r6
 801299e:	463b      	mov	r3, r7
 80129a0:	4628      	mov	r0, r5
 80129a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129a6:	f000 b877 	b.w	8012a98 <_write_r>

080129aa <__sseek>:
 80129aa:	b510      	push	{r4, lr}
 80129ac:	460c      	mov	r4, r1
 80129ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129b2:	f000 f9cb 	bl	8012d4c <_lseek_r>
 80129b6:	1c43      	adds	r3, r0, #1
 80129b8:	89a3      	ldrh	r3, [r4, #12]
 80129ba:	bf15      	itete	ne
 80129bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80129be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80129c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80129c6:	81a3      	strheq	r3, [r4, #12]
 80129c8:	bf18      	it	ne
 80129ca:	81a3      	strhne	r3, [r4, #12]
 80129cc:	bd10      	pop	{r4, pc}

080129ce <__sclose>:
 80129ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129d2:	f000 b8e9 	b.w	8012ba8 <_close_r>
	...

080129d8 <__swbuf_r>:
 80129d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129da:	460e      	mov	r6, r1
 80129dc:	4614      	mov	r4, r2
 80129de:	4605      	mov	r5, r0
 80129e0:	b118      	cbz	r0, 80129ea <__swbuf_r+0x12>
 80129e2:	6983      	ldr	r3, [r0, #24]
 80129e4:	b90b      	cbnz	r3, 80129ea <__swbuf_r+0x12>
 80129e6:	f7ff f9e9 	bl	8011dbc <__sinit>
 80129ea:	4b21      	ldr	r3, [pc, #132]	; (8012a70 <__swbuf_r+0x98>)
 80129ec:	429c      	cmp	r4, r3
 80129ee:	d12b      	bne.n	8012a48 <__swbuf_r+0x70>
 80129f0:	686c      	ldr	r4, [r5, #4]
 80129f2:	69a3      	ldr	r3, [r4, #24]
 80129f4:	60a3      	str	r3, [r4, #8]
 80129f6:	89a3      	ldrh	r3, [r4, #12]
 80129f8:	071a      	lsls	r2, r3, #28
 80129fa:	d52f      	bpl.n	8012a5c <__swbuf_r+0x84>
 80129fc:	6923      	ldr	r3, [r4, #16]
 80129fe:	b36b      	cbz	r3, 8012a5c <__swbuf_r+0x84>
 8012a00:	6923      	ldr	r3, [r4, #16]
 8012a02:	6820      	ldr	r0, [r4, #0]
 8012a04:	1ac0      	subs	r0, r0, r3
 8012a06:	6963      	ldr	r3, [r4, #20]
 8012a08:	b2f6      	uxtb	r6, r6
 8012a0a:	4283      	cmp	r3, r0
 8012a0c:	4637      	mov	r7, r6
 8012a0e:	dc04      	bgt.n	8012a1a <__swbuf_r+0x42>
 8012a10:	4621      	mov	r1, r4
 8012a12:	4628      	mov	r0, r5
 8012a14:	f000 f95e 	bl	8012cd4 <_fflush_r>
 8012a18:	bb30      	cbnz	r0, 8012a68 <__swbuf_r+0x90>
 8012a1a:	68a3      	ldr	r3, [r4, #8]
 8012a1c:	3b01      	subs	r3, #1
 8012a1e:	60a3      	str	r3, [r4, #8]
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	1c5a      	adds	r2, r3, #1
 8012a24:	6022      	str	r2, [r4, #0]
 8012a26:	701e      	strb	r6, [r3, #0]
 8012a28:	6963      	ldr	r3, [r4, #20]
 8012a2a:	3001      	adds	r0, #1
 8012a2c:	4283      	cmp	r3, r0
 8012a2e:	d004      	beq.n	8012a3a <__swbuf_r+0x62>
 8012a30:	89a3      	ldrh	r3, [r4, #12]
 8012a32:	07db      	lsls	r3, r3, #31
 8012a34:	d506      	bpl.n	8012a44 <__swbuf_r+0x6c>
 8012a36:	2e0a      	cmp	r6, #10
 8012a38:	d104      	bne.n	8012a44 <__swbuf_r+0x6c>
 8012a3a:	4621      	mov	r1, r4
 8012a3c:	4628      	mov	r0, r5
 8012a3e:	f000 f949 	bl	8012cd4 <_fflush_r>
 8012a42:	b988      	cbnz	r0, 8012a68 <__swbuf_r+0x90>
 8012a44:	4638      	mov	r0, r7
 8012a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a48:	4b0a      	ldr	r3, [pc, #40]	; (8012a74 <__swbuf_r+0x9c>)
 8012a4a:	429c      	cmp	r4, r3
 8012a4c:	d101      	bne.n	8012a52 <__swbuf_r+0x7a>
 8012a4e:	68ac      	ldr	r4, [r5, #8]
 8012a50:	e7cf      	b.n	80129f2 <__swbuf_r+0x1a>
 8012a52:	4b09      	ldr	r3, [pc, #36]	; (8012a78 <__swbuf_r+0xa0>)
 8012a54:	429c      	cmp	r4, r3
 8012a56:	bf08      	it	eq
 8012a58:	68ec      	ldreq	r4, [r5, #12]
 8012a5a:	e7ca      	b.n	80129f2 <__swbuf_r+0x1a>
 8012a5c:	4621      	mov	r1, r4
 8012a5e:	4628      	mov	r0, r5
 8012a60:	f000 f82c 	bl	8012abc <__swsetup_r>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	d0cb      	beq.n	8012a00 <__swbuf_r+0x28>
 8012a68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012a6c:	e7ea      	b.n	8012a44 <__swbuf_r+0x6c>
 8012a6e:	bf00      	nop
 8012a70:	08013330 	.word	0x08013330
 8012a74:	08013350 	.word	0x08013350
 8012a78:	08013310 	.word	0x08013310

08012a7c <__ascii_wctomb>:
 8012a7c:	b149      	cbz	r1, 8012a92 <__ascii_wctomb+0x16>
 8012a7e:	2aff      	cmp	r2, #255	; 0xff
 8012a80:	bf85      	ittet	hi
 8012a82:	238a      	movhi	r3, #138	; 0x8a
 8012a84:	6003      	strhi	r3, [r0, #0]
 8012a86:	700a      	strbls	r2, [r1, #0]
 8012a88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012a8c:	bf98      	it	ls
 8012a8e:	2001      	movls	r0, #1
 8012a90:	4770      	bx	lr
 8012a92:	4608      	mov	r0, r1
 8012a94:	4770      	bx	lr
	...

08012a98 <_write_r>:
 8012a98:	b538      	push	{r3, r4, r5, lr}
 8012a9a:	4d07      	ldr	r5, [pc, #28]	; (8012ab8 <_write_r+0x20>)
 8012a9c:	4604      	mov	r4, r0
 8012a9e:	4608      	mov	r0, r1
 8012aa0:	4611      	mov	r1, r2
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	602a      	str	r2, [r5, #0]
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	f000 fa86 	bl	8012fb8 <_write>
 8012aac:	1c43      	adds	r3, r0, #1
 8012aae:	d102      	bne.n	8012ab6 <_write_r+0x1e>
 8012ab0:	682b      	ldr	r3, [r5, #0]
 8012ab2:	b103      	cbz	r3, 8012ab6 <_write_r+0x1e>
 8012ab4:	6023      	str	r3, [r4, #0]
 8012ab6:	bd38      	pop	{r3, r4, r5, pc}
 8012ab8:	200028e0 	.word	0x200028e0

08012abc <__swsetup_r>:
 8012abc:	4b32      	ldr	r3, [pc, #200]	; (8012b88 <__swsetup_r+0xcc>)
 8012abe:	b570      	push	{r4, r5, r6, lr}
 8012ac0:	681d      	ldr	r5, [r3, #0]
 8012ac2:	4606      	mov	r6, r0
 8012ac4:	460c      	mov	r4, r1
 8012ac6:	b125      	cbz	r5, 8012ad2 <__swsetup_r+0x16>
 8012ac8:	69ab      	ldr	r3, [r5, #24]
 8012aca:	b913      	cbnz	r3, 8012ad2 <__swsetup_r+0x16>
 8012acc:	4628      	mov	r0, r5
 8012ace:	f7ff f975 	bl	8011dbc <__sinit>
 8012ad2:	4b2e      	ldr	r3, [pc, #184]	; (8012b8c <__swsetup_r+0xd0>)
 8012ad4:	429c      	cmp	r4, r3
 8012ad6:	d10f      	bne.n	8012af8 <__swsetup_r+0x3c>
 8012ad8:	686c      	ldr	r4, [r5, #4]
 8012ada:	89a3      	ldrh	r3, [r4, #12]
 8012adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ae0:	0719      	lsls	r1, r3, #28
 8012ae2:	d42c      	bmi.n	8012b3e <__swsetup_r+0x82>
 8012ae4:	06dd      	lsls	r5, r3, #27
 8012ae6:	d411      	bmi.n	8012b0c <__swsetup_r+0x50>
 8012ae8:	2309      	movs	r3, #9
 8012aea:	6033      	str	r3, [r6, #0]
 8012aec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012af0:	81a3      	strh	r3, [r4, #12]
 8012af2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012af6:	e03e      	b.n	8012b76 <__swsetup_r+0xba>
 8012af8:	4b25      	ldr	r3, [pc, #148]	; (8012b90 <__swsetup_r+0xd4>)
 8012afa:	429c      	cmp	r4, r3
 8012afc:	d101      	bne.n	8012b02 <__swsetup_r+0x46>
 8012afe:	68ac      	ldr	r4, [r5, #8]
 8012b00:	e7eb      	b.n	8012ada <__swsetup_r+0x1e>
 8012b02:	4b24      	ldr	r3, [pc, #144]	; (8012b94 <__swsetup_r+0xd8>)
 8012b04:	429c      	cmp	r4, r3
 8012b06:	bf08      	it	eq
 8012b08:	68ec      	ldreq	r4, [r5, #12]
 8012b0a:	e7e6      	b.n	8012ada <__swsetup_r+0x1e>
 8012b0c:	0758      	lsls	r0, r3, #29
 8012b0e:	d512      	bpl.n	8012b36 <__swsetup_r+0x7a>
 8012b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b12:	b141      	cbz	r1, 8012b26 <__swsetup_r+0x6a>
 8012b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b18:	4299      	cmp	r1, r3
 8012b1a:	d002      	beq.n	8012b22 <__swsetup_r+0x66>
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	f7fd fce9 	bl	80104f4 <_free_r>
 8012b22:	2300      	movs	r3, #0
 8012b24:	6363      	str	r3, [r4, #52]	; 0x34
 8012b26:	89a3      	ldrh	r3, [r4, #12]
 8012b28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b2c:	81a3      	strh	r3, [r4, #12]
 8012b2e:	2300      	movs	r3, #0
 8012b30:	6063      	str	r3, [r4, #4]
 8012b32:	6923      	ldr	r3, [r4, #16]
 8012b34:	6023      	str	r3, [r4, #0]
 8012b36:	89a3      	ldrh	r3, [r4, #12]
 8012b38:	f043 0308 	orr.w	r3, r3, #8
 8012b3c:	81a3      	strh	r3, [r4, #12]
 8012b3e:	6923      	ldr	r3, [r4, #16]
 8012b40:	b94b      	cbnz	r3, 8012b56 <__swsetup_r+0x9a>
 8012b42:	89a3      	ldrh	r3, [r4, #12]
 8012b44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b4c:	d003      	beq.n	8012b56 <__swsetup_r+0x9a>
 8012b4e:	4621      	mov	r1, r4
 8012b50:	4630      	mov	r0, r6
 8012b52:	f000 f933 	bl	8012dbc <__smakebuf_r>
 8012b56:	89a0      	ldrh	r0, [r4, #12]
 8012b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b5c:	f010 0301 	ands.w	r3, r0, #1
 8012b60:	d00a      	beq.n	8012b78 <__swsetup_r+0xbc>
 8012b62:	2300      	movs	r3, #0
 8012b64:	60a3      	str	r3, [r4, #8]
 8012b66:	6963      	ldr	r3, [r4, #20]
 8012b68:	425b      	negs	r3, r3
 8012b6a:	61a3      	str	r3, [r4, #24]
 8012b6c:	6923      	ldr	r3, [r4, #16]
 8012b6e:	b943      	cbnz	r3, 8012b82 <__swsetup_r+0xc6>
 8012b70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b74:	d1ba      	bne.n	8012aec <__swsetup_r+0x30>
 8012b76:	bd70      	pop	{r4, r5, r6, pc}
 8012b78:	0781      	lsls	r1, r0, #30
 8012b7a:	bf58      	it	pl
 8012b7c:	6963      	ldrpl	r3, [r4, #20]
 8012b7e:	60a3      	str	r3, [r4, #8]
 8012b80:	e7f4      	b.n	8012b6c <__swsetup_r+0xb0>
 8012b82:	2000      	movs	r0, #0
 8012b84:	e7f7      	b.n	8012b76 <__swsetup_r+0xba>
 8012b86:	bf00      	nop
 8012b88:	20000184 	.word	0x20000184
 8012b8c:	08013330 	.word	0x08013330
 8012b90:	08013350 	.word	0x08013350
 8012b94:	08013310 	.word	0x08013310

08012b98 <abort>:
 8012b98:	b508      	push	{r3, lr}
 8012b9a:	2006      	movs	r0, #6
 8012b9c:	f000 f988 	bl	8012eb0 <raise>
 8012ba0:	2001      	movs	r0, #1
 8012ba2:	f000 fa11 	bl	8012fc8 <_exit>
	...

08012ba8 <_close_r>:
 8012ba8:	b538      	push	{r3, r4, r5, lr}
 8012baa:	4d06      	ldr	r5, [pc, #24]	; (8012bc4 <_close_r+0x1c>)
 8012bac:	2300      	movs	r3, #0
 8012bae:	4604      	mov	r4, r0
 8012bb0:	4608      	mov	r0, r1
 8012bb2:	602b      	str	r3, [r5, #0]
 8012bb4:	f000 f9ba 	bl	8012f2c <_close>
 8012bb8:	1c43      	adds	r3, r0, #1
 8012bba:	d102      	bne.n	8012bc2 <_close_r+0x1a>
 8012bbc:	682b      	ldr	r3, [r5, #0]
 8012bbe:	b103      	cbz	r3, 8012bc2 <_close_r+0x1a>
 8012bc0:	6023      	str	r3, [r4, #0]
 8012bc2:	bd38      	pop	{r3, r4, r5, pc}
 8012bc4:	200028e0 	.word	0x200028e0

08012bc8 <__sflush_r>:
 8012bc8:	898a      	ldrh	r2, [r1, #12]
 8012bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bce:	4605      	mov	r5, r0
 8012bd0:	0710      	lsls	r0, r2, #28
 8012bd2:	460c      	mov	r4, r1
 8012bd4:	d458      	bmi.n	8012c88 <__sflush_r+0xc0>
 8012bd6:	684b      	ldr	r3, [r1, #4]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	dc05      	bgt.n	8012be8 <__sflush_r+0x20>
 8012bdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	dc02      	bgt.n	8012be8 <__sflush_r+0x20>
 8012be2:	2000      	movs	r0, #0
 8012be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bea:	2e00      	cmp	r6, #0
 8012bec:	d0f9      	beq.n	8012be2 <__sflush_r+0x1a>
 8012bee:	2300      	movs	r3, #0
 8012bf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012bf4:	682f      	ldr	r7, [r5, #0]
 8012bf6:	602b      	str	r3, [r5, #0]
 8012bf8:	d032      	beq.n	8012c60 <__sflush_r+0x98>
 8012bfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012bfc:	89a3      	ldrh	r3, [r4, #12]
 8012bfe:	075a      	lsls	r2, r3, #29
 8012c00:	d505      	bpl.n	8012c0e <__sflush_r+0x46>
 8012c02:	6863      	ldr	r3, [r4, #4]
 8012c04:	1ac0      	subs	r0, r0, r3
 8012c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c08:	b10b      	cbz	r3, 8012c0e <__sflush_r+0x46>
 8012c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c0c:	1ac0      	subs	r0, r0, r3
 8012c0e:	2300      	movs	r3, #0
 8012c10:	4602      	mov	r2, r0
 8012c12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c14:	6a21      	ldr	r1, [r4, #32]
 8012c16:	4628      	mov	r0, r5
 8012c18:	47b0      	blx	r6
 8012c1a:	1c43      	adds	r3, r0, #1
 8012c1c:	89a3      	ldrh	r3, [r4, #12]
 8012c1e:	d106      	bne.n	8012c2e <__sflush_r+0x66>
 8012c20:	6829      	ldr	r1, [r5, #0]
 8012c22:	291d      	cmp	r1, #29
 8012c24:	d82c      	bhi.n	8012c80 <__sflush_r+0xb8>
 8012c26:	4a2a      	ldr	r2, [pc, #168]	; (8012cd0 <__sflush_r+0x108>)
 8012c28:	40ca      	lsrs	r2, r1
 8012c2a:	07d6      	lsls	r6, r2, #31
 8012c2c:	d528      	bpl.n	8012c80 <__sflush_r+0xb8>
 8012c2e:	2200      	movs	r2, #0
 8012c30:	6062      	str	r2, [r4, #4]
 8012c32:	04d9      	lsls	r1, r3, #19
 8012c34:	6922      	ldr	r2, [r4, #16]
 8012c36:	6022      	str	r2, [r4, #0]
 8012c38:	d504      	bpl.n	8012c44 <__sflush_r+0x7c>
 8012c3a:	1c42      	adds	r2, r0, #1
 8012c3c:	d101      	bne.n	8012c42 <__sflush_r+0x7a>
 8012c3e:	682b      	ldr	r3, [r5, #0]
 8012c40:	b903      	cbnz	r3, 8012c44 <__sflush_r+0x7c>
 8012c42:	6560      	str	r0, [r4, #84]	; 0x54
 8012c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c46:	602f      	str	r7, [r5, #0]
 8012c48:	2900      	cmp	r1, #0
 8012c4a:	d0ca      	beq.n	8012be2 <__sflush_r+0x1a>
 8012c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c50:	4299      	cmp	r1, r3
 8012c52:	d002      	beq.n	8012c5a <__sflush_r+0x92>
 8012c54:	4628      	mov	r0, r5
 8012c56:	f7fd fc4d 	bl	80104f4 <_free_r>
 8012c5a:	2000      	movs	r0, #0
 8012c5c:	6360      	str	r0, [r4, #52]	; 0x34
 8012c5e:	e7c1      	b.n	8012be4 <__sflush_r+0x1c>
 8012c60:	6a21      	ldr	r1, [r4, #32]
 8012c62:	2301      	movs	r3, #1
 8012c64:	4628      	mov	r0, r5
 8012c66:	47b0      	blx	r6
 8012c68:	1c41      	adds	r1, r0, #1
 8012c6a:	d1c7      	bne.n	8012bfc <__sflush_r+0x34>
 8012c6c:	682b      	ldr	r3, [r5, #0]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d0c4      	beq.n	8012bfc <__sflush_r+0x34>
 8012c72:	2b1d      	cmp	r3, #29
 8012c74:	d001      	beq.n	8012c7a <__sflush_r+0xb2>
 8012c76:	2b16      	cmp	r3, #22
 8012c78:	d101      	bne.n	8012c7e <__sflush_r+0xb6>
 8012c7a:	602f      	str	r7, [r5, #0]
 8012c7c:	e7b1      	b.n	8012be2 <__sflush_r+0x1a>
 8012c7e:	89a3      	ldrh	r3, [r4, #12]
 8012c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c84:	81a3      	strh	r3, [r4, #12]
 8012c86:	e7ad      	b.n	8012be4 <__sflush_r+0x1c>
 8012c88:	690f      	ldr	r7, [r1, #16]
 8012c8a:	2f00      	cmp	r7, #0
 8012c8c:	d0a9      	beq.n	8012be2 <__sflush_r+0x1a>
 8012c8e:	0793      	lsls	r3, r2, #30
 8012c90:	680e      	ldr	r6, [r1, #0]
 8012c92:	bf08      	it	eq
 8012c94:	694b      	ldreq	r3, [r1, #20]
 8012c96:	600f      	str	r7, [r1, #0]
 8012c98:	bf18      	it	ne
 8012c9a:	2300      	movne	r3, #0
 8012c9c:	eba6 0807 	sub.w	r8, r6, r7
 8012ca0:	608b      	str	r3, [r1, #8]
 8012ca2:	f1b8 0f00 	cmp.w	r8, #0
 8012ca6:	dd9c      	ble.n	8012be2 <__sflush_r+0x1a>
 8012ca8:	6a21      	ldr	r1, [r4, #32]
 8012caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012cac:	4643      	mov	r3, r8
 8012cae:	463a      	mov	r2, r7
 8012cb0:	4628      	mov	r0, r5
 8012cb2:	47b0      	blx	r6
 8012cb4:	2800      	cmp	r0, #0
 8012cb6:	dc06      	bgt.n	8012cc6 <__sflush_r+0xfe>
 8012cb8:	89a3      	ldrh	r3, [r4, #12]
 8012cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cbe:	81a3      	strh	r3, [r4, #12]
 8012cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cc4:	e78e      	b.n	8012be4 <__sflush_r+0x1c>
 8012cc6:	4407      	add	r7, r0
 8012cc8:	eba8 0800 	sub.w	r8, r8, r0
 8012ccc:	e7e9      	b.n	8012ca2 <__sflush_r+0xda>
 8012cce:	bf00      	nop
 8012cd0:	20400001 	.word	0x20400001

08012cd4 <_fflush_r>:
 8012cd4:	b538      	push	{r3, r4, r5, lr}
 8012cd6:	690b      	ldr	r3, [r1, #16]
 8012cd8:	4605      	mov	r5, r0
 8012cda:	460c      	mov	r4, r1
 8012cdc:	b913      	cbnz	r3, 8012ce4 <_fflush_r+0x10>
 8012cde:	2500      	movs	r5, #0
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	bd38      	pop	{r3, r4, r5, pc}
 8012ce4:	b118      	cbz	r0, 8012cee <_fflush_r+0x1a>
 8012ce6:	6983      	ldr	r3, [r0, #24]
 8012ce8:	b90b      	cbnz	r3, 8012cee <_fflush_r+0x1a>
 8012cea:	f7ff f867 	bl	8011dbc <__sinit>
 8012cee:	4b14      	ldr	r3, [pc, #80]	; (8012d40 <_fflush_r+0x6c>)
 8012cf0:	429c      	cmp	r4, r3
 8012cf2:	d11b      	bne.n	8012d2c <_fflush_r+0x58>
 8012cf4:	686c      	ldr	r4, [r5, #4]
 8012cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d0ef      	beq.n	8012cde <_fflush_r+0xa>
 8012cfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d00:	07d0      	lsls	r0, r2, #31
 8012d02:	d404      	bmi.n	8012d0e <_fflush_r+0x3a>
 8012d04:	0599      	lsls	r1, r3, #22
 8012d06:	d402      	bmi.n	8012d0e <_fflush_r+0x3a>
 8012d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d0a:	f7ff f90c 	bl	8011f26 <__retarget_lock_acquire_recursive>
 8012d0e:	4628      	mov	r0, r5
 8012d10:	4621      	mov	r1, r4
 8012d12:	f7ff ff59 	bl	8012bc8 <__sflush_r>
 8012d16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d18:	07da      	lsls	r2, r3, #31
 8012d1a:	4605      	mov	r5, r0
 8012d1c:	d4e0      	bmi.n	8012ce0 <_fflush_r+0xc>
 8012d1e:	89a3      	ldrh	r3, [r4, #12]
 8012d20:	059b      	lsls	r3, r3, #22
 8012d22:	d4dd      	bmi.n	8012ce0 <_fflush_r+0xc>
 8012d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d26:	f7ff f8ff 	bl	8011f28 <__retarget_lock_release_recursive>
 8012d2a:	e7d9      	b.n	8012ce0 <_fflush_r+0xc>
 8012d2c:	4b05      	ldr	r3, [pc, #20]	; (8012d44 <_fflush_r+0x70>)
 8012d2e:	429c      	cmp	r4, r3
 8012d30:	d101      	bne.n	8012d36 <_fflush_r+0x62>
 8012d32:	68ac      	ldr	r4, [r5, #8]
 8012d34:	e7df      	b.n	8012cf6 <_fflush_r+0x22>
 8012d36:	4b04      	ldr	r3, [pc, #16]	; (8012d48 <_fflush_r+0x74>)
 8012d38:	429c      	cmp	r4, r3
 8012d3a:	bf08      	it	eq
 8012d3c:	68ec      	ldreq	r4, [r5, #12]
 8012d3e:	e7da      	b.n	8012cf6 <_fflush_r+0x22>
 8012d40:	08013330 	.word	0x08013330
 8012d44:	08013350 	.word	0x08013350
 8012d48:	08013310 	.word	0x08013310

08012d4c <_lseek_r>:
 8012d4c:	b538      	push	{r3, r4, r5, lr}
 8012d4e:	4d07      	ldr	r5, [pc, #28]	; (8012d6c <_lseek_r+0x20>)
 8012d50:	4604      	mov	r4, r0
 8012d52:	4608      	mov	r0, r1
 8012d54:	4611      	mov	r1, r2
 8012d56:	2200      	movs	r2, #0
 8012d58:	602a      	str	r2, [r5, #0]
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	f000 f90e 	bl	8012f7c <_lseek>
 8012d60:	1c43      	adds	r3, r0, #1
 8012d62:	d102      	bne.n	8012d6a <_lseek_r+0x1e>
 8012d64:	682b      	ldr	r3, [r5, #0]
 8012d66:	b103      	cbz	r3, 8012d6a <_lseek_r+0x1e>
 8012d68:	6023      	str	r3, [r4, #0]
 8012d6a:	bd38      	pop	{r3, r4, r5, pc}
 8012d6c:	200028e0 	.word	0x200028e0

08012d70 <__swhatbuf_r>:
 8012d70:	b570      	push	{r4, r5, r6, lr}
 8012d72:	460e      	mov	r6, r1
 8012d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d78:	2900      	cmp	r1, #0
 8012d7a:	b096      	sub	sp, #88	; 0x58
 8012d7c:	4614      	mov	r4, r2
 8012d7e:	461d      	mov	r5, r3
 8012d80:	da08      	bge.n	8012d94 <__swhatbuf_r+0x24>
 8012d82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012d86:	2200      	movs	r2, #0
 8012d88:	602a      	str	r2, [r5, #0]
 8012d8a:	061a      	lsls	r2, r3, #24
 8012d8c:	d410      	bmi.n	8012db0 <__swhatbuf_r+0x40>
 8012d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d92:	e00e      	b.n	8012db2 <__swhatbuf_r+0x42>
 8012d94:	466a      	mov	r2, sp
 8012d96:	f000 f8a7 	bl	8012ee8 <_fstat_r>
 8012d9a:	2800      	cmp	r0, #0
 8012d9c:	dbf1      	blt.n	8012d82 <__swhatbuf_r+0x12>
 8012d9e:	9a01      	ldr	r2, [sp, #4]
 8012da0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012da4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012da8:	425a      	negs	r2, r3
 8012daa:	415a      	adcs	r2, r3
 8012dac:	602a      	str	r2, [r5, #0]
 8012dae:	e7ee      	b.n	8012d8e <__swhatbuf_r+0x1e>
 8012db0:	2340      	movs	r3, #64	; 0x40
 8012db2:	2000      	movs	r0, #0
 8012db4:	6023      	str	r3, [r4, #0]
 8012db6:	b016      	add	sp, #88	; 0x58
 8012db8:	bd70      	pop	{r4, r5, r6, pc}
	...

08012dbc <__smakebuf_r>:
 8012dbc:	898b      	ldrh	r3, [r1, #12]
 8012dbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012dc0:	079d      	lsls	r5, r3, #30
 8012dc2:	4606      	mov	r6, r0
 8012dc4:	460c      	mov	r4, r1
 8012dc6:	d507      	bpl.n	8012dd8 <__smakebuf_r+0x1c>
 8012dc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	6123      	str	r3, [r4, #16]
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	6163      	str	r3, [r4, #20]
 8012dd4:	b002      	add	sp, #8
 8012dd6:	bd70      	pop	{r4, r5, r6, pc}
 8012dd8:	ab01      	add	r3, sp, #4
 8012dda:	466a      	mov	r2, sp
 8012ddc:	f7ff ffc8 	bl	8012d70 <__swhatbuf_r>
 8012de0:	9900      	ldr	r1, [sp, #0]
 8012de2:	4605      	mov	r5, r0
 8012de4:	4630      	mov	r0, r6
 8012de6:	f7fd fbf1 	bl	80105cc <_malloc_r>
 8012dea:	b948      	cbnz	r0, 8012e00 <__smakebuf_r+0x44>
 8012dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012df0:	059a      	lsls	r2, r3, #22
 8012df2:	d4ef      	bmi.n	8012dd4 <__smakebuf_r+0x18>
 8012df4:	f023 0303 	bic.w	r3, r3, #3
 8012df8:	f043 0302 	orr.w	r3, r3, #2
 8012dfc:	81a3      	strh	r3, [r4, #12]
 8012dfe:	e7e3      	b.n	8012dc8 <__smakebuf_r+0xc>
 8012e00:	4b0d      	ldr	r3, [pc, #52]	; (8012e38 <__smakebuf_r+0x7c>)
 8012e02:	62b3      	str	r3, [r6, #40]	; 0x28
 8012e04:	89a3      	ldrh	r3, [r4, #12]
 8012e06:	6020      	str	r0, [r4, #0]
 8012e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e0c:	81a3      	strh	r3, [r4, #12]
 8012e0e:	9b00      	ldr	r3, [sp, #0]
 8012e10:	6163      	str	r3, [r4, #20]
 8012e12:	9b01      	ldr	r3, [sp, #4]
 8012e14:	6120      	str	r0, [r4, #16]
 8012e16:	b15b      	cbz	r3, 8012e30 <__smakebuf_r+0x74>
 8012e18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f000 f875 	bl	8012f0c <_isatty_r>
 8012e22:	b128      	cbz	r0, 8012e30 <__smakebuf_r+0x74>
 8012e24:	89a3      	ldrh	r3, [r4, #12]
 8012e26:	f023 0303 	bic.w	r3, r3, #3
 8012e2a:	f043 0301 	orr.w	r3, r3, #1
 8012e2e:	81a3      	strh	r3, [r4, #12]
 8012e30:	89a0      	ldrh	r0, [r4, #12]
 8012e32:	4305      	orrs	r5, r0
 8012e34:	81a5      	strh	r5, [r4, #12]
 8012e36:	e7cd      	b.n	8012dd4 <__smakebuf_r+0x18>
 8012e38:	08011d55 	.word	0x08011d55

08012e3c <_read_r>:
 8012e3c:	b538      	push	{r3, r4, r5, lr}
 8012e3e:	4d07      	ldr	r5, [pc, #28]	; (8012e5c <_read_r+0x20>)
 8012e40:	4604      	mov	r4, r0
 8012e42:	4608      	mov	r0, r1
 8012e44:	4611      	mov	r1, r2
 8012e46:	2200      	movs	r2, #0
 8012e48:	602a      	str	r2, [r5, #0]
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	f000 f89e 	bl	8012f8c <_read>
 8012e50:	1c43      	adds	r3, r0, #1
 8012e52:	d102      	bne.n	8012e5a <_read_r+0x1e>
 8012e54:	682b      	ldr	r3, [r5, #0]
 8012e56:	b103      	cbz	r3, 8012e5a <_read_r+0x1e>
 8012e58:	6023      	str	r3, [r4, #0]
 8012e5a:	bd38      	pop	{r3, r4, r5, pc}
 8012e5c:	200028e0 	.word	0x200028e0

08012e60 <_raise_r>:
 8012e60:	291f      	cmp	r1, #31
 8012e62:	b538      	push	{r3, r4, r5, lr}
 8012e64:	4604      	mov	r4, r0
 8012e66:	460d      	mov	r5, r1
 8012e68:	d904      	bls.n	8012e74 <_raise_r+0x14>
 8012e6a:	2316      	movs	r3, #22
 8012e6c:	6003      	str	r3, [r0, #0]
 8012e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e72:	bd38      	pop	{r3, r4, r5, pc}
 8012e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012e76:	b112      	cbz	r2, 8012e7e <_raise_r+0x1e>
 8012e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012e7c:	b94b      	cbnz	r3, 8012e92 <_raise_r+0x32>
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f000 f830 	bl	8012ee4 <_getpid_r>
 8012e84:	462a      	mov	r2, r5
 8012e86:	4601      	mov	r1, r0
 8012e88:	4620      	mov	r0, r4
 8012e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e8e:	f000 b817 	b.w	8012ec0 <_kill_r>
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d00a      	beq.n	8012eac <_raise_r+0x4c>
 8012e96:	1c59      	adds	r1, r3, #1
 8012e98:	d103      	bne.n	8012ea2 <_raise_r+0x42>
 8012e9a:	2316      	movs	r3, #22
 8012e9c:	6003      	str	r3, [r0, #0]
 8012e9e:	2001      	movs	r0, #1
 8012ea0:	e7e7      	b.n	8012e72 <_raise_r+0x12>
 8012ea2:	2400      	movs	r4, #0
 8012ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012ea8:	4628      	mov	r0, r5
 8012eaa:	4798      	blx	r3
 8012eac:	2000      	movs	r0, #0
 8012eae:	e7e0      	b.n	8012e72 <_raise_r+0x12>

08012eb0 <raise>:
 8012eb0:	4b02      	ldr	r3, [pc, #8]	; (8012ebc <raise+0xc>)
 8012eb2:	4601      	mov	r1, r0
 8012eb4:	6818      	ldr	r0, [r3, #0]
 8012eb6:	f7ff bfd3 	b.w	8012e60 <_raise_r>
 8012eba:	bf00      	nop
 8012ebc:	20000184 	.word	0x20000184

08012ec0 <_kill_r>:
 8012ec0:	b538      	push	{r3, r4, r5, lr}
 8012ec2:	4d07      	ldr	r5, [pc, #28]	; (8012ee0 <_kill_r+0x20>)
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	4608      	mov	r0, r1
 8012eca:	4611      	mov	r1, r2
 8012ecc:	602b      	str	r3, [r5, #0]
 8012ece:	f000 f84d 	bl	8012f6c <_kill>
 8012ed2:	1c43      	adds	r3, r0, #1
 8012ed4:	d102      	bne.n	8012edc <_kill_r+0x1c>
 8012ed6:	682b      	ldr	r3, [r5, #0]
 8012ed8:	b103      	cbz	r3, 8012edc <_kill_r+0x1c>
 8012eda:	6023      	str	r3, [r4, #0]
 8012edc:	bd38      	pop	{r3, r4, r5, pc}
 8012ede:	bf00      	nop
 8012ee0:	200028e0 	.word	0x200028e0

08012ee4 <_getpid_r>:
 8012ee4:	f000 b832 	b.w	8012f4c <_getpid>

08012ee8 <_fstat_r>:
 8012ee8:	b538      	push	{r3, r4, r5, lr}
 8012eea:	4d07      	ldr	r5, [pc, #28]	; (8012f08 <_fstat_r+0x20>)
 8012eec:	2300      	movs	r3, #0
 8012eee:	4604      	mov	r4, r0
 8012ef0:	4608      	mov	r0, r1
 8012ef2:	4611      	mov	r1, r2
 8012ef4:	602b      	str	r3, [r5, #0]
 8012ef6:	f000 f821 	bl	8012f3c <_fstat>
 8012efa:	1c43      	adds	r3, r0, #1
 8012efc:	d102      	bne.n	8012f04 <_fstat_r+0x1c>
 8012efe:	682b      	ldr	r3, [r5, #0]
 8012f00:	b103      	cbz	r3, 8012f04 <_fstat_r+0x1c>
 8012f02:	6023      	str	r3, [r4, #0]
 8012f04:	bd38      	pop	{r3, r4, r5, pc}
 8012f06:	bf00      	nop
 8012f08:	200028e0 	.word	0x200028e0

08012f0c <_isatty_r>:
 8012f0c:	b538      	push	{r3, r4, r5, lr}
 8012f0e:	4d06      	ldr	r5, [pc, #24]	; (8012f28 <_isatty_r+0x1c>)
 8012f10:	2300      	movs	r3, #0
 8012f12:	4604      	mov	r4, r0
 8012f14:	4608      	mov	r0, r1
 8012f16:	602b      	str	r3, [r5, #0]
 8012f18:	f000 f820 	bl	8012f5c <_isatty>
 8012f1c:	1c43      	adds	r3, r0, #1
 8012f1e:	d102      	bne.n	8012f26 <_isatty_r+0x1a>
 8012f20:	682b      	ldr	r3, [r5, #0]
 8012f22:	b103      	cbz	r3, 8012f26 <_isatty_r+0x1a>
 8012f24:	6023      	str	r3, [r4, #0]
 8012f26:	bd38      	pop	{r3, r4, r5, pc}
 8012f28:	200028e0 	.word	0x200028e0

08012f2c <_close>:
 8012f2c:	4b02      	ldr	r3, [pc, #8]	; (8012f38 <_close+0xc>)
 8012f2e:	2258      	movs	r2, #88	; 0x58
 8012f30:	601a      	str	r2, [r3, #0]
 8012f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f36:	4770      	bx	lr
 8012f38:	200028e0 	.word	0x200028e0

08012f3c <_fstat>:
 8012f3c:	4b02      	ldr	r3, [pc, #8]	; (8012f48 <_fstat+0xc>)
 8012f3e:	2258      	movs	r2, #88	; 0x58
 8012f40:	601a      	str	r2, [r3, #0]
 8012f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f46:	4770      	bx	lr
 8012f48:	200028e0 	.word	0x200028e0

08012f4c <_getpid>:
 8012f4c:	4b02      	ldr	r3, [pc, #8]	; (8012f58 <_getpid+0xc>)
 8012f4e:	2258      	movs	r2, #88	; 0x58
 8012f50:	601a      	str	r2, [r3, #0]
 8012f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f56:	4770      	bx	lr
 8012f58:	200028e0 	.word	0x200028e0

08012f5c <_isatty>:
 8012f5c:	4b02      	ldr	r3, [pc, #8]	; (8012f68 <_isatty+0xc>)
 8012f5e:	2258      	movs	r2, #88	; 0x58
 8012f60:	601a      	str	r2, [r3, #0]
 8012f62:	2000      	movs	r0, #0
 8012f64:	4770      	bx	lr
 8012f66:	bf00      	nop
 8012f68:	200028e0 	.word	0x200028e0

08012f6c <_kill>:
 8012f6c:	4b02      	ldr	r3, [pc, #8]	; (8012f78 <_kill+0xc>)
 8012f6e:	2258      	movs	r2, #88	; 0x58
 8012f70:	601a      	str	r2, [r3, #0]
 8012f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f76:	4770      	bx	lr
 8012f78:	200028e0 	.word	0x200028e0

08012f7c <_lseek>:
 8012f7c:	4b02      	ldr	r3, [pc, #8]	; (8012f88 <_lseek+0xc>)
 8012f7e:	2258      	movs	r2, #88	; 0x58
 8012f80:	601a      	str	r2, [r3, #0]
 8012f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f86:	4770      	bx	lr
 8012f88:	200028e0 	.word	0x200028e0

08012f8c <_read>:
 8012f8c:	4b02      	ldr	r3, [pc, #8]	; (8012f98 <_read+0xc>)
 8012f8e:	2258      	movs	r2, #88	; 0x58
 8012f90:	601a      	str	r2, [r3, #0]
 8012f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f96:	4770      	bx	lr
 8012f98:	200028e0 	.word	0x200028e0

08012f9c <_sbrk>:
 8012f9c:	4a04      	ldr	r2, [pc, #16]	; (8012fb0 <_sbrk+0x14>)
 8012f9e:	6811      	ldr	r1, [r2, #0]
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	b909      	cbnz	r1, 8012fa8 <_sbrk+0xc>
 8012fa4:	4903      	ldr	r1, [pc, #12]	; (8012fb4 <_sbrk+0x18>)
 8012fa6:	6011      	str	r1, [r2, #0]
 8012fa8:	6810      	ldr	r0, [r2, #0]
 8012faa:	4403      	add	r3, r0
 8012fac:	6013      	str	r3, [r2, #0]
 8012fae:	4770      	bx	lr
 8012fb0:	200028e4 	.word	0x200028e4
 8012fb4:	200028e8 	.word	0x200028e8

08012fb8 <_write>:
 8012fb8:	4b02      	ldr	r3, [pc, #8]	; (8012fc4 <_write+0xc>)
 8012fba:	2258      	movs	r2, #88	; 0x58
 8012fbc:	601a      	str	r2, [r3, #0]
 8012fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fc2:	4770      	bx	lr
 8012fc4:	200028e0 	.word	0x200028e0

08012fc8 <_exit>:
 8012fc8:	e7fe      	b.n	8012fc8 <_exit>
	...

08012fcc <_init>:
 8012fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fce:	bf00      	nop
 8012fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fd2:	bc08      	pop	{r3}
 8012fd4:	469e      	mov	lr, r3
 8012fd6:	4770      	bx	lr

08012fd8 <_fini>:
 8012fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fda:	bf00      	nop
 8012fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fde:	bc08      	pop	{r3}
 8012fe0:	469e      	mov	lr, r3
 8012fe2:	4770      	bx	lr
