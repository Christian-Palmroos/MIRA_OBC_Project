
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190b0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  08019270  08019270  00029270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019b18  08019b18  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08019b18  08019b18  00029b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019b20  08019b20  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019b20  08019b20  00029b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019b24  08019b24  00029b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08019b28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c20  20000354  08019e7c  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20002f74  08019e7c  00032f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046305  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006586  00000000  00000000  00076689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003428  00000000  00000000  0007cc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000031c8  00000000  00000000  00080038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034bfa  00000000  00000000  00083200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003aa2b  00000000  00000000  000b7dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128091  00000000  00000000  000f2825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021a8b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f440  00000000  00000000  0021a908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00229d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00229e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000354 	.word	0x20000354
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019258 	.word	0x08019258

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000358 	.word	0x20000358
 80001fc:	08019258 	.word	0x08019258

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fbd6 	bl	800273a <null_ptr_check>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d131      	bne.n	8000ffe <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d003      	beq.n	8000faa <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	729a      	strb	r2, [r3, #10]
 8000fa8:	e002      	b.n	8000fb0 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	729a      	strb	r2, [r3, #10]

	/* Read the chip-id of bmp3 sensor */
        //rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
	
        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000fb0:	f107 010e 	add.w	r1, r7, #14
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f826 	bl	800100a <bmp3_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b50      	cmp	r3, #80	; 0x50
 8000fce:	d002      	beq.n	8000fd6 <bmp3_init+0x5a>
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b60      	cmp	r3, #96	; 0x60
 8000fd4:	d111      	bne.n	8000ffa <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f9ae 	bl	800133e <bmp3_soft_reset>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fb4e 	bl	8001690 <get_calib_data>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000ff8:	e001      	b.n	8000ffe <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000ffa:	23f9      	movs	r3, #249	; 0xf9
 8000ffc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800100a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f001 fb8c 	bl	800273a <null_ptr_check>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001028:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800102c:	2b00      	cmp	r3, #0
 800102e:	d172      	bne.n	8001116 <bmp3_get_regs+0x10c>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06f      	beq.n	8001116 <bmp3_get_regs+0x10c>
    {
 8001036:	466b      	mov	r3, sp
 8001038:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7a9b      	ldrb	r3, [r3, #10]
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	18d1      	adds	r1, r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	3b01      	subs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	2300      	movs	r3, #0
 8001058:	4688      	mov	r8, r1
 800105a:	4699      	mov	r9, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001068:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001070:	2300      	movs	r3, #0
 8001072:	460c      	mov	r4, r1
 8001074:	461d      	mov	r5, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	00eb      	lsls	r3, r5, #3
 8001080:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001084:	00e2      	lsls	r2, r4, #3
 8001086:	1dcb      	adds	r3, r1, #7
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	ebad 0d03 	sub.w	sp, sp, r3
 8001090:	466b      	mov	r3, sp
 8001092:	3300      	adds	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d025      	beq.n	80010ea <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68dc      	ldr	r4, [r3, #12]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	7bf8      	ldrb	r0, [r7, #15]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	47a0      	blx	r4
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	e00d      	b.n	80010e0 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	7a9b      	ldrb	r3, [r3, #10]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	441a      	add	r2, r3
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	440b      	add	r3, r1
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	5c8a      	ldrb	r2, [r1, r2]
 80010d8:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3301      	adds	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ed      	bcc.n	80010c4 <bmp3_get_regs+0xba>
 80010e8:	e00b      	b.n	8001102 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68dc      	ldr	r4, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	7bf8      	ldrb	r0, [r7, #15]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001112:	46b5      	mov	sp, r6
    {
 8001114:	e002      	b.n	800111c <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 800111c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001120:	4618      	mov	r0, r3
 8001122:	372c      	adds	r7, #44	; 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800112a <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800112a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	466b      	mov	r3, sp
 800113c:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0059      	lsls	r1, r3, #1
 8001142:	460b      	mov	r3, r1
 8001144:	3b01      	subs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	2300      	movs	r3, #0
 800114a:	4688      	mov	r8, r1
 800114c:	4699      	mov	r9, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800115a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001162:	2300      	movs	r3, #0
 8001164:	460c      	mov	r4, r1
 8001166:	461d      	mov	r5, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	00eb      	lsls	r3, r5, #3
 8001172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	1dcb      	adds	r3, r1, #7
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	ebad 0d03 	sub.w	sp, sp, r3
 8001182:	466b      	mov	r3, sp
 8001184:	3300      	adds	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f001 fad6 	bl	800273a <null_ptr_check>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14c      	bne.n	8001234 <bmp3_set_regs+0x10a>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d049      	beq.n	8001234 <bmp3_set_regs+0x10a>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d046      	beq.n	8001234 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d040      	beq.n	800122e <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011bc:	2300      	movs	r3, #0
 80011be:	76bb      	strb	r3, [r7, #26]
 80011c0:	e00d      	b.n	80011de <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80011c2:	7ebb      	ldrb	r3, [r7, #26]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	7ebb      	ldrb	r3, [r7, #26]
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	440b      	add	r3, r1
 80011d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011d8:	7ebb      	ldrb	r3, [r7, #26]
 80011da:	3301      	adds	r3, #1
 80011dc:	76bb      	strb	r3, [r7, #26]
 80011de:	7ebb      	ldrb	r3, [r7, #26]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8ed      	bhi.n	80011c2 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d909      	bls.n	8001200 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 fa71 	bl	80016da <interleave_reg_addr>
                temp_len = len * 2;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e001      	b.n	8001204 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691c      	ldr	r4, [r3, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	7818      	ldrb	r0, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	47a0      	blx	r4
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001228:	23fe      	movs	r3, #254	; 0xfe
 800122a:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800122c:	e005      	b.n	800123a <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001232:	e002      	b.n	800123a <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	76fb      	strb	r3, [r7, #27]
 8001238:	e000      	b.n	800123c <bmp3_set_regs+0x112>
        if (len != 0)
 800123a:	bf00      	nop
    }

    return rslt;
 800123c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001240:	46b5      	mov	sp, r6
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800124c <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03a      	beq.n	80012d8 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	2006      	movs	r0, #6
 8001266:	f001 fa50 	bl	800270a <are_settings_changed>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fa96 	bl	80017a6 <set_pwr_ctrl_settings>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	20f0      	movs	r0, #240	; 0xf0
 8001282:	f001 fa42 	bl	800270a <are_settings_changed>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 fad7 	bl	8001844 <set_odr_filter_settings>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80012a0:	f001 fa33 	bl	800270a <are_settings_changed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fb36 	bl	8001920 <set_int_ctrl_settings>
 80012b4:	4603      	mov	r3, r0
 80012b6:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80012be:	f001 fa24 	bl	800270a <are_settings_changed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fba1 	bl	8001a14 <set_advance_settings>
 80012d2:	4603      	mov	r3, r0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e001      	b.n	80012dc <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01a      	beq.n	800132e <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 fa41 	bl	8002782 <get_sensor_status>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 fa7a 	bl	8002808 <get_int_status>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d108      	bne.n	8001332 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f001 fa9e 	bl	8002864 <get_err_status>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001346:	237e      	movs	r3, #126	; 0x7e
 8001348:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800134a:	23b6      	movs	r3, #182	; 0xb6
 800134c:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff fe57 	bl	800100a <bmp3_get_regs>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02d      	beq.n	80013c6 <bmp3_soft_reset+0x88>
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d129      	bne.n	80013c6 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001372:	f107 010d 	add.w	r1, r7, #13
 8001376:	f107 000e 	add.w	r0, r7, #14
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f7ff fed4 	bl	800112a <bmp3_set_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6852      	ldr	r2, [r2, #4]
 8001396:	4611      	mov	r1, r2
 8001398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139c:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800139e:	f107 010b 	add.w	r1, r7, #11
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fe2f 	bl	800100a <bmp3_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <bmp3_soft_reset+0x84>
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80013c2:	23fc      	movs	r3, #252	; 0xfc
 80013c4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f001 f9ac 	bl	800273a <null_ptr_check>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d139      	bne.n	8001462 <bmp3_set_op_mode+0x90>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d036      	beq.n	8001462 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80013fa:	f107 030d 	add.w	r3, r7, #13
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f838 	bl	8001476 <bmp3_get_op_mode>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d010      	beq.n	8001432 <bmp3_set_op_mode+0x60>
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f000 f8f7 	bl	800160c <put_device_to_sleep>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	4611      	mov	r1, r2
 800142c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001430:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d106      	bne.n	800144e <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f879 	bl	800153a <set_normal_mode>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
    {
 800144c:	e00c      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d109      	bne.n	8001468 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8a2 	bl	80015a0 <write_power_mode>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    {
 8001460:	e002      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e000      	b.n	800146a <bmp3_set_op_mode+0x98>
    {
 8001468:	bf00      	nop
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d011      	beq.n	80014aa <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	201b      	movs	r0, #27
 800148e:	f7ff fdbc 	bl	800100a <bmp3_get_regs>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	111b      	asrs	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e001      	b.n	80014ae <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	2300      	movs	r3, #0
 80014ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d021      	beq.n	8001528 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80014e4:	f107 0120 	add.w	r1, r7, #32
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2206      	movs	r2, #6
 80014ec:	2004      	movs	r0, #4
 80014ee:	f7ff fd8c 	bl	800100a <bmp3_get_regs>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80014f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc70 	bl	8001df0 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3318      	adds	r3, #24
 8001514:	f107 0110 	add.w	r1, r7, #16
 8001518:	7bf8      	ldrb	r0, [r7, #15]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f000 fca3 	bl	8001e66 <compensate_data>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001526:	e002      	b.n	800152e <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800152e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001532:	4618      	mov	r0, r3
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f888 	bl	800165c <validate_normal_mode_settings>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11d      	bne.n	8001594 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f820 	bl	80015a0 <write_power_mode>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800156c:	f107 010e 	add.w	r1, r7, #14
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff fd48 	bl	800100a <bmp3_get_regs>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8001590:	23fb      	movs	r3, #251	; 0xfb
 8001592:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80015aa:	231b      	movs	r3, #27
 80015ac:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80015b4:	7b78      	ldrb	r0, [r7, #13]
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	f7ff fd24 	bl	800100a <bmp3_get_regs>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80015ec:	f107 010c 	add.w	r1, r7, #12
 80015f0:	f107 000d 	add.w	r0, r7, #13
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f7ff fd97 	bl	800112a <bmp3_set_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001614:	231b      	movs	r3, #27
 8001616:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8001618:	f107 010d 	add.w	r1, r7, #13
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	201b      	movs	r0, #27
 8001622:	f7ff fcf2 	bl	800100a <bmp3_get_regs>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001638:	b2db      	uxtb	r3, r3
 800163a:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800163c:	f107 010d 	add.w	r1, r7, #13
 8001640:	f107 000e 	add.w	r0, r7, #14
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f7ff fd6f 	bl	800112a <bmp3_set_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa26 	bl	8001aba <get_odr_filter_settings>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa3a 	bl	8001af4 <validate_osr_and_odr_settings>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001698:	2331      	movs	r3, #49	; 0x31
 800169a:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80016b0:	f107 0108 	add.w	r1, r7, #8
 80016b4:	7ff8      	ldrb	r0, [r7, #31]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2215      	movs	r2, #21
 80016ba:	f7ff fca6 	bl	800100a <bmp3_get_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fc3f 	bl	8001f4c <parse_calib_data>

    return rslt;
 80016ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e015      	b.n	800171a <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	441a      	add	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	440b      	add	r3, r1
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	441a      	add	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	440b      	add	r3, r1
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3e5      	bcc.n	80016ee <interleave_reg_addr+0x14>
    }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	b2da      	uxtb	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3302      	adds	r3, #2
 8001782:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	105b      	asrs	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	b2da      	uxtb	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	709a      	strb	r2, [r3, #2]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80017b2:	231b      	movs	r3, #27
 80017b4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017b6:	7db8      	ldrb	r0, [r7, #22]
 80017b8:	f107 0115 	add.w	r1, r7, #21
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f7ff fc23 	bl	800100a <bmp3_get_regs>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d132      	bne.n	8001836 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80017da:	7d7b      	ldrb	r3, [r7, #21]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00f      	beq.n	8001822 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	b25a      	sxtb	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001822:	f107 0115 	add.w	r1, r7, #21
 8001826:	f107 0016 	add.w	r0, r7, #22
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc7c 	bl	800112a <bmp3_set_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <set_odr_filter_settings+0xd8>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	83bb      	strh	r3, [r7, #28]
 8001856:	2300      	movs	r3, #0
 8001858:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800185e:	f107 0118 	add.w	r1, r7, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	201c      	movs	r0, #28
 8001868:	f7ff fbcf 	bl	800100a <bmp3_get_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d14a      	bne.n	800190e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	2030      	movs	r0, #48	; 0x30
 800187c:	f000 ff45 	bl	800270a <are_settings_changed>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001886:	f107 0017 	add.w	r0, r7, #23
 800188a:	f107 0218 	add.w	r2, r7, #24
 800188e:	f107 011c 	add.w	r1, r7, #28
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4603      	mov	r3, r0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f9e1 	bl	8001c60 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	f000 ff32 	bl	800270a <are_settings_changed>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 80018ac:	f107 0217 	add.w	r2, r7, #23
 80018b0:	f107 0118 	add.w	r1, r7, #24
 80018b4:	f107 001c 	add.w	r0, r7, #28
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f000 fa29 	bl	8001d10 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	2040      	movs	r0, #64	; 0x40
 80018c2:	f000 ff22 	bl	800270a <are_settings_changed>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80018cc:	f107 0217 	add.w	r2, r7, #23
 80018d0:	f107 0118 	add.w	r1, r7, #24
 80018d4:	f107 001c 	add.w	r0, r7, #28
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f000 fa53 	bl	8001d84 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d104      	bne.n	80018f0 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	f000 f904 	bl	8001af4 <validate_osr_and_odr_settings>
 80018ec:	4603      	mov	r3, r0
 80018ee:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80018f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f107 0118 	add.w	r1, r7, #24
 8001900:	f107 001c 	add.w	r0, r7, #28
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f7ff fc10 	bl	800112a <bmp3_set_regs>
 800190a:	4603      	mov	r3, r0
 800190c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800190e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	08019270 	.word	0x08019270

08001920 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800192c:	2319      	movs	r3, #25
 800192e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001930:	7d78      	ldrb	r0, [r7, #21]
 8001932:	f107 0116 	add.w	r1, r7, #22
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f7ff fb66 	bl	800100a <bmp3_get_regs>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d15e      	bne.n	8001a08 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	3207      	adds	r2, #7
 8001952:	6810      	ldr	r0, [r2, #0]
 8001954:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	b25a      	sxtb	r2, r3
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b25b      	sxtb	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	b25a      	sxtb	r2, r3
 8001990:	7c7b      	ldrb	r3, [r7, #17]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80019f4:	f107 0116 	add.w	r1, r7, #22
 80019f8:	f107 0015 	add.w	r0, r7, #21
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f7ff fb93 	bl	800112a <bmp3_set_regs>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	320b      	adds	r2, #11
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001a2c:	231a      	movs	r3, #26
 8001a2e:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001a30:	7db8      	ldrb	r0, [r7, #22]
 8001a32:	f107 0115 	add.w	r1, r7, #21
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f7ff fae6 	bl	800100a <bmp3_get_regs>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d131      	bne.n	8001aae <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	7c3b      	ldrb	r3, [r7, #16]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001a7c:	7d7b      	ldrb	r3, [r7, #21]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001a9a:	f107 0115 	add.w	r1, r7, #21
 8001a9e:	f107 0016 	add.w	r0, r7, #22
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f7ff fb40 	bl	800112a <bmp3_set_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	201c      	movs	r0, #28
 8001ace:	f7ff fa9c 	bl	800100a <bmp3_get_regs>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1cda      	adds	r2, r3, #3
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe25 	bl	8001730 <parse_odr_filter_settings>

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b098      	sub	sp, #96	; 0x60
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001afc:	23ea      	movs	r3, #234	; 0xea
 8001afe:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <validate_osr_and_odr_settings+0x7c>)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	2248      	movs	r2, #72	; 0x48
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f014 fc54 	bl	80163bc <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f83f 	bl	8001ba0 <calculate_press_meas_time>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b26:	4413      	add	r3, r2
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f864 	bl	8001c00 <calculate_temp_meas_time>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b44:	4413      	add	r3, r2
 8001b46:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	443b      	add	r3, r7
 8001b52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001b5a:	f000 f80b 	bl	8001b74 <verify_meas_time_and_odr_duration>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001b64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3760      	adds	r7, #96	; 0x60
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	08019274 	.word	0x08019274

08001b74 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d202      	bcs.n	8001b8c <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e001      	b.n	8001b90 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001b8c:	23fd      	movs	r3, #253	; 0xfd
 8001b8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	3203      	adds	r2, #3
 8001bb0:	6810      	ldr	r0, [r2, #0]
 8001bb2:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bc8:	f000 fd7a 	bl	80026c0 <pow_bmp3>
 8001bcc:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bf8 <calculate_press_meas_time+0x58>
 8001bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bdc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001bfc <calculate_press_meas_time+0x5c>
 8001be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	44fa0000 	.word	0x44fa0000
 8001bfc:	43c40000 	.word	0x43c40000

08001c00 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	3203      	adds	r2, #3
 8001c10:	6810      	ldr	r0, [r2, #0]
 8001c12:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	4618      	mov	r0, r3
 8001c24:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c28:	f000 fd4a 	bl	80026c0 <pow_bmp3>
 8001c2c:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c34:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c58 <calculate_temp_meas_time+0x58>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c5c <calculate_temp_meas_time+0x5c>
 8001c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001c4e:	693b      	ldr	r3, [r7, #16]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	44fa0000 	.word	0x44fa0000
 8001c5c:	439c8000 	.word	0x439c8000

08001c60 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	3203      	adds	r2, #3
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03f      	beq.n	8001d04 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d013      	beq.n	8001cb6 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	7d3b      	ldrb	r3, [r7, #20]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	7d7b      	ldrb	r3, [r7, #21]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	221c      	movs	r2, #28
 8001cf6:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
    }
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3303      	adds	r3, #3
 8001d22:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	78db      	ldrb	r3, [r3, #3]
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d902      	bls.n	8001d32 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2211      	movs	r2, #17
 8001d30:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f023 031f 	bic.w	r3, r3, #31
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25a      	sxtb	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	440b      	add	r3, r1
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	221d      	movs	r2, #29
 8001d6a:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	3203      	adds	r2, #3
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3303      	adds	r3, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	f023 030e 	bic.w	r3, r3, #14
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	f003 030e 	and.w	r3, r3, #14
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	440b      	add	r3, r1
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001df0:	b4b0      	push	{r4, r5, r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	7809      	ldrb	r1, [r1, #0]
 8001dfe:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	3101      	adds	r1, #1
 8001e04:	7809      	ldrb	r1, [r1, #0]
 8001e06:	0209      	lsls	r1, r1, #8
 8001e08:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	3102      	adds	r1, #2
 8001e0e:	7809      	ldrb	r1, [r1, #0]
 8001e10:	0409      	lsls	r1, r1, #16
 8001e12:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	6939      	ldr	r1, [r7, #16]
 8001e18:	4308      	orrs	r0, r1
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	4301      	orrs	r1, r0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4605      	mov	r5, r0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	3103      	adds	r1, #3
 8001e2e:	7809      	ldrb	r1, [r1, #0]
 8001e30:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	3104      	adds	r1, #4
 8001e36:	7809      	ldrb	r1, [r1, #0]
 8001e38:	0209      	lsls	r1, r1, #8
 8001e3a:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	3105      	adds	r1, #5
 8001e40:	7809      	ldrb	r1, [r1, #0]
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	2000      	movs	r0, #0
 8001e52:	460a      	mov	r2, r1
 8001e54:	4603      	mov	r3, r0
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bcb0      	pop	{r4, r5, r7}
 8001e64:	4770      	bx	lr

08001e66 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05a      	beq.n	8001f36 <compensate_data+0xd0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d057      	beq.n	8001f36 <compensate_data+0xd0>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d054      	beq.n	8001f36 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d115      	bne.n	8001ebe <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa1f 	bl	80022dc <compensate_temperature>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d148      	bne.n	8001f3c <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3308      	adds	r3, #8
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fa8c 	bl	80023d0 <compensate_pressure>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ebc:	e03e      	b.n	8001f3c <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d116      	bne.n	8001ef2 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa06 	bl	80022dc <compensate_temperature>
            comp_data->temperature = 0;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa72 	bl	80023d0 <compensate_pressure>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ef0:	e024      	b.n	8001f3c <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d10f      	bne.n	8001f18 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f9ec 	bl	80022dc <compensate_temperature>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f16:	e011      	b.n	8001f3c <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f34:	e002      	b.n	8001f3c <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f36:	23ff      	movs	r3, #255	; 0xff
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e000      	b.n	8001f3e <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f3c:	bf00      	nop
    }

    return rslt;
 8001f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3390      	adds	r3, #144	; 0x90
 8001f5a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3318      	adds	r3, #24
 8001f60:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4ba4      	ldr	r3, [pc, #656]	; (80021f8 <parse_calib_data+0x2ac>)
 8001f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fad2 	bl	8000534 <__aeabi_ui2d>
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe fc72 	bl	800087c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	6939      	ldr	r1, [r7, #16]
 8001f9e:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <parse_calib_data+0x2b0>)
 8001fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fab1 	bl	8000534 <__aeabi_ui2d>
 8001fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd6:	f7fe fc51 	bl	800087c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b82      	ldr	r3, [pc, #520]	; (8002200 <parse_calib_data+0x2b4>)
 8001ff6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa7 	bl	8000554 <__aeabi_i2d>
 8002006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200a:	f7fe fc37 	bl	800087c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3306      	adds	r3, #6
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3305      	adds	r3, #5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21a      	sxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <parse_calib_data+0x2b8>)
 8002038:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002042:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa84 	bl	8000554 <__aeabi_i2d>
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe fc14 	bl	800087c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3308      	adds	r3, #8
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3307      	adds	r3, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21a      	sxth	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <parse_calib_data+0x2bc>)
 800207e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002088:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa61 	bl	8000554 <__aeabi_i2d>
 8002092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002096:	f7fe fbf1 	bl	800087c <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3309      	adds	r3, #9
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <parse_calib_data+0x2c0>)
 80020b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa47 	bl	8000554 <__aeabi_i2d>
 80020c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ca:	f7fe fbd7 	bl	800087c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	330a      	adds	r3, #10
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <parse_calib_data+0x2c4>)
 80020ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa2d 	bl	8000554 <__aeabi_i2d>
 80020fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fe:	f7fe fbbd 	bl	800087c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	330c      	adds	r3, #12
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	330b      	adds	r3, #11
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21b      	sxth	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002130:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	899b      	ldrh	r3, [r3, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9fb 	bl	8000534 <__aeabi_ui2d>
 800213e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002142:	f7fe fb9b 	bl	800087c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330e      	adds	r3, #14
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330d      	adds	r3, #13
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <parse_calib_data+0x2c8>)
 8002172:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	89db      	ldrh	r3, [r3, #14]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9da 	bl	8000534 <__aeabi_ui2d>
 8002180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002184:	f7fe fb7a 	bl	800087c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	330f      	adds	r3, #15
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25a      	sxtb	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <parse_calib_data+0x2cc>)
 80021a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9d0 	bl	8000554 <__aeabi_i2d>
 80021b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b8:	f7fe fb60 	bl	800087c <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3310      	adds	r3, #16
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25a      	sxtb	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <parse_calib_data+0x2d0>)
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b6 	bl	8000554 <__aeabi_i2d>
 80021e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ec:	f7fe fb46 	bl	800087c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	e013      	b.n	8002220 <parse_calib_data+0x2d4>
 80021f8:	3f700000 	.word	0x3f700000
 80021fc:	41d00000 	.word	0x41d00000
 8002200:	42f00000 	.word	0x42f00000
 8002204:	41300000 	.word	0x41300000
 8002208:	41c00000 	.word	0x41c00000
 800220c:	41f00000 	.word	0x41f00000
 8002210:	42400000 	.word	0x42400000
 8002214:	40500000 	.word	0x40500000
 8002218:	40700000 	.word	0x40700000
 800221c:	40e00000 	.word	0x40e00000
 8002220:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3312      	adds	r3, #18
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3311      	adds	r3, #17
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21a      	sxth	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <parse_calib_data+0x38c>)
 8002244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f980 	bl	8000554 <__aeabi_i2d>
 8002254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002258:	f7fe fb10 	bl	800087c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3313      	adds	r3, #19
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b25a      	sxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <parse_calib_data+0x38c>)
 8002278:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f966 	bl	8000554 <__aeabi_i2d>
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fe faf6 	bl	800087c <__aeabi_ddiv>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3314      	adds	r3, #20
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80022ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94b 	bl	8000554 <__aeabi_i2d>
 80022be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c2:	f7fe fadb 	bl	800087c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	42f00000 	.word	0x42f00000

080022dc <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80022f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022fc:	f7fe f966 	bl	80005cc <__aeabi_l2d>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ffd7 	bl	80002b8 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231c:	f7fe f984 	bl	8000628 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002330:	f7fe f97a 	bl	8000628 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002342:	f7fe f971 	bl	8000628 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002352:	f7fd ffb3 	bl	80002bc <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <compensate_temperature+0xec>)
 800236c:	f7fe fbce 	bl	8000b0c <__aeabi_dcmplt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <compensate_temperature+0xec>)
 800237e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8002382:	2303      	movs	r3, #3
 8002384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <compensate_temperature+0xf0>)
 8002394:	f7fe fbd8 	bl	8000b48 <__aeabi_dcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <compensate_temperature+0xf0>)
 80023a6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 80023aa:	2304      	movs	r3, #4
 80023ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80023bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3730      	adds	r7, #48	; 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	c0440000 	.word	0xc0440000
 80023cc:	40554000 	.word	0x40554000

080023d0 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b096      	sub	sp, #88	; 0x58
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023f2:	f7fe f919 	bl	8000628 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80023fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002400:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800240a:	2002      	movs	r0, #2
 800240c:	eeb0 0a47 	vmov.f32	s0, s14
 8002410:	eef0 0a67 	vmov.f32	s1, s15
 8002414:	f000 f954 	bl	80026c0 <pow_bmp3>
 8002418:	ee10 3a10 	vmov	r3, s0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8ab 	bl	8000578 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fe f8fd 	bl	8000628 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002442:	2003      	movs	r0, #3
 8002444:	eeb0 0a47 	vmov.f32	s0, s14
 8002448:	eef0 0a67 	vmov.f32	s1, s15
 800244c:	f000 f938 	bl	80026c0 <pow_bmp3>
 8002450:	ee10 3a10 	vmov	r3, s0
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f88f 	bl	8000578 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4620      	mov	r0, r4
 8002460:	4629      	mov	r1, r5
 8002462:	f7fe f8e1 	bl	8000628 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002478:	f7fd ff20 	bl	80002bc <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002488:	f7fd ff18 	bl	80002bc <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002494:	f7fd ff12 	bl	80002bc <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80024ac:	f7fe f8bc 	bl	8000628 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80024b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ba:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024c4:	2002      	movs	r0, #2
 80024c6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ca:	eef0 0a67 	vmov.f32	s1, s15
 80024ce:	f000 f8f7 	bl	80026c0 <pow_bmp3>
 80024d2:	ee10 3a10 	vmov	r3, s0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f84e 	bl	8000578 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	f7fe f8a0 	bl	8000628 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024fc:	2003      	movs	r0, #3
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	f000 f8db 	bl	80026c0 <pow_bmp3>
 800250a:	ee10 3a10 	vmov	r3, s0
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f832 	bl	8000578 <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fe f884 	bl	8000628 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe f843 	bl	80005bc <__aeabi_ul2d>
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002544:	f7fd feba 	bl	80002bc <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002554:	f7fd feb2 	bl	80002bc <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002564:	f7fd feaa 	bl	80002bc <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fe f85a 	bl	8000628 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe f819 	bl	80005bc <__aeabi_ul2d>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	2002      	movs	r0, #2
 8002590:	ec43 2b10 	vmov	d0, r2, r3
 8002594:	f000 f894 	bl	80026c0 <pow_bmp3>
 8002598:	ee10 3a10 	vmov	r3, s0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ffeb 	bl	8000578 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80025bc:	f7fe f834 	bl	8000628 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fd fe78 	bl	80002bc <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 80025d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025dc:	f7fe f824 	bl	8000628 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fd ffe3 	bl	80005bc <__aeabi_ul2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	2003      	movs	r0, #3
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f000 f85e 	bl	80026c0 <pow_bmp3>
 8002604:	ee10 3a10 	vmov	r3, s0
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffb5 	bl	8000578 <__aeabi_f2d>
 800260e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002610:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002614:	f7fe f808 	bl	8000628 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002620:	f7fd fe4c 	bl	80002bc <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800262c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002634:	f7fd fe42 	bl	80002bc <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002640:	f7fd fe3c 	bl	80002bc <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800264c:	a318      	add	r3, pc, #96	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002656:	f7fe fa59 	bl	8000b0c <__aeabi_dcmplt>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002660:	a313      	add	r3, pc, #76	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 800266a:	2305      	movs	r3, #5
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002670:	a311      	add	r3, pc, #68	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800267a:	f7fe fa65 	bl	8000b48 <__aeabi_dcmpgt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8002684:	a30c      	add	r3, pc, #48	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 800268e:	2306      	movs	r3, #6
 8002690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800269a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800269e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3758      	adds	r7, #88	; 0x58
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40dd4c00 	.word	0x40dd4c00
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40fe8480 	.word	0x40fe8480

080026c0 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80026ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026d2:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80026d4:	e00e      	b.n	80026f4 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80026d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026da:	f7fe fa7d 	bl	8000bd8 <__aeabi_d2f>
 80026de:	ee07 0a10 	vmov	s14, r0
 80026e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ed      	bne.n	80026d6 <pow_bmp3+0x16>
    }

    return pow_output;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	ee07 3a90 	vmov	s15, r3
}
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e001      	b.n	800272c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <null_ptr_check+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <null_ptr_check+0x2e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <null_ptr_check+0x2e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800278c:	2303      	movs	r3, #3
 800278e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002790:	f107 010d 	add.w	r1, r7, #13
 8002794:	7bb8      	ldrb	r0, [r7, #14]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	f7fe fc36 	bl	800100a <bmp3_get_regs>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d128      	bne.n	80027fc <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	111b      	asrs	r3, r3, #4
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	115b      	asrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80027ca:	7b7b      	ldrb	r3, [r7, #13]
 80027cc:	119b      	asrs	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80027da:	2310      	movs	r3, #16
 80027dc:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80027de:	f107 010d 	add.w	r1, r7, #13
 80027e2:	7bb8      	ldrb	r0, [r7, #14]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f7fe fc0f 	bl	800100a <bmp3_get_regs>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8002812:	f107 010e 	add.w	r1, r7, #14
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	2011      	movs	r0, #17
 800281c:	f7fe fbf5 	bl	800100a <bmp3_get_regs>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	105b      	asrs	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	10db      	asrs	r3, r3, #3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800286e:	f107 010e 	add.w	r1, r7, #14
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f7fe fbc7 	bl	800100a <bmp3_get_regs>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d115      	bne.n	80028b4 <get_err_status+0x50>
    {
        status->err.cmd = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	105b      	asrs	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	721a      	strb	r2, [r3, #8]
        status->err.fatal = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	109b      	asrs	r3, r3, #2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	719a      	strb	r2, [r3, #6]
    }

    return rslt;
 80028b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <bmp3_check_rslt>:
extern volatile uint8_t int2_flag;

static uint8_t dev_addr = 0;

void bmp3_check_rslt(const char api_name[], int8_t rslt)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 80028cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d0:	3307      	adds	r3, #7
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d839      	bhi.n	800294a <bmp3_check_rslt+0x8a>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <bmp3_check_rslt+0x1c>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	08002923 	.word	0x08002923
 80028e0:	08002919 	.word	0x08002919
 80028e4:	0800292d 	.word	0x0800292d
 80028e8:	0800294b 	.word	0x0800294b
 80028ec:	0800294b 	.word	0x0800294b
 80028f0:	0800290f 	.word	0x0800290f
 80028f4:	08002905 	.word	0x08002905
 80028f8:	08002955 	.word	0x08002955
 80028fc:	08002937 	.word	0x08002937
 8002900:	08002941 	.word	0x08002941

            // Do nothing
            break;
        case BMP3_E_NULL_PTR:
            //PDEBUG("API [%s] Error [%d] : Null pointer\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR1\n", 7);
 8002904:	2107      	movs	r1, #7
 8002906:	4816      	ldr	r0, [pc, #88]	; (8002960 <bmp3_check_rslt+0xa0>)
 8002908:	f013 f800 	bl	801590c <CDC_Transmit_FS>
            break;
 800290c:	e023      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_COMM_FAIL:
        	//PDEBUG("API [%s] Error [%d] : Communication failure\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR2\n", 6);
 800290e:	2106      	movs	r1, #6
 8002910:	4814      	ldr	r0, [pc, #80]	; (8002964 <bmp3_check_rslt+0xa4>)
 8002912:	f012 fffb 	bl	801590c <CDC_Transmit_FS>
        	break;
 8002916:	e01e      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_INVALID_LEN:
        	//PDEBUG("API [%s] Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR3\n", 6);
 8002918:	2106      	movs	r1, #6
 800291a:	4813      	ldr	r0, [pc, #76]	; (8002968 <bmp3_check_rslt+0xa8>)
 800291c:	f012 fff6 	bl	801590c <CDC_Transmit_FS>
        	break;
 8002920:	e019      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_DEV_NOT_FOUND:
        	//PDEBUG("API [%s] Error [%d] : Device not found\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR4\n", 6);
 8002922:	2106      	movs	r1, #6
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <bmp3_check_rslt+0xac>)
 8002926:	f012 fff1 	bl	801590c <CDC_Transmit_FS>
        	break;
 800292a:	e014      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_CONFIGURATION_ERR:
        	//PDEBUG("API [%s] Error [%d] : Configuration Error\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR5\n", 6);
 800292c:	2106      	movs	r1, #6
 800292e:	4810      	ldr	r0, [pc, #64]	; (8002970 <bmp3_check_rslt+0xb0>)
 8002930:	f012 ffec 	bl	801590c <CDC_Transmit_FS>
        	break;
 8002934:	e00f      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_SENSOR_NOT_ENABLED:
        	//PDEBUG("API [%s] Error [%d] : Warning when Sensor not enabled\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR6\n", 6);
 8002936:	2106      	movs	r1, #6
 8002938:	480e      	ldr	r0, [pc, #56]	; (8002974 <bmp3_check_rslt+0xb4>)
 800293a:	f012 ffe7 	bl	801590c <CDC_Transmit_FS>
        	break;
 800293e:	e00a      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_INVALID_FIFO_REQ_FRAME_CNT:
        	//PDEBUG("API [%s] Error [%d] : Warning when Fifo watermark level is not in limit\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR7\n", 6);
 8002940:	2106      	movs	r1, #6
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <bmp3_check_rslt+0xb8>)
 8002944:	f012 ffe2 	bl	801590c <CDC_Transmit_FS>
        	break;
 8002948:	e005      	b.n	8002956 <bmp3_check_rslt+0x96>
        default:
        	//PDEBUG("API [%s] Error [%d] : Unknown error code\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR8\n", 6);
 800294a:	2106      	movs	r1, #6
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <bmp3_check_rslt+0xbc>)
 800294e:	f012 ffdd 	bl	801590c <CDC_Transmit_FS>
        	break;
 8002952:	e000      	b.n	8002956 <bmp3_check_rslt+0x96>
            break;
 8002954:	bf00      	nop
    }
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	080192bc 	.word	0x080192bc
 8002964:	080192c4 	.word	0x080192c4
 8002968:	080192cc 	.word	0x080192cc
 800296c:	080192d4 	.word	0x080192d4
 8002970:	080192dc 	.word	0x080192dc
 8002974:	080192e4 	.word	0x080192e4
 8002978:	080192ec 	.word	0x080192ec
 800297c:	080192f4 	.word	0x080192f4

08002980 <bmp3_interface_init>:

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMP3_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

	if(bmp3 != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <bmp3_interface_init+0x42>
	{
		/* Bus configuration : I2C */
		if (intf == BMP3_I2C_INTF)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10b      	bne.n	80029b4 <bmp3_interface_init+0x34>
		{
			//PDEBUG("I2C Interface\n");
			dev_addr = BMP3_ADDR_I2C_SEC;
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <bmp3_interface_init+0x58>)
 800299e:	2277      	movs	r2, #119	; 0x77
 80029a0:	701a      	strb	r2, [r3, #0]
			bmp3->read = SensorAPI_I2Cx_Read;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <bmp3_interface_init+0x5c>)
 80029a6:	60da      	str	r2, [r3, #12]
			bmp3->write = SensorAPI_I2Cx_Write;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <bmp3_interface_init+0x60>)
 80029ac:	611a      	str	r2, [r3, #16]
			bmp3->intf = BMP3_I2C_INTF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	721a      	strb	r2, [r3, #8]
			bmp3->read = SensorAPI_SPIx_Read;
			bmp3->write = SensorAPI_SPIx_Write;
			bmp3->intf = BMP3_SPI_INTF;
		}*/

		bmp3->delay_us = bmp3_delay_us;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <bmp3_interface_init+0x64>)
 80029b8:	615a      	str	r2, [r3, #20]
		bmp3->intf_ptr = &dev_addr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <bmp3_interface_init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e001      	b.n	80029c6 <bmp3_interface_init+0x46>
	}
	else
	{
		rslt = BMP3_E_NULL_PTR;
 80029c2:	23ff      	movs	r3, #255	; 0xff
 80029c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000370 	.word	0x20000370
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a75 	.word	0x08002a75
 80029e4:	080029e9 	.word	0x080029e9

080029e8 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 80029f2:	e008      	b.n	8002a06 <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e002      	b.n	8002a00 <bmp3_delay_us+0x18>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b53      	cmp	r3, #83	; 0x53
 8002a04:	d9f9      	bls.n	80029fa <bmp3_delay_us+0x12>
	while(period--)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f1      	bne.n	80029f4 <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8002a40:	f107 020f 	add.w	r2, r7, #15
 8002a44:	8ab9      	ldrh	r1, [r7, #20]
 8002a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a50:	f003 fa5c 	bl	8005f0c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	8ab9      	ldrh	r1, [r7, #20]
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a62:	f003 fb47 	bl	80060f4 <HAL_I2C_Master_Receive>
	return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000574 	.word	0x20000574

08002a74 <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	4613      	mov	r3, r2
 8002a84:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <SensorAPI_I2Cx_Write+0x58>)
 8002aa2:	f013 fc8b 	bl	80163bc <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8ab9      	ldrh	r1, [r7, #20]
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <SensorAPI_I2Cx_Write+0x5c>)
 8002ab8:	f003 fa28 	bl	8005f0c <HAL_I2C_Master_Transmit>
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000374 	.word	0x20000374
 8002acc:	20000375 	.word	0x20000375
 8002ad0:	20000574 	.word	0x20000574

08002ad4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <BSP_I2C2_Init+0x74>)
 8002ae2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	4918      	ldr	r1, [pc, #96]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002aec:	600a      	str	r2, [r1, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d122      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8002af2:	4814      	ldr	r0, [pc, #80]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002af4:	f003 ff29 	bl	800694a <HAL_I2C_GetState>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11c      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8002afe:	4811      	ldr	r0, [pc, #68]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b00:	f000 f8fe 	bl	8002d00 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002b0a:	480e      	ldr	r0, [pc, #56]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b0c:	f000 f8b4 	bl	8002c78 <MX_I2C2_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b16:	f06f 0307 	mvn.w	r3, #7
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e00c      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4808      	ldr	r0, [pc, #32]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b22:	f004 fa4d 	bl	8006fc0 <HAL_I2CEx_ConfigAnalogFilter>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b2c:	f06f 0307 	mvn.w	r3, #7
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	e001      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000574 	.word	0x20000574
 8002b48:	40005800 	.word	0x40005800
 8002b4c:	200005c8 	.word	0x200005c8

08002b50 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d014      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b76:	f000 f923 	bl	8002dc0 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8002b7a:	4808      	ldr	r0, [pc, #32]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b7c:	f003 f997 	bl	8005eae <HAL_I2C_DeInit>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002b86:	f06f 0307 	mvn.w	r3, #7
 8002b8a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002b8c:	687b      	ldr	r3, [r7, #4]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200005c8 	.word	0x200005c8
 8002b9c:	20000574 	.word	0x20000574

08002ba0 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	60ba      	str	r2, [r7, #8]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	81fb      	strh	r3, [r7, #14]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	81bb      	strh	r3, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002bba:	89ba      	ldrh	r2, [r7, #12]
 8002bbc:	89f9      	ldrh	r1, [r7, #14]
 8002bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	480c      	ldr	r0, [pc, #48]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bd0:	f003 fb86 	bl	80062e0 <HAL_I2C_Mem_Write>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bdc:	f003 fec3 	bl	8006966 <HAL_I2C_GetError>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d103      	bne.n	8002bee <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002be6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e002      	b.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002bee:	f06f 0303 	mvn.w	r3, #3
 8002bf2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002bf4:	697b      	ldr	r3, [r7, #20]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000574 	.word	0x20000574

08002c04 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	81fb      	strh	r3, [r7, #14]
 8002c12:	460b      	mov	r3, r1
 8002c14:	81bb      	strh	r3, [r7, #12]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002c1e:	89ba      	ldrh	r2, [r7, #12]
 8002c20:	89f9      	ldrh	r1, [r7, #14]
 8002c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2301      	movs	r3, #1
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c34:	f003 fc68 	bl	8006508 <HAL_I2C_Mem_Read>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c40:	f003 fe91 	bl	8006966 <HAL_I2C_GetError>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d103      	bne.n	8002c52 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002c4a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e002      	b.n	8002c58 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002c52:	f06f 0303 	mvn.w	r3, #3
 8002c56:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002c58:	697b      	ldr	r3, [r7, #20]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000574 	.word	0x20000574

08002c68 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002c6c:	f002 fbc6 	bl	80053fc <HAL_GetTick>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <MX_I2C2_Init+0x80>)
 8002c88:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <MX_I2C2_Init+0x84>)
 8002c8e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f003 f868 	bl	8005d90 <HAL_I2C_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f004 f977 	bl	8006fc0 <HAL_I2CEx_ConfigAnalogFilter>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002cdc:	2100      	movs	r1, #0
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f004 f9b9 	bl	8007056 <HAL_I2CEx_ConfigDigitalFilter>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40005800 	.word	0x40005800
 8002cfc:	307075b1 	.word	0x307075b1

08002d00 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0ae      	sub	sp, #184	; 0xb8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	2294      	movs	r2, #148	; 0x94
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f013 fb61 	bl	80163d8 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4618      	mov	r0, r3
 8002d24:	f006 fb86 	bl	8009434 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002d60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4815      	ldr	r0, [pc, #84]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d68:	f002 fd44 	bl	80057f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2312      	movs	r3, #18
 8002d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002d86:	2304      	movs	r3, #4
 8002d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d90:	4619      	mov	r1, r3
 8002d92:	480a      	ldr	r0, [pc, #40]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d94:	f002 fd2e 	bl	80057f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002db0:	bf00      	nop
 8002db2:	37b8      	adds	r7, #184	; 0xb8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	48000400 	.word	0x48000400

08002dc0 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002dd2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dd8:	4806      	ldr	r0, [pc, #24]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002dda:	f002 fe9d 	bl	8005b18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de2:	4804      	ldr	r0, [pc, #16]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002de4:	f002 fe98 	bl	8005b18 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000400 	.word	0x48000400

08002df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	f5ad 6d6f 	sub.w	sp, sp, #3824	; 0xef0
 8002dfe:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[50] = "STM32 FATFS works great!"; /* File write buffer. */
 8002e00:	4bbf      	ldr	r3, [pc, #764]	; (8003100 <main+0x308>)
 8002e02:	f607 6438 	addw	r4, r7, #3640	; 0xe38
 8002e06:	461d      	mov	r5, r3
 8002e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e10:	c403      	stmia	r4!, {r0, r1}
 8002e12:	7022      	strb	r2, [r4, #0]
 8002e14:	f607 6351 	addw	r3, r7, #3665	; 0xe51
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
 8002e24:	615a      	str	r2, [r3, #20]
 8002e26:	761a      	strb	r2, [r3, #24]
	uint8_t UART2_RxBuffer[272];

	// For USB Transmission
	USBD_HandleTypeDef hUsbDeviceFS;
	uint8_t USB_Tx_STATUS;
	uint8_t *data = "Hello!\n";
 8002e28:	4bb6      	ldr	r3, [pc, #728]	; (8003104 <main+0x30c>)
 8002e2a:	f8c7 3ed8 	str.w	r3, [r7, #3800]	; 0xed8

	uint8_t USB_TxBuffer_FS;
	uint32_t USB_TxBuffer_Length = 1000;
 8002e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e32:	f8c7 3ed4 	str.w	r3, [r7, #3796]	; 0xed4
	GPS myData;

	int8_t rslt;
	uint16_t settings_sel;
	struct bmp3_dev dev;
	struct bmp3_data bmpdata = { 0 };
 8002e36:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002e3a:	f6a3 5388 	subw	r3, r3, #3464	; 0xd88
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2300      	movs	r3, #0
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	6053      	str	r3, [r2, #4]
 8002e46:	6093      	str	r3, [r2, #8]
 8002e48:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings settings = { 0 };
 8002e4a:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002e4e:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	609a      	str	r2, [r3, #8]
 8002e5a:	731a      	strb	r2, [r3, #12]
	struct bmp3_status status = { { 0 } };
 8002e5c:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002e60:	f6a3 53a4 	subw	r3, r3, #3492	; 0xda4
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	811a      	strh	r2, [r3, #8]
	uint8_t TempBuffer[25] = {0};
 8002e6c:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002e70:	f5a3 635c 	sub.w	r3, r3, #3520	; 0xdc0
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
 8002e84:	611a      	str	r2, [r3, #16]
 8002e86:	751a      	strb	r2, [r3, #20]
	uint8_t PresBuffer[25] = {0};
 8002e88:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002e8c:	f6a3 53dc 	subw	r3, r3, #3548	; 0xddc
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	3304      	adds	r3, #4
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	60da      	str	r2, [r3, #12]
 8002ea0:	611a      	str	r2, [r3, #16]
 8002ea2:	751a      	strb	r2, [r3, #20]

	//test
	HAL_StatusTypeDef i2c2status;
	uint8_t hello[7] = "Hello!\n";
 8002ea4:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002ea8:	f6a3 53e4 	subw	r3, r3, #3556	; 0xde4
 8002eac:	4a96      	ldr	r2, [pc, #600]	; (8003108 <main+0x310>)
 8002eae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eb2:	6018      	str	r0, [r3, #0]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	8019      	strh	r1, [r3, #0]
 8002eb8:	3302      	adds	r3, #2
 8002eba:	0c0a      	lsrs	r2, r1, #16
 8002ebc:	701a      	strb	r2, [r3, #0]
	uint8_t Buffer[25] = {0};
 8002ebe:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002ec2:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
 8002ed8:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 8002eda:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002ede:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8002ee2:	4a8a      	ldr	r2, [pc, #552]	; (800310c <main+0x314>)
 8002ee4:	601a      	str	r2, [r3, #0]
	// LSM6DSO_Object_t
	LSM6DSO_Object_t AccObj;

	// Acceleration data for LSM
	LSM6DSO_Axes_t Acceleration;
	uint8_t AccelerationBuffer[40] = {0};
 8002ee6:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002eea:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	2224      	movs	r2, #36	; 0x24
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f013 fa6d 	bl	80163d8 <memset>
	LSM6DSO_Axes_t AngularVelocity;
	uint8_t AngularVelocityBuffer[40] = {0};
 8002efe:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002f02:	f6a3 63a4 	subw	r3, r3, #3748	; 0xea4
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	2224      	movs	r2, #36	; 0x24
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f013 fa61 	bl	80163d8 <memset>
	int32_t AccError;
	int32_t AVError;

	int32_t errcode;
	double SystemTime;
	SystemTime = 0;
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	f507 616e 	add.w	r1, r7, #3808	; 0xee0
 8002f22:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t SystemTimeBuffer[25] = {0};
 8002f26:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002f2a:	f5a3 636c 	sub.w	r3, r3, #3776	; 0xec0
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	3304      	adds	r3, #4
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	611a      	str	r2, [r3, #16]
 8002f40:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f42:	f002 f9f3 	bl	800532c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f46:	f000 fc5d 	bl	8003804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f4a:	f000 fe71 	bl	8003c30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f4e:	f000 fcbf 	bl	80038d0 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8002f52:	f000 fcfd 	bl	8003950 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002f56:	f000 fd1d 	bl	8003994 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002f5a:	f000 fdcf 	bl	8003afc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002f5e:	f000 fe1b 	bl	8003b98 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002f62:	f00d feb9 	bl	8010cd8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8002f66:	f012 fc13 	bl	8015790 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8002f6a:	f000 fd51 	bl	8003a10 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002f6e:	f000 fc9b 	bl	80038a8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	LSM6DSO_IO_t IO;
	IO.Init = BSP_I2C2_Init;
 8002f72:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002f76:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8002f7a:	4a65      	ldr	r2, [pc, #404]	; (8003110 <main+0x318>)
 8002f7c:	601a      	str	r2, [r3, #0]
	IO.DeInit = BSP_I2C2_DeInit;
 8002f7e:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002f82:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8002f86:	4a63      	ldr	r2, [pc, #396]	; (8003114 <main+0x31c>)
 8002f88:	605a      	str	r2, [r3, #4]
	IO.BusType = 0;
 8002f8a:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002f8e:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
	IO.Address = LSM6DSO_I2C_ADD_L;
 8002f96:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002f9a:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8002f9e:	22d5      	movs	r2, #213	; 0xd5
 8002fa0:	731a      	strb	r2, [r3, #12]
	IO.WriteReg = BSP_I2C2_WriteReg;
 8002fa2:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002fa6:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8002faa:	4a5b      	ldr	r2, [pc, #364]	; (8003118 <main+0x320>)
 8002fac:	611a      	str	r2, [r3, #16]
	IO.ReadReg = BSP_I2C2_ReadReg;
 8002fae:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002fb2:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8002fb6:	4a59      	ldr	r2, [pc, #356]	; (800311c <main+0x324>)
 8002fb8:	615a      	str	r2, [r3, #20]
	IO.GetTick = BSP_GetTick;
 8002fba:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002fbe:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8002fc2:	4a57      	ldr	r2, [pc, #348]	; (8003120 <main+0x328>)
 8002fc4:	619a      	str	r2, [r3, #24]
	IO.Delay = HAL_Delay;
 8002fc6:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8002fca:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8002fce:	4a55      	ldr	r2, [pc, #340]	; (8003124 <main+0x32c>)
 8002fd0:	61da      	str	r2, [r3, #28]
  // Setting up LSM6DSO
  LSM6DSO_RegisterBusIO(&AccObj, &IO);
 8002fd2:	f107 0208 	add.w	r2, r7, #8
 8002fd6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fa1b 	bl	8004418 <LSM6DSO_RegisterBusIO>
  errcode = LSM6DSO_Init(&AccObj);
 8002fe2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 fa80 	bl	80044ec <LSM6DSO_Init>
 8002fec:	f8c7 0ed0 	str.w	r0, [r7, #3792]	; 0xed0

  if (errcode == 0) {while (CDC_Transmit_FS ("GYRO OK!\n", 9) == USBD_BUSY);}
 8002ff0:	f8d7 3ed0 	ldr.w	r3, [r7, #3792]	; 0xed0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d108      	bne.n	800300a <main+0x212>
 8002ff8:	bf00      	nop
 8002ffa:	2109      	movs	r1, #9
 8002ffc:	484a      	ldr	r0, [pc, #296]	; (8003128 <main+0x330>)
 8002ffe:	f012 fc85 	bl	801590c <CDC_Transmit_FS>
 8003002:	4603      	mov	r3, r0
 8003004:	2b01      	cmp	r3, #1
 8003006:	d0f8      	beq.n	8002ffa <main+0x202>
 8003008:	e007      	b.n	800301a <main+0x222>
  else {while (CDC_Transmit_FS ("GYRO NOT OK!\n", 13) == USBD_BUSY);}
 800300a:	bf00      	nop
 800300c:	210d      	movs	r1, #13
 800300e:	4847      	ldr	r0, [pc, #284]	; (800312c <main+0x334>)
 8003010:	f012 fc7c 	bl	801590c <CDC_Transmit_FS>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d0f8      	beq.n	800300c <main+0x214>

	// Enabling translational and angular acceleration measurements
	LSM6DSO_ACC_Enable(&AccObj);
 800301a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800301e:	4618      	mov	r0, r3
 8003020:	f001 fad9 	bl	80045d6 <LSM6DSO_ACC_Enable>
	LSM6DSO_GYRO_Enable(&AccObj);
 8003024:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003028:	4618      	mov	r0, r3
 800302a:	f001 fb96 	bl	800475a <LSM6DSO_GYRO_Enable>

	/* Interface reference is given as a parameter
	 *         For I2C : BMP3_I2C_INTF
	 *         For SPI : BMP3_SPI_INTF
	 */
	rslt = bmp3_interface_init(&dev, BMP3_I2C_INTF);
 800302e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003032:	2101      	movs	r1, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fca3 	bl	8002980 <bmp3_interface_init>
 800303a:	4603      	mov	r3, r0
 800303c:	f887 3ecf 	strb.w	r3, [r7, #3791]	; 0xecf
	bmp3_check_rslt("bmp3_interface_init", rslt);
 8003040:	f997 3ecf 	ldrsb.w	r3, [r7, #3791]	; 0xecf
 8003044:	4619      	mov	r1, r3
 8003046:	483a      	ldr	r0, [pc, #232]	; (8003130 <main+0x338>)
 8003048:	f7ff fc3a 	bl	80028c0 <bmp3_check_rslt>

	rslt = bmp3_init(&dev);
 800304c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd ff93 	bl	8000f7c <bmp3_init>
 8003056:	4603      	mov	r3, r0
 8003058:	f887 3ecf 	strb.w	r3, [r7, #3791]	; 0xecf
	bmp3_check_rslt("bmp3_init", rslt);
 800305c:	f997 3ecf 	ldrsb.w	r3, [r7, #3791]	; 0xecf
 8003060:	4619      	mov	r1, r3
 8003062:	4834      	ldr	r0, [pc, #208]	; (8003134 <main+0x33c>)
 8003064:	f7ff fc2c 	bl	80028c0 <bmp3_check_rslt>

	settings.int_settings.drdy_en = BMP3_DISABLE;
 8003068:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 800306c:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 8003070:	2200      	movs	r2, #0
 8003072:	729a      	strb	r2, [r3, #10]
	settings.int_settings.latch = BMP3_ENABLE;
 8003074:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8003078:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 800307c:	2201      	movs	r2, #1
 800307e:	725a      	strb	r2, [r3, #9]
	settings.press_en = BMP3_ENABLE;
 8003080:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8003084:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 8003088:	2201      	movs	r2, #1
 800308a:	705a      	strb	r2, [r3, #1]
	settings.temp_en = BMP3_ENABLE;
 800308c:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8003090:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 8003094:	2201      	movs	r2, #1
 8003096:	709a      	strb	r2, [r3, #2]

	settings.odr_filter.press_os = BMP3_OVERSAMPLING_4X;
 8003098:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 800309c:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80030a0:	2202      	movs	r2, #2
 80030a2:	70da      	strb	r2, [r3, #3]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 80030a4:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 80030a8:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80030ac:	2200      	movs	r2, #0
 80030ae:	711a      	strb	r2, [r3, #4]
	settings.odr_filter.odr = BMP3_ODR_100_HZ;
 80030b0:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 80030b4:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 80030b8:	2201      	movs	r2, #1
 80030ba:	719a      	strb	r2, [r3, #6]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 80030bc:	23be      	movs	r3, #190	; 0xbe
 80030be:	f8a7 3ecc 	strh.w	r3, [r7, #3788]	; 0xecc
				   BMP3_SEL_DRDY_EN;

	rslt = bmp3_set_sensor_settings(settings_sel, &settings, &dev);
 80030c2:	f8b7 3ecc 	ldrh.w	r3, [r7, #3788]	; 0xecc
 80030c6:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80030ca:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe f8bc 	bl	800124c <bmp3_set_sensor_settings>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f887 3ecf 	strb.w	r3, [r7, #3791]	; 0xecf
	bmp3_check_rslt("bmp3_set_sensor_settings", rslt);
 80030da:	f997 3ecf 	ldrsb.w	r3, [r7, #3791]	; 0xecf
 80030de:	4619      	mov	r1, r3
 80030e0:	4815      	ldr	r0, [pc, #84]	; (8003138 <main+0x340>)
 80030e2:	f7ff fbed 	bl	80028c0 <bmp3_check_rslt>

	if (rslt == 0) {while (CDC_Transmit_FS ("BMP OK!\n", 8) == USBD_BUSY);}
 80030e6:	f997 3ecf 	ldrsb.w	r3, [r7, #3791]	; 0xecf
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d128      	bne.n	8003140 <main+0x348>
 80030ee:	bf00      	nop
 80030f0:	2108      	movs	r1, #8
 80030f2:	4812      	ldr	r0, [pc, #72]	; (800313c <main+0x344>)
 80030f4:	f012 fc0a 	bl	801590c <CDC_Transmit_FS>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d0f8      	beq.n	80030f0 <main+0x2f8>
 80030fe:	e027      	b.n	8003150 <main+0x358>
 8003100:	08019530 	.word	0x08019530
 8003104:	0801939c 	.word	0x0801939c
 8003108:	08019564 	.word	0x08019564
 800310c:	00202d20 	.word	0x00202d20
 8003110:	08002ad5 	.word	0x08002ad5
 8003114:	08002b51 	.word	0x08002b51
 8003118:	08002ba1 	.word	0x08002ba1
 800311c:	08002c05 	.word	0x08002c05
 8003120:	08002c69 	.word	0x08002c69
 8003124:	08005415 	.word	0x08005415
 8003128:	080193a4 	.word	0x080193a4
 800312c:	080193b0 	.word	0x080193b0
 8003130:	080193c0 	.word	0x080193c0
 8003134:	080193d4 	.word	0x080193d4
 8003138:	080193e0 	.word	0x080193e0
 800313c:	080193fc 	.word	0x080193fc
	else {while (CDC_Transmit_FS ("BMP NOT OK!\n", 12) == USBD_BUSY);}
 8003140:	bf00      	nop
 8003142:	210c      	movs	r1, #12
 8003144:	4891      	ldr	r0, [pc, #580]	; (800338c <main+0x594>)
 8003146:	f012 fbe1 	bl	801590c <CDC_Transmit_FS>
 800314a:	4603      	mov	r3, r0
 800314c:	2b01      	cmp	r3, #1
 800314e:	d0f8      	beq.n	8003142 <main+0x34a>
	bmp3_check_rslt("bmp3_set_op_mode", rslt);*/

	volatile unsigned tmp;

	// Setting the buffer for UART2 data reading
	rxBuffer = rxBuffer1;
 8003150:	4b8f      	ldr	r3, [pc, #572]	; (8003390 <main+0x598>)
 8003152:	4a90      	ldr	r2, [pc, #576]	; (8003394 <main+0x59c>)
 8003154:	601a      	str	r2, [r3, #0]
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 8003156:	4b90      	ldr	r3, [pc, #576]	; (8003398 <main+0x5a0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f8c7 3ea0 	str.w	r3, [r7, #3744]	; 0xea0
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	f8d7 3ea0 	ldr.w	r3, [r7, #3744]	; 0xea0
 8003162:	e853 3f00 	ldrex	r3, [r3]
 8003166:	f8c7 3e9c 	str.w	r3, [r7, #3740]	; 0xe9c
   return(result);
 800316a:	f8d7 3e9c 	ldr.w	r3, [r7, #3740]	; 0xe9c
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	f8c7 3ec8 	str.w	r3, [r7, #3784]	; 0xec8
 8003176:	4b88      	ldr	r3, [pc, #544]	; (8003398 <main+0x5a0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	f8d7 3ec8 	ldr.w	r3, [r7, #3784]	; 0xec8
 8003180:	f8c7 3eac 	str.w	r3, [r7, #3756]	; 0xeac
 8003184:	f8c7 2ea8 	str.w	r2, [r7, #3752]	; 0xea8
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003188:	f8d7 1ea8 	ldr.w	r1, [r7, #3752]	; 0xea8
 800318c:	f8d7 2eac 	ldr.w	r2, [r7, #3756]	; 0xeac
 8003190:	e841 2300 	strex	r3, r2, [r1]
 8003194:	f8c7 3ea4 	str.w	r3, [r7, #3748]	; 0xea4
   return(result);
 8003198:	f8d7 3ea4 	ldr.w	r3, [r7, #3748]	; 0xea4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1da      	bne.n	8003156 <main+0x35e>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 80031a0:	4b7d      	ldr	r3, [pc, #500]	; (8003398 <main+0x5a0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8c7 3e8c 	str.w	r3, [r7, #3724]	; 0xe8c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	f8d7 3e8c 	ldr.w	r3, [r7, #3724]	; 0xe8c
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	f8c7 3e88 	str.w	r3, [r7, #3720]	; 0xe88
   return(result);
 80031b4:	f8d7 3e88 	ldr.w	r3, [r7, #3720]	; 0xe88
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	f8c7 3ec4 	str.w	r3, [r7, #3780]	; 0xec4
 80031c0:	4b75      	ldr	r3, [pc, #468]	; (8003398 <main+0x5a0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	f8d7 3ec4 	ldr.w	r3, [r7, #3780]	; 0xec4
 80031ca:	f8c7 3e98 	str.w	r3, [r7, #3736]	; 0xe98
 80031ce:	f8c7 2e94 	str.w	r2, [r7, #3732]	; 0xe94
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	f8d7 1e94 	ldr.w	r1, [r7, #3732]	; 0xe94
 80031d6:	f8d7 2e98 	ldr.w	r2, [r7, #3736]	; 0xe98
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	f8c7 3e90 	str.w	r3, [r7, #3728]	; 0xe90
   return(result);
 80031e2:	f8d7 3e90 	ldr.w	r3, [r7, #3728]	; 0xe90
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1da      	bne.n	80031a0 <main+0x3a8>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80031ea:	4b6b      	ldr	r3, [pc, #428]	; (8003398 <main+0x5a0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8c7 3e78 	str.w	r3, [r7, #3704]	; 0xe78
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	f8d7 3e78 	ldr.w	r3, [r7, #3704]	; 0xe78
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	f8c7 3e74 	str.w	r3, [r7, #3700]	; 0xe74
   return(result);
 80031fe:	f8d7 3e74 	ldr.w	r3, [r7, #3700]	; 0xe74
 8003202:	f043 0320 	orr.w	r3, r3, #32
 8003206:	f8c7 3ec0 	str.w	r3, [r7, #3776]	; 0xec0
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <main+0x5a0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	f8d7 3ec0 	ldr.w	r3, [r7, #3776]	; 0xec0
 8003214:	f8c7 3e84 	str.w	r3, [r7, #3716]	; 0xe84
 8003218:	f8c7 2e80 	str.w	r2, [r7, #3712]	; 0xe80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	f8d7 1e80 	ldr.w	r1, [r7, #3712]	; 0xe80
 8003220:	f8d7 2e84 	ldr.w	r2, [r7, #3716]	; 0xe84
 8003224:	e841 2300 	strex	r3, r2, [r1]
 8003228:	f8c7 3e7c 	str.w	r3, [r7, #3708]	; 0xe7c
   return(result);
 800322c:	f8d7 3e7c 	ldr.w	r3, [r7, #3708]	; 0xe7c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1da      	bne.n	80031ea <main+0x3f2>


	//HAL_Delay (5000);
	// If not FR_OK, mounting failed, else it was successful
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8003234:	2200      	movs	r2, #0
 8003236:	4959      	ldr	r1, [pc, #356]	; (800339c <main+0x5a4>)
 8003238:	4859      	ldr	r0, [pc, #356]	; (80033a0 <main+0x5a8>)
 800323a:	f011 f8c1 	bl	80143c0 <f_mount>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <main+0x45e>
		{
		while (CDC_Transmit_FS ("Mount failed!\n", 14) == USBD_BUSY);
 8003244:	bf00      	nop
 8003246:	210e      	movs	r1, #14
 8003248:	4856      	ldr	r0, [pc, #344]	; (80033a4 <main+0x5ac>)
 800324a:	f012 fb5f 	bl	801590c <CDC_Transmit_FS>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d0f8      	beq.n	8003246 <main+0x44e>
 8003254:	e062      	b.n	800331c <main+0x524>
		}
	// here f_mount == FR_OK -> mounting was a success
	else
		{
		// f_mkfs
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8003256:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800325a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800325e:	9200      	str	r2, [sp, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	2107      	movs	r1, #7
 8003264:	484d      	ldr	r0, [pc, #308]	; (800339c <main+0x5a4>)
 8003266:	f011 fe0b 	bl	8014e80 <f_mkfs>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <main+0x490>
			{
			while (CDC_Transmit_FS ("MKFS failed!\n", 13) == USBD_BUSY);
 8003270:	bf00      	nop
 8003272:	210d      	movs	r1, #13
 8003274:	484c      	ldr	r0, [pc, #304]	; (80033a8 <main+0x5b0>)
 8003276:	f012 fb49 	bl	801590c <CDC_Transmit_FS>
 800327a:	4603      	mov	r3, r0
 800327c:	2b01      	cmp	r3, #1
 800327e:	d0f8      	beq.n	8003272 <main+0x47a>
			hsd1.Init.ClockDiv = 0;
 8003280:	4b4a      	ldr	r3, [pc, #296]	; (80033ac <main+0x5b4>)
 8003282:	2200      	movs	r2, #0
 8003284:	615a      	str	r2, [r3, #20]
 8003286:	e049      	b.n	800331c <main+0x524>
			}
		else
			{
			hsd1.Init.ClockDiv = 0;
 8003288:	4b48      	ldr	r3, [pc, #288]	; (80033ac <main+0x5b4>)
 800328a:	2200      	movs	r2, #0
 800328c:	615a      	str	r2, [r3, #20]
			// Open file for writing (Create)
			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800328e:	220a      	movs	r2, #10
 8003290:	4947      	ldr	r1, [pc, #284]	; (80033b0 <main+0x5b8>)
 8003292:	4848      	ldr	r0, [pc, #288]	; (80033b4 <main+0x5bc>)
 8003294:	f011 f8da 	bl	801444c <f_open>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <main+0x4b8>
				{
				while (CDC_Transmit_FS ("Open file failed!\n", 18) == USBD_BUSY);
 800329e:	bf00      	nop
 80032a0:	2112      	movs	r1, #18
 80032a2:	4845      	ldr	r0, [pc, #276]	; (80033b8 <main+0x5c0>)
 80032a4:	f012 fb32 	bl	801590c <CDC_Transmit_FS>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d0f8      	beq.n	80032a0 <main+0x4a8>
 80032ae:	e035      	b.n	800331c <main+0x524>
				}
			else
				{

				// Write to the text file
				res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80032b0:	f607 6338 	addw	r3, r7, #3640	; 0xe38
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fc ffa3 	bl	8000200 <strlen>
 80032ba:	4602      	mov	r2, r0
 80032bc:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 80032c0:	f607 6138 	addw	r1, r7, #3640	; 0xe38
 80032c4:	483b      	ldr	r0, [pc, #236]	; (80033b4 <main+0x5bc>)
 80032c6:	f011 fbbe 	bl	8014a46 <f_write>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3ebf 	strb.w	r3, [r7, #3775]	; 0xebf
				f_read(&SDFile, &rtext, 100, &bytesread);
 80032d0:	f607 636c 	addw	r3, r7, #3692	; 0xe6c
 80032d4:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 80032d8:	2264      	movs	r2, #100	; 0x64
 80032da:	4836      	ldr	r0, [pc, #216]	; (80033b4 <main+0x5bc>)
 80032dc:	f011 fa74 	bl	80147c8 <f_read>

				usberr = CDC_Transmit_FS(rtext,  sizeof(rtext));
 80032e0:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80032e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032e8:	4618      	mov	r0, r3
 80032ea:	f012 fb0f 	bl	801590c <CDC_Transmit_FS>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 3ebe 	strb.w	r3, [r7, #3774]	; 0xebe
				if((byteswritten == 0) || (res != FR_OK))
 80032f4:	f8d7 3e70 	ldr.w	r3, [r7, #3696]	; 0xe70
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <main+0x50c>
 80032fc:	f897 3ebf 	ldrb.w	r3, [r7, #3775]	; 0xebf
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <main+0x51e>
					{
					while (CDC_Transmit_FS ("Read/Write failed!\n", 19) == USBD_BUSY);
 8003304:	bf00      	nop
 8003306:	2113      	movs	r1, #19
 8003308:	482c      	ldr	r0, [pc, #176]	; (80033bc <main+0x5c4>)
 800330a:	f012 faff 	bl	801590c <CDC_Transmit_FS>
 800330e:	4603      	mov	r3, r0
 8003310:	2b01      	cmp	r3, #1
 8003312:	d0f8      	beq.n	8003306 <main+0x50e>
				if((byteswritten == 0) || (res != FR_OK))
 8003314:	e002      	b.n	800331c <main+0x524>
					}
				else
					{
					f_close(&SDFile);
 8003316:	4827      	ldr	r0, [pc, #156]	; (80033b4 <main+0x5bc>)
 8003318:	f011 fd88 	bl	8014e2c <f_close>
					}

      			}
      		}
      	}
      	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800331c:	2200      	movs	r2, #0
 800331e:	2100      	movs	r1, #0
 8003320:	481f      	ldr	r0, [pc, #124]	; (80033a0 <main+0x5a8>)
 8003322:	f011 f84d 	bl	80143c0 <f_mount>



	HAL_TIM_Base_Start_IT(&htim17);
 8003326:	4826      	ldr	r0, [pc, #152]	; (80033c0 <main+0x5c8>)
 8003328:	f009 fb0a 	bl	800c940 <HAL_TIM_Base_Start_IT>
	tick = 0;
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <main+0x5cc>)
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8003332:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <main+0x5d0>)
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]


	//-[ I2C Bus Scanning ]-
	uint8_t i = 0, ret;
 8003338:	2300      	movs	r3, #0
 800333a:	f887 3edf 	strb.w	r3, [r7, #3807]	; 0xedf
	for(i = 1; i < 128; i++)
 800333e:	2301      	movs	r3, #1
 8003340:	f887 3edf 	strb.w	r3, [r7, #3807]	; 0xedf
 8003344:	e066      	b.n	8003414 <main+0x61c>
		{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8003346:	f897 3edf 	ldrb.w	r3, [r7, #3807]	; 0xedf
 800334a:	b29b      	uxth	r3, r3
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	b299      	uxth	r1, r3
 8003350:	2305      	movs	r3, #5
 8003352:	2203      	movs	r2, #3
 8003354:	481d      	ldr	r0, [pc, #116]	; (80033cc <main+0x5d4>)
 8003356:	f003 f9f1 	bl	800673c <HAL_I2C_IsDeviceReady>
 800335a:	4603      	mov	r3, r0
 800335c:	f887 3eb3 	strb.w	r3, [r7, #3763]	; 0xeb3
		if (ret != HAL_OK) // No ACK Received At That Address
 8003360:	f897 3eb3 	ldrb.w	r3, [r7, #3763]	; 0xeb3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d033      	beq.n	80033d0 <main+0x5d8>
			{
			while (CDC_Transmit_FS (Space, strlen(Space)) == USBD_BUSY);
 8003368:	bf00      	nop
 800336a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800336e:	4618      	mov	r0, r3
 8003370:	f7fc ff46 	bl	8000200 <strlen>
 8003374:	4603      	mov	r3, r0
 8003376:	b29a      	uxth	r2, r3
 8003378:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f012 fac4 	bl	801590c <CDC_Transmit_FS>
 8003384:	4603      	mov	r3, r0
 8003386:	2b01      	cmp	r3, #1
 8003388:	d0ef      	beq.n	800336a <main+0x572>
 800338a:	e03e      	b.n	800340a <main+0x612>
 800338c:	08019408 	.word	0x08019408
 8003390:	20000eb0 	.word	0x20000eb0
 8003394:	20000870 	.word	0x20000870
 8003398:	200007e0 	.word	0x200007e0
 800339c:	20000ec8 	.word	0x20000ec8
 80033a0:	20000ecc 	.word	0x20000ecc
 80033a4:	08019418 	.word	0x08019418
 80033a8:	08019428 	.word	0x08019428
 80033ac:	20000620 	.word	0x20000620
 80033b0:	08019438 	.word	0x08019438
 80033b4:	200010fc 	.word	0x200010fc
 80033b8:	08019444 	.word	0x08019444
 80033bc:	08019458 	.word	0x08019458
 80033c0:	20000704 	.word	0x20000704
 80033c4:	20000ebc 	.word	0x20000ebc
 80033c8:	20000ebd 	.word	0x20000ebd
 80033cc:	20000574 	.word	0x20000574
			}
		else if(ret == HAL_OK)
 80033d0:	f897 3eb3 	ldrb.w	r3, [r7, #3763]	; 0xeb3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d118      	bne.n	800340a <main+0x612>
			{
			sprintf(Buffer, "0x%X", i);
 80033d8:	f897 2edf 	ldrb.w	r2, [r7, #3807]	; 0xedf
 80033dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033e0:	4940      	ldr	r1, [pc, #256]	; (80034e4 <main+0x6ec>)
 80033e2:	4618      	mov	r0, r3
 80033e4:	f013 fd72 	bl	8016ecc <siprintf>
			while (CDC_Transmit_FS (Buffer, strlen(Buffer)) == USBD_BUSY);
 80033e8:	bf00      	nop
 80033ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fc ff06 	bl	8000200 <strlen>
 80033f4:	4603      	mov	r3, r0
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f012 fa84 	bl	801590c <CDC_Transmit_FS>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d0ef      	beq.n	80033ea <main+0x5f2>
	for(i = 1; i < 128; i++)
 800340a:	f897 3edf 	ldrb.w	r3, [r7, #3807]	; 0xedf
 800340e:	3301      	adds	r3, #1
 8003410:	f887 3edf 	strb.w	r3, [r7, #3807]	; 0xedf
 8003414:	f997 3edf 	ldrsb.w	r3, [r7, #3807]	; 0xedf
 8003418:	2b00      	cmp	r3, #0
 800341a:	da94      	bge.n	8003346 <main+0x54e>
			}
		}
	while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 800341c:	bf00      	nop
 800341e:	2101      	movs	r1, #1
 8003420:	4831      	ldr	r0, [pc, #196]	; (80034e8 <main+0x6f0>)
 8003422:	f012 fa73 	bl	801590c <CDC_Transmit_FS>
 8003426:	4603      	mov	r3, r0
 8003428:	2b01      	cmp	r3, #1
 800342a:	d0f8      	beq.n	800341e <main+0x626>
			while (CDC_Transmit_FS ("GPS END\n", 8) == USBD_BUSY);
			}
			}*/

		/* Read temperature and pressure data iteratively based on data ready interrupt */
		if (tick == 0)
 800342c:	4b2f      	ldr	r3, [pc, #188]	; (80034ec <main+0x6f4>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1fa      	bne.n	800342c <main+0x634>
			{
			tick = 10;
 8003436:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <main+0x6f4>)
 8003438:	220a      	movs	r2, #10
 800343a:	701a      	strb	r2, [r3, #0]

			sprintf(SystemTimeBuffer, "time: %.0f s \n", SystemTime);
 800343c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003440:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	4929      	ldr	r1, [pc, #164]	; (80034f0 <main+0x6f8>)
 800344a:	f013 fd3f 	bl	8016ecc <siprintf>
			while (CDC_Transmit_FS (SystemTimeBuffer, strlen(SystemTimeBuffer)) == USBD_BUSY);
 800344e:	bf00      	nop
 8003450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003454:	4618      	mov	r0, r3
 8003456:	f7fc fed3 	bl	8000200 <strlen>
 800345a:	4603      	mov	r3, r0
 800345c:	b29a      	uxth	r2, r3
 800345e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003462:	4611      	mov	r1, r2
 8003464:	4618      	mov	r0, r3
 8003466:	f012 fa51 	bl	801590c <CDC_Transmit_FS>
 800346a:	4603      	mov	r3, r0
 800346c:	2b01      	cmp	r3, #1
 800346e:	d0ef      	beq.n	8003450 <main+0x658>
			SystemTime++;
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <main+0x6fc>)
 8003476:	f507 616e 	add.w	r1, r7, #3808	; 0xee0
 800347a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800347e:	f7fc ff1d 	bl	80002bc <__adddf3>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	f507 616e 	add.w	r1, r7, #3808	; 0xee0
 800348a:	e9c1 2300 	strd	r2, r3, [r1]

			if (data_ready)
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <main+0x700>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d065      	beq.n	8003562 <main+0x76a>
				  {
					  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8003496:	2108      	movs	r1, #8
 8003498:	4818      	ldr	r0, [pc, #96]	; (80034fc <main+0x704>)
 800349a:	f002 fc5f 	bl	8005d5c <HAL_GPIO_TogglePin>
					  while (CDC_Transmit_FS ("GPS START\n", 10) == USBD_BUSY);
 800349e:	bf00      	nop
 80034a0:	210a      	movs	r1, #10
 80034a2:	4817      	ldr	r0, [pc, #92]	; (8003500 <main+0x708>)
 80034a4:	f012 fa32 	bl	801590c <CDC_Transmit_FS>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d0f8      	beq.n	80034a0 <main+0x6a8>
					  if (rxBuffer == rxBuffer1)
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <main+0x70c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a15      	ldr	r2, [pc, #84]	; (8003508 <main+0x710>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d12b      	bne.n	8003510 <main+0x718>
					  {
						  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80034b8:	2120      	movs	r1, #32
 80034ba:	4810      	ldr	r0, [pc, #64]	; (80034fc <main+0x704>)
 80034bc:	f002 fc4e 	bl	8005d5c <HAL_GPIO_TogglePin>
						  while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);

						  //}*/


						  while (CDC_Transmit_FS (rxBuffer2, strlen(rxBuffer2)) == USBD_BUSY);
 80034c0:	bf00      	nop
 80034c2:	4812      	ldr	r0, [pc, #72]	; (800350c <main+0x714>)
 80034c4:	f7fc fe9c 	bl	8000200 <strlen>
 80034c8:	4603      	mov	r3, r0
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	4619      	mov	r1, r3
 80034ce:	480f      	ldr	r0, [pc, #60]	; (800350c <main+0x714>)
 80034d0:	f012 fa1c 	bl	801590c <CDC_Transmit_FS>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d0f3      	beq.n	80034c2 <main+0x6ca>
						  HAL_GPIO_TogglePin (LED2_GPIO_Port, LED2_Pin);
 80034da:	2120      	movs	r1, #32
 80034dc:	4807      	ldr	r0, [pc, #28]	; (80034fc <main+0x704>)
 80034de:	f002 fc3d 	bl	8005d5c <HAL_GPIO_TogglePin>
 80034e2:	e02a      	b.n	800353a <main+0x742>
 80034e4:	0801946c 	.word	0x0801946c
 80034e8:	08019474 	.word	0x08019474
 80034ec:	20000ebc 	.word	0x20000ebc
 80034f0:	08019478 	.word	0x08019478
 80034f4:	3ff00000 	.word	0x3ff00000
 80034f8:	20000eb8 	.word	0x20000eb8
 80034fc:	48000c00 	.word	0x48000c00
 8003500:	08019488 	.word	0x08019488
 8003504:	20000eb0 	.word	0x20000eb0
 8003508:	20000870 	.word	0x20000870
 800350c:	20000b90 	.word	0x20000b90


					  }
					  else
					  {
						  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003510:	2140      	movs	r1, #64	; 0x40
 8003512:	48ad      	ldr	r0, [pc, #692]	; (80037c8 <main+0x9d0>)
 8003514:	f002 fc22 	bl	8005d5c <HAL_GPIO_TogglePin>
						  while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);

						  //}*/


						  while (CDC_Transmit_FS (rxBuffer1, strlen(rxBuffer1)) == USBD_BUSY);
 8003518:	bf00      	nop
 800351a:	48ac      	ldr	r0, [pc, #688]	; (80037cc <main+0x9d4>)
 800351c:	f7fc fe70 	bl	8000200 <strlen>
 8003520:	4603      	mov	r3, r0
 8003522:	b29b      	uxth	r3, r3
 8003524:	4619      	mov	r1, r3
 8003526:	48a9      	ldr	r0, [pc, #676]	; (80037cc <main+0x9d4>)
 8003528:	f012 f9f0 	bl	801590c <CDC_Transmit_FS>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d0f3      	beq.n	800351a <main+0x722>
						  HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003532:	2140      	movs	r1, #64	; 0x40
 8003534:	48a4      	ldr	r0, [pc, #656]	; (80037c8 <main+0x9d0>)
 8003536:	f002 fc11 	bl	8005d5c <HAL_GPIO_TogglePin>



					  }

					  data_ready ^= 1;
 800353a:	4ba5      	ldr	r3, [pc, #660]	; (80037d0 <main+0x9d8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f083 0301 	eor.w	r3, r3, #1
 8003542:	4aa3      	ldr	r2, [pc, #652]	; (80037d0 <main+0x9d8>)
 8003544:	6013      	str	r3, [r2, #0]
					  send_ready |= 1;
 8003546:	4ba3      	ldr	r3, [pc, #652]	; (80037d4 <main+0x9dc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	4aa1      	ldr	r2, [pc, #644]	; (80037d4 <main+0x9dc>)
 8003550:	6013      	str	r3, [r2, #0]

					  while (CDC_Transmit_FS ("GPS END\n", 8) == USBD_BUSY);
 8003552:	bf00      	nop
 8003554:	2108      	movs	r1, #8
 8003556:	48a0      	ldr	r0, [pc, #640]	; (80037d8 <main+0x9e0>)
 8003558:	f012 f9d8 	bl	801590c <CDC_Transmit_FS>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d0f8      	beq.n	8003554 <main+0x75c>
					}

				while (CDC_Transmit_FS ("GPS END\n", 8) == USBD_BUSY);
				}*/

			HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8003562:	2110      	movs	r1, #16
 8003564:	4898      	ldr	r0, [pc, #608]	; (80037c8 <main+0x9d0>)
 8003566:	f002 fbf9 	bl	8005d5c <HAL_GPIO_TogglePin>

			settings.op_mode = BMP3_MODE_FORCED;
 800356a:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 800356e:	f6a3 5398 	subw	r3, r3, #3480	; 0xd98
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
			rslt = bmp3_set_op_mode(&settings, &dev);
 8003576:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800357a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f7fd ff26 	bl	80013d2 <bmp3_set_op_mode>
 8003586:	4603      	mov	r3, r0
 8003588:	f887 3ecf 	strb.w	r3, [r7, #3791]	; 0xecf
			bmp3_check_rslt("bmp3_set_op_mode", rslt);
 800358c:	f997 3ecf 	ldrsb.w	r3, [r7, #3791]	; 0xecf
 8003590:	4619      	mov	r1, r3
 8003592:	4892      	ldr	r0, [pc, #584]	; (80037dc <main+0x9e4>)
 8003594:	f7ff f994 	bl	80028c0 <bmp3_check_rslt>
			* First parameter indicates the type of data to be read
			* BMP3_PRESS_TEMP : To read pressure and temperature data
			* BMP3_TEMP       : To read only temperature data
			* BMP3_PRESS      : To read only pressure data
			*/
			rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmpdata, &dev);
 8003598:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800359c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80035a0:	4619      	mov	r1, r3
 80035a2:	2003      	movs	r0, #3
 80035a4:	f7fd ff89 	bl	80014ba <bmp3_get_sensor_data>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 3ecf 	strb.w	r3, [r7, #3791]	; 0xecf
			bmp3_check_rslt("bmp3_get_sensor_data", rslt);
 80035ae:	f997 3ecf 	ldrsb.w	r3, [r7, #3791]	; 0xecf
 80035b2:	4619      	mov	r1, r3
 80035b4:	488a      	ldr	r0, [pc, #552]	; (80037e0 <main+0x9e8>)
 80035b6:	f7ff f983 	bl	80028c0 <bmp3_check_rslt>

			/* NOTE : Read status register again to clear data ready interrupt status */
			rslt = bmp3_get_status(&status, &dev);
 80035ba:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80035be:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fe8f 	bl	80012e8 <bmp3_get_status>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 3ecf 	strb.w	r3, [r7, #3791]	; 0xecf
			bmp3_check_rslt("bmp3_get_status", rslt);
 80035d0:	f997 3ecf 	ldrsb.w	r3, [r7, #3791]	; 0xecf
 80035d4:	4619      	mov	r1, r3
 80035d6:	4883      	ldr	r0, [pc, #524]	; (80037e4 <main+0x9ec>)
 80035d8:	f7ff f972 	bl	80028c0 <bmp3_check_rslt>

			while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 80035dc:	bf00      	nop
 80035de:	2101      	movs	r1, #1
 80035e0:	4881      	ldr	r0, [pc, #516]	; (80037e8 <main+0x9f0>)
 80035e2:	f012 f993 	bl	801590c <CDC_Transmit_FS>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d0f8      	beq.n	80035de <main+0x7e6>
			while (CDC_Transmit_FS ("BMP390 START\n", 13) == USBD_BUSY);
 80035ec:	bf00      	nop
 80035ee:	210d      	movs	r1, #13
 80035f0:	487e      	ldr	r0, [pc, #504]	; (80037ec <main+0x9f4>)
 80035f2:	f012 f98b 	bl	801590c <CDC_Transmit_FS>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d0f8      	beq.n	80035ee <main+0x7f6>
			sprintf(TempBuffer, "%.2f\n", bmpdata.temperature);
 80035fc:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8003600:	f6a3 5388 	subw	r3, r3, #3464	; 0xd88
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800360c:	4978      	ldr	r1, [pc, #480]	; (80037f0 <main+0x9f8>)
 800360e:	f013 fc5d 	bl	8016ecc <siprintf>
			sprintf(PresBuffer, "%.2f\n", bmpdata.pressure);
 8003612:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8003616:	f6a3 5388 	subw	r3, r3, #3464	; 0xd88
 800361a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800361e:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8003622:	4973      	ldr	r1, [pc, #460]	; (80037f0 <main+0x9f8>)
 8003624:	f013 fc52 	bl	8016ecc <siprintf>
			while (CDC_Transmit_FS (TempBuffer, strlen(TempBuffer)) == USBD_BUSY);
 8003628:	bf00      	nop
 800362a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800362e:	4618      	mov	r0, r3
 8003630:	f7fc fde6 	bl	8000200 <strlen>
 8003634:	4603      	mov	r3, r0
 8003636:	b29a      	uxth	r2, r3
 8003638:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f012 f964 	bl	801590c <CDC_Transmit_FS>
 8003644:	4603      	mov	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d0ef      	beq.n	800362a <main+0x832>
			while (CDC_Transmit_FS (PresBuffer, strlen(PresBuffer)) == USBD_BUSY);
 800364a:	bf00      	nop
 800364c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003650:	4618      	mov	r0, r3
 8003652:	f7fc fdd5 	bl	8000200 <strlen>
 8003656:	4603      	mov	r3, r0
 8003658:	b29a      	uxth	r2, r3
 800365a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f012 f953 	bl	801590c <CDC_Transmit_FS>
 8003666:	4603      	mov	r3, r0
 8003668:	2b01      	cmp	r3, #1
 800366a:	d0ef      	beq.n	800364c <main+0x854>
			while (CDC_Transmit_FS ("BMP390 END\n", 11) == USBD_BUSY);
 800366c:	bf00      	nop
 800366e:	210b      	movs	r1, #11
 8003670:	4860      	ldr	r0, [pc, #384]	; (80037f4 <main+0x9fc>)
 8003672:	f012 f94b 	bl	801590c <CDC_Transmit_FS>
 8003676:	4603      	mov	r3, r0
 8003678:	2b01      	cmp	r3, #1
 800367a:	d0f8      	beq.n	800366e <main+0x876>
			while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 800367c:	bf00      	nop
 800367e:	2101      	movs	r1, #1
 8003680:	4859      	ldr	r0, [pc, #356]	; (80037e8 <main+0x9f0>)
 8003682:	f012 f943 	bl	801590c <CDC_Transmit_FS>
 8003686:	4603      	mov	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d0f8      	beq.n	800367e <main+0x886>

			//Read gyro data
			AccError = LSM6DSO_ACC_GetAxes (&AccObj, &Acceleration);
 800368c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8003690:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f001 f808 	bl	80046ac <LSM6DSO_ACC_GetAxes>
 800369c:	f8c7 0eb8 	str.w	r0, [r7, #3768]	; 0xeb8
			AVError = LSM6DSO_GYRO_GetAxes (&AccObj, &AngularVelocity);
 80036a0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80036a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 f8cc 	bl	8004848 <LSM6DSO_GYRO_GetAxes>
 80036b0:	f8c7 0eb4 	str.w	r0, [r7, #3764]	; 0xeb4
			while (CDC_Transmit_FS ("GYRO START\n", 11) == USBD_BUSY);
 80036b4:	bf00      	nop
 80036b6:	210b      	movs	r1, #11
 80036b8:	484f      	ldr	r0, [pc, #316]	; (80037f8 <main+0xa00>)
 80036ba:	f012 f927 	bl	801590c <CDC_Transmit_FS>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d0f8      	beq.n	80036b6 <main+0x8be>
			while (CDC_Transmit_FS (AccError, strlen(AccError)) == USBD_BUSY);
 80036c4:	bf00      	nop
 80036c6:	f8d7 4eb8 	ldr.w	r4, [r7, #3768]	; 0xeb8
 80036ca:	f8d7 3eb8 	ldr.w	r3, [r7, #3768]	; 0xeb8
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fc fd96 	bl	8000200 <strlen>
 80036d4:	4603      	mov	r3, r0
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	4619      	mov	r1, r3
 80036da:	4620      	mov	r0, r4
 80036dc:	f012 f916 	bl	801590c <CDC_Transmit_FS>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d0ef      	beq.n	80036c6 <main+0x8ce>
			while (CDC_Transmit_FS (AVError, strlen(AVError)) == USBD_BUSY);
 80036e6:	bf00      	nop
 80036e8:	f8d7 4eb4 	ldr.w	r4, [r7, #3764]	; 0xeb4
 80036ec:	f8d7 3eb4 	ldr.w	r3, [r7, #3764]	; 0xeb4
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fc fd85 	bl	8000200 <strlen>
 80036f6:	4603      	mov	r3, r0
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	4619      	mov	r1, r3
 80036fc:	4620      	mov	r0, r4
 80036fe:	f012 f905 	bl	801590c <CDC_Transmit_FS>
 8003702:	4603      	mov	r3, r0
 8003704:	2b01      	cmp	r3, #1
 8003706:	d0ef      	beq.n	80036e8 <main+0x8f0>
			sprintf(AccelerationBuffer, "%.10f   %.10f   %.10f\n", Acceleration.x, Acceleration.y, Acceleration.z);
 8003708:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 800370c:	f6a3 6348 	subw	r3, r3, #3656	; 0xe48
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8003716:	f6a3 6348 	subw	r3, r3, #3656	; 0xe48
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8003720:	f6a3 6348 	subw	r3, r3, #3656	; 0xe48
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	460b      	mov	r3, r1
 800372e:	4933      	ldr	r1, [pc, #204]	; (80037fc <main+0xa04>)
 8003730:	f013 fbcc 	bl	8016ecc <siprintf>
			while (CDC_Transmit_FS (AccelerationBuffer, strlen(AccelerationBuffer)) == USBD_BUSY);
 8003734:	bf00      	nop
 8003736:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc fd60 	bl	8000200 <strlen>
 8003740:	4603      	mov	r3, r0
 8003742:	b29a      	uxth	r2, r3
 8003744:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f012 f8de 	bl	801590c <CDC_Transmit_FS>
 8003750:	4603      	mov	r3, r0
 8003752:	2b01      	cmp	r3, #1
 8003754:	d0ef      	beq.n	8003736 <main+0x93e>
			sprintf(AngularVelocityBuffer, "%.10f   %.10f   %.10f\n", AngularVelocity.x, AngularVelocity.y, AngularVelocity.z);
 8003756:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 800375a:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8003764:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 800376e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	460b      	mov	r3, r1
 800377c:	491f      	ldr	r1, [pc, #124]	; (80037fc <main+0xa04>)
 800377e:	f013 fba5 	bl	8016ecc <siprintf>
			while (CDC_Transmit_FS (AngularVelocityBuffer, strlen(AngularVelocityBuffer)) == USBD_BUSY);
 8003782:	bf00      	nop
 8003784:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003788:	4618      	mov	r0, r3
 800378a:	f7fc fd39 	bl	8000200 <strlen>
 800378e:	4603      	mov	r3, r0
 8003790:	b29a      	uxth	r2, r3
 8003792:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f012 f8b7 	bl	801590c <CDC_Transmit_FS>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d0ef      	beq.n	8003784 <main+0x98c>

			while (CDC_Transmit_FS ("GYRO END\n", 9) == USBD_BUSY);
 80037a4:	bf00      	nop
 80037a6:	2109      	movs	r1, #9
 80037a8:	4815      	ldr	r0, [pc, #84]	; (8003800 <main+0xa08>)
 80037aa:	f012 f8af 	bl	801590c <CDC_Transmit_FS>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d0f8      	beq.n	80037a6 <main+0x9ae>
			while (CDC_Transmit_FS ("\n", 1) == USBD_BUSY);
 80037b4:	bf00      	nop
 80037b6:	2101      	movs	r1, #1
 80037b8:	480b      	ldr	r0, [pc, #44]	; (80037e8 <main+0x9f0>)
 80037ba:	f012 f8a7 	bl	801590c <CDC_Transmit_FS>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d0f8      	beq.n	80037b6 <main+0x9be>
		if (tick == 0)
 80037c4:	e632      	b.n	800342c <main+0x634>
 80037c6:	bf00      	nop
 80037c8:	48000c00 	.word	0x48000c00
 80037cc:	20000870 	.word	0x20000870
 80037d0:	20000eb8 	.word	0x20000eb8
 80037d4:	20000000 	.word	0x20000000
 80037d8:	08019494 	.word	0x08019494
 80037dc:	080194a0 	.word	0x080194a0
 80037e0:	080194b4 	.word	0x080194b4
 80037e4:	080194cc 	.word	0x080194cc
 80037e8:	08019474 	.word	0x08019474
 80037ec:	080194dc 	.word	0x080194dc
 80037f0:	080194ec 	.word	0x080194ec
 80037f4:	080194f4 	.word	0x080194f4
 80037f8:	08019500 	.word	0x08019500
 80037fc:	0801950c 	.word	0x0801950c
 8003800:	08019524 	.word	0x08019524

08003804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b096      	sub	sp, #88	; 0x58
 8003808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800380a:	f107 0314 	add.w	r3, r7, #20
 800380e:	2244      	movs	r2, #68	; 0x44
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f012 fde0 	bl	80163d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003818:	463b      	mov	r3, r7
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	60da      	str	r2, [r3, #12]
 8003824:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8003826:	2000      	movs	r0, #0
 8003828:	f004 fe4c 	bl	80084c4 <HAL_PWREx_ControlVoltageScaling>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8003832:	f000 facd 	bl	8003dd0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003836:	2321      	movs	r3, #33	; 0x21
 8003838:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800383a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800383e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003840:	2301      	movs	r3, #1
 8003842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003844:	2302      	movs	r3, #2
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003848:	2303      	movs	r3, #3
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800384c:	2301      	movs	r3, #1
 800384e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8003850:	231e      	movs	r3, #30
 8003852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003854:	2302      	movs	r3, #2
 8003856:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003858:	2302      	movs	r3, #2
 800385a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800385c:	2302      	movs	r3, #2
 800385e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	4618      	mov	r0, r3
 8003866:	f004 fee1 	bl	800862c <HAL_RCC_OscConfig>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8003870:	f000 faae 	bl	8003dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003874:	230f      	movs	r3, #15
 8003876:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003878:	2303      	movs	r3, #3
 800387a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800387c:	2300      	movs	r3, #0
 800387e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003888:	463b      	mov	r3, r7
 800388a:	2105      	movs	r1, #5
 800388c:	4618      	mov	r0, r3
 800388e:	f005 fae7 	bl	8008e60 <HAL_RCC_ClockConfig>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003898:	f000 fa9a 	bl	8003dd0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800389c:	f005 fcde 	bl	800925c <HAL_RCC_EnableCSS>
}
 80038a0:	bf00      	nop
 80038a2:	3758      	adds	r7, #88	; 0x58
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80038ac:	2200      	movs	r2, #0
 80038ae:	2100      	movs	r1, #0
 80038b0:	201a      	movs	r0, #26
 80038b2:	f001 feae 	bl	8005612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80038b6:	201a      	movs	r0, #26
 80038b8:	f001 fec7 	bl	800564a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038bc:	2200      	movs	r2, #0
 80038be:	2100      	movs	r1, #0
 80038c0:	2026      	movs	r0, #38	; 0x26
 80038c2:	f001 fea6 	bl	8005612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038c6:	2026      	movs	r0, #38	; 0x26
 80038c8:	f001 febf 	bl	800564a <HAL_NVIC_EnableIRQ>
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80038d4:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <MX_I2C1_Init+0x74>)
 80038d6:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <MX_I2C1_Init+0x78>)
 80038d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80038da:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <MX_I2C1_Init+0x74>)
 80038dc:	4a1b      	ldr	r2, [pc, #108]	; (800394c <MX_I2C1_Init+0x7c>)
 80038de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80038e0:	4b18      	ldr	r3, [pc, #96]	; (8003944 <MX_I2C1_Init+0x74>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038e6:	4b17      	ldr	r3, [pc, #92]	; (8003944 <MX_I2C1_Init+0x74>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038ec:	4b15      	ldr	r3, [pc, #84]	; (8003944 <MX_I2C1_Init+0x74>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80038f2:	4b14      	ldr	r3, [pc, #80]	; (8003944 <MX_I2C1_Init+0x74>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <MX_I2C1_Init+0x74>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038fe:	4b11      	ldr	r3, [pc, #68]	; (8003944 <MX_I2C1_Init+0x74>)
 8003900:	2200      	movs	r2, #0
 8003902:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <MX_I2C1_Init+0x74>)
 8003906:	2200      	movs	r2, #0
 8003908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800390a:	480e      	ldr	r0, [pc, #56]	; (8003944 <MX_I2C1_Init+0x74>)
 800390c:	f002 fa40 	bl	8005d90 <HAL_I2C_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003916:	f000 fa5b 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800391a:	2100      	movs	r1, #0
 800391c:	4809      	ldr	r0, [pc, #36]	; (8003944 <MX_I2C1_Init+0x74>)
 800391e:	f003 fb4f 	bl	8006fc0 <HAL_I2CEx_ConfigAnalogFilter>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003928:	f000 fa52 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800392c:	2100      	movs	r1, #0
 800392e:	4805      	ldr	r0, [pc, #20]	; (8003944 <MX_I2C1_Init+0x74>)
 8003930:	f003 fb91 	bl	8007056 <HAL_I2CEx_ConfigDigitalFilter>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800393a:	f000 fa49 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	200005cc 	.word	0x200005cc
 8003948:	40005400 	.word	0x40005400
 800394c:	307075b1 	.word	0x307075b1

08003950 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <MX_SDMMC1_SD_Init+0x3c>)
 8003956:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <MX_SDMMC1_SD_Init+0x40>)
 8003958:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <MX_SDMMC1_SD_Init+0x3c>)
 800395c:	2200      	movs	r2, #0
 800395e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <MX_SDMMC1_SD_Init+0x3c>)
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <MX_SDMMC1_SD_Init+0x3c>)
 8003968:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800396c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <MX_SDMMC1_SD_Init+0x3c>)
 8003970:	2200      	movs	r2, #0
 8003972:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 199;
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <MX_SDMMC1_SD_Init+0x3c>)
 8003976:	22c7      	movs	r2, #199	; 0xc7
 8003978:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800397a:	4b04      	ldr	r3, [pc, #16]	; (800398c <MX_SDMMC1_SD_Init+0x3c>)
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000620 	.word	0x20000620
 8003990:	50062400 	.word	0x50062400

08003994 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <MX_SPI1_Init+0x74>)
 800399a:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <MX_SPI1_Init+0x78>)
 800399c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80039b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039ba:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039bc:	2200      	movs	r2, #0
 80039be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80039c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039dc:	2200      	movs	r2, #0
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039e2:	2207      	movs	r2, #7
 80039e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039ee:	2208      	movs	r2, #8
 80039f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039f2:	4805      	ldr	r0, [pc, #20]	; (8003a08 <MX_SPI1_Init+0x74>)
 80039f4:	f008 fea9 	bl	800c74a <HAL_SPI_Init>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80039fe:	f000 f9e7 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	200006a0 	.word	0x200006a0
 8003a0c:	40013000 	.word	0x40013000

08003a10 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b092      	sub	sp, #72	; 0x48
 8003a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	60da      	str	r2, [r3, #12]
 8003a24:	611a      	str	r2, [r3, #16]
 8003a26:	615a      	str	r2, [r3, #20]
 8003a28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	222c      	movs	r2, #44	; 0x2c
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f012 fcd1 	bl	80163d8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003a36:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <MX_TIM17_Init+0xe4>)
 8003a38:	4a2f      	ldr	r2, [pc, #188]	; (8003af8 <MX_TIM17_Init+0xe8>)
 8003a3a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <MX_TIM17_Init+0xe4>)
 8003a3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a42:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a44:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <MX_TIM17_Init+0xe4>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8003a4a:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <MX_TIM17_Init+0xe4>)
 8003a4c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8003a50:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a52:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <MX_TIM17_Init+0xe4>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003a58:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <MX_TIM17_Init+0xe4>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a5e:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <MX_TIM17_Init+0xe4>)
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003a64:	4823      	ldr	r0, [pc, #140]	; (8003af4 <MX_TIM17_Init+0xe4>)
 8003a66:	f008 ff13 	bl	800c890 <HAL_TIM_Base_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8003a70:	f000 f9ae 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8003a74:	481f      	ldr	r0, [pc, #124]	; (8003af4 <MX_TIM17_Init+0xe4>)
 8003a76:	f008 ffd3 	bl	800ca20 <HAL_TIM_OC_Init>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8003a80:	f000 f9a6 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003a84:	2300      	movs	r3, #0
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a90:	2300      	movs	r3, #0
 8003a92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4812      	ldr	r0, [pc, #72]	; (8003af4 <MX_TIM17_Init+0xe4>)
 8003aaa:	f009 f939 	bl	800cd20 <HAL_TIM_OC_ConfigChannel>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8003ab4:	f000 f98c 	bl	8003dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ad0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003ad6:	463b      	mov	r3, r7
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4806      	ldr	r0, [pc, #24]	; (8003af4 <MX_TIM17_Init+0xe4>)
 8003adc:	f009 fd3c 	bl	800d558 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8003ae6:	f000 f973 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003aea:	bf00      	nop
 8003aec:	3748      	adds	r7, #72	; 0x48
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000704 	.word	0x20000704
 8003af8:	40014800 	.word	0x40014800

08003afc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b02:	4a23      	ldr	r2, [pc, #140]	; (8003b90 <MX_USART1_UART_Init+0x94>)
 8003b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 8003b06:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b08:	4a22      	ldr	r2, [pc, #136]	; (8003b94 <MX_USART1_UART_Init+0x98>)
 8003b0a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b0c:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b12:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b18:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b20:	220c      	movs	r2, #12
 8003b22:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b30:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b36:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b3c:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b42:	4812      	ldr	r0, [pc, #72]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b44:	f009 fda4 	bl	800d690 <HAL_UART_Init>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8003b4e:	f000 f93f 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b52:	2100      	movs	r1, #0
 8003b54:	480d      	ldr	r0, [pc, #52]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b56:	f00a fed2 	bl	800e8fe <HAL_UARTEx_SetTxFifoThreshold>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8003b60:	f000 f936 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b64:	2100      	movs	r1, #0
 8003b66:	4809      	ldr	r0, [pc, #36]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b68:	f00a ff07 	bl	800e97a <HAL_UARTEx_SetRxFifoThreshold>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8003b72:	f000 f92d 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b76:	4805      	ldr	r0, [pc, #20]	; (8003b8c <MX_USART1_UART_Init+0x90>)
 8003b78:	f00a fe88 	bl	800e88c <HAL_UARTEx_DisableFifoMode>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003b82:	f000 f925 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000750 	.word	0x20000750
 8003b90:	40013800 	.word	0x40013800
 8003b94:	0001c138 	.word	0x0001c138

08003b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003b9e:	4a23      	ldr	r2, [pc, #140]	; (8003c2c <MX_USART2_UART_Init+0x94>)
 8003ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003ba2:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003ba4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003baa:	4b1f      	ldr	r3, [pc, #124]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bc2:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc8:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003be0:	4811      	ldr	r0, [pc, #68]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003be2:	f009 fd55 	bl	800d690 <HAL_UART_Init>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003bec:	f000 f8f0 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	480d      	ldr	r0, [pc, #52]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003bf4:	f00a fe83 	bl	800e8fe <HAL_UARTEx_SetTxFifoThreshold>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003bfe:	f000 f8e7 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c02:	2100      	movs	r1, #0
 8003c04:	4808      	ldr	r0, [pc, #32]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003c06:	f00a feb8 	bl	800e97a <HAL_UARTEx_SetRxFifoThreshold>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003c10:	f000 f8de 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003c14:	4804      	ldr	r0, [pc, #16]	; (8003c28 <MX_USART2_UART_Init+0x90>)
 8003c16:	f00a fe39 	bl	800e88c <HAL_UARTEx_DisableFifoMode>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003c20:	f000 f8d6 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c24:	bf00      	nop
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	200007e0 	.word	0x200007e0
 8003c2c:	40004400 	.word	0x40004400

08003c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08c      	sub	sp, #48	; 0x30
 8003c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c36:	f107 031c 	add.w	r3, r7, #28
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	609a      	str	r2, [r3, #8]
 8003c42:	60da      	str	r2, [r3, #12]
 8003c44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c46:	4b5d      	ldr	r3, [pc, #372]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	4a5c      	ldr	r2, [pc, #368]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c4c:	f043 0310 	orr.w	r3, r3, #16
 8003c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c52:	4b5a      	ldr	r3, [pc, #360]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5e:	4b57      	ldr	r3, [pc, #348]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	4a56      	ldr	r2, [pc, #344]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c6a:	4b54      	ldr	r3, [pc, #336]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c76:	4b51      	ldr	r3, [pc, #324]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	4a50      	ldr	r2, [pc, #320]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c82:	4b4e      	ldr	r3, [pc, #312]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8e:	4b4b      	ldr	r3, [pc, #300]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	4a4a      	ldr	r2, [pc, #296]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c9a:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca6:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	4a44      	ldr	r2, [pc, #272]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003cac:	f043 0302 	orr.w	r3, r3, #2
 8003cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cb2:	4b42      	ldr	r3, [pc, #264]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cbe:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	4a3e      	ldr	r2, [pc, #248]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003cc4:	f043 0308 	orr.w	r3, r3, #8
 8003cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cca:	4b3c      	ldr	r3, [pc, #240]	; (8003dbc <MX_GPIO_Init+0x18c>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	607b      	str	r3, [r7, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f641 013c 	movw	r1, #6204	; 0x183c
 8003cdc:	4838      	ldr	r0, [pc, #224]	; (8003dc0 <MX_GPIO_Init+0x190>)
 8003cde:	f002 f825 	bl	8005d2c <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2130      	movs	r1, #48	; 0x30
 8003ce6:	4837      	ldr	r0, [pc, #220]	; (8003dc4 <MX_GPIO_Init+0x194>)
 8003ce8:	f002 f820 	bl	8005d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003cec:	2200      	movs	r2, #0
 8003cee:	2178      	movs	r1, #120	; 0x78
 8003cf0:	4835      	ldr	r0, [pc, #212]	; (8003dc8 <MX_GPIO_Init+0x198>)
 8003cf2:	f002 f81b 	bl	8005d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8003cf6:	f641 033c 	movw	r3, #6204	; 0x183c
 8003cfa:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d04:	2300      	movs	r3, #0
 8003d06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d08:	f107 031c 	add.w	r3, r7, #28
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	482c      	ldr	r0, [pc, #176]	; (8003dc0 <MX_GPIO_Init+0x190>)
 8003d10:	f001 fd70 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8003d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8003d22:	f107 031c 	add.w	r3, r7, #28
 8003d26:	4619      	mov	r1, r3
 8003d28:	4826      	ldr	r0, [pc, #152]	; (8003dc4 <MX_GPIO_Init+0x194>)
 8003d2a:	f001 fd63 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 8003d2e:	f248 0302 	movw	r3, #32770	; 0x8002
 8003d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d34:	2300      	movs	r3, #0
 8003d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d3c:	f107 031c 	add.w	r3, r7, #28
 8003d40:	4619      	mov	r1, r3
 8003d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d46:	f001 fd55 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8003d4a:	2330      	movs	r3, #48	; 0x30
 8003d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d56:	2300      	movs	r3, #0
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d5a:	f107 031c 	add.w	r3, r7, #28
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4818      	ldr	r0, [pc, #96]	; (8003dc4 <MX_GPIO_Init+0x194>)
 8003d62:	f001 fd47 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8003d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d70:	2301      	movs	r3, #1
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8003d74:	f107 031c 	add.w	r3, r7, #28
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4811      	ldr	r0, [pc, #68]	; (8003dc0 <MX_GPIO_Init+0x190>)
 8003d7c:	f001 fd3a 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8003d80:	2378      	movs	r3, #120	; 0x78
 8003d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d84:	2301      	movs	r3, #1
 8003d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d90:	f107 031c 	add.w	r3, r7, #28
 8003d94:	4619      	mov	r1, r3
 8003d96:	480c      	ldr	r0, [pc, #48]	; (8003dc8 <MX_GPIO_Init+0x198>)
 8003d98:	f001 fd2c 	bl	80057f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	4619      	mov	r1, r3
 8003dae:	4807      	ldr	r0, [pc, #28]	; (8003dcc <MX_GPIO_Init+0x19c>)
 8003db0:	f001 fd20 	bl	80057f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003db4:	bf00      	nop
 8003db6:	3730      	adds	r7, #48	; 0x30
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	48001000 	.word	0x48001000
 8003dc4:	48000800 	.word	0x48000800
 8003dc8:	48000c00 	.word	0x48000c00
 8003dcc:	48000400 	.word	0x48000400

08003dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003dd4:	b672      	cpsid	i
}
 8003dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8003dd8:	4801      	ldr	r0, [pc, #4]	; (8003de0 <Error_Handler+0x10>)
 8003dda:	f013 f84f 	bl	8016e7c <iprintf>
  while (1)
 8003dde:	e7fe      	b.n	8003dde <Error_Handler+0xe>
 8003de0:	0801956c 	.word	0x0801956c

08003de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dea:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_MspInit+0x44>)
 8003dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dee:	4a0e      	ldr	r2, [pc, #56]	; (8003e28 <HAL_MspInit+0x44>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6613      	str	r3, [r2, #96]	; 0x60
 8003df6:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <HAL_MspInit+0x44>)
 8003df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	607b      	str	r3, [r7, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_MspInit+0x44>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	4a08      	ldr	r2, [pc, #32]	; (8003e28 <HAL_MspInit+0x44>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_MspInit+0x44>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000

08003e2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b0ae      	sub	sp, #184	; 0xb8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e44:	f107 0310 	add.w	r3, r7, #16
 8003e48:	2294      	movs	r2, #148	; 0x94
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f012 fac3 	bl	80163d8 <memset>
  if(hi2c->Instance==I2C1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a21      	ldr	r2, [pc, #132]	; (8003edc <HAL_I2C_MspInit+0xb0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d13a      	bne.n	8003ed2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003e5c:	2340      	movs	r3, #64	; 0x40
 8003e5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e60:	2300      	movs	r3, #0
 8003e62:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f005 fae3 	bl	8009434 <HAL_RCCEx_PeriphCLKConfig>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003e74:	f7ff ffac 	bl	8003dd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e78:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <HAL_I2C_MspInit+0xb4>)
 8003e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7c:	4a18      	ldr	r2, [pc, #96]	; (8003ee0 <HAL_I2C_MspInit+0xb4>)
 8003e7e:	f043 0302 	orr.w	r3, r3, #2
 8003e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e84:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <HAL_I2C_MspInit+0xb4>)
 8003e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e90:	23c0      	movs	r3, #192	; 0xc0
 8003e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e96:	2312      	movs	r3, #18
 8003e98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	480b      	ldr	r0, [pc, #44]	; (8003ee4 <HAL_I2C_MspInit+0xb8>)
 8003eb6:	f001 fc9d 	bl	80057f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <HAL_I2C_MspInit+0xb4>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <HAL_I2C_MspInit+0xb4>)
 8003ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_I2C_MspInit+0xb4>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ed2:	bf00      	nop
 8003ed4:	37b8      	adds	r7, #184	; 0xb8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40005400 	.word	0x40005400
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	48000400 	.word	0x48000400

08003ee8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <HAL_I2C_MspDeInit+0x38>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d10d      	bne.n	8003f16 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <HAL_I2C_MspDeInit+0x3c>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efe:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <HAL_I2C_MspDeInit+0x3c>)
 8003f00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f04:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003f06:	2140      	movs	r1, #64	; 0x40
 8003f08:	4807      	ldr	r0, [pc, #28]	; (8003f28 <HAL_I2C_MspDeInit+0x40>)
 8003f0a:	f001 fe05 	bl	8005b18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003f0e:	2180      	movs	r1, #128	; 0x80
 8003f10:	4805      	ldr	r0, [pc, #20]	; (8003f28 <HAL_I2C_MspDeInit+0x40>)
 8003f12:	f001 fe01 	bl	8005b18 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40005400 	.word	0x40005400
 8003f24:	40021000 	.word	0x40021000
 8003f28:	48000400 	.word	0x48000400

08003f2c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b0b0      	sub	sp, #192	; 0xc0
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f44:	f107 0318 	add.w	r3, r7, #24
 8003f48:	2294      	movs	r2, #148	; 0x94
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f012 fa43 	bl	80163d8 <memset>
  if(hsd->Instance==SDMMC1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a33      	ldr	r2, [pc, #204]	; (8004024 <HAL_SD_MspInit+0xf8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d15f      	bne.n	800401c <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8003f5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f60:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8003f62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f6a:	f107 0318 	add.w	r3, r7, #24
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f005 fa60 	bl	8009434 <HAL_RCCEx_PeriphCLKConfig>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8003f7a:	f7ff ff29 	bl	8003dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003f7e:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <HAL_SD_MspInit+0xfc>)
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	4a29      	ldr	r2, [pc, #164]	; (8004028 <HAL_SD_MspInit+0xfc>)
 8003f84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f8a:	4b27      	ldr	r3, [pc, #156]	; (8004028 <HAL_SD_MspInit+0xfc>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_SD_MspInit+0xfc>)
 8003f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9a:	4a23      	ldr	r2, [pc, #140]	; (8004028 <HAL_SD_MspInit+0xfc>)
 8003f9c:	f043 0304 	orr.w	r3, r3, #4
 8003fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fa2:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_SD_MspInit+0xfc>)
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	613b      	str	r3, [r7, #16]
 8003fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <HAL_SD_MspInit+0xfc>)
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb2:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <HAL_SD_MspInit+0xfc>)
 8003fb4:	f043 0308 	orr.w	r3, r3, #8
 8003fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_SD_MspInit+0xfc>)
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003fc6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003fe0:	230c      	movs	r3, #12
 8003fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fe6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003fea:	4619      	mov	r1, r3
 8003fec:	480f      	ldr	r0, [pc, #60]	; (800402c <HAL_SD_MspInit+0x100>)
 8003fee:	f001 fc01 	bl	80057f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ff2:	2304      	movs	r3, #4
 8003ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004004:	2303      	movs	r3, #3
 8004006:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800400a:	230c      	movs	r3, #12
 800400c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004010:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004014:	4619      	mov	r1, r3
 8004016:	4806      	ldr	r0, [pc, #24]	; (8004030 <HAL_SD_MspInit+0x104>)
 8004018:	f001 fbec 	bl	80057f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800401c:	bf00      	nop
 800401e:	37c0      	adds	r7, #192	; 0xc0
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	50062400 	.word	0x50062400
 8004028:	40021000 	.word	0x40021000
 800402c:	48000800 	.word	0x48000800
 8004030:	48000c00 	.word	0x48000c00

08004034 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	; 0x28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <HAL_SPI_MspInit+0x7c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d128      	bne.n	80040a8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004056:	4b17      	ldr	r3, [pc, #92]	; (80040b4 <HAL_SPI_MspInit+0x80>)
 8004058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405a:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <HAL_SPI_MspInit+0x80>)
 800405c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004060:	6613      	str	r3, [r2, #96]	; 0x60
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <HAL_SPI_MspInit+0x80>)
 8004064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <HAL_SPI_MspInit+0x80>)
 8004070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <HAL_SPI_MspInit+0x80>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800407a:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <HAL_SPI_MspInit+0x80>)
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004086:	23f0      	movs	r3, #240	; 0xf0
 8004088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408a:	2302      	movs	r3, #2
 800408c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004092:	2303      	movs	r3, #3
 8004094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004096:	2305      	movs	r3, #5
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800409a:	f107 0314 	add.w	r3, r7, #20
 800409e:	4619      	mov	r1, r3
 80040a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040a4:	f001 fba6 	bl	80057f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80040a8:	bf00      	nop
 80040aa:	3728      	adds	r7, #40	; 0x28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40013000 	.word	0x40013000
 80040b4:	40021000 	.word	0x40021000

080040b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0a      	ldr	r2, [pc, #40]	; (80040f0 <HAL_TIM_Base_MspInit+0x38>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10b      	bne.n	80040e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <HAL_TIM_Base_MspInit+0x3c>)
 80040cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <HAL_TIM_Base_MspInit+0x3c>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d4:	6613      	str	r3, [r2, #96]	; 0x60
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <HAL_TIM_Base_MspInit+0x3c>)
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40014800 	.word	0x40014800
 80040f4:	40021000 	.word	0x40021000

080040f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b0b0      	sub	sp, #192	; 0xc0
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004100:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004110:	f107 0318 	add.w	r3, r7, #24
 8004114:	2294      	movs	r2, #148	; 0x94
 8004116:	2100      	movs	r1, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f012 f95d 	bl	80163d8 <memset>
  if(huart->Instance==USART1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a43      	ldr	r2, [pc, #268]	; (8004230 <HAL_UART_MspInit+0x138>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d13d      	bne.n	80041a4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004128:	2301      	movs	r3, #1
 800412a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800412c:	2300      	movs	r3, #0
 800412e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004130:	f107 0318 	add.w	r3, r7, #24
 8004134:	4618      	mov	r0, r3
 8004136:	f005 f97d 	bl	8009434 <HAL_RCCEx_PeriphCLKConfig>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004140:	f7ff fe46 	bl	8003dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004144:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_UART_MspInit+0x13c>)
 8004146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004148:	4a3a      	ldr	r2, [pc, #232]	; (8004234 <HAL_UART_MspInit+0x13c>)
 800414a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800414e:	6613      	str	r3, [r2, #96]	; 0x60
 8004150:	4b38      	ldr	r3, [pc, #224]	; (8004234 <HAL_UART_MspInit+0x13c>)
 8004152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800415c:	4b35      	ldr	r3, [pc, #212]	; (8004234 <HAL_UART_MspInit+0x13c>)
 800415e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004160:	4a34      	ldr	r2, [pc, #208]	; (8004234 <HAL_UART_MspInit+0x13c>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004168:	4b32      	ldr	r3, [pc, #200]	; (8004234 <HAL_UART_MspInit+0x13c>)
 800416a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8004174:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417c:	2302      	movs	r3, #2
 800417e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004182:	2300      	movs	r3, #0
 8004184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004188:	2303      	movs	r3, #3
 800418a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800418e:	2307      	movs	r3, #7
 8004190:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004194:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004198:	4619      	mov	r1, r3
 800419a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800419e:	f001 fb29 	bl	80057f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041a2:	e040      	b.n	8004226 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a23      	ldr	r2, [pc, #140]	; (8004238 <HAL_UART_MspInit+0x140>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d13b      	bne.n	8004226 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80041ae:	2302      	movs	r3, #2
 80041b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041b2:	2300      	movs	r3, #0
 80041b4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041b6:	f107 0318 	add.w	r3, r7, #24
 80041ba:	4618      	mov	r0, r3
 80041bc:	f005 f93a 	bl	8009434 <HAL_RCCEx_PeriphCLKConfig>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80041c6:	f7ff fe03 	bl	8003dd0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041ca:	4b1a      	ldr	r3, [pc, #104]	; (8004234 <HAL_UART_MspInit+0x13c>)
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	4a19      	ldr	r2, [pc, #100]	; (8004234 <HAL_UART_MspInit+0x13c>)
 80041d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d4:	6593      	str	r3, [r2, #88]	; 0x58
 80041d6:	4b17      	ldr	r3, [pc, #92]	; (8004234 <HAL_UART_MspInit+0x13c>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <HAL_UART_MspInit+0x13c>)
 80041e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e6:	4a13      	ldr	r2, [pc, #76]	; (8004234 <HAL_UART_MspInit+0x13c>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ee:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_UART_MspInit+0x13c>)
 80041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 80041fa:	230c      	movs	r3, #12
 80041fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	2302      	movs	r3, #2
 8004202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420c:	2303      	movs	r3, #3
 800420e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004212:	2307      	movs	r3, #7
 8004214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004218:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800421c:	4619      	mov	r1, r3
 800421e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004222:	f001 fae7 	bl	80057f4 <HAL_GPIO_Init>
}
 8004226:	bf00      	nop
 8004228:	37c0      	adds	r7, #192	; 0xc0
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40013800 	.word	0x40013800
 8004234:	40021000 	.word	0x40021000
 8004238:	40004400 	.word	0x40004400

0800423c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004240:	f005 f81c 	bl	800927c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004244:	e7fe      	b.n	8004244 <NMI_Handler+0x8>

08004246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004246:	b480      	push	{r7}
 8004248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800424a:	e7fe      	b.n	800424a <HardFault_Handler+0x4>

0800424c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004250:	e7fe      	b.n	8004250 <MemManage_Handler+0x4>

08004252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004256:	e7fe      	b.n	8004256 <BusFault_Handler+0x4>

08004258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800425c:	e7fe      	b.n	800425c <UsageFault_Handler+0x4>

0800425e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800425e:	b480      	push	{r7}
 8004260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800428c:	f001 f8a2 	bl	80053d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004290:	bf00      	nop
 8004292:	bd80      	pop	{r7, pc}

08004294 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
  if (tick) {tick--;}
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 80042a2:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 80042ae:	701a      	strb	r2, [r3, #0]
  if (tickGPS) {tickGPS--;}
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d006      	beq.n	80042c8 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 80042c6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80042c8:	4804      	ldr	r0, [pc, #16]	; (80042dc <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 80042ca:	f008 fc0a 	bl	800cae2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000ebc 	.word	0x20000ebc
 80042d8:	20000ebd 	.word	0x20000ebd
 80042dc:	20000704 	.word	0x20000704

080042e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char c = huart2.Instance->RDR;
 80042e6:	4b22      	ldr	r3, [pc, #136]	; (8004370 <USART2_IRQHandler+0x90>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	71fb      	strb	r3, [r7, #7]
    if (rxBufferPos < RXBUFSIZE - 1)
 80042f0:	4b20      	ldr	r3, [pc, #128]	; (8004374 <USART2_IRQHandler+0x94>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
    	{ rxBuffer[rxBufferPos++] = (uint8_t) c; }
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <USART2_IRQHandler+0x98>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <USART2_IRQHandler+0x94>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	1c59      	adds	r1, r3, #1
 8004300:	b2c8      	uxtb	r0, r1
 8004302:	491c      	ldr	r1, [pc, #112]	; (8004374 <USART2_IRQHandler+0x94>)
 8004304:	7008      	strb	r0, [r1, #0]
 8004306:	4413      	add	r3, r2
 8004308:	79fa      	ldrb	r2, [r7, #7]
 800430a:	701a      	strb	r2, [r3, #0]

    if ((c == '\n') && send_ready)// && tickGPS == 0) //(c == '\r') ||
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	2b0a      	cmp	r3, #10
 8004310:	d126      	bne.n	8004360 <USART2_IRQHandler+0x80>
 8004312:	4b1a      	ldr	r3, [pc, #104]	; (800437c <USART2_IRQHandler+0x9c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d022      	beq.n	8004360 <USART2_IRQHandler+0x80>
    {
    	//tickGPS = 10;
		rxBuffer[rxBufferPos] = 0;
 800431a:	4b17      	ldr	r3, [pc, #92]	; (8004378 <USART2_IRQHandler+0x98>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a15      	ldr	r2, [pc, #84]	; (8004374 <USART2_IRQHandler+0x94>)
 8004320:	7812      	ldrb	r2, [r2, #0]
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	4413      	add	r3, r2
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
		data_ready |= 1;
 800432a:	4b15      	ldr	r3, [pc, #84]	; (8004380 <USART2_IRQHandler+0xa0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	4a13      	ldr	r2, [pc, #76]	; (8004380 <USART2_IRQHandler+0xa0>)
 8004334:	6013      	str	r3, [r2, #0]
		send_ready ^= 1;
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <USART2_IRQHandler+0x9c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f083 0301 	eor.w	r3, r3, #1
 800433e:	4a0f      	ldr	r2, [pc, #60]	; (800437c <USART2_IRQHandler+0x9c>)
 8004340:	6013      	str	r3, [r2, #0]
		rxBufferPos = 0;
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <USART2_IRQHandler+0x94>)
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
		if (rxBuffer == rxBuffer1) {rxBuffer = rxBuffer2;}
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <USART2_IRQHandler+0x98>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <USART2_IRQHandler+0xa4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d103      	bne.n	800435a <USART2_IRQHandler+0x7a>
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <USART2_IRQHandler+0x98>)
 8004354:	4a0c      	ldr	r2, [pc, #48]	; (8004388 <USART2_IRQHandler+0xa8>)
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e002      	b.n	8004360 <USART2_IRQHandler+0x80>
		else {rxBuffer = rxBuffer1;}
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <USART2_IRQHandler+0x98>)
 800435c:	4a09      	ldr	r2, [pc, #36]	; (8004384 <USART2_IRQHandler+0xa4>)
 800435e:	601a      	str	r2, [r3, #0]
    }

    //HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	  //rchar = huart2.Instance->RDR;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004360:	4803      	ldr	r0, [pc, #12]	; (8004370 <USART2_IRQHandler+0x90>)
 8004362:	f009 f9e5 	bl	800d730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	200007e0 	.word	0x200007e0
 8004374:	20000eb4 	.word	0x20000eb4
 8004378:	20000eb0 	.word	0x20000eb0
 800437c:	20000000 	.word	0x20000000
 8004380:	20000eb8 	.word	0x20000eb8
 8004384:	20000870 	.word	0x20000870
 8004388:	20000b90 	.word	0x20000b90

0800438c <OTG_FS_IRQHandler>:
/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004390:	4802      	ldr	r0, [pc, #8]	; (800439c <OTG_FS_IRQHandler+0x10>)
 8004392:	f002 ffff 	bl	8007394 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20002834 	.word	0x20002834

080043a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <SystemInit+0x20>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	4a05      	ldr	r2, [pc, #20]	; (80043c0 <SystemInit+0x20>)
 80043ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80043c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80043c8:	f7ff ffea 	bl	80043a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043cc:	480c      	ldr	r0, [pc, #48]	; (8004400 <LoopForever+0x6>)
  ldr r1, =_edata
 80043ce:	490d      	ldr	r1, [pc, #52]	; (8004404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043d0:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <LoopForever+0xe>)
  movs r3, #0
 80043d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043d4:	e002      	b.n	80043dc <LoopCopyDataInit>

080043d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043da:	3304      	adds	r3, #4

080043dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e0:	d3f9      	bcc.n	80043d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <LoopForever+0x12>)
  ldr r4, =_ebss
 80043e4:	4c0a      	ldr	r4, [pc, #40]	; (8004410 <LoopForever+0x16>)
  movs r3, #0
 80043e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043e8:	e001      	b.n	80043ee <LoopFillZerobss>

080043ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043ec:	3204      	adds	r2, #4

080043ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f0:	d3fb      	bcc.n	80043ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043f2:	f011 ffb7 	bl	8016364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043f6:	f7fe fcff 	bl	8002df8 <main>

080043fa <LoopForever>:

LoopForever:
    b LoopForever
 80043fa:	e7fe      	b.n	80043fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80043fc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004404:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8004408:	08019b28 	.word	0x08019b28
  ldr r2, =_sbss
 800440c:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8004410:	20002f74 	.word	0x20002f74

08004414 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004414:	e7fe      	b.n	8004414 <ADC1_IRQHandler>
	...

08004418 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d103      	bne.n	8004434 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 800442c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	e051      	b.n	80044d8 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	7b1a      	ldrb	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <LSM6DSO_RegisterBusIO+0xcc>)
 8004470:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a1c      	ldr	r2, [pc, #112]	; (80044e8 <LSM6DSO_RegisterBusIO+0xd0>)
 8004476:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d103      	bne.n	8004496 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800448e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e020      	b.n	80044d8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4798      	blx	r3
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 80044a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e016      	b.n	80044d8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d112      	bne.n	80044d8 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10d      	bne.n	80044d8 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80044bc:	230c      	movs	r3, #12
 80044be:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80044c0:	7afb      	ldrb	r3, [r7, #11]
 80044c2:	461a      	mov	r2, r3
 80044c4:	2112      	movs	r1, #18
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa12 	bl	80048f0 <LSM6DSO_Write_Reg>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 80044d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044d6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80044d8:	68fb      	ldr	r3, [r7, #12]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	08004927 	.word	0x08004927
 80044e8:	0800495d 	.word	0x0800495d

080044ec <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3320      	adds	r3, #32
 80044f8:	2180      	movs	r1, #128	; 0x80
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fe40 	bl	8005180 <lsm6dso_i3c_disable_set>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8004506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800450a:	e060      	b.n	80045ce <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3320      	adds	r3, #32
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fe0e 	bl	8005134 <lsm6dso_auto_increment_set>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 800451e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004522:	e054      	b.n	80045ce <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3320      	adds	r3, #32
 8004528:	2101      	movs	r1, #1
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fd20 	bl	8004f70 <lsm6dso_block_data_update_set>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8004536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800453a:	e048      	b.n	80045ce <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3320      	adds	r3, #32
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fe62 	bl	800520c <lsm6dso_fifo_mode_set>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 800454e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004552:	e03c      	b.n	80045ce <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2204      	movs	r2, #4
 8004558:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3320      	adds	r3, #32
 8004560:	2100      	movs	r1, #0
 8004562:	4618      	mov	r0, r3
 8004564:	f000 faa4 	bl	8004ab0 <lsm6dso_xl_data_rate_set>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 800456e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004572:	e02c      	b.n	80045ce <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3320      	adds	r3, #32
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fa39 	bl	80049f2 <lsm6dso_xl_full_scale_set>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8004586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800458a:	e020      	b.n	80045ce <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2204      	movs	r2, #4
 8004590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3320      	adds	r3, #32
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fbec 	bl	8004d78 <lsm6dso_gy_data_rate_set>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045aa:	e010      	b.n	80045ce <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3320      	adds	r3, #32
 80045b0:	2106      	movs	r1, #6
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fb78 	bl	8004ca8 <lsm6dso_gy_full_scale_set>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 80045be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045c2:	e004      	b.n	80045ce <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e014      	b.n	8004616 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f103 0220 	add.w	r2, r3, #32
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f000 fa58 	bl	8004ab0 <lsm6dso_xl_data_rate_set>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800460a:	e004      	b.n	8004616 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3320      	adds	r3, #32
 8004632:	f107 020b 	add.w	r2, r7, #11
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fa01 	bl	8004a40 <lsm6dso_xl_full_scale_get>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004648:	e023      	b.n	8004692 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800464a:	7afb      	ldrb	r3, [r7, #11]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d81b      	bhi.n	8004688 <LSM6DSO_ACC_GetSensitivity+0x68>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	08004669 	.word	0x08004669
 800465c:	08004681 	.word	0x08004681
 8004660:	08004671 	.word	0x08004671
 8004664:	08004679 	.word	0x08004679
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4a0c      	ldr	r2, [pc, #48]	; (800469c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 800466c:	601a      	str	r2, [r3, #0]
      break;
 800466e:	e00f      	b.n	8004690 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8004674:	601a      	str	r2, [r3, #0]
      break;
 8004676:	e00b      	b.n	8004690 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4a0a      	ldr	r2, [pc, #40]	; (80046a4 <LSM6DSO_ACC_GetSensitivity+0x84>)
 800467c:	601a      	str	r2, [r3, #0]
      break;
 800467e:	e007      	b.n	8004690 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4a09      	ldr	r2, [pc, #36]	; (80046a8 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8004684:	601a      	str	r2, [r3, #0]
      break;
 8004686:	e003      	b.n	8004690 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800468c:	60fb      	str	r3, [r7, #12]
      break;
 800468e:	bf00      	nop
  }

  return ret;
 8004690:	68fb      	ldr	r3, [r7, #12]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	3d79db23 	.word	0x3d79db23
 80046a0:	3df9db23 	.word	0x3df9db23
 80046a4:	3e79db23 	.word	0x3e79db23
 80046a8:	3ef9db23 	.word	0x3ef9db23

080046ac <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3320      	adds	r3, #32
 80046c0:	f107 0210 	add.w	r2, r7, #16
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fcc3 	bl	8005052 <lsm6dso_acceleration_raw_get>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046d6:	e03c      	b.n	8004752 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80046d8:	f107 030c 	add.w	r3, r7, #12
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff ff9e 	bl	8004620 <LSM6DSO_ACC_GetSensitivity>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ee:	e030      	b.n	8004752 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80046f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80046f4:	ee07 3a90 	vmov	s15, r3
 80046f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004708:	ee17 2a90 	vmov	r2, s15
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004710:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004714:	ee07 3a90 	vmov	s15, r3
 8004718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800471c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004728:	ee17 2a90 	vmov	r2, s15
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004730:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004734:	ee07 3a90 	vmov	s15, r3
 8004738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800473c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004748:	ee17 2a90 	vmov	r2, s15
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e014      	b.n	800479a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f103 0220 	add.w	r2, r3, #32
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f000 fafa 	bl	8004d78 <lsm6dso_gy_data_rate_set>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800478e:	e004      	b.n	800479a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3320      	adds	r3, #32
 80047b6:	f107 020b 	add.w	r2, r7, #11
 80047ba:	4611      	mov	r1, r2
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fa99 	bl	8004cf4 <lsm6dso_gy_full_scale_get>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80047c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047cc:	e02d      	b.n	800482a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80047ce:	7afb      	ldrb	r3, [r7, #11]
 80047d0:	2b06      	cmp	r3, #6
 80047d2:	d825      	bhi.n	8004820 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <LSM6DSO_GYRO_GetSensitivity+0x38>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	08004801 	.word	0x08004801
 80047e0:	080047f9 	.word	0x080047f9
 80047e4:	08004809 	.word	0x08004809
 80047e8:	08004821 	.word	0x08004821
 80047ec:	08004811 	.word	0x08004811
 80047f0:	08004821 	.word	0x08004821
 80047f4:	08004819 	.word	0x08004819
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	4a0e      	ldr	r2, [pc, #56]	; (8004834 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80047fc:	601a      	str	r2, [r3, #0]
      break;
 80047fe:	e013      	b.n	8004828 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	4a0d      	ldr	r2, [pc, #52]	; (8004838 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8004804:	601a      	str	r2, [r3, #0]
      break;
 8004806:	e00f      	b.n	8004828 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	4a0c      	ldr	r2, [pc, #48]	; (800483c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 800480c:	601a      	str	r2, [r3, #0]
      break;
 800480e:	e00b      	b.n	8004828 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8004814:	601a      	str	r2, [r3, #0]
      break;
 8004816:	e007      	b.n	8004828 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 800481c:	601a      	str	r2, [r3, #0]
      break;
 800481e:	e003      	b.n	8004828 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004824:	60fb      	str	r3, [r7, #12]
      break;
 8004826:	bf00      	nop
  }

  return ret;
 8004828:	68fb      	ldr	r3, [r7, #12]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	408c0000 	.word	0x408c0000
 8004838:	410c0000 	.word	0x410c0000
 800483c:	418c0000 	.word	0x418c0000
 8004840:	420c0000 	.word	0x420c0000
 8004844:	428c0000 	.word	0x428c0000

08004848 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3320      	adds	r3, #32
 8004856:	f107 0210 	add.w	r2, r7, #16
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fbad 	bl	8004fbc <lsm6dso_angular_rate_raw_get>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8004868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800486c:	e03c      	b.n	80048e8 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800486e:	f107 030c 	add.w	r3, r7, #12
 8004872:	4619      	mov	r1, r3
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff95 	bl	80047a4 <LSM6DSO_GYRO_GetSensitivity>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8004880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004884:	e030      	b.n	80048e8 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004886:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004892:	edd7 7a03 	vldr	s15, [r7, #12]
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800489e:	ee17 2a90 	vmov	r2, s15
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80048a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048be:	ee17 2a90 	vmov	r2, s15
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80048c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048de:	ee17 2a90 	vmov	r2, s15
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
 80048fc:	4613      	mov	r3, r2
 80048fe:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f103 0020 	add.w	r0, r3, #32
 8004906:	1cba      	adds	r2, r7, #2
 8004908:	78f9      	ldrb	r1, [r7, #3]
 800490a:	2301      	movs	r3, #1
 800490c:	f000 f859 	bl	80049c2 <lsm6dso_write_reg>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8004916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800491a:	e000      	b.n	800491e <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004926:	b590      	push	{r4, r7, lr}
 8004928:	b087      	sub	sp, #28
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	461a      	mov	r2, r3
 8004932:	460b      	mov	r3, r1
 8004934:	72fb      	strb	r3, [r7, #11]
 8004936:	4613      	mov	r3, r2
 8004938:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	695c      	ldr	r4, [r3, #20]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	7b1b      	ldrb	r3, [r3, #12]
 8004946:	b298      	uxth	r0, r3
 8004948:	7afb      	ldrb	r3, [r7, #11]
 800494a:	b299      	uxth	r1, r3
 800494c:	893b      	ldrh	r3, [r7, #8]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	47a0      	blx	r4
 8004952:	4603      	mov	r3, r0
}
 8004954:	4618      	mov	r0, r3
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	bd90      	pop	{r4, r7, pc}

0800495c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800495c:	b590      	push	{r4, r7, lr}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	461a      	mov	r2, r3
 8004968:	460b      	mov	r3, r1
 800496a:	72fb      	strb	r3, [r7, #11]
 800496c:	4613      	mov	r3, r2
 800496e:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	691c      	ldr	r4, [r3, #16]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	7b1b      	ldrb	r3, [r3, #12]
 800497c:	b298      	uxth	r0, r3
 800497e:	7afb      	ldrb	r3, [r7, #11]
 8004980:	b299      	uxth	r1, r3
 8004982:	893b      	ldrh	r3, [r7, #8]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	47a0      	blx	r4
 8004988:	4603      	mov	r3, r0
}
 800498a:	4618      	mov	r0, r3
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	bd90      	pop	{r4, r7, pc}

08004992 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004992:	b590      	push	{r4, r7, lr}
 8004994:	b087      	sub	sp, #28
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	461a      	mov	r2, r3
 800499e:	460b      	mov	r3, r1
 80049a0:	72fb      	strb	r3, [r7, #11]
 80049a2:	4613      	mov	r3, r2
 80049a4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685c      	ldr	r4, [r3, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	68d8      	ldr	r0, [r3, #12]
 80049ae:	893b      	ldrh	r3, [r7, #8]
 80049b0:	7af9      	ldrb	r1, [r7, #11]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	47a0      	blx	r4
 80049b6:	6178      	str	r0, [r7, #20]

  return ret;
 80049b8:	697b      	ldr	r3, [r7, #20]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}

080049c2 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80049c2:	b590      	push	{r4, r7, lr}
 80049c4:	b087      	sub	sp, #28
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	461a      	mov	r2, r3
 80049ce:	460b      	mov	r3, r1
 80049d0:	72fb      	strb	r3, [r7, #11]
 80049d2:	4613      	mov	r3, r2
 80049d4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681c      	ldr	r4, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	68d8      	ldr	r0, [r3, #12]
 80049de:	893b      	ldrh	r3, [r7, #8]
 80049e0:	7af9      	ldrb	r1, [r7, #11]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	47a0      	blx	r4
 80049e6:	6178      	str	r0, [r7, #20]

  return ret;
 80049e8:	697b      	ldr	r3, [r7, #20]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd90      	pop	{r4, r7, pc}

080049f2 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	460b      	mov	r3, r1
 80049fc:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80049fe:	f107 0208 	add.w	r2, r7, #8
 8004a02:	2301      	movs	r3, #1
 8004a04:	2110      	movs	r1, #16
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ffc3 	bl	8004992 <lsm6dso_read_reg>
 8004a0c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10f      	bne.n	8004a34 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	7a3b      	ldrb	r3, [r7, #8]
 8004a1e:	f362 0383 	bfi	r3, r2, #2, #2
 8004a22:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004a24:	f107 0208 	add.w	r2, r7, #8
 8004a28:	2301      	movs	r3, #1
 8004a2a:	2110      	movs	r1, #16
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ffc8 	bl	80049c2 <lsm6dso_write_reg>
 8004a32:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a34:	68fb      	ldr	r3, [r7, #12]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004a4a:	f107 0208 	add.w	r2, r7, #8
 8004a4e:	2301      	movs	r3, #1
 8004a50:	2110      	movs	r1, #16
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff ff9d 	bl	8004992 <lsm6dso_read_reg>
 8004a58:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8004a5a:	7a3b      	ldrb	r3, [r7, #8]
 8004a5c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d81a      	bhi.n	8004a9c <lsm6dso_xl_full_scale_get+0x5c>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <lsm6dso_xl_full_scale_get+0x2c>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a85 	.word	0x08004a85
 8004a74:	08004a8d 	.word	0x08004a8d
 8004a78:	08004a95 	.word	0x08004a95
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
      break;
 8004a82:	e00f      	b.n	8004aa4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2201      	movs	r2, #1
 8004a88:	701a      	strb	r2, [r3, #0]
      break;
 8004a8a:	e00b      	b.n	8004aa4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	701a      	strb	r2, [r3, #0]
      break;
 8004a92:	e007      	b.n	8004aa4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2203      	movs	r2, #3
 8004a98:	701a      	strb	r2, [r3, #0]
      break;
 8004a9a:	e003      	b.n	8004aa4 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
      break;
 8004aa2:	bf00      	nop
  }

  return ret;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop

08004ab0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004ac0:	f107 030c 	add.w	r3, r7, #12
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fbc6 	bl	8005258 <lsm6dso_fsm_enable_get>
 8004acc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f040 80c4 	bne.w	8004c5e <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004ad6:	7b3b      	ldrb	r3, [r7, #12]
 8004ad8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004adc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004ade:	7b3b      	ldrb	r3, [r7, #12]
 8004ae0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004ae4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004aea:	7b3b      	ldrb	r3, [r7, #12]
 8004aec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004af0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004af2:	4313      	orrs	r3, r2
 8004af4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004af6:	7b3b      	ldrb	r3, [r7, #12]
 8004af8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004afc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004afe:	4313      	orrs	r3, r2
 8004b00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004b02:	7b3b      	ldrb	r3, [r7, #12]
 8004b04:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004b08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004b0e:	7b3b      	ldrb	r3, [r7, #12]
 8004b10:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004b14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004b16:	4313      	orrs	r3, r2
 8004b18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004b1a:	7b3b      	ldrb	r3, [r7, #12]
 8004b1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004b20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004b22:	4313      	orrs	r3, r2
 8004b24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004b26:	7b3b      	ldrb	r3, [r7, #12]
 8004b28:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004b2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004b32:	7b7b      	ldrb	r3, [r7, #13]
 8004b34:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004b38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004b3e:	7b7b      	ldrb	r3, [r7, #13]
 8004b40:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004b44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004b46:	4313      	orrs	r3, r2
 8004b48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004b4a:	7b7b      	ldrb	r3, [r7, #13]
 8004b4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004b50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004b52:	4313      	orrs	r3, r2
 8004b54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004b56:	7b7b      	ldrb	r3, [r7, #13]
 8004b58:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004b5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004b62:	7b7b      	ldrb	r3, [r7, #13]
 8004b64:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004b68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004b6e:	7b7b      	ldrb	r3, [r7, #13]
 8004b70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004b74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004b76:	4313      	orrs	r3, r2
 8004b78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004b7a:	7b7b      	ldrb	r3, [r7, #13]
 8004b7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004b80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004b82:	4313      	orrs	r3, r2
 8004b84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004b86:	7b7b      	ldrb	r3, [r7, #13]
 8004b88:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004b8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d163      	bne.n	8004c5e <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004b96:	f107 030b 	add.w	r3, r7, #11
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fb7d 	bl	800529c <lsm6dso_fsm_data_rate_get>
 8004ba2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d159      	bne.n	8004c5e <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004baa:	7afb      	ldrb	r3, [r7, #11]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d853      	bhi.n	8004c58 <lsm6dso_xl_data_rate_set+0x1a8>
 8004bb0:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <lsm6dso_xl_data_rate_set+0x108>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004bc9 	.word	0x08004bc9
 8004bbc:	08004bdb 	.word	0x08004bdb
 8004bc0:	08004bf9 	.word	0x08004bf9
 8004bc4:	08004c23 	.word	0x08004c23
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004bd2:	e045      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	75fb      	strb	r3, [r7, #23]
            break;
 8004bd8:	e042      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d102      	bne.n	8004be6 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004be0:	2302      	movs	r3, #2
 8004be2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004be4:	e03c      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d102      	bne.n	8004bf2 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004bec:	2302      	movs	r3, #2
 8004bee:	75fb      	strb	r3, [r7, #23]
            break;
 8004bf0:	e036      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	75fb      	strb	r3, [r7, #23]
            break;
 8004bf6:	e033      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004c02:	e02d      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d102      	bne.n	8004c10 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	75fb      	strb	r3, [r7, #23]
            break;
 8004c0e:	e027      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d102      	bne.n	8004c1c <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004c16:	2303      	movs	r3, #3
 8004c18:	75fb      	strb	r3, [r7, #23]
            break;
 8004c1a:	e021      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	75fb      	strb	r3, [r7, #23]
            break;
 8004c20:	e01e      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d102      	bne.n	8004c2e <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004c28:	2304      	movs	r3, #4
 8004c2a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004c2c:	e018      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d102      	bne.n	8004c3a <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004c34:	2304      	movs	r3, #4
 8004c36:	75fb      	strb	r3, [r7, #23]
            break;
 8004c38:	e012      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d102      	bne.n	8004c46 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004c40:	2304      	movs	r3, #4
 8004c42:	75fb      	strb	r3, [r7, #23]
            break;
 8004c44:	e00c      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d102      	bne.n	8004c52 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	75fb      	strb	r3, [r7, #23]
            break;
 8004c50:	e006      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	75fb      	strb	r3, [r7, #23]
            break;
 8004c56:	e003      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004c5c:	e000      	b.n	8004c60 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8004c5e:	bf00      	nop
    }
  }

  if (ret == 0)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d107      	bne.n	8004c76 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004c66:	f107 0208 	add.w	r2, r7, #8
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	2110      	movs	r1, #16
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fe8f 	bl	8004992 <lsm6dso_read_reg>
 8004c74:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10f      	bne.n	8004c9c <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	7a3b      	ldrb	r3, [r7, #8]
 8004c86:	f362 1307 	bfi	r3, r2, #4, #4
 8004c8a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004c8c:	f107 0208 	add.w	r2, r7, #8
 8004c90:	2301      	movs	r3, #1
 8004c92:	2110      	movs	r1, #16
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fe94 	bl	80049c2 <lsm6dso_write_reg>
 8004c9a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8004c9c:	693b      	ldr	r3, [r7, #16]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop

08004ca8 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004cb4:	f107 0208 	add.w	r2, r7, #8
 8004cb8:	2301      	movs	r3, #1
 8004cba:	2111      	movs	r1, #17
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fe68 	bl	8004992 <lsm6dso_read_reg>
 8004cc2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10f      	bne.n	8004cea <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	7a3b      	ldrb	r3, [r7, #8]
 8004cd4:	f362 0343 	bfi	r3, r2, #1, #3
 8004cd8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004cda:	f107 0208 	add.w	r2, r7, #8
 8004cde:	2301      	movs	r3, #1
 8004ce0:	2111      	movs	r1, #17
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fe6d 	bl	80049c2 <lsm6dso_write_reg>
 8004ce8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004cea:	68fb      	ldr	r3, [r7, #12]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004cfe:	f107 0208 	add.w	r2, r7, #8
 8004d02:	2301      	movs	r3, #1
 8004d04:	2111      	movs	r1, #17
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fe43 	bl	8004992 <lsm6dso_read_reg>
 8004d0c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8004d0e:	7a3b      	ldrb	r3, [r7, #8]
 8004d10:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d824      	bhi.n	8004d64 <lsm6dso_gy_full_scale_get+0x70>
 8004d1a:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <lsm6dso_gy_full_scale_get+0x2c>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d3d 	.word	0x08004d3d
 8004d24:	08004d45 	.word	0x08004d45
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d65 	.word	0x08004d65
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d65 	.word	0x08004d65
 8004d38:	08004d5d 	.word	0x08004d5d
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]
      break;
 8004d42:	e013      	b.n	8004d6c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2201      	movs	r2, #1
 8004d48:	701a      	strb	r2, [r3, #0]
      break;
 8004d4a:	e00f      	b.n	8004d6c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	701a      	strb	r2, [r3, #0]
      break;
 8004d52:	e00b      	b.n	8004d6c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2204      	movs	r2, #4
 8004d58:	701a      	strb	r2, [r3, #0]
      break;
 8004d5a:	e007      	b.n	8004d6c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2206      	movs	r2, #6
 8004d60:	701a      	strb	r2, [r3, #0]
      break;
 8004d62:	e003      	b.n	8004d6c <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
      break;
 8004d6a:	bf00      	nop
  }

  return ret;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop

08004d78 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004d88:	f107 030c 	add.w	r3, r7, #12
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa62 	bl	8005258 <lsm6dso_fsm_enable_get>
 8004d94:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f040 80c4 	bne.w	8004f26 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d9e:	7b3b      	ldrb	r3, [r7, #12]
 8004da0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004da4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004da6:	7b3b      	ldrb	r3, [r7, #12]
 8004da8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004dac:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004dae:	4313      	orrs	r3, r2
 8004db0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004db2:	7b3b      	ldrb	r3, [r7, #12]
 8004db4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004db8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004dbe:	7b3b      	ldrb	r3, [r7, #12]
 8004dc0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004dc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004dca:	7b3b      	ldrb	r3, [r7, #12]
 8004dcc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004dd0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004dd6:	7b3b      	ldrb	r3, [r7, #12]
 8004dd8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ddc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004dde:	4313      	orrs	r3, r2
 8004de0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004de2:	7b3b      	ldrb	r3, [r7, #12]
 8004de4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004de8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004dea:	4313      	orrs	r3, r2
 8004dec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004dee:	7b3b      	ldrb	r3, [r7, #12]
 8004df0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004df4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004df6:	4313      	orrs	r3, r2
 8004df8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004dfa:	7b7b      	ldrb	r3, [r7, #13]
 8004dfc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004e02:	4313      	orrs	r3, r2
 8004e04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004e06:	7b7b      	ldrb	r3, [r7, #13]
 8004e08:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004e12:	7b7b      	ldrb	r3, [r7, #13]
 8004e14:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004e1e:	7b7b      	ldrb	r3, [r7, #13]
 8004e20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004e26:	4313      	orrs	r3, r2
 8004e28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004e2a:	7b7b      	ldrb	r3, [r7, #13]
 8004e2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004e32:	4313      	orrs	r3, r2
 8004e34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004e36:	7b7b      	ldrb	r3, [r7, #13]
 8004e38:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004e3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004e42:	7b7b      	ldrb	r3, [r7, #13]
 8004e44:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004e48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004e4e:	7b7b      	ldrb	r3, [r7, #13]
 8004e50:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004e56:	4313      	orrs	r3, r2
 8004e58:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d163      	bne.n	8004f26 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004e5e:	f107 030b 	add.w	r3, r7, #11
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fa19 	bl	800529c <lsm6dso_fsm_data_rate_get>
 8004e6a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d159      	bne.n	8004f26 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004e72:	7afb      	ldrb	r3, [r7, #11]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d853      	bhi.n	8004f20 <lsm6dso_gy_data_rate_set+0x1a8>
 8004e78:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <lsm6dso_gy_data_rate_set+0x108>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004e91 	.word	0x08004e91
 8004e84:	08004ea3 	.word	0x08004ea3
 8004e88:	08004ec1 	.word	0x08004ec1
 8004e8c:	08004eeb 	.word	0x08004eeb
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004e9a:	e045      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	75fb      	strb	r3, [r7, #23]
            break;
 8004ea0:	e042      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004eac:	e03c      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d102      	bne.n	8004eba <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	75fb      	strb	r3, [r7, #23]
            break;
 8004eb8:	e036      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	75fb      	strb	r3, [r7, #23]
            break;
 8004ebe:	e033      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004eca:	e02d      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d102      	bne.n	8004ed8 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	75fb      	strb	r3, [r7, #23]
            break;
 8004ed6:	e027      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d102      	bne.n	8004ee4 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	75fb      	strb	r3, [r7, #23]
            break;
 8004ee2:	e021      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	75fb      	strb	r3, [r7, #23]
            break;
 8004ee8:	e01e      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004ef4:	e018      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d102      	bne.n	8004f02 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004efc:	2304      	movs	r3, #4
 8004efe:	75fb      	strb	r3, [r7, #23]
            break;
 8004f00:	e012      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d102      	bne.n	8004f0e <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004f08:	2304      	movs	r3, #4
 8004f0a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f0c:	e00c      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d102      	bne.n	8004f1a <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004f14:	2304      	movs	r3, #4
 8004f16:	75fb      	strb	r3, [r7, #23]
            break;
 8004f18:	e006      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	75fb      	strb	r3, [r7, #23]
            break;
 8004f1e:	e003      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	75fb      	strb	r3, [r7, #23]
            break;
 8004f24:	e000      	b.n	8004f28 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8004f26:	bf00      	nop
    }
  }

  if (ret == 0)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d107      	bne.n	8004f3e <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f2e:	f107 0208 	add.w	r2, r7, #8
 8004f32:	2301      	movs	r3, #1
 8004f34:	2111      	movs	r1, #17
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff fd2b 	bl	8004992 <lsm6dso_read_reg>
 8004f3c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10f      	bne.n	8004f64 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	7a3b      	ldrb	r3, [r7, #8]
 8004f4e:	f362 1307 	bfi	r3, r2, #4, #4
 8004f52:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004f54:	f107 0208 	add.w	r2, r7, #8
 8004f58:	2301      	movs	r3, #1
 8004f5a:	2111      	movs	r1, #17
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff fd30 	bl	80049c2 <lsm6dso_write_reg>
 8004f62:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8004f64:	693b      	ldr	r3, [r7, #16]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop

08004f70 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004f7c:	f107 0208 	add.w	r2, r7, #8
 8004f80:	2301      	movs	r3, #1
 8004f82:	2112      	movs	r1, #18
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fd04 	bl	8004992 <lsm6dso_read_reg>
 8004f8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10f      	bne.n	8004fb2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	7a3b      	ldrb	r3, [r7, #8]
 8004f9c:	f362 1386 	bfi	r3, r2, #6, #1
 8004fa0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004fa2:	f107 0208 	add.w	r2, r7, #8
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	2112      	movs	r1, #18
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff fd09 	bl	80049c2 <lsm6dso_write_reg>
 8004fb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8004fc6:	f107 020c 	add.w	r2, r7, #12
 8004fca:	2306      	movs	r3, #6
 8004fcc:	2122      	movs	r1, #34	; 0x22
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff fcdf 	bl	8004992 <lsm6dso_read_reg>
 8004fd4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004fd6:	7b7b      	ldrb	r3, [r7, #13]
 8004fd8:	b21a      	sxth	r2, r3
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	7b3b      	ldrb	r3, [r7, #12]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	b21a      	sxth	r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004ff8:	7bfa      	ldrb	r2, [r7, #15]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	b212      	sxth	r2, r2
 8005000:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	3302      	adds	r3, #2
 8005006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800500a:	b29b      	uxth	r3, r3
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	b29a      	uxth	r2, r3
 8005010:	7bbb      	ldrb	r3, [r7, #14]
 8005012:	b29b      	uxth	r3, r3
 8005014:	4413      	add	r3, r2
 8005016:	b29a      	uxth	r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	3302      	adds	r3, #2
 800501c:	b212      	sxth	r2, r2
 800501e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005020:	7c7a      	ldrb	r2, [r7, #17]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	3304      	adds	r3, #4
 8005026:	b212      	sxth	r2, r2
 8005028:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	3304      	adds	r3, #4
 800502e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005032:	b29b      	uxth	r3, r3
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	b29a      	uxth	r2, r3
 8005038:	7c3b      	ldrb	r3, [r7, #16]
 800503a:	b29b      	uxth	r3, r3
 800503c:	4413      	add	r3, r2
 800503e:	b29a      	uxth	r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	3304      	adds	r3, #4
 8005044:	b212      	sxth	r2, r2
 8005046:	801a      	strh	r2, [r3, #0]

  return ret;
 8005048:	697b      	ldr	r3, [r7, #20]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b086      	sub	sp, #24
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800505c:	f107 020c 	add.w	r2, r7, #12
 8005060:	2306      	movs	r3, #6
 8005062:	2128      	movs	r1, #40	; 0x28
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff fc94 	bl	8004992 <lsm6dso_read_reg>
 800506a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800506c:	7b7b      	ldrb	r3, [r7, #13]
 800506e:	b21a      	sxth	r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800507a:	b29b      	uxth	r3, r3
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	b29a      	uxth	r2, r3
 8005080:	7b3b      	ldrb	r3, [r7, #12]
 8005082:	b29b      	uxth	r3, r3
 8005084:	4413      	add	r3, r2
 8005086:	b29b      	uxth	r3, r3
 8005088:	b21a      	sxth	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800508e:	7bfa      	ldrb	r2, [r7, #15]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	3302      	adds	r3, #2
 8005094:	b212      	sxth	r2, r2
 8005096:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	3302      	adds	r3, #2
 800509c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	7bbb      	ldrb	r3, [r7, #14]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	3302      	adds	r3, #2
 80050b2:	b212      	sxth	r2, r2
 80050b4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80050b6:	7c7a      	ldrb	r2, [r7, #17]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	3304      	adds	r3, #4
 80050bc:	b212      	sxth	r2, r2
 80050be:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	3304      	adds	r3, #4
 80050c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	7c3b      	ldrb	r3, [r7, #16]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	3304      	adds	r3, #4
 80050da:	b212      	sxth	r2, r2
 80050dc:	801a      	strh	r2, [r3, #0]

  return ret;
 80050de:	697b      	ldr	r3, [r7, #20]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80050f4:	f107 0208 	add.w	r2, r7, #8
 80050f8:	2301      	movs	r3, #1
 80050fa:	2101      	movs	r1, #1
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fc48 	bl	8004992 <lsm6dso_read_reg>
 8005102:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10f      	bne.n	800512a <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	b2da      	uxtb	r2, r3
 8005112:	7a3b      	ldrb	r3, [r7, #8]
 8005114:	f362 1387 	bfi	r3, r2, #6, #2
 8005118:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800511a:	f107 0208 	add.w	r2, r7, #8
 800511e:	2301      	movs	r3, #1
 8005120:	2101      	movs	r1, #1
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff fc4d 	bl	80049c2 <lsm6dso_write_reg>
 8005128:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800512a:	68fb      	ldr	r3, [r7, #12]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005140:	f107 0208 	add.w	r2, r7, #8
 8005144:	2301      	movs	r3, #1
 8005146:	2112      	movs	r1, #18
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff fc22 	bl	8004992 <lsm6dso_read_reg>
 800514e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10f      	bne.n	8005176 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	b2da      	uxtb	r2, r3
 800515e:	7a3b      	ldrb	r3, [r7, #8]
 8005160:	f362 0382 	bfi	r3, r2, #2, #1
 8005164:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005166:	f107 0208 	add.w	r2, r7, #8
 800516a:	2301      	movs	r3, #1
 800516c:	2112      	movs	r1, #18
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff fc27 	bl	80049c2 <lsm6dso_write_reg>
 8005174:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005176:	68fb      	ldr	r3, [r7, #12]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800518c:	f107 020c 	add.w	r2, r7, #12
 8005190:	2301      	movs	r3, #1
 8005192:	2118      	movs	r1, #24
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff fbfc 	bl	8004992 <lsm6dso_read_reg>
 800519a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d111      	bne.n	80051c6 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80051a2:	78fb      	ldrb	r3, [r7, #3]
 80051a4:	09db      	lsrs	r3, r3, #7
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	7b3b      	ldrb	r3, [r7, #12]
 80051b0:	f362 0341 	bfi	r3, r2, #1, #1
 80051b4:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80051b6:	f107 020c 	add.w	r2, r7, #12
 80051ba:	2301      	movs	r3, #1
 80051bc:	2118      	movs	r1, #24
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff fbff 	bl	80049c2 <lsm6dso_write_reg>
 80051c4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d107      	bne.n	80051dc <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80051cc:	f107 0210 	add.w	r2, r7, #16
 80051d0:	2301      	movs	r3, #1
 80051d2:	2162      	movs	r1, #98	; 0x62
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff fbdc 	bl	8004992 <lsm6dso_read_reg>
 80051da:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10f      	bne.n	8005202 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	7c3b      	ldrb	r3, [r7, #16]
 80051ec:	f362 03c4 	bfi	r3, r2, #3, #2
 80051f0:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80051f2:	f107 0210 	add.w	r2, r7, #16
 80051f6:	2301      	movs	r3, #1
 80051f8:	2162      	movs	r1, #98	; 0x62
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff fbe1 	bl	80049c2 <lsm6dso_write_reg>
 8005200:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8005202:	697b      	ldr	r3, [r7, #20]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005218:	f107 0208 	add.w	r2, r7, #8
 800521c:	2301      	movs	r3, #1
 800521e:	210a      	movs	r1, #10
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff fbb6 	bl	8004992 <lsm6dso_read_reg>
 8005226:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10f      	bne.n	800524e <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	b2da      	uxtb	r2, r3
 8005236:	7a3b      	ldrb	r3, [r7, #8]
 8005238:	f362 0302 	bfi	r3, r2, #0, #3
 800523c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800523e:	f107 0208 	add.w	r2, r7, #8
 8005242:	2301      	movs	r3, #1
 8005244:	210a      	movs	r1, #10
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff fbbb 	bl	80049c2 <lsm6dso_write_reg>
 800524c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800524e:	68fb      	ldr	r3, [r7, #12]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005262:	2102      	movs	r1, #2
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff ff3f 	bl	80050e8 <lsm6dso_mem_bank_set>
 800526a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8005272:	2302      	movs	r3, #2
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	2146      	movs	r1, #70	; 0x46
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff fb8a 	bl	8004992 <lsm6dso_read_reg>
 800527e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d104      	bne.n	8005290 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005286:	2100      	movs	r1, #0
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff ff2d 	bl	80050e8 <lsm6dso_mem_bank_set>
 800528e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005290:	68fb      	ldr	r3, [r7, #12]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80052a6:	2102      	movs	r1, #2
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff ff1d 	bl	80050e8 <lsm6dso_mem_bank_set>
 80052ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d107      	bne.n	80052c6 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80052b6:	f107 0208 	add.w	r2, r7, #8
 80052ba:	2301      	movs	r3, #1
 80052bc:	215f      	movs	r1, #95	; 0x5f
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff fb67 	bl	8004992 <lsm6dso_read_reg>
 80052c4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d12a      	bne.n	8005322 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 80052cc:	7a3b      	ldrb	r3, [r7, #8]
 80052ce:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d81b      	bhi.n	8005310 <lsm6dso_fsm_data_rate_get+0x74>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <lsm6dso_fsm_data_rate_get+0x44>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	080052f1 	.word	0x080052f1
 80052e4:	080052f9 	.word	0x080052f9
 80052e8:	08005301 	.word	0x08005301
 80052ec:	08005309 	.word	0x08005309
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
        break;
 80052f6:	e00f      	b.n	8005318 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2201      	movs	r2, #1
 80052fc:	701a      	strb	r2, [r3, #0]
        break;
 80052fe:	e00b      	b.n	8005318 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2202      	movs	r2, #2
 8005304:	701a      	strb	r2, [r3, #0]
        break;
 8005306:	e007      	b.n	8005318 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2203      	movs	r2, #3
 800530c:	701a      	strb	r2, [r3, #0]
        break;
 800530e:	e003      	b.n	8005318 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2200      	movs	r2, #0
 8005314:	701a      	strb	r2, [r3, #0]
        break;
 8005316:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005318:	2100      	movs	r1, #0
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fee4 	bl	80050e8 <lsm6dso_mem_bank_set>
 8005320:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005322:	68fb      	ldr	r3, [r7, #12]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005336:	2003      	movs	r0, #3
 8005338:	f000 f960 	bl	80055fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800533c:	200f      	movs	r0, #15
 800533e:	f000 f80d 	bl	800535c <HAL_InitTick>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	71fb      	strb	r3, [r7, #7]
 800534c:	e001      	b.n	8005352 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800534e:	f7fe fd49 	bl	8003de4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005352:	79fb      	ldrb	r3, [r7, #7]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005368:	4b17      	ldr	r3, [pc, #92]	; (80053c8 <HAL_InitTick+0x6c>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d023      	beq.n	80053b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005370:	4b16      	ldr	r3, [pc, #88]	; (80053cc <HAL_InitTick+0x70>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <HAL_InitTick+0x6c>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	4619      	mov	r1, r3
 800537a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800537e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f96d 	bl	8005666 <HAL_SYSTICK_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10f      	bne.n	80053b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b0f      	cmp	r3, #15
 8005396:	d809      	bhi.n	80053ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005398:	2200      	movs	r2, #0
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053a0:	f000 f937 	bl	8005612 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053a4:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <HAL_InitTick+0x74>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	e007      	b.n	80053bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
 80053b0:	e004      	b.n	80053bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	e001      	b.n	80053bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	2000000c 	.word	0x2000000c
 80053cc:	20000004 	.word	0x20000004
 80053d0:	20000008 	.word	0x20000008

080053d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <HAL_IncTick+0x20>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <HAL_IncTick+0x24>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4413      	add	r3, r2
 80053e4:	4a04      	ldr	r2, [pc, #16]	; (80053f8 <HAL_IncTick+0x24>)
 80053e6:	6013      	str	r3, [r2, #0]
}
 80053e8:	bf00      	nop
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	2000000c 	.word	0x2000000c
 80053f8:	20000ec0 	.word	0x20000ec0

080053fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  return uwTick;
 8005400:	4b03      	ldr	r3, [pc, #12]	; (8005410 <HAL_GetTick+0x14>)
 8005402:	681b      	ldr	r3, [r3, #0]
}
 8005404:	4618      	mov	r0, r3
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20000ec0 	.word	0x20000ec0

08005414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800541c:	f7ff ffee 	bl	80053fc <HAL_GetTick>
 8005420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800542c:	d005      	beq.n	800543a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_Delay+0x44>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800543a:	bf00      	nop
 800543c:	f7ff ffde 	bl	80053fc <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	429a      	cmp	r2, r3
 800544a:	d8f7      	bhi.n	800543c <HAL_Delay+0x28>
  {
  }
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	2000000c 	.word	0x2000000c

0800545c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <__NVIC_SetPriorityGrouping+0x44>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005478:	4013      	ands	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800548e:	4a04      	ldr	r2, [pc, #16]	; (80054a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	60d3      	str	r3, [r2, #12]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	e000ed00 	.word	0xe000ed00

080054a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054a8:	4b04      	ldr	r3, [pc, #16]	; (80054bc <__NVIC_GetPriorityGrouping+0x18>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	0a1b      	lsrs	r3, r3, #8
 80054ae:	f003 0307 	and.w	r3, r3, #7
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	e000ed00 	.word	0xe000ed00

080054c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	db0b      	blt.n	80054ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	f003 021f 	and.w	r2, r3, #31
 80054d8:	4907      	ldr	r1, [pc, #28]	; (80054f8 <__NVIC_EnableIRQ+0x38>)
 80054da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	2001      	movs	r0, #1
 80054e2:	fa00 f202 	lsl.w	r2, r0, r2
 80054e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	e000e100 	.word	0xe000e100

080054fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	6039      	str	r1, [r7, #0]
 8005506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800550c:	2b00      	cmp	r3, #0
 800550e:	db0a      	blt.n	8005526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	b2da      	uxtb	r2, r3
 8005514:	490c      	ldr	r1, [pc, #48]	; (8005548 <__NVIC_SetPriority+0x4c>)
 8005516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551a:	0112      	lsls	r2, r2, #4
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	440b      	add	r3, r1
 8005520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005524:	e00a      	b.n	800553c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	4908      	ldr	r1, [pc, #32]	; (800554c <__NVIC_SetPriority+0x50>)
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	3b04      	subs	r3, #4
 8005534:	0112      	lsls	r2, r2, #4
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	440b      	add	r3, r1
 800553a:	761a      	strb	r2, [r3, #24]
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	e000e100 	.word	0xe000e100
 800554c:	e000ed00 	.word	0xe000ed00

08005550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f1c3 0307 	rsb	r3, r3, #7
 800556a:	2b04      	cmp	r3, #4
 800556c:	bf28      	it	cs
 800556e:	2304      	movcs	r3, #4
 8005570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3304      	adds	r3, #4
 8005576:	2b06      	cmp	r3, #6
 8005578:	d902      	bls.n	8005580 <NVIC_EncodePriority+0x30>
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	3b03      	subs	r3, #3
 800557e:	e000      	b.n	8005582 <NVIC_EncodePriority+0x32>
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43da      	mvns	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	401a      	ands	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	fa01 f303 	lsl.w	r3, r1, r3
 80055a2:	43d9      	mvns	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a8:	4313      	orrs	r3, r2
         );
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3724      	adds	r7, #36	; 0x24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055c8:	d301      	bcc.n	80055ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055ca:	2301      	movs	r3, #1
 80055cc:	e00f      	b.n	80055ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ce:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <SysTick_Config+0x40>)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055d6:	210f      	movs	r1, #15
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055dc:	f7ff ff8e 	bl	80054fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <SysTick_Config+0x40>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055e6:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <SysTick_Config+0x40>)
 80055e8:	2207      	movs	r2, #7
 80055ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	e000e010 	.word	0xe000e010

080055fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff29 	bl	800545c <__NVIC_SetPriorityGrouping>
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	4603      	mov	r3, r0
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005624:	f7ff ff3e 	bl	80054a4 <__NVIC_GetPriorityGrouping>
 8005628:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	6978      	ldr	r0, [r7, #20]
 8005630:	f7ff ff8e 	bl	8005550 <NVIC_EncodePriority>
 8005634:	4602      	mov	r2, r0
 8005636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff ff5d 	bl	80054fc <__NVIC_SetPriority>
}
 8005642:	bf00      	nop
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	4603      	mov	r3, r0
 8005652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff ff31 	bl	80054c0 <__NVIC_EnableIRQ>
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff ffa2 	bl	80055b8 <SysTick_Config>
 8005674:	4603      	mov	r3, r0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d008      	beq.n	80056a8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2204      	movs	r2, #4
 800569a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e040      	b.n	800572a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 020e 	bic.w	r2, r2, #14
 80056b6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056c6:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0201 	bic.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056dc:	f003 021c 	and.w	r2, r3, #28
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	2101      	movs	r1, #1
 80056e6:	fa01 f202 	lsl.w	r2, r1, r2
 80056ea:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00c      	beq.n	8005718 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800570c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005716:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d005      	beq.n	800575a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2204      	movs	r2, #4
 8005752:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
 8005758:	e047      	b.n	80057ea <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 020e 	bic.w	r2, r2, #14
 8005768:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0201 	bic.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005788:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	f003 021c 	and.w	r2, r3, #28
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	2101      	movs	r1, #1
 8005798:	fa01 f202 	lsl.w	r2, r1, r2
 800579c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057a6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00c      	beq.n	80057ca <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057c8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	4798      	blx	r3
    }
  }
  return status;
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005802:	e166      	b.n	8005ad2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	2101      	movs	r1, #1
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	fa01 f303 	lsl.w	r3, r1, r3
 8005810:	4013      	ands	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8158 	beq.w	8005acc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	2b01      	cmp	r3, #1
 8005826:	d005      	beq.n	8005834 <HAL_GPIO_Init+0x40>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d130      	bne.n	8005896 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	2203      	movs	r2, #3
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	43db      	mvns	r3, r3
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4013      	ands	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800586a:	2201      	movs	r2, #1
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43db      	mvns	r3, r3
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4013      	ands	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	091b      	lsrs	r3, r3, #4
 8005880:	f003 0201 	and.w	r2, r3, #1
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d017      	beq.n	80058d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	2203      	movs	r2, #3
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	43db      	mvns	r3, r3
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4013      	ands	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d123      	bne.n	8005926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	08da      	lsrs	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3208      	adds	r2, #8
 80058e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	220f      	movs	r2, #15
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	08da      	lsrs	r2, r3, #3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3208      	adds	r2, #8
 8005920:	6939      	ldr	r1, [r7, #16]
 8005922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	2203      	movs	r2, #3
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4013      	ands	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f003 0203 	and.w	r2, r3, #3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80b2 	beq.w	8005acc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005968:	4b61      	ldr	r3, [pc, #388]	; (8005af0 <HAL_GPIO_Init+0x2fc>)
 800596a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596c:	4a60      	ldr	r2, [pc, #384]	; (8005af0 <HAL_GPIO_Init+0x2fc>)
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	6613      	str	r3, [r2, #96]	; 0x60
 8005974:	4b5e      	ldr	r3, [pc, #376]	; (8005af0 <HAL_GPIO_Init+0x2fc>)
 8005976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005980:	4a5c      	ldr	r2, [pc, #368]	; (8005af4 <HAL_GPIO_Init+0x300>)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	089b      	lsrs	r3, r3, #2
 8005986:	3302      	adds	r3, #2
 8005988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800598c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	220f      	movs	r2, #15
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	43db      	mvns	r3, r3
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4013      	ands	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059aa:	d02b      	beq.n	8005a04 <HAL_GPIO_Init+0x210>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a52      	ldr	r2, [pc, #328]	; (8005af8 <HAL_GPIO_Init+0x304>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d025      	beq.n	8005a00 <HAL_GPIO_Init+0x20c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a51      	ldr	r2, [pc, #324]	; (8005afc <HAL_GPIO_Init+0x308>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d01f      	beq.n	80059fc <HAL_GPIO_Init+0x208>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a50      	ldr	r2, [pc, #320]	; (8005b00 <HAL_GPIO_Init+0x30c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d019      	beq.n	80059f8 <HAL_GPIO_Init+0x204>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a4f      	ldr	r2, [pc, #316]	; (8005b04 <HAL_GPIO_Init+0x310>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d013      	beq.n	80059f4 <HAL_GPIO_Init+0x200>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a4e      	ldr	r2, [pc, #312]	; (8005b08 <HAL_GPIO_Init+0x314>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00d      	beq.n	80059f0 <HAL_GPIO_Init+0x1fc>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a4d      	ldr	r2, [pc, #308]	; (8005b0c <HAL_GPIO_Init+0x318>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d007      	beq.n	80059ec <HAL_GPIO_Init+0x1f8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a4c      	ldr	r2, [pc, #304]	; (8005b10 <HAL_GPIO_Init+0x31c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <HAL_GPIO_Init+0x1f4>
 80059e4:	2307      	movs	r3, #7
 80059e6:	e00e      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059e8:	2308      	movs	r3, #8
 80059ea:	e00c      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059ec:	2306      	movs	r3, #6
 80059ee:	e00a      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059f0:	2305      	movs	r3, #5
 80059f2:	e008      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059f4:	2304      	movs	r3, #4
 80059f6:	e006      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059f8:	2303      	movs	r3, #3
 80059fa:	e004      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e002      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <HAL_GPIO_Init+0x212>
 8005a04:	2300      	movs	r3, #0
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	f002 0203 	and.w	r2, r2, #3
 8005a0c:	0092      	lsls	r2, r2, #2
 8005a0e:	4093      	lsls	r3, r2
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a16:	4937      	ldr	r1, [pc, #220]	; (8005af4 <HAL_GPIO_Init+0x300>)
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	089b      	lsrs	r3, r3, #2
 8005a1c:	3302      	adds	r3, #2
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a24:	4b3b      	ldr	r3, [pc, #236]	; (8005b14 <HAL_GPIO_Init+0x320>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4013      	ands	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a48:	4a32      	ldr	r2, [pc, #200]	; (8005b14 <HAL_GPIO_Init+0x320>)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <HAL_GPIO_Init+0x320>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	43db      	mvns	r3, r3
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a72:	4a28      	ldr	r2, [pc, #160]	; (8005b14 <HAL_GPIO_Init+0x320>)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005a78:	4b26      	ldr	r3, [pc, #152]	; (8005b14 <HAL_GPIO_Init+0x320>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	43db      	mvns	r3, r3
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4013      	ands	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <HAL_GPIO_Init+0x320>)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005aa2:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <HAL_GPIO_Init+0x320>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	43db      	mvns	r3, r3
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <HAL_GPIO_Init+0x320>)
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f47f ae91 	bne.w	8005804 <HAL_GPIO_Init+0x10>
  }
}
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40021000 	.word	0x40021000
 8005af4:	40010000 	.word	0x40010000
 8005af8:	48000400 	.word	0x48000400
 8005afc:	48000800 	.word	0x48000800
 8005b00:	48000c00 	.word	0x48000c00
 8005b04:	48001000 	.word	0x48001000
 8005b08:	48001400 	.word	0x48001400
 8005b0c:	48001800 	.word	0x48001800
 8005b10:	48001c00 	.word	0x48001c00
 8005b14:	40010400 	.word	0x40010400

08005b18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005b26:	e0c9      	b.n	8005cbc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005b28:	2201      	movs	r2, #1
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	4013      	ands	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80bc 	beq.w	8005cb6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005b3e:	4a66      	ldr	r2, [pc, #408]	; (8005cd8 <HAL_GPIO_DeInit+0x1c0>)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	089b      	lsrs	r3, r3, #2
 8005b44:	3302      	adds	r3, #2
 8005b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b4a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	220f      	movs	r2, #15
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005b66:	d02b      	beq.n	8005bc0 <HAL_GPIO_DeInit+0xa8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a5c      	ldr	r2, [pc, #368]	; (8005cdc <HAL_GPIO_DeInit+0x1c4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d025      	beq.n	8005bbc <HAL_GPIO_DeInit+0xa4>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a5b      	ldr	r2, [pc, #364]	; (8005ce0 <HAL_GPIO_DeInit+0x1c8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d01f      	beq.n	8005bb8 <HAL_GPIO_DeInit+0xa0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a5a      	ldr	r2, [pc, #360]	; (8005ce4 <HAL_GPIO_DeInit+0x1cc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d019      	beq.n	8005bb4 <HAL_GPIO_DeInit+0x9c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a59      	ldr	r2, [pc, #356]	; (8005ce8 <HAL_GPIO_DeInit+0x1d0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d013      	beq.n	8005bb0 <HAL_GPIO_DeInit+0x98>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a58      	ldr	r2, [pc, #352]	; (8005cec <HAL_GPIO_DeInit+0x1d4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00d      	beq.n	8005bac <HAL_GPIO_DeInit+0x94>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a57      	ldr	r2, [pc, #348]	; (8005cf0 <HAL_GPIO_DeInit+0x1d8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <HAL_GPIO_DeInit+0x90>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a56      	ldr	r2, [pc, #344]	; (8005cf4 <HAL_GPIO_DeInit+0x1dc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d101      	bne.n	8005ba4 <HAL_GPIO_DeInit+0x8c>
 8005ba0:	2307      	movs	r3, #7
 8005ba2:	e00e      	b.n	8005bc2 <HAL_GPIO_DeInit+0xaa>
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	e00c      	b.n	8005bc2 <HAL_GPIO_DeInit+0xaa>
 8005ba8:	2306      	movs	r3, #6
 8005baa:	e00a      	b.n	8005bc2 <HAL_GPIO_DeInit+0xaa>
 8005bac:	2305      	movs	r3, #5
 8005bae:	e008      	b.n	8005bc2 <HAL_GPIO_DeInit+0xaa>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	e006      	b.n	8005bc2 <HAL_GPIO_DeInit+0xaa>
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e004      	b.n	8005bc2 <HAL_GPIO_DeInit+0xaa>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e002      	b.n	8005bc2 <HAL_GPIO_DeInit+0xaa>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <HAL_GPIO_DeInit+0xaa>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	f002 0203 	and.w	r2, r2, #3
 8005bc8:	0092      	lsls	r2, r2, #2
 8005bca:	4093      	lsls	r3, r2
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d132      	bne.n	8005c38 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005bd2:	4b49      	ldr	r3, [pc, #292]	; (8005cf8 <HAL_GPIO_DeInit+0x1e0>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	4947      	ldr	r1, [pc, #284]	; (8005cf8 <HAL_GPIO_DeInit+0x1e0>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005be0:	4b45      	ldr	r3, [pc, #276]	; (8005cf8 <HAL_GPIO_DeInit+0x1e0>)
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	43db      	mvns	r3, r3
 8005be8:	4943      	ldr	r1, [pc, #268]	; (8005cf8 <HAL_GPIO_DeInit+0x1e0>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005bee:	4b42      	ldr	r3, [pc, #264]	; (8005cf8 <HAL_GPIO_DeInit+0x1e0>)
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	4940      	ldr	r1, [pc, #256]	; (8005cf8 <HAL_GPIO_DeInit+0x1e0>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005bfc:	4b3e      	ldr	r3, [pc, #248]	; (8005cf8 <HAL_GPIO_DeInit+0x1e0>)
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	43db      	mvns	r3, r3
 8005c04:	493c      	ldr	r1, [pc, #240]	; (8005cf8 <HAL_GPIO_DeInit+0x1e0>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	220f      	movs	r2, #15
 8005c14:	fa02 f303 	lsl.w	r3, r2, r3
 8005c18:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005c1a:	4a2f      	ldr	r2, [pc, #188]	; (8005cd8 <HAL_GPIO_DeInit+0x1c0>)
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	089b      	lsrs	r3, r3, #2
 8005c20:	3302      	adds	r3, #2
 8005c22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	43da      	mvns	r2, r3
 8005c2a:	482b      	ldr	r0, [pc, #172]	; (8005cd8 <HAL_GPIO_DeInit+0x1c0>)
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	089b      	lsrs	r3, r3, #2
 8005c30:	400a      	ands	r2, r1
 8005c32:	3302      	adds	r3, #2
 8005c34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	2103      	movs	r1, #3
 8005c42:	fa01 f303 	lsl.w	r3, r1, r3
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	08da      	lsrs	r2, r3, #3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3208      	adds	r2, #8
 8005c54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	220f      	movs	r2, #15
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	08d2      	lsrs	r2, r2, #3
 8005c6c:	4019      	ands	r1, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	3208      	adds	r2, #8
 8005c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	2103      	movs	r1, #3
 8005c80:	fa01 f303 	lsl.w	r3, r1, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	401a      	ands	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	2101      	movs	r1, #1
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	fa01 f303 	lsl.w	r3, r1, r3
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	2103      	movs	r1, #3
 8005caa:	fa01 f303 	lsl.w	r3, r1, r3
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	401a      	ands	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f47f af2f 	bne.w	8005b28 <HAL_GPIO_DeInit+0x10>
  }
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	48000400 	.word	0x48000400
 8005ce0:	48000800 	.word	0x48000800
 8005ce4:	48000c00 	.word	0x48000c00
 8005ce8:	48001000 	.word	0x48001000
 8005cec:	48001400 	.word	0x48001400
 8005cf0:	48001800 	.word	0x48001800
 8005cf4:	48001c00 	.word	0x48001c00
 8005cf8:	40010400 	.word	0x40010400

08005cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	887b      	ldrh	r3, [r7, #2]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
 8005d18:	e001      	b.n	8005d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	807b      	strh	r3, [r7, #2]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d3c:	787b      	ldrb	r3, [r7, #1]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d42:	887a      	ldrh	r2, [r7, #2]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d48:	e002      	b.n	8005d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d4a:	887a      	ldrh	r2, [r7, #2]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d6e:	887a      	ldrh	r2, [r7, #2]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4013      	ands	r3, r2
 8005d74:	041a      	lsls	r2, r3, #16
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	43d9      	mvns	r1, r3
 8005d7a:	887b      	ldrh	r3, [r7, #2]
 8005d7c:	400b      	ands	r3, r1
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	619a      	str	r2, [r3, #24]
}
 8005d84:	bf00      	nop
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e081      	b.n	8005ea6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fe f838 	bl	8003e2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2224      	movs	r2, #36	; 0x24
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005de0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005df0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d107      	bne.n	8005e0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e06:	609a      	str	r2, [r3, #8]
 8005e08:	e006      	b.n	8005e18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005e16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d104      	bne.n	8005e2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69d9      	ldr	r1, [r3, #28]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1a      	ldr	r2, [r3, #32]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e021      	b.n	8005f04 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2224      	movs	r2, #36	; 0x24
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7fe f805 	bl	8003ee8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	607a      	str	r2, [r7, #4]
 8005f16:	461a      	mov	r2, r3
 8005f18:	460b      	mov	r3, r1
 8005f1a:	817b      	strh	r3, [r7, #10]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b20      	cmp	r3, #32
 8005f2a:	f040 80da 	bne.w	80060e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_I2C_Master_Transmit+0x30>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e0d3      	b.n	80060e4 <HAL_I2C_Master_Transmit+0x1d8>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f44:	f7ff fa5a 	bl	80053fc <HAL_GetTick>
 8005f48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	2319      	movs	r3, #25
 8005f50:	2201      	movs	r2, #1
 8005f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 fdde 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e0be      	b.n	80060e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2221      	movs	r2, #33	; 0x21
 8005f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2210      	movs	r2, #16
 8005f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	893a      	ldrh	r2, [r7, #8]
 8005f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2bff      	cmp	r3, #255	; 0xff
 8005f96:	d90e      	bls.n	8005fb6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	22ff      	movs	r2, #255	; 0xff
 8005f9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	8979      	ldrh	r1, [r7, #10]
 8005fa6:	4b51      	ldr	r3, [pc, #324]	; (80060ec <HAL_I2C_Master_Transmit+0x1e0>)
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 ffd4 	bl	8006f5c <I2C_TransferConfig>
 8005fb4:	e06c      	b.n	8006090 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	8979      	ldrh	r1, [r7, #10]
 8005fc8:	4b48      	ldr	r3, [pc, #288]	; (80060ec <HAL_I2C_Master_Transmit+0x1e0>)
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 ffc3 	bl	8006f5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005fd6:	e05b      	b.n	8006090 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	6a39      	ldr	r1, [r7, #32]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 fddb 	bl	8006b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e07b      	b.n	80060e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d034      	beq.n	8006090 <HAL_I2C_Master_Transmit+0x184>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602a:	2b00      	cmp	r3, #0
 800602c:	d130      	bne.n	8006090 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	2200      	movs	r2, #0
 8006036:	2180      	movs	r1, #128	; 0x80
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fd6d 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e04d      	b.n	80060e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	2bff      	cmp	r3, #255	; 0xff
 8006050:	d90e      	bls.n	8006070 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	22ff      	movs	r2, #255	; 0xff
 8006056:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605c:	b2da      	uxtb	r2, r3
 800605e:	8979      	ldrh	r1, [r7, #10]
 8006060:	2300      	movs	r3, #0
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 ff77 	bl	8006f5c <I2C_TransferConfig>
 800606e:	e00f      	b.n	8006090 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607e:	b2da      	uxtb	r2, r3
 8006080:	8979      	ldrh	r1, [r7, #10]
 8006082:	2300      	movs	r3, #0
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 ff66 	bl	8006f5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d19e      	bne.n	8005fd8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	6a39      	ldr	r1, [r7, #32]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 fdba 	bl	8006c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e01a      	b.n	80060e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2220      	movs	r2, #32
 80060b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6859      	ldr	r1, [r3, #4]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80060c2:	400b      	ands	r3, r1
 80060c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	e000      	b.n	80060e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80060e2:	2302      	movs	r3, #2
  }
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	80002000 	.word	0x80002000
 80060f0:	fe00e800 	.word	0xfe00e800

080060f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	607a      	str	r2, [r7, #4]
 80060fe:	461a      	mov	r2, r3
 8006100:	460b      	mov	r3, r1
 8006102:	817b      	strh	r3, [r7, #10]
 8006104:	4613      	mov	r3, r2
 8006106:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b20      	cmp	r3, #32
 8006112:	f040 80db 	bne.w	80062cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_I2C_Master_Receive+0x30>
 8006120:	2302      	movs	r3, #2
 8006122:	e0d4      	b.n	80062ce <HAL_I2C_Master_Receive+0x1da>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800612c:	f7ff f966 	bl	80053fc <HAL_GetTick>
 8006130:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	2319      	movs	r3, #25
 8006138:	2201      	movs	r2, #1
 800613a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 fcea 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e0bf      	b.n	80062ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2222      	movs	r2, #34	; 0x22
 8006152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2210      	movs	r2, #16
 800615a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	893a      	ldrh	r2, [r7, #8]
 800616e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617a:	b29b      	uxth	r3, r3
 800617c:	2bff      	cmp	r3, #255	; 0xff
 800617e:	d90e      	bls.n	800619e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	22ff      	movs	r2, #255	; 0xff
 8006184:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618a:	b2da      	uxtb	r2, r3
 800618c:	8979      	ldrh	r1, [r7, #10]
 800618e:	4b52      	ldr	r3, [pc, #328]	; (80062d8 <HAL_I2C_Master_Receive+0x1e4>)
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fee0 	bl	8006f5c <I2C_TransferConfig>
 800619c:	e06d      	b.n	800627a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	8979      	ldrh	r1, [r7, #10]
 80061b0:	4b49      	ldr	r3, [pc, #292]	; (80062d8 <HAL_I2C_Master_Receive+0x1e4>)
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fecf 	bl	8006f5c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80061be:	e05c      	b.n	800627a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	6a39      	ldr	r1, [r7, #32]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fd63 	bl	8006c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e07c      	b.n	80062ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d034      	beq.n	800627a <HAL_I2C_Master_Receive+0x186>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006214:	2b00      	cmp	r3, #0
 8006216:	d130      	bne.n	800627a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	2200      	movs	r2, #0
 8006220:	2180      	movs	r1, #128	; 0x80
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fc78 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e04d      	b.n	80062ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	2bff      	cmp	r3, #255	; 0xff
 800623a:	d90e      	bls.n	800625a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	22ff      	movs	r2, #255	; 0xff
 8006240:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006246:	b2da      	uxtb	r2, r3
 8006248:	8979      	ldrh	r1, [r7, #10]
 800624a:	2300      	movs	r3, #0
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fe82 	bl	8006f5c <I2C_TransferConfig>
 8006258:	e00f      	b.n	800627a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006268:	b2da      	uxtb	r2, r3
 800626a:	8979      	ldrh	r1, [r7, #10]
 800626c:	2300      	movs	r3, #0
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fe71 	bl	8006f5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d19d      	bne.n	80061c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	6a39      	ldr	r1, [r7, #32]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fcc5 	bl	8006c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e01a      	b.n	80062ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2220      	movs	r2, #32
 800629e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6859      	ldr	r1, [r3, #4]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <HAL_I2C_Master_Receive+0x1e8>)
 80062ac:	400b      	ands	r3, r1
 80062ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e000      	b.n	80062ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
  }
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	80002400 	.word	0x80002400
 80062dc:	fe00e800 	.word	0xfe00e800

080062e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	461a      	mov	r2, r3
 80062ee:	4603      	mov	r3, r0
 80062f0:	817b      	strh	r3, [r7, #10]
 80062f2:	460b      	mov	r3, r1
 80062f4:	813b      	strh	r3, [r7, #8]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b20      	cmp	r3, #32
 8006304:	f040 80f9 	bne.w	80064fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <HAL_I2C_Mem_Write+0x34>
 800630e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006310:	2b00      	cmp	r3, #0
 8006312:	d105      	bne.n	8006320 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e0ed      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_I2C_Mem_Write+0x4e>
 800632a:	2302      	movs	r3, #2
 800632c:	e0e6      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006336:	f7ff f861 	bl	80053fc <HAL_GetTick>
 800633a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	2319      	movs	r3, #25
 8006342:	2201      	movs	r2, #1
 8006344:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 fbe5 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0d1      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2221      	movs	r2, #33	; 0x21
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2240      	movs	r2, #64	; 0x40
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a3a      	ldr	r2, [r7, #32]
 8006372:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006378:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006380:	88f8      	ldrh	r0, [r7, #6]
 8006382:	893a      	ldrh	r2, [r7, #8]
 8006384:	8979      	ldrh	r1, [r7, #10]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	4603      	mov	r3, r0
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 faf5 	bl	8006980 <I2C_RequestMemoryWrite>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e0a9      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2bff      	cmp	r3, #255	; 0xff
 80063b0:	d90e      	bls.n	80063d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	22ff      	movs	r2, #255	; 0xff
 80063b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	8979      	ldrh	r1, [r7, #10]
 80063c0:	2300      	movs	r3, #0
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fdc7 	bl	8006f5c <I2C_TransferConfig>
 80063ce:	e00f      	b.n	80063f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	8979      	ldrh	r1, [r7, #10]
 80063e2:	2300      	movs	r3, #0
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fdb6 	bl	8006f5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 fbcf 	bl	8006b98 <I2C_WaitOnTXISFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e07b      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d034      	beq.n	80064a8 <HAL_I2C_Mem_Write+0x1c8>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d130      	bne.n	80064a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	2200      	movs	r2, #0
 800644e:	2180      	movs	r1, #128	; 0x80
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fb61 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e04d      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006464:	b29b      	uxth	r3, r3
 8006466:	2bff      	cmp	r3, #255	; 0xff
 8006468:	d90e      	bls.n	8006488 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	22ff      	movs	r2, #255	; 0xff
 800646e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006474:	b2da      	uxtb	r2, r3
 8006476:	8979      	ldrh	r1, [r7, #10]
 8006478:	2300      	movs	r3, #0
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fd6b 	bl	8006f5c <I2C_TransferConfig>
 8006486:	e00f      	b.n	80064a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006496:	b2da      	uxtb	r2, r3
 8006498:	8979      	ldrh	r1, [r7, #10]
 800649a:	2300      	movs	r3, #0
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fd5a 	bl	8006f5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d19e      	bne.n	80063f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 fbae 	bl	8006c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e01a      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2220      	movs	r2, #32
 80064cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6859      	ldr	r1, [r3, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <HAL_I2C_Mem_Write+0x224>)
 80064da:	400b      	ands	r3, r1
 80064dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e000      	b.n	80064fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80064fa:	2302      	movs	r3, #2
  }
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	fe00e800 	.word	0xfe00e800

08006508 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	4608      	mov	r0, r1
 8006512:	4611      	mov	r1, r2
 8006514:	461a      	mov	r2, r3
 8006516:	4603      	mov	r3, r0
 8006518:	817b      	strh	r3, [r7, #10]
 800651a:	460b      	mov	r3, r1
 800651c:	813b      	strh	r3, [r7, #8]
 800651e:	4613      	mov	r3, r2
 8006520:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b20      	cmp	r3, #32
 800652c:	f040 80fd 	bne.w	800672a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_I2C_Mem_Read+0x34>
 8006536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006538:	2b00      	cmp	r3, #0
 800653a:	d105      	bne.n	8006548 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006542:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0f1      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_I2C_Mem_Read+0x4e>
 8006552:	2302      	movs	r3, #2
 8006554:	e0ea      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800655e:	f7fe ff4d 	bl	80053fc <HAL_GetTick>
 8006562:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	2319      	movs	r3, #25
 800656a:	2201      	movs	r2, #1
 800656c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 fad1 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e0d5      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2222      	movs	r2, #34	; 0x22
 8006584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2240      	movs	r2, #64	; 0x40
 800658c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a3a      	ldr	r2, [r7, #32]
 800659a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065a8:	88f8      	ldrh	r0, [r7, #6]
 80065aa:	893a      	ldrh	r2, [r7, #8]
 80065ac:	8979      	ldrh	r1, [r7, #10]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	4603      	mov	r3, r0
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 fa35 	bl	8006a28 <I2C_RequestMemoryRead>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0ad      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2bff      	cmp	r3, #255	; 0xff
 80065d8:	d90e      	bls.n	80065f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	22ff      	movs	r2, #255	; 0xff
 80065de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	8979      	ldrh	r1, [r7, #10]
 80065e8:	4b52      	ldr	r3, [pc, #328]	; (8006734 <HAL_I2C_Mem_Read+0x22c>)
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fcb3 	bl	8006f5c <I2C_TransferConfig>
 80065f6:	e00f      	b.n	8006618 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006606:	b2da      	uxtb	r2, r3
 8006608:	8979      	ldrh	r1, [r7, #10]
 800660a:	4b4a      	ldr	r3, [pc, #296]	; (8006734 <HAL_I2C_Mem_Read+0x22c>)
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fca2 	bl	8006f5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	2200      	movs	r2, #0
 8006620:	2104      	movs	r1, #4
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 fa78 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e07c      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d034      	beq.n	80066d8 <HAL_I2C_Mem_Read+0x1d0>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	d130      	bne.n	80066d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	2200      	movs	r2, #0
 800667e:	2180      	movs	r1, #128	; 0x80
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 fa49 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e04d      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006694:	b29b      	uxth	r3, r3
 8006696:	2bff      	cmp	r3, #255	; 0xff
 8006698:	d90e      	bls.n	80066b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	22ff      	movs	r2, #255	; 0xff
 800669e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	8979      	ldrh	r1, [r7, #10]
 80066a8:	2300      	movs	r3, #0
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fc53 	bl	8006f5c <I2C_TransferConfig>
 80066b6:	e00f      	b.n	80066d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	8979      	ldrh	r1, [r7, #10]
 80066ca:	2300      	movs	r3, #0
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fc42 	bl	8006f5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d19a      	bne.n	8006618 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 fa96 	bl	8006c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e01a      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2220      	movs	r2, #32
 80066fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6859      	ldr	r1, [r3, #4]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <HAL_I2C_Mem_Read+0x230>)
 800670a:	400b      	ands	r3, r1
 800670c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2220      	movs	r2, #32
 8006712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	e000      	b.n	800672c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800672a:	2302      	movs	r3, #2
  }
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	80002400 	.word	0x80002400
 8006738:	fe00e800 	.word	0xfe00e800

0800673c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	; 0x28
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	460b      	mov	r3, r1
 800674a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b20      	cmp	r3, #32
 800675a:	f040 80f1 	bne.w	8006940 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676c:	d101      	bne.n	8006772 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800676e:	2302      	movs	r3, #2
 8006770:	e0e7      	b.n	8006942 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_I2C_IsDeviceReady+0x44>
 800677c:	2302      	movs	r3, #2
 800677e:	e0e0      	b.n	8006942 <HAL_I2C_IsDeviceReady+0x206>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2224      	movs	r2, #36	; 0x24
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d107      	bne.n	80067ae <HAL_I2C_IsDeviceReady+0x72>
 800679e:	897b      	ldrh	r3, [r7, #10]
 80067a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067ac:	e004      	b.n	80067b8 <HAL_I2C_IsDeviceReady+0x7c>
 80067ae:	897b      	ldrh	r3, [r7, #10]
 80067b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80067be:	f7fe fe1d 	bl	80053fc <HAL_GetTick>
 80067c2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	bf0c      	ite	eq
 80067d2:	2301      	moveq	r3, #1
 80067d4:	2300      	movne	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	bf0c      	ite	eq
 80067e8:	2301      	moveq	r3, #1
 80067ea:	2300      	movne	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80067f0:	e034      	b.n	800685c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f8:	d01a      	beq.n	8006830 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fe fdff 	bl	80053fc <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <HAL_I2C_IsDeviceReady+0xd4>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10f      	bne.n	8006830 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681c:	f043 0220 	orr.w	r2, r3, #32
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e088      	b.n	8006942 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b20      	cmp	r3, #32
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b10      	cmp	r3, #16
 8006852:	bf0c      	ite	eq
 8006854:	2301      	moveq	r3, #1
 8006856:	2300      	movne	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800685c:	7ffb      	ldrb	r3, [r7, #31]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d102      	bne.n	8006868 <HAL_I2C_IsDeviceReady+0x12c>
 8006862:	7fbb      	ldrb	r3, [r7, #30]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0c4      	beq.n	80067f2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	f003 0310 	and.w	r3, r3, #16
 8006872:	2b10      	cmp	r3, #16
 8006874:	d01a      	beq.n	80068ac <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2200      	movs	r2, #0
 800687e:	2120      	movs	r1, #32
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f949 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e058      	b.n	8006942 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2220      	movs	r2, #32
 8006896:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	e04a      	b.n	8006942 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2200      	movs	r2, #0
 80068b4:	2120      	movs	r1, #32
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f92e 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e03d      	b.n	8006942 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2210      	movs	r2, #16
 80068cc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2220      	movs	r2, #32
 80068d4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d118      	bne.n	8006910 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ec:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2200      	movs	r2, #0
 80068f6:	2120      	movs	r1, #32
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 f90d 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e01c      	b.n	8006942 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2220      	movs	r2, #32
 800690e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	3301      	adds	r3, #1
 8006914:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	f63f af3b 	bhi.w	8006796 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692c:	f043 0220 	orr.w	r2, r3, #32
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e000      	b.n	8006942 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006940:	2302      	movs	r3, #2
  }
}
 8006942:	4618      	mov	r0, r3
 8006944:	3720      	adds	r7, #32
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006958:	b2db      	uxtb	r3, r3
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	4608      	mov	r0, r1
 800698a:	4611      	mov	r1, r2
 800698c:	461a      	mov	r2, r3
 800698e:	4603      	mov	r3, r0
 8006990:	817b      	strh	r3, [r7, #10]
 8006992:	460b      	mov	r3, r1
 8006994:	813b      	strh	r3, [r7, #8]
 8006996:	4613      	mov	r3, r2
 8006998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	b2da      	uxtb	r2, r3
 800699e:	8979      	ldrh	r1, [r7, #10]
 80069a0:	4b20      	ldr	r3, [pc, #128]	; (8006a24 <I2C_RequestMemoryWrite+0xa4>)
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fad7 	bl	8006f5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	69b9      	ldr	r1, [r7, #24]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f8f0 	bl	8006b98 <I2C_WaitOnTXISFlagUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e02c      	b.n	8006a1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d105      	bne.n	80069d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069c8:	893b      	ldrh	r3, [r7, #8]
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	629a      	str	r2, [r3, #40]	; 0x28
 80069d2:	e015      	b.n	8006a00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069d4:	893b      	ldrh	r3, [r7, #8]
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	b29b      	uxth	r3, r3
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	69b9      	ldr	r1, [r7, #24]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f8d6 	bl	8006b98 <I2C_WaitOnTXISFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e012      	b.n	8006a1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069f6:	893b      	ldrh	r3, [r7, #8]
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	2200      	movs	r2, #0
 8006a08:	2180      	movs	r1, #128	; 0x80
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f884 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	80002000 	.word	0x80002000

08006a28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	4608      	mov	r0, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	461a      	mov	r2, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	817b      	strh	r3, [r7, #10]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	813b      	strh	r3, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006a42:	88fb      	ldrh	r3, [r7, #6]
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	8979      	ldrh	r1, [r7, #10]
 8006a48:	4b20      	ldr	r3, [pc, #128]	; (8006acc <I2C_RequestMemoryRead+0xa4>)
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fa84 	bl	8006f5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	69b9      	ldr	r1, [r7, #24]
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f89d 	bl	8006b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e02c      	b.n	8006ac2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d105      	bne.n	8006a7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a6e:	893b      	ldrh	r3, [r7, #8]
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	629a      	str	r2, [r3, #40]	; 0x28
 8006a78:	e015      	b.n	8006aa6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a7a:	893b      	ldrh	r3, [r7, #8]
 8006a7c:	0a1b      	lsrs	r3, r3, #8
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	69b9      	ldr	r1, [r7, #24]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f883 	bl	8006b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e012      	b.n	8006ac2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a9c:	893b      	ldrh	r3, [r7, #8]
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2200      	movs	r2, #0
 8006aae:	2140      	movs	r1, #64	; 0x40
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f831 	bl	8006b18 <I2C_WaitOnFlagUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e000      	b.n	8006ac2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	80002000 	.word	0x80002000

08006ad0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d103      	bne.n	8006aee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2200      	movs	r2, #0
 8006aec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d007      	beq.n	8006b0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	619a      	str	r2, [r3, #24]
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	4613      	mov	r3, r2
 8006b26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b28:	e022      	b.n	8006b70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b30:	d01e      	beq.n	8006b70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b32:	f7fe fc63 	bl	80053fc <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d302      	bcc.n	8006b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d113      	bne.n	8006b70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4c:	f043 0220 	orr.w	r2, r3, #32
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e00f      	b.n	8006b90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	bf0c      	ite	eq
 8006b80:	2301      	moveq	r3, #1
 8006b82:	2300      	movne	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	461a      	mov	r2, r3
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d0cd      	beq.n	8006b2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ba4:	e02c      	b.n	8006c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f8ea 	bl	8006d84 <I2C_IsErrorOccurred>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e02a      	b.n	8006c10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc0:	d01e      	beq.n	8006c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc2:	f7fe fc1b 	bl	80053fc <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d302      	bcc.n	8006bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d113      	bne.n	8006c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bdc:	f043 0220 	orr.w	r2, r3, #32
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e007      	b.n	8006c10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d1cb      	bne.n	8006ba6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c24:	e028      	b.n	8006c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f8aa 	bl	8006d84 <I2C_IsErrorOccurred>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e026      	b.n	8006c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c3a:	f7fe fbdf 	bl	80053fc <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d302      	bcc.n	8006c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d113      	bne.n	8006c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c54:	f043 0220 	orr.w	r2, r3, #32
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e007      	b.n	8006c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d1cf      	bne.n	8006c26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c9c:	e064      	b.n	8006d68 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	68b9      	ldr	r1, [r7, #8]
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f86e 	bl	8006d84 <I2C_IsErrorOccurred>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e062      	b.n	8006d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d138      	bne.n	8006d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d105      	bne.n	8006cda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e04e      	b.n	8006d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b10      	cmp	r3, #16
 8006ce6:	d107      	bne.n	8006cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2210      	movs	r2, #16
 8006cee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	645a      	str	r2, [r3, #68]	; 0x44
 8006cf6:	e002      	b.n	8006cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2220      	movs	r2, #32
 8006d04:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6859      	ldr	r1, [r3, #4]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4b1b      	ldr	r3, [pc, #108]	; (8006d80 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006d12:	400b      	ands	r3, r1
 8006d14:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e022      	b.n	8006d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d32:	f7fe fb63 	bl	80053fc <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d302      	bcc.n	8006d48 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10f      	bne.n	8006d68 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e007      	b.n	8006d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d193      	bne.n	8006c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	fe00e800 	.word	0xfe00e800

08006d84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08a      	sub	sp, #40	; 0x28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d075      	beq.n	8006e9c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2210      	movs	r2, #16
 8006db6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006db8:	e056      	b.n	8006e68 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc0:	d052      	beq.n	8006e68 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006dc2:	f7fe fb1b 	bl	80053fc <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d302      	bcc.n	8006dd8 <I2C_IsErrorOccurred+0x54>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d147      	bne.n	8006e68 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dfa:	d12e      	bne.n	8006e5a <I2C_IsErrorOccurred+0xd6>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e02:	d02a      	beq.n	8006e5a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006e04:	7cfb      	ldrb	r3, [r7, #19]
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d027      	beq.n	8006e5a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e1a:	f7fe faef 	bl	80053fc <HAL_GetTick>
 8006e1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e20:	e01b      	b.n	8006e5a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e22:	f7fe faeb 	bl	80053fc <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b19      	cmp	r3, #25
 8006e2e:	d914      	bls.n	8006e5a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e34:	f043 0220 	orr.w	r2, r3, #32
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d1dc      	bne.n	8006e22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d003      	beq.n	8006e7e <I2C_IsErrorOccurred+0xfa>
 8006e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d09d      	beq.n	8006dba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d103      	bne.n	8006e8e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	f043 0304 	orr.w	r3, r3, #4
 8006e94:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00b      	beq.n	8006ec6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	f043 0301 	orr.w	r3, r3, #1
 8006eb4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ebe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	f043 0308 	orr.w	r3, r3, #8
 8006ed6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d01c      	beq.n	8006f4c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7ff fddc 	bl	8006ad0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6859      	ldr	r1, [r3, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b0d      	ldr	r3, [pc, #52]	; (8006f58 <I2C_IsErrorOccurred+0x1d4>)
 8006f24:	400b      	ands	r3, r1
 8006f26:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3728      	adds	r7, #40	; 0x28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	fe00e800 	.word	0xfe00e800

08006f5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	607b      	str	r3, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	817b      	strh	r3, [r7, #10]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f6e:	897b      	ldrh	r3, [r7, #10]
 8006f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f74:	7a7b      	ldrb	r3, [r7, #9]
 8006f76:	041b      	lsls	r3, r3, #16
 8006f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	0d5b      	lsrs	r3, r3, #21
 8006f96:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f9a:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <I2C_TransferConfig+0x60>)
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	ea02 0103 	and.w	r1, r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	03ff63ff 	.word	0x03ff63ff

08006fc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d138      	bne.n	8007048 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e032      	b.n	800704a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2224      	movs	r2, #36	; 0x24
 8006ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0201 	bic.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007012:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6819      	ldr	r1, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0201 	orr.w	r2, r2, #1
 8007032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	e000      	b.n	800704a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007048:	2302      	movs	r3, #2
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b20      	cmp	r3, #32
 800706a:	d139      	bne.n	80070e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007076:	2302      	movs	r3, #2
 8007078:	e033      	b.n	80070e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2224      	movs	r2, #36	; 0x24
 8007086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0201 	bic.w	r2, r2, #1
 8007098:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80070a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	e000      	b.n	80070e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80070e0:	2302      	movs	r3, #2
  }
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80070ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070f0:	b08f      	sub	sp, #60	; 0x3c
 80070f2:	af0a      	add	r7, sp, #40	; 0x28
 80070f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e116      	b.n	800732e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f00e fd3e 	bl	8015b9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2203      	movs	r2, #3
 8007124:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f008 fb67 	bl	800f812 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	603b      	str	r3, [r7, #0]
 800714a:	687e      	ldr	r6, [r7, #4]
 800714c:	466d      	mov	r5, sp
 800714e:	f106 0410 	add.w	r4, r6, #16
 8007152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800715a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800715e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007162:	1d33      	adds	r3, r6, #4
 8007164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007166:	6838      	ldr	r0, [r7, #0]
 8007168:	f008 fa7a 	bl	800f660 <USB_CoreInit>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2202      	movs	r2, #2
 8007176:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e0d7      	b.n	800732e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f008 fb55 	bl	800f834 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]
 800718e:	e04a      	b.n	8007226 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007190:	7bfa      	ldrb	r2, [r7, #15]
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	4613      	mov	r3, r2
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	333d      	adds	r3, #61	; 0x3d
 80071a0:	2201      	movs	r2, #1
 80071a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80071a4:	7bfa      	ldrb	r2, [r7, #15]
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	4613      	mov	r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	4413      	add	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	440b      	add	r3, r1
 80071b2:	333c      	adds	r3, #60	; 0x3c
 80071b4:	7bfa      	ldrb	r2, [r7, #15]
 80071b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80071b8:	7bfa      	ldrb	r2, [r7, #15]
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	b298      	uxth	r0, r3
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	4613      	mov	r3, r2
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	3344      	adds	r3, #68	; 0x44
 80071cc:	4602      	mov	r2, r0
 80071ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80071d0:	7bfa      	ldrb	r2, [r7, #15]
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	4613      	mov	r3, r2
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	440b      	add	r3, r1
 80071de:	3340      	adds	r3, #64	; 0x40
 80071e0:	2200      	movs	r2, #0
 80071e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80071e4:	7bfa      	ldrb	r2, [r7, #15]
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	4613      	mov	r3, r2
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	440b      	add	r3, r1
 80071f2:	3348      	adds	r3, #72	; 0x48
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80071f8:	7bfa      	ldrb	r2, [r7, #15]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	334c      	adds	r3, #76	; 0x4c
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800720c:	7bfa      	ldrb	r2, [r7, #15]
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	4613      	mov	r3, r2
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	4413      	add	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	440b      	add	r3, r1
 800721a:	3354      	adds	r3, #84	; 0x54
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	3301      	adds	r3, #1
 8007224:	73fb      	strb	r3, [r7, #15]
 8007226:	7bfa      	ldrb	r2, [r7, #15]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	429a      	cmp	r2, r3
 800722e:	d3af      	bcc.n	8007190 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007230:	2300      	movs	r3, #0
 8007232:	73fb      	strb	r3, [r7, #15]
 8007234:	e044      	b.n	80072c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007236:	7bfa      	ldrb	r2, [r7, #15]
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800724c:	7bfa      	ldrb	r2, [r7, #15]
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	4613      	mov	r3, r2
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	4413      	add	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	440b      	add	r3, r1
 800725a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800725e:	7bfa      	ldrb	r2, [r7, #15]
 8007260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007262:	7bfa      	ldrb	r2, [r7, #15]
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007278:	7bfa      	ldrb	r2, [r7, #15]
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800728e:	7bfa      	ldrb	r2, [r7, #15]
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	00db      	lsls	r3, r3, #3
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80072a4:	7bfa      	ldrb	r2, [r7, #15]
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4613      	mov	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	3301      	adds	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]
 80072c0:	7bfa      	ldrb	r2, [r7, #15]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d3b5      	bcc.n	8007236 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	687e      	ldr	r6, [r7, #4]
 80072d2:	466d      	mov	r5, sp
 80072d4:	f106 0410 	add.w	r4, r6, #16
 80072d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80072e8:	1d33      	adds	r3, r6, #4
 80072ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072ec:	6838      	ldr	r0, [r7, #0]
 80072ee:	f008 faed 	bl	800f8cc <USB_DevInit>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e014      	b.n	800732e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	2b01      	cmp	r3, #1
 800731a:	d102      	bne.n	8007322 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 f881 	bl	8008424 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f009 fb75 	bl	8010a16 <USB_DevDisconnect>

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007336 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <HAL_PCD_Start+0x1c>
 800734e:	2302      	movs	r3, #2
 8007350:	e01c      	b.n	800738c <HAL_PCD_Start+0x56>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	2b01      	cmp	r3, #1
 8007360:	d105      	bne.n	800736e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f008 fa3c 	bl	800f7f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4618      	mov	r0, r3
 800737e:	f009 fb29 	bl	80109d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007394:	b590      	push	{r4, r7, lr}
 8007396:	b08d      	sub	sp, #52	; 0x34
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f009 fbe7 	bl	8010b7e <USB_GetMode>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f040 847e 	bne.w	8007cb4 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f009 fb4b 	bl	8010a58 <USB_ReadInterrupts>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8474 	beq.w	8007cb2 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	0a1b      	lsrs	r3, r3, #8
 80073d4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f009 fb38 	bl	8010a58 <USB_ReadInterrupts>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d107      	bne.n	8007402 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695a      	ldr	r2, [r3, #20]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f002 0202 	and.w	r2, r2, #2
 8007400:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f009 fb26 	bl	8010a58 <USB_ReadInterrupts>
 800740c:	4603      	mov	r3, r0
 800740e:	f003 0310 	and.w	r3, r3, #16
 8007412:	2b10      	cmp	r3, #16
 8007414:	d161      	bne.n	80074da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	699a      	ldr	r2, [r3, #24]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0210 	bic.w	r2, r2, #16
 8007424:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	f003 020f 	and.w	r2, r3, #15
 8007432:	4613      	mov	r3, r2
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	3304      	adds	r3, #4
 8007444:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	0c5b      	lsrs	r3, r3, #17
 800744a:	f003 030f 	and.w	r3, r3, #15
 800744e:	2b02      	cmp	r3, #2
 8007450:	d124      	bne.n	800749c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007458:	4013      	ands	r3, r2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d035      	beq.n	80074ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	091b      	lsrs	r3, r3, #4
 8007466:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800746c:	b29b      	uxth	r3, r3
 800746e:	461a      	mov	r2, r3
 8007470:	6a38      	ldr	r0, [r7, #32]
 8007472:	f009 f95d 	bl	8010730 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	691a      	ldr	r2, [r3, #16]
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	091b      	lsrs	r3, r3, #4
 800747e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007482:	441a      	add	r2, r3
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	6a1a      	ldr	r2, [r3, #32]
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	091b      	lsrs	r3, r3, #4
 8007490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007494:	441a      	add	r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	621a      	str	r2, [r3, #32]
 800749a:	e016      	b.n	80074ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	0c5b      	lsrs	r3, r3, #17
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	2b06      	cmp	r3, #6
 80074a6:	d110      	bne.n	80074ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074ae:	2208      	movs	r2, #8
 80074b0:	4619      	mov	r1, r3
 80074b2:	6a38      	ldr	r0, [r7, #32]
 80074b4:	f009 f93c 	bl	8010730 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	6a1a      	ldr	r2, [r3, #32]
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	091b      	lsrs	r3, r3, #4
 80074c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074c4:	441a      	add	r2, r3
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	699a      	ldr	r2, [r3, #24]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f042 0210 	orr.w	r2, r2, #16
 80074d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f009 faba 	bl	8010a58 <USB_ReadInterrupts>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074ee:	f040 80a7 	bne.w	8007640 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f009 fabf 	bl	8010a7e <USB_ReadDevAllOutEpInterrupt>
 8007500:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007502:	e099      	b.n	8007638 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 808e 	beq.w	800762c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f009 fae3 	bl	8010ae6 <USB_ReadDevOutEPInterrupt>
 8007520:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00c      	beq.n	8007546 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007538:	461a      	mov	r2, r3
 800753a:	2301      	movs	r3, #1
 800753c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800753e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fe95 	bl	8008270 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00c      	beq.n	800756a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755c:	461a      	mov	r2, r3
 800755e:	2308      	movs	r3, #8
 8007560:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fed1 	bl	800830c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f003 0310 	and.w	r3, r3, #16
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007580:	461a      	mov	r2, r3
 8007582:	2310      	movs	r3, #16
 8007584:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d030      	beq.n	80075f2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007598:	2b80      	cmp	r3, #128	; 0x80
 800759a:	d109      	bne.n	80075b0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075ae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80075b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b2:	4613      	mov	r3, r2
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	4413      	add	r3, r2
 80075c2:	3304      	adds	r3, #4
 80075c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	78db      	ldrb	r3, [r3, #3]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d108      	bne.n	80075e0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2200      	movs	r2, #0
 80075d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f00e fc22 	bl	8015e24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ec:	461a      	mov	r2, r3
 80075ee:	2302      	movs	r3, #2
 80075f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f003 0320 	and.w	r3, r3, #32
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d008      	beq.n	800760e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007608:	461a      	mov	r2, r3
 800760a:	2320      	movs	r3, #32
 800760c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d009      	beq.n	800762c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007624:	461a      	mov	r2, r3
 8007626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800762a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	3301      	adds	r3, #1
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	085b      	lsrs	r3, r3, #1
 8007636:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	2b00      	cmp	r3, #0
 800763c:	f47f af62 	bne.w	8007504 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4618      	mov	r0, r3
 8007646:	f009 fa07 	bl	8010a58 <USB_ReadInterrupts>
 800764a:	4603      	mov	r3, r0
 800764c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007654:	f040 80a4 	bne.w	80077a0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4618      	mov	r0, r3
 800765e:	f009 fa28 	bl	8010ab2 <USB_ReadDevAllInEpInterrupt>
 8007662:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007668:	e096      	b.n	8007798 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 808b 	beq.w	800778c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f009 fa4e 	bl	8010b22 <USB_ReadDevInEPInterrupt>
 8007686:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d020      	beq.n	80076d4 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	2201      	movs	r2, #1
 800769a:	fa02 f303 	lsl.w	r3, r2, r3
 800769e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	43db      	mvns	r3, r3
 80076ac:	69f9      	ldr	r1, [r7, #28]
 80076ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076b2:	4013      	ands	r3, r2
 80076b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c2:	461a      	mov	r2, r3
 80076c4:	2301      	movs	r3, #1
 80076c6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f00e fb13 	bl	8015cfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d008      	beq.n	80076f0 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	461a      	mov	r2, r3
 80076ec:	2308      	movs	r3, #8
 80076ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f003 0310 	and.w	r3, r3, #16
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d008      	beq.n	800770c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007706:	461a      	mov	r2, r3
 8007708:	2310      	movs	r3, #16
 800770a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	d008      	beq.n	8007728 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007722:	461a      	mov	r2, r3
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d023      	beq.n	800777a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007734:	6a38      	ldr	r0, [r7, #32]
 8007736:	f008 fa15 	bl	800fb64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800773a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800773c:	4613      	mov	r3, r2
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	3338      	adds	r3, #56	; 0x38
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4413      	add	r3, r2
 800774a:	3304      	adds	r3, #4
 800774c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	78db      	ldrb	r3, [r3, #3]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d108      	bne.n	8007768 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2200      	movs	r2, #0
 800775a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	b2db      	uxtb	r3, r3
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f00e fb70 	bl	8015e48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007774:	461a      	mov	r2, r3
 8007776:	2302      	movs	r3, #2
 8007778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fcea 	bl	8008160 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	3301      	adds	r3, #1
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	085b      	lsrs	r3, r3, #1
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	f47f af65 	bne.w	800766a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f009 f957 	bl	8010a58 <USB_ReadInterrupts>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077b4:	d122      	bne.n	80077fc <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d108      	bne.n	80077e6 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80077dc:	2100      	movs	r1, #0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fe44 	bl	800846c <HAL_PCDEx_LPM_Callback>
 80077e4:	e002      	b.n	80077ec <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f00e faf4 	bl	8015dd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695a      	ldr	r2, [r3, #20]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80077fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4618      	mov	r0, r3
 8007802:	f009 f929 	bl	8010a58 <USB_ReadInterrupts>
 8007806:	4603      	mov	r3, r0
 8007808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800780c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007810:	d112      	bne.n	8007838 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b01      	cmp	r3, #1
 8007820:	d102      	bne.n	8007828 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f00e fab0 	bl	8015d88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695a      	ldr	r2, [r3, #20]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007836:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f009 f90b 	bl	8010a58 <USB_ReadInterrupts>
 8007842:	4603      	mov	r3, r0
 8007844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800784c:	d121      	bne.n	8007892 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	695a      	ldr	r2, [r3, #20]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800785c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d111      	bne.n	800788c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007876:	089b      	lsrs	r3, r3, #2
 8007878:	f003 020f 	and.w	r2, r3, #15
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007882:	2101      	movs	r1, #1
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fdf1 	bl	800846c <HAL_PCDEx_LPM_Callback>
 800788a:	e002      	b.n	8007892 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f00e fa7b 	bl	8015d88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f009 f8de 	bl	8010a58 <USB_ReadInterrupts>
 800789c:	4603      	mov	r3, r0
 800789e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a6:	f040 80b5 	bne.w	8007a14 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078b8:	f023 0301 	bic.w	r3, r3, #1
 80078bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2110      	movs	r1, #16
 80078c4:	4618      	mov	r0, r3
 80078c6:	f008 f94d 	bl	800fb64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078ca:	2300      	movs	r3, #0
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ce:	e046      	b.n	800795e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078dc:	461a      	mov	r2, r3
 80078de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078f4:	0151      	lsls	r1, r2, #5
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	440a      	add	r2, r1
 80078fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007902:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	461a      	mov	r2, r3
 8007912:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007916:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007928:	0151      	lsls	r1, r2, #5
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	440a      	add	r2, r1
 800792e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007936:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007948:	0151      	lsls	r1, r2, #5
 800794a:	69fa      	ldr	r2, [r7, #28]
 800794c:	440a      	add	r2, r1
 800794e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007952:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007956:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795a:	3301      	adds	r3, #1
 800795c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007964:	429a      	cmp	r2, r3
 8007966:	d3b3      	bcc.n	80078d0 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007976:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800797a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	2b00      	cmp	r3, #0
 8007982:	d016      	beq.n	80079b2 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007994:	f043 030b 	orr.w	r3, r3, #11
 8007998:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079aa:	f043 030b 	orr.w	r3, r3, #11
 80079ae:	6453      	str	r3, [r2, #68]	; 0x44
 80079b0:	e015      	b.n	80079de <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	69fa      	ldr	r2, [r7, #28]
 80079bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80079c4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80079c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	69fa      	ldr	r2, [r7, #28]
 80079d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079d8:	f043 030b 	orr.w	r3, r3, #11
 80079dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80079fc:	4619      	mov	r1, r3
 80079fe:	4610      	mov	r0, r2
 8007a00:	f009 f8ee 	bl	8010be0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695a      	ldr	r2, [r3, #20]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f009 f81d 	bl	8010a58 <USB_ReadInterrupts>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a28:	d124      	bne.n	8007a74 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f009 f8b3 	bl	8010b9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f008 f910 	bl	800fc5e <USB_GetDevSpeed>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	461a      	mov	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681c      	ldr	r4, [r3, #0]
 8007a4a:	f001 fbcf 	bl	80091ec <HAL_RCC_GetHCLKFreq>
 8007a4e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f007 fe2d 	bl	800f6b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f00e f973 	bl	8015d4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695a      	ldr	r2, [r3, #20]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f008 ffed 	bl	8010a58 <USB_ReadInterrupts>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d10a      	bne.n	8007a9e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f00e f950 	bl	8015d2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	695a      	ldr	r2, [r3, #20]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f002 0208 	and.w	r2, r2, #8
 8007a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f008 ffd8 	bl	8010a58 <USB_ReadInterrupts>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aae:	2b80      	cmp	r3, #128	; 0x80
 8007ab0:	d122      	bne.n	8007af8 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007abe:	2301      	movs	r3, #1
 8007ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac2:	e014      	b.n	8007aee <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac8:	4613      	mov	r3, r2
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d105      	bne.n	8007ae8 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fb0b 	bl	80080fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	3301      	adds	r3, #1
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d3e5      	bcc.n	8007ac4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f008 ffab 	bl	8010a58 <USB_ReadInterrupts>
 8007b02:	4603      	mov	r3, r0
 8007b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b0c:	d13b      	bne.n	8007b86 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b0e:	2301      	movs	r3, #1
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
 8007b12:	e02b      	b.n	8007b6c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b24:	6879      	ldr	r1, [r7, #4]
 8007b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b28:	4613      	mov	r3, r2
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	440b      	add	r3, r1
 8007b32:	3340      	adds	r3, #64	; 0x40
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d115      	bne.n	8007b66 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007b3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	da12      	bge.n	8007b66 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b44:	4613      	mov	r3, r2
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	440b      	add	r3, r1
 8007b4e:	333f      	adds	r3, #63	; 0x3f
 8007b50:	2201      	movs	r2, #1
 8007b52:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 facc 	bl	80080fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	3301      	adds	r3, #1
 8007b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d3ce      	bcc.n	8007b14 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695a      	ldr	r2, [r3, #20]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f008 ff64 	bl	8010a58 <USB_ReadInterrupts>
 8007b90:	4603      	mov	r3, r0
 8007b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b9a:	d155      	bne.n	8007c48 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba0:	e045      	b.n	8007c2e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d12e      	bne.n	8007c28 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007bca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	da2b      	bge.n	8007c28 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007bdc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d121      	bne.n	8007c28 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be8:	4613      	mov	r3, r2
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c24:	6053      	str	r3, [r2, #4]
            break;
 8007c26:	e007      	b.n	8007c38 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d3b4      	bcc.n	8007ba2 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695a      	ldr	r2, [r3, #20]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f008 ff03 	bl	8010a58 <USB_ReadInterrupts>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5c:	d10a      	bne.n	8007c74 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f00e f904 	bl	8015e6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695a      	ldr	r2, [r3, #20]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f008 feed 	bl	8010a58 <USB_ReadInterrupts>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d115      	bne.n	8007cb4 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f00e f8f4 	bl	8015e88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6859      	ldr	r1, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	605a      	str	r2, [r3, #4]
 8007cb0:	e000      	b.n	8007cb4 <HAL_PCD_IRQHandler+0x920>
      return;
 8007cb2:	bf00      	nop
    }
  }
}
 8007cb4:	3734      	adds	r7, #52	; 0x34
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd90      	pop	{r4, r7, pc}

08007cba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_PCD_SetAddress+0x1a>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e013      	b.n	8007cfc <HAL_PCD_SetAddress+0x42>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	78fa      	ldrb	r2, [r7, #3]
 8007ce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	78fa      	ldrb	r2, [r7, #3]
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f008 fe4b 	bl	8010988 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	4611      	mov	r1, r2
 8007d10:	461a      	mov	r2, r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	70fb      	strb	r3, [r7, #3]
 8007d16:	460b      	mov	r3, r1
 8007d18:	803b      	strh	r3, [r7, #0]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	da0f      	bge.n	8007d4a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	f003 020f 	and.w	r2, r3, #15
 8007d30:	4613      	mov	r3, r2
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	3338      	adds	r3, #56	; 0x38
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	3304      	adds	r3, #4
 8007d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2201      	movs	r2, #1
 8007d46:	705a      	strb	r2, [r3, #1]
 8007d48:	e00f      	b.n	8007d6a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	f003 020f 	and.w	r2, r3, #15
 8007d50:	4613      	mov	r3, r2
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	4413      	add	r3, r2
 8007d60:	3304      	adds	r3, #4
 8007d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d6a:	78fb      	ldrb	r3, [r7, #3]
 8007d6c:	f003 030f 	and.w	r3, r3, #15
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d76:	883a      	ldrh	r2, [r7, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	78ba      	ldrb	r2, [r7, #2]
 8007d80:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	785b      	ldrb	r3, [r3, #1]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d94:	78bb      	ldrb	r3, [r7, #2]
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d102      	bne.n	8007da0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d101      	bne.n	8007dae <HAL_PCD_EP_Open+0xaa>
 8007daa:	2302      	movs	r3, #2
 8007dac:	e00e      	b.n	8007dcc <HAL_PCD_EP_Open+0xc8>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f007 ff6d 	bl	800fc9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007dca:	7afb      	ldrb	r3, [r7, #11]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	da0f      	bge.n	8007e08 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	f003 020f 	and.w	r2, r3, #15
 8007dee:	4613      	mov	r3, r2
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	3338      	adds	r3, #56	; 0x38
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2201      	movs	r2, #1
 8007e04:	705a      	strb	r2, [r3, #1]
 8007e06:	e00f      	b.n	8007e28 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	f003 020f 	and.w	r2, r3, #15
 8007e0e:	4613      	mov	r3, r2
 8007e10:	00db      	lsls	r3, r3, #3
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	3304      	adds	r3, #4
 8007e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <HAL_PCD_EP_Close+0x6e>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e00e      	b.n	8007e60 <HAL_PCD_EP_Close+0x8c>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68f9      	ldr	r1, [r7, #12]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f007 ffab 	bl	800fdac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	460b      	mov	r3, r1
 8007e76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	f003 020f 	and.w	r2, r3, #15
 8007e7e:	4613      	mov	r3, r2
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	4413      	add	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	3304      	adds	r3, #4
 8007e90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007eb6:	7afb      	ldrb	r3, [r7, #11]
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d106      	bne.n	8007ece <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6979      	ldr	r1, [r7, #20]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f008 fa2c 	bl	8010324 <USB_EP0StartXfer>
 8007ecc:	e005      	b.n	8007eda <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6979      	ldr	r1, [r7, #20]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f008 f845 	bl	800ff64 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	f003 020f 	and.w	r2, r3, #15
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007f06:	681b      	ldr	r3, [r3, #0]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	607a      	str	r2, [r7, #4]
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	460b      	mov	r3, r1
 8007f22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f24:	7afb      	ldrb	r3, [r7, #11]
 8007f26:	f003 020f 	and.w	r2, r3, #15
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	3338      	adds	r3, #56	; 0x38
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	3304      	adds	r3, #4
 8007f3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2201      	movs	r2, #1
 8007f52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f54:	7afb      	ldrb	r3, [r7, #11]
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f60:	7afb      	ldrb	r3, [r7, #11]
 8007f62:	f003 030f 	and.w	r3, r3, #15
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d106      	bne.n	8007f78 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6979      	ldr	r1, [r7, #20]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f008 f9d7 	bl	8010324 <USB_EP0StartXfer>
 8007f76:	e005      	b.n	8007f84 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6979      	ldr	r1, [r7, #20]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f007 fff0 	bl	800ff64 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	f003 020f 	and.w	r2, r3, #15
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d901      	bls.n	8007fac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e04e      	b.n	800804a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	da0f      	bge.n	8007fd4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	f003 020f 	and.w	r2, r3, #15
 8007fba:	4613      	mov	r3, r2
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	3338      	adds	r3, #56	; 0x38
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	3304      	adds	r3, #4
 8007fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	705a      	strb	r2, [r3, #1]
 8007fd2:	e00d      	b.n	8007ff0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007fd4:	78fa      	ldrb	r2, [r7, #3]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	00db      	lsls	r3, r3, #3
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	f003 030f 	and.w	r3, r3, #15
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008008:	2b01      	cmp	r3, #1
 800800a:	d101      	bne.n	8008010 <HAL_PCD_EP_SetStall+0x82>
 800800c:	2302      	movs	r3, #2
 800800e:	e01c      	b.n	800804a <HAL_PCD_EP_SetStall+0xbc>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68f9      	ldr	r1, [r7, #12]
 800801e:	4618      	mov	r0, r3
 8008020:	f008 fbde 	bl	80107e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	2b00      	cmp	r3, #0
 800802c:	d108      	bne.n	8008040 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f008 fdd0 	bl	8010be0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	460b      	mov	r3, r1
 800805c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	f003 020f 	and.w	r2, r3, #15
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	429a      	cmp	r2, r3
 800806a:	d901      	bls.n	8008070 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e042      	b.n	80080f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008074:	2b00      	cmp	r3, #0
 8008076:	da0f      	bge.n	8008098 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	f003 020f 	and.w	r2, r3, #15
 800807e:	4613      	mov	r3, r2
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	4413      	add	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	3338      	adds	r3, #56	; 0x38
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	4413      	add	r3, r2
 800808c:	3304      	adds	r3, #4
 800808e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2201      	movs	r2, #1
 8008094:	705a      	strb	r2, [r3, #1]
 8008096:	e00f      	b.n	80080b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008098:	78fb      	ldrb	r3, [r7, #3]
 800809a:	f003 020f 	and.w	r2, r3, #15
 800809e:	4613      	mov	r3, r2
 80080a0:	00db      	lsls	r3, r3, #3
 80080a2:	4413      	add	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	4413      	add	r3, r2
 80080ae:	3304      	adds	r3, #4
 80080b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_PCD_EP_ClrStall+0x86>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e00e      	b.n	80080f6 <HAL_PCD_EP_ClrStall+0xa4>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68f9      	ldr	r1, [r7, #12]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f008 fbe8 	bl	80108bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	460b      	mov	r3, r1
 8008108:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800810a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800810e:	2b00      	cmp	r3, #0
 8008110:	da0c      	bge.n	800812c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008112:	78fb      	ldrb	r3, [r7, #3]
 8008114:	f003 020f 	and.w	r2, r3, #15
 8008118:	4613      	mov	r3, r2
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	3338      	adds	r3, #56	; 0x38
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	4413      	add	r3, r2
 8008126:	3304      	adds	r3, #4
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	e00c      	b.n	8008146 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	f003 020f 	and.w	r2, r3, #15
 8008132:	4613      	mov	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	4413      	add	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	3304      	adds	r3, #4
 8008144:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68f9      	ldr	r1, [r7, #12]
 800814c:	4618      	mov	r0, r3
 800814e:	f008 fa0b 	bl	8010568 <USB_EPStopXfer>
 8008152:	4603      	mov	r3, r0
 8008154:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008156:	7afb      	ldrb	r3, [r7, #11]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	4613      	mov	r3, r2
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	3338      	adds	r3, #56	; 0x38
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	4413      	add	r3, r2
 8008184:	3304      	adds	r3, #4
 8008186:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a1a      	ldr	r2, [r3, #32]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	429a      	cmp	r2, r3
 8008192:	d901      	bls.n	8008198 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e067      	b.n	8008268 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	699a      	ldr	r2, [r3, #24]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	69fa      	ldr	r2, [r7, #28]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d902      	bls.n	80081b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	3303      	adds	r3, #3
 80081b8:	089b      	lsrs	r3, r3, #2
 80081ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081bc:	e026      	b.n	800820c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	69fa      	ldr	r2, [r7, #28]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d902      	bls.n	80081da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	3303      	adds	r3, #3
 80081de:	089b      	lsrs	r3, r3, #2
 80081e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6919      	ldr	r1, [r3, #16]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	6978      	ldr	r0, [r7, #20]
 80081f0:	f008 fa64 	bl	80106bc <USB_WritePacket>

    ep->xfer_buff  += len;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	691a      	ldr	r2, [r3, #16]
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	441a      	add	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a1a      	ldr	r2, [r3, #32]
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	441a      	add	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	b29b      	uxth	r3, r3
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	429a      	cmp	r2, r3
 8008220:	d809      	bhi.n	8008236 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a1a      	ldr	r2, [r3, #32]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800822a:	429a      	cmp	r2, r3
 800822c:	d203      	bcs.n	8008236 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1c3      	bne.n	80081be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	699a      	ldr	r2, [r3, #24]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	429a      	cmp	r2, r3
 8008240:	d811      	bhi.n	8008266 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	f003 030f 	and.w	r3, r3, #15
 8008248:	2201      	movs	r2, #1
 800824a:	fa02 f303 	lsl.w	r3, r2, r3
 800824e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	43db      	mvns	r3, r3
 800825c:	6939      	ldr	r1, [r7, #16]
 800825e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008262:	4013      	ands	r3, r2
 8008264:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3720      	adds	r7, #32
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	333c      	adds	r3, #60	; 0x3c
 8008288:	3304      	adds	r3, #4
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4a19      	ldr	r2, [pc, #100]	; (8008308 <PCD_EP_OutXfrComplete_int+0x98>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d124      	bne.n	80082f0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00a      	beq.n	80082c6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082bc:	461a      	mov	r2, r3
 80082be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082c2:	6093      	str	r3, [r2, #8]
 80082c4:	e01a      	b.n	80082fc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d008      	beq.n	80082e2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082dc:	461a      	mov	r2, r3
 80082de:	2320      	movs	r3, #32
 80082e0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f00d fceb 	bl	8015cc4 <HAL_PCD_DataOutStageCallback>
 80082ee:	e005      	b.n	80082fc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f00d fce4 	bl	8015cc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	4f54310a 	.word	0x4f54310a

0800830c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	333c      	adds	r3, #60	; 0x3c
 8008324:	3304      	adds	r3, #4
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	4413      	add	r3, r2
 8008332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4a0c      	ldr	r2, [pc, #48]	; (8008370 <PCD_EP_OutSetupPacket_int+0x64>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d90e      	bls.n	8008360 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008348:	2b00      	cmp	r3, #0
 800834a:	d009      	beq.n	8008360 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	461a      	mov	r2, r3
 800835a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800835e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f00d fc9d 	bl	8015ca0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	4f54300a 	.word	0x4f54300a

08008374 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
 8008380:	4613      	mov	r3, r2
 8008382:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800838c:	78fb      	ldrb	r3, [r7, #3]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d107      	bne.n	80083a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008392:	883b      	ldrh	r3, [r7, #0]
 8008394:	0419      	lsls	r1, r3, #16
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	430a      	orrs	r2, r1
 800839e:	629a      	str	r2, [r3, #40]	; 0x28
 80083a0:	e028      	b.n	80083f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a8:	0c1b      	lsrs	r3, r3, #16
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4413      	add	r3, r2
 80083ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]
 80083b4:	e00d      	b.n	80083d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	3340      	adds	r3, #64	; 0x40
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	0c1b      	lsrs	r3, r3, #16
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	4413      	add	r3, r2
 80083ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	3301      	adds	r3, #1
 80083d0:	73fb      	strb	r3, [r7, #15]
 80083d2:	7bfa      	ldrb	r2, [r7, #15]
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	429a      	cmp	r2, r3
 80083da:	d3ec      	bcc.n	80083b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80083dc:	883b      	ldrh	r3, [r7, #0]
 80083de:	0418      	lsls	r0, r3, #16
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6819      	ldr	r1, [r3, #0]
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	4302      	orrs	r2, r0
 80083ec:	3340      	adds	r3, #64	; 0x40
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	440b      	add	r3, r1
 80083f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	887a      	ldrh	r2, [r7, #2]
 8008414:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008456:	f043 0303 	orr.w	r3, r3, #3
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008484:	b480      	push	{r7}
 8008486:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008488:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008494:	d102      	bne.n	800849c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800849a:	e00b      	b.n	80084b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800849c:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800849e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084aa:	d102      	bne.n	80084b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80084ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084b0:	e000      	b.n	80084b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80084b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40007000 	.word	0x40007000

080084c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d141      	bne.n	8008556 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80084d2:	4b4b      	ldr	r3, [pc, #300]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80084da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084de:	d131      	bne.n	8008544 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084e0:	4b47      	ldr	r3, [pc, #284]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084e6:	4a46      	ldr	r2, [pc, #280]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80084f0:	4b43      	ldr	r3, [pc, #268]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80084f8:	4a41      	ldr	r2, [pc, #260]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008500:	4b40      	ldr	r3, [pc, #256]	; (8008604 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2232      	movs	r2, #50	; 0x32
 8008506:	fb02 f303 	mul.w	r3, r2, r3
 800850a:	4a3f      	ldr	r2, [pc, #252]	; (8008608 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800850c:	fba2 2303 	umull	r2, r3, r2, r3
 8008510:	0c9b      	lsrs	r3, r3, #18
 8008512:	3301      	adds	r3, #1
 8008514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008516:	e002      	b.n	800851e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3b01      	subs	r3, #1
 800851c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800851e:	4b38      	ldr	r3, [pc, #224]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800852a:	d102      	bne.n	8008532 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1f2      	bne.n	8008518 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008532:	4b33      	ldr	r3, [pc, #204]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800853a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800853e:	d158      	bne.n	80085f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e057      	b.n	80085f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008544:	4b2e      	ldr	r3, [pc, #184]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800854a:	4a2d      	ldr	r2, [pc, #180]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800854c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008550:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008554:	e04d      	b.n	80085f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800855c:	d141      	bne.n	80085e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800855e:	4b28      	ldr	r3, [pc, #160]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800856a:	d131      	bne.n	80085d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800856c:	4b24      	ldr	r3, [pc, #144]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800856e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008572:	4a23      	ldr	r2, [pc, #140]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008578:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800857c:	4b20      	ldr	r3, [pc, #128]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008584:	4a1e      	ldr	r2, [pc, #120]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800858a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800858c:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2232      	movs	r2, #50	; 0x32
 8008592:	fb02 f303 	mul.w	r3, r2, r3
 8008596:	4a1c      	ldr	r2, [pc, #112]	; (8008608 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008598:	fba2 2303 	umull	r2, r3, r2, r3
 800859c:	0c9b      	lsrs	r3, r3, #18
 800859e:	3301      	adds	r3, #1
 80085a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085a2:	e002      	b.n	80085aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085aa:	4b15      	ldr	r3, [pc, #84]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b6:	d102      	bne.n	80085be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1f2      	bne.n	80085a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80085be:	4b10      	ldr	r3, [pc, #64]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ca:	d112      	bne.n	80085f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e011      	b.n	80085f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085d0:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085d6:	4a0a      	ldr	r2, [pc, #40]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80085e0:	e007      	b.n	80085f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80085ea:	4a05      	ldr	r2, [pc, #20]	; (8008600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80085f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	40007000 	.word	0x40007000
 8008604:	20000004 	.word	0x20000004
 8008608:	431bde83 	.word	0x431bde83

0800860c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	4a04      	ldr	r2, [pc, #16]	; (8008628 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800861a:	6053      	str	r3, [r2, #4]
}
 800861c:	bf00      	nop
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	40007000 	.word	0x40007000

0800862c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	f000 bc08 	b.w	8008e50 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008640:	4b96      	ldr	r3, [pc, #600]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f003 030c 	and.w	r3, r3, #12
 8008648:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800864a:	4b94      	ldr	r3, [pc, #592]	; (800889c <HAL_RCC_OscConfig+0x270>)
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0310 	and.w	r3, r3, #16
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 80e4 	beq.w	800882a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <HAL_RCC_OscConfig+0x4c>
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	2b0c      	cmp	r3, #12
 800866c:	f040 808b 	bne.w	8008786 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	2b01      	cmp	r3, #1
 8008674:	f040 8087 	bne.w	8008786 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008678:	4b88      	ldr	r3, [pc, #544]	; (800889c <HAL_RCC_OscConfig+0x270>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <HAL_RCC_OscConfig+0x64>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e3df      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a1a      	ldr	r2, [r3, #32]
 8008694:	4b81      	ldr	r3, [pc, #516]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d004      	beq.n	80086aa <HAL_RCC_OscConfig+0x7e>
 80086a0:	4b7e      	ldr	r3, [pc, #504]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086a8:	e005      	b.n	80086b6 <HAL_RCC_OscConfig+0x8a>
 80086aa:	4b7c      	ldr	r3, [pc, #496]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80086ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086b0:	091b      	lsrs	r3, r3, #4
 80086b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d223      	bcs.n	8008702 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fdf8 	bl	80092b4 <RCC_SetFlashLatencyFromMSIRange>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e3c0      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086ce:	4b73      	ldr	r3, [pc, #460]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a72      	ldr	r2, [pc, #456]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80086d4:	f043 0308 	orr.w	r3, r3, #8
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	4b70      	ldr	r3, [pc, #448]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	496d      	ldr	r1, [pc, #436]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80086e8:	4313      	orrs	r3, r2
 80086ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80086ec:	4b6b      	ldr	r3, [pc, #428]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	021b      	lsls	r3, r3, #8
 80086fa:	4968      	ldr	r1, [pc, #416]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	604b      	str	r3, [r1, #4]
 8008700:	e025      	b.n	800874e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008702:	4b66      	ldr	r3, [pc, #408]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a65      	ldr	r2, [pc, #404]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008708:	f043 0308 	orr.w	r3, r3, #8
 800870c:	6013      	str	r3, [r2, #0]
 800870e:	4b63      	ldr	r3, [pc, #396]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	4960      	ldr	r1, [pc, #384]	; (800889c <HAL_RCC_OscConfig+0x270>)
 800871c:	4313      	orrs	r3, r2
 800871e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008720:	4b5e      	ldr	r3, [pc, #376]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	495b      	ldr	r1, [pc, #364]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008730:	4313      	orrs	r3, r2
 8008732:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d109      	bne.n	800874e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fdb8 	bl	80092b4 <RCC_SetFlashLatencyFromMSIRange>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e380      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800874e:	f000 fcc1 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 8008752:	4602      	mov	r2, r0
 8008754:	4b51      	ldr	r3, [pc, #324]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	091b      	lsrs	r3, r3, #4
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	4950      	ldr	r1, [pc, #320]	; (80088a0 <HAL_RCC_OscConfig+0x274>)
 8008760:	5ccb      	ldrb	r3, [r1, r3]
 8008762:	f003 031f 	and.w	r3, r3, #31
 8008766:	fa22 f303 	lsr.w	r3, r2, r3
 800876a:	4a4e      	ldr	r2, [pc, #312]	; (80088a4 <HAL_RCC_OscConfig+0x278>)
 800876c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800876e:	4b4e      	ldr	r3, [pc, #312]	; (80088a8 <HAL_RCC_OscConfig+0x27c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4618      	mov	r0, r3
 8008774:	f7fc fdf2 	bl	800535c <HAL_InitTick>
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d052      	beq.n	8008828 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	e364      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d032      	beq.n	80087f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800878e:	4b43      	ldr	r3, [pc, #268]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a42      	ldr	r2, [pc, #264]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008794:	f043 0301 	orr.w	r3, r3, #1
 8008798:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800879a:	f7fc fe2f 	bl	80053fc <HAL_GetTick>
 800879e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80087a0:	e008      	b.n	80087b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80087a2:	f7fc fe2b 	bl	80053fc <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d901      	bls.n	80087b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e34d      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80087b4:	4b39      	ldr	r3, [pc, #228]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0302 	and.w	r3, r3, #2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d0f0      	beq.n	80087a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80087c0:	4b36      	ldr	r3, [pc, #216]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a35      	ldr	r2, [pc, #212]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80087c6:	f043 0308 	orr.w	r3, r3, #8
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	4b33      	ldr	r3, [pc, #204]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	4930      	ldr	r1, [pc, #192]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80087de:	4b2f      	ldr	r3, [pc, #188]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	021b      	lsls	r3, r3, #8
 80087ec:	492b      	ldr	r1, [pc, #172]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	604b      	str	r3, [r1, #4]
 80087f2:	e01a      	b.n	800882a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80087f4:	4b29      	ldr	r3, [pc, #164]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a28      	ldr	r2, [pc, #160]	; (800889c <HAL_RCC_OscConfig+0x270>)
 80087fa:	f023 0301 	bic.w	r3, r3, #1
 80087fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008800:	f7fc fdfc 	bl	80053fc <HAL_GetTick>
 8008804:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008808:	f7fc fdf8 	bl	80053fc <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e31a      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800881a:	4b20      	ldr	r3, [pc, #128]	; (800889c <HAL_RCC_OscConfig+0x270>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f0      	bne.n	8008808 <HAL_RCC_OscConfig+0x1dc>
 8008826:	e000      	b.n	800882a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008828:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d073      	beq.n	800891e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	2b08      	cmp	r3, #8
 800883a:	d005      	beq.n	8008848 <HAL_RCC_OscConfig+0x21c>
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	2b0c      	cmp	r3, #12
 8008840:	d10e      	bne.n	8008860 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b03      	cmp	r3, #3
 8008846:	d10b      	bne.n	8008860 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008848:	4b14      	ldr	r3, [pc, #80]	; (800889c <HAL_RCC_OscConfig+0x270>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d063      	beq.n	800891c <HAL_RCC_OscConfig+0x2f0>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d15f      	bne.n	800891c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e2f7      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008868:	d106      	bne.n	8008878 <HAL_RCC_OscConfig+0x24c>
 800886a:	4b0c      	ldr	r3, [pc, #48]	; (800889c <HAL_RCC_OscConfig+0x270>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a0b      	ldr	r2, [pc, #44]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	e025      	b.n	80088c4 <HAL_RCC_OscConfig+0x298>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008880:	d114      	bne.n	80088ac <HAL_RCC_OscConfig+0x280>
 8008882:	4b06      	ldr	r3, [pc, #24]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a05      	ldr	r2, [pc, #20]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	4b03      	ldr	r3, [pc, #12]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a02      	ldr	r2, [pc, #8]	; (800889c <HAL_RCC_OscConfig+0x270>)
 8008894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	e013      	b.n	80088c4 <HAL_RCC_OscConfig+0x298>
 800889c:	40021000 	.word	0x40021000
 80088a0:	08019610 	.word	0x08019610
 80088a4:	20000004 	.word	0x20000004
 80088a8:	20000008 	.word	0x20000008
 80088ac:	4ba0      	ldr	r3, [pc, #640]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a9f      	ldr	r2, [pc, #636]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 80088b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	4b9d      	ldr	r3, [pc, #628]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a9c      	ldr	r2, [pc, #624]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 80088be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d013      	beq.n	80088f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088cc:	f7fc fd96 	bl	80053fc <HAL_GetTick>
 80088d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088d2:	e008      	b.n	80088e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088d4:	f7fc fd92 	bl	80053fc <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b64      	cmp	r3, #100	; 0x64
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e2b4      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088e6:	4b92      	ldr	r3, [pc, #584]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0f0      	beq.n	80088d4 <HAL_RCC_OscConfig+0x2a8>
 80088f2:	e014      	b.n	800891e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f4:	f7fc fd82 	bl	80053fc <HAL_GetTick>
 80088f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80088fa:	e008      	b.n	800890e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088fc:	f7fc fd7e 	bl	80053fc <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b64      	cmp	r3, #100	; 0x64
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e2a0      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800890e:	4b88      	ldr	r3, [pc, #544]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f0      	bne.n	80088fc <HAL_RCC_OscConfig+0x2d0>
 800891a:	e000      	b.n	800891e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800891c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b00      	cmp	r3, #0
 8008928:	d060      	beq.n	80089ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	2b04      	cmp	r3, #4
 800892e:	d005      	beq.n	800893c <HAL_RCC_OscConfig+0x310>
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	2b0c      	cmp	r3, #12
 8008934:	d119      	bne.n	800896a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b02      	cmp	r3, #2
 800893a:	d116      	bne.n	800896a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800893c:	4b7c      	ldr	r3, [pc, #496]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <HAL_RCC_OscConfig+0x328>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e27d      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008954:	4b76      	ldr	r3, [pc, #472]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	061b      	lsls	r3, r3, #24
 8008962:	4973      	ldr	r1, [pc, #460]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008964:	4313      	orrs	r3, r2
 8008966:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008968:	e040      	b.n	80089ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d023      	beq.n	80089ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008972:	4b6f      	ldr	r3, [pc, #444]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a6e      	ldr	r2, [pc, #440]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800897c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800897e:	f7fc fd3d 	bl	80053fc <HAL_GetTick>
 8008982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008984:	e008      	b.n	8008998 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008986:	f7fc fd39 	bl	80053fc <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	2b02      	cmp	r3, #2
 8008992:	d901      	bls.n	8008998 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e25b      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008998:	4b65      	ldr	r3, [pc, #404]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d0f0      	beq.n	8008986 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089a4:	4b62      	ldr	r3, [pc, #392]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	061b      	lsls	r3, r3, #24
 80089b2:	495f      	ldr	r1, [pc, #380]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	604b      	str	r3, [r1, #4]
 80089b8:	e018      	b.n	80089ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089ba:	4b5d      	ldr	r3, [pc, #372]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a5c      	ldr	r2, [pc, #368]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 80089c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c6:	f7fc fd19 	bl	80053fc <HAL_GetTick>
 80089ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80089cc:	e008      	b.n	80089e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089ce:	f7fc fd15 	bl	80053fc <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d901      	bls.n	80089e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e237      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80089e0:	4b53      	ldr	r3, [pc, #332]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1f0      	bne.n	80089ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0308 	and.w	r3, r3, #8
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d03c      	beq.n	8008a72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d01c      	beq.n	8008a3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a00:	4b4b      	ldr	r3, [pc, #300]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a06:	4a4a      	ldr	r2, [pc, #296]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008a08:	f043 0301 	orr.w	r3, r3, #1
 8008a0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a10:	f7fc fcf4 	bl	80053fc <HAL_GetTick>
 8008a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a16:	e008      	b.n	8008a2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a18:	f7fc fcf0 	bl	80053fc <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e212      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a2a:	4b41      	ldr	r3, [pc, #260]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0ef      	beq.n	8008a18 <HAL_RCC_OscConfig+0x3ec>
 8008a38:	e01b      	b.n	8008a72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a3a:	4b3d      	ldr	r3, [pc, #244]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a40:	4a3b      	ldr	r2, [pc, #236]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008a42:	f023 0301 	bic.w	r3, r3, #1
 8008a46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a4a:	f7fc fcd7 	bl	80053fc <HAL_GetTick>
 8008a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a50:	e008      	b.n	8008a64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a52:	f7fc fcd3 	bl	80053fc <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e1f5      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a64:	4b32      	ldr	r3, [pc, #200]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1ef      	bne.n	8008a52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 80a6 	beq.w	8008bcc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a80:	2300      	movs	r3, #0
 8008a82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008a84:	4b2a      	ldr	r3, [pc, #168]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10d      	bne.n	8008aac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a90:	4b27      	ldr	r3, [pc, #156]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a94:	4a26      	ldr	r2, [pc, #152]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8008a9c:	4b24      	ldr	r3, [pc, #144]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aa4:	60bb      	str	r3, [r7, #8]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008aac:	4b21      	ldr	r3, [pc, #132]	; (8008b34 <HAL_RCC_OscConfig+0x508>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d118      	bne.n	8008aea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ab8:	4b1e      	ldr	r3, [pc, #120]	; (8008b34 <HAL_RCC_OscConfig+0x508>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1d      	ldr	r2, [pc, #116]	; (8008b34 <HAL_RCC_OscConfig+0x508>)
 8008abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ac2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ac4:	f7fc fc9a 	bl	80053fc <HAL_GetTick>
 8008ac8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008aca:	e008      	b.n	8008ade <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008acc:	f7fc fc96 	bl	80053fc <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d901      	bls.n	8008ade <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e1b8      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ade:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <HAL_RCC_OscConfig+0x508>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d0f0      	beq.n	8008acc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d108      	bne.n	8008b04 <HAL_RCC_OscConfig+0x4d8>
 8008af2:	4b0f      	ldr	r3, [pc, #60]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af8:	4a0d      	ldr	r2, [pc, #52]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008afa:	f043 0301 	orr.w	r3, r3, #1
 8008afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b02:	e029      	b.n	8008b58 <HAL_RCC_OscConfig+0x52c>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	2b05      	cmp	r3, #5
 8008b0a:	d115      	bne.n	8008b38 <HAL_RCC_OscConfig+0x50c>
 8008b0c:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b12:	4a07      	ldr	r2, [pc, #28]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008b14:	f043 0304 	orr.w	r3, r3, #4
 8008b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b1c:	4b04      	ldr	r3, [pc, #16]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b22:	4a03      	ldr	r2, [pc, #12]	; (8008b30 <HAL_RCC_OscConfig+0x504>)
 8008b24:	f043 0301 	orr.w	r3, r3, #1
 8008b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b2c:	e014      	b.n	8008b58 <HAL_RCC_OscConfig+0x52c>
 8008b2e:	bf00      	nop
 8008b30:	40021000 	.word	0x40021000
 8008b34:	40007000 	.word	0x40007000
 8008b38:	4b9d      	ldr	r3, [pc, #628]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b3e:	4a9c      	ldr	r2, [pc, #624]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008b40:	f023 0301 	bic.w	r3, r3, #1
 8008b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b48:	4b99      	ldr	r3, [pc, #612]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b4e:	4a98      	ldr	r2, [pc, #608]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008b50:	f023 0304 	bic.w	r3, r3, #4
 8008b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d016      	beq.n	8008b8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b60:	f7fc fc4c 	bl	80053fc <HAL_GetTick>
 8008b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b66:	e00a      	b.n	8008b7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b68:	f7fc fc48 	bl	80053fc <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e168      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b7e:	4b8c      	ldr	r3, [pc, #560]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0ed      	beq.n	8008b68 <HAL_RCC_OscConfig+0x53c>
 8008b8c:	e015      	b.n	8008bba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b8e:	f7fc fc35 	bl	80053fc <HAL_GetTick>
 8008b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b94:	e00a      	b.n	8008bac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b96:	f7fc fc31 	bl	80053fc <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d901      	bls.n	8008bac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e151      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008bac:	4b80      	ldr	r3, [pc, #512]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1ed      	bne.n	8008b96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008bba:	7ffb      	ldrb	r3, [r7, #31]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d105      	bne.n	8008bcc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bc0:	4b7b      	ldr	r3, [pc, #492]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc4:	4a7a      	ldr	r2, [pc, #488]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0320 	and.w	r3, r3, #32
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d03c      	beq.n	8008c52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01c      	beq.n	8008c1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008be0:	4b73      	ldr	r3, [pc, #460]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008be6:	4a72      	ldr	r2, [pc, #456]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008be8:	f043 0301 	orr.w	r3, r3, #1
 8008bec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bf0:	f7fc fc04 	bl	80053fc <HAL_GetTick>
 8008bf4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008bf6:	e008      	b.n	8008c0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bf8:	f7fc fc00 	bl	80053fc <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e122      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c0a:	4b69      	ldr	r3, [pc, #420]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0ef      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x5cc>
 8008c18:	e01b      	b.n	8008c52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c1a:	4b65      	ldr	r3, [pc, #404]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c20:	4a63      	ldr	r2, [pc, #396]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008c22:	f023 0301 	bic.w	r3, r3, #1
 8008c26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c2a:	f7fc fbe7 	bl	80053fc <HAL_GetTick>
 8008c2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c30:	e008      	b.n	8008c44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c32:	f7fc fbe3 	bl	80053fc <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d901      	bls.n	8008c44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e105      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c44:	4b5a      	ldr	r3, [pc, #360]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1ef      	bne.n	8008c32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 80f9 	beq.w	8008e4e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	f040 80cf 	bne.w	8008e04 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008c66:	4b52      	ldr	r3, [pc, #328]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f003 0203 	and.w	r2, r3, #3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d12c      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c84:	3b01      	subs	r3, #1
 8008c86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d123      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d11b      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d113      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb6:	085b      	lsrs	r3, r3, #1
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d109      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	085b      	lsrs	r3, r3, #1
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d071      	beq.n	8008db8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	2b0c      	cmp	r3, #12
 8008cd8:	d068      	beq.n	8008dac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008cda:	4b35      	ldr	r3, [pc, #212]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d105      	bne.n	8008cf2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008ce6:	4b32      	ldr	r3, [pc, #200]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e0ac      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008cf6:	4b2e      	ldr	r3, [pc, #184]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a2d      	ldr	r2, [pc, #180]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008cfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008d02:	f7fc fb7b 	bl	80053fc <HAL_GetTick>
 8008d06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d08:	e008      	b.n	8008d1c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d0a:	f7fc fb77 	bl	80053fc <HAL_GetTick>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d901      	bls.n	8008d1c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e099      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d1c:	4b24      	ldr	r3, [pc, #144]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1f0      	bne.n	8008d0a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d28:	4b21      	ldr	r3, [pc, #132]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008d2a:	68da      	ldr	r2, [r3, #12]
 8008d2c:	4b21      	ldr	r3, [pc, #132]	; (8008db4 <HAL_RCC_OscConfig+0x788>)
 8008d2e:	4013      	ands	r3, r2
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d38:	3a01      	subs	r2, #1
 8008d3a:	0112      	lsls	r2, r2, #4
 8008d3c:	4311      	orrs	r1, r2
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d42:	0212      	lsls	r2, r2, #8
 8008d44:	4311      	orrs	r1, r2
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008d4a:	0852      	lsrs	r2, r2, #1
 8008d4c:	3a01      	subs	r2, #1
 8008d4e:	0552      	lsls	r2, r2, #21
 8008d50:	4311      	orrs	r1, r2
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008d56:	0852      	lsrs	r2, r2, #1
 8008d58:	3a01      	subs	r2, #1
 8008d5a:	0652      	lsls	r2, r2, #25
 8008d5c:	4311      	orrs	r1, r2
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d62:	06d2      	lsls	r2, r2, #27
 8008d64:	430a      	orrs	r2, r1
 8008d66:	4912      	ldr	r1, [pc, #72]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008d6c:	4b10      	ldr	r3, [pc, #64]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a0f      	ldr	r2, [pc, #60]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d78:	4b0d      	ldr	r3, [pc, #52]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	4a0c      	ldr	r2, [pc, #48]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008d84:	f7fc fb3a 	bl	80053fc <HAL_GetTick>
 8008d88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d8a:	e008      	b.n	8008d9e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d8c:	f7fc fb36 	bl	80053fc <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d901      	bls.n	8008d9e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e058      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d9e:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <HAL_RCC_OscConfig+0x784>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0f0      	beq.n	8008d8c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008daa:	e050      	b.n	8008e4e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e04f      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
 8008db0:	40021000 	.word	0x40021000
 8008db4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008db8:	4b27      	ldr	r3, [pc, #156]	; (8008e58 <HAL_RCC_OscConfig+0x82c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d144      	bne.n	8008e4e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008dc4:	4b24      	ldr	r3, [pc, #144]	; (8008e58 <HAL_RCC_OscConfig+0x82c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a23      	ldr	r2, [pc, #140]	; (8008e58 <HAL_RCC_OscConfig+0x82c>)
 8008dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008dd0:	4b21      	ldr	r3, [pc, #132]	; (8008e58 <HAL_RCC_OscConfig+0x82c>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	4a20      	ldr	r2, [pc, #128]	; (8008e58 <HAL_RCC_OscConfig+0x82c>)
 8008dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ddc:	f7fc fb0e 	bl	80053fc <HAL_GetTick>
 8008de0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008de2:	e008      	b.n	8008df6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008de4:	f7fc fb0a 	bl	80053fc <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d901      	bls.n	8008df6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e02c      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008df6:	4b18      	ldr	r3, [pc, #96]	; (8008e58 <HAL_RCC_OscConfig+0x82c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0f0      	beq.n	8008de4 <HAL_RCC_OscConfig+0x7b8>
 8008e02:	e024      	b.n	8008e4e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	2b0c      	cmp	r3, #12
 8008e08:	d01f      	beq.n	8008e4a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e0a:	4b13      	ldr	r3, [pc, #76]	; (8008e58 <HAL_RCC_OscConfig+0x82c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a12      	ldr	r2, [pc, #72]	; (8008e58 <HAL_RCC_OscConfig+0x82c>)
 8008e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e16:	f7fc faf1 	bl	80053fc <HAL_GetTick>
 8008e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e1c:	e008      	b.n	8008e30 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e1e:	f7fc faed 	bl	80053fc <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d901      	bls.n	8008e30 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e00f      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e30:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <HAL_RCC_OscConfig+0x82c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1f0      	bne.n	8008e1e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <HAL_RCC_OscConfig+0x82c>)
 8008e3e:	68da      	ldr	r2, [r3, #12]
 8008e40:	4905      	ldr	r1, [pc, #20]	; (8008e58 <HAL_RCC_OscConfig+0x82c>)
 8008e42:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <HAL_RCC_OscConfig+0x830>)
 8008e44:	4013      	ands	r3, r2
 8008e46:	60cb      	str	r3, [r1, #12]
 8008e48:	e001      	b.n	8008e4e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3720      	adds	r7, #32
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	40021000 	.word	0x40021000
 8008e5c:	feeefffc 	.word	0xfeeefffc

08008e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e11d      	b.n	80090b4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e78:	4b90      	ldr	r3, [pc, #576]	; (80090bc <HAL_RCC_ClockConfig+0x25c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 030f 	and.w	r3, r3, #15
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d910      	bls.n	8008ea8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e86:	4b8d      	ldr	r3, [pc, #564]	; (80090bc <HAL_RCC_ClockConfig+0x25c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f023 020f 	bic.w	r2, r3, #15
 8008e8e:	498b      	ldr	r1, [pc, #556]	; (80090bc <HAL_RCC_ClockConfig+0x25c>)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e96:	4b89      	ldr	r3, [pc, #548]	; (80090bc <HAL_RCC_ClockConfig+0x25c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 030f 	and.w	r3, r3, #15
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d001      	beq.n	8008ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e105      	b.n	80090b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d010      	beq.n	8008ed6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	4b81      	ldr	r3, [pc, #516]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d908      	bls.n	8008ed6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ec4:	4b7e      	ldr	r3, [pc, #504]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	497b      	ldr	r1, [pc, #492]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d079      	beq.n	8008fd6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d11e      	bne.n	8008f28 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008eea:	4b75      	ldr	r3, [pc, #468]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e0dc      	b.n	80090b4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008efa:	f000 fa35 	bl	8009368 <RCC_GetSysClockFreqFromPLLSource>
 8008efe:	4603      	mov	r3, r0
 8008f00:	4a70      	ldr	r2, [pc, #448]	; (80090c4 <HAL_RCC_ClockConfig+0x264>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d946      	bls.n	8008f94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008f06:	4b6e      	ldr	r3, [pc, #440]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d140      	bne.n	8008f94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f12:	4b6b      	ldr	r3, [pc, #428]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f1a:	4a69      	ldr	r2, [pc, #420]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008f22:	2380      	movs	r3, #128	; 0x80
 8008f24:	617b      	str	r3, [r7, #20]
 8008f26:	e035      	b.n	8008f94 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d107      	bne.n	8008f40 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f30:	4b63      	ldr	r3, [pc, #396]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d115      	bne.n	8008f68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e0b9      	b.n	80090b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d107      	bne.n	8008f58 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008f48:	4b5d      	ldr	r3, [pc, #372]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d109      	bne.n	8008f68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e0ad      	b.n	80090b4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f58:	4b59      	ldr	r3, [pc, #356]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e0a5      	b.n	80090b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008f68:	f000 f8b4 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4a55      	ldr	r2, [pc, #340]	; (80090c4 <HAL_RCC_ClockConfig+0x264>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d90f      	bls.n	8008f94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008f74:	4b52      	ldr	r3, [pc, #328]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f80:	4b4f      	ldr	r3, [pc, #316]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f88:	4a4d      	ldr	r2, [pc, #308]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008f90:	2380      	movs	r3, #128	; 0x80
 8008f92:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f94:	4b4a      	ldr	r3, [pc, #296]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f023 0203 	bic.w	r2, r3, #3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4947      	ldr	r1, [pc, #284]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fa6:	f7fc fa29 	bl	80053fc <HAL_GetTick>
 8008faa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fac:	e00a      	b.n	8008fc4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fae:	f7fc fa25 	bl	80053fc <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d901      	bls.n	8008fc4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e077      	b.n	80090b4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fc4:	4b3e      	ldr	r3, [pc, #248]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f003 020c 	and.w	r2, r3, #12
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d1eb      	bne.n	8008fae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b80      	cmp	r3, #128	; 0x80
 8008fda:	d105      	bne.n	8008fe8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008fdc:	4b38      	ldr	r3, [pc, #224]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	4a37      	ldr	r2, [pc, #220]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fe6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d010      	beq.n	8009016 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	4b31      	ldr	r3, [pc, #196]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009000:	429a      	cmp	r2, r3
 8009002:	d208      	bcs.n	8009016 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009004:	4b2e      	ldr	r3, [pc, #184]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	492b      	ldr	r1, [pc, #172]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8009012:	4313      	orrs	r3, r2
 8009014:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009016:	4b29      	ldr	r3, [pc, #164]	; (80090bc <HAL_RCC_ClockConfig+0x25c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	d210      	bcs.n	8009046 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009024:	4b25      	ldr	r3, [pc, #148]	; (80090bc <HAL_RCC_ClockConfig+0x25c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f023 020f 	bic.w	r2, r3, #15
 800902c:	4923      	ldr	r1, [pc, #140]	; (80090bc <HAL_RCC_ClockConfig+0x25c>)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	4313      	orrs	r3, r2
 8009032:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009034:	4b21      	ldr	r3, [pc, #132]	; (80090bc <HAL_RCC_ClockConfig+0x25c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 030f 	and.w	r3, r3, #15
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d001      	beq.n	8009046 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e036      	b.n	80090b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	2b00      	cmp	r3, #0
 8009050:	d008      	beq.n	8009064 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009052:	4b1b      	ldr	r3, [pc, #108]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	4918      	ldr	r1, [pc, #96]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8009060:	4313      	orrs	r3, r2
 8009062:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0308 	and.w	r3, r3, #8
 800906c:	2b00      	cmp	r3, #0
 800906e:	d009      	beq.n	8009084 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009070:	4b13      	ldr	r3, [pc, #76]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	00db      	lsls	r3, r3, #3
 800907e:	4910      	ldr	r1, [pc, #64]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 8009080:	4313      	orrs	r3, r2
 8009082:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009084:	f000 f826 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 8009088:	4602      	mov	r2, r0
 800908a:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <HAL_RCC_ClockConfig+0x260>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	091b      	lsrs	r3, r3, #4
 8009090:	f003 030f 	and.w	r3, r3, #15
 8009094:	490c      	ldr	r1, [pc, #48]	; (80090c8 <HAL_RCC_ClockConfig+0x268>)
 8009096:	5ccb      	ldrb	r3, [r1, r3]
 8009098:	f003 031f 	and.w	r3, r3, #31
 800909c:	fa22 f303 	lsr.w	r3, r2, r3
 80090a0:	4a0a      	ldr	r2, [pc, #40]	; (80090cc <HAL_RCC_ClockConfig+0x26c>)
 80090a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80090a4:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <HAL_RCC_ClockConfig+0x270>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fc f957 	bl	800535c <HAL_InitTick>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73fb      	strb	r3, [r7, #15]

  return status;
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	40022000 	.word	0x40022000
 80090c0:	40021000 	.word	0x40021000
 80090c4:	04c4b400 	.word	0x04c4b400
 80090c8:	08019610 	.word	0x08019610
 80090cc:	20000004 	.word	0x20000004
 80090d0:	20000008 	.word	0x20000008

080090d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b089      	sub	sp, #36	; 0x24
 80090d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	61fb      	str	r3, [r7, #28]
 80090de:	2300      	movs	r3, #0
 80090e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090e2:	4b3e      	ldr	r3, [pc, #248]	; (80091dc <HAL_RCC_GetSysClockFreq+0x108>)
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f003 030c 	and.w	r3, r3, #12
 80090ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090ec:	4b3b      	ldr	r3, [pc, #236]	; (80091dc <HAL_RCC_GetSysClockFreq+0x108>)
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f003 0303 	and.w	r3, r3, #3
 80090f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <HAL_RCC_GetSysClockFreq+0x34>
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	2b0c      	cmp	r3, #12
 8009100:	d121      	bne.n	8009146 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d11e      	bne.n	8009146 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009108:	4b34      	ldr	r3, [pc, #208]	; (80091dc <HAL_RCC_GetSysClockFreq+0x108>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0308 	and.w	r3, r3, #8
 8009110:	2b00      	cmp	r3, #0
 8009112:	d107      	bne.n	8009124 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009114:	4b31      	ldr	r3, [pc, #196]	; (80091dc <HAL_RCC_GetSysClockFreq+0x108>)
 8009116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800911a:	0a1b      	lsrs	r3, r3, #8
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	61fb      	str	r3, [r7, #28]
 8009122:	e005      	b.n	8009130 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009124:	4b2d      	ldr	r3, [pc, #180]	; (80091dc <HAL_RCC_GetSysClockFreq+0x108>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	091b      	lsrs	r3, r3, #4
 800912a:	f003 030f 	and.w	r3, r3, #15
 800912e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009130:	4a2b      	ldr	r2, [pc, #172]	; (80091e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009138:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10d      	bne.n	800915c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009144:	e00a      	b.n	800915c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	2b04      	cmp	r3, #4
 800914a:	d102      	bne.n	8009152 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800914c:	4b25      	ldr	r3, [pc, #148]	; (80091e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800914e:	61bb      	str	r3, [r7, #24]
 8009150:	e004      	b.n	800915c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b08      	cmp	r3, #8
 8009156:	d101      	bne.n	800915c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009158:	4b23      	ldr	r3, [pc, #140]	; (80091e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800915a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	2b0c      	cmp	r3, #12
 8009160:	d134      	bne.n	80091cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009162:	4b1e      	ldr	r3, [pc, #120]	; (80091dc <HAL_RCC_GetSysClockFreq+0x108>)
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2b02      	cmp	r3, #2
 8009170:	d003      	beq.n	800917a <HAL_RCC_GetSysClockFreq+0xa6>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b03      	cmp	r3, #3
 8009176:	d003      	beq.n	8009180 <HAL_RCC_GetSysClockFreq+0xac>
 8009178:	e005      	b.n	8009186 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800917a:	4b1a      	ldr	r3, [pc, #104]	; (80091e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800917c:	617b      	str	r3, [r7, #20]
      break;
 800917e:	e005      	b.n	800918c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009180:	4b19      	ldr	r3, [pc, #100]	; (80091e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8009182:	617b      	str	r3, [r7, #20]
      break;
 8009184:	e002      	b.n	800918c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	617b      	str	r3, [r7, #20]
      break;
 800918a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800918c:	4b13      	ldr	r3, [pc, #76]	; (80091dc <HAL_RCC_GetSysClockFreq+0x108>)
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	091b      	lsrs	r3, r3, #4
 8009192:	f003 030f 	and.w	r3, r3, #15
 8009196:	3301      	adds	r3, #1
 8009198:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800919a:	4b10      	ldr	r3, [pc, #64]	; (80091dc <HAL_RCC_GetSysClockFreq+0x108>)
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	0a1b      	lsrs	r3, r3, #8
 80091a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	fb03 f202 	mul.w	r2, r3, r2
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80091b2:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <HAL_RCC_GetSysClockFreq+0x108>)
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	0e5b      	lsrs	r3, r3, #25
 80091b8:	f003 0303 	and.w	r3, r3, #3
 80091bc:	3301      	adds	r3, #1
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80091cc:	69bb      	ldr	r3, [r7, #24]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3724      	adds	r7, #36	; 0x24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	40021000 	.word	0x40021000
 80091e0:	08019628 	.word	0x08019628
 80091e4:	00f42400 	.word	0x00f42400
 80091e8:	007a1200 	.word	0x007a1200

080091ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091f0:	4b03      	ldr	r3, [pc, #12]	; (8009200 <HAL_RCC_GetHCLKFreq+0x14>)
 80091f2:	681b      	ldr	r3, [r3, #0]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	20000004 	.word	0x20000004

08009204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009208:	f7ff fff0 	bl	80091ec <HAL_RCC_GetHCLKFreq>
 800920c:	4602      	mov	r2, r0
 800920e:	4b06      	ldr	r3, [pc, #24]	; (8009228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	0a1b      	lsrs	r3, r3, #8
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	4904      	ldr	r1, [pc, #16]	; (800922c <HAL_RCC_GetPCLK1Freq+0x28>)
 800921a:	5ccb      	ldrb	r3, [r1, r3]
 800921c:	f003 031f 	and.w	r3, r3, #31
 8009220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009224:	4618      	mov	r0, r3
 8009226:	bd80      	pop	{r7, pc}
 8009228:	40021000 	.word	0x40021000
 800922c:	08019620 	.word	0x08019620

08009230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009234:	f7ff ffda 	bl	80091ec <HAL_RCC_GetHCLKFreq>
 8009238:	4602      	mov	r2, r0
 800923a:	4b06      	ldr	r3, [pc, #24]	; (8009254 <HAL_RCC_GetPCLK2Freq+0x24>)
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	0adb      	lsrs	r3, r3, #11
 8009240:	f003 0307 	and.w	r3, r3, #7
 8009244:	4904      	ldr	r1, [pc, #16]	; (8009258 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009246:	5ccb      	ldrb	r3, [r1, r3]
 8009248:	f003 031f 	and.w	r3, r3, #31
 800924c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009250:	4618      	mov	r0, r3
 8009252:	bd80      	pop	{r7, pc}
 8009254:	40021000 	.word	0x40021000
 8009258:	08019620 	.word	0x08019620

0800925c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800925c:	b480      	push	{r7}
 800925e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8009260:	4b05      	ldr	r3, [pc, #20]	; (8009278 <HAL_RCC_EnableCSS+0x1c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a04      	ldr	r2, [pc, #16]	; (8009278 <HAL_RCC_EnableCSS+0x1c>)
 8009266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800926a:	6013      	str	r3, [r2, #0]
}
 800926c:	bf00      	nop
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	40021000 	.word	0x40021000

0800927c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009280:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800928c:	d105      	bne.n	800929a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800928e:	f000 f809 	bl	80092a4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009292:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009298:	621a      	str	r2, [r3, #32]
  }
}
 800929a:	bf00      	nop
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	40021000 	.word	0x40021000

080092a4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80092a4:	b480      	push	{r7}
 80092a6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80092a8:	bf00      	nop
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
	...

080092b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80092bc:	2300      	movs	r3, #0
 80092be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80092c0:	4b27      	ldr	r3, [pc, #156]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80092cc:	f7ff f8da 	bl	8008484 <HAL_PWREx_GetVoltageRange>
 80092d0:	6178      	str	r0, [r7, #20]
 80092d2:	e014      	b.n	80092fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80092d4:	4b22      	ldr	r3, [pc, #136]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d8:	4a21      	ldr	r2, [pc, #132]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092de:	6593      	str	r3, [r2, #88]	; 0x58
 80092e0:	4b1f      	ldr	r3, [pc, #124]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80092ec:	f7ff f8ca 	bl	8008484 <HAL_PWREx_GetVoltageRange>
 80092f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80092f2:	4b1b      	ldr	r3, [pc, #108]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f6:	4a1a      	ldr	r2, [pc, #104]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009304:	d10b      	bne.n	800931e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b80      	cmp	r3, #128	; 0x80
 800930a:	d913      	bls.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2ba0      	cmp	r3, #160	; 0xa0
 8009310:	d902      	bls.n	8009318 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009312:	2302      	movs	r3, #2
 8009314:	613b      	str	r3, [r7, #16]
 8009316:	e00d      	b.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009318:	2301      	movs	r3, #1
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	e00a      	b.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b7f      	cmp	r3, #127	; 0x7f
 8009322:	d902      	bls.n	800932a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009324:	2302      	movs	r3, #2
 8009326:	613b      	str	r3, [r7, #16]
 8009328:	e004      	b.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b70      	cmp	r3, #112	; 0x70
 800932e:	d101      	bne.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009330:	2301      	movs	r3, #1
 8009332:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009334:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f023 020f 	bic.w	r2, r3, #15
 800933c:	4909      	ldr	r1, [pc, #36]	; (8009364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	4313      	orrs	r3, r2
 8009342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009344:	4b07      	ldr	r3, [pc, #28]	; (8009364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 030f 	and.w	r3, r3, #15
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	429a      	cmp	r2, r3
 8009350:	d001      	beq.n	8009356 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	40021000 	.word	0x40021000
 8009364:	40022000 	.word	0x40022000

08009368 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800936e:	4b2d      	ldr	r3, [pc, #180]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b03      	cmp	r3, #3
 800937c:	d00b      	beq.n	8009396 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b03      	cmp	r3, #3
 8009382:	d825      	bhi.n	80093d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d008      	beq.n	800939c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d11f      	bne.n	80093d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009390:	4b25      	ldr	r3, [pc, #148]	; (8009428 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009392:	613b      	str	r3, [r7, #16]
    break;
 8009394:	e01f      	b.n	80093d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8009396:	4b25      	ldr	r3, [pc, #148]	; (800942c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009398:	613b      	str	r3, [r7, #16]
    break;
 800939a:	e01c      	b.n	80093d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800939c:	4b21      	ldr	r3, [pc, #132]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d107      	bne.n	80093b8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80093a8:	4b1e      	ldr	r3, [pc, #120]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80093aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093ae:	0a1b      	lsrs	r3, r3, #8
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	e005      	b.n	80093c4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80093b8:	4b1a      	ldr	r3, [pc, #104]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	091b      	lsrs	r3, r3, #4
 80093be:	f003 030f 	and.w	r3, r3, #15
 80093c2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80093c4:	4a1a      	ldr	r2, [pc, #104]	; (8009430 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093cc:	613b      	str	r3, [r7, #16]
    break;
 80093ce:	e002      	b.n	80093d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	613b      	str	r3, [r7, #16]
    break;
 80093d4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80093d6:	4b13      	ldr	r3, [pc, #76]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	091b      	lsrs	r3, r3, #4
 80093dc:	f003 030f 	and.w	r3, r3, #15
 80093e0:	3301      	adds	r3, #1
 80093e2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80093e4:	4b0f      	ldr	r3, [pc, #60]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	0a1b      	lsrs	r3, r3, #8
 80093ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	fb03 f202 	mul.w	r2, r3, r2
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80093fc:	4b09      	ldr	r3, [pc, #36]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	0e5b      	lsrs	r3, r3, #25
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	3301      	adds	r3, #1
 8009408:	005b      	lsls	r3, r3, #1
 800940a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	fbb2 f3f3 	udiv	r3, r2, r3
 8009414:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009416:	683b      	ldr	r3, [r7, #0]
}
 8009418:	4618      	mov	r0, r3
 800941a:	371c      	adds	r7, #28
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	40021000 	.word	0x40021000
 8009428:	00f42400 	.word	0x00f42400
 800942c:	007a1200 	.word	0x007a1200
 8009430:	08019628 	.word	0x08019628

08009434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800943c:	2300      	movs	r3, #0
 800943e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009440:	2300      	movs	r3, #0
 8009442:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800944c:	2b00      	cmp	r3, #0
 800944e:	d040      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009454:	2b80      	cmp	r3, #128	; 0x80
 8009456:	d02a      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009458:	2b80      	cmp	r3, #128	; 0x80
 800945a:	d825      	bhi.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800945c:	2b60      	cmp	r3, #96	; 0x60
 800945e:	d026      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009460:	2b60      	cmp	r3, #96	; 0x60
 8009462:	d821      	bhi.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d006      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009468:	2b40      	cmp	r3, #64	; 0x40
 800946a:	d81d      	bhi.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800946c:	2b00      	cmp	r3, #0
 800946e:	d009      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009470:	2b20      	cmp	r3, #32
 8009472:	d010      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009474:	e018      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009476:	4b89      	ldr	r3, [pc, #548]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	4a88      	ldr	r2, [pc, #544]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800947c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009480:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009482:	e015      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3304      	adds	r3, #4
 8009488:	2100      	movs	r1, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f001 fa24 	bl	800a8d8 <RCCEx_PLLSAI1_Config>
 8009490:	4603      	mov	r3, r0
 8009492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009494:	e00c      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	3320      	adds	r3, #32
 800949a:	2100      	movs	r1, #0
 800949c:	4618      	mov	r0, r3
 800949e:	f001 fb0f 	bl	800aac0 <RCCEx_PLLSAI2_Config>
 80094a2:	4603      	mov	r3, r0
 80094a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80094a6:	e003      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	74fb      	strb	r3, [r7, #19]
      break;
 80094ac:	e000      	b.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80094ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094b0:	7cfb      	ldrb	r3, [r7, #19]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10b      	bne.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094b6:	4b79      	ldr	r3, [pc, #484]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80094b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094bc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c4:	4975      	ldr	r1, [pc, #468]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80094cc:	e001      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ce:	7cfb      	ldrb	r3, [r7, #19]
 80094d0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d047      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094e6:	d030      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80094e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ec:	d82a      	bhi.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80094ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094f2:	d02a      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80094f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094f8:	d824      	bhi.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80094fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094fe:	d008      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009504:	d81e      	bhi.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800950a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950e:	d010      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009510:	e018      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009512:	4b62      	ldr	r3, [pc, #392]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	4a61      	ldr	r2, [pc, #388]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800951c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800951e:	e015      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3304      	adds	r3, #4
 8009524:	2100      	movs	r1, #0
 8009526:	4618      	mov	r0, r3
 8009528:	f001 f9d6 	bl	800a8d8 <RCCEx_PLLSAI1_Config>
 800952c:	4603      	mov	r3, r0
 800952e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009530:	e00c      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	3320      	adds	r3, #32
 8009536:	2100      	movs	r1, #0
 8009538:	4618      	mov	r0, r3
 800953a:	f001 fac1 	bl	800aac0 <RCCEx_PLLSAI2_Config>
 800953e:	4603      	mov	r3, r0
 8009540:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009542:	e003      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	74fb      	strb	r3, [r7, #19]
      break;
 8009548:	e000      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800954a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800954c:	7cfb      	ldrb	r3, [r7, #19]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10b      	bne.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009552:	4b52      	ldr	r3, [pc, #328]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009560:	494e      	ldr	r1, [pc, #312]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009562:	4313      	orrs	r3, r2
 8009564:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009568:	e001      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800956a:	7cfb      	ldrb	r3, [r7, #19]
 800956c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 809f 	beq.w	80096ba <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800957c:	2300      	movs	r3, #0
 800957e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009580:	4b46      	ldr	r3, [pc, #280]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800958c:	2301      	movs	r3, #1
 800958e:	e000      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009590:	2300      	movs	r3, #0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00d      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009596:	4b41      	ldr	r3, [pc, #260]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800959a:	4a40      	ldr	r2, [pc, #256]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800959c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095a0:	6593      	str	r3, [r2, #88]	; 0x58
 80095a2:	4b3e      	ldr	r3, [pc, #248]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80095a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095aa:	60bb      	str	r3, [r7, #8]
 80095ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095ae:	2301      	movs	r3, #1
 80095b0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095b2:	4b3b      	ldr	r3, [pc, #236]	; (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a3a      	ldr	r2, [pc, #232]	; (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80095b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095be:	f7fb ff1d 	bl	80053fc <HAL_GetTick>
 80095c2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80095c4:	e009      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095c6:	f7fb ff19 	bl	80053fc <HAL_GetTick>
 80095ca:	4602      	mov	r2, r0
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d902      	bls.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	74fb      	strb	r3, [r7, #19]
        break;
 80095d8:	e005      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80095da:	4b31      	ldr	r3, [pc, #196]	; (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0ef      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80095e6:	7cfb      	ldrb	r3, [r7, #19]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d15b      	bne.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80095ec:	4b2b      	ldr	r3, [pc, #172]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80095ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095f6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d01f      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	429a      	cmp	r2, r3
 8009608:	d019      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800960a:	4b24      	ldr	r3, [pc, #144]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800960c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009614:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009616:	4b21      	ldr	r3, [pc, #132]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800961c:	4a1f      	ldr	r2, [pc, #124]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800961e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009626:	4b1d      	ldr	r3, [pc, #116]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800962c:	4a1b      	ldr	r2, [pc, #108]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800962e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009636:	4a19      	ldr	r2, [pc, #100]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	2b00      	cmp	r3, #0
 8009646:	d016      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009648:	f7fb fed8 	bl	80053fc <HAL_GetTick>
 800964c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800964e:	e00b      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009650:	f7fb fed4 	bl	80053fc <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	f241 3288 	movw	r2, #5000	; 0x1388
 800965e:	4293      	cmp	r3, r2
 8009660:	d902      	bls.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	74fb      	strb	r3, [r7, #19]
            break;
 8009666:	e006      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009668:	4b0c      	ldr	r3, [pc, #48]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800966a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0ec      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8009676:	7cfb      	ldrb	r3, [r7, #19]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10c      	bne.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800967c:	4b07      	ldr	r3, [pc, #28]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800967e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009682:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800968c:	4903      	ldr	r1, [pc, #12]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800968e:	4313      	orrs	r3, r2
 8009690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009694:	e008      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009696:	7cfb      	ldrb	r3, [r7, #19]
 8009698:	74bb      	strb	r3, [r7, #18]
 800969a:	e005      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800969c:	40021000 	.word	0x40021000
 80096a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a4:	7cfb      	ldrb	r3, [r7, #19]
 80096a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096a8:	7c7b      	ldrb	r3, [r7, #17]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d105      	bne.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096ae:	4ba0      	ldr	r3, [pc, #640]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b2:	4a9f      	ldr	r2, [pc, #636]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00a      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096c6:	4b9a      	ldr	r3, [pc, #616]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096cc:	f023 0203 	bic.w	r2, r3, #3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d4:	4996      	ldr	r1, [pc, #600]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00a      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096e8:	4b91      	ldr	r3, [pc, #580]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ee:	f023 020c 	bic.w	r2, r3, #12
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f6:	498e      	ldr	r1, [pc, #568]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0304 	and.w	r3, r3, #4
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800970a:	4b89      	ldr	r3, [pc, #548]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800970c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009710:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009718:	4985      	ldr	r1, [pc, #532]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800971a:	4313      	orrs	r3, r2
 800971c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0308 	and.w	r3, r3, #8
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00a      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800972c:	4b80      	ldr	r3, [pc, #512]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800972e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009732:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800973a:	497d      	ldr	r1, [pc, #500]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800973c:	4313      	orrs	r3, r2
 800973e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0310 	and.w	r3, r3, #16
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00a      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800974e:	4b78      	ldr	r3, [pc, #480]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800975c:	4974      	ldr	r1, [pc, #464]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800975e:	4313      	orrs	r3, r2
 8009760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0320 	and.w	r3, r3, #32
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00a      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009770:	4b6f      	ldr	r3, [pc, #444]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977e:	496c      	ldr	r1, [pc, #432]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009780:	4313      	orrs	r3, r2
 8009782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00a      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009792:	4b67      	ldr	r3, [pc, #412]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009798:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097a0:	4963      	ldr	r1, [pc, #396]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00a      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097b4:	4b5e      	ldr	r3, [pc, #376]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097c2:	495b      	ldr	r1, [pc, #364]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00a      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80097d6:	4b56      	ldr	r3, [pc, #344]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e4:	4952      	ldr	r1, [pc, #328]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00a      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80097f8:	4b4d      	ldr	r3, [pc, #308]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009806:	494a      	ldr	r1, [pc, #296]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009808:	4313      	orrs	r3, r2
 800980a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00a      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800981a:	4b45      	ldr	r3, [pc, #276]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800981c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009828:	4941      	ldr	r1, [pc, #260]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800982a:	4313      	orrs	r3, r2
 800982c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00a      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800983c:	4b3c      	ldr	r3, [pc, #240]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800983e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009842:	f023 0203 	bic.w	r2, r3, #3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800984a:	4939      	ldr	r1, [pc, #228]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800984c:	4313      	orrs	r3, r2
 800984e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d028      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800985e:	4b34      	ldr	r3, [pc, #208]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009864:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800986c:	4930      	ldr	r1, [pc, #192]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800986e:	4313      	orrs	r3, r2
 8009870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800987c:	d106      	bne.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800987e:	4b2c      	ldr	r3, [pc, #176]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	4a2b      	ldr	r2, [pc, #172]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009888:	60d3      	str	r3, [r2, #12]
 800988a:	e011      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009894:	d10c      	bne.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3304      	adds	r3, #4
 800989a:	2101      	movs	r1, #1
 800989c:	4618      	mov	r0, r3
 800989e:	f001 f81b 	bl	800a8d8 <RCCEx_PLLSAI1_Config>
 80098a2:	4603      	mov	r3, r0
 80098a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80098a6:	7cfb      	ldrb	r3, [r7, #19]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80098ac:	7cfb      	ldrb	r3, [r7, #19]
 80098ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d04d      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098c4:	d108      	bne.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80098c6:	4b1a      	ldr	r3, [pc, #104]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098cc:	4a18      	ldr	r2, [pc, #96]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80098d6:	e012      	b.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80098d8:	4b15      	ldr	r3, [pc, #84]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098de:	4a14      	ldr	r2, [pc, #80]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098e4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80098e8:	4b11      	ldr	r3, [pc, #68]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098f6:	490e      	ldr	r1, [pc, #56]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009906:	d106      	bne.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009908:	4b09      	ldr	r3, [pc, #36]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	4a08      	ldr	r2, [pc, #32]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800990e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009912:	60d3      	str	r3, [r2, #12]
 8009914:	e020      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800991a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800991e:	d109      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009920:	4b03      	ldr	r3, [pc, #12]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	4a02      	ldr	r2, [pc, #8]	; (8009930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800992a:	60d3      	str	r3, [r2, #12]
 800992c:	e014      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800992e:	bf00      	nop
 8009930:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800993c:	d10c      	bne.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3304      	adds	r3, #4
 8009942:	2101      	movs	r1, #1
 8009944:	4618      	mov	r0, r3
 8009946:	f000 ffc7 	bl	800a8d8 <RCCEx_PLLSAI1_Config>
 800994a:	4603      	mov	r3, r0
 800994c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800994e:	7cfb      	ldrb	r3, [r7, #19]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009954:	7cfb      	ldrb	r3, [r7, #19]
 8009956:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d028      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009964:	4b4a      	ldr	r3, [pc, #296]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800996a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009972:	4947      	ldr	r1, [pc, #284]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009974:	4313      	orrs	r3, r2
 8009976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800997e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009982:	d106      	bne.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009984:	4b42      	ldr	r3, [pc, #264]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	4a41      	ldr	r2, [pc, #260]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800998a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800998e:	60d3      	str	r3, [r2, #12]
 8009990:	e011      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800999a:	d10c      	bne.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3304      	adds	r3, #4
 80099a0:	2101      	movs	r1, #1
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 ff98 	bl	800a8d8 <RCCEx_PLLSAI1_Config>
 80099a8:	4603      	mov	r3, r0
 80099aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80099ac:	7cfb      	ldrb	r3, [r7, #19]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80099b2:	7cfb      	ldrb	r3, [r7, #19]
 80099b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d01e      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099c2:	4b33      	ldr	r3, [pc, #204]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099d2:	492f      	ldr	r1, [pc, #188]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099e4:	d10c      	bne.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3304      	adds	r3, #4
 80099ea:	2102      	movs	r1, #2
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 ff73 	bl	800a8d8 <RCCEx_PLLSAI1_Config>
 80099f2:	4603      	mov	r3, r0
 80099f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80099f6:	7cfb      	ldrb	r3, [r7, #19]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80099fc:	7cfb      	ldrb	r3, [r7, #19]
 80099fe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00b      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a0c:	4b20      	ldr	r3, [pc, #128]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a12:	f023 0204 	bic.w	r2, r3, #4
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a1c:	491c      	ldr	r1, [pc, #112]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00b      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009a30:	4b17      	ldr	r3, [pc, #92]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a36:	f023 0218 	bic.w	r2, r3, #24
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a40:	4913      	ldr	r1, [pc, #76]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d017      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009a54:	4b0e      	ldr	r3, [pc, #56]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a64:	490a      	ldr	r1, [pc, #40]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a76:	d105      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a78:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	4a04      	ldr	r2, [pc, #16]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009a84:	7cbb      	ldrb	r3, [r7, #18]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	40021000 	.word	0x40021000

08009a94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aa6:	d13e      	bne.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009aa8:	4bb6      	ldr	r3, [pc, #728]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ab2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aba:	d028      	beq.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ac2:	f200 86f4 	bhi.w	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009acc:	d005      	beq.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad4:	d00e      	beq.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8009ad6:	f000 beea 	b.w	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009ada:	4baa      	ldr	r3, [pc, #680]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae0:	f003 0302 	and.w	r3, r3, #2
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	f040 86e4 	bne.w	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8009aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aee:	61fb      	str	r3, [r7, #28]
      break;
 8009af0:	f000 bedf 	b.w	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009af4:	4ba3      	ldr	r3, [pc, #652]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	f040 86d9 	bne.w	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8009b04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009b08:	61fb      	str	r3, [r7, #28]
      break;
 8009b0a:	f000 bed4 	b.w	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b0e:	4b9d      	ldr	r3, [pc, #628]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b1a:	f040 86ce 	bne.w	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8009b1e:	4b9a      	ldr	r3, [pc, #616]	; (8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8009b20:	61fb      	str	r3, [r7, #28]
      break;
 8009b22:	f000 beca 	b.w	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b26:	4b97      	ldr	r3, [pc, #604]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d036      	beq.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2b03      	cmp	r3, #3
 8009b3a:	d840      	bhi.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d003      	beq.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d020      	beq.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8009b48:	e039      	b.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009b4a:	4b8e      	ldr	r3, [pc, #568]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0302 	and.w	r3, r3, #2
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d116      	bne.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009b56:	4b8b      	ldr	r3, [pc, #556]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0308 	and.w	r3, r3, #8
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d005      	beq.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8009b62:	4b88      	ldr	r3, [pc, #544]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	091b      	lsrs	r3, r3, #4
 8009b68:	f003 030f 	and.w	r3, r3, #15
 8009b6c:	e005      	b.n	8009b7a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8009b6e:	4b85      	ldr	r3, [pc, #532]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	4a84      	ldr	r2, [pc, #528]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009b82:	e01f      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	61bb      	str	r3, [r7, #24]
      break;
 8009b88:	e01c      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b8a:	4b7e      	ldr	r3, [pc, #504]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b96:	d102      	bne.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8009b98:	4b7d      	ldr	r3, [pc, #500]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009b9a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009b9c:	e012      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	61bb      	str	r3, [r7, #24]
      break;
 8009ba2:	e00f      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ba4:	4b77      	ldr	r3, [pc, #476]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bb0:	d102      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8009bb2:	4b78      	ldr	r3, [pc, #480]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8009bb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009bb6:	e005      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	61bb      	str	r3, [r7, #24]
      break;
 8009bbc:	e002      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	61bb      	str	r3, [r7, #24]
      break;
 8009bc2:	bf00      	nop
    }

    switch(PeriphClk)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bca:	f000 8606 	beq.w	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bd4:	f200 8673 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bde:	f000 8469 	beq.w	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009be8:	f200 8669 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bf2:	f000 8531 	beq.w	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bfc:	f200 865f 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c06:	f000 8187 	beq.w	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c10:	f200 8655 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c1a:	f000 80cd 	beq.w	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c24:	f200 864b 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c2e:	f000 8430 	beq.w	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c38:	f200 8641 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c42:	f000 83e4 	beq.w	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c4c:	f200 8637 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c56:	f000 80af 	beq.w	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c60:	f200 862d 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c6a:	f000 809d 	beq.w	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c74:	f200 8623 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c7e:	f000 808b 	beq.w	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c88:	f200 8619 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c92:	f000 8554 	beq.w	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c9c:	f200 860f 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ca6:	f000 8500 	beq.w	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cb0:	f200 8605 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cba:	f000 84a1 	beq.w	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc4:	f200 85fb 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b80      	cmp	r3, #128	; 0x80
 8009ccc:	f000 846c 	beq.w	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b80      	cmp	r3, #128	; 0x80
 8009cd4:	f200 85f3 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	d84c      	bhi.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 85ec 	beq.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	2b1f      	cmp	r3, #31
 8009cec:	f200 85e7 	bhi.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009cf0:	a201      	add	r2, pc, #4	; (adr r2, 8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf6:	bf00      	nop
 8009cf8:	0800a10d 	.word	0x0800a10d
 8009cfc:	0800a17b 	.word	0x0800a17b
 8009d00:	0800a8bf 	.word	0x0800a8bf
 8009d04:	0800a20f 	.word	0x0800a20f
 8009d08:	0800a8bf 	.word	0x0800a8bf
 8009d0c:	0800a8bf 	.word	0x0800a8bf
 8009d10:	0800a8bf 	.word	0x0800a8bf
 8009d14:	0800a287 	.word	0x0800a287
 8009d18:	0800a8bf 	.word	0x0800a8bf
 8009d1c:	0800a8bf 	.word	0x0800a8bf
 8009d20:	0800a8bf 	.word	0x0800a8bf
 8009d24:	0800a8bf 	.word	0x0800a8bf
 8009d28:	0800a8bf 	.word	0x0800a8bf
 8009d2c:	0800a8bf 	.word	0x0800a8bf
 8009d30:	0800a8bf 	.word	0x0800a8bf
 8009d34:	0800a30b 	.word	0x0800a30b
 8009d38:	0800a8bf 	.word	0x0800a8bf
 8009d3c:	0800a8bf 	.word	0x0800a8bf
 8009d40:	0800a8bf 	.word	0x0800a8bf
 8009d44:	0800a8bf 	.word	0x0800a8bf
 8009d48:	0800a8bf 	.word	0x0800a8bf
 8009d4c:	0800a8bf 	.word	0x0800a8bf
 8009d50:	0800a8bf 	.word	0x0800a8bf
 8009d54:	0800a8bf 	.word	0x0800a8bf
 8009d58:	0800a8bf 	.word	0x0800a8bf
 8009d5c:	0800a8bf 	.word	0x0800a8bf
 8009d60:	0800a8bf 	.word	0x0800a8bf
 8009d64:	0800a8bf 	.word	0x0800a8bf
 8009d68:	0800a8bf 	.word	0x0800a8bf
 8009d6c:	0800a8bf 	.word	0x0800a8bf
 8009d70:	0800a8bf 	.word	0x0800a8bf
 8009d74:	0800a38d 	.word	0x0800a38d
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b40      	cmp	r3, #64	; 0x40
 8009d7c:	f000 83e8 	beq.w	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8009d80:	f000 bd9d 	b.w	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009d84:	40021000 	.word	0x40021000
 8009d88:	0003d090 	.word	0x0003d090
 8009d8c:	08019628 	.word	0x08019628
 8009d90:	00f42400 	.word	0x00f42400
 8009d94:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009d98:	69b9      	ldr	r1, [r7, #24]
 8009d9a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009d9e:	f000 ff83 	bl	800aca8 <RCCEx_GetSAIxPeriphCLKFreq>
 8009da2:	61f8      	str	r0, [r7, #28]
      break;
 8009da4:	f000 bd8e 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8009da8:	69b9      	ldr	r1, [r7, #24]
 8009daa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009dae:	f000 ff7b 	bl	800aca8 <RCCEx_GetSAIxPeriphCLKFreq>
 8009db2:	61f8      	str	r0, [r7, #28]
      break;
 8009db4:	f000 bd86 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009db8:	4b9a      	ldr	r3, [pc, #616]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dbe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009dca:	d015      	beq.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009dd2:	f200 8092 	bhi.w	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ddc:	d029      	beq.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009de4:	f200 8089 	bhi.w	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d07b      	beq.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009df4:	d04a      	beq.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8009df6:	e080      	b.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009df8:	4b8a      	ldr	r3, [pc, #552]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0302 	and.w	r3, r3, #2
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d17d      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009e04:	4b87      	ldr	r3, [pc, #540]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0308 	and.w	r3, r3, #8
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d005      	beq.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8009e10:	4b84      	ldr	r3, [pc, #528]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	091b      	lsrs	r3, r3, #4
 8009e16:	f003 030f 	and.w	r3, r3, #15
 8009e1a:	e005      	b.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8009e1c:	4b81      	ldr	r3, [pc, #516]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e22:	0a1b      	lsrs	r3, r3, #8
 8009e24:	f003 030f 	and.w	r3, r3, #15
 8009e28:	4a7f      	ldr	r2, [pc, #508]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e2e:	61fb      	str	r3, [r7, #28]
          break;
 8009e30:	e066      	b.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009e32:	4b7c      	ldr	r3, [pc, #496]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e3e:	d162      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009e40:	4b78      	ldr	r3, [pc, #480]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e4c:	d15b      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009e4e:	4b75      	ldr	r3, [pc, #468]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	0a1b      	lsrs	r3, r3, #8
 8009e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e58:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	fb03 f202 	mul.w	r2, r3, r2
 8009e62:	4b70      	ldr	r3, [pc, #448]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	091b      	lsrs	r3, r3, #4
 8009e68:	f003 030f 	and.w	r3, r3, #15
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e72:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009e74:	4b6b      	ldr	r3, [pc, #428]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	0d5b      	lsrs	r3, r3, #21
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	3301      	adds	r3, #1
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	69ba      	ldr	r2, [r7, #24]
 8009e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e88:	61fb      	str	r3, [r7, #28]
          break;
 8009e8a:	e03c      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8009e8c:	4b65      	ldr	r3, [pc, #404]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e98:	d138      	bne.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8009e9a:	4b62      	ldr	r3, [pc, #392]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ea6:	d131      	bne.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009ea8:	4b5e      	ldr	r3, [pc, #376]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	0a1b      	lsrs	r3, r3, #8
 8009eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eb2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	fb03 f202 	mul.w	r2, r3, r2
 8009ebc:	4b59      	ldr	r3, [pc, #356]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	091b      	lsrs	r3, r3, #4
 8009ec2:	f003 030f 	and.w	r3, r3, #15
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ecc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009ece:	4b55      	ldr	r3, [pc, #340]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	0d5b      	lsrs	r3, r3, #21
 8009ed4:	f003 0303 	and.w	r3, r3, #3
 8009ed8:	3301      	adds	r3, #1
 8009eda:	005b      	lsls	r3, r3, #1
 8009edc:	69ba      	ldr	r2, [r7, #24]
 8009ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee2:	61fb      	str	r3, [r7, #28]
          break;
 8009ee4:	e012      	b.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8009ee6:	4b4f      	ldr	r3, [pc, #316]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009eec:	f003 0302 	and.w	r3, r3, #2
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d10e      	bne.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8009ef4:	4b4d      	ldr	r3, [pc, #308]	; (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009ef6:	61fb      	str	r3, [r7, #28]
          break;
 8009ef8:	e00b      	b.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8009efa:	bf00      	nop
 8009efc:	f000 bce2 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009f00:	bf00      	nop
 8009f02:	f000 bcdf 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009f06:	bf00      	nop
 8009f08:	f000 bcdc 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009f0c:	bf00      	nop
 8009f0e:	f000 bcd9 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009f12:	bf00      	nop
        break;
 8009f14:	f000 bcd6 	b.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8009f18:	4b42      	ldr	r3, [pc, #264]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f26:	d13d      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009f28:	4b3e      	ldr	r3, [pc, #248]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f34:	f040 84c5 	bne.w	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8009f38:	4b3a      	ldr	r3, [pc, #232]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f44:	f040 84bd 	bne.w	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009f48:	4b36      	ldr	r3, [pc, #216]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	0a1b      	lsrs	r3, r3, #8
 8009f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f52:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	fb03 f202 	mul.w	r2, r3, r2
 8009f5c:	4b31      	ldr	r3, [pc, #196]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	091b      	lsrs	r3, r3, #4
 8009f62:	f003 030f 	and.w	r3, r3, #15
 8009f66:	3301      	adds	r3, #1
 8009f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f6c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8009f6e:	4b2d      	ldr	r3, [pc, #180]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	0edb      	lsrs	r3, r3, #27
 8009f74:	f003 031f 	and.w	r3, r3, #31
 8009f78:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009f80:	4b28      	ldr	r3, [pc, #160]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8009f8c:	2311      	movs	r3, #17
 8009f8e:	617b      	str	r3, [r7, #20]
 8009f90:	e001      	b.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8009f92:	2307      	movs	r3, #7
 8009f94:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8009f96:	69ba      	ldr	r2, [r7, #24]
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9e:	61fb      	str	r3, [r7, #28]
      break;
 8009fa0:	f000 bc8f 	b.w	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009fa4:	4b1f      	ldr	r3, [pc, #124]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009faa:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009fb6:	d016      	beq.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009fbe:	f200 809b 	bhi.w	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fc8:	d032      	beq.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fd0:	f200 8092 	bhi.w	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 8084 	beq.w	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fe2:	d052      	beq.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8009fe4:	e088      	b.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009fe6:	4b0f      	ldr	r3, [pc, #60]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	f040 8084 	bne.w	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009ff4:	4b0b      	ldr	r3, [pc, #44]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0308 	and.w	r3, r3, #8
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d005      	beq.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800a000:	4b08      	ldr	r3, [pc, #32]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	091b      	lsrs	r3, r3, #4
 800a006:	f003 030f 	and.w	r3, r3, #15
 800a00a:	e005      	b.n	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800a00c:	4b05      	ldr	r3, [pc, #20]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a00e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a012:	0a1b      	lsrs	r3, r3, #8
 800a014:	f003 030f 	and.w	r3, r3, #15
 800a018:	4a03      	ldr	r2, [pc, #12]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a01e:	61fb      	str	r3, [r7, #28]
          break;
 800a020:	e06c      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800a022:	bf00      	nop
 800a024:	40021000 	.word	0x40021000
 800a028:	08019628 	.word	0x08019628
 800a02c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a030:	4ba5      	ldr	r3, [pc, #660]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a03c:	d160      	bne.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a03e:	4ba2      	ldr	r3, [pc, #648]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a04a:	d159      	bne.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a04c:	4b9e      	ldr	r3, [pc, #632]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	0a1b      	lsrs	r3, r3, #8
 800a052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a056:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	fb03 f202 	mul.w	r2, r3, r2
 800a060:	4b99      	ldr	r3, [pc, #612]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	091b      	lsrs	r3, r3, #4
 800a066:	f003 030f 	and.w	r3, r3, #15
 800a06a:	3301      	adds	r3, #1
 800a06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a070:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a072:	4b95      	ldr	r3, [pc, #596]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	0d5b      	lsrs	r3, r3, #21
 800a078:	f003 0303 	and.w	r3, r3, #3
 800a07c:	3301      	adds	r3, #1
 800a07e:	005b      	lsls	r3, r3, #1
 800a080:	69ba      	ldr	r2, [r7, #24]
 800a082:	fbb2 f3f3 	udiv	r3, r2, r3
 800a086:	61fb      	str	r3, [r7, #28]
          break;
 800a088:	e03a      	b.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800a08a:	4b8f      	ldr	r3, [pc, #572]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a096:	d135      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800a098:	4b8b      	ldr	r3, [pc, #556]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0a4:	d12e      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a0a6:	4b88      	ldr	r3, [pc, #544]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	0a1b      	lsrs	r3, r3, #8
 800a0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0b0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	fb03 f202 	mul.w	r2, r3, r2
 800a0ba:	4b83      	ldr	r3, [pc, #524]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	091b      	lsrs	r3, r3, #4
 800a0c0:	f003 030f 	and.w	r3, r3, #15
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ca:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800a0cc:	4b7e      	ldr	r3, [pc, #504]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	0d5b      	lsrs	r3, r3, #21
 800a0d2:	f003 0303 	and.w	r3, r3, #3
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e0:	61fb      	str	r3, [r7, #28]
          break;
 800a0e2:	e00f      	b.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800a0e4:	4b78      	ldr	r3, [pc, #480]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a0e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d10a      	bne.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800a0f2:	4b76      	ldr	r3, [pc, #472]	; (800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a0f4:	61fb      	str	r3, [r7, #28]
          break;
 800a0f6:	e007      	b.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800a0f8:	bf00      	nop
 800a0fa:	e3e2      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a0fc:	bf00      	nop
 800a0fe:	e3e0      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a100:	bf00      	nop
 800a102:	e3de      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a104:	bf00      	nop
 800a106:	e3dc      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800a108:	bf00      	nop
      break;
 800a10a:	e3da      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a10c:	4b6e      	ldr	r3, [pc, #440]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a112:	f003 0303 	and.w	r3, r3, #3
 800a116:	60fb      	str	r3, [r7, #12]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d827      	bhi.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a11e:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a135 	.word	0x0800a135
 800a128:	0800a13d 	.word	0x0800a13d
 800a12c:	0800a145 	.word	0x0800a145
 800a130:	0800a159 	.word	0x0800a159
          frequency = HAL_RCC_GetPCLK2Freq();
 800a134:	f7ff f87c 	bl	8009230 <HAL_RCC_GetPCLK2Freq>
 800a138:	61f8      	str	r0, [r7, #28]
          break;
 800a13a:	e01d      	b.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800a13c:	f7fe ffca 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a140:	61f8      	str	r0, [r7, #28]
          break;
 800a142:	e019      	b.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a144:	4b60      	ldr	r3, [pc, #384]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a14c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a150:	d10f      	bne.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800a152:	4b5f      	ldr	r3, [pc, #380]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a154:	61fb      	str	r3, [r7, #28]
          break;
 800a156:	e00c      	b.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a158:	4b5b      	ldr	r3, [pc, #364]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a15e:	f003 0302 	and.w	r3, r3, #2
 800a162:	2b02      	cmp	r3, #2
 800a164:	d107      	bne.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800a166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a16a:	61fb      	str	r3, [r7, #28]
          break;
 800a16c:	e003      	b.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800a16e:	bf00      	nop
 800a170:	e3a8      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a172:	bf00      	nop
 800a174:	e3a6      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a176:	bf00      	nop
        break;
 800a178:	e3a4      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a17a:	4b53      	ldr	r3, [pc, #332]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a180:	f003 030c 	and.w	r3, r3, #12
 800a184:	60fb      	str	r3, [r7, #12]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2b0c      	cmp	r3, #12
 800a18a:	d83a      	bhi.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a18c:	a201      	add	r2, pc, #4	; (adr r2, 800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800a18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a192:	bf00      	nop
 800a194:	0800a1c9 	.word	0x0800a1c9
 800a198:	0800a203 	.word	0x0800a203
 800a19c:	0800a203 	.word	0x0800a203
 800a1a0:	0800a203 	.word	0x0800a203
 800a1a4:	0800a1d1 	.word	0x0800a1d1
 800a1a8:	0800a203 	.word	0x0800a203
 800a1ac:	0800a203 	.word	0x0800a203
 800a1b0:	0800a203 	.word	0x0800a203
 800a1b4:	0800a1d9 	.word	0x0800a1d9
 800a1b8:	0800a203 	.word	0x0800a203
 800a1bc:	0800a203 	.word	0x0800a203
 800a1c0:	0800a203 	.word	0x0800a203
 800a1c4:	0800a1ed 	.word	0x0800a1ed
          frequency = HAL_RCC_GetPCLK1Freq();
 800a1c8:	f7ff f81c 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800a1cc:	61f8      	str	r0, [r7, #28]
          break;
 800a1ce:	e01d      	b.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800a1d0:	f7fe ff80 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a1d4:	61f8      	str	r0, [r7, #28]
          break;
 800a1d6:	e019      	b.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a1d8:	4b3b      	ldr	r3, [pc, #236]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1e4:	d10f      	bne.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800a1e6:	4b3a      	ldr	r3, [pc, #232]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a1e8:	61fb      	str	r3, [r7, #28]
          break;
 800a1ea:	e00c      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a1ec:	4b36      	ldr	r3, [pc, #216]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a1ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d107      	bne.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800a1fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1fe:	61fb      	str	r3, [r7, #28]
          break;
 800a200:	e003      	b.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800a202:	bf00      	nop
 800a204:	e35e      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a206:	bf00      	nop
 800a208:	e35c      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a20a:	bf00      	nop
        break;
 800a20c:	e35a      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a20e:	4b2e      	ldr	r3, [pc, #184]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a214:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a218:	60fb      	str	r3, [r7, #12]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b30      	cmp	r3, #48	; 0x30
 800a21e:	d021      	beq.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b30      	cmp	r3, #48	; 0x30
 800a224:	d829      	bhi.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b20      	cmp	r3, #32
 800a22a:	d011      	beq.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b20      	cmp	r3, #32
 800a230:	d823      	bhi.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d003      	beq.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b10      	cmp	r3, #16
 800a23c:	d004      	beq.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800a23e:	e01c      	b.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a240:	f7fe ffe0 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800a244:	61f8      	str	r0, [r7, #28]
          break;
 800a246:	e01d      	b.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800a248:	f7fe ff44 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a24c:	61f8      	str	r0, [r7, #28]
          break;
 800a24e:	e019      	b.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a250:	4b1d      	ldr	r3, [pc, #116]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a25c:	d10f      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800a25e:	4b1c      	ldr	r3, [pc, #112]	; (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a260:	61fb      	str	r3, [r7, #28]
          break;
 800a262:	e00c      	b.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a264:	4b18      	ldr	r3, [pc, #96]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d107      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800a272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a276:	61fb      	str	r3, [r7, #28]
          break;
 800a278:	e003      	b.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800a27a:	bf00      	nop
 800a27c:	e322      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a27e:	bf00      	nop
 800a280:	e320      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a282:	bf00      	nop
        break;
 800a284:	e31e      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a286:	4b10      	ldr	r3, [pc, #64]	; (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a28c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2bc0      	cmp	r3, #192	; 0xc0
 800a296:	d027      	beq.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2bc0      	cmp	r3, #192	; 0xc0
 800a29c:	d82f      	bhi.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2b80      	cmp	r3, #128	; 0x80
 800a2a2:	d017      	beq.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b80      	cmp	r3, #128	; 0x80
 800a2a8:	d829      	bhi.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d003      	beq.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b40      	cmp	r3, #64	; 0x40
 800a2b4:	d004      	beq.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800a2b6:	e022      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a2b8:	f7fe ffa4 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800a2bc:	61f8      	str	r0, [r7, #28]
          break;
 800a2be:	e023      	b.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800a2c0:	f7fe ff08 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a2c4:	61f8      	str	r0, [r7, #28]
          break;
 800a2c6:	e01f      	b.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800a2c8:	40021000 	.word	0x40021000
 800a2cc:	02dc6c00 	.word	0x02dc6c00
 800a2d0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2d4:	4b9b      	ldr	r3, [pc, #620]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2e0:	d10f      	bne.n	800a302 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800a2e2:	4b99      	ldr	r3, [pc, #612]	; (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a2e4:	61fb      	str	r3, [r7, #28]
          break;
 800a2e6:	e00c      	b.n	800a302 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a2e8:	4b96      	ldr	r3, [pc, #600]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ee:	f003 0302 	and.w	r3, r3, #2
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d107      	bne.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800a2f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2fa:	61fb      	str	r3, [r7, #28]
          break;
 800a2fc:	e003      	b.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800a2fe:	bf00      	nop
 800a300:	e2e0      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a302:	bf00      	nop
 800a304:	e2de      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a306:	bf00      	nop
        break;
 800a308:	e2dc      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a30a:	4b8e      	ldr	r3, [pc, #568]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a314:	60fb      	str	r3, [r7, #12]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a31c:	d025      	beq.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a324:	d82c      	bhi.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a32c:	d013      	beq.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a334:	d824      	bhi.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d004      	beq.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a342:	d004      	beq.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800a344:	e01c      	b.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a346:	f7fe ff5d 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800a34a:	61f8      	str	r0, [r7, #28]
          break;
 800a34c:	e01d      	b.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800a34e:	f7fe fec1 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a352:	61f8      	str	r0, [r7, #28]
          break;
 800a354:	e019      	b.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a356:	4b7b      	ldr	r3, [pc, #492]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a35e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a362:	d10f      	bne.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800a364:	4b78      	ldr	r3, [pc, #480]	; (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a366:	61fb      	str	r3, [r7, #28]
          break;
 800a368:	e00c      	b.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a36a:	4b76      	ldr	r3, [pc, #472]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a370:	f003 0302 	and.w	r3, r3, #2
 800a374:	2b02      	cmp	r3, #2
 800a376:	d107      	bne.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800a378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a37c:	61fb      	str	r3, [r7, #28]
          break;
 800a37e:	e003      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800a380:	bf00      	nop
 800a382:	e29f      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a384:	bf00      	nop
 800a386:	e29d      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a388:	bf00      	nop
        break;
 800a38a:	e29b      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a38c:	4b6d      	ldr	r3, [pc, #436]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a392:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a39e:	d025      	beq.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3a6:	d82c      	bhi.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3ae:	d013      	beq.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3b6:	d824      	bhi.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d004      	beq.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3c4:	d004      	beq.n	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800a3c6:	e01c      	b.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a3c8:	f7fe ff1c 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800a3cc:	61f8      	str	r0, [r7, #28]
          break;
 800a3ce:	e01d      	b.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800a3d0:	f7fe fe80 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a3d4:	61f8      	str	r0, [r7, #28]
          break;
 800a3d6:	e019      	b.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3d8:	4b5a      	ldr	r3, [pc, #360]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3e4:	d10f      	bne.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800a3e6:	4b58      	ldr	r3, [pc, #352]	; (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a3e8:	61fb      	str	r3, [r7, #28]
          break;
 800a3ea:	e00c      	b.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a3ec:	4b55      	ldr	r3, [pc, #340]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d107      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800a3fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3fe:	61fb      	str	r3, [r7, #28]
          break;
 800a400:	e003      	b.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800a402:	bf00      	nop
 800a404:	e25e      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a406:	bf00      	nop
 800a408:	e25c      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a40a:	bf00      	nop
        break;
 800a40c:	e25a      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a40e:	4b4d      	ldr	r3, [pc, #308]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a414:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a418:	60fb      	str	r3, [r7, #12]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a420:	d007      	beq.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a428:	d12f      	bne.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800a42a:	f7fe fe53 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a42e:	61f8      	str	r0, [r7, #28]
          break;
 800a430:	e02e      	b.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800a432:	4b44      	ldr	r3, [pc, #272]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a43a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a43e:	d126      	bne.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800a440:	4b40      	ldr	r3, [pc, #256]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d020      	beq.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a44c:	4b3d      	ldr	r3, [pc, #244]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	0a1b      	lsrs	r3, r3, #8
 800a452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a456:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	fb03 f202 	mul.w	r2, r3, r2
 800a460:	4b38      	ldr	r3, [pc, #224]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	091b      	lsrs	r3, r3, #4
 800a466:	f003 030f 	and.w	r3, r3, #15
 800a46a:	3301      	adds	r3, #1
 800a46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a470:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800a472:	4b34      	ldr	r3, [pc, #208]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	0e5b      	lsrs	r3, r3, #25
 800a478:	f003 0303 	and.w	r3, r3, #3
 800a47c:	3301      	adds	r3, #1
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	69ba      	ldr	r2, [r7, #24]
 800a482:	fbb2 f3f3 	udiv	r3, r2, r3
 800a486:	61fb      	str	r3, [r7, #28]
          break;
 800a488:	e001      	b.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800a48a:	bf00      	nop
 800a48c:	e21a      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a48e:	bf00      	nop
        break;
 800a490:	e218      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800a492:	4b2c      	ldr	r3, [pc, #176]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a494:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a498:	f003 0304 	and.w	r3, r3, #4
 800a49c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d103      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800a4a4:	f7fe fec4 	bl	8009230 <HAL_RCC_GetPCLK2Freq>
 800a4a8:	61f8      	str	r0, [r7, #28]
        break;
 800a4aa:	e20b      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800a4ac:	f7fe fe12 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a4b0:	61f8      	str	r0, [r7, #28]
        break;
 800a4b2:	e207      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800a4b4:	4b23      	ldr	r3, [pc, #140]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a4b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4ba:	f003 0318 	and.w	r3, r3, #24
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2b10      	cmp	r3, #16
 800a4c4:	d010      	beq.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2b10      	cmp	r3, #16
 800a4ca:	d834      	bhi.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d003      	beq.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2b08      	cmp	r3, #8
 800a4d6:	d024      	beq.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800a4d8:	e02d      	b.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800a4da:	69b9      	ldr	r1, [r7, #24]
 800a4dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a4e0:	f000 fbe2 	bl	800aca8 <RCCEx_GetSAIxPeriphCLKFreq>
 800a4e4:	61f8      	str	r0, [r7, #28]
          break;
 800a4e6:	e02b      	b.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a4e8:	4b16      	ldr	r3, [pc, #88]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0302 	and.w	r3, r3, #2
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d122      	bne.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a4f4:	4b13      	ldr	r3, [pc, #76]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d005      	beq.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800a500:	4b10      	ldr	r3, [pc, #64]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	091b      	lsrs	r3, r3, #4
 800a506:	f003 030f 	and.w	r3, r3, #15
 800a50a:	e005      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800a50c:	4b0d      	ldr	r3, [pc, #52]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a50e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a512:	0a1b      	lsrs	r3, r3, #8
 800a514:	f003 030f 	and.w	r3, r3, #15
 800a518:	4a0c      	ldr	r2, [pc, #48]	; (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800a51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a51e:	61fb      	str	r3, [r7, #28]
          break;
 800a520:	e00b      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a522:	4b08      	ldr	r3, [pc, #32]	; (800a544 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a52a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a52e:	d106      	bne.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800a530:	4b05      	ldr	r3, [pc, #20]	; (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800a532:	61fb      	str	r3, [r7, #28]
          break;
 800a534:	e003      	b.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800a536:	bf00      	nop
 800a538:	e1c4      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a53a:	bf00      	nop
 800a53c:	e1c2      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a53e:	bf00      	nop
        break;
 800a540:	e1c0      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800a542:	bf00      	nop
 800a544:	40021000 	.word	0x40021000
 800a548:	00f42400 	.word	0x00f42400
 800a54c:	08019628 	.word	0x08019628
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a550:	4b96      	ldr	r3, [pc, #600]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a556:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a562:	d013      	beq.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a56a:	d819      	bhi.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d004      	beq.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a578:	d004      	beq.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800a57a:	e011      	b.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a57c:	f7fe fe42 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800a580:	61f8      	str	r0, [r7, #28]
          break;
 800a582:	e010      	b.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800a584:	f7fe fda6 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a588:	61f8      	str	r0, [r7, #28]
          break;
 800a58a:	e00c      	b.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a58c:	4b87      	ldr	r3, [pc, #540]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a598:	d104      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800a59a:	4b85      	ldr	r3, [pc, #532]	; (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a59c:	61fb      	str	r3, [r7, #28]
          break;
 800a59e:	e001      	b.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800a5a0:	bf00      	nop
 800a5a2:	e18f      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a5a4:	bf00      	nop
        break;
 800a5a6:	e18d      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a5a8:	4b80      	ldr	r3, [pc, #512]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ba:	d013      	beq.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5c2:	d819      	bhi.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d004      	beq.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5d0:	d004      	beq.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800a5d2:	e011      	b.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a5d4:	f7fe fe16 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800a5d8:	61f8      	str	r0, [r7, #28]
          break;
 800a5da:	e010      	b.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800a5dc:	f7fe fd7a 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a5e0:	61f8      	str	r0, [r7, #28]
          break;
 800a5e2:	e00c      	b.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5e4:	4b71      	ldr	r3, [pc, #452]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f0:	d104      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800a5f2:	4b6f      	ldr	r3, [pc, #444]	; (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a5f4:	61fb      	str	r3, [r7, #28]
          break;
 800a5f6:	e001      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800a5f8:	bf00      	nop
 800a5fa:	e163      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a5fc:	bf00      	nop
        break;
 800a5fe:	e161      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a600:	4b6a      	ldr	r3, [pc, #424]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a606:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a612:	d013      	beq.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a61a:	d819      	bhi.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d004      	beq.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a628:	d004      	beq.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800a62a:	e011      	b.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a62c:	f7fe fdea 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800a630:	61f8      	str	r0, [r7, #28]
          break;
 800a632:	e010      	b.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800a634:	f7fe fd4e 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a638:	61f8      	str	r0, [r7, #28]
          break;
 800a63a:	e00c      	b.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a63c:	4b5b      	ldr	r3, [pc, #364]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a648:	d104      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800a64a:	4b59      	ldr	r3, [pc, #356]	; (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a64c:	61fb      	str	r3, [r7, #28]
          break;
 800a64e:	e001      	b.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800a650:	bf00      	nop
 800a652:	e137      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a654:	bf00      	nop
        break;
 800a656:	e135      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a658:	4b54      	ldr	r3, [pc, #336]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a65a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a65e:	f003 0303 	and.w	r3, r3, #3
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2b02      	cmp	r3, #2
 800a668:	d011      	beq.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d818      	bhi.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d004      	beq.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800a67c:	e011      	b.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a67e:	f7fe fdc1 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800a682:	61f8      	str	r0, [r7, #28]
          break;
 800a684:	e010      	b.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800a686:	f7fe fd25 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a68a:	61f8      	str	r0, [r7, #28]
          break;
 800a68c:	e00c      	b.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a68e:	4b47      	ldr	r3, [pc, #284]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a69a:	d104      	bne.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800a69c:	4b44      	ldr	r3, [pc, #272]	; (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a69e:	61fb      	str	r3, [r7, #28]
          break;
 800a6a0:	e001      	b.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800a6a2:	bf00      	nop
 800a6a4:	e10e      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a6a6:	bf00      	nop
        break;
 800a6a8:	e10c      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a6aa:	4b40      	ldr	r3, [pc, #256]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a6ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a6b4:	60fb      	str	r3, [r7, #12]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a6bc:	d02c      	beq.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a6c4:	d833      	bhi.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a6cc:	d01a      	beq.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a6d4:	d82b      	bhi.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d004      	beq.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a6e2:	d004      	beq.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800a6e4:	e023      	b.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a6e6:	f7fe fd8d 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800a6ea:	61f8      	str	r0, [r7, #28]
          break;
 800a6ec:	e026      	b.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a6ee:	4b2f      	ldr	r3, [pc, #188]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a6f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6f4:	f003 0302 	and.w	r3, r3, #2
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d11a      	bne.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800a6fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a700:	61fb      	str	r3, [r7, #28]
          break;
 800a702:	e016      	b.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a704:	4b29      	ldr	r3, [pc, #164]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a70c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a710:	d111      	bne.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800a712:	4b27      	ldr	r3, [pc, #156]	; (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a714:	61fb      	str	r3, [r7, #28]
          break;
 800a716:	e00e      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a718:	4b24      	ldr	r3, [pc, #144]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b02      	cmp	r3, #2
 800a724:	d109      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800a726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a72a:	61fb      	str	r3, [r7, #28]
          break;
 800a72c:	e005      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800a72e:	bf00      	nop
 800a730:	e0c8      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a732:	bf00      	nop
 800a734:	e0c6      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a736:	bf00      	nop
 800a738:	e0c4      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a73a:	bf00      	nop
        break;
 800a73c:	e0c2      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a73e:	4b1b      	ldr	r3, [pc, #108]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a744:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a750:	d030      	beq.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a758:	d837      	bhi.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a760:	d01a      	beq.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a768:	d82f      	bhi.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d004      	beq.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a776:	d004      	beq.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800a778:	e027      	b.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800a77a:	f7fe fd43 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800a77e:	61f8      	str	r0, [r7, #28]
          break;
 800a780:	e02a      	b.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800a782:	4b0a      	ldr	r3, [pc, #40]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a788:	f003 0302 	and.w	r3, r3, #2
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d11e      	bne.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800a790:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a794:	61fb      	str	r3, [r7, #28]
          break;
 800a796:	e01a      	b.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a798:	4b04      	ldr	r3, [pc, #16]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7a4:	d115      	bne.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800a7a6:	4b02      	ldr	r3, [pc, #8]	; (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800a7a8:	61fb      	str	r3, [r7, #28]
          break;
 800a7aa:	e012      	b.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800a7ac:	40021000 	.word	0x40021000
 800a7b0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a7b4:	4b46      	ldr	r3, [pc, #280]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a7b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ba:	f003 0302 	and.w	r3, r3, #2
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d109      	bne.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800a7c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7c6:	61fb      	str	r3, [r7, #28]
          break;
 800a7c8:	e005      	b.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800a7ca:	bf00      	nop
 800a7cc:	e07a      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a7ce:	bf00      	nop
 800a7d0:	e078      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a7d2:	bf00      	nop
 800a7d4:	e076      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a7d6:	bf00      	nop
        break;
 800a7d8:	e074      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a7da:	4b3d      	ldr	r3, [pc, #244]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a7dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a7e4:	60fb      	str	r3, [r7, #12]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7ec:	d02c      	beq.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7f4:	d855      	bhi.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d004      	beq.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a802:	d004      	beq.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800a804:	e04d      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800a806:	f7fe fc65 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800a80a:	61f8      	str	r0, [r7, #28]
          break;
 800a80c:	e04e      	b.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800a80e:	4b30      	ldr	r3, [pc, #192]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0302 	and.w	r3, r3, #2
 800a816:	2b02      	cmp	r3, #2
 800a818:	d145      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800a81a:	4b2d      	ldr	r3, [pc, #180]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0308 	and.w	r3, r3, #8
 800a822:	2b00      	cmp	r3, #0
 800a824:	d005      	beq.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800a826:	4b2a      	ldr	r3, [pc, #168]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	091b      	lsrs	r3, r3, #4
 800a82c:	f003 030f 	and.w	r3, r3, #15
 800a830:	e005      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800a832:	4b27      	ldr	r3, [pc, #156]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a838:	0a1b      	lsrs	r3, r3, #8
 800a83a:	f003 030f 	and.w	r3, r3, #15
 800a83e:	4a25      	ldr	r2, [pc, #148]	; (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800a840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a844:	61fb      	str	r3, [r7, #28]
          break;
 800a846:	e02e      	b.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800a848:	4b21      	ldr	r3, [pc, #132]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a854:	d129      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800a856:	4b1e      	ldr	r3, [pc, #120]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a85e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a862:	d122      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a864:	4b1a      	ldr	r3, [pc, #104]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	0a1b      	lsrs	r3, r3, #8
 800a86a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	fb03 f202 	mul.w	r2, r3, r2
 800a878:	4b15      	ldr	r3, [pc, #84]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	091b      	lsrs	r3, r3, #4
 800a87e:	f003 030f 	and.w	r3, r3, #15
 800a882:	3301      	adds	r3, #1
 800a884:	fbb2 f3f3 	udiv	r3, r2, r3
 800a888:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800a88a:	4b11      	ldr	r3, [pc, #68]	; (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	0d5b      	lsrs	r3, r3, #21
 800a890:	f003 0303 	and.w	r3, r3, #3
 800a894:	3301      	adds	r3, #1
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a89e:	61fb      	str	r3, [r7, #28]
          break;
 800a8a0:	e003      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800a8a2:	bf00      	nop
 800a8a4:	e00e      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a8a6:	bf00      	nop
 800a8a8:	e00c      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800a8aa:	bf00      	nop
        break;
 800a8ac:	e00a      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a8ae:	bf00      	nop
 800a8b0:	e008      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a8b2:	bf00      	nop
 800a8b4:	e006      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a8b6:	bf00      	nop
 800a8b8:	e004      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a8ba:	bf00      	nop
 800a8bc:	e002      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a8be:	bf00      	nop
 800a8c0:	e000      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800a8c2:	bf00      	nop
    }
  }

  return(frequency);
 800a8c4:	69fb      	ldr	r3, [r7, #28]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3720      	adds	r7, #32
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	40021000 	.word	0x40021000
 800a8d4:	08019628 	.word	0x08019628

0800a8d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a8e6:	4b72      	ldr	r3, [pc, #456]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	f003 0303 	and.w	r3, r3, #3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00e      	beq.n	800a910 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a8f2:	4b6f      	ldr	r3, [pc, #444]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	f003 0203 	and.w	r2, r3, #3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d103      	bne.n	800a90a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
       ||
 800a906:	2b00      	cmp	r3, #0
 800a908:	d142      	bne.n	800a990 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	73fb      	strb	r3, [r7, #15]
 800a90e:	e03f      	b.n	800a990 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b03      	cmp	r3, #3
 800a916:	d018      	beq.n	800a94a <RCCEx_PLLSAI1_Config+0x72>
 800a918:	2b03      	cmp	r3, #3
 800a91a:	d825      	bhi.n	800a968 <RCCEx_PLLSAI1_Config+0x90>
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d002      	beq.n	800a926 <RCCEx_PLLSAI1_Config+0x4e>
 800a920:	2b02      	cmp	r3, #2
 800a922:	d009      	beq.n	800a938 <RCCEx_PLLSAI1_Config+0x60>
 800a924:	e020      	b.n	800a968 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a926:	4b62      	ldr	r3, [pc, #392]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d11d      	bne.n	800a96e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a936:	e01a      	b.n	800a96e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a938:	4b5d      	ldr	r3, [pc, #372]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a940:	2b00      	cmp	r3, #0
 800a942:	d116      	bne.n	800a972 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a948:	e013      	b.n	800a972 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a94a:	4b59      	ldr	r3, [pc, #356]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10f      	bne.n	800a976 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a956:	4b56      	ldr	r3, [pc, #344]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d109      	bne.n	800a976 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a966:	e006      	b.n	800a976 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	73fb      	strb	r3, [r7, #15]
      break;
 800a96c:	e004      	b.n	800a978 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a96e:	bf00      	nop
 800a970:	e002      	b.n	800a978 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a972:	bf00      	nop
 800a974:	e000      	b.n	800a978 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a976:	bf00      	nop
    }

    if(status == HAL_OK)
 800a978:	7bfb      	ldrb	r3, [r7, #15]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d108      	bne.n	800a990 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800a97e:	4b4c      	ldr	r3, [pc, #304]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	f023 0203 	bic.w	r2, r3, #3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4949      	ldr	r1, [pc, #292]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a98c:	4313      	orrs	r3, r2
 800a98e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	2b00      	cmp	r3, #0
 800a994:	f040 8086 	bne.w	800aaa4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a998:	4b45      	ldr	r3, [pc, #276]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a44      	ldr	r2, [pc, #272]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a99e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a9a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9a4:	f7fa fd2a 	bl	80053fc <HAL_GetTick>
 800a9a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a9aa:	e009      	b.n	800a9c0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a9ac:	f7fa fd26 	bl	80053fc <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d902      	bls.n	800a9c0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	73fb      	strb	r3, [r7, #15]
        break;
 800a9be:	e005      	b.n	800a9cc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a9c0:	4b3b      	ldr	r3, [pc, #236]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1ef      	bne.n	800a9ac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d168      	bne.n	800aaa4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d113      	bne.n	800aa00 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a9d8:	4b35      	ldr	r3, [pc, #212]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a9da:	691a      	ldr	r2, [r3, #16]
 800a9dc:	4b35      	ldr	r3, [pc, #212]	; (800aab4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a9de:	4013      	ands	r3, r2
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	6892      	ldr	r2, [r2, #8]
 800a9e4:	0211      	lsls	r1, r2, #8
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	68d2      	ldr	r2, [r2, #12]
 800a9ea:	06d2      	lsls	r2, r2, #27
 800a9ec:	4311      	orrs	r1, r2
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	6852      	ldr	r2, [r2, #4]
 800a9f2:	3a01      	subs	r2, #1
 800a9f4:	0112      	lsls	r2, r2, #4
 800a9f6:	430a      	orrs	r2, r1
 800a9f8:	492d      	ldr	r1, [pc, #180]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	610b      	str	r3, [r1, #16]
 800a9fe:	e02d      	b.n	800aa5c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d115      	bne.n	800aa32 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aa06:	4b2a      	ldr	r3, [pc, #168]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aa08:	691a      	ldr	r2, [r3, #16]
 800aa0a:	4b2b      	ldr	r3, [pc, #172]	; (800aab8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	6892      	ldr	r2, [r2, #8]
 800aa12:	0211      	lsls	r1, r2, #8
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	6912      	ldr	r2, [r2, #16]
 800aa18:	0852      	lsrs	r2, r2, #1
 800aa1a:	3a01      	subs	r2, #1
 800aa1c:	0552      	lsls	r2, r2, #21
 800aa1e:	4311      	orrs	r1, r2
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	6852      	ldr	r2, [r2, #4]
 800aa24:	3a01      	subs	r2, #1
 800aa26:	0112      	lsls	r2, r2, #4
 800aa28:	430a      	orrs	r2, r1
 800aa2a:	4921      	ldr	r1, [pc, #132]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	610b      	str	r3, [r1, #16]
 800aa30:	e014      	b.n	800aa5c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800aa32:	4b1f      	ldr	r3, [pc, #124]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aa34:	691a      	ldr	r2, [r3, #16]
 800aa36:	4b21      	ldr	r3, [pc, #132]	; (800aabc <RCCEx_PLLSAI1_Config+0x1e4>)
 800aa38:	4013      	ands	r3, r2
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	6892      	ldr	r2, [r2, #8]
 800aa3e:	0211      	lsls	r1, r2, #8
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	6952      	ldr	r2, [r2, #20]
 800aa44:	0852      	lsrs	r2, r2, #1
 800aa46:	3a01      	subs	r2, #1
 800aa48:	0652      	lsls	r2, r2, #25
 800aa4a:	4311      	orrs	r1, r2
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	6852      	ldr	r2, [r2, #4]
 800aa50:	3a01      	subs	r2, #1
 800aa52:	0112      	lsls	r2, r2, #4
 800aa54:	430a      	orrs	r2, r1
 800aa56:	4916      	ldr	r1, [pc, #88]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800aa5c:	4b14      	ldr	r3, [pc, #80]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a13      	ldr	r2, [pc, #76]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aa62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aa66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa68:	f7fa fcc8 	bl	80053fc <HAL_GetTick>
 800aa6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800aa6e:	e009      	b.n	800aa84 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aa70:	f7fa fcc4 	bl	80053fc <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d902      	bls.n	800aa84 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	73fb      	strb	r3, [r7, #15]
          break;
 800aa82:	e005      	b.n	800aa90 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800aa84:	4b0a      	ldr	r3, [pc, #40]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d0ef      	beq.n	800aa70 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800aa90:	7bfb      	ldrb	r3, [r7, #15]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d106      	bne.n	800aaa4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800aa96:	4b06      	ldr	r3, [pc, #24]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aa98:	691a      	ldr	r2, [r3, #16]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	4904      	ldr	r1, [pc, #16]	; (800aab0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	40021000 	.word	0x40021000
 800aab4:	07ff800f 	.word	0x07ff800f
 800aab8:	ff9f800f 	.word	0xff9f800f
 800aabc:	f9ff800f 	.word	0xf9ff800f

0800aac0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800aace:	4b72      	ldr	r3, [pc, #456]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	f003 0303 	and.w	r3, r3, #3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00e      	beq.n	800aaf8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800aada:	4b6f      	ldr	r3, [pc, #444]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	f003 0203 	and.w	r2, r3, #3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d103      	bne.n	800aaf2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
       ||
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d142      	bne.n	800ab78 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	73fb      	strb	r3, [r7, #15]
 800aaf6:	e03f      	b.n	800ab78 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d018      	beq.n	800ab32 <RCCEx_PLLSAI2_Config+0x72>
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d825      	bhi.n	800ab50 <RCCEx_PLLSAI2_Config+0x90>
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d002      	beq.n	800ab0e <RCCEx_PLLSAI2_Config+0x4e>
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d009      	beq.n	800ab20 <RCCEx_PLLSAI2_Config+0x60>
 800ab0c:	e020      	b.n	800ab50 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ab0e:	4b62      	ldr	r3, [pc, #392]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d11d      	bne.n	800ab56 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab1e:	e01a      	b.n	800ab56 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ab20:	4b5d      	ldr	r3, [pc, #372]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d116      	bne.n	800ab5a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ab30:	e013      	b.n	800ab5a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ab32:	4b59      	ldr	r3, [pc, #356]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10f      	bne.n	800ab5e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ab3e:	4b56      	ldr	r3, [pc, #344]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d109      	bne.n	800ab5e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ab4e:	e006      	b.n	800ab5e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	73fb      	strb	r3, [r7, #15]
      break;
 800ab54:	e004      	b.n	800ab60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800ab56:	bf00      	nop
 800ab58:	e002      	b.n	800ab60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800ab5a:	bf00      	nop
 800ab5c:	e000      	b.n	800ab60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800ab5e:	bf00      	nop
    }

    if(status == HAL_OK)
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d108      	bne.n	800ab78 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800ab66:	4b4c      	ldr	r3, [pc, #304]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	f023 0203 	bic.w	r2, r3, #3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4949      	ldr	r1, [pc, #292]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ab74:	4313      	orrs	r3, r2
 800ab76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f040 8086 	bne.w	800ac8c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ab80:	4b45      	ldr	r3, [pc, #276]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a44      	ldr	r2, [pc, #272]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ab86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab8c:	f7fa fc36 	bl	80053fc <HAL_GetTick>
 800ab90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ab92:	e009      	b.n	800aba8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ab94:	f7fa fc32 	bl	80053fc <HAL_GetTick>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d902      	bls.n	800aba8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	73fb      	strb	r3, [r7, #15]
        break;
 800aba6:	e005      	b.n	800abb4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800aba8:	4b3b      	ldr	r3, [pc, #236]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1ef      	bne.n	800ab94 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d168      	bne.n	800ac8c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d113      	bne.n	800abe8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800abc0:	4b35      	ldr	r3, [pc, #212]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800abc2:	695a      	ldr	r2, [r3, #20]
 800abc4:	4b35      	ldr	r3, [pc, #212]	; (800ac9c <RCCEx_PLLSAI2_Config+0x1dc>)
 800abc6:	4013      	ands	r3, r2
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	6892      	ldr	r2, [r2, #8]
 800abcc:	0211      	lsls	r1, r2, #8
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	68d2      	ldr	r2, [r2, #12]
 800abd2:	06d2      	lsls	r2, r2, #27
 800abd4:	4311      	orrs	r1, r2
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	6852      	ldr	r2, [r2, #4]
 800abda:	3a01      	subs	r2, #1
 800abdc:	0112      	lsls	r2, r2, #4
 800abde:	430a      	orrs	r2, r1
 800abe0:	492d      	ldr	r1, [pc, #180]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	614b      	str	r3, [r1, #20]
 800abe6:	e02d      	b.n	800ac44 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d115      	bne.n	800ac1a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800abee:	4b2a      	ldr	r3, [pc, #168]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800abf0:	695a      	ldr	r2, [r3, #20]
 800abf2:	4b2b      	ldr	r3, [pc, #172]	; (800aca0 <RCCEx_PLLSAI2_Config+0x1e0>)
 800abf4:	4013      	ands	r3, r2
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	6892      	ldr	r2, [r2, #8]
 800abfa:	0211      	lsls	r1, r2, #8
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	6912      	ldr	r2, [r2, #16]
 800ac00:	0852      	lsrs	r2, r2, #1
 800ac02:	3a01      	subs	r2, #1
 800ac04:	0552      	lsls	r2, r2, #21
 800ac06:	4311      	orrs	r1, r2
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	6852      	ldr	r2, [r2, #4]
 800ac0c:	3a01      	subs	r2, #1
 800ac0e:	0112      	lsls	r2, r2, #4
 800ac10:	430a      	orrs	r2, r1
 800ac12:	4921      	ldr	r1, [pc, #132]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ac14:	4313      	orrs	r3, r2
 800ac16:	614b      	str	r3, [r1, #20]
 800ac18:	e014      	b.n	800ac44 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ac1a:	4b1f      	ldr	r3, [pc, #124]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ac1c:	695a      	ldr	r2, [r3, #20]
 800ac1e:	4b21      	ldr	r3, [pc, #132]	; (800aca4 <RCCEx_PLLSAI2_Config+0x1e4>)
 800ac20:	4013      	ands	r3, r2
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	6892      	ldr	r2, [r2, #8]
 800ac26:	0211      	lsls	r1, r2, #8
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	6952      	ldr	r2, [r2, #20]
 800ac2c:	0852      	lsrs	r2, r2, #1
 800ac2e:	3a01      	subs	r2, #1
 800ac30:	0652      	lsls	r2, r2, #25
 800ac32:	4311      	orrs	r1, r2
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	6852      	ldr	r2, [r2, #4]
 800ac38:	3a01      	subs	r2, #1
 800ac3a:	0112      	lsls	r2, r2, #4
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	4916      	ldr	r1, [pc, #88]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ac40:	4313      	orrs	r3, r2
 800ac42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ac44:	4b14      	ldr	r3, [pc, #80]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a13      	ldr	r2, [pc, #76]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ac4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac50:	f7fa fbd4 	bl	80053fc <HAL_GetTick>
 800ac54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ac56:	e009      	b.n	800ac6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ac58:	f7fa fbd0 	bl	80053fc <HAL_GetTick>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d902      	bls.n	800ac6c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	73fb      	strb	r3, [r7, #15]
          break;
 800ac6a:	e005      	b.n	800ac78 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d0ef      	beq.n	800ac58 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ac7e:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ac80:	695a      	ldr	r2, [r3, #20]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	4904      	ldr	r1, [pc, #16]	; (800ac98 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	40021000 	.word	0x40021000
 800ac9c:	07ff800f 	.word	0x07ff800f
 800aca0:	ff9f800f 	.word	0xff9f800f
 800aca4:	f9ff800f 	.word	0xf9ff800f

0800aca8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b089      	sub	sp, #36	; 0x24
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800acb2:	2300      	movs	r3, #0
 800acb4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800acb6:	2300      	movs	r3, #0
 800acb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800acba:	2300      	movs	r3, #0
 800acbc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acc4:	d10b      	bne.n	800acde <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800acc6:	4b7e      	ldr	r3, [pc, #504]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800acc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800accc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800acd0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	2b60      	cmp	r3, #96	; 0x60
 800acd6:	d112      	bne.n	800acfe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800acd8:	4b7a      	ldr	r3, [pc, #488]	; (800aec4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800acda:	61fb      	str	r3, [r7, #28]
 800acdc:	e00f      	b.n	800acfe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace4:	d10b      	bne.n	800acfe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ace6:	4b76      	ldr	r3, [pc, #472]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ace8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800acec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acf0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acf8:	d101      	bne.n	800acfe <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800acfa:	4b72      	ldr	r3, [pc, #456]	; (800aec4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800acfc:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f040 80d6 	bne.w	800aeb2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	2b40      	cmp	r3, #64	; 0x40
 800ad0e:	d003      	beq.n	800ad18 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad16:	d13b      	bne.n	800ad90 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ad18:	4b69      	ldr	r3, [pc, #420]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad24:	f040 80c4 	bne.w	800aeb0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800ad28:	4b65      	ldr	r3, [pc, #404]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 80bd 	beq.w	800aeb0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ad36:	4b62      	ldr	r3, [pc, #392]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	091b      	lsrs	r3, r3, #4
 800ad3c:	f003 030f 	and.w	r3, r3, #15
 800ad40:	3301      	adds	r3, #1
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad48:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ad4a:	4b5d      	ldr	r3, [pc, #372]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	0a1b      	lsrs	r3, r3, #8
 800ad50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad54:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800ad56:	4b5a      	ldr	r3, [pc, #360]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	0edb      	lsrs	r3, r3, #27
 800ad5c:	f003 031f 	and.w	r3, r3, #31
 800ad60:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800ad68:	4b55      	ldr	r3, [pc, #340]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800ad74:	2311      	movs	r3, #17
 800ad76:	617b      	str	r3, [r7, #20]
 800ad78:	e001      	b.n	800ad7e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800ad7a:	2307      	movs	r3, #7
 800ad7c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	fb03 f202 	mul.w	r2, r3, r2
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad8c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800ad8e:	e08f      	b.n	800aeb0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d13a      	bne.n	800ae0c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800ad96:	4b4a      	ldr	r3, [pc, #296]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ada2:	f040 8086 	bne.w	800aeb2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800ada6:	4b46      	ldr	r3, [pc, #280]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d07f      	beq.n	800aeb2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800adb2:	4b43      	ldr	r3, [pc, #268]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	091b      	lsrs	r3, r3, #4
 800adb8:	f003 030f 	and.w	r3, r3, #15
 800adbc:	3301      	adds	r3, #1
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800adc6:	4b3e      	ldr	r3, [pc, #248]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	0a1b      	lsrs	r3, r3, #8
 800adcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800add0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800add2:	4b3b      	ldr	r3, [pc, #236]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	0edb      	lsrs	r3, r3, #27
 800add8:	f003 031f 	and.w	r3, r3, #31
 800addc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800ade4:	4b36      	ldr	r3, [pc, #216]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800adf0:	2311      	movs	r3, #17
 800adf2:	617b      	str	r3, [r7, #20]
 800adf4:	e001      	b.n	800adfa <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800adf6:	2307      	movs	r3, #7
 800adf8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	fb03 f202 	mul.w	r2, r3, r2
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae08:	61fb      	str	r3, [r7, #28]
 800ae0a:	e052      	b.n	800aeb2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	2b80      	cmp	r3, #128	; 0x80
 800ae10:	d003      	beq.n	800ae1a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae18:	d109      	bne.n	800ae2e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae1a:	4b29      	ldr	r3, [pc, #164]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae26:	d144      	bne.n	800aeb2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800ae28:	4b27      	ldr	r3, [pc, #156]	; (800aec8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800ae2a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae2c:	e041      	b.n	800aeb2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	2b20      	cmp	r3, #32
 800ae32:	d003      	beq.n	800ae3c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae3a:	d13a      	bne.n	800aeb2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800ae3c:	4b20      	ldr	r3, [pc, #128]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae48:	d133      	bne.n	800aeb2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800ae4a:	4b1d      	ldr	r3, [pc, #116]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d02d      	beq.n	800aeb2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800ae56:	4b1a      	ldr	r3, [pc, #104]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	091b      	lsrs	r3, r3, #4
 800ae5c:	f003 030f 	and.w	r3, r3, #15
 800ae60:	3301      	adds	r3, #1
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae68:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800ae6a:	4b15      	ldr	r3, [pc, #84]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ae6c:	695b      	ldr	r3, [r3, #20]
 800ae6e:	0a1b      	lsrs	r3, r3, #8
 800ae70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae74:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800ae76:	4b12      	ldr	r3, [pc, #72]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	0edb      	lsrs	r3, r3, #27
 800ae7c:	f003 031f 	and.w	r3, r3, #31
 800ae80:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10a      	bne.n	800ae9e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800ae88:	4b0d      	ldr	r3, [pc, #52]	; (800aec0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800ae94:	2311      	movs	r3, #17
 800ae96:	617b      	str	r3, [r7, #20]
 800ae98:	e001      	b.n	800ae9e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800ae9a:	2307      	movs	r3, #7
 800ae9c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	fb03 f202 	mul.w	r2, r3, r2
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeac:	61fb      	str	r3, [r7, #28]
 800aeae:	e000      	b.n	800aeb2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800aeb0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800aeb2:	69fb      	ldr	r3, [r7, #28]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3724      	adds	r7, #36	; 0x24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	40021000 	.word	0x40021000
 800aec4:	001fff68 	.word	0x001fff68
 800aec8:	00f42400 	.word	0x00f42400

0800aecc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08a      	sub	sp, #40	; 0x28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e078      	b.n	800afd0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d105      	bne.n	800aef6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7f9 f81b 	bl	8003f2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2203      	movs	r2, #3
 800aefa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f86a 	bl	800afd8 <HAL_SD_InitCard>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d001      	beq.n	800af0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e060      	b.n	800afd0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800af0e:	f107 0308 	add.w	r3, r7, #8
 800af12:	4619      	mov	r1, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fdcd 	bl	800bab4 <HAL_SD_GetCardStatus>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e055      	b.n	800afd0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800af24:	7e3b      	ldrb	r3, [r7, #24]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800af2a:	7e7b      	ldrb	r3, [r7, #25]
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af34:	2b01      	cmp	r3, #1
 800af36:	d10a      	bne.n	800af4e <HAL_SD_Init+0x82>
 800af38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d102      	bne.n	800af44 <HAL_SD_Init+0x78>
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d004      	beq.n	800af4e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af4a:	65da      	str	r2, [r3, #92]	; 0x5c
 800af4c:	e00b      	b.n	800af66 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af52:	2b01      	cmp	r3, #1
 800af54:	d104      	bne.n	800af60 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af5c:	65da      	str	r2, [r3, #92]	; 0x5c
 800af5e:	e002      	b.n	800af66 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 fe83 	bl	800bc78 <HAL_SD_ConfigWideBusOperation>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	e029      	b.n	800afd0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800af7c:	f7fa fa3e 	bl	80053fc <HAL_GetTick>
 800af80:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800af82:	e014      	b.n	800afae <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800af84:	f7fa fa3a 	bl	80053fc <HAL_GetTick>
 800af88:	4602      	mov	r2, r0
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af92:	d10c      	bne.n	800afae <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800afaa:	2303      	movs	r3, #3
 800afac:	e010      	b.n	800afd0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 ff76 	bl	800bea0 <HAL_SD_GetCardState>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b04      	cmp	r3, #4
 800afb8:	d1e4      	bne.n	800af84 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3728      	adds	r7, #40	; 0x28
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800afd8:	b5b0      	push	{r4, r5, r7, lr}
 800afda:	b08e      	sub	sp, #56	; 0x38
 800afdc:	af04      	add	r7, sp, #16
 800afde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800afe0:	2300      	movs	r3, #0
 800afe2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800afe4:	2300      	movs	r3, #0
 800afe6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800afe8:	2300      	movs	r3, #0
 800afea:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800afec:	2300      	movs	r3, #0
 800afee:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800aff0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800aff4:	f7fe fd4e 	bl	8009a94 <HAL_RCCEx_GetPeriphCLKFreq>
 800aff8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	2b00      	cmp	r3, #0
 800affe:	d109      	bne.n	800b014 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b00e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e079      	b.n	800b108 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	0a1b      	lsrs	r3, r3, #8
 800b018:	4a3d      	ldr	r2, [pc, #244]	; (800b110 <HAL_SD_InitCard+0x138>)
 800b01a:	fba2 2303 	umull	r2, r3, r2, r3
 800b01e:	091b      	lsrs	r3, r3, #4
 800b020:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d107      	bne.n	800b040 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f042 0210 	orr.w	r2, r2, #16
 800b03e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681d      	ldr	r5, [r3, #0]
 800b044:	466c      	mov	r4, sp
 800b046:	f107 0314 	add.w	r3, r7, #20
 800b04a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b04e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b052:	f107 0308 	add.w	r3, r7, #8
 800b056:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b058:	4628      	mov	r0, r5
 800b05a:	f003 fd1b 	bl	800ea94 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4618      	mov	r0, r3
 800b064:	f003 fd5e 	bl	800eb24 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	005b      	lsls	r3, r3, #1
 800b06c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b06e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b072:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b074:	4a27      	ldr	r2, [pc, #156]	; (800b114 <HAL_SD_InitCard+0x13c>)
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	fbb2 f3f3 	udiv	r3, r2, r3
 800b07c:	3301      	adds	r3, #1
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fa f9c8 	bl	8005414 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 ffeb 	bl	800c060 <SD_PowerON>
 800b08a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00b      	beq.n	800b0aa <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b09e:	6a3b      	ldr	r3, [r7, #32]
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e02e      	b.n	800b108 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 ff18 	bl	800bee0 <SD_InitCard>
 800b0b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00b      	beq.n	800b0d0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e01b      	b.n	800b108 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f003 fdb9 	bl	800ec50 <SDMMC_CmdBlockLength>
 800b0de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00f      	beq.n	800b106 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a0b      	ldr	r2, [pc, #44]	; (800b118 <HAL_SD_InitCard+0x140>)
 800b0ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0f2:	6a3b      	ldr	r3, [r7, #32]
 800b0f4:	431a      	orrs	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e000      	b.n	800b108 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3728      	adds	r7, #40	; 0x28
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bdb0      	pop	{r4, r5, r7, pc}
 800b110:	014f8b59 	.word	0x014f8b59
 800b114:	00012110 	.word	0x00012110
 800b118:	1fe00fff 	.word	0x1fe00fff

0800b11c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b092      	sub	sp, #72	; 0x48
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b12a:	f7fa f967 	bl	80053fc <HAL_GetTick>
 800b12e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d107      	bne.n	800b14e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b142:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e170      	b.n	800b430 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b01      	cmp	r3, #1
 800b158:	f040 8163 	bne.w	800b422 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	441a      	add	r2, r3
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d907      	bls.n	800b180 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b174:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e157      	b.n	800b430 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2203      	movs	r2, #3
 800b184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2200      	movs	r2, #0
 800b18e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b194:	2b01      	cmp	r3, #1
 800b196:	d002      	beq.n	800b19e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	025b      	lsls	r3, r3, #9
 800b19c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b19e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1a2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	025b      	lsls	r3, r3, #9
 800b1a8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b1aa:	2390      	movs	r3, #144	; 0x90
 800b1ac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f107 0214 	add.w	r2, r7, #20
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f003 fd17 	bl	800ebf8 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68da      	ldr	r2, [r3, #12]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1d8:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d90a      	bls.n	800b1f6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f003 fd75 	bl	800ecdc <SDMMC_CmdReadMultiBlock>
 800b1f2:	6478      	str	r0, [r7, #68]	; 0x44
 800b1f4:	e009      	b.n	800b20a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b202:	4618      	mov	r0, r3
 800b204:	f003 fd47 	bl	800ec96 <SDMMC_CmdReadSingleBlock>
 800b208:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b20a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d012      	beq.n	800b236 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a88      	ldr	r2, [pc, #544]	; (800b438 <HAL_SD_ReadBlocks+0x31c>)
 800b216:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b21c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b21e:	431a      	orrs	r2, r3
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	e0fc      	b.n	800b430 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b23a:	e061      	b.n	800b300 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b246:	2b00      	cmp	r3, #0
 800b248:	d03c      	beq.n	800b2c4 <HAL_SD_ReadBlocks+0x1a8>
 800b24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d039      	beq.n	800b2c4 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b250:	2300      	movs	r3, #0
 800b252:	643b      	str	r3, [r7, #64]	; 0x40
 800b254:	e033      	b.n	800b2be <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f003 fc44 	bl	800eae8 <SDMMC_ReadFIFO>
 800b260:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b264:	b2da      	uxtb	r2, r3
 800b266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b268:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b26c:	3301      	adds	r3, #1
 800b26e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b272:	3b01      	subs	r3, #1
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b278:	0a1b      	lsrs	r3, r3, #8
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b27e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b282:	3301      	adds	r3, #1
 800b284:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b288:	3b01      	subs	r3, #1
 800b28a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28e:	0c1b      	lsrs	r3, r3, #16
 800b290:	b2da      	uxtb	r2, r3
 800b292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b294:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b298:	3301      	adds	r3, #1
 800b29a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a4:	0e1b      	lsrs	r3, r3, #24
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2aa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800b2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	643b      	str	r3, [r7, #64]	; 0x40
 800b2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2c0:	2b07      	cmp	r3, #7
 800b2c2:	d9c8      	bls.n	800b256 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b2c4:	f7fa f89a 	bl	80053fc <HAL_GetTick>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	1ad3      	subs	r3, r2, r3
 800b2ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d902      	bls.n	800b2da <HAL_SD_ReadBlocks+0x1be>
 800b2d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d112      	bne.n	800b300 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a56      	ldr	r2, [pc, #344]	; (800b438 <HAL_SD_ReadBlocks+0x31c>)
 800b2e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	e097      	b.n	800b430 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b306:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d096      	beq.n	800b23c <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b31c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d022      	beq.n	800b372 <HAL_SD_ReadBlocks+0x256>
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d91f      	bls.n	800b372 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b336:	2b03      	cmp	r3, #3
 800b338:	d01b      	beq.n	800b372 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4618      	mov	r0, r3
 800b340:	f003 fd36 	bl	800edb0 <SDMMC_CmdStopTransfer>
 800b344:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d012      	beq.n	800b372 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a39      	ldr	r2, [pc, #228]	; (800b438 <HAL_SD_ReadBlocks+0x31c>)
 800b352:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b35a:	431a      	orrs	r2, r3
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	e05e      	b.n	800b430 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b378:	f003 0308 	and.w	r3, r3, #8
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d012      	beq.n	800b3a6 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a2c      	ldr	r2, [pc, #176]	; (800b438 <HAL_SD_ReadBlocks+0x31c>)
 800b386:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38c:	f043 0208 	orr.w	r2, r3, #8
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e044      	b.n	800b430 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ac:	f003 0302 	and.w	r3, r3, #2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d012      	beq.n	800b3da <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a1f      	ldr	r2, [pc, #124]	; (800b438 <HAL_SD_ReadBlocks+0x31c>)
 800b3ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c0:	f043 0202 	orr.w	r2, r3, #2
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e02a      	b.n	800b430 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e0:	f003 0320 	and.w	r3, r3, #32
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d012      	beq.n	800b40e <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a12      	ldr	r2, [pc, #72]	; (800b438 <HAL_SD_ReadBlocks+0x31c>)
 800b3ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f4:	f043 0220 	orr.w	r2, r3, #32
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e010      	b.n	800b430 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a0a      	ldr	r2, [pc, #40]	; (800b43c <HAL_SD_ReadBlocks+0x320>)
 800b414:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	e006      	b.n	800b430 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b426:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
  }
}
 800b430:	4618      	mov	r0, r3
 800b432:	3748      	adds	r7, #72	; 0x48
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	1fe00fff 	.word	0x1fe00fff
 800b43c:	18000f3a 	.word	0x18000f3a

0800b440 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b092      	sub	sp, #72	; 0x48
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b44e:	f7f9 ffd5 	bl	80053fc <HAL_GetTick>
 800b452:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d107      	bne.n	800b472 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b466:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e174      	b.n	800b75c <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	f040 8167 	bne.w	800b74e <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	441a      	add	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b490:	429a      	cmp	r2, r3
 800b492:	d907      	bls.n	800b4a4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b498:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e15b      	b.n	800b75c <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2203      	movs	r2, #3
 800b4a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d002      	beq.n	800b4c2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4be:	025b      	lsls	r3, r3, #9
 800b4c0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b4c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4c6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	025b      	lsls	r3, r3, #9
 800b4cc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b4ce:	2390      	movs	r3, #144	; 0x90
 800b4d0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f107 0218 	add.w	r2, r7, #24
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f003 fb85 	bl	800ebf8 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68da      	ldr	r2, [r3, #12]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4fc:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d90a      	bls.n	800b51a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2220      	movs	r2, #32
 800b508:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b510:	4618      	mov	r0, r3
 800b512:	f003 fc29 	bl	800ed68 <SDMMC_CmdWriteMultiBlock>
 800b516:	6478      	str	r0, [r7, #68]	; 0x44
 800b518:	e009      	b.n	800b52e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2210      	movs	r2, #16
 800b51e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b526:	4618      	mov	r0, r3
 800b528:	f003 fbfb 	bl	800ed22 <SDMMC_CmdWriteSingleBlock>
 800b52c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b52e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b530:	2b00      	cmp	r3, #0
 800b532:	d012      	beq.n	800b55a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a8a      	ldr	r2, [pc, #552]	; (800b764 <HAL_SD_WriteBlocks+0x324>)
 800b53a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b542:	431a      	orrs	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2200      	movs	r2, #0
 800b554:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	e100      	b.n	800b75c <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b55e:	e065      	b.n	800b62c <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d040      	beq.n	800b5f0 <HAL_SD_WriteBlocks+0x1b0>
 800b56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b570:	2b00      	cmp	r3, #0
 800b572:	d03d      	beq.n	800b5f0 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b574:	2300      	movs	r3, #0
 800b576:	643b      	str	r3, [r7, #64]	; 0x40
 800b578:	e037      	b.n	800b5ea <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 800b57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b582:	3301      	adds	r3, #1
 800b584:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b588:	3b01      	subs	r3, #1
 800b58a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	021a      	lsls	r2, r3, #8
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	4313      	orrs	r3, r2
 800b596:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59a:	3301      	adds	r3, #1
 800b59c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	041a      	lsls	r2, r3, #16
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	061a      	lsls	r2, r3, #24
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f107 0214 	add.w	r2, r7, #20
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f003 fa8f 	bl	800eb02 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	643b      	str	r3, [r7, #64]	; 0x40
 800b5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5ec:	2b07      	cmp	r3, #7
 800b5ee:	d9c4      	bls.n	800b57a <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b5f0:	f7f9 ff04 	bl	80053fc <HAL_GetTick>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d902      	bls.n	800b606 <HAL_SD_WriteBlocks+0x1c6>
 800b600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b602:	2b00      	cmp	r3, #0
 800b604:	d112      	bne.n	800b62c <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a56      	ldr	r2, [pc, #344]	; (800b764 <HAL_SD_WriteBlocks+0x324>)
 800b60c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b614:	431a      	orrs	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b628:	2303      	movs	r3, #3
 800b62a:	e097      	b.n	800b75c <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b632:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800b636:	2b00      	cmp	r3, #0
 800b638:	d092      	beq.n	800b560 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b648:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b654:	2b00      	cmp	r3, #0
 800b656:	d022      	beq.n	800b69e <HAL_SD_WriteBlocks+0x25e>
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d91f      	bls.n	800b69e <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b662:	2b03      	cmp	r3, #3
 800b664:	d01b      	beq.n	800b69e <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f003 fba0 	bl	800edb0 <SDMMC_CmdStopTransfer>
 800b670:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b674:	2b00      	cmp	r3, #0
 800b676:	d012      	beq.n	800b69e <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a39      	ldr	r2, [pc, #228]	; (800b764 <HAL_SD_WriteBlocks+0x324>)
 800b67e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b686:	431a      	orrs	r2, r3
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e05e      	b.n	800b75c <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a4:	f003 0308 	and.w	r3, r3, #8
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d012      	beq.n	800b6d2 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a2c      	ldr	r2, [pc, #176]	; (800b764 <HAL_SD_WriteBlocks+0x324>)
 800b6b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b8:	f043 0208 	orr.w	r2, r3, #8
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e044      	b.n	800b75c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d8:	f003 0302 	and.w	r3, r3, #2
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d012      	beq.n	800b706 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a1f      	ldr	r2, [pc, #124]	; (800b764 <HAL_SD_WriteBlocks+0x324>)
 800b6e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ec:	f043 0202 	orr.w	r2, r3, #2
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e02a      	b.n	800b75c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b70c:	f003 0310 	and.w	r3, r3, #16
 800b710:	2b00      	cmp	r3, #0
 800b712:	d012      	beq.n	800b73a <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a12      	ldr	r2, [pc, #72]	; (800b764 <HAL_SD_WriteBlocks+0x324>)
 800b71a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b720:	f043 0210 	orr.w	r2, r3, #16
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	e010      	b.n	800b75c <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a0a      	ldr	r2, [pc, #40]	; (800b768 <HAL_SD_WriteBlocks+0x328>)
 800b740:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	e006      	b.n	800b75c <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b752:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
  }
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3748      	adds	r7, #72	; 0x48
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	1fe00fff 	.word	0x1fe00fff
 800b768:	18000f3a 	.word	0x18000f3a

0800b76c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b77a:	0f9b      	lsrs	r3, r3, #30
 800b77c:	b2da      	uxtb	r2, r3
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b786:	0e9b      	lsrs	r3, r3, #26
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	f003 030f 	and.w	r3, r3, #15
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b798:	0e1b      	lsrs	r3, r3, #24
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	f003 0303 	and.w	r3, r3, #3
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7aa:	0c1b      	lsrs	r3, r3, #16
 800b7ac:	b2da      	uxtb	r2, r3
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7b6:	0a1b      	lsrs	r3, r3, #8
 800b7b8:	b2da      	uxtb	r2, r3
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7cc:	0d1b      	lsrs	r3, r3, #20
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7d8:	0c1b      	lsrs	r3, r3, #16
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	f003 030f 	and.w	r3, r3, #15
 800b7e0:	b2da      	uxtb	r2, r3
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ea:	0bdb      	lsrs	r3, r3, #15
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	f003 0301 	and.w	r3, r3, #1
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7fc:	0b9b      	lsrs	r3, r3, #14
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	b2da      	uxtb	r2, r3
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b80e:	0b5b      	lsrs	r3, r3, #13
 800b810:	b2db      	uxtb	r3, r3
 800b812:	f003 0301 	and.w	r3, r3, #1
 800b816:	b2da      	uxtb	r2, r3
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b820:	0b1b      	lsrs	r3, r3, #12
 800b822:	b2db      	uxtb	r3, r3
 800b824:	f003 0301 	and.w	r3, r3, #1
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2200      	movs	r2, #0
 800b832:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d163      	bne.n	800b904 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b840:	009a      	lsls	r2, r3, #2
 800b842:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b846:	4013      	ands	r3, r2
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b84c:	0f92      	lsrs	r2, r2, #30
 800b84e:	431a      	orrs	r2, r3
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b858:	0edb      	lsrs	r3, r3, #27
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	f003 0307 	and.w	r3, r3, #7
 800b860:	b2da      	uxtb	r2, r3
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b86a:	0e1b      	lsrs	r3, r3, #24
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	f003 0307 	and.w	r3, r3, #7
 800b872:	b2da      	uxtb	r2, r3
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b87c:	0d5b      	lsrs	r3, r3, #21
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	f003 0307 	and.w	r3, r3, #7
 800b884:	b2da      	uxtb	r2, r3
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b88e:	0c9b      	lsrs	r3, r3, #18
 800b890:	b2db      	uxtb	r3, r3
 800b892:	f003 0307 	and.w	r3, r3, #7
 800b896:	b2da      	uxtb	r2, r3
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8a0:	0bdb      	lsrs	r3, r3, #15
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	f003 0307 	and.w	r3, r3, #7
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	1c5a      	adds	r2, r3, #1
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	7e1b      	ldrb	r3, [r3, #24]
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	f003 0307 	and.w	r3, r3, #7
 800b8c2:	3302      	adds	r3, #2
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b8ce:	fb03 f202 	mul.w	r2, r3, r2
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	7a1b      	ldrb	r3, [r3, #8]
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	f003 030f 	and.w	r3, r3, #15
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	409a      	lsls	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b8f0:	0a52      	lsrs	r2, r2, #9
 800b8f2:	fb03 f202 	mul.w	r2, r3, r2
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b900:	659a      	str	r2, [r3, #88]	; 0x58
 800b902:	e031      	b.n	800b968 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d11d      	bne.n	800b948 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b910:	041b      	lsls	r3, r3, #16
 800b912:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b91a:	0c1b      	lsrs	r3, r3, #16
 800b91c:	431a      	orrs	r2, r3
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	3301      	adds	r3, #1
 800b928:	029a      	lsls	r2, r3, #10
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b93c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	659a      	str	r2, [r3, #88]	; 0x58
 800b946:	e00f      	b.n	800b968 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a58      	ldr	r2, [pc, #352]	; (800bab0 <HAL_SD_GetCardCSD+0x344>)
 800b94e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b954:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	e09d      	b.n	800baa4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b96c:	0b9b      	lsrs	r3, r3, #14
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	b2da      	uxtb	r2, r3
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b97e:	09db      	lsrs	r3, r3, #7
 800b980:	b2db      	uxtb	r3, r3
 800b982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b986:	b2da      	uxtb	r2, r3
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b990:	b2db      	uxtb	r3, r3
 800b992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b996:	b2da      	uxtb	r2, r3
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a0:	0fdb      	lsrs	r3, r3, #31
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ac:	0f5b      	lsrs	r3, r3, #29
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	f003 0303 	and.w	r3, r3, #3
 800b9b4:	b2da      	uxtb	r2, r3
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9be:	0e9b      	lsrs	r3, r3, #26
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	f003 0307 	and.w	r3, r3, #7
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9d0:	0d9b      	lsrs	r3, r3, #22
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	f003 030f 	and.w	r3, r3, #15
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e2:	0d5b      	lsrs	r3, r3, #21
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	b2da      	uxtb	r2, r3
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9fe:	0c1b      	lsrs	r3, r3, #16
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	f003 0301 	and.w	r3, r3, #1
 800ba06:	b2da      	uxtb	r2, r3
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba12:	0bdb      	lsrs	r3, r3, #15
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	b2da      	uxtb	r2, r3
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba26:	0b9b      	lsrs	r3, r3, #14
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	b2da      	uxtb	r2, r3
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba3a:	0b5b      	lsrs	r3, r3, #13
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba4e:	0b1b      	lsrs	r3, r3, #12
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	b2da      	uxtb	r2, r3
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba62:	0a9b      	lsrs	r3, r3, #10
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	f003 0303 	and.w	r3, r3, #3
 800ba6a:	b2da      	uxtb	r2, r3
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba76:	0a1b      	lsrs	r3, r3, #8
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	f003 0303 	and.w	r3, r3, #3
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba8a:	085b      	lsrs	r3, r3, #1
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba92:	b2da      	uxtb	r2, r3
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	1fe00fff 	.word	0x1fe00fff

0800bab4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b094      	sub	sp, #80	; 0x50
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800babe:	2300      	movs	r3, #0
 800bac0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800bac4:	f107 0308 	add.w	r3, r7, #8
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fbd4 	bl	800c278 <SD_SendSDStatus>
 800bad0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800bad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d011      	beq.n	800bafc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a4f      	ldr	r2, [pc, #316]	; (800bc1c <HAL_SD_GetCardStatus+0x168>)
 800bade:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bae6:	431a      	orrs	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bafa:	e070      	b.n	800bbde <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	099b      	lsrs	r3, r3, #6
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	f003 0303 	and.w	r3, r3, #3
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	095b      	lsrs	r3, r3, #5
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	0a1b      	lsrs	r3, r3, #8
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	0e1b      	lsrs	r3, r3, #24
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	061a      	lsls	r2, r3, #24
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	021b      	lsls	r3, r3, #8
 800bb3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb42:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	0a1b      	lsrs	r3, r3, #8
 800bb48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bb4c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	0e1b      	lsrs	r3, r3, #24
 800bb52:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	0a1b      	lsrs	r3, r3, #8
 800bb64:	b2da      	uxtb	r2, r3
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	0d1b      	lsrs	r3, r3, #20
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	f003 030f 	and.w	r3, r3, #15
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	0c1b      	lsrs	r3, r3, #16
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	0a9b      	lsrs	r3, r3, #10
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	0a1b      	lsrs	r3, r3, #8
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	f003 0303 	and.w	r3, r3, #3
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	091b      	lsrs	r3, r3, #4
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	f003 030f 	and.w	r3, r3, #15
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	f003 030f 	and.w	r3, r3, #15
 800bbce:	b2da      	uxtb	r2, r3
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	0e1b      	lsrs	r3, r3, #24
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f003 f832 	bl	800ec50 <SDMMC_CmdBlockLength>
 800bbec:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00d      	beq.n	800bc10 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a08      	ldr	r2, [pc, #32]	; (800bc1c <HAL_SD_GetCardStatus+0x168>)
 800bbfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc00:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2201      	movs	r2, #1
 800bc06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800bc10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3750      	adds	r7, #80	; 0x50
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	1fe00fff 	.word	0x1fe00fff

0800bc20 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bc78:	b5b0      	push	{r4, r5, r7, lr}
 800bc7a:	b090      	sub	sp, #64	; 0x40
 800bc7c:	af04      	add	r7, sp, #16
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2203      	movs	r2, #3
 800bc8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc94:	2b03      	cmp	r3, #3
 800bc96:	d02e      	beq.n	800bcf6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc9e:	d106      	bne.n	800bcae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	639a      	str	r2, [r3, #56]	; 0x38
 800bcac:	e029      	b.n	800bd02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcb4:	d10a      	bne.n	800bccc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fbd6 	bl	800c468 <SD_WideBus_Enable>
 800bcbc:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc4:	431a      	orrs	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	639a      	str	r2, [r3, #56]	; 0x38
 800bcca:	e01a      	b.n	800bd02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fc13 	bl	800c4fe <SD_WideBus_Disable>
 800bcd8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce0:	431a      	orrs	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	639a      	str	r2, [r3, #56]	; 0x38
 800bce6:	e00c      	b.n	800bd02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	639a      	str	r2, [r3, #56]	; 0x38
 800bcf4:	e005      	b.n	800bd02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d007      	beq.n	800bd1a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a60      	ldr	r2, [pc, #384]	; (800be90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800bd10:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bd18:	e097      	b.n	800be4a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800bd1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bd1e:	f7fd feb9 	bl	8009a94 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd22:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f000 8086 	beq.w	800be38 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	695a      	ldr	r2, [r3, #20]
 800bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd48:	4952      	ldr	r1, [pc, #328]	; (800be94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800bd4a:	fba1 1303 	umull	r1, r3, r1, r3
 800bd4e:	0e1b      	lsrs	r3, r3, #24
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d303      	bcc.n	800bd5c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	695b      	ldr	r3, [r3, #20]
 800bd58:	61fb      	str	r3, [r7, #28]
 800bd5a:	e05a      	b.n	800be12 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd64:	d103      	bne.n	800bd6e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	695b      	ldr	r3, [r3, #20]
 800bd6a:	61fb      	str	r3, [r7, #28]
 800bd6c:	e051      	b.n	800be12 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd76:	d126      	bne.n	800bdc6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	695b      	ldr	r3, [r3, #20]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10e      	bne.n	800bd9e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	4a45      	ldr	r2, [pc, #276]	; (800be98 <HAL_SD_ConfigWideBusOperation+0x220>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d906      	bls.n	800bd96 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800bd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8a:	4a42      	ldr	r2, [pc, #264]	; (800be94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800bd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd90:	0e5b      	lsrs	r3, r3, #25
 800bd92:	61fb      	str	r3, [r7, #28]
 800bd94:	e03d      	b.n	800be12 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	61fb      	str	r3, [r7, #28]
 800bd9c:	e039      	b.n	800be12 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	695b      	ldr	r3, [r3, #20]
 800bda2:	005b      	lsls	r3, r3, #1
 800bda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdaa:	4a3b      	ldr	r2, [pc, #236]	; (800be98 <HAL_SD_ConfigWideBusOperation+0x220>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d906      	bls.n	800bdbe <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	4a38      	ldr	r2, [pc, #224]	; (800be94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800bdb4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb8:	0e5b      	lsrs	r3, r3, #25
 800bdba:	61fb      	str	r3, [r7, #28]
 800bdbc:	e029      	b.n	800be12 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	695b      	ldr	r3, [r3, #20]
 800bdc2:	61fb      	str	r3, [r7, #28]
 800bdc4:	e025      	b.n	800be12 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	695b      	ldr	r3, [r3, #20]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d10e      	bne.n	800bdec <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800bdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd0:	4a32      	ldr	r2, [pc, #200]	; (800be9c <HAL_SD_ConfigWideBusOperation+0x224>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d906      	bls.n	800bde4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	4a2e      	ldr	r2, [pc, #184]	; (800be94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800bdda:	fba2 2303 	umull	r2, r3, r2, r3
 800bdde:	0e1b      	lsrs	r3, r3, #24
 800bde0:	61fb      	str	r3, [r7, #28]
 800bde2:	e016      	b.n	800be12 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	695b      	ldr	r3, [r3, #20]
 800bde8:	61fb      	str	r3, [r7, #28]
 800bdea:	e012      	b.n	800be12 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf8:	4a28      	ldr	r2, [pc, #160]	; (800be9c <HAL_SD_ConfigWideBusOperation+0x224>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d906      	bls.n	800be0c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	4a24      	ldr	r2, [pc, #144]	; (800be94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800be02:	fba2 2303 	umull	r2, r3, r2, r3
 800be06:	0e1b      	lsrs	r3, r3, #24
 800be08:	61fb      	str	r3, [r7, #28]
 800be0a:	e002      	b.n	800be12 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	695b      	ldr	r3, [r3, #20]
 800be10:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681d      	ldr	r5, [r3, #0]
 800be1c:	466c      	mov	r4, sp
 800be1e:	f107 0318 	add.w	r3, r7, #24
 800be22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800be2a:	f107 030c 	add.w	r3, r7, #12
 800be2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be30:	4628      	mov	r0, r5
 800be32:	f002 fe2f 	bl	800ea94 <SDMMC_Init>
 800be36:	e008      	b.n	800be4a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800be52:	4618      	mov	r0, r3
 800be54:	f002 fefc 	bl	800ec50 <SDMMC_CmdBlockLength>
 800be58:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00c      	beq.n	800be7a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a0a      	ldr	r2, [pc, #40]	; (800be90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800be66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6e:	431a      	orrs	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800be82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be86:	4618      	mov	r0, r3
 800be88:	3730      	adds	r7, #48	; 0x30
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bdb0      	pop	{r4, r5, r7, pc}
 800be8e:	bf00      	nop
 800be90:	1fe00fff 	.word	0x1fe00fff
 800be94:	55e63b89 	.word	0x55e63b89
 800be98:	02faf080 	.word	0x02faf080
 800be9c:	017d7840 	.word	0x017d7840

0800bea0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800beac:	f107 030c 	add.w	r3, r7, #12
 800beb0:	4619      	mov	r1, r3
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fab0 	bl	800c418 <SD_SendStatus>
 800beb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d005      	beq.n	800becc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	431a      	orrs	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	0a5b      	lsrs	r3, r3, #9
 800bed0:	f003 030f 	and.w	r3, r3, #15
 800bed4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bed6:	693b      	ldr	r3, [r7, #16]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3718      	adds	r7, #24
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bee0:	b5b0      	push	{r4, r5, r7, lr}
 800bee2:	b090      	sub	sp, #64	; 0x40
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bee8:	2301      	movs	r3, #1
 800beea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f002 fe29 	bl	800eb48 <SDMMC_GetPowerState>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d102      	bne.n	800bf02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800befc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bf00:	e0a9      	b.n	800c056 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	d02e      	beq.n	800bf68 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f003 f86e 	bl	800eff0 <SDMMC_CmdSendCID>
 800bf14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <SD_InitCard+0x40>
    {
      return errorstate;
 800bf1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf1e:	e09a      	b.n	800c056 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2100      	movs	r1, #0
 800bf26:	4618      	mov	r0, r3
 800bf28:	f002 fe53 	bl	800ebd2 <SDMMC_GetResponse>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2104      	movs	r1, #4
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f002 fe4a 	bl	800ebd2 <SDMMC_GetResponse>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2108      	movs	r1, #8
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f002 fe41 	bl	800ebd2 <SDMMC_GetResponse>
 800bf50:	4602      	mov	r2, r0
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	210c      	movs	r1, #12
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f002 fe38 	bl	800ebd2 <SDMMC_GetResponse>
 800bf62:	4602      	mov	r2, r0
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf6c:	2b03      	cmp	r3, #3
 800bf6e:	d00d      	beq.n	800bf8c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f107 020e 	add.w	r2, r7, #14
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f003 f877 	bl	800f06e <SDMMC_CmdSetRelAdd>
 800bf80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d001      	beq.n	800bf8c <SD_InitCard+0xac>
    {
      return errorstate;
 800bf88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf8a:	e064      	b.n	800c056 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf90:	2b03      	cmp	r3, #3
 800bf92:	d036      	beq.n	800c002 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bf94:	89fb      	ldrh	r3, [r7, #14]
 800bf96:	461a      	mov	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfa4:	041b      	lsls	r3, r3, #16
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	f003 f840 	bl	800f02e <SDMMC_CmdSendCSD>
 800bfae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bfb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <SD_InitCard+0xda>
    {
      return errorstate;
 800bfb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb8:	e04d      	b.n	800c056 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f002 fe06 	bl	800ebd2 <SDMMC_GetResponse>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2104      	movs	r1, #4
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f002 fdfd 	bl	800ebd2 <SDMMC_GetResponse>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2108      	movs	r1, #8
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f002 fdf4 	bl	800ebd2 <SDMMC_GetResponse>
 800bfea:	4602      	mov	r2, r0
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	210c      	movs	r1, #12
 800bff6:	4618      	mov	r0, r3
 800bff8:	f002 fdeb 	bl	800ebd2 <SDMMC_GetResponse>
 800bffc:	4602      	mov	r2, r0
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2104      	movs	r1, #4
 800c008:	4618      	mov	r0, r3
 800c00a:	f002 fde2 	bl	800ebd2 <SDMMC_GetResponse>
 800c00e:	4603      	mov	r3, r0
 800c010:	0d1a      	lsrs	r2, r3, #20
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c016:	f107 0310 	add.w	r3, r7, #16
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff fba5 	bl	800b76c <HAL_SD_GetCardCSD>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c028:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c02c:	e013      	b.n	800c056 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6819      	ldr	r1, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c036:	041b      	lsls	r3, r3, #16
 800c038:	2200      	movs	r2, #0
 800c03a:	461c      	mov	r4, r3
 800c03c:	4615      	mov	r5, r2
 800c03e:	4622      	mov	r2, r4
 800c040:	462b      	mov	r3, r5
 800c042:	4608      	mov	r0, r1
 800c044:	f002 feea 	bl	800ee1c <SDMMC_CmdSelDesel>
 800c048:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d001      	beq.n	800c054 <SD_InitCard+0x174>
  {
    return errorstate;
 800c050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c052:	e000      	b.n	800c056 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3740      	adds	r7, #64	; 0x40
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c060 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b088      	sub	sp, #32
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c068:	2300      	movs	r3, #0
 800c06a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800c06c:	2300      	movs	r3, #0
 800c06e:	61fb      	str	r3, [r7, #28]
 800c070:	2300      	movs	r3, #0
 800c072:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800c074:	f7f9 f9c2 	bl	80053fc <HAL_GetTick>
 800c078:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4618      	mov	r0, r3
 800c080:	f002 fef0 	bl	800ee64 <SDMMC_CmdGoIdleState>
 800c084:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d001      	beq.n	800c090 <SD_PowerON+0x30>
  {
    return errorstate;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	e0ed      	b.n	800c26c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4618      	mov	r0, r3
 800c096:	f002 ff03 	bl	800eea0 <SDMMC_CmdOperCond>
 800c09a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00d      	beq.n	800c0be <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f002 fed9 	bl	800ee64 <SDMMC_CmdGoIdleState>
 800c0b2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d004      	beq.n	800c0c4 <SD_PowerON+0x64>
    {
      return errorstate;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	e0d6      	b.n	800c26c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d137      	bne.n	800c13c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f002 ff04 	bl	800eee0 <SDMMC_CmdAppCommand>
 800c0d8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d02d      	beq.n	800c13c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c0e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c0e4:	e0c2      	b.n	800c26c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f002 fef7 	bl	800eee0 <SDMMC_CmdAppCommand>
 800c0f2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d001      	beq.n	800c0fe <SD_PowerON+0x9e>
    {
      return errorstate;
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	e0b6      	b.n	800c26c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	495c      	ldr	r1, [pc, #368]	; (800c274 <SD_PowerON+0x214>)
 800c104:	4618      	mov	r0, r3
 800c106:	f002 ff0e 	bl	800ef26 <SDMMC_CmdAppOperCommand>
 800c10a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d002      	beq.n	800c118 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c112:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c116:	e0a9      	b.n	800c26c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2100      	movs	r1, #0
 800c11e:	4618      	mov	r0, r3
 800c120:	f002 fd57 	bl	800ebd2 <SDMMC_GetResponse>
 800c124:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	0fdb      	lsrs	r3, r3, #31
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d101      	bne.n	800c132 <SD_PowerON+0xd2>
 800c12e:	2301      	movs	r3, #1
 800c130:	e000      	b.n	800c134 <SD_PowerON+0xd4>
 800c132:	2300      	movs	r3, #0
 800c134:	61bb      	str	r3, [r7, #24]

    count++;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	3301      	adds	r3, #1
 800c13a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c142:	4293      	cmp	r3, r2
 800c144:	d802      	bhi.n	800c14c <SD_PowerON+0xec>
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d0cc      	beq.n	800c0e6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c152:	4293      	cmp	r3, r2
 800c154:	d902      	bls.n	800c15c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c15a:	e087      	b.n	800c26c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c162:	2b00      	cmp	r3, #0
 800c164:	d07e      	beq.n	800c264 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	699b      	ldr	r3, [r3, #24]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d17a      	bne.n	800c26a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d075      	beq.n	800c26a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c184:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f042 0208 	orr.w	r2, r2, #8
 800c194:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f002 ffce 	bl	800f13c <SDMMC_CmdVoltageSwitch>
 800c1a0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00c      	beq.n	800c1c2 <SD_PowerON+0x162>
        {
          return errorstate;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	e05f      	b.n	800c26c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c1ac:	f7f9 f926 	bl	80053fc <HAL_GetTick>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	1ad3      	subs	r3, r2, r3
 800c1b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1ba:	d102      	bne.n	800c1c2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800c1bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1c0:	e054      	b.n	800c26c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1d0:	d1ec      	bne.n	800c1ac <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c1da:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1ea:	d002      	beq.n	800c1f2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800c1ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c1f0:	e03c      	b.n	800c26c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800c1f2:	2001      	movs	r0, #1
 800c1f4:	f000 fa9e 	bl	800c734 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f042 0204 	orr.w	r2, r2, #4
 800c206:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800c208:	e00a      	b.n	800c220 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c20a:	f7f9 f8f7 	bl	80053fc <HAL_GetTick>
 800c20e:	4602      	mov	r2, r0
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c218:	d102      	bne.n	800c220 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800c21a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c21e:	e025      	b.n	800c26c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c22a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c22e:	d1ec      	bne.n	800c20a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c238:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c248:	d102      	bne.n	800c250 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c24a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c24e:	e00d      	b.n	800c26c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2213      	movs	r2, #19
 800c256:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c260:	639a      	str	r2, [r3, #56]	; 0x38
 800c262:	e002      	b.n	800c26a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3720      	adds	r7, #32
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	c1100000 	.word	0xc1100000

0800c278 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b08c      	sub	sp, #48	; 0x30
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c282:	f7f9 f8bb 	bl	80053fc <HAL_GetTick>
 800c286:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2100      	movs	r1, #0
 800c292:	4618      	mov	r0, r3
 800c294:	f002 fc9d 	bl	800ebd2 <SDMMC_GetResponse>
 800c298:	4603      	mov	r3, r0
 800c29a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c29e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2a2:	d102      	bne.n	800c2aa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c2a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2a8:	e0b0      	b.n	800c40c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2140      	movs	r1, #64	; 0x40
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f002 fccd 	bl	800ec50 <SDMMC_CmdBlockLength>
 800c2b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d005      	beq.n	800c2ca <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	e0a0      	b.n	800c40c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2d2:	041b      	lsls	r3, r3, #16
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	4610      	mov	r0, r2
 800c2d8:	f002 fe02 	bl	800eee0 <SDMMC_CmdAppCommand>
 800c2dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2de:	6a3b      	ldr	r3, [r7, #32]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d005      	beq.n	800c2f0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800c2ec:	6a3b      	ldr	r3, [r7, #32]
 800c2ee:	e08d      	b.n	800c40c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c2f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2f4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800c2f6:	2340      	movs	r3, #64	; 0x40
 800c2f8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c2fa:	2360      	movs	r3, #96	; 0x60
 800c2fc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c2fe:	2302      	movs	r3, #2
 800c300:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c302:	2300      	movs	r3, #0
 800c304:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c306:	2301      	movs	r3, #1
 800c308:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f107 0208 	add.w	r2, r7, #8
 800c312:	4611      	mov	r1, r2
 800c314:	4618      	mov	r0, r3
 800c316:	f002 fc6f 	bl	800ebf8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4618      	mov	r0, r3
 800c320:	f002 feea 	bl	800f0f8 <SDMMC_CmdStatusRegister>
 800c324:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c326:	6a3b      	ldr	r3, [r7, #32]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d02b      	beq.n	800c384 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	e069      	b.n	800c40c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c33e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d013      	beq.n	800c36e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800c346:	2300      	movs	r3, #0
 800c348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c34a:	e00d      	b.n	800c368 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4618      	mov	r0, r3
 800c352:	f002 fbc9 	bl	800eae8 <SDMMC_ReadFIFO>
 800c356:	4602      	mov	r2, r0
 800c358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35a:	601a      	str	r2, [r3, #0]
        pData++;
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35e:	3304      	adds	r3, #4
 800c360:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800c362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c364:	3301      	adds	r3, #1
 800c366:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36a:	2b07      	cmp	r3, #7
 800c36c:	d9ee      	bls.n	800c34c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c36e:	f7f9 f845 	bl	80053fc <HAL_GetTick>
 800c372:	4602      	mov	r2, r0
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c37c:	d102      	bne.n	800c384 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c37e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c382:	e043      	b.n	800c40c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c38a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d0d2      	beq.n	800c338 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c398:	f003 0308 	and.w	r3, r3, #8
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d001      	beq.n	800c3a4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c3a0:	2308      	movs	r3, #8
 800c3a2:	e033      	b.n	800c40c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3aa:	f003 0302 	and.w	r3, r3, #2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c3b2:	2302      	movs	r3, #2
 800c3b4:	e02a      	b.n	800c40c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3bc:	f003 0320 	and.w	r3, r3, #32
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d017      	beq.n	800c3f4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800c3c4:	2320      	movs	r3, #32
 800c3c6:	e021      	b.n	800c40c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f002 fb8b 	bl	800eae8 <SDMMC_ReadFIFO>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	601a      	str	r2, [r3, #0]
    pData++;
 800c3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3da:	3304      	adds	r3, #4
 800c3dc:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c3de:	f7f9 f80d 	bl	80053fc <HAL_GetTick>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ec:	d102      	bne.n	800c3f4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c3ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3f2:	e00b      	b.n	800c40c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1e2      	bne.n	800c3c8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a03      	ldr	r2, [pc, #12]	; (800c414 <SD_SendSDStatus+0x19c>)
 800c408:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3730      	adds	r7, #48	; 0x30
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	18000f3a 	.word	0x18000f3a

0800c418 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d102      	bne.n	800c42e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c428:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c42c:	e018      	b.n	800c460 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c436:	041b      	lsls	r3, r3, #16
 800c438:	4619      	mov	r1, r3
 800c43a:	4610      	mov	r0, r2
 800c43c:	f002 fe39 	bl	800f0b2 <SDMMC_CmdSendStatus>
 800c440:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d001      	beq.n	800c44c <SD_SendStatus+0x34>
  {
    return errorstate;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	e009      	b.n	800c460 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2100      	movs	r1, #0
 800c452:	4618      	mov	r0, r3
 800c454:	f002 fbbd 	bl	800ebd2 <SDMMC_GetResponse>
 800c458:	4602      	mov	r2, r0
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c45e:	2300      	movs	r3, #0
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b086      	sub	sp, #24
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c470:	2300      	movs	r3, #0
 800c472:	60fb      	str	r3, [r7, #12]
 800c474:	2300      	movs	r3, #0
 800c476:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2100      	movs	r1, #0
 800c47e:	4618      	mov	r0, r3
 800c480:	f002 fba7 	bl	800ebd2 <SDMMC_GetResponse>
 800c484:	4603      	mov	r3, r0
 800c486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c48a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c48e:	d102      	bne.n	800c496 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c494:	e02f      	b.n	800c4f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c496:	f107 030c 	add.w	r3, r7, #12
 800c49a:	4619      	mov	r1, r3
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f879 	bl	800c594 <SD_FindSCR>
 800c4a2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d001      	beq.n	800c4ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	e023      	b.n	800c4f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d01c      	beq.n	800c4f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4c0:	041b      	lsls	r3, r3, #16
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	f002 fd0b 	bl	800eee0 <SDMMC_CmdAppCommand>
 800c4ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d001      	beq.n	800c4d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	e00f      	b.n	800c4f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2102      	movs	r1, #2
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f002 fd42 	bl	800ef66 <SDMMC_CmdBusWidth>
 800c4e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	e003      	b.n	800c4f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	e001      	b.n	800c4f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c4f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3718      	adds	r7, #24
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b086      	sub	sp, #24
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c506:	2300      	movs	r3, #0
 800c508:	60fb      	str	r3, [r7, #12]
 800c50a:	2300      	movs	r3, #0
 800c50c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2100      	movs	r1, #0
 800c514:	4618      	mov	r0, r3
 800c516:	f002 fb5c 	bl	800ebd2 <SDMMC_GetResponse>
 800c51a:	4603      	mov	r3, r0
 800c51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c524:	d102      	bne.n	800c52c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c526:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c52a:	e02f      	b.n	800c58c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c52c:	f107 030c 	add.w	r3, r7, #12
 800c530:	4619      	mov	r1, r3
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 f82e 	bl	800c594 <SD_FindSCR>
 800c538:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d001      	beq.n	800c544 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	e023      	b.n	800c58c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d01c      	beq.n	800c588 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c556:	041b      	lsls	r3, r3, #16
 800c558:	4619      	mov	r1, r3
 800c55a:	4610      	mov	r0, r2
 800c55c:	f002 fcc0 	bl	800eee0 <SDMMC_CmdAppCommand>
 800c560:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d001      	beq.n	800c56c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	e00f      	b.n	800c58c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2100      	movs	r1, #0
 800c572:	4618      	mov	r0, r3
 800c574:	f002 fcf7 	bl	800ef66 <SDMMC_CmdBusWidth>
 800c578:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d001      	beq.n	800c584 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	e003      	b.n	800c58c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c584:	2300      	movs	r3, #0
 800c586:	e001      	b.n	800c58c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c588:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08e      	sub	sp, #56	; 0x38
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c59e:	f7f8 ff2d 	bl	80053fc <HAL_GetTick>
 800c5a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	60bb      	str	r3, [r7, #8]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2108      	movs	r1, #8
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f002 fb48 	bl	800ec50 <SDMMC_CmdBlockLength>
 800c5c0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d001      	beq.n	800c5cc <SD_FindSCR+0x38>
  {
    return errorstate;
 800c5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ca:	e0ad      	b.n	800c728 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5d4:	041b      	lsls	r3, r3, #16
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4610      	mov	r0, r2
 800c5da:	f002 fc81 	bl	800eee0 <SDMMC_CmdAppCommand>
 800c5de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d001      	beq.n	800c5ea <SD_FindSCR+0x56>
  {
    return errorstate;
 800c5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e8:	e09e      	b.n	800c728 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c5ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5ee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c5f0:	2308      	movs	r3, #8
 800c5f2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c5f4:	2330      	movs	r3, #48	; 0x30
 800c5f6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c600:	2301      	movs	r3, #1
 800c602:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f107 0210 	add.w	r2, r7, #16
 800c60c:	4611      	mov	r1, r2
 800c60e:	4618      	mov	r0, r3
 800c610:	f002 faf2 	bl	800ebf8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4618      	mov	r0, r3
 800c61a:	f002 fcc7 	bl	800efac <SDMMC_CmdSendSCR>
 800c61e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c622:	2b00      	cmp	r3, #0
 800c624:	d027      	beq.n	800c676 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800c626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c628:	e07e      	b.n	800c728 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c634:	2b00      	cmp	r3, #0
 800c636:	d113      	bne.n	800c660 <SD_FindSCR+0xcc>
 800c638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d110      	bne.n	800c660 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4618      	mov	r0, r3
 800c644:	f002 fa50 	bl	800eae8 <SDMMC_ReadFIFO>
 800c648:	4603      	mov	r3, r0
 800c64a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4618      	mov	r0, r3
 800c652:	f002 fa49 	bl	800eae8 <SDMMC_ReadFIFO>
 800c656:	4603      	mov	r3, r0
 800c658:	60fb      	str	r3, [r7, #12]
      index++;
 800c65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65c:	3301      	adds	r3, #1
 800c65e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c660:	f7f8 fecc 	bl	80053fc <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c66e:	d102      	bne.n	800c676 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c670:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c674:	e058      	b.n	800c728 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c67c:	f240 532a 	movw	r3, #1322	; 0x52a
 800c680:	4013      	ands	r3, r2
 800c682:	2b00      	cmp	r3, #0
 800c684:	d0d1      	beq.n	800c62a <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c68c:	f003 0308 	and.w	r3, r3, #8
 800c690:	2b00      	cmp	r3, #0
 800c692:	d005      	beq.n	800c6a0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2208      	movs	r2, #8
 800c69a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c69c:	2308      	movs	r3, #8
 800c69e:	e043      	b.n	800c728 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a6:	f003 0302 	and.w	r3, r3, #2
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d005      	beq.n	800c6ba <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2202      	movs	r2, #2
 800c6b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	e036      	b.n	800c728 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c0:	f003 0320 	and.w	r3, r3, #32
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d005      	beq.n	800c6d4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2220      	movs	r2, #32
 800c6ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c6d0:	2320      	movs	r3, #32
 800c6d2:	e029      	b.n	800c728 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a15      	ldr	r2, [pc, #84]	; (800c730 <SD_FindSCR+0x19c>)
 800c6da:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	061a      	lsls	r2, r3, #24
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	021b      	lsls	r3, r3, #8
 800c6e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c6e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	0a1b      	lsrs	r3, r3, #8
 800c6ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c6f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	0e1b      	lsrs	r3, r3, #24
 800c6f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fc:	601a      	str	r2, [r3, #0]
    scr++;
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	3304      	adds	r3, #4
 800c702:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	061a      	lsls	r2, r3, #24
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	021b      	lsls	r3, r3, #8
 800c70c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c710:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	0a1b      	lsrs	r3, r3, #8
 800c716:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c71a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	0e1b      	lsrs	r3, r3, #24
 800c720:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c724:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3738      	adds	r7, #56	; 0x38
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	18000f3a 	.word	0x18000f3a

0800c734 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	4603      	mov	r3, r0
 800c73c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800c73e:	bf00      	nop
 800c740:	370c      	adds	r7, #12
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr

0800c74a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b084      	sub	sp, #16
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d101      	bne.n	800c75c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	e095      	b.n	800c888 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c760:	2b00      	cmp	r3, #0
 800c762:	d108      	bne.n	800c776 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c76c:	d009      	beq.n	800c782 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	61da      	str	r2, [r3, #28]
 800c774:	e005      	b.n	800c782 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b00      	cmp	r3, #0
 800c792:	d106      	bne.n	800c7a2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7f7 fc49 	bl	8004034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2202      	movs	r2, #2
 800c7a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c7c2:	d902      	bls.n	800c7ca <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	e002      	b.n	800c7d0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c7ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	68db      	ldr	r3, [r3, #12]
 800c7d4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c7d8:	d007      	beq.n	800c7ea <HAL_SPI_Init+0xa0>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c7e2:	d002      	beq.n	800c7ea <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c7fa:	431a      	orrs	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	691b      	ldr	r3, [r3, #16]
 800c800:	f003 0302 	and.w	r3, r3, #2
 800c804:	431a      	orrs	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	695b      	ldr	r3, [r3, #20]
 800c80a:	f003 0301 	and.w	r3, r3, #1
 800c80e:	431a      	orrs	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c818:	431a      	orrs	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	69db      	ldr	r3, [r3, #28]
 800c81e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c822:	431a      	orrs	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6a1b      	ldr	r3, [r3, #32]
 800c828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c82c:	ea42 0103 	orr.w	r1, r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c834:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	430a      	orrs	r2, r1
 800c83e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	699b      	ldr	r3, [r3, #24]
 800c844:	0c1b      	lsrs	r3, r3, #16
 800c846:	f003 0204 	and.w	r2, r3, #4
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84e:	f003 0310 	and.w	r3, r3, #16
 800c852:	431a      	orrs	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c858:	f003 0308 	and.w	r3, r3, #8
 800c85c:	431a      	orrs	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c866:	ea42 0103 	orr.w	r1, r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	430a      	orrs	r2, r1
 800c876:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d101      	bne.n	800c8a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e049      	b.n	800c936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d106      	bne.n	800c8bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7f7 fbfe 	bl	80040b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2202      	movs	r2, #2
 800c8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	3304      	adds	r3, #4
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	4610      	mov	r0, r2
 800c8d0:	f000 fad2 	bl	800ce78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
	...

0800c940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	2b01      	cmp	r3, #1
 800c952:	d001      	beq.n	800c958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c954:	2301      	movs	r3, #1
 800c956:	e04f      	b.n	800c9f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2202      	movs	r2, #2
 800c95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	68da      	ldr	r2, [r3, #12]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f042 0201 	orr.w	r2, r2, #1
 800c96e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a23      	ldr	r2, [pc, #140]	; (800ca04 <HAL_TIM_Base_Start_IT+0xc4>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d01d      	beq.n	800c9b6 <HAL_TIM_Base_Start_IT+0x76>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c982:	d018      	beq.n	800c9b6 <HAL_TIM_Base_Start_IT+0x76>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a1f      	ldr	r2, [pc, #124]	; (800ca08 <HAL_TIM_Base_Start_IT+0xc8>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d013      	beq.n	800c9b6 <HAL_TIM_Base_Start_IT+0x76>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a1e      	ldr	r2, [pc, #120]	; (800ca0c <HAL_TIM_Base_Start_IT+0xcc>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d00e      	beq.n	800c9b6 <HAL_TIM_Base_Start_IT+0x76>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a1c      	ldr	r2, [pc, #112]	; (800ca10 <HAL_TIM_Base_Start_IT+0xd0>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d009      	beq.n	800c9b6 <HAL_TIM_Base_Start_IT+0x76>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a1b      	ldr	r2, [pc, #108]	; (800ca14 <HAL_TIM_Base_Start_IT+0xd4>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d004      	beq.n	800c9b6 <HAL_TIM_Base_Start_IT+0x76>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a19      	ldr	r2, [pc, #100]	; (800ca18 <HAL_TIM_Base_Start_IT+0xd8>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d115      	bne.n	800c9e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	689a      	ldr	r2, [r3, #8]
 800c9bc:	4b17      	ldr	r3, [pc, #92]	; (800ca1c <HAL_TIM_Base_Start_IT+0xdc>)
 800c9be:	4013      	ands	r3, r2
 800c9c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2b06      	cmp	r3, #6
 800c9c6:	d015      	beq.n	800c9f4 <HAL_TIM_Base_Start_IT+0xb4>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9ce:	d011      	beq.n	800c9f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f042 0201 	orr.w	r2, r2, #1
 800c9de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9e0:	e008      	b.n	800c9f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f042 0201 	orr.w	r2, r2, #1
 800c9f0:	601a      	str	r2, [r3, #0]
 800c9f2:	e000      	b.n	800c9f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3714      	adds	r7, #20
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr
 800ca04:	40012c00 	.word	0x40012c00
 800ca08:	40000400 	.word	0x40000400
 800ca0c:	40000800 	.word	0x40000800
 800ca10:	40000c00 	.word	0x40000c00
 800ca14:	40013400 	.word	0x40013400
 800ca18:	40014000 	.word	0x40014000
 800ca1c:	00010007 	.word	0x00010007

0800ca20 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d101      	bne.n	800ca32 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e049      	b.n	800cac6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d106      	bne.n	800ca4c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 f841 	bl	800cace <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2202      	movs	r2, #2
 800ca50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	3304      	adds	r3, #4
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	4610      	mov	r0, r2
 800ca60:	f000 fa0a 	bl	800ce78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2201      	movs	r2, #1
 800ca68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800cace:	b480      	push	{r7}
 800cad0:	b083      	sub	sp, #12
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800cad6:	bf00      	nop
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr

0800cae2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b082      	sub	sp, #8
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	691b      	ldr	r3, [r3, #16]
 800caf0:	f003 0302 	and.w	r3, r3, #2
 800caf4:	2b02      	cmp	r3, #2
 800caf6:	d122      	bne.n	800cb3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	f003 0302 	and.w	r3, r3, #2
 800cb02:	2b02      	cmp	r3, #2
 800cb04:	d11b      	bne.n	800cb3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f06f 0202 	mvn.w	r2, #2
 800cb0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2201      	movs	r2, #1
 800cb14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	f003 0303 	and.w	r3, r3, #3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d003      	beq.n	800cb2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 f989 	bl	800ce3c <HAL_TIM_IC_CaptureCallback>
 800cb2a:	e005      	b.n	800cb38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 f97b 	bl	800ce28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f98c 	bl	800ce50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	f003 0304 	and.w	r3, r3, #4
 800cb48:	2b04      	cmp	r3, #4
 800cb4a:	d122      	bne.n	800cb92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	f003 0304 	and.w	r3, r3, #4
 800cb56:	2b04      	cmp	r3, #4
 800cb58:	d11b      	bne.n	800cb92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f06f 0204 	mvn.w	r2, #4
 800cb62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2202      	movs	r2, #2
 800cb68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	699b      	ldr	r3, [r3, #24]
 800cb70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d003      	beq.n	800cb80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 f95f 	bl	800ce3c <HAL_TIM_IC_CaptureCallback>
 800cb7e:	e005      	b.n	800cb8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f951 	bl	800ce28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 f962 	bl	800ce50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	691b      	ldr	r3, [r3, #16]
 800cb98:	f003 0308 	and.w	r3, r3, #8
 800cb9c:	2b08      	cmp	r3, #8
 800cb9e:	d122      	bne.n	800cbe6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	f003 0308 	and.w	r3, r3, #8
 800cbaa:	2b08      	cmp	r3, #8
 800cbac:	d11b      	bne.n	800cbe6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f06f 0208 	mvn.w	r2, #8
 800cbb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2204      	movs	r2, #4
 800cbbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	69db      	ldr	r3, [r3, #28]
 800cbc4:	f003 0303 	and.w	r3, r3, #3
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d003      	beq.n	800cbd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 f935 	bl	800ce3c <HAL_TIM_IC_CaptureCallback>
 800cbd2:	e005      	b.n	800cbe0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f927 	bl	800ce28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f938 	bl	800ce50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	f003 0310 	and.w	r3, r3, #16
 800cbf0:	2b10      	cmp	r3, #16
 800cbf2:	d122      	bne.n	800cc3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	f003 0310 	and.w	r3, r3, #16
 800cbfe:	2b10      	cmp	r3, #16
 800cc00:	d11b      	bne.n	800cc3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f06f 0210 	mvn.w	r2, #16
 800cc0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2208      	movs	r2, #8
 800cc10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	69db      	ldr	r3, [r3, #28]
 800cc18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d003      	beq.n	800cc28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 f90b 	bl	800ce3c <HAL_TIM_IC_CaptureCallback>
 800cc26:	e005      	b.n	800cc34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f8fd 	bl	800ce28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 f90e 	bl	800ce50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	f003 0301 	and.w	r3, r3, #1
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d10e      	bne.n	800cc66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	f003 0301 	and.w	r3, r3, #1
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d107      	bne.n	800cc66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f06f 0201 	mvn.w	r2, #1
 800cc5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 f8d7 	bl	800ce14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	691b      	ldr	r3, [r3, #16]
 800cc6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc70:	2b80      	cmp	r3, #128	; 0x80
 800cc72:	d10e      	bne.n	800cc92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc7e:	2b80      	cmp	r3, #128	; 0x80
 800cc80:	d107      	bne.n	800cc92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cc8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fceb 	bl	800d668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cca0:	d10e      	bne.n	800ccc0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccac:	2b80      	cmp	r3, #128	; 0x80
 800ccae:	d107      	bne.n	800ccc0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ccb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fcde 	bl	800d67c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccca:	2b40      	cmp	r3, #64	; 0x40
 800cccc:	d10e      	bne.n	800ccec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccd8:	2b40      	cmp	r3, #64	; 0x40
 800ccda:	d107      	bne.n	800ccec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f8bc 	bl	800ce64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	f003 0320 	and.w	r3, r3, #32
 800ccf6:	2b20      	cmp	r3, #32
 800ccf8:	d10e      	bne.n	800cd18 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	f003 0320 	and.w	r3, r3, #32
 800cd04:	2b20      	cmp	r3, #32
 800cd06:	d107      	bne.n	800cd18 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f06f 0220 	mvn.w	r2, #32
 800cd10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 fc9e 	bl	800d654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d101      	bne.n	800cd3e <HAL_TIM_OC_ConfigChannel+0x1e>
 800cd3a:	2302      	movs	r3, #2
 800cd3c:	e066      	b.n	800ce0c <HAL_TIM_OC_ConfigChannel+0xec>
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2201      	movs	r2, #1
 800cd42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b14      	cmp	r3, #20
 800cd4a:	d857      	bhi.n	800cdfc <HAL_TIM_OC_ConfigChannel+0xdc>
 800cd4c:	a201      	add	r2, pc, #4	; (adr r2, 800cd54 <HAL_TIM_OC_ConfigChannel+0x34>)
 800cd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd52:	bf00      	nop
 800cd54:	0800cda9 	.word	0x0800cda9
 800cd58:	0800cdfd 	.word	0x0800cdfd
 800cd5c:	0800cdfd 	.word	0x0800cdfd
 800cd60:	0800cdfd 	.word	0x0800cdfd
 800cd64:	0800cdb7 	.word	0x0800cdb7
 800cd68:	0800cdfd 	.word	0x0800cdfd
 800cd6c:	0800cdfd 	.word	0x0800cdfd
 800cd70:	0800cdfd 	.word	0x0800cdfd
 800cd74:	0800cdc5 	.word	0x0800cdc5
 800cd78:	0800cdfd 	.word	0x0800cdfd
 800cd7c:	0800cdfd 	.word	0x0800cdfd
 800cd80:	0800cdfd 	.word	0x0800cdfd
 800cd84:	0800cdd3 	.word	0x0800cdd3
 800cd88:	0800cdfd 	.word	0x0800cdfd
 800cd8c:	0800cdfd 	.word	0x0800cdfd
 800cd90:	0800cdfd 	.word	0x0800cdfd
 800cd94:	0800cde1 	.word	0x0800cde1
 800cd98:	0800cdfd 	.word	0x0800cdfd
 800cd9c:	0800cdfd 	.word	0x0800cdfd
 800cda0:	0800cdfd 	.word	0x0800cdfd
 800cda4:	0800cdef 	.word	0x0800cdef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68b9      	ldr	r1, [r7, #8]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 f8fc 	bl	800cfac <TIM_OC1_SetConfig>
      break;
 800cdb4:	e025      	b.n	800ce02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	68b9      	ldr	r1, [r7, #8]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f000 f985 	bl	800d0cc <TIM_OC2_SetConfig>
      break;
 800cdc2:	e01e      	b.n	800ce02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68b9      	ldr	r1, [r7, #8]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f000 fa08 	bl	800d1e0 <TIM_OC3_SetConfig>
      break;
 800cdd0:	e017      	b.n	800ce02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68b9      	ldr	r1, [r7, #8]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 fa89 	bl	800d2f0 <TIM_OC4_SetConfig>
      break;
 800cdde:	e010      	b.n	800ce02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68b9      	ldr	r1, [r7, #8]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 faec 	bl	800d3c4 <TIM_OC5_SetConfig>
      break;
 800cdec:	e009      	b.n	800ce02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	68b9      	ldr	r1, [r7, #8]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f000 fb49 	bl	800d48c <TIM_OC6_SetConfig>
      break;
 800cdfa:	e002      	b.n	800ce02 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	75fb      	strb	r3, [r7, #23]
      break;
 800ce00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3718      	adds	r7, #24
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ce1c:	bf00      	nop
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce30:	bf00      	nop
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ce44:	bf00      	nop
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ce58:	bf00      	nop
 800ce5a:	370c      	adds	r7, #12
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce6c:	bf00      	nop
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4a40      	ldr	r2, [pc, #256]	; (800cf8c <TIM_Base_SetConfig+0x114>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d013      	beq.n	800ceb8 <TIM_Base_SetConfig+0x40>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce96:	d00f      	beq.n	800ceb8 <TIM_Base_SetConfig+0x40>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	4a3d      	ldr	r2, [pc, #244]	; (800cf90 <TIM_Base_SetConfig+0x118>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d00b      	beq.n	800ceb8 <TIM_Base_SetConfig+0x40>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4a3c      	ldr	r2, [pc, #240]	; (800cf94 <TIM_Base_SetConfig+0x11c>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d007      	beq.n	800ceb8 <TIM_Base_SetConfig+0x40>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4a3b      	ldr	r2, [pc, #236]	; (800cf98 <TIM_Base_SetConfig+0x120>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d003      	beq.n	800ceb8 <TIM_Base_SetConfig+0x40>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4a3a      	ldr	r2, [pc, #232]	; (800cf9c <TIM_Base_SetConfig+0x124>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d108      	bne.n	800ceca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4a2f      	ldr	r2, [pc, #188]	; (800cf8c <TIM_Base_SetConfig+0x114>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d01f      	beq.n	800cf12 <TIM_Base_SetConfig+0x9a>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ced8:	d01b      	beq.n	800cf12 <TIM_Base_SetConfig+0x9a>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4a2c      	ldr	r2, [pc, #176]	; (800cf90 <TIM_Base_SetConfig+0x118>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d017      	beq.n	800cf12 <TIM_Base_SetConfig+0x9a>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	4a2b      	ldr	r2, [pc, #172]	; (800cf94 <TIM_Base_SetConfig+0x11c>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d013      	beq.n	800cf12 <TIM_Base_SetConfig+0x9a>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	4a2a      	ldr	r2, [pc, #168]	; (800cf98 <TIM_Base_SetConfig+0x120>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d00f      	beq.n	800cf12 <TIM_Base_SetConfig+0x9a>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	4a29      	ldr	r2, [pc, #164]	; (800cf9c <TIM_Base_SetConfig+0x124>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d00b      	beq.n	800cf12 <TIM_Base_SetConfig+0x9a>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4a28      	ldr	r2, [pc, #160]	; (800cfa0 <TIM_Base_SetConfig+0x128>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d007      	beq.n	800cf12 <TIM_Base_SetConfig+0x9a>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4a27      	ldr	r2, [pc, #156]	; (800cfa4 <TIM_Base_SetConfig+0x12c>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d003      	beq.n	800cf12 <TIM_Base_SetConfig+0x9a>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4a26      	ldr	r2, [pc, #152]	; (800cfa8 <TIM_Base_SetConfig+0x130>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d108      	bne.n	800cf24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	695b      	ldr	r3, [r3, #20]
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	689a      	ldr	r2, [r3, #8]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4a10      	ldr	r2, [pc, #64]	; (800cf8c <TIM_Base_SetConfig+0x114>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d00f      	beq.n	800cf70 <TIM_Base_SetConfig+0xf8>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a12      	ldr	r2, [pc, #72]	; (800cf9c <TIM_Base_SetConfig+0x124>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d00b      	beq.n	800cf70 <TIM_Base_SetConfig+0xf8>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a11      	ldr	r2, [pc, #68]	; (800cfa0 <TIM_Base_SetConfig+0x128>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d007      	beq.n	800cf70 <TIM_Base_SetConfig+0xf8>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a10      	ldr	r2, [pc, #64]	; (800cfa4 <TIM_Base_SetConfig+0x12c>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d003      	beq.n	800cf70 <TIM_Base_SetConfig+0xf8>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4a0f      	ldr	r2, [pc, #60]	; (800cfa8 <TIM_Base_SetConfig+0x130>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d103      	bne.n	800cf78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	691a      	ldr	r2, [r3, #16]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	615a      	str	r2, [r3, #20]
}
 800cf7e:	bf00      	nop
 800cf80:	3714      	adds	r7, #20
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	40012c00 	.word	0x40012c00
 800cf90:	40000400 	.word	0x40000400
 800cf94:	40000800 	.word	0x40000800
 800cf98:	40000c00 	.word	0x40000c00
 800cf9c:	40013400 	.word	0x40013400
 800cfa0:	40014000 	.word	0x40014000
 800cfa4:	40014400 	.word	0x40014400
 800cfa8:	40014800 	.word	0x40014800

0800cfac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b087      	sub	sp, #28
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a1b      	ldr	r3, [r3, #32]
 800cfba:	f023 0201 	bic.w	r2, r3, #1
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cfda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f023 0303 	bic.w	r3, r3, #3
 800cfe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	4313      	orrs	r3, r2
 800cff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	f023 0302 	bic.w	r3, r3, #2
 800cff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	697a      	ldr	r2, [r7, #20]
 800d000:	4313      	orrs	r3, r2
 800d002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	4a2c      	ldr	r2, [pc, #176]	; (800d0b8 <TIM_OC1_SetConfig+0x10c>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d00f      	beq.n	800d02c <TIM_OC1_SetConfig+0x80>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4a2b      	ldr	r2, [pc, #172]	; (800d0bc <TIM_OC1_SetConfig+0x110>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d00b      	beq.n	800d02c <TIM_OC1_SetConfig+0x80>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4a2a      	ldr	r2, [pc, #168]	; (800d0c0 <TIM_OC1_SetConfig+0x114>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d007      	beq.n	800d02c <TIM_OC1_SetConfig+0x80>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a29      	ldr	r2, [pc, #164]	; (800d0c4 <TIM_OC1_SetConfig+0x118>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d003      	beq.n	800d02c <TIM_OC1_SetConfig+0x80>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a28      	ldr	r2, [pc, #160]	; (800d0c8 <TIM_OC1_SetConfig+0x11c>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d10c      	bne.n	800d046 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f023 0308 	bic.w	r3, r3, #8
 800d032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	697a      	ldr	r2, [r7, #20]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f023 0304 	bic.w	r3, r3, #4
 800d044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4a1b      	ldr	r2, [pc, #108]	; (800d0b8 <TIM_OC1_SetConfig+0x10c>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d00f      	beq.n	800d06e <TIM_OC1_SetConfig+0xc2>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4a1a      	ldr	r2, [pc, #104]	; (800d0bc <TIM_OC1_SetConfig+0x110>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d00b      	beq.n	800d06e <TIM_OC1_SetConfig+0xc2>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4a19      	ldr	r2, [pc, #100]	; (800d0c0 <TIM_OC1_SetConfig+0x114>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d007      	beq.n	800d06e <TIM_OC1_SetConfig+0xc2>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4a18      	ldr	r2, [pc, #96]	; (800d0c4 <TIM_OC1_SetConfig+0x118>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d003      	beq.n	800d06e <TIM_OC1_SetConfig+0xc2>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4a17      	ldr	r2, [pc, #92]	; (800d0c8 <TIM_OC1_SetConfig+0x11c>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d111      	bne.n	800d092 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d07c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	695b      	ldr	r3, [r3, #20]
 800d082:	693a      	ldr	r2, [r7, #16]
 800d084:	4313      	orrs	r3, r2
 800d086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	699b      	ldr	r3, [r3, #24]
 800d08c:	693a      	ldr	r2, [r7, #16]
 800d08e:	4313      	orrs	r3, r2
 800d090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	693a      	ldr	r2, [r7, #16]
 800d096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	68fa      	ldr	r2, [r7, #12]
 800d09c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	697a      	ldr	r2, [r7, #20]
 800d0aa:	621a      	str	r2, [r3, #32]
}
 800d0ac:	bf00      	nop
 800d0ae:	371c      	adds	r7, #28
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr
 800d0b8:	40012c00 	.word	0x40012c00
 800d0bc:	40013400 	.word	0x40013400
 800d0c0:	40014000 	.word	0x40014000
 800d0c4:	40014400 	.word	0x40014400
 800d0c8:	40014800 	.word	0x40014800

0800d0cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b087      	sub	sp, #28
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a1b      	ldr	r3, [r3, #32]
 800d0da:	f023 0210 	bic.w	r2, r3, #16
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a1b      	ldr	r3, [r3, #32]
 800d0e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d0fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	021b      	lsls	r3, r3, #8
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	4313      	orrs	r3, r2
 800d112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	f023 0320 	bic.w	r3, r3, #32
 800d11a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	011b      	lsls	r3, r3, #4
 800d122:	697a      	ldr	r2, [r7, #20]
 800d124:	4313      	orrs	r3, r2
 800d126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	4a28      	ldr	r2, [pc, #160]	; (800d1cc <TIM_OC2_SetConfig+0x100>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d003      	beq.n	800d138 <TIM_OC2_SetConfig+0x6c>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4a27      	ldr	r2, [pc, #156]	; (800d1d0 <TIM_OC2_SetConfig+0x104>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d10d      	bne.n	800d154 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d13e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	011b      	lsls	r3, r3, #4
 800d146:	697a      	ldr	r2, [r7, #20]
 800d148:	4313      	orrs	r3, r2
 800d14a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d152:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4a1d      	ldr	r2, [pc, #116]	; (800d1cc <TIM_OC2_SetConfig+0x100>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d00f      	beq.n	800d17c <TIM_OC2_SetConfig+0xb0>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4a1c      	ldr	r2, [pc, #112]	; (800d1d0 <TIM_OC2_SetConfig+0x104>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d00b      	beq.n	800d17c <TIM_OC2_SetConfig+0xb0>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4a1b      	ldr	r2, [pc, #108]	; (800d1d4 <TIM_OC2_SetConfig+0x108>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d007      	beq.n	800d17c <TIM_OC2_SetConfig+0xb0>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4a1a      	ldr	r2, [pc, #104]	; (800d1d8 <TIM_OC2_SetConfig+0x10c>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d003      	beq.n	800d17c <TIM_OC2_SetConfig+0xb0>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a19      	ldr	r2, [pc, #100]	; (800d1dc <TIM_OC2_SetConfig+0x110>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d113      	bne.n	800d1a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d18a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	695b      	ldr	r3, [r3, #20]
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	693a      	ldr	r2, [r7, #16]
 800d194:	4313      	orrs	r3, r2
 800d196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	699b      	ldr	r3, [r3, #24]
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	693a      	ldr	r2, [r7, #16]
 800d1a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	685a      	ldr	r2, [r3, #4]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	697a      	ldr	r2, [r7, #20]
 800d1bc:	621a      	str	r2, [r3, #32]
}
 800d1be:	bf00      	nop
 800d1c0:	371c      	adds	r7, #28
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	40012c00 	.word	0x40012c00
 800d1d0:	40013400 	.word	0x40013400
 800d1d4:	40014000 	.word	0x40014000
 800d1d8:	40014400 	.word	0x40014400
 800d1dc:	40014800 	.word	0x40014800

0800d1e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b087      	sub	sp, #28
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6a1b      	ldr	r3, [r3, #32]
 800d1ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6a1b      	ldr	r3, [r3, #32]
 800d1fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f023 0303 	bic.w	r3, r3, #3
 800d21a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	4313      	orrs	r3, r2
 800d224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d22c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	021b      	lsls	r3, r3, #8
 800d234:	697a      	ldr	r2, [r7, #20]
 800d236:	4313      	orrs	r3, r2
 800d238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a27      	ldr	r2, [pc, #156]	; (800d2dc <TIM_OC3_SetConfig+0xfc>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d003      	beq.n	800d24a <TIM_OC3_SetConfig+0x6a>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4a26      	ldr	r2, [pc, #152]	; (800d2e0 <TIM_OC3_SetConfig+0x100>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d10d      	bne.n	800d266 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d250:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	021b      	lsls	r3, r3, #8
 800d258:	697a      	ldr	r2, [r7, #20]
 800d25a:	4313      	orrs	r3, r2
 800d25c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4a1c      	ldr	r2, [pc, #112]	; (800d2dc <TIM_OC3_SetConfig+0xfc>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d00f      	beq.n	800d28e <TIM_OC3_SetConfig+0xae>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4a1b      	ldr	r2, [pc, #108]	; (800d2e0 <TIM_OC3_SetConfig+0x100>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d00b      	beq.n	800d28e <TIM_OC3_SetConfig+0xae>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4a1a      	ldr	r2, [pc, #104]	; (800d2e4 <TIM_OC3_SetConfig+0x104>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d007      	beq.n	800d28e <TIM_OC3_SetConfig+0xae>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	4a19      	ldr	r2, [pc, #100]	; (800d2e8 <TIM_OC3_SetConfig+0x108>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d003      	beq.n	800d28e <TIM_OC3_SetConfig+0xae>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4a18      	ldr	r2, [pc, #96]	; (800d2ec <TIM_OC3_SetConfig+0x10c>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d113      	bne.n	800d2b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d29c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	695b      	ldr	r3, [r3, #20]
 800d2a2:	011b      	lsls	r3, r3, #4
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	699b      	ldr	r3, [r3, #24]
 800d2ae:	011b      	lsls	r3, r3, #4
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	68fa      	ldr	r2, [r7, #12]
 800d2c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	685a      	ldr	r2, [r3, #4]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	697a      	ldr	r2, [r7, #20]
 800d2ce:	621a      	str	r2, [r3, #32]
}
 800d2d0:	bf00      	nop
 800d2d2:	371c      	adds	r7, #28
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	40012c00 	.word	0x40012c00
 800d2e0:	40013400 	.word	0x40013400
 800d2e4:	40014000 	.word	0x40014000
 800d2e8:	40014400 	.word	0x40014400
 800d2ec:	40014800 	.word	0x40014800

0800d2f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b087      	sub	sp, #28
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a1b      	ldr	r3, [r3, #32]
 800d2fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6a1b      	ldr	r3, [r3, #32]
 800d30a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	69db      	ldr	r3, [r3, #28]
 800d316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d31e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d32a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	021b      	lsls	r3, r3, #8
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	4313      	orrs	r3, r2
 800d336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d33e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	031b      	lsls	r3, r3, #12
 800d346:	693a      	ldr	r2, [r7, #16]
 800d348:	4313      	orrs	r3, r2
 800d34a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4a18      	ldr	r2, [pc, #96]	; (800d3b0 <TIM_OC4_SetConfig+0xc0>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d00f      	beq.n	800d374 <TIM_OC4_SetConfig+0x84>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4a17      	ldr	r2, [pc, #92]	; (800d3b4 <TIM_OC4_SetConfig+0xc4>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d00b      	beq.n	800d374 <TIM_OC4_SetConfig+0x84>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a16      	ldr	r2, [pc, #88]	; (800d3b8 <TIM_OC4_SetConfig+0xc8>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d007      	beq.n	800d374 <TIM_OC4_SetConfig+0x84>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a15      	ldr	r2, [pc, #84]	; (800d3bc <TIM_OC4_SetConfig+0xcc>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d003      	beq.n	800d374 <TIM_OC4_SetConfig+0x84>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4a14      	ldr	r2, [pc, #80]	; (800d3c0 <TIM_OC4_SetConfig+0xd0>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d109      	bne.n	800d388 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d37a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	695b      	ldr	r3, [r3, #20]
 800d380:	019b      	lsls	r3, r3, #6
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	4313      	orrs	r3, r2
 800d386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	697a      	ldr	r2, [r7, #20]
 800d38c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	685a      	ldr	r2, [r3, #4]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	693a      	ldr	r2, [r7, #16]
 800d3a0:	621a      	str	r2, [r3, #32]
}
 800d3a2:	bf00      	nop
 800d3a4:	371c      	adds	r7, #28
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	40012c00 	.word	0x40012c00
 800d3b4:	40013400 	.word	0x40013400
 800d3b8:	40014000 	.word	0x40014000
 800d3bc:	40014400 	.word	0x40014400
 800d3c0:	40014800 	.word	0x40014800

0800d3c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b087      	sub	sp, #28
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6a1b      	ldr	r3, [r3, #32]
 800d3d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a1b      	ldr	r3, [r3, #32]
 800d3de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	4313      	orrs	r3, r2
 800d400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d408:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	041b      	lsls	r3, r3, #16
 800d410:	693a      	ldr	r2, [r7, #16]
 800d412:	4313      	orrs	r3, r2
 800d414:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	4a17      	ldr	r2, [pc, #92]	; (800d478 <TIM_OC5_SetConfig+0xb4>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d00f      	beq.n	800d43e <TIM_OC5_SetConfig+0x7a>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	4a16      	ldr	r2, [pc, #88]	; (800d47c <TIM_OC5_SetConfig+0xb8>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d00b      	beq.n	800d43e <TIM_OC5_SetConfig+0x7a>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4a15      	ldr	r2, [pc, #84]	; (800d480 <TIM_OC5_SetConfig+0xbc>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d007      	beq.n	800d43e <TIM_OC5_SetConfig+0x7a>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4a14      	ldr	r2, [pc, #80]	; (800d484 <TIM_OC5_SetConfig+0xc0>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d003      	beq.n	800d43e <TIM_OC5_SetConfig+0x7a>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a13      	ldr	r2, [pc, #76]	; (800d488 <TIM_OC5_SetConfig+0xc4>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d109      	bne.n	800d452 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d444:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	695b      	ldr	r3, [r3, #20]
 800d44a:	021b      	lsls	r3, r3, #8
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	4313      	orrs	r3, r2
 800d450:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	697a      	ldr	r2, [r7, #20]
 800d456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	68fa      	ldr	r2, [r7, #12]
 800d45c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	685a      	ldr	r2, [r3, #4]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	621a      	str	r2, [r3, #32]
}
 800d46c:	bf00      	nop
 800d46e:	371c      	adds	r7, #28
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr
 800d478:	40012c00 	.word	0x40012c00
 800d47c:	40013400 	.word	0x40013400
 800d480:	40014000 	.word	0x40014000
 800d484:	40014400 	.word	0x40014400
 800d488:	40014800 	.word	0x40014800

0800d48c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b087      	sub	sp, #28
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6a1b      	ldr	r3, [r3, #32]
 800d49a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6a1b      	ldr	r3, [r3, #32]
 800d4a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d4ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	021b      	lsls	r3, r3, #8
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d4d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	051b      	lsls	r3, r3, #20
 800d4da:	693a      	ldr	r2, [r7, #16]
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a18      	ldr	r2, [pc, #96]	; (800d544 <TIM_OC6_SetConfig+0xb8>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d00f      	beq.n	800d508 <TIM_OC6_SetConfig+0x7c>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4a17      	ldr	r2, [pc, #92]	; (800d548 <TIM_OC6_SetConfig+0xbc>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d00b      	beq.n	800d508 <TIM_OC6_SetConfig+0x7c>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4a16      	ldr	r2, [pc, #88]	; (800d54c <TIM_OC6_SetConfig+0xc0>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d007      	beq.n	800d508 <TIM_OC6_SetConfig+0x7c>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	4a15      	ldr	r2, [pc, #84]	; (800d550 <TIM_OC6_SetConfig+0xc4>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d003      	beq.n	800d508 <TIM_OC6_SetConfig+0x7c>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	4a14      	ldr	r2, [pc, #80]	; (800d554 <TIM_OC6_SetConfig+0xc8>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d109      	bne.n	800d51c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d50e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	695b      	ldr	r3, [r3, #20]
 800d514:	029b      	lsls	r3, r3, #10
 800d516:	697a      	ldr	r2, [r7, #20]
 800d518:	4313      	orrs	r3, r2
 800d51a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	697a      	ldr	r2, [r7, #20]
 800d520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	685a      	ldr	r2, [r3, #4]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	693a      	ldr	r2, [r7, #16]
 800d534:	621a      	str	r2, [r3, #32]
}
 800d536:	bf00      	nop
 800d538:	371c      	adds	r7, #28
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	40012c00 	.word	0x40012c00
 800d548:	40013400 	.word	0x40013400
 800d54c:	40014000 	.word	0x40014000
 800d550:	40014400 	.word	0x40014400
 800d554:	40014800 	.word	0x40014800

0800d558 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d562:	2300      	movs	r3, #0
 800d564:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d101      	bne.n	800d574 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d570:	2302      	movs	r3, #2
 800d572:	e065      	b.n	800d640 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	4313      	orrs	r3, r2
 800d588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	4313      	orrs	r3, r2
 800d596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	691b      	ldr	r3, [r3, #16]
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	695b      	ldr	r3, [r3, #20]
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	699b      	ldr	r3, [r3, #24]
 800d5e8:	041b      	lsls	r3, r3, #16
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a16      	ldr	r2, [pc, #88]	; (800d64c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d004      	beq.n	800d602 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a14      	ldr	r2, [pc, #80]	; (800d650 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d115      	bne.n	800d62e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60c:	051b      	lsls	r3, r3, #20
 800d60e:	4313      	orrs	r3, r2
 800d610:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	69db      	ldr	r3, [r3, #28]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	6a1b      	ldr	r3, [r3, #32]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68fa      	ldr	r2, [r7, #12]
 800d634:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d63e:	2300      	movs	r3, #0
}
 800d640:	4618      	mov	r0, r3
 800d642:	3714      	adds	r7, #20
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	40012c00 	.word	0x40012c00
 800d650:	40013400 	.word	0x40013400

0800d654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e042      	b.n	800d728 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d106      	bne.n	800d6ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f7f6 fd1f 	bl	80040f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2224      	movs	r2, #36	; 0x24
 800d6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f022 0201 	bic.w	r2, r2, #1
 800d6d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fb64 	bl	800dda0 <UART_SetConfig>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d101      	bne.n	800d6e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e022      	b.n	800d728 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d002      	beq.n	800d6f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fe54 	bl	800e398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	685a      	ldr	r2, [r3, #4]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d6fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	689a      	ldr	r2, [r3, #8]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d70e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f042 0201 	orr.w	r2, r2, #1
 800d71e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 fedb 	bl	800e4dc <UART_CheckIdleState>
 800d726:	4603      	mov	r3, r0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3708      	adds	r7, #8
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b0ba      	sub	sp, #232	; 0xe8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	69db      	ldr	r3, [r3, #28]
 800d73e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d756:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d75a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d75e:	4013      	ands	r3, r2
 800d760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d11b      	bne.n	800d7a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d770:	f003 0320 	and.w	r3, r3, #32
 800d774:	2b00      	cmp	r3, #0
 800d776:	d015      	beq.n	800d7a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d77c:	f003 0320 	and.w	r3, r3, #32
 800d780:	2b00      	cmp	r3, #0
 800d782:	d105      	bne.n	800d790 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d009      	beq.n	800d7a4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d794:	2b00      	cmp	r3, #0
 800d796:	f000 82d6 	beq.w	800dd46 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	4798      	blx	r3
      }
      return;
 800d7a2:	e2d0      	b.n	800dd46 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800d7a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f000 811f 	beq.w	800d9ec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d7ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d7b2:	4b8b      	ldr	r3, [pc, #556]	; (800d9e0 <HAL_UART_IRQHandler+0x2b0>)
 800d7b4:	4013      	ands	r3, r2
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d106      	bne.n	800d7c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d7ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d7be:	4b89      	ldr	r3, [pc, #548]	; (800d9e4 <HAL_UART_IRQHandler+0x2b4>)
 800d7c0:	4013      	ands	r3, r2
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f000 8112 	beq.w	800d9ec <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7cc:	f003 0301 	and.w	r3, r3, #1
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d011      	beq.n	800d7f8 <HAL_UART_IRQHandler+0xc8>
 800d7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00b      	beq.n	800d7f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7ee:	f043 0201 	orr.w	r2, r3, #1
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d7f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7fc:	f003 0302 	and.w	r3, r3, #2
 800d800:	2b00      	cmp	r3, #0
 800d802:	d011      	beq.n	800d828 <HAL_UART_IRQHandler+0xf8>
 800d804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d808:	f003 0301 	and.w	r3, r3, #1
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00b      	beq.n	800d828 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2202      	movs	r2, #2
 800d816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d81e:	f043 0204 	orr.w	r2, r3, #4
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d82c:	f003 0304 	and.w	r3, r3, #4
 800d830:	2b00      	cmp	r3, #0
 800d832:	d011      	beq.n	800d858 <HAL_UART_IRQHandler+0x128>
 800d834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d838:	f003 0301 	and.w	r3, r3, #1
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00b      	beq.n	800d858 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2204      	movs	r2, #4
 800d846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d84e:	f043 0202 	orr.w	r2, r3, #2
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d85c:	f003 0308 	and.w	r3, r3, #8
 800d860:	2b00      	cmp	r3, #0
 800d862:	d017      	beq.n	800d894 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d868:	f003 0320 	and.w	r3, r3, #32
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d105      	bne.n	800d87c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d870:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d874:	4b5a      	ldr	r3, [pc, #360]	; (800d9e0 <HAL_UART_IRQHandler+0x2b0>)
 800d876:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00b      	beq.n	800d894 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2208      	movs	r2, #8
 800d882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d88a:	f043 0208 	orr.w	r2, r3, #8
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d012      	beq.n	800d8c6 <HAL_UART_IRQHandler+0x196>
 800d8a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00c      	beq.n	800d8c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8bc:	f043 0220 	orr.w	r2, r3, #32
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f000 823c 	beq.w	800dd4a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d8d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8d6:	f003 0320 	and.w	r3, r3, #32
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d013      	beq.n	800d906 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d8de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8e2:	f003 0320 	and.w	r3, r3, #32
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d105      	bne.n	800d8f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d8ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d007      	beq.n	800d906 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d003      	beq.n	800d906 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d90c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	689b      	ldr	r3, [r3, #8]
 800d916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d91a:	2b40      	cmp	r3, #64	; 0x40
 800d91c:	d005      	beq.n	800d92a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d91e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d922:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d926:	2b00      	cmp	r3, #0
 800d928:	d04f      	beq.n	800d9ca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 fee9 	bl	800e702 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d93a:	2b40      	cmp	r3, #64	; 0x40
 800d93c:	d141      	bne.n	800d9c2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3308      	adds	r3, #8
 800d944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d94c:	e853 3f00 	ldrex	r3, [r3]
 800d950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d954:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d95c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3308      	adds	r3, #8
 800d966:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d96a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d96e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d976:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d97a:	e841 2300 	strex	r3, r2, [r1]
 800d97e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d1d9      	bne.n	800d93e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d013      	beq.n	800d9ba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d996:	4a14      	ldr	r2, [pc, #80]	; (800d9e8 <HAL_UART_IRQHandler+0x2b8>)
 800d998:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7f7 fec9 	bl	8005736 <HAL_DMA_Abort_IT>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d017      	beq.n	800d9da <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d9b4:	4610      	mov	r0, r2
 800d9b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9b8:	e00f      	b.n	800d9da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 f9da 	bl	800dd74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9c0:	e00b      	b.n	800d9da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 f9d6 	bl	800dd74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9c8:	e007      	b.n	800d9da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 f9d2 	bl	800dd74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d9d8:	e1b7      	b.n	800dd4a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9da:	bf00      	nop
    return;
 800d9dc:	e1b5      	b.n	800dd4a <HAL_UART_IRQHandler+0x61a>
 800d9de:	bf00      	nop
 800d9e0:	10000001 	.word	0x10000001
 800d9e4:	04000120 	.word	0x04000120
 800d9e8:	0800e7cf 	.word	0x0800e7cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	f040 814a 	bne.w	800dc8a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9fa:	f003 0310 	and.w	r3, r3, #16
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f000 8143 	beq.w	800dc8a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da08:	f003 0310 	and.w	r3, r3, #16
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f000 813c 	beq.w	800dc8a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2210      	movs	r2, #16
 800da18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da24:	2b40      	cmp	r3, #64	; 0x40
 800da26:	f040 80b5 	bne.w	800db94 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800da36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f000 8187 	beq.w	800dd4e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da4a:	429a      	cmp	r2, r3
 800da4c:	f080 817f 	bcs.w	800dd4e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f003 0320 	and.w	r3, r3, #32
 800da66:	2b00      	cmp	r3, #0
 800da68:	f040 8086 	bne.w	800db78 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da78:	e853 3f00 	ldrex	r3, [r3]
 800da7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800da80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	461a      	mov	r2, r3
 800da92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800daa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800daa6:	e841 2300 	strex	r3, r2, [r1]
 800daaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800daae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1da      	bne.n	800da6c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	3308      	adds	r3, #8
 800dabc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dabe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dac0:	e853 3f00 	ldrex	r3, [r3]
 800dac4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dac8:	f023 0301 	bic.w	r3, r3, #1
 800dacc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	3308      	adds	r3, #8
 800dad6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dada:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dade:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dae2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dae6:	e841 2300 	strex	r3, r2, [r1]
 800daea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800daec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1e1      	bne.n	800dab6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	3308      	adds	r3, #8
 800daf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dafa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dafc:	e853 3f00 	ldrex	r3, [r3]
 800db00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800db02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3308      	adds	r3, #8
 800db12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800db16:	66fa      	str	r2, [r7, #108]	; 0x6c
 800db18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db1e:	e841 2300 	strex	r3, r2, [r1]
 800db22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800db24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1e3      	bne.n	800daf2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2220      	movs	r2, #32
 800db2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2200      	movs	r2, #0
 800db36:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db40:	e853 3f00 	ldrex	r3, [r3]
 800db44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db48:	f023 0310 	bic.w	r3, r3, #16
 800db4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	461a      	mov	r2, r3
 800db56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800db5a:	65bb      	str	r3, [r7, #88]	; 0x58
 800db5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db62:	e841 2300 	strex	r3, r2, [r1]
 800db66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d1e4      	bne.n	800db38 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db72:	4618      	mov	r0, r3
 800db74:	f7f7 fd83 	bl	800567e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db84:	b29b      	uxth	r3, r3
 800db86:	1ad3      	subs	r3, r2, r3
 800db88:	b29b      	uxth	r3, r3
 800db8a:	4619      	mov	r1, r3
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f000 f8fb 	bl	800dd88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db92:	e0dc      	b.n	800dd4e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f000 80ce 	beq.w	800dd52 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800dbb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f000 80c9 	beq.w	800dd52 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc8:	e853 3f00 	ldrex	r3, [r3]
 800dbcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dbd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	461a      	mov	r2, r3
 800dbde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dbe2:	647b      	str	r3, [r7, #68]	; 0x44
 800dbe4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dbe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbea:	e841 2300 	strex	r3, r2, [r1]
 800dbee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1e4      	bne.n	800dbc0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	3308      	adds	r3, #8
 800dbfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc00:	e853 3f00 	ldrex	r3, [r3]
 800dc04:	623b      	str	r3, [r7, #32]
   return(result);
 800dc06:	6a3b      	ldr	r3, [r7, #32]
 800dc08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc0c:	f023 0301 	bic.w	r3, r3, #1
 800dc10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	3308      	adds	r3, #8
 800dc1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dc1e:	633a      	str	r2, [r7, #48]	; 0x30
 800dc20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc26:	e841 2300 	strex	r3, r2, [r1]
 800dc2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d1e1      	bne.n	800dbf6 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2220      	movs	r2, #32
 800dc36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	e853 3f00 	ldrex	r3, [r3]
 800dc52:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f023 0310 	bic.w	r3, r3, #16
 800dc5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	461a      	mov	r2, r3
 800dc64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dc68:	61fb      	str	r3, [r7, #28]
 800dc6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6c:	69b9      	ldr	r1, [r7, #24]
 800dc6e:	69fa      	ldr	r2, [r7, #28]
 800dc70:	e841 2300 	strex	r3, r2, [r1]
 800dc74:	617b      	str	r3, [r7, #20]
   return(result);
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1e4      	bne.n	800dc46 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dc7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 f880 	bl	800dd88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc88:	e063      	b.n	800dd52 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dc8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00e      	beq.n	800dcb4 <HAL_UART_IRQHandler+0x584>
 800dc96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d008      	beq.n	800dcb4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dcaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fdcf 	bl	800e850 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dcb2:	e051      	b.n	800dd58 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dcb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d014      	beq.n	800dcea <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dcc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d105      	bne.n	800dcd8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dcd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d008      	beq.n	800dcea <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d03a      	beq.n	800dd56 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	4798      	blx	r3
    }
    return;
 800dce8:	e035      	b.n	800dd56 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dcea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d009      	beq.n	800dd0a <HAL_UART_IRQHandler+0x5da>
 800dcf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d003      	beq.n	800dd0a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fd79 	bl	800e7fa <UART_EndTransmit_IT>
    return;
 800dd08:	e026      	b.n	800dd58 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dd0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d009      	beq.n	800dd2a <HAL_UART_IRQHandler+0x5fa>
 800dd16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d003      	beq.n	800dd2a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 fda8 	bl	800e878 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd28:	e016      	b.n	800dd58 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dd2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d010      	beq.n	800dd58 <HAL_UART_IRQHandler+0x628>
 800dd36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	da0c      	bge.n	800dd58 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 fd90 	bl	800e864 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd44:	e008      	b.n	800dd58 <HAL_UART_IRQHandler+0x628>
      return;
 800dd46:	bf00      	nop
 800dd48:	e006      	b.n	800dd58 <HAL_UART_IRQHandler+0x628>
    return;
 800dd4a:	bf00      	nop
 800dd4c:	e004      	b.n	800dd58 <HAL_UART_IRQHandler+0x628>
      return;
 800dd4e:	bf00      	nop
 800dd50:	e002      	b.n	800dd58 <HAL_UART_IRQHandler+0x628>
      return;
 800dd52:	bf00      	nop
 800dd54:	e000      	b.n	800dd58 <HAL_UART_IRQHandler+0x628>
    return;
 800dd56:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800dd58:	37e8      	adds	r7, #232	; 0xe8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop

0800dd60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dd68:	bf00      	nop
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dd7c:	bf00      	nop
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dd94:	bf00      	nop
 800dd96:	370c      	adds	r7, #12
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr

0800dda0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dda0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dda4:	b08c      	sub	sp, #48	; 0x30
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	689a      	ldr	r2, [r3, #8]
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	431a      	orrs	r2, r3
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	695b      	ldr	r3, [r3, #20]
 800ddbe:	431a      	orrs	r2, r3
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	69db      	ldr	r3, [r3, #28]
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	4baa      	ldr	r3, [pc, #680]	; (800e078 <UART_SetConfig+0x2d8>)
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	697a      	ldr	r2, [r7, #20]
 800ddd4:	6812      	ldr	r2, [r2, #0]
 800ddd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddd8:	430b      	orrs	r3, r1
 800ddda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	68da      	ldr	r2, [r3, #12]
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	430a      	orrs	r2, r1
 800ddf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	699b      	ldr	r3, [r3, #24]
 800ddf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a9f      	ldr	r2, [pc, #636]	; (800e07c <UART_SetConfig+0x2dc>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d004      	beq.n	800de0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de08:	4313      	orrs	r3, r2
 800de0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800de16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800de1a:	697a      	ldr	r2, [r7, #20]
 800de1c:	6812      	ldr	r2, [r2, #0]
 800de1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de20:	430b      	orrs	r3, r1
 800de22:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2a:	f023 010f 	bic.w	r1, r3, #15
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	430a      	orrs	r2, r1
 800de38:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a90      	ldr	r2, [pc, #576]	; (800e080 <UART_SetConfig+0x2e0>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d125      	bne.n	800de90 <UART_SetConfig+0xf0>
 800de44:	4b8f      	ldr	r3, [pc, #572]	; (800e084 <UART_SetConfig+0x2e4>)
 800de46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de4a:	f003 0303 	and.w	r3, r3, #3
 800de4e:	2b03      	cmp	r3, #3
 800de50:	d81a      	bhi.n	800de88 <UART_SetConfig+0xe8>
 800de52:	a201      	add	r2, pc, #4	; (adr r2, 800de58 <UART_SetConfig+0xb8>)
 800de54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de58:	0800de69 	.word	0x0800de69
 800de5c:	0800de79 	.word	0x0800de79
 800de60:	0800de71 	.word	0x0800de71
 800de64:	0800de81 	.word	0x0800de81
 800de68:	2301      	movs	r3, #1
 800de6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de6e:	e116      	b.n	800e09e <UART_SetConfig+0x2fe>
 800de70:	2302      	movs	r3, #2
 800de72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de76:	e112      	b.n	800e09e <UART_SetConfig+0x2fe>
 800de78:	2304      	movs	r3, #4
 800de7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de7e:	e10e      	b.n	800e09e <UART_SetConfig+0x2fe>
 800de80:	2308      	movs	r3, #8
 800de82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de86:	e10a      	b.n	800e09e <UART_SetConfig+0x2fe>
 800de88:	2310      	movs	r3, #16
 800de8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de8e:	e106      	b.n	800e09e <UART_SetConfig+0x2fe>
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4a7c      	ldr	r2, [pc, #496]	; (800e088 <UART_SetConfig+0x2e8>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d138      	bne.n	800df0c <UART_SetConfig+0x16c>
 800de9a:	4b7a      	ldr	r3, [pc, #488]	; (800e084 <UART_SetConfig+0x2e4>)
 800de9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dea0:	f003 030c 	and.w	r3, r3, #12
 800dea4:	2b0c      	cmp	r3, #12
 800dea6:	d82d      	bhi.n	800df04 <UART_SetConfig+0x164>
 800dea8:	a201      	add	r2, pc, #4	; (adr r2, 800deb0 <UART_SetConfig+0x110>)
 800deaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deae:	bf00      	nop
 800deb0:	0800dee5 	.word	0x0800dee5
 800deb4:	0800df05 	.word	0x0800df05
 800deb8:	0800df05 	.word	0x0800df05
 800debc:	0800df05 	.word	0x0800df05
 800dec0:	0800def5 	.word	0x0800def5
 800dec4:	0800df05 	.word	0x0800df05
 800dec8:	0800df05 	.word	0x0800df05
 800decc:	0800df05 	.word	0x0800df05
 800ded0:	0800deed 	.word	0x0800deed
 800ded4:	0800df05 	.word	0x0800df05
 800ded8:	0800df05 	.word	0x0800df05
 800dedc:	0800df05 	.word	0x0800df05
 800dee0:	0800defd 	.word	0x0800defd
 800dee4:	2300      	movs	r3, #0
 800dee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800deea:	e0d8      	b.n	800e09e <UART_SetConfig+0x2fe>
 800deec:	2302      	movs	r3, #2
 800deee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800def2:	e0d4      	b.n	800e09e <UART_SetConfig+0x2fe>
 800def4:	2304      	movs	r3, #4
 800def6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800defa:	e0d0      	b.n	800e09e <UART_SetConfig+0x2fe>
 800defc:	2308      	movs	r3, #8
 800defe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df02:	e0cc      	b.n	800e09e <UART_SetConfig+0x2fe>
 800df04:	2310      	movs	r3, #16
 800df06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df0a:	e0c8      	b.n	800e09e <UART_SetConfig+0x2fe>
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a5e      	ldr	r2, [pc, #376]	; (800e08c <UART_SetConfig+0x2ec>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d125      	bne.n	800df62 <UART_SetConfig+0x1c2>
 800df16:	4b5b      	ldr	r3, [pc, #364]	; (800e084 <UART_SetConfig+0x2e4>)
 800df18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800df20:	2b30      	cmp	r3, #48	; 0x30
 800df22:	d016      	beq.n	800df52 <UART_SetConfig+0x1b2>
 800df24:	2b30      	cmp	r3, #48	; 0x30
 800df26:	d818      	bhi.n	800df5a <UART_SetConfig+0x1ba>
 800df28:	2b20      	cmp	r3, #32
 800df2a:	d00a      	beq.n	800df42 <UART_SetConfig+0x1a2>
 800df2c:	2b20      	cmp	r3, #32
 800df2e:	d814      	bhi.n	800df5a <UART_SetConfig+0x1ba>
 800df30:	2b00      	cmp	r3, #0
 800df32:	d002      	beq.n	800df3a <UART_SetConfig+0x19a>
 800df34:	2b10      	cmp	r3, #16
 800df36:	d008      	beq.n	800df4a <UART_SetConfig+0x1aa>
 800df38:	e00f      	b.n	800df5a <UART_SetConfig+0x1ba>
 800df3a:	2300      	movs	r3, #0
 800df3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df40:	e0ad      	b.n	800e09e <UART_SetConfig+0x2fe>
 800df42:	2302      	movs	r3, #2
 800df44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df48:	e0a9      	b.n	800e09e <UART_SetConfig+0x2fe>
 800df4a:	2304      	movs	r3, #4
 800df4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df50:	e0a5      	b.n	800e09e <UART_SetConfig+0x2fe>
 800df52:	2308      	movs	r3, #8
 800df54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df58:	e0a1      	b.n	800e09e <UART_SetConfig+0x2fe>
 800df5a:	2310      	movs	r3, #16
 800df5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df60:	e09d      	b.n	800e09e <UART_SetConfig+0x2fe>
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a4a      	ldr	r2, [pc, #296]	; (800e090 <UART_SetConfig+0x2f0>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d125      	bne.n	800dfb8 <UART_SetConfig+0x218>
 800df6c:	4b45      	ldr	r3, [pc, #276]	; (800e084 <UART_SetConfig+0x2e4>)
 800df6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800df76:	2bc0      	cmp	r3, #192	; 0xc0
 800df78:	d016      	beq.n	800dfa8 <UART_SetConfig+0x208>
 800df7a:	2bc0      	cmp	r3, #192	; 0xc0
 800df7c:	d818      	bhi.n	800dfb0 <UART_SetConfig+0x210>
 800df7e:	2b80      	cmp	r3, #128	; 0x80
 800df80:	d00a      	beq.n	800df98 <UART_SetConfig+0x1f8>
 800df82:	2b80      	cmp	r3, #128	; 0x80
 800df84:	d814      	bhi.n	800dfb0 <UART_SetConfig+0x210>
 800df86:	2b00      	cmp	r3, #0
 800df88:	d002      	beq.n	800df90 <UART_SetConfig+0x1f0>
 800df8a:	2b40      	cmp	r3, #64	; 0x40
 800df8c:	d008      	beq.n	800dfa0 <UART_SetConfig+0x200>
 800df8e:	e00f      	b.n	800dfb0 <UART_SetConfig+0x210>
 800df90:	2300      	movs	r3, #0
 800df92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df96:	e082      	b.n	800e09e <UART_SetConfig+0x2fe>
 800df98:	2302      	movs	r3, #2
 800df9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df9e:	e07e      	b.n	800e09e <UART_SetConfig+0x2fe>
 800dfa0:	2304      	movs	r3, #4
 800dfa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfa6:	e07a      	b.n	800e09e <UART_SetConfig+0x2fe>
 800dfa8:	2308      	movs	r3, #8
 800dfaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfae:	e076      	b.n	800e09e <UART_SetConfig+0x2fe>
 800dfb0:	2310      	movs	r3, #16
 800dfb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfb6:	e072      	b.n	800e09e <UART_SetConfig+0x2fe>
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a35      	ldr	r2, [pc, #212]	; (800e094 <UART_SetConfig+0x2f4>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d12a      	bne.n	800e018 <UART_SetConfig+0x278>
 800dfc2:	4b30      	ldr	r3, [pc, #192]	; (800e084 <UART_SetConfig+0x2e4>)
 800dfc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dfcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dfd0:	d01a      	beq.n	800e008 <UART_SetConfig+0x268>
 800dfd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dfd6:	d81b      	bhi.n	800e010 <UART_SetConfig+0x270>
 800dfd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfdc:	d00c      	beq.n	800dff8 <UART_SetConfig+0x258>
 800dfde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfe2:	d815      	bhi.n	800e010 <UART_SetConfig+0x270>
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d003      	beq.n	800dff0 <UART_SetConfig+0x250>
 800dfe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfec:	d008      	beq.n	800e000 <UART_SetConfig+0x260>
 800dfee:	e00f      	b.n	800e010 <UART_SetConfig+0x270>
 800dff0:	2300      	movs	r3, #0
 800dff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dff6:	e052      	b.n	800e09e <UART_SetConfig+0x2fe>
 800dff8:	2302      	movs	r3, #2
 800dffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dffe:	e04e      	b.n	800e09e <UART_SetConfig+0x2fe>
 800e000:	2304      	movs	r3, #4
 800e002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e006:	e04a      	b.n	800e09e <UART_SetConfig+0x2fe>
 800e008:	2308      	movs	r3, #8
 800e00a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e00e:	e046      	b.n	800e09e <UART_SetConfig+0x2fe>
 800e010:	2310      	movs	r3, #16
 800e012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e016:	e042      	b.n	800e09e <UART_SetConfig+0x2fe>
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4a17      	ldr	r2, [pc, #92]	; (800e07c <UART_SetConfig+0x2dc>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d13a      	bne.n	800e098 <UART_SetConfig+0x2f8>
 800e022:	4b18      	ldr	r3, [pc, #96]	; (800e084 <UART_SetConfig+0x2e4>)
 800e024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e028:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e02c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e030:	d01a      	beq.n	800e068 <UART_SetConfig+0x2c8>
 800e032:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e036:	d81b      	bhi.n	800e070 <UART_SetConfig+0x2d0>
 800e038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e03c:	d00c      	beq.n	800e058 <UART_SetConfig+0x2b8>
 800e03e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e042:	d815      	bhi.n	800e070 <UART_SetConfig+0x2d0>
 800e044:	2b00      	cmp	r3, #0
 800e046:	d003      	beq.n	800e050 <UART_SetConfig+0x2b0>
 800e048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e04c:	d008      	beq.n	800e060 <UART_SetConfig+0x2c0>
 800e04e:	e00f      	b.n	800e070 <UART_SetConfig+0x2d0>
 800e050:	2300      	movs	r3, #0
 800e052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e056:	e022      	b.n	800e09e <UART_SetConfig+0x2fe>
 800e058:	2302      	movs	r3, #2
 800e05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e05e:	e01e      	b.n	800e09e <UART_SetConfig+0x2fe>
 800e060:	2304      	movs	r3, #4
 800e062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e066:	e01a      	b.n	800e09e <UART_SetConfig+0x2fe>
 800e068:	2308      	movs	r3, #8
 800e06a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e06e:	e016      	b.n	800e09e <UART_SetConfig+0x2fe>
 800e070:	2310      	movs	r3, #16
 800e072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e076:	e012      	b.n	800e09e <UART_SetConfig+0x2fe>
 800e078:	cfff69f3 	.word	0xcfff69f3
 800e07c:	40008000 	.word	0x40008000
 800e080:	40013800 	.word	0x40013800
 800e084:	40021000 	.word	0x40021000
 800e088:	40004400 	.word	0x40004400
 800e08c:	40004800 	.word	0x40004800
 800e090:	40004c00 	.word	0x40004c00
 800e094:	40005000 	.word	0x40005000
 800e098:	2310      	movs	r3, #16
 800e09a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4aae      	ldr	r2, [pc, #696]	; (800e35c <UART_SetConfig+0x5bc>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	f040 8097 	bne.w	800e1d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e0aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0ae:	2b08      	cmp	r3, #8
 800e0b0:	d823      	bhi.n	800e0fa <UART_SetConfig+0x35a>
 800e0b2:	a201      	add	r2, pc, #4	; (adr r2, 800e0b8 <UART_SetConfig+0x318>)
 800e0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b8:	0800e0dd 	.word	0x0800e0dd
 800e0bc:	0800e0fb 	.word	0x0800e0fb
 800e0c0:	0800e0e5 	.word	0x0800e0e5
 800e0c4:	0800e0fb 	.word	0x0800e0fb
 800e0c8:	0800e0eb 	.word	0x0800e0eb
 800e0cc:	0800e0fb 	.word	0x0800e0fb
 800e0d0:	0800e0fb 	.word	0x0800e0fb
 800e0d4:	0800e0fb 	.word	0x0800e0fb
 800e0d8:	0800e0f3 	.word	0x0800e0f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0dc:	f7fb f892 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800e0e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e0e2:	e010      	b.n	800e106 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e0e4:	4b9e      	ldr	r3, [pc, #632]	; (800e360 <UART_SetConfig+0x5c0>)
 800e0e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e0e8:	e00d      	b.n	800e106 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e0ea:	f7fa fff3 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800e0ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e0f0:	e009      	b.n	800e106 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e0f8:	e005      	b.n	800e106 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e0fe:	2301      	movs	r3, #1
 800e100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e104:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f000 8130 	beq.w	800e36e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e112:	4a94      	ldr	r2, [pc, #592]	; (800e364 <UART_SetConfig+0x5c4>)
 800e114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e118:	461a      	mov	r2, r3
 800e11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e120:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	685a      	ldr	r2, [r3, #4]
 800e126:	4613      	mov	r3, r2
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	4413      	add	r3, r2
 800e12c:	69ba      	ldr	r2, [r7, #24]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d305      	bcc.n	800e13e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e138:	69ba      	ldr	r2, [r7, #24]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d903      	bls.n	800e146 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e144:	e113      	b.n	800e36e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e148:	2200      	movs	r2, #0
 800e14a:	60bb      	str	r3, [r7, #8]
 800e14c:	60fa      	str	r2, [r7, #12]
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e152:	4a84      	ldr	r2, [pc, #528]	; (800e364 <UART_SetConfig+0x5c4>)
 800e154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e158:	b29b      	uxth	r3, r3
 800e15a:	2200      	movs	r2, #0
 800e15c:	603b      	str	r3, [r7, #0]
 800e15e:	607a      	str	r2, [r7, #4]
 800e160:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e164:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e168:	f7f2 fd86 	bl	8000c78 <__aeabi_uldivmod>
 800e16c:	4602      	mov	r2, r0
 800e16e:	460b      	mov	r3, r1
 800e170:	4610      	mov	r0, r2
 800e172:	4619      	mov	r1, r3
 800e174:	f04f 0200 	mov.w	r2, #0
 800e178:	f04f 0300 	mov.w	r3, #0
 800e17c:	020b      	lsls	r3, r1, #8
 800e17e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e182:	0202      	lsls	r2, r0, #8
 800e184:	6979      	ldr	r1, [r7, #20]
 800e186:	6849      	ldr	r1, [r1, #4]
 800e188:	0849      	lsrs	r1, r1, #1
 800e18a:	2000      	movs	r0, #0
 800e18c:	460c      	mov	r4, r1
 800e18e:	4605      	mov	r5, r0
 800e190:	eb12 0804 	adds.w	r8, r2, r4
 800e194:	eb43 0905 	adc.w	r9, r3, r5
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	469a      	mov	sl, r3
 800e1a0:	4693      	mov	fp, r2
 800e1a2:	4652      	mov	r2, sl
 800e1a4:	465b      	mov	r3, fp
 800e1a6:	4640      	mov	r0, r8
 800e1a8:	4649      	mov	r1, r9
 800e1aa:	f7f2 fd65 	bl	8000c78 <__aeabi_uldivmod>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e1b6:	6a3b      	ldr	r3, [r7, #32]
 800e1b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e1bc:	d308      	bcc.n	800e1d0 <UART_SetConfig+0x430>
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e1c4:	d204      	bcs.n	800e1d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	6a3a      	ldr	r2, [r7, #32]
 800e1cc:	60da      	str	r2, [r3, #12]
 800e1ce:	e0ce      	b.n	800e36e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e1d6:	e0ca      	b.n	800e36e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	69db      	ldr	r3, [r3, #28]
 800e1dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1e0:	d166      	bne.n	800e2b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800e1e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e1e6:	2b08      	cmp	r3, #8
 800e1e8:	d827      	bhi.n	800e23a <UART_SetConfig+0x49a>
 800e1ea:	a201      	add	r2, pc, #4	; (adr r2, 800e1f0 <UART_SetConfig+0x450>)
 800e1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f0:	0800e215 	.word	0x0800e215
 800e1f4:	0800e21d 	.word	0x0800e21d
 800e1f8:	0800e225 	.word	0x0800e225
 800e1fc:	0800e23b 	.word	0x0800e23b
 800e200:	0800e22b 	.word	0x0800e22b
 800e204:	0800e23b 	.word	0x0800e23b
 800e208:	0800e23b 	.word	0x0800e23b
 800e20c:	0800e23b 	.word	0x0800e23b
 800e210:	0800e233 	.word	0x0800e233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e214:	f7fa fff6 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800e218:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e21a:	e014      	b.n	800e246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e21c:	f7fb f808 	bl	8009230 <HAL_RCC_GetPCLK2Freq>
 800e220:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e222:	e010      	b.n	800e246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e224:	4b4e      	ldr	r3, [pc, #312]	; (800e360 <UART_SetConfig+0x5c0>)
 800e226:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e228:	e00d      	b.n	800e246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e22a:	f7fa ff53 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800e22e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e230:	e009      	b.n	800e246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e236:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e238:	e005      	b.n	800e246 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800e23a:	2300      	movs	r3, #0
 800e23c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e23e:	2301      	movs	r3, #1
 800e240:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e244:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f000 8090 	beq.w	800e36e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e252:	4a44      	ldr	r2, [pc, #272]	; (800e364 <UART_SetConfig+0x5c4>)
 800e254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e258:	461a      	mov	r2, r3
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e260:	005a      	lsls	r2, r3, #1
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	085b      	lsrs	r3, r3, #1
 800e268:	441a      	add	r2, r3
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e272:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e274:	6a3b      	ldr	r3, [r7, #32]
 800e276:	2b0f      	cmp	r3, #15
 800e278:	d916      	bls.n	800e2a8 <UART_SetConfig+0x508>
 800e27a:	6a3b      	ldr	r3, [r7, #32]
 800e27c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e280:	d212      	bcs.n	800e2a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e282:	6a3b      	ldr	r3, [r7, #32]
 800e284:	b29b      	uxth	r3, r3
 800e286:	f023 030f 	bic.w	r3, r3, #15
 800e28a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e28c:	6a3b      	ldr	r3, [r7, #32]
 800e28e:	085b      	lsrs	r3, r3, #1
 800e290:	b29b      	uxth	r3, r3
 800e292:	f003 0307 	and.w	r3, r3, #7
 800e296:	b29a      	uxth	r2, r3
 800e298:	8bfb      	ldrh	r3, [r7, #30]
 800e29a:	4313      	orrs	r3, r2
 800e29c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	8bfa      	ldrh	r2, [r7, #30]
 800e2a4:	60da      	str	r2, [r3, #12]
 800e2a6:	e062      	b.n	800e36e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e2ae:	e05e      	b.n	800e36e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e2b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e2b4:	2b08      	cmp	r3, #8
 800e2b6:	d828      	bhi.n	800e30a <UART_SetConfig+0x56a>
 800e2b8:	a201      	add	r2, pc, #4	; (adr r2, 800e2c0 <UART_SetConfig+0x520>)
 800e2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2be:	bf00      	nop
 800e2c0:	0800e2e5 	.word	0x0800e2e5
 800e2c4:	0800e2ed 	.word	0x0800e2ed
 800e2c8:	0800e2f5 	.word	0x0800e2f5
 800e2cc:	0800e30b 	.word	0x0800e30b
 800e2d0:	0800e2fb 	.word	0x0800e2fb
 800e2d4:	0800e30b 	.word	0x0800e30b
 800e2d8:	0800e30b 	.word	0x0800e30b
 800e2dc:	0800e30b 	.word	0x0800e30b
 800e2e0:	0800e303 	.word	0x0800e303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2e4:	f7fa ff8e 	bl	8009204 <HAL_RCC_GetPCLK1Freq>
 800e2e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e2ea:	e014      	b.n	800e316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e2ec:	f7fa ffa0 	bl	8009230 <HAL_RCC_GetPCLK2Freq>
 800e2f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e2f2:	e010      	b.n	800e316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e2f4:	4b1a      	ldr	r3, [pc, #104]	; (800e360 <UART_SetConfig+0x5c0>)
 800e2f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e2f8:	e00d      	b.n	800e316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e2fa:	f7fa feeb 	bl	80090d4 <HAL_RCC_GetSysClockFreq>
 800e2fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e300:	e009      	b.n	800e316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e306:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e308:	e005      	b.n	800e316 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800e30a:	2300      	movs	r3, #0
 800e30c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e30e:	2301      	movs	r3, #1
 800e310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e314:	bf00      	nop
    }

    if (pclk != 0U)
 800e316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d028      	beq.n	800e36e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e320:	4a10      	ldr	r2, [pc, #64]	; (800e364 <UART_SetConfig+0x5c4>)
 800e322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e326:	461a      	mov	r2, r3
 800e328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	085b      	lsrs	r3, r3, #1
 800e334:	441a      	add	r2, r3
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e33e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e340:	6a3b      	ldr	r3, [r7, #32]
 800e342:	2b0f      	cmp	r3, #15
 800e344:	d910      	bls.n	800e368 <UART_SetConfig+0x5c8>
 800e346:	6a3b      	ldr	r3, [r7, #32]
 800e348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e34c:	d20c      	bcs.n	800e368 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	b29a      	uxth	r2, r3
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	60da      	str	r2, [r3, #12]
 800e358:	e009      	b.n	800e36e <UART_SetConfig+0x5ce>
 800e35a:	bf00      	nop
 800e35c:	40008000 	.word	0x40008000
 800e360:	00f42400 	.word	0x00f42400
 800e364:	08019658 	.word	0x08019658
      }
      else
      {
        ret = HAL_ERROR;
 800e368:	2301      	movs	r3, #1
 800e36a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	2201      	movs	r2, #1
 800e372:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	2201      	movs	r2, #1
 800e37a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	2200      	movs	r2, #0
 800e382:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	2200      	movs	r2, #0
 800e388:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e38a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3730      	adds	r7, #48	; 0x30
 800e392:	46bd      	mov	sp, r7
 800e394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a4:	f003 0301 	and.w	r3, r3, #1
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00a      	beq.n	800e3c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	430a      	orrs	r2, r1
 800e3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c6:	f003 0302 	and.w	r3, r3, #2
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00a      	beq.n	800e3e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	430a      	orrs	r2, r1
 800e3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3e8:	f003 0304 	and.w	r3, r3, #4
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d00a      	beq.n	800e406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	430a      	orrs	r2, r1
 800e404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e40a:	f003 0308 	and.w	r3, r3, #8
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00a      	beq.n	800e428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	430a      	orrs	r2, r1
 800e426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e42c:	f003 0310 	and.w	r3, r3, #16
 800e430:	2b00      	cmp	r3, #0
 800e432:	d00a      	beq.n	800e44a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	689b      	ldr	r3, [r3, #8]
 800e43a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	430a      	orrs	r2, r1
 800e448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44e:	f003 0320 	and.w	r3, r3, #32
 800e452:	2b00      	cmp	r3, #0
 800e454:	d00a      	beq.n	800e46c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	689b      	ldr	r3, [r3, #8]
 800e45c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	430a      	orrs	r2, r1
 800e46a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e474:	2b00      	cmp	r3, #0
 800e476:	d01a      	beq.n	800e4ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	430a      	orrs	r2, r1
 800e48c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e496:	d10a      	bne.n	800e4ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	430a      	orrs	r2, r1
 800e4ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00a      	beq.n	800e4d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	430a      	orrs	r2, r1
 800e4ce:	605a      	str	r2, [r3, #4]
  }
}
 800e4d0:	bf00      	nop
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b086      	sub	sp, #24
 800e4e0:	af02      	add	r7, sp, #8
 800e4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e4ec:	f7f6 ff86 	bl	80053fc <HAL_GetTick>
 800e4f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f003 0308 	and.w	r3, r3, #8
 800e4fc:	2b08      	cmp	r3, #8
 800e4fe:	d10e      	bne.n	800e51e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2200      	movs	r2, #0
 800e50a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 f82f 	bl	800e572 <UART_WaitOnFlagUntilTimeout>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d001      	beq.n	800e51e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e51a:	2303      	movs	r3, #3
 800e51c:	e025      	b.n	800e56a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f003 0304 	and.w	r3, r3, #4
 800e528:	2b04      	cmp	r3, #4
 800e52a:	d10e      	bne.n	800e54a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e52c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e530:	9300      	str	r3, [sp, #0]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2200      	movs	r2, #0
 800e536:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f819 	bl	800e572 <UART_WaitOnFlagUntilTimeout>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d001      	beq.n	800e54a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e546:	2303      	movs	r3, #3
 800e548:	e00f      	b.n	800e56a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2220      	movs	r2, #32
 800e54e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2220      	movs	r2, #32
 800e556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b09c      	sub	sp, #112	; 0x70
 800e576:	af00      	add	r7, sp, #0
 800e578:	60f8      	str	r0, [r7, #12]
 800e57a:	60b9      	str	r1, [r7, #8]
 800e57c:	603b      	str	r3, [r7, #0]
 800e57e:	4613      	mov	r3, r2
 800e580:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e582:	e0a9      	b.n	800e6d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e58a:	f000 80a5 	beq.w	800e6d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e58e:	f7f6 ff35 	bl	80053fc <HAL_GetTick>
 800e592:	4602      	mov	r2, r0
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	1ad3      	subs	r3, r2, r3
 800e598:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d302      	bcc.n	800e5a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800e59e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d140      	bne.n	800e626 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5ac:	e853 3f00 	ldrex	r3, [r3]
 800e5b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e5b8:	667b      	str	r3, [r7, #100]	; 0x64
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	461a      	mov	r2, r3
 800e5c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e5c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e5c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e5ca:	e841 2300 	strex	r3, r2, [r1]
 800e5ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e5d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d1e6      	bne.n	800e5a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	3308      	adds	r3, #8
 800e5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e0:	e853 3f00 	ldrex	r3, [r3]
 800e5e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e8:	f023 0301 	bic.w	r3, r3, #1
 800e5ec:	663b      	str	r3, [r7, #96]	; 0x60
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	3308      	adds	r3, #8
 800e5f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e5f6:	64ba      	str	r2, [r7, #72]	; 0x48
 800e5f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5fe:	e841 2300 	strex	r3, r2, [r1]
 800e602:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1e5      	bne.n	800e5d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2220      	movs	r2, #32
 800e60e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2220      	movs	r2, #32
 800e616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e622:	2303      	movs	r3, #3
 800e624:	e069      	b.n	800e6fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f003 0304 	and.w	r3, r3, #4
 800e630:	2b00      	cmp	r3, #0
 800e632:	d051      	beq.n	800e6d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	69db      	ldr	r3, [r3, #28]
 800e63a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e63e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e642:	d149      	bne.n	800e6d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e64c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e656:	e853 3f00 	ldrex	r3, [r3]
 800e65a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e662:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	461a      	mov	r2, r3
 800e66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e66c:	637b      	str	r3, [r7, #52]	; 0x34
 800e66e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e674:	e841 2300 	strex	r3, r2, [r1]
 800e678:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d1e6      	bne.n	800e64e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	3308      	adds	r3, #8
 800e686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	e853 3f00 	ldrex	r3, [r3]
 800e68e:	613b      	str	r3, [r7, #16]
   return(result);
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	f023 0301 	bic.w	r3, r3, #1
 800e696:	66bb      	str	r3, [r7, #104]	; 0x68
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	3308      	adds	r3, #8
 800e69e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e6a0:	623a      	str	r2, [r7, #32]
 800e6a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a4:	69f9      	ldr	r1, [r7, #28]
 800e6a6:	6a3a      	ldr	r2, [r7, #32]
 800e6a8:	e841 2300 	strex	r3, r2, [r1]
 800e6ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1e5      	bne.n	800e680 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2220      	movs	r2, #32
 800e6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2220      	movs	r2, #32
 800e6c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2220      	movs	r2, #32
 800e6c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e6d4:	2303      	movs	r3, #3
 800e6d6:	e010      	b.n	800e6fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	69da      	ldr	r2, [r3, #28]
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	4013      	ands	r3, r2
 800e6e2:	68ba      	ldr	r2, [r7, #8]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	bf0c      	ite	eq
 800e6e8:	2301      	moveq	r3, #1
 800e6ea:	2300      	movne	r3, #0
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	79fb      	ldrb	r3, [r7, #7]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	f43f af46 	beq.w	800e584 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e6f8:	2300      	movs	r3, #0
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3770      	adds	r7, #112	; 0x70
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e702:	b480      	push	{r7}
 800e704:	b095      	sub	sp, #84	; 0x54
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e712:	e853 3f00 	ldrex	r3, [r3]
 800e716:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e71e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	461a      	mov	r2, r3
 800e726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e728:	643b      	str	r3, [r7, #64]	; 0x40
 800e72a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e72e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e730:	e841 2300 	strex	r3, r2, [r1]
 800e734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1e6      	bne.n	800e70a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	3308      	adds	r3, #8
 800e742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e744:	6a3b      	ldr	r3, [r7, #32]
 800e746:	e853 3f00 	ldrex	r3, [r3]
 800e74a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e752:	f023 0301 	bic.w	r3, r3, #1
 800e756:	64bb      	str	r3, [r7, #72]	; 0x48
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	3308      	adds	r3, #8
 800e75e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e760:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e768:	e841 2300 	strex	r3, r2, [r1]
 800e76c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1e3      	bne.n	800e73c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e778:	2b01      	cmp	r3, #1
 800e77a:	d118      	bne.n	800e7ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	e853 3f00 	ldrex	r3, [r3]
 800e788:	60bb      	str	r3, [r7, #8]
   return(result);
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	f023 0310 	bic.w	r3, r3, #16
 800e790:	647b      	str	r3, [r7, #68]	; 0x44
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	461a      	mov	r2, r3
 800e798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e79a:	61bb      	str	r3, [r7, #24]
 800e79c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e79e:	6979      	ldr	r1, [r7, #20]
 800e7a0:	69ba      	ldr	r2, [r7, #24]
 800e7a2:	e841 2300 	strex	r3, r2, [r1]
 800e7a6:	613b      	str	r3, [r7, #16]
   return(result);
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d1e6      	bne.n	800e77c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2220      	movs	r2, #32
 800e7b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e7c2:	bf00      	nop
 800e7c4:	3754      	adds	r7, #84	; 0x54
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr

0800e7ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b084      	sub	sp, #16
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f7ff fac1 	bl	800dd74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7f2:	bf00      	nop
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}

0800e7fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e7fa:	b580      	push	{r7, lr}
 800e7fc:	b088      	sub	sp, #32
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	e853 3f00 	ldrex	r3, [r3]
 800e80e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e816:	61fb      	str	r3, [r7, #28]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	461a      	mov	r2, r3
 800e81e:	69fb      	ldr	r3, [r7, #28]
 800e820:	61bb      	str	r3, [r7, #24]
 800e822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e824:	6979      	ldr	r1, [r7, #20]
 800e826:	69ba      	ldr	r2, [r7, #24]
 800e828:	e841 2300 	strex	r3, r2, [r1]
 800e82c:	613b      	str	r3, [r7, #16]
   return(result);
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d1e6      	bne.n	800e802 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2220      	movs	r2, #32
 800e838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f7ff fa8c 	bl	800dd60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e848:	bf00      	nop
 800e84a:	3720      	adds	r7, #32
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e858:	bf00      	nop
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e86c:	bf00      	nop
 800e86e:	370c      	adds	r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e880:	bf00      	nop
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d101      	bne.n	800e8a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800e89e:	2302      	movs	r3, #2
 800e8a0:	e027      	b.n	800e8f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2224      	movs	r2, #36	; 0x24
 800e8ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f022 0201 	bic.w	r2, r2, #1
 800e8c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e8d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2220      	movs	r2, #32
 800e8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3714      	adds	r7, #20
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr

0800e8fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8fe:	b580      	push	{r7, lr}
 800e900:	b084      	sub	sp, #16
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
 800e906:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d101      	bne.n	800e916 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e912:	2302      	movs	r3, #2
 800e914:	e02d      	b.n	800e972 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2201      	movs	r2, #1
 800e91a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2224      	movs	r2, #36	; 0x24
 800e922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f022 0201 	bic.w	r2, r2, #1
 800e93c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	689b      	ldr	r3, [r3, #8]
 800e944:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	683a      	ldr	r2, [r7, #0]
 800e94e:	430a      	orrs	r2, r1
 800e950:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 f850 	bl	800e9f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2220      	movs	r2, #32
 800e964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e970:	2300      	movs	r3, #0
}
 800e972:	4618      	mov	r0, r3
 800e974:	3710      	adds	r7, #16
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b084      	sub	sp, #16
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
 800e982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d101      	bne.n	800e992 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e98e:	2302      	movs	r3, #2
 800e990:	e02d      	b.n	800e9ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2201      	movs	r2, #1
 800e996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2224      	movs	r2, #36	; 0x24
 800e99e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f022 0201 	bic.w	r2, r2, #1
 800e9b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	683a      	ldr	r2, [r7, #0]
 800e9ca:	430a      	orrs	r2, r1
 800e9cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f812 	bl	800e9f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	68fa      	ldr	r2, [r7, #12]
 800e9da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2220      	movs	r2, #32
 800e9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e9ec:	2300      	movs	r3, #0
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
	...

0800e9f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b085      	sub	sp, #20
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d108      	bne.n	800ea1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2201      	movs	r2, #1
 800ea14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ea18:	e031      	b.n	800ea7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ea1a:	2308      	movs	r3, #8
 800ea1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ea1e:	2308      	movs	r3, #8
 800ea20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	0e5b      	lsrs	r3, r3, #25
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	f003 0307 	and.w	r3, r3, #7
 800ea30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	0f5b      	lsrs	r3, r3, #29
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	f003 0307 	and.w	r3, r3, #7
 800ea40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea42:	7bbb      	ldrb	r3, [r7, #14]
 800ea44:	7b3a      	ldrb	r2, [r7, #12]
 800ea46:	4911      	ldr	r1, [pc, #68]	; (800ea8c <UARTEx_SetNbDataToProcess+0x94>)
 800ea48:	5c8a      	ldrb	r2, [r1, r2]
 800ea4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ea4e:	7b3a      	ldrb	r2, [r7, #12]
 800ea50:	490f      	ldr	r1, [pc, #60]	; (800ea90 <UARTEx_SetNbDataToProcess+0x98>)
 800ea52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea54:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea60:	7bfb      	ldrb	r3, [r7, #15]
 800ea62:	7b7a      	ldrb	r2, [r7, #13]
 800ea64:	4909      	ldr	r1, [pc, #36]	; (800ea8c <UARTEx_SetNbDataToProcess+0x94>)
 800ea66:	5c8a      	ldrb	r2, [r1, r2]
 800ea68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ea6c:	7b7a      	ldrb	r2, [r7, #13]
 800ea6e:	4908      	ldr	r1, [pc, #32]	; (800ea90 <UARTEx_SetNbDataToProcess+0x98>)
 800ea70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea72:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ea7e:	bf00      	nop
 800ea80:	3714      	adds	r7, #20
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	08019670 	.word	0x08019670
 800ea90:	08019678 	.word	0x08019678

0800ea94 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ea94:	b084      	sub	sp, #16
 800ea96:	b480      	push	{r7}
 800ea98:	b085      	sub	sp, #20
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
 800ea9e:	f107 001c 	add.w	r0, r7, #28
 800eaa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800eaaa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800eaac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800eaae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800eab2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800eab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800eab6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800eab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800eaba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	4313      	orrs	r3, r2
 800eac0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	685a      	ldr	r2, [r3, #4]
 800eac6:	4b07      	ldr	r3, [pc, #28]	; (800eae4 <SDMMC_Init+0x50>)
 800eac8:	4013      	ands	r3, r2
 800eaca:	68fa      	ldr	r2, [r7, #12]
 800eacc:	431a      	orrs	r2, r3
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3714      	adds	r7, #20
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	b004      	add	sp, #16
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	ffc02c00 	.word	0xffc02c00

0800eae8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800eb02:	b480      	push	{r7}
 800eb04:	b083      	sub	sp, #12
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	370c      	adds	r7, #12
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb22:	4770      	bx	lr

0800eb24 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f043 0203 	orr.w	r2, r3, #3
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800eb38:	2002      	movs	r0, #2
 800eb3a:	f7f6 fc6b 	bl	8005414 <HAL_Delay>

  return HAL_OK;
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f003 0303 	and.w	r3, r3, #3
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b085      	sub	sp, #20
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800eb88:	431a      	orrs	r2, r3
                       Command->CPSM);
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800eb8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eb90:	68fa      	ldr	r2, [r7, #12]
 800eb92:	4313      	orrs	r3, r2
 800eb94:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	68da      	ldr	r2, [r3, #12]
 800eb9a:	4b06      	ldr	r3, [pc, #24]	; (800ebb4 <SDMMC_SendCommand+0x50>)
 800eb9c:	4013      	ands	r3, r2
 800eb9e:	68fa      	ldr	r2, [r7, #12]
 800eba0:	431a      	orrs	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3714      	adds	r7, #20
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr
 800ebb4:	fffee0c0 	.word	0xfffee0c0

0800ebb8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	691b      	ldr	r3, [r3, #16]
 800ebc4:	b2db      	uxtb	r3, r3
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	370c      	adds	r7, #12
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr

0800ebd2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ebd2:	b480      	push	{r7}
 800ebd4:	b085      	sub	sp, #20
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
 800ebda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	3314      	adds	r3, #20
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3714      	adds	r7, #20
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ec02:	2300      	movs	r3, #0
 800ec04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	685a      	ldr	r2, [r3, #4]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ec1e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ec24:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ec2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	431a      	orrs	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ec42:	2300      	movs	r3, #0

}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3714      	adds	r7, #20
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b088      	sub	sp, #32
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ec5e:	2310      	movs	r3, #16
 800ec60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec72:	f107 0308 	add.w	r3, r7, #8
 800ec76:	4619      	mov	r1, r3
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f7ff ff73 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ec7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec82:	2110      	movs	r1, #16
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 fa7b 	bl	800f180 <SDMMC_GetCmdResp1>
 800ec8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec8c:	69fb      	ldr	r3, [r7, #28]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3720      	adds	r7, #32
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b088      	sub	sp, #32
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
 800ec9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800eca4:	2311      	movs	r3, #17
 800eca6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ecb8:	f107 0308 	add.w	r3, r7, #8
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f7ff ff50 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ecc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecc8:	2111      	movs	r1, #17
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 fa58 	bl	800f180 <SDMMC_GetCmdResp1>
 800ecd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecd2:	69fb      	ldr	r3, [r7, #28]
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3720      	adds	r7, #32
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b088      	sub	sp, #32
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ecea:	2312      	movs	r3, #18
 800ecec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ecfe:	f107 0308 	add.w	r3, r7, #8
 800ed02:	4619      	mov	r1, r3
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7ff ff2d 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ed0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed0e:	2112      	movs	r1, #18
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 fa35 	bl	800f180 <SDMMC_GetCmdResp1>
 800ed16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed18:	69fb      	ldr	r3, [r7, #28]
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3720      	adds	r7, #32
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b088      	sub	sp, #32
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
 800ed2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ed30:	2318      	movs	r3, #24
 800ed32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed44:	f107 0308 	add.w	r3, r7, #8
 800ed48:	4619      	mov	r1, r3
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f7ff ff0a 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ed50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed54:	2118      	movs	r1, #24
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f000 fa12 	bl	800f180 <SDMMC_GetCmdResp1>
 800ed5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed5e:	69fb      	ldr	r3, [r7, #28]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3720      	adds	r7, #32
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b088      	sub	sp, #32
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ed76:	2319      	movs	r3, #25
 800ed78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed80:	2300      	movs	r3, #0
 800ed82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed8a:	f107 0308 	add.w	r3, r7, #8
 800ed8e:	4619      	mov	r1, r3
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7ff fee7 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ed96:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed9a:	2119      	movs	r1, #25
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 f9ef 	bl	800f180 <SDMMC_GetCmdResp1>
 800eda2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eda4:	69fb      	ldr	r3, [r7, #28]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3720      	adds	r7, #32
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
	...

0800edb0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b088      	sub	sp, #32
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800edb8:	2300      	movs	r3, #0
 800edba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800edbc:	230c      	movs	r3, #12
 800edbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800edc6:	2300      	movs	r3, #0
 800edc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800edce:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ede8:	f107 0308 	add.w	r3, r7, #8
 800edec:	4619      	mov	r1, r3
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f7ff feb8 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800edf4:	4a08      	ldr	r2, [pc, #32]	; (800ee18 <SDMMC_CmdStopTransfer+0x68>)
 800edf6:	210c      	movs	r1, #12
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 f9c1 	bl	800f180 <SDMMC_GetCmdResp1>
 800edfe:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3720      	adds	r7, #32
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	05f5e100 	.word	0x05f5e100

0800ee1c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08a      	sub	sp, #40	; 0x28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ee2c:	2307      	movs	r3, #7
 800ee2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee34:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee36:	2300      	movs	r3, #0
 800ee38:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee3e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee40:	f107 0310 	add.w	r3, r7, #16
 800ee44:	4619      	mov	r1, r3
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f7ff fe8c 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ee4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee50:	2107      	movs	r1, #7
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f000 f994 	bl	800f180 <SDMMC_GetCmdResp1>
 800ee58:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ee5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3728      	adds	r7, #40	; 0x28
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b088      	sub	sp, #32
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ee70:	2300      	movs	r3, #0
 800ee72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ee74:	2300      	movs	r3, #0
 800ee76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee82:	f107 0308 	add.w	r3, r7, #8
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7ff fe6b 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f000 fbb8 	bl	800f604 <SDMMC_GetCmdError>
 800ee94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee96:	69fb      	ldr	r3, [r7, #28]
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3720      	adds	r7, #32
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b088      	sub	sp, #32
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800eea8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800eeac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800eeae:	2308      	movs	r3, #8
 800eeb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eeb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eeb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eec0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eec2:	f107 0308 	add.w	r3, r7, #8
 800eec6:	4619      	mov	r1, r3
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f7ff fe4b 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f000 fb4a 	bl	800f568 <SDMMC_GetCmdResp7>
 800eed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eed6:	69fb      	ldr	r3, [r7, #28]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3720      	adds	r7, #32
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b088      	sub	sp, #32
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800eeee:	2337      	movs	r3, #55	; 0x37
 800eef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eef8:	2300      	movs	r3, #0
 800eefa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eefc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef02:	f107 0308 	add.w	r3, r7, #8
 800ef06:	4619      	mov	r1, r3
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f7ff fe2b 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ef0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef12:	2137      	movs	r1, #55	; 0x37
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 f933 	bl	800f180 <SDMMC_GetCmdResp1>
 800ef1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef1c:	69fb      	ldr	r3, [r7, #28]
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3720      	adds	r7, #32
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b088      	sub	sp, #32
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
 800ef2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ef34:	2329      	movs	r3, #41	; 0x29
 800ef36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef48:	f107 0308 	add.w	r3, r7, #8
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f7ff fe08 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 fa4f 	bl	800f3f8 <SDMMC_GetCmdResp3>
 800ef5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef5c:	69fb      	ldr	r3, [r7, #28]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3720      	adds	r7, #32
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}

0800ef66 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b088      	sub	sp, #32
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
 800ef6e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ef74:	2306      	movs	r3, #6
 800ef76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef78:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef88:	f107 0308 	add.w	r3, r7, #8
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7ff fde8 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ef94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef98:	2106      	movs	r1, #6
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 f8f0 	bl	800f180 <SDMMC_GetCmdResp1>
 800efa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efa2:	69fb      	ldr	r3, [r7, #28]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3720      	adds	r7, #32
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b088      	sub	sp, #32
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800efb4:	2300      	movs	r3, #0
 800efb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800efb8:	2333      	movs	r3, #51	; 0x33
 800efba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efc2:	2300      	movs	r3, #0
 800efc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efcc:	f107 0308 	add.w	r3, r7, #8
 800efd0:	4619      	mov	r1, r3
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f7ff fdc6 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800efd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800efdc:	2133      	movs	r1, #51	; 0x33
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 f8ce 	bl	800f180 <SDMMC_GetCmdResp1>
 800efe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efe6:	69fb      	ldr	r3, [r7, #28]
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3720      	adds	r7, #32
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b088      	sub	sp, #32
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800eff8:	2300      	movs	r3, #0
 800effa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800effc:	2302      	movs	r3, #2
 800effe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f000:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f006:	2300      	movs	r3, #0
 800f008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f00a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f00e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f010:	f107 0308 	add.w	r3, r7, #8
 800f014:	4619      	mov	r1, r3
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f7ff fda4 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f000 f9a1 	bl	800f364 <SDMMC_GetCmdResp2>
 800f022:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f024:	69fb      	ldr	r3, [r7, #28]
}
 800f026:	4618      	mov	r0, r3
 800f028:	3720      	adds	r7, #32
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}

0800f02e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b088      	sub	sp, #32
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]
 800f036:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f03c:	2309      	movs	r3, #9
 800f03e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f040:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f046:	2300      	movs	r3, #0
 800f048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f04a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f04e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f050:	f107 0308 	add.w	r3, r7, #8
 800f054:	4619      	mov	r1, r3
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7ff fd84 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 f981 	bl	800f364 <SDMMC_GetCmdResp2>
 800f062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f064:	69fb      	ldr	r3, [r7, #28]
}
 800f066:	4618      	mov	r0, r3
 800f068:	3720      	adds	r7, #32
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f06e:	b580      	push	{r7, lr}
 800f070:	b088      	sub	sp, #32
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
 800f076:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f078:	2300      	movs	r3, #0
 800f07a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f07c:	2303      	movs	r3, #3
 800f07e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f080:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f086:	2300      	movs	r3, #0
 800f088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f08a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f08e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f090:	f107 0308 	add.w	r3, r7, #8
 800f094:	4619      	mov	r1, r3
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7ff fd64 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f09c:	683a      	ldr	r2, [r7, #0]
 800f09e:	2103      	movs	r1, #3
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 f9e9 	bl	800f478 <SDMMC_GetCmdResp6>
 800f0a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0a8:	69fb      	ldr	r3, [r7, #28]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3720      	adds	r7, #32
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b088      	sub	sp, #32
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
 800f0ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f0c0:	230d      	movs	r3, #13
 800f0c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f0d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0d4:	f107 0308 	add.w	r3, r7, #8
 800f0d8:	4619      	mov	r1, r3
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f7ff fd42 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f0e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0e4:	210d      	movs	r1, #13
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 f84a 	bl	800f180 <SDMMC_GetCmdResp1>
 800f0ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0ee:	69fb      	ldr	r3, [r7, #28]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3720      	adds	r7, #32
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b088      	sub	sp, #32
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f100:	2300      	movs	r3, #0
 800f102:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800f104:	230d      	movs	r3, #13
 800f106:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f10c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f10e:	2300      	movs	r3, #0
 800f110:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f116:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f118:	f107 0308 	add.w	r3, r7, #8
 800f11c:	4619      	mov	r1, r3
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f7ff fd20 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800f124:	f241 3288 	movw	r2, #5000	; 0x1388
 800f128:	210d      	movs	r1, #13
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 f828 	bl	800f180 <SDMMC_GetCmdResp1>
 800f130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f132:	69fb      	ldr	r3, [r7, #28]
}
 800f134:	4618      	mov	r0, r3
 800f136:	3720      	adds	r7, #32
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b088      	sub	sp, #32
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800f144:	2300      	movs	r3, #0
 800f146:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800f148:	230b      	movs	r3, #11
 800f14a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f14c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f152:	2300      	movs	r3, #0
 800f154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f15a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f15c:	f107 0308 	add.w	r3, r7, #8
 800f160:	4619      	mov	r1, r3
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f7ff fcfe 	bl	800eb64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800f168:	f241 3288 	movw	r2, #5000	; 0x1388
 800f16c:	210b      	movs	r1, #11
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 f806 	bl	800f180 <SDMMC_GetCmdResp1>
 800f174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f176:	69fb      	ldr	r3, [r7, #28]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3720      	adds	r7, #32
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b088      	sub	sp, #32
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	460b      	mov	r3, r1
 800f18a:	607a      	str	r2, [r7, #4]
 800f18c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f18e:	4b70      	ldr	r3, [pc, #448]	; (800f350 <SDMMC_GetCmdResp1+0x1d0>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4a70      	ldr	r2, [pc, #448]	; (800f354 <SDMMC_GetCmdResp1+0x1d4>)
 800f194:	fba2 2303 	umull	r2, r3, r2, r3
 800f198:	0a5a      	lsrs	r2, r3, #9
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	fb02 f303 	mul.w	r3, r2, r3
 800f1a0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	1e5a      	subs	r2, r3, #1
 800f1a6:	61fa      	str	r2, [r7, #28]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d102      	bne.n	800f1b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f1ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f1b0:	e0c9      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1b6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800f1b8:	69ba      	ldr	r2, [r7, #24]
 800f1ba:	4b67      	ldr	r3, [pc, #412]	; (800f358 <SDMMC_GetCmdResp1+0x1d8>)
 800f1bc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d0ef      	beq.n	800f1a2 <SDMMC_GetCmdResp1+0x22>
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1ea      	bne.n	800f1a2 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1d0:	f003 0304 	and.w	r3, r3, #4
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d004      	beq.n	800f1e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2204      	movs	r2, #4
 800f1dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f1de:	2304      	movs	r3, #4
 800f1e0:	e0b1      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1e6:	f003 0301 	and.w	r3, r3, #1
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d004      	beq.n	800f1f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	e0a6      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	4a58      	ldr	r2, [pc, #352]	; (800f35c <SDMMC_GetCmdResp1+0x1dc>)
 800f1fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f7ff fcda 	bl	800ebb8 <SDMMC_GetCommandResponse>
 800f204:	4603      	mov	r3, r0
 800f206:	461a      	mov	r2, r3
 800f208:	7afb      	ldrb	r3, [r7, #11]
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d001      	beq.n	800f212 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f20e:	2301      	movs	r3, #1
 800f210:	e099      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f212:	2100      	movs	r1, #0
 800f214:	68f8      	ldr	r0, [r7, #12]
 800f216:	f7ff fcdc 	bl	800ebd2 <SDMMC_GetResponse>
 800f21a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f21c:	697a      	ldr	r2, [r7, #20]
 800f21e:	4b50      	ldr	r3, [pc, #320]	; (800f360 <SDMMC_GetCmdResp1+0x1e0>)
 800f220:	4013      	ands	r3, r2
 800f222:	2b00      	cmp	r3, #0
 800f224:	d101      	bne.n	800f22a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f226:	2300      	movs	r3, #0
 800f228:	e08d      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	da02      	bge.n	800f236 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f230:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f234:	e087      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d001      	beq.n	800f244 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f240:	2340      	movs	r3, #64	; 0x40
 800f242:	e080      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d001      	beq.n	800f252 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f24e:	2380      	movs	r3, #128	; 0x80
 800f250:	e079      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d002      	beq.n	800f262 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f25c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f260:	e071      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d002      	beq.n	800f272 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f26c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f270:	e069      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d002      	beq.n	800f282 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f27c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f280:	e061      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d002      	beq.n	800f292 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f28c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f290:	e059      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d002      	beq.n	800f2a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f29c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f2a0:	e051      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d002      	beq.n	800f2b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f2ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f2b0:	e049      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d002      	beq.n	800f2c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f2bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f2c0:	e041      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d002      	beq.n	800f2d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f2cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2d0:	e039      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d002      	beq.n	800f2e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f2dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f2e0:	e031      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d002      	beq.n	800f2f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f2ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f2f0:	e029      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f2fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f300:	e021      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d002      	beq.n	800f312 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f30c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f310:	e019      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d002      	beq.n	800f322 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f31c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f320:	e011      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f32c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f330:	e009      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	f003 0308 	and.w	r3, r3, #8
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d002      	beq.n	800f342 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f33c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f340:	e001      	b.n	800f346 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f346:	4618      	mov	r0, r3
 800f348:	3720      	adds	r7, #32
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	20000004 	.word	0x20000004
 800f354:	10624dd3 	.word	0x10624dd3
 800f358:	00200045 	.word	0x00200045
 800f35c:	002000c5 	.word	0x002000c5
 800f360:	fdffe008 	.word	0xfdffe008

0800f364 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f364:	b480      	push	{r7}
 800f366:	b085      	sub	sp, #20
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f36c:	4b1f      	ldr	r3, [pc, #124]	; (800f3ec <SDMMC_GetCmdResp2+0x88>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a1f      	ldr	r2, [pc, #124]	; (800f3f0 <SDMMC_GetCmdResp2+0x8c>)
 800f372:	fba2 2303 	umull	r2, r3, r2, r3
 800f376:	0a5b      	lsrs	r3, r3, #9
 800f378:	f241 3288 	movw	r2, #5000	; 0x1388
 800f37c:	fb02 f303 	mul.w	r3, r2, r3
 800f380:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	1e5a      	subs	r2, r3, #1
 800f386:	60fa      	str	r2, [r7, #12]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d102      	bne.n	800f392 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f38c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f390:	e026      	b.n	800f3e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f396:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d0ef      	beq.n	800f382 <SDMMC_GetCmdResp2+0x1e>
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d1ea      	bne.n	800f382 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3b0:	f003 0304 	and.w	r3, r3, #4
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d004      	beq.n	800f3c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2204      	movs	r2, #4
 800f3bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3be:	2304      	movs	r3, #4
 800f3c0:	e00e      	b.n	800f3e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3c6:	f003 0301 	and.w	r3, r3, #1
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d004      	beq.n	800f3d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e003      	b.n	800f3e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4a06      	ldr	r2, [pc, #24]	; (800f3f4 <SDMMC_GetCmdResp2+0x90>)
 800f3dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f3de:	2300      	movs	r3, #0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3714      	adds	r7, #20
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr
 800f3ec:	20000004 	.word	0x20000004
 800f3f0:	10624dd3 	.word	0x10624dd3
 800f3f4:	002000c5 	.word	0x002000c5

0800f3f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f400:	4b1a      	ldr	r3, [pc, #104]	; (800f46c <SDMMC_GetCmdResp3+0x74>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4a1a      	ldr	r2, [pc, #104]	; (800f470 <SDMMC_GetCmdResp3+0x78>)
 800f406:	fba2 2303 	umull	r2, r3, r2, r3
 800f40a:	0a5b      	lsrs	r3, r3, #9
 800f40c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f410:	fb02 f303 	mul.w	r3, r2, r3
 800f414:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	1e5a      	subs	r2, r3, #1
 800f41a:	60fa      	str	r2, [r7, #12]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d102      	bne.n	800f426 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f424:	e01b      	b.n	800f45e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f42a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f432:	2b00      	cmp	r3, #0
 800f434:	d0ef      	beq.n	800f416 <SDMMC_GetCmdResp3+0x1e>
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d1ea      	bne.n	800f416 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f444:	f003 0304 	and.w	r3, r3, #4
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d004      	beq.n	800f456 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2204      	movs	r2, #4
 800f450:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f452:	2304      	movs	r3, #4
 800f454:	e003      	b.n	800f45e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4a06      	ldr	r2, [pc, #24]	; (800f474 <SDMMC_GetCmdResp3+0x7c>)
 800f45a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	20000004 	.word	0x20000004
 800f470:	10624dd3 	.word	0x10624dd3
 800f474:	002000c5 	.word	0x002000c5

0800f478 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b088      	sub	sp, #32
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	460b      	mov	r3, r1
 800f482:	607a      	str	r2, [r7, #4]
 800f484:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f486:	4b35      	ldr	r3, [pc, #212]	; (800f55c <SDMMC_GetCmdResp6+0xe4>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4a35      	ldr	r2, [pc, #212]	; (800f560 <SDMMC_GetCmdResp6+0xe8>)
 800f48c:	fba2 2303 	umull	r2, r3, r2, r3
 800f490:	0a5b      	lsrs	r3, r3, #9
 800f492:	f241 3288 	movw	r2, #5000	; 0x1388
 800f496:	fb02 f303 	mul.w	r3, r2, r3
 800f49a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	1e5a      	subs	r2, r3, #1
 800f4a0:	61fa      	str	r2, [r7, #28]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d102      	bne.n	800f4ac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f4a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4aa:	e052      	b.n	800f552 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4b0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d0ef      	beq.n	800f49c <SDMMC_GetCmdResp6+0x24>
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d1ea      	bne.n	800f49c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ca:	f003 0304 	and.w	r3, r3, #4
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d004      	beq.n	800f4dc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2204      	movs	r2, #4
 800f4d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f4d8:	2304      	movs	r3, #4
 800f4da:	e03a      	b.n	800f552 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4e0:	f003 0301 	and.w	r3, r3, #1
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d004      	beq.n	800f4f2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e02f      	b.n	800f552 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f4f2:	68f8      	ldr	r0, [r7, #12]
 800f4f4:	f7ff fb60 	bl	800ebb8 <SDMMC_GetCommandResponse>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	7afb      	ldrb	r3, [r7, #11]
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d001      	beq.n	800f506 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f502:	2301      	movs	r3, #1
 800f504:	e025      	b.n	800f552 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	4a16      	ldr	r2, [pc, #88]	; (800f564 <SDMMC_GetCmdResp6+0xec>)
 800f50a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f50c:	2100      	movs	r1, #0
 800f50e:	68f8      	ldr	r0, [r7, #12]
 800f510:	f7ff fb5f 	bl	800ebd2 <SDMMC_GetResponse>
 800f514:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d106      	bne.n	800f52e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	0c1b      	lsrs	r3, r3, #16
 800f524:	b29a      	uxth	r2, r3
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f52a:	2300      	movs	r3, #0
 800f52c:	e011      	b.n	800f552 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f534:	2b00      	cmp	r3, #0
 800f536:	d002      	beq.n	800f53e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f53c:	e009      	b.n	800f552 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f544:	2b00      	cmp	r3, #0
 800f546:	d002      	beq.n	800f54e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f54c:	e001      	b.n	800f552 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f54e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f552:	4618      	mov	r0, r3
 800f554:	3720      	adds	r7, #32
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	20000004 	.word	0x20000004
 800f560:	10624dd3 	.word	0x10624dd3
 800f564:	002000c5 	.word	0x002000c5

0800f568 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f570:	4b22      	ldr	r3, [pc, #136]	; (800f5fc <SDMMC_GetCmdResp7+0x94>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a22      	ldr	r2, [pc, #136]	; (800f600 <SDMMC_GetCmdResp7+0x98>)
 800f576:	fba2 2303 	umull	r2, r3, r2, r3
 800f57a:	0a5b      	lsrs	r3, r3, #9
 800f57c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f580:	fb02 f303 	mul.w	r3, r2, r3
 800f584:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	1e5a      	subs	r2, r3, #1
 800f58a:	60fa      	str	r2, [r7, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d102      	bne.n	800f596 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f594:	e02c      	b.n	800f5f0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f59a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d0ef      	beq.n	800f586 <SDMMC_GetCmdResp7+0x1e>
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d1ea      	bne.n	800f586 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5b4:	f003 0304 	and.w	r3, r3, #4
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d004      	beq.n	800f5c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2204      	movs	r2, #4
 800f5c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f5c2:	2304      	movs	r3, #4
 800f5c4:	e014      	b.n	800f5f0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5ca:	f003 0301 	and.w	r3, r3, #1
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d004      	beq.n	800f5dc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f5d8:	2301      	movs	r3, #1
 800f5da:	e009      	b.n	800f5f0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d002      	beq.n	800f5ee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2240      	movs	r2, #64	; 0x40
 800f5ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f5ee:	2300      	movs	r3, #0

}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3714      	adds	r7, #20
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr
 800f5fc:	20000004 	.word	0x20000004
 800f600:	10624dd3 	.word	0x10624dd3

0800f604 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f604:	b480      	push	{r7}
 800f606:	b085      	sub	sp, #20
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f60c:	4b11      	ldr	r3, [pc, #68]	; (800f654 <SDMMC_GetCmdError+0x50>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a11      	ldr	r2, [pc, #68]	; (800f658 <SDMMC_GetCmdError+0x54>)
 800f612:	fba2 2303 	umull	r2, r3, r2, r3
 800f616:	0a5b      	lsrs	r3, r3, #9
 800f618:	f241 3288 	movw	r2, #5000	; 0x1388
 800f61c:	fb02 f303 	mul.w	r3, r2, r3
 800f620:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	1e5a      	subs	r2, r3, #1
 800f626:	60fa      	str	r2, [r7, #12]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d102      	bne.n	800f632 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f62c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f630:	e009      	b.n	800f646 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d0f1      	beq.n	800f622 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4a06      	ldr	r2, [pc, #24]	; (800f65c <SDMMC_GetCmdError+0x58>)
 800f642:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800f644:	2300      	movs	r3, #0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3714      	adds	r7, #20
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop
 800f654:	20000004 	.word	0x20000004
 800f658:	10624dd3 	.word	0x10624dd3
 800f65c:	002000c5 	.word	0x002000c5

0800f660 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f660:	b084      	sub	sp, #16
 800f662:	b580      	push	{r7, lr}
 800f664:	b084      	sub	sp, #16
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
 800f66a:	f107 001c 	add.w	r0, r7, #28
 800f66e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	68db      	ldr	r3, [r3, #12]
 800f676:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f001 faf6 	bl	8010c70 <USB_CoreReset>
 800f684:	4603      	mov	r3, r0
 800f686:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800f688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d106      	bne.n	800f69c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f692:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	639a      	str	r2, [r3, #56]	; 0x38
 800f69a:	e005      	b.n	800f6a8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800f6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f6b4:	b004      	add	sp, #16
 800f6b6:	4770      	bx	lr

0800f6b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b087      	sub	sp, #28
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	2b02      	cmp	r3, #2
 800f6ca:	d165      	bne.n	800f798 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	4a3e      	ldr	r2, [pc, #248]	; (800f7c8 <USB_SetTurnaroundTime+0x110>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d906      	bls.n	800f6e2 <USB_SetTurnaroundTime+0x2a>
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	4a3d      	ldr	r2, [pc, #244]	; (800f7cc <USB_SetTurnaroundTime+0x114>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d202      	bcs.n	800f6e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f6dc:	230f      	movs	r3, #15
 800f6de:	617b      	str	r3, [r7, #20]
 800f6e0:	e05c      	b.n	800f79c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	4a39      	ldr	r2, [pc, #228]	; (800f7cc <USB_SetTurnaroundTime+0x114>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d306      	bcc.n	800f6f8 <USB_SetTurnaroundTime+0x40>
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	4a38      	ldr	r2, [pc, #224]	; (800f7d0 <USB_SetTurnaroundTime+0x118>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d202      	bcs.n	800f6f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f6f2:	230e      	movs	r3, #14
 800f6f4:	617b      	str	r3, [r7, #20]
 800f6f6:	e051      	b.n	800f79c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	4a35      	ldr	r2, [pc, #212]	; (800f7d0 <USB_SetTurnaroundTime+0x118>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d306      	bcc.n	800f70e <USB_SetTurnaroundTime+0x56>
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	4a34      	ldr	r2, [pc, #208]	; (800f7d4 <USB_SetTurnaroundTime+0x11c>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d202      	bcs.n	800f70e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f708:	230d      	movs	r3, #13
 800f70a:	617b      	str	r3, [r7, #20]
 800f70c:	e046      	b.n	800f79c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	4a30      	ldr	r2, [pc, #192]	; (800f7d4 <USB_SetTurnaroundTime+0x11c>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d306      	bcc.n	800f724 <USB_SetTurnaroundTime+0x6c>
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	4a2f      	ldr	r2, [pc, #188]	; (800f7d8 <USB_SetTurnaroundTime+0x120>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d802      	bhi.n	800f724 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f71e:	230c      	movs	r3, #12
 800f720:	617b      	str	r3, [r7, #20]
 800f722:	e03b      	b.n	800f79c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	4a2c      	ldr	r2, [pc, #176]	; (800f7d8 <USB_SetTurnaroundTime+0x120>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d906      	bls.n	800f73a <USB_SetTurnaroundTime+0x82>
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	4a2b      	ldr	r2, [pc, #172]	; (800f7dc <USB_SetTurnaroundTime+0x124>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d802      	bhi.n	800f73a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f734:	230b      	movs	r3, #11
 800f736:	617b      	str	r3, [r7, #20]
 800f738:	e030      	b.n	800f79c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	4a27      	ldr	r2, [pc, #156]	; (800f7dc <USB_SetTurnaroundTime+0x124>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d906      	bls.n	800f750 <USB_SetTurnaroundTime+0x98>
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	4a26      	ldr	r2, [pc, #152]	; (800f7e0 <USB_SetTurnaroundTime+0x128>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d802      	bhi.n	800f750 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f74a:	230a      	movs	r3, #10
 800f74c:	617b      	str	r3, [r7, #20]
 800f74e:	e025      	b.n	800f79c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	4a23      	ldr	r2, [pc, #140]	; (800f7e0 <USB_SetTurnaroundTime+0x128>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d906      	bls.n	800f766 <USB_SetTurnaroundTime+0xae>
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	4a22      	ldr	r2, [pc, #136]	; (800f7e4 <USB_SetTurnaroundTime+0x12c>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d202      	bcs.n	800f766 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f760:	2309      	movs	r3, #9
 800f762:	617b      	str	r3, [r7, #20]
 800f764:	e01a      	b.n	800f79c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	4a1e      	ldr	r2, [pc, #120]	; (800f7e4 <USB_SetTurnaroundTime+0x12c>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d306      	bcc.n	800f77c <USB_SetTurnaroundTime+0xc4>
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	4a1d      	ldr	r2, [pc, #116]	; (800f7e8 <USB_SetTurnaroundTime+0x130>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d802      	bhi.n	800f77c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f776:	2308      	movs	r3, #8
 800f778:	617b      	str	r3, [r7, #20]
 800f77a:	e00f      	b.n	800f79c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	4a1a      	ldr	r2, [pc, #104]	; (800f7e8 <USB_SetTurnaroundTime+0x130>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d906      	bls.n	800f792 <USB_SetTurnaroundTime+0xda>
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	4a19      	ldr	r2, [pc, #100]	; (800f7ec <USB_SetTurnaroundTime+0x134>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d202      	bcs.n	800f792 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f78c:	2307      	movs	r3, #7
 800f78e:	617b      	str	r3, [r7, #20]
 800f790:	e004      	b.n	800f79c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f792:	2306      	movs	r3, #6
 800f794:	617b      	str	r3, [r7, #20]
 800f796:	e001      	b.n	800f79c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f798:	2309      	movs	r3, #9
 800f79a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	68da      	ldr	r2, [r3, #12]
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	029b      	lsls	r3, r3, #10
 800f7b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f7b4:	431a      	orrs	r2, r3
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f7ba:	2300      	movs	r3, #0
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	371c      	adds	r7, #28
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr
 800f7c8:	00d8acbf 	.word	0x00d8acbf
 800f7cc:	00e4e1c0 	.word	0x00e4e1c0
 800f7d0:	00f42400 	.word	0x00f42400
 800f7d4:	01067380 	.word	0x01067380
 800f7d8:	011a499f 	.word	0x011a499f
 800f7dc:	01312cff 	.word	0x01312cff
 800f7e0:	014ca43f 	.word	0x014ca43f
 800f7e4:	016e3600 	.word	0x016e3600
 800f7e8:	01a6ab1f 	.word	0x01a6ab1f
 800f7ec:	01e84800 	.word	0x01e84800

0800f7f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	689b      	ldr	r3, [r3, #8]
 800f7fc:	f043 0201 	orr.w	r2, r3, #1
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f812:	b480      	push	{r7}
 800f814:	b083      	sub	sp, #12
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	689b      	ldr	r3, [r3, #8]
 800f81e:	f023 0201 	bic.w	r2, r3, #1
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f826:	2300      	movs	r3, #0
}
 800f828:	4618      	mov	r0, r3
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	460b      	mov	r3, r1
 800f83e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f840:	2300      	movs	r3, #0
 800f842:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f850:	78fb      	ldrb	r3, [r7, #3]
 800f852:	2b01      	cmp	r3, #1
 800f854:	d115      	bne.n	800f882 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f862:	2001      	movs	r0, #1
 800f864:	f7f5 fdd6 	bl	8005414 <HAL_Delay>
      ms++;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	3301      	adds	r3, #1
 800f86c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f001 f985 	bl	8010b7e <USB_GetMode>
 800f874:	4603      	mov	r3, r0
 800f876:	2b01      	cmp	r3, #1
 800f878:	d01e      	beq.n	800f8b8 <USB_SetCurrentMode+0x84>
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2b31      	cmp	r3, #49	; 0x31
 800f87e:	d9f0      	bls.n	800f862 <USB_SetCurrentMode+0x2e>
 800f880:	e01a      	b.n	800f8b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f882:	78fb      	ldrb	r3, [r7, #3]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d115      	bne.n	800f8b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f894:	2001      	movs	r0, #1
 800f896:	f7f5 fdbd 	bl	8005414 <HAL_Delay>
      ms++;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	3301      	adds	r3, #1
 800f89e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f001 f96c 	bl	8010b7e <USB_GetMode>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d005      	beq.n	800f8b8 <USB_SetCurrentMode+0x84>
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	2b31      	cmp	r3, #49	; 0x31
 800f8b0:	d9f0      	bls.n	800f894 <USB_SetCurrentMode+0x60>
 800f8b2:	e001      	b.n	800f8b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e005      	b.n	800f8c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2b32      	cmp	r3, #50	; 0x32
 800f8bc:	d101      	bne.n	800f8c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e000      	b.n	800f8c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f8c2:	2300      	movs	r3, #0
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3710      	adds	r7, #16
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f8cc:	b084      	sub	sp, #16
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b086      	sub	sp, #24
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
 800f8d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f8da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	613b      	str	r3, [r7, #16]
 800f8ea:	e009      	b.n	800f900 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	3340      	adds	r3, #64	; 0x40
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	4413      	add	r3, r2
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	613b      	str	r3, [r7, #16]
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	2b0e      	cmp	r3, #14
 800f904:	d9f2      	bls.n	800f8ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d11c      	bne.n	800f946 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f91a:	f043 0302 	orr.w	r3, r3, #2
 800f91e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f924:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	601a      	str	r2, [r3, #0]
 800f944:	e005      	b.n	800f952 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f94a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f958:	461a      	mov	r2, r3
 800f95a:	2300      	movs	r3, #0
 800f95c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f964:	4619      	mov	r1, r3
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f96c:	461a      	mov	r2, r3
 800f96e:	680b      	ldr	r3, [r1, #0]
 800f970:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f972:	2103      	movs	r1, #3
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 f959 	bl	800fc2c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f97a:	2110      	movs	r1, #16
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f000 f8f1 	bl	800fb64 <USB_FlushTxFifo>
 800f982:	4603      	mov	r3, r0
 800f984:	2b00      	cmp	r3, #0
 800f986:	d001      	beq.n	800f98c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800f988:	2301      	movs	r3, #1
 800f98a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f000 f91d 	bl	800fbcc <USB_FlushRxFifo>
 800f992:	4603      	mov	r3, r0
 800f994:	2b00      	cmp	r3, #0
 800f996:	d001      	beq.n	800f99c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800f998:	2301      	movs	r3, #1
 800f99a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	2300      	movs	r3, #0
 800f9be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	613b      	str	r3, [r7, #16]
 800f9c4:	e043      	b.n	800fa4e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	015a      	lsls	r2, r3, #5
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	4413      	add	r3, r2
 800f9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f9d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9dc:	d118      	bne.n	800fa10 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d10a      	bne.n	800f9fa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	015a      	lsls	r2, r3, #5
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	4413      	add	r3, r2
 800f9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f9f6:	6013      	str	r3, [r2, #0]
 800f9f8:	e013      	b.n	800fa22 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	015a      	lsls	r2, r3, #5
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	4413      	add	r3, r2
 800fa02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa06:	461a      	mov	r2, r3
 800fa08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fa0c:	6013      	str	r3, [r2, #0]
 800fa0e:	e008      	b.n	800fa22 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	015a      	lsls	r2, r3, #5
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	4413      	add	r3, r2
 800fa18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	2300      	movs	r3, #0
 800fa20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	015a      	lsls	r2, r3, #5
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	4413      	add	r3, r2
 800fa2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa2e:	461a      	mov	r2, r3
 800fa30:	2300      	movs	r3, #0
 800fa32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	015a      	lsls	r2, r3, #5
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa40:	461a      	mov	r2, r3
 800fa42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fa46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	613b      	str	r3, [r7, #16]
 800fa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa50:	693a      	ldr	r2, [r7, #16]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d3b7      	bcc.n	800f9c6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa56:	2300      	movs	r3, #0
 800fa58:	613b      	str	r3, [r7, #16]
 800fa5a:	e043      	b.n	800fae4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	015a      	lsls	r2, r3, #5
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	4413      	add	r3, r2
 800fa64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fa6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa72:	d118      	bne.n	800faa6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d10a      	bne.n	800fa90 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	015a      	lsls	r2, r3, #5
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	4413      	add	r3, r2
 800fa82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa86:	461a      	mov	r2, r3
 800fa88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fa8c:	6013      	str	r3, [r2, #0]
 800fa8e:	e013      	b.n	800fab8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	015a      	lsls	r2, r3, #5
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	4413      	add	r3, r2
 800fa98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800faa2:	6013      	str	r3, [r2, #0]
 800faa4:	e008      	b.n	800fab8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	015a      	lsls	r2, r3, #5
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	4413      	add	r3, r2
 800faae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fab2:	461a      	mov	r2, r3
 800fab4:	2300      	movs	r3, #0
 800fab6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	015a      	lsls	r2, r3, #5
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	4413      	add	r3, r2
 800fac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fac4:	461a      	mov	r2, r3
 800fac6:	2300      	movs	r3, #0
 800fac8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	015a      	lsls	r2, r3, #5
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	4413      	add	r3, r2
 800fad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fad6:	461a      	mov	r2, r3
 800fad8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fadc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	3301      	adds	r3, #1
 800fae2:	613b      	str	r3, [r7, #16]
 800fae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae6:	693a      	ldr	r2, [r7, #16]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d3b7      	bcc.n	800fa5c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faf2:	691b      	ldr	r3, [r3, #16]
 800faf4:	68fa      	ldr	r2, [r7, #12]
 800faf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fafa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fafe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fb0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	699b      	ldr	r3, [r3, #24]
 800fb12:	f043 0210 	orr.w	r2, r3, #16
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	699a      	ldr	r2, [r3, #24]
 800fb1e:	4b10      	ldr	r3, [pc, #64]	; (800fb60 <USB_DevInit+0x294>)
 800fb20:	4313      	orrs	r3, r2
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fb26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d005      	beq.n	800fb38 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	699b      	ldr	r3, [r3, #24]
 800fb30:	f043 0208 	orr.w	r2, r3, #8
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fb38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d107      	bne.n	800fb4e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	699b      	ldr	r3, [r3, #24]
 800fb42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb46:	f043 0304 	orr.w	r3, r3, #4
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fb4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3718      	adds	r7, #24
 800fb54:	46bd      	mov	sp, r7
 800fb56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb5a:	b004      	add	sp, #16
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop
 800fb60:	803c3800 	.word	0x803c3800

0800fb64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b085      	sub	sp, #20
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	3301      	adds	r3, #1
 800fb76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	4a13      	ldr	r2, [pc, #76]	; (800fbc8 <USB_FlushTxFifo+0x64>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d901      	bls.n	800fb84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fb80:	2303      	movs	r3, #3
 800fb82:	e01b      	b.n	800fbbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	691b      	ldr	r3, [r3, #16]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	daf2      	bge.n	800fb72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	019b      	lsls	r3, r3, #6
 800fb94:	f043 0220 	orr.w	r2, r3, #32
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	4a08      	ldr	r2, [pc, #32]	; (800fbc8 <USB_FlushTxFifo+0x64>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d901      	bls.n	800fbae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fbaa:	2303      	movs	r3, #3
 800fbac:	e006      	b.n	800fbbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	691b      	ldr	r3, [r3, #16]
 800fbb2:	f003 0320 	and.w	r3, r3, #32
 800fbb6:	2b20      	cmp	r3, #32
 800fbb8:	d0f0      	beq.n	800fb9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fbba:	2300      	movs	r3, #0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3714      	adds	r7, #20
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr
 800fbc8:	00030d40 	.word	0x00030d40

0800fbcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b085      	sub	sp, #20
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	4a11      	ldr	r2, [pc, #68]	; (800fc28 <USB_FlushRxFifo+0x5c>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d901      	bls.n	800fbea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fbe6:	2303      	movs	r3, #3
 800fbe8:	e018      	b.n	800fc1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	691b      	ldr	r3, [r3, #16]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	daf2      	bge.n	800fbd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2210      	movs	r2, #16
 800fbfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	4a08      	ldr	r2, [pc, #32]	; (800fc28 <USB_FlushRxFifo+0x5c>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d901      	bls.n	800fc0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fc0a:	2303      	movs	r3, #3
 800fc0c:	e006      	b.n	800fc1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	691b      	ldr	r3, [r3, #16]
 800fc12:	f003 0310 	and.w	r3, r3, #16
 800fc16:	2b10      	cmp	r3, #16
 800fc18:	d0f0      	beq.n	800fbfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fc1a:	2300      	movs	r3, #0
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3714      	adds	r7, #20
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr
 800fc28:	00030d40 	.word	0x00030d40

0800fc2c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b085      	sub	sp, #20
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	460b      	mov	r3, r1
 800fc36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	78fb      	ldrb	r3, [r7, #3]
 800fc46:	68f9      	ldr	r1, [r7, #12]
 800fc48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fc50:	2300      	movs	r3, #0
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3714      	adds	r7, #20
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr

0800fc5e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fc5e:	b480      	push	{r7}
 800fc60:	b087      	sub	sp, #28
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc70:	689b      	ldr	r3, [r3, #8]
 800fc72:	f003 0306 	and.w	r3, r3, #6
 800fc76:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	d002      	beq.n	800fc84 <USB_GetDevSpeed+0x26>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2b06      	cmp	r3, #6
 800fc82:	d102      	bne.n	800fc8a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fc84:	2302      	movs	r3, #2
 800fc86:	75fb      	strb	r3, [r7, #23]
 800fc88:	e001      	b.n	800fc8e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800fc8a:	230f      	movs	r3, #15
 800fc8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fc8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	371c      	adds	r7, #28
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b085      	sub	sp, #20
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	785b      	ldrb	r3, [r3, #1]
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d13a      	bne.n	800fd2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcbe:	69da      	ldr	r2, [r3, #28]
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	f003 030f 	and.w	r3, r3, #15
 800fcc8:	2101      	movs	r1, #1
 800fcca:	fa01 f303 	lsl.w	r3, r1, r3
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	68f9      	ldr	r1, [r7, #12]
 800fcd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	015a      	lsls	r2, r3, #5
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	4413      	add	r3, r2
 800fce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d155      	bne.n	800fd9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	015a      	lsls	r2, r3, #5
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcfc:	681a      	ldr	r2, [r3, #0]
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	791b      	ldrb	r3, [r3, #4]
 800fd0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	059b      	lsls	r3, r3, #22
 800fd12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd14:	4313      	orrs	r3, r2
 800fd16:	68ba      	ldr	r2, [r7, #8]
 800fd18:	0151      	lsls	r1, r2, #5
 800fd1a:	68fa      	ldr	r2, [r7, #12]
 800fd1c:	440a      	add	r2, r1
 800fd1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd2a:	6013      	str	r3, [r2, #0]
 800fd2c:	e036      	b.n	800fd9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd34:	69da      	ldr	r2, [r3, #28]
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	f003 030f 	and.w	r3, r3, #15
 800fd3e:	2101      	movs	r1, #1
 800fd40:	fa01 f303 	lsl.w	r3, r1, r3
 800fd44:	041b      	lsls	r3, r3, #16
 800fd46:	68f9      	ldr	r1, [r7, #12]
 800fd48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd4c:	4313      	orrs	r3, r2
 800fd4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	015a      	lsls	r2, r3, #5
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	4413      	add	r3, r2
 800fd58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d11a      	bne.n	800fd9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	015a      	lsls	r2, r3, #5
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	791b      	ldrb	r3, [r3, #4]
 800fd80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd82:	430b      	orrs	r3, r1
 800fd84:	4313      	orrs	r3, r2
 800fd86:	68ba      	ldr	r2, [r7, #8]
 800fd88:	0151      	lsls	r1, r2, #5
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	440a      	add	r2, r1
 800fd8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fd9c:	2300      	movs	r3, #0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3714      	adds	r7, #20
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr
	...

0800fdac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b085      	sub	sp, #20
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	785b      	ldrb	r3, [r3, #1]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d161      	bne.n	800fe8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	015a      	lsls	r2, r3, #5
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	4413      	add	r3, r2
 800fdd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdde:	d11f      	bne.n	800fe20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	015a      	lsls	r2, r3, #5
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	4413      	add	r3, r2
 800fde8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	68ba      	ldr	r2, [r7, #8]
 800fdf0:	0151      	lsls	r1, r2, #5
 800fdf2:	68fa      	ldr	r2, [r7, #12]
 800fdf4:	440a      	add	r2, r1
 800fdf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fdfe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	015a      	lsls	r2, r3, #5
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	4413      	add	r3, r2
 800fe08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	68ba      	ldr	r2, [r7, #8]
 800fe10:	0151      	lsls	r1, r2, #5
 800fe12:	68fa      	ldr	r2, [r7, #12]
 800fe14:	440a      	add	r2, r1
 800fe16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	f003 030f 	and.w	r3, r3, #15
 800fe30:	2101      	movs	r1, #1
 800fe32:	fa01 f303 	lsl.w	r3, r1, r3
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	43db      	mvns	r3, r3
 800fe3a:	68f9      	ldr	r1, [r7, #12]
 800fe3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe40:	4013      	ands	r3, r2
 800fe42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe4a:	69da      	ldr	r2, [r3, #28]
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	f003 030f 	and.w	r3, r3, #15
 800fe54:	2101      	movs	r1, #1
 800fe56:	fa01 f303 	lsl.w	r3, r1, r3
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	43db      	mvns	r3, r3
 800fe5e:	68f9      	ldr	r1, [r7, #12]
 800fe60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe64:	4013      	ands	r3, r2
 800fe66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	015a      	lsls	r2, r3, #5
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	4413      	add	r3, r2
 800fe70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe74:	681a      	ldr	r2, [r3, #0]
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	0159      	lsls	r1, r3, #5
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	440b      	add	r3, r1
 800fe7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe82:	4619      	mov	r1, r3
 800fe84:	4b35      	ldr	r3, [pc, #212]	; (800ff5c <USB_DeactivateEndpoint+0x1b0>)
 800fe86:	4013      	ands	r3, r2
 800fe88:	600b      	str	r3, [r1, #0]
 800fe8a:	e060      	b.n	800ff4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	015a      	lsls	r2, r3, #5
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	4413      	add	r3, r2
 800fe94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fea2:	d11f      	bne.n	800fee4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	015a      	lsls	r2, r3, #5
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	4413      	add	r3, r2
 800feac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	68ba      	ldr	r2, [r7, #8]
 800feb4:	0151      	lsls	r1, r2, #5
 800feb6:	68fa      	ldr	r2, [r7, #12]
 800feb8:	440a      	add	r2, r1
 800feba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800febe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fec2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	015a      	lsls	r2, r3, #5
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	4413      	add	r3, r2
 800fecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	68ba      	ldr	r2, [r7, #8]
 800fed4:	0151      	lsls	r1, r2, #5
 800fed6:	68fa      	ldr	r2, [r7, #12]
 800fed8:	440a      	add	r2, r1
 800feda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fee2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	f003 030f 	and.w	r3, r3, #15
 800fef4:	2101      	movs	r1, #1
 800fef6:	fa01 f303 	lsl.w	r3, r1, r3
 800fefa:	041b      	lsls	r3, r3, #16
 800fefc:	43db      	mvns	r3, r3
 800fefe:	68f9      	ldr	r1, [r7, #12]
 800ff00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff04:	4013      	ands	r3, r2
 800ff06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff0e:	69da      	ldr	r2, [r3, #28]
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	f003 030f 	and.w	r3, r3, #15
 800ff18:	2101      	movs	r1, #1
 800ff1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ff1e:	041b      	lsls	r3, r3, #16
 800ff20:	43db      	mvns	r3, r3
 800ff22:	68f9      	ldr	r1, [r7, #12]
 800ff24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff28:	4013      	ands	r3, r2
 800ff2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	015a      	lsls	r2, r3, #5
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	4413      	add	r3, r2
 800ff34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff38:	681a      	ldr	r2, [r3, #0]
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	0159      	lsls	r1, r3, #5
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	440b      	add	r3, r1
 800ff42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff46:	4619      	mov	r1, r3
 800ff48:	4b05      	ldr	r3, [pc, #20]	; (800ff60 <USB_DeactivateEndpoint+0x1b4>)
 800ff4a:	4013      	ands	r3, r2
 800ff4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ff4e:	2300      	movs	r3, #0
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3714      	adds	r7, #20
 800ff54:	46bd      	mov	sp, r7
 800ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5a:	4770      	bx	lr
 800ff5c:	ec337800 	.word	0xec337800
 800ff60:	eff37800 	.word	0xeff37800

0800ff64 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b086      	sub	sp, #24
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	785b      	ldrb	r3, [r3, #1]
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	f040 810a 	bne.w	8010196 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	699b      	ldr	r3, [r3, #24]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d132      	bne.n	800fff0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	015a      	lsls	r2, r3, #5
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	4413      	add	r3, r2
 800ff92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff96:	691b      	ldr	r3, [r3, #16]
 800ff98:	693a      	ldr	r2, [r7, #16]
 800ff9a:	0151      	lsls	r1, r2, #5
 800ff9c:	697a      	ldr	r2, [r7, #20]
 800ff9e:	440a      	add	r2, r1
 800ffa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ffa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ffac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	015a      	lsls	r2, r3, #5
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffba:	691b      	ldr	r3, [r3, #16]
 800ffbc:	693a      	ldr	r2, [r7, #16]
 800ffbe:	0151      	lsls	r1, r2, #5
 800ffc0:	697a      	ldr	r2, [r7, #20]
 800ffc2:	440a      	add	r2, r1
 800ffc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ffcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	015a      	lsls	r2, r3, #5
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffda:	691b      	ldr	r3, [r3, #16]
 800ffdc:	693a      	ldr	r2, [r7, #16]
 800ffde:	0151      	lsls	r1, r2, #5
 800ffe0:	697a      	ldr	r2, [r7, #20]
 800ffe2:	440a      	add	r2, r1
 800ffe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffe8:	0cdb      	lsrs	r3, r3, #19
 800ffea:	04db      	lsls	r3, r3, #19
 800ffec:	6113      	str	r3, [r2, #16]
 800ffee:	e074      	b.n	80100da <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	015a      	lsls	r2, r3, #5
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	4413      	add	r3, r2
 800fff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fffc:	691b      	ldr	r3, [r3, #16]
 800fffe:	693a      	ldr	r2, [r7, #16]
 8010000:	0151      	lsls	r1, r2, #5
 8010002:	697a      	ldr	r2, [r7, #20]
 8010004:	440a      	add	r2, r1
 8010006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801000a:	0cdb      	lsrs	r3, r3, #19
 801000c:	04db      	lsls	r3, r3, #19
 801000e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	015a      	lsls	r2, r3, #5
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	4413      	add	r3, r2
 8010018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	693a      	ldr	r2, [r7, #16]
 8010020:	0151      	lsls	r1, r2, #5
 8010022:	697a      	ldr	r2, [r7, #20]
 8010024:	440a      	add	r2, r1
 8010026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801002a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801002e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010032:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	015a      	lsls	r2, r3, #5
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	4413      	add	r3, r2
 801003c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010040:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	6999      	ldr	r1, [r3, #24]
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	68db      	ldr	r3, [r3, #12]
 801004a:	440b      	add	r3, r1
 801004c:	1e59      	subs	r1, r3, #1
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	fbb1 f3f3 	udiv	r3, r1, r3
 8010056:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010058:	4b9e      	ldr	r3, [pc, #632]	; (80102d4 <USB_EPStartXfer+0x370>)
 801005a:	400b      	ands	r3, r1
 801005c:	6939      	ldr	r1, [r7, #16]
 801005e:	0148      	lsls	r0, r1, #5
 8010060:	6979      	ldr	r1, [r7, #20]
 8010062:	4401      	add	r1, r0
 8010064:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010068:	4313      	orrs	r3, r2
 801006a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	015a      	lsls	r2, r3, #5
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	4413      	add	r3, r2
 8010074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010078:	691a      	ldr	r2, [r3, #16]
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	699b      	ldr	r3, [r3, #24]
 801007e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010082:	6939      	ldr	r1, [r7, #16]
 8010084:	0148      	lsls	r0, r1, #5
 8010086:	6979      	ldr	r1, [r7, #20]
 8010088:	4401      	add	r1, r0
 801008a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801008e:	4313      	orrs	r3, r2
 8010090:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	791b      	ldrb	r3, [r3, #4]
 8010096:	2b01      	cmp	r3, #1
 8010098:	d11f      	bne.n	80100da <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	015a      	lsls	r2, r3, #5
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	4413      	add	r3, r2
 80100a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100a6:	691b      	ldr	r3, [r3, #16]
 80100a8:	693a      	ldr	r2, [r7, #16]
 80100aa:	0151      	lsls	r1, r2, #5
 80100ac:	697a      	ldr	r2, [r7, #20]
 80100ae:	440a      	add	r2, r1
 80100b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80100b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	015a      	lsls	r2, r3, #5
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	4413      	add	r3, r2
 80100c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100c6:	691b      	ldr	r3, [r3, #16]
 80100c8:	693a      	ldr	r2, [r7, #16]
 80100ca:	0151      	lsls	r1, r2, #5
 80100cc:	697a      	ldr	r2, [r7, #20]
 80100ce:	440a      	add	r2, r1
 80100d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80100d8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	015a      	lsls	r2, r3, #5
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	4413      	add	r3, r2
 80100e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	693a      	ldr	r2, [r7, #16]
 80100ea:	0151      	lsls	r1, r2, #5
 80100ec:	697a      	ldr	r2, [r7, #20]
 80100ee:	440a      	add	r2, r1
 80100f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80100f8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	791b      	ldrb	r3, [r3, #4]
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d015      	beq.n	801012e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	699b      	ldr	r3, [r3, #24]
 8010106:	2b00      	cmp	r3, #0
 8010108:	f000 8106 	beq.w	8010318 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	f003 030f 	and.w	r3, r3, #15
 801011c:	2101      	movs	r1, #1
 801011e:	fa01 f303 	lsl.w	r3, r1, r3
 8010122:	6979      	ldr	r1, [r7, #20]
 8010124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010128:	4313      	orrs	r3, r2
 801012a:	634b      	str	r3, [r1, #52]	; 0x34
 801012c:	e0f4      	b.n	8010318 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010134:	689b      	ldr	r3, [r3, #8]
 8010136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801013a:	2b00      	cmp	r3, #0
 801013c:	d110      	bne.n	8010160 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	015a      	lsls	r2, r3, #5
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	4413      	add	r3, r2
 8010146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	693a      	ldr	r2, [r7, #16]
 801014e:	0151      	lsls	r1, r2, #5
 8010150:	697a      	ldr	r2, [r7, #20]
 8010152:	440a      	add	r2, r1
 8010154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010158:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801015c:	6013      	str	r3, [r2, #0]
 801015e:	e00f      	b.n	8010180 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	015a      	lsls	r2, r3, #5
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	4413      	add	r3, r2
 8010168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	693a      	ldr	r2, [r7, #16]
 8010170:	0151      	lsls	r1, r2, #5
 8010172:	697a      	ldr	r2, [r7, #20]
 8010174:	440a      	add	r2, r1
 8010176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801017a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801017e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	6919      	ldr	r1, [r3, #16]
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	781a      	ldrb	r2, [r3, #0]
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	699b      	ldr	r3, [r3, #24]
 801018c:	b29b      	uxth	r3, r3
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 fa94 	bl	80106bc <USB_WritePacket>
 8010194:	e0c0      	b.n	8010318 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	015a      	lsls	r2, r3, #5
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	4413      	add	r3, r2
 801019e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101a2:	691b      	ldr	r3, [r3, #16]
 80101a4:	693a      	ldr	r2, [r7, #16]
 80101a6:	0151      	lsls	r1, r2, #5
 80101a8:	697a      	ldr	r2, [r7, #20]
 80101aa:	440a      	add	r2, r1
 80101ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101b0:	0cdb      	lsrs	r3, r3, #19
 80101b2:	04db      	lsls	r3, r3, #19
 80101b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	015a      	lsls	r2, r3, #5
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	4413      	add	r3, r2
 80101be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101c2:	691b      	ldr	r3, [r3, #16]
 80101c4:	693a      	ldr	r2, [r7, #16]
 80101c6:	0151      	lsls	r1, r2, #5
 80101c8:	697a      	ldr	r2, [r7, #20]
 80101ca:	440a      	add	r2, r1
 80101cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80101d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80101d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	699b      	ldr	r3, [r3, #24]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d123      	bne.n	801022a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	015a      	lsls	r2, r3, #5
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	4413      	add	r3, r2
 80101ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ee:	691a      	ldr	r2, [r3, #16]
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101f8:	6939      	ldr	r1, [r7, #16]
 80101fa:	0148      	lsls	r0, r1, #5
 80101fc:	6979      	ldr	r1, [r7, #20]
 80101fe:	4401      	add	r1, r0
 8010200:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010204:	4313      	orrs	r3, r2
 8010206:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	015a      	lsls	r2, r3, #5
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	4413      	add	r3, r2
 8010210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010214:	691b      	ldr	r3, [r3, #16]
 8010216:	693a      	ldr	r2, [r7, #16]
 8010218:	0151      	lsls	r1, r2, #5
 801021a:	697a      	ldr	r2, [r7, #20]
 801021c:	440a      	add	r2, r1
 801021e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010222:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010226:	6113      	str	r3, [r2, #16]
 8010228:	e037      	b.n	801029a <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	699a      	ldr	r2, [r3, #24]
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	4413      	add	r3, r2
 8010234:	1e5a      	subs	r2, r3, #1
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	68db      	ldr	r3, [r3, #12]
 801023a:	fbb2 f3f3 	udiv	r3, r2, r3
 801023e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	89fa      	ldrh	r2, [r7, #14]
 8010246:	fb03 f202 	mul.w	r2, r3, r2
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	015a      	lsls	r2, r3, #5
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	4413      	add	r3, r2
 8010256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801025a:	691a      	ldr	r2, [r3, #16]
 801025c:	89fb      	ldrh	r3, [r7, #14]
 801025e:	04d9      	lsls	r1, r3, #19
 8010260:	4b1c      	ldr	r3, [pc, #112]	; (80102d4 <USB_EPStartXfer+0x370>)
 8010262:	400b      	ands	r3, r1
 8010264:	6939      	ldr	r1, [r7, #16]
 8010266:	0148      	lsls	r0, r1, #5
 8010268:	6979      	ldr	r1, [r7, #20]
 801026a:	4401      	add	r1, r0
 801026c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010270:	4313      	orrs	r3, r2
 8010272:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	015a      	lsls	r2, r3, #5
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	4413      	add	r3, r2
 801027c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010280:	691a      	ldr	r2, [r3, #16]
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	69db      	ldr	r3, [r3, #28]
 8010286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801028a:	6939      	ldr	r1, [r7, #16]
 801028c:	0148      	lsls	r0, r1, #5
 801028e:	6979      	ldr	r1, [r7, #20]
 8010290:	4401      	add	r1, r0
 8010292:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010296:	4313      	orrs	r3, r2
 8010298:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	791b      	ldrb	r3, [r3, #4]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d12a      	bne.n	80102f8 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102a8:	689b      	ldr	r3, [r3, #8]
 80102aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d112      	bne.n	80102d8 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	015a      	lsls	r2, r3, #5
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	4413      	add	r3, r2
 80102ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	693a      	ldr	r2, [r7, #16]
 80102c2:	0151      	lsls	r1, r2, #5
 80102c4:	697a      	ldr	r2, [r7, #20]
 80102c6:	440a      	add	r2, r1
 80102c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80102d0:	6013      	str	r3, [r2, #0]
 80102d2:	e011      	b.n	80102f8 <USB_EPStartXfer+0x394>
 80102d4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	015a      	lsls	r2, r3, #5
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	4413      	add	r3, r2
 80102e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	693a      	ldr	r2, [r7, #16]
 80102e8:	0151      	lsls	r1, r2, #5
 80102ea:	697a      	ldr	r2, [r7, #20]
 80102ec:	440a      	add	r2, r1
 80102ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	015a      	lsls	r2, r3, #5
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	4413      	add	r3, r2
 8010300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	693a      	ldr	r2, [r7, #16]
 8010308:	0151      	lsls	r1, r2, #5
 801030a:	697a      	ldr	r2, [r7, #20]
 801030c:	440a      	add	r2, r1
 801030e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010312:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010318:	2300      	movs	r3, #0
}
 801031a:	4618      	mov	r0, r3
 801031c:	3718      	adds	r7, #24
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop

08010324 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010324:	b480      	push	{r7}
 8010326:	b085      	sub	sp, #20
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	785b      	ldrb	r3, [r3, #1]
 801033c:	2b01      	cmp	r3, #1
 801033e:	f040 80ab 	bne.w	8010498 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	699b      	ldr	r3, [r3, #24]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d132      	bne.n	80103b0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	015a      	lsls	r2, r3, #5
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	4413      	add	r3, r2
 8010352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	68ba      	ldr	r2, [r7, #8]
 801035a:	0151      	lsls	r1, r2, #5
 801035c:	68fa      	ldr	r2, [r7, #12]
 801035e:	440a      	add	r2, r1
 8010360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010364:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010368:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801036c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	015a      	lsls	r2, r3, #5
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	4413      	add	r3, r2
 8010376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801037a:	691b      	ldr	r3, [r3, #16]
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	0151      	lsls	r1, r2, #5
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	440a      	add	r2, r1
 8010384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801038c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	015a      	lsls	r2, r3, #5
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	4413      	add	r3, r2
 8010396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801039a:	691b      	ldr	r3, [r3, #16]
 801039c:	68ba      	ldr	r2, [r7, #8]
 801039e:	0151      	lsls	r1, r2, #5
 80103a0:	68fa      	ldr	r2, [r7, #12]
 80103a2:	440a      	add	r2, r1
 80103a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103a8:	0cdb      	lsrs	r3, r3, #19
 80103aa:	04db      	lsls	r3, r3, #19
 80103ac:	6113      	str	r3, [r2, #16]
 80103ae:	e04e      	b.n	801044e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	015a      	lsls	r2, r3, #5
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	4413      	add	r3, r2
 80103b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103bc:	691b      	ldr	r3, [r3, #16]
 80103be:	68ba      	ldr	r2, [r7, #8]
 80103c0:	0151      	lsls	r1, r2, #5
 80103c2:	68fa      	ldr	r2, [r7, #12]
 80103c4:	440a      	add	r2, r1
 80103c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ca:	0cdb      	lsrs	r3, r3, #19
 80103cc:	04db      	lsls	r3, r3, #19
 80103ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	015a      	lsls	r2, r3, #5
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	4413      	add	r3, r2
 80103d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103dc:	691b      	ldr	r3, [r3, #16]
 80103de:	68ba      	ldr	r2, [r7, #8]
 80103e0:	0151      	lsls	r1, r2, #5
 80103e2:	68fa      	ldr	r2, [r7, #12]
 80103e4:	440a      	add	r2, r1
 80103e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80103ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80103f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	699a      	ldr	r2, [r3, #24]
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d903      	bls.n	8010408 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	68da      	ldr	r2, [r3, #12]
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	015a      	lsls	r2, r3, #5
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	4413      	add	r3, r2
 8010410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010414:	691b      	ldr	r3, [r3, #16]
 8010416:	68ba      	ldr	r2, [r7, #8]
 8010418:	0151      	lsls	r1, r2, #5
 801041a:	68fa      	ldr	r2, [r7, #12]
 801041c:	440a      	add	r2, r1
 801041e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010426:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	015a      	lsls	r2, r3, #5
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	4413      	add	r3, r2
 8010430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010434:	691a      	ldr	r2, [r3, #16]
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	699b      	ldr	r3, [r3, #24]
 801043a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801043e:	68b9      	ldr	r1, [r7, #8]
 8010440:	0148      	lsls	r0, r1, #5
 8010442:	68f9      	ldr	r1, [r7, #12]
 8010444:	4401      	add	r1, r0
 8010446:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801044a:	4313      	orrs	r3, r2
 801044c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	015a      	lsls	r2, r3, #5
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	4413      	add	r3, r2
 8010456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	68ba      	ldr	r2, [r7, #8]
 801045e:	0151      	lsls	r1, r2, #5
 8010460:	68fa      	ldr	r2, [r7, #12]
 8010462:	440a      	add	r2, r1
 8010464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010468:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801046c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	699b      	ldr	r3, [r3, #24]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d071      	beq.n	801055a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801047c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	f003 030f 	and.w	r3, r3, #15
 8010486:	2101      	movs	r1, #1
 8010488:	fa01 f303 	lsl.w	r3, r1, r3
 801048c:	68f9      	ldr	r1, [r7, #12]
 801048e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010492:	4313      	orrs	r3, r2
 8010494:	634b      	str	r3, [r1, #52]	; 0x34
 8010496:	e060      	b.n	801055a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	015a      	lsls	r2, r3, #5
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	4413      	add	r3, r2
 80104a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104a4:	691b      	ldr	r3, [r3, #16]
 80104a6:	68ba      	ldr	r2, [r7, #8]
 80104a8:	0151      	lsls	r1, r2, #5
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	440a      	add	r2, r1
 80104ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104b2:	0cdb      	lsrs	r3, r3, #19
 80104b4:	04db      	lsls	r3, r3, #19
 80104b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	015a      	lsls	r2, r3, #5
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	4413      	add	r3, r2
 80104c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104c4:	691b      	ldr	r3, [r3, #16]
 80104c6:	68ba      	ldr	r2, [r7, #8]
 80104c8:	0151      	lsls	r1, r2, #5
 80104ca:	68fa      	ldr	r2, [r7, #12]
 80104cc:	440a      	add	r2, r1
 80104ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80104d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80104da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	699b      	ldr	r3, [r3, #24]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d003      	beq.n	80104ec <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	68da      	ldr	r2, [r3, #12]
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	68da      	ldr	r2, [r3, #12]
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	015a      	lsls	r2, r3, #5
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	4413      	add	r3, r2
 80104fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010500:	691b      	ldr	r3, [r3, #16]
 8010502:	68ba      	ldr	r2, [r7, #8]
 8010504:	0151      	lsls	r1, r2, #5
 8010506:	68fa      	ldr	r2, [r7, #12]
 8010508:	440a      	add	r2, r1
 801050a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801050e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010512:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	015a      	lsls	r2, r3, #5
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	4413      	add	r3, r2
 801051c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010520:	691a      	ldr	r2, [r3, #16]
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	69db      	ldr	r3, [r3, #28]
 8010526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801052a:	68b9      	ldr	r1, [r7, #8]
 801052c:	0148      	lsls	r0, r1, #5
 801052e:	68f9      	ldr	r1, [r7, #12]
 8010530:	4401      	add	r1, r0
 8010532:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010536:	4313      	orrs	r3, r2
 8010538:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	015a      	lsls	r2, r3, #5
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	4413      	add	r3, r2
 8010542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	68ba      	ldr	r2, [r7, #8]
 801054a:	0151      	lsls	r1, r2, #5
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	440a      	add	r2, r1
 8010550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010554:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010558:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801055a:	2300      	movs	r3, #0
}
 801055c:	4618      	mov	r0, r3
 801055e:	3714      	adds	r7, #20
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010568:	b480      	push	{r7}
 801056a:	b087      	sub	sp, #28
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010572:	2300      	movs	r3, #0
 8010574:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010576:	2300      	movs	r3, #0
 8010578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	785b      	ldrb	r3, [r3, #1]
 8010582:	2b01      	cmp	r3, #1
 8010584:	d14a      	bne.n	801061c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	015a      	lsls	r2, r3, #5
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	4413      	add	r3, r2
 8010590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801059a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801059e:	f040 8086 	bne.w	80106ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	015a      	lsls	r2, r3, #5
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	4413      	add	r3, r2
 80105ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	683a      	ldr	r2, [r7, #0]
 80105b4:	7812      	ldrb	r2, [r2, #0]
 80105b6:	0151      	lsls	r1, r2, #5
 80105b8:	693a      	ldr	r2, [r7, #16]
 80105ba:	440a      	add	r2, r1
 80105bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80105c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	781b      	ldrb	r3, [r3, #0]
 80105ca:	015a      	lsls	r2, r3, #5
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	4413      	add	r3, r2
 80105d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	7812      	ldrb	r2, [r2, #0]
 80105da:	0151      	lsls	r1, r2, #5
 80105dc:	693a      	ldr	r2, [r7, #16]
 80105de:	440a      	add	r2, r1
 80105e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	3301      	adds	r3, #1
 80105ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d902      	bls.n	8010600 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80105fa:	2301      	movs	r3, #1
 80105fc:	75fb      	strb	r3, [r7, #23]
          break;
 80105fe:	e056      	b.n	80106ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	015a      	lsls	r2, r3, #5
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	4413      	add	r3, r2
 801060a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010618:	d0e7      	beq.n	80105ea <USB_EPStopXfer+0x82>
 801061a:	e048      	b.n	80106ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	015a      	lsls	r2, r3, #5
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	4413      	add	r3, r2
 8010626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010634:	d13b      	bne.n	80106ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	015a      	lsls	r2, r3, #5
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	4413      	add	r3, r2
 8010640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	683a      	ldr	r2, [r7, #0]
 8010648:	7812      	ldrb	r2, [r2, #0]
 801064a:	0151      	lsls	r1, r2, #5
 801064c:	693a      	ldr	r2, [r7, #16]
 801064e:	440a      	add	r2, r1
 8010650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010654:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010658:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	015a      	lsls	r2, r3, #5
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	4413      	add	r3, r2
 8010664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	7812      	ldrb	r2, [r2, #0]
 801066e:	0151      	lsls	r1, r2, #5
 8010670:	693a      	ldr	r2, [r7, #16]
 8010672:	440a      	add	r2, r1
 8010674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801067c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	3301      	adds	r3, #1
 8010682:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f242 7210 	movw	r2, #10000	; 0x2710
 801068a:	4293      	cmp	r3, r2
 801068c:	d902      	bls.n	8010694 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801068e:	2301      	movs	r3, #1
 8010690:	75fb      	strb	r3, [r7, #23]
          break;
 8010692:	e00c      	b.n	80106ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	015a      	lsls	r2, r3, #5
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	4413      	add	r3, r2
 801069e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80106a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80106ac:	d0e7      	beq.n	801067e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80106ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	371c      	adds	r7, #28
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80106bc:	b480      	push	{r7}
 80106be:	b089      	sub	sp, #36	; 0x24
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	4611      	mov	r1, r2
 80106c8:	461a      	mov	r2, r3
 80106ca:	460b      	mov	r3, r1
 80106cc:	71fb      	strb	r3, [r7, #7]
 80106ce:	4613      	mov	r3, r2
 80106d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80106da:	88bb      	ldrh	r3, [r7, #4]
 80106dc:	3303      	adds	r3, #3
 80106de:	089b      	lsrs	r3, r3, #2
 80106e0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80106e2:	2300      	movs	r3, #0
 80106e4:	61bb      	str	r3, [r7, #24]
 80106e6:	e018      	b.n	801071a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80106e8:	79fb      	ldrb	r3, [r7, #7]
 80106ea:	031a      	lsls	r2, r3, #12
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	4413      	add	r3, r2
 80106f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106f4:	461a      	mov	r2, r3
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	6013      	str	r3, [r2, #0]
    pSrc++;
 80106fc:	69fb      	ldr	r3, [r7, #28]
 80106fe:	3301      	adds	r3, #1
 8010700:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8010702:	69fb      	ldr	r3, [r7, #28]
 8010704:	3301      	adds	r3, #1
 8010706:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	3301      	adds	r3, #1
 801070c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801070e:	69fb      	ldr	r3, [r7, #28]
 8010710:	3301      	adds	r3, #1
 8010712:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	3301      	adds	r3, #1
 8010718:	61bb      	str	r3, [r7, #24]
 801071a:	69ba      	ldr	r2, [r7, #24]
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	429a      	cmp	r2, r3
 8010720:	d3e2      	bcc.n	80106e8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8010722:	2300      	movs	r3, #0
}
 8010724:	4618      	mov	r0, r3
 8010726:	3724      	adds	r7, #36	; 0x24
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010730:	b480      	push	{r7}
 8010732:	b08b      	sub	sp, #44	; 0x2c
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	4613      	mov	r3, r2
 801073c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010746:	88fb      	ldrh	r3, [r7, #6]
 8010748:	089b      	lsrs	r3, r3, #2
 801074a:	b29b      	uxth	r3, r3
 801074c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801074e:	88fb      	ldrh	r3, [r7, #6]
 8010750:	f003 0303 	and.w	r3, r3, #3
 8010754:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010756:	2300      	movs	r3, #0
 8010758:	623b      	str	r3, [r7, #32]
 801075a:	e014      	b.n	8010786 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801075c:	69bb      	ldr	r3, [r7, #24]
 801075e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010762:	681a      	ldr	r2, [r3, #0]
 8010764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010766:	601a      	str	r2, [r3, #0]
    pDest++;
 8010768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076a:	3301      	adds	r3, #1
 801076c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010770:	3301      	adds	r3, #1
 8010772:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010776:	3301      	adds	r3, #1
 8010778:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077c:	3301      	adds	r3, #1
 801077e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010780:	6a3b      	ldr	r3, [r7, #32]
 8010782:	3301      	adds	r3, #1
 8010784:	623b      	str	r3, [r7, #32]
 8010786:	6a3a      	ldr	r2, [r7, #32]
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	429a      	cmp	r2, r3
 801078c:	d3e6      	bcc.n	801075c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801078e:	8bfb      	ldrh	r3, [r7, #30]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d01e      	beq.n	80107d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010794:	2300      	movs	r3, #0
 8010796:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801079e:	461a      	mov	r2, r3
 80107a0:	f107 0310 	add.w	r3, r7, #16
 80107a4:	6812      	ldr	r2, [r2, #0]
 80107a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80107a8:	693a      	ldr	r2, [r7, #16]
 80107aa:	6a3b      	ldr	r3, [r7, #32]
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	00db      	lsls	r3, r3, #3
 80107b0:	fa22 f303 	lsr.w	r3, r2, r3
 80107b4:	b2da      	uxtb	r2, r3
 80107b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b8:	701a      	strb	r2, [r3, #0]
      i++;
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	3301      	adds	r3, #1
 80107be:	623b      	str	r3, [r7, #32]
      pDest++;
 80107c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c2:	3301      	adds	r3, #1
 80107c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80107c6:	8bfb      	ldrh	r3, [r7, #30]
 80107c8:	3b01      	subs	r3, #1
 80107ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80107cc:	8bfb      	ldrh	r3, [r7, #30]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d1ea      	bne.n	80107a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80107d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	372c      	adds	r7, #44	; 0x2c
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b085      	sub	sp, #20
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	785b      	ldrb	r3, [r3, #1]
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d12c      	bne.n	8010856 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	015a      	lsls	r2, r3, #5
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	4413      	add	r3, r2
 8010804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	db12      	blt.n	8010834 <USB_EPSetStall+0x54>
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d00f      	beq.n	8010834 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	015a      	lsls	r2, r3, #5
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	4413      	add	r3, r2
 801081c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	68ba      	ldr	r2, [r7, #8]
 8010824:	0151      	lsls	r1, r2, #5
 8010826:	68fa      	ldr	r2, [r7, #12]
 8010828:	440a      	add	r2, r1
 801082a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801082e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010832:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	015a      	lsls	r2, r3, #5
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	4413      	add	r3, r2
 801083c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	68ba      	ldr	r2, [r7, #8]
 8010844:	0151      	lsls	r1, r2, #5
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	440a      	add	r2, r1
 801084a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801084e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010852:	6013      	str	r3, [r2, #0]
 8010854:	e02b      	b.n	80108ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	015a      	lsls	r2, r3, #5
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	4413      	add	r3, r2
 801085e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	2b00      	cmp	r3, #0
 8010866:	db12      	blt.n	801088e <USB_EPSetStall+0xae>
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d00f      	beq.n	801088e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	015a      	lsls	r2, r3, #5
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	4413      	add	r3, r2
 8010876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	68ba      	ldr	r2, [r7, #8]
 801087e:	0151      	lsls	r1, r2, #5
 8010880:	68fa      	ldr	r2, [r7, #12]
 8010882:	440a      	add	r2, r1
 8010884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010888:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801088c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	015a      	lsls	r2, r3, #5
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	4413      	add	r3, r2
 8010896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	68ba      	ldr	r2, [r7, #8]
 801089e:	0151      	lsls	r1, r2, #5
 80108a0:	68fa      	ldr	r2, [r7, #12]
 80108a2:	440a      	add	r2, r1
 80108a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80108ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80108ae:	2300      	movs	r3, #0
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3714      	adds	r7, #20
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr

080108bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80108bc:	b480      	push	{r7}
 80108be:	b085      	sub	sp, #20
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	785b      	ldrb	r3, [r3, #1]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d128      	bne.n	801092a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	015a      	lsls	r2, r3, #5
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	4413      	add	r3, r2
 80108e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	68ba      	ldr	r2, [r7, #8]
 80108e8:	0151      	lsls	r1, r2, #5
 80108ea:	68fa      	ldr	r2, [r7, #12]
 80108ec:	440a      	add	r2, r1
 80108ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80108f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	791b      	ldrb	r3, [r3, #4]
 80108fc:	2b03      	cmp	r3, #3
 80108fe:	d003      	beq.n	8010908 <USB_EPClearStall+0x4c>
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	791b      	ldrb	r3, [r3, #4]
 8010904:	2b02      	cmp	r3, #2
 8010906:	d138      	bne.n	801097a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	015a      	lsls	r2, r3, #5
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	4413      	add	r3, r2
 8010910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	68ba      	ldr	r2, [r7, #8]
 8010918:	0151      	lsls	r1, r2, #5
 801091a:	68fa      	ldr	r2, [r7, #12]
 801091c:	440a      	add	r2, r1
 801091e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010926:	6013      	str	r3, [r2, #0]
 8010928:	e027      	b.n	801097a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	015a      	lsls	r2, r3, #5
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	4413      	add	r3, r2
 8010932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	68ba      	ldr	r2, [r7, #8]
 801093a:	0151      	lsls	r1, r2, #5
 801093c:	68fa      	ldr	r2, [r7, #12]
 801093e:	440a      	add	r2, r1
 8010940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010944:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010948:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	791b      	ldrb	r3, [r3, #4]
 801094e:	2b03      	cmp	r3, #3
 8010950:	d003      	beq.n	801095a <USB_EPClearStall+0x9e>
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	791b      	ldrb	r3, [r3, #4]
 8010956:	2b02      	cmp	r3, #2
 8010958:	d10f      	bne.n	801097a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	015a      	lsls	r2, r3, #5
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	4413      	add	r3, r2
 8010962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	68ba      	ldr	r2, [r7, #8]
 801096a:	0151      	lsls	r1, r2, #5
 801096c:	68fa      	ldr	r2, [r7, #12]
 801096e:	440a      	add	r2, r1
 8010970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010978:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801097a:	2300      	movs	r3, #0
}
 801097c:	4618      	mov	r0, r3
 801097e:	3714      	adds	r7, #20
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr

08010988 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010988:	b480      	push	{r7}
 801098a:	b085      	sub	sp, #20
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	460b      	mov	r3, r1
 8010992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	68fa      	ldr	r2, [r7, #12]
 80109a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80109a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80109aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	78fb      	ldrb	r3, [r7, #3]
 80109b6:	011b      	lsls	r3, r3, #4
 80109b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80109bc:	68f9      	ldr	r1, [r7, #12]
 80109be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80109c2:	4313      	orrs	r3, r2
 80109c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80109c6:	2300      	movs	r3, #0
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3714      	adds	r7, #20
 80109cc:	46bd      	mov	sp, r7
 80109ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d2:	4770      	bx	lr

080109d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80109d4:	b480      	push	{r7}
 80109d6:	b085      	sub	sp, #20
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	68fa      	ldr	r2, [r7, #12]
 80109ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80109ee:	f023 0303 	bic.w	r3, r3, #3
 80109f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	68fa      	ldr	r2, [r7, #12]
 80109fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a02:	f023 0302 	bic.w	r3, r3, #2
 8010a06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a08:	2300      	movs	r3, #0
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3714      	adds	r7, #20
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a14:	4770      	bx	lr

08010a16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010a16:	b480      	push	{r7}
 8010a18:	b085      	sub	sp, #20
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	68fa      	ldr	r2, [r7, #12]
 8010a2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010a30:	f023 0303 	bic.w	r3, r3, #3
 8010a34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	68fa      	ldr	r2, [r7, #12]
 8010a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a44:	f043 0302 	orr.w	r3, r3, #2
 8010a48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a4a:	2300      	movs	r3, #0
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3714      	adds	r7, #20
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr

08010a58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	695b      	ldr	r3, [r3, #20]
 8010a64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	699b      	ldr	r3, [r3, #24]
 8010a6a:	68fa      	ldr	r2, [r7, #12]
 8010a6c:	4013      	ands	r3, r2
 8010a6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010a70:	68fb      	ldr	r3, [r7, #12]
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3714      	adds	r7, #20
 8010a76:	46bd      	mov	sp, r7
 8010a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7c:	4770      	bx	lr

08010a7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a7e:	b480      	push	{r7}
 8010a80:	b085      	sub	sp, #20
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a90:	699b      	ldr	r3, [r3, #24]
 8010a92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a9a:	69db      	ldr	r3, [r3, #28]
 8010a9c:	68ba      	ldr	r2, [r7, #8]
 8010a9e:	4013      	ands	r3, r2
 8010aa0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	0c1b      	lsrs	r3, r3, #16
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3714      	adds	r7, #20
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab0:	4770      	bx	lr

08010ab2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010ab2:	b480      	push	{r7}
 8010ab4:	b085      	sub	sp, #20
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ac4:	699b      	ldr	r3, [r3, #24]
 8010ac6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ace:	69db      	ldr	r3, [r3, #28]
 8010ad0:	68ba      	ldr	r2, [r7, #8]
 8010ad2:	4013      	ands	r3, r2
 8010ad4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	b29b      	uxth	r3, r3
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3714      	adds	r7, #20
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr

08010ae6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010ae6:	b480      	push	{r7}
 8010ae8:	b085      	sub	sp, #20
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	460b      	mov	r3, r1
 8010af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010af6:	78fb      	ldrb	r3, [r7, #3]
 8010af8:	015a      	lsls	r2, r3, #5
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	4413      	add	r3, r2
 8010afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b02:	689b      	ldr	r3, [r3, #8]
 8010b04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b0c:	695b      	ldr	r3, [r3, #20]
 8010b0e:	68ba      	ldr	r2, [r7, #8]
 8010b10:	4013      	ands	r3, r2
 8010b12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010b14:	68bb      	ldr	r3, [r7, #8]
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3714      	adds	r7, #20
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr

08010b22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010b22:	b480      	push	{r7}
 8010b24:	b087      	sub	sp, #28
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010b46:	78fb      	ldrb	r3, [r7, #3]
 8010b48:	f003 030f 	and.w	r3, r3, #15
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8010b52:	01db      	lsls	r3, r3, #7
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	693a      	ldr	r2, [r7, #16]
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010b5c:	78fb      	ldrb	r3, [r7, #3]
 8010b5e:	015a      	lsls	r2, r3, #5
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	4413      	add	r3, r2
 8010b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b68:	689b      	ldr	r3, [r3, #8]
 8010b6a:	693a      	ldr	r2, [r7, #16]
 8010b6c:	4013      	ands	r3, r2
 8010b6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010b70:	68bb      	ldr	r3, [r7, #8]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	371c      	adds	r7, #28
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr

08010b7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010b7e:	b480      	push	{r7}
 8010b80:	b083      	sub	sp, #12
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	695b      	ldr	r3, [r3, #20]
 8010b8a:	f003 0301 	and.w	r3, r3, #1
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	370c      	adds	r7, #12
 8010b92:	46bd      	mov	sp, r7
 8010b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b98:	4770      	bx	lr

08010b9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010b9a:	b480      	push	{r7}
 8010b9c:	b085      	sub	sp, #20
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	68fa      	ldr	r2, [r7, #12]
 8010bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bb4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010bb8:	f023 0307 	bic.w	r3, r3, #7
 8010bbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	68fa      	ldr	r2, [r7, #12]
 8010bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010bd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010bd2:	2300      	movs	r3, #0
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3714      	adds	r7, #20
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr

08010be0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b085      	sub	sp, #20
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	333c      	adds	r3, #60	; 0x3c
 8010bf2:	3304      	adds	r3, #4
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	4a1c      	ldr	r2, [pc, #112]	; (8010c6c <USB_EP0_OutStart+0x8c>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d90a      	bls.n	8010c16 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010c10:	d101      	bne.n	8010c16 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8010c12:	2300      	movs	r3, #0
 8010c14:	e024      	b.n	8010c60 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	2300      	movs	r3, #0
 8010c20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c28:	691b      	ldr	r3, [r3, #16]
 8010c2a:	68fa      	ldr	r2, [r7, #12]
 8010c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	68fa      	ldr	r2, [r7, #12]
 8010c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c44:	f043 0318 	orr.w	r3, r3, #24
 8010c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c50:	691b      	ldr	r3, [r3, #16]
 8010c52:	68fa      	ldr	r2, [r7, #12]
 8010c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010c5c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8010c5e:	2300      	movs	r3, #0
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3714      	adds	r7, #20
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr
 8010c6c:	4f54300a 	.word	0x4f54300a

08010c70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	3301      	adds	r3, #1
 8010c80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	4a13      	ldr	r2, [pc, #76]	; (8010cd4 <USB_CoreReset+0x64>)
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d901      	bls.n	8010c8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010c8a:	2303      	movs	r3, #3
 8010c8c:	e01b      	b.n	8010cc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	691b      	ldr	r3, [r3, #16]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	daf2      	bge.n	8010c7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010c96:	2300      	movs	r3, #0
 8010c98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	691b      	ldr	r3, [r3, #16]
 8010c9e:	f043 0201 	orr.w	r2, r3, #1
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	4a09      	ldr	r2, [pc, #36]	; (8010cd4 <USB_CoreReset+0x64>)
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d901      	bls.n	8010cb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010cb4:	2303      	movs	r3, #3
 8010cb6:	e006      	b.n	8010cc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	691b      	ldr	r3, [r3, #16]
 8010cbc:	f003 0301 	and.w	r3, r3, #1
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	d0f0      	beq.n	8010ca6 <USB_CoreReset+0x36>

  return HAL_OK;
 8010cc4:	2300      	movs	r3, #0
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3714      	adds	r7, #20
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr
 8010cd2:	bf00      	nop
 8010cd4:	00030d40 	.word	0x00030d40

08010cd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010cdc:	4904      	ldr	r1, [pc, #16]	; (8010cf0 <MX_FATFS_Init+0x18>)
 8010cde:	4805      	ldr	r0, [pc, #20]	; (8010cf4 <MX_FATFS_Init+0x1c>)
 8010ce0:	f004 fd46 	bl	8015770 <FATFS_LinkDriver>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	4b03      	ldr	r3, [pc, #12]	; (8010cf8 <MX_FATFS_Init+0x20>)
 8010cea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010cec:	bf00      	nop
 8010cee:	bd80      	pop	{r7, pc}
 8010cf0:	20000ec8 	.word	0x20000ec8
 8010cf4:	08019680 	.word	0x08019680
 8010cf8:	20000ec4 	.word	0x20000ec4

08010cfc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010d00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010d12:	2300      	movs	r3, #0
 8010d14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010d16:	f000 f879 	bl	8010e0c <BSP_SD_IsDetected>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d001      	beq.n	8010d24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010d20:	2302      	movs	r3, #2
 8010d22:	e012      	b.n	8010d4a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010d24:	480b      	ldr	r0, [pc, #44]	; (8010d54 <BSP_SD_Init+0x48>)
 8010d26:	f7fa f8d1 	bl	800aecc <HAL_SD_Init>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010d2e:	79fb      	ldrb	r3, [r7, #7]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d109      	bne.n	8010d48 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010d34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010d38:	4806      	ldr	r0, [pc, #24]	; (8010d54 <BSP_SD_Init+0x48>)
 8010d3a:	f7fa ff9d 	bl	800bc78 <HAL_SD_ConfigWideBusOperation>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d001      	beq.n	8010d48 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010d44:	2301      	movs	r3, #1
 8010d46:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010d48:	79fb      	ldrb	r3, [r7, #7]
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3708      	adds	r7, #8
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	20000620 	.word	0x20000620

08010d58 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b088      	sub	sp, #32
 8010d5c:	af02      	add	r7, sp, #8
 8010d5e:	60f8      	str	r0, [r7, #12]
 8010d60:	60b9      	str	r1, [r7, #8]
 8010d62:	607a      	str	r2, [r7, #4]
 8010d64:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010d66:	2300      	movs	r3, #0
 8010d68:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	9300      	str	r3, [sp, #0]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	68ba      	ldr	r2, [r7, #8]
 8010d72:	68f9      	ldr	r1, [r7, #12]
 8010d74:	4806      	ldr	r0, [pc, #24]	; (8010d90 <BSP_SD_ReadBlocks+0x38>)
 8010d76:	f7fa f9d1 	bl	800b11c <HAL_SD_ReadBlocks>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d001      	beq.n	8010d84 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010d80:	2301      	movs	r3, #1
 8010d82:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3718      	adds	r7, #24
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	20000620 	.word	0x20000620

08010d94 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b088      	sub	sp, #32
 8010d98:	af02      	add	r7, sp, #8
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	607a      	str	r2, [r7, #4]
 8010da0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010da2:	2300      	movs	r3, #0
 8010da4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	9300      	str	r3, [sp, #0]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	68ba      	ldr	r2, [r7, #8]
 8010dae:	68f9      	ldr	r1, [r7, #12]
 8010db0:	4806      	ldr	r0, [pc, #24]	; (8010dcc <BSP_SD_WriteBlocks+0x38>)
 8010db2:	f7fa fb45 	bl	800b440 <HAL_SD_WriteBlocks>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d001      	beq.n	8010dc0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3718      	adds	r7, #24
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	20000620 	.word	0x20000620

08010dd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010dd4:	4805      	ldr	r0, [pc, #20]	; (8010dec <BSP_SD_GetCardState+0x1c>)
 8010dd6:	f7fb f863 	bl	800bea0 <HAL_SD_GetCardState>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	2b04      	cmp	r3, #4
 8010dde:	bf14      	ite	ne
 8010de0:	2301      	movne	r3, #1
 8010de2:	2300      	moveq	r3, #0
 8010de4:	b2db      	uxtb	r3, r3
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	bf00      	nop
 8010dec:	20000620 	.word	0x20000620

08010df0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010df8:	6879      	ldr	r1, [r7, #4]
 8010dfa:	4803      	ldr	r0, [pc, #12]	; (8010e08 <BSP_SD_GetCardInfo+0x18>)
 8010dfc:	f7fa ff10 	bl	800bc20 <HAL_SD_GetCardInfo>
}
 8010e00:	bf00      	nop
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	20000620 	.word	0x20000620

08010e0c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010e12:	2301      	movs	r3, #1
 8010e14:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010e16:	f000 f80b 	bl	8010e30 <BSP_PlatformIsDetected>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d101      	bne.n	8010e24 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010e20:	2300      	movs	r3, #0
 8010e22:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010e24:	79fb      	ldrb	r3, [r7, #7]
 8010e26:	b2db      	uxtb	r3, r3
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3708      	adds	r7, #8
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010e36:	2301      	movs	r3, #1
 8010e38:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010e3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010e42:	f7f4 ff5b 	bl	8005cfc <HAL_GPIO_ReadPin>
 8010e46:	4603      	mov	r3, r0
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d001      	beq.n	8010e50 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010e50:	79fb      	ldrb	r3, [r7, #7]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3708      	adds	r7, #8
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
	...

08010e5c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	4603      	mov	r3, r0
 8010e64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e66:	4b0b      	ldr	r3, [pc, #44]	; (8010e94 <SD_CheckStatus+0x38>)
 8010e68:	2201      	movs	r2, #1
 8010e6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e6c:	f7ff ffb0 	bl	8010dd0 <BSP_SD_GetCardState>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d107      	bne.n	8010e86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e76:	4b07      	ldr	r3, [pc, #28]	; (8010e94 <SD_CheckStatus+0x38>)
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	f023 0301 	bic.w	r3, r3, #1
 8010e80:	b2da      	uxtb	r2, r3
 8010e82:	4b04      	ldr	r3, [pc, #16]	; (8010e94 <SD_CheckStatus+0x38>)
 8010e84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e86:	4b03      	ldr	r3, [pc, #12]	; (8010e94 <SD_CheckStatus+0x38>)
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	b2db      	uxtb	r3, r3
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	2000000d 	.word	0x2000000d

08010e98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b082      	sub	sp, #8
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8010ea2:	4b0b      	ldr	r3, [pc, #44]	; (8010ed0 <SD_initialize+0x38>)
 8010ea4:	2201      	movs	r2, #1
 8010ea6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010ea8:	f7ff ff30 	bl	8010d0c <BSP_SD_Init>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d107      	bne.n	8010ec2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010eb2:	79fb      	ldrb	r3, [r7, #7]
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7ff ffd1 	bl	8010e5c <SD_CheckStatus>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	4b04      	ldr	r3, [pc, #16]	; (8010ed0 <SD_initialize+0x38>)
 8010ec0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010ec2:	4b03      	ldr	r3, [pc, #12]	; (8010ed0 <SD_initialize+0x38>)
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	b2db      	uxtb	r3, r3
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3708      	adds	r7, #8
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	2000000d 	.word	0x2000000d

08010ed4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	4603      	mov	r3, r0
 8010edc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010ede:	79fb      	ldrb	r3, [r7, #7]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff ffbb 	bl	8010e5c <SD_CheckStatus>
 8010ee6:	4603      	mov	r3, r0
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3708      	adds	r7, #8
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}

08010ef0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b086      	sub	sp, #24
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	60b9      	str	r1, [r7, #8]
 8010ef8:	607a      	str	r2, [r7, #4]
 8010efa:	603b      	str	r3, [r7, #0]
 8010efc:	4603      	mov	r3, r0
 8010efe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f00:	2301      	movs	r3, #1
 8010f02:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f08:	683a      	ldr	r2, [r7, #0]
 8010f0a:	6879      	ldr	r1, [r7, #4]
 8010f0c:	68b8      	ldr	r0, [r7, #8]
 8010f0e:	f7ff ff23 	bl	8010d58 <BSP_SD_ReadBlocks>
 8010f12:	4603      	mov	r3, r0
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d107      	bne.n	8010f28 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010f18:	bf00      	nop
 8010f1a:	f7ff ff59 	bl	8010dd0 <BSP_SD_GetCardState>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d1fa      	bne.n	8010f1a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010f24:	2300      	movs	r3, #0
 8010f26:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3718      	adds	r7, #24
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}

08010f32 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f32:	b580      	push	{r7, lr}
 8010f34:	b086      	sub	sp, #24
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]
 8010f3c:	603b      	str	r3, [r7, #0]
 8010f3e:	4603      	mov	r3, r0
 8010f40:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f42:	2301      	movs	r3, #1
 8010f44:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f4a:	683a      	ldr	r2, [r7, #0]
 8010f4c:	6879      	ldr	r1, [r7, #4]
 8010f4e:	68b8      	ldr	r0, [r7, #8]
 8010f50:	f7ff ff20 	bl	8010d94 <BSP_SD_WriteBlocks>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d107      	bne.n	8010f6a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010f5a:	bf00      	nop
 8010f5c:	f7ff ff38 	bl	8010dd0 <BSP_SD_GetCardState>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d1fa      	bne.n	8010f5c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010f66:	2300      	movs	r3, #0
 8010f68:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3718      	adds	r7, #24
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}

08010f74 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b08c      	sub	sp, #48	; 0x30
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	603a      	str	r2, [r7, #0]
 8010f7e:	71fb      	strb	r3, [r7, #7]
 8010f80:	460b      	mov	r3, r1
 8010f82:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010f84:	2301      	movs	r3, #1
 8010f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010f8a:	4b25      	ldr	r3, [pc, #148]	; (8011020 <SD_ioctl+0xac>)
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	f003 0301 	and.w	r3, r3, #1
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d001      	beq.n	8010f9c <SD_ioctl+0x28>
 8010f98:	2303      	movs	r3, #3
 8010f9a:	e03c      	b.n	8011016 <SD_ioctl+0xa2>

  switch (cmd)
 8010f9c:	79bb      	ldrb	r3, [r7, #6]
 8010f9e:	2b03      	cmp	r3, #3
 8010fa0:	d834      	bhi.n	801100c <SD_ioctl+0x98>
 8010fa2:	a201      	add	r2, pc, #4	; (adr r2, 8010fa8 <SD_ioctl+0x34>)
 8010fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fa8:	08010fb9 	.word	0x08010fb9
 8010fac:	08010fc1 	.word	0x08010fc1
 8010fb0:	08010fd9 	.word	0x08010fd9
 8010fb4:	08010ff3 	.word	0x08010ff3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010fbe:	e028      	b.n	8011012 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fc0:	f107 0308 	add.w	r3, r7, #8
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff ff13 	bl	8010df0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010fca:	6a3a      	ldr	r2, [r7, #32]
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010fd6:	e01c      	b.n	8011012 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fd8:	f107 0308 	add.w	r3, r7, #8
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff ff07 	bl	8010df0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe4:	b29a      	uxth	r2, r3
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010fea:	2300      	movs	r3, #0
 8010fec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010ff0:	e00f      	b.n	8011012 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ff2:	f107 0308 	add.w	r3, r7, #8
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7ff fefa 	bl	8010df0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffe:	0a5a      	lsrs	r2, r3, #9
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011004:	2300      	movs	r3, #0
 8011006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801100a:	e002      	b.n	8011012 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801100c:	2304      	movs	r3, #4
 801100e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011016:	4618      	mov	r0, r3
 8011018:	3730      	adds	r7, #48	; 0x30
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	2000000d 	.word	0x2000000d

08011024 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	460b      	mov	r3, r1
 801102e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011030:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011034:	f005 f978 	bl	8016328 <USBD_static_malloc>
 8011038:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d105      	bne.n	801104c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011048:	2302      	movs	r3, #2
 801104a:	e066      	b.n	801111a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	68fa      	ldr	r2, [r7, #12]
 8011050:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	7c1b      	ldrb	r3, [r3, #16]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d119      	bne.n	8011090 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801105c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011060:	2202      	movs	r2, #2
 8011062:	2181      	movs	r1, #129	; 0x81
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f004 ff99 	bl	8015f9c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2201      	movs	r2, #1
 801106e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011074:	2202      	movs	r2, #2
 8011076:	2101      	movs	r1, #1
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f004 ff8f 	bl	8015f9c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2201      	movs	r2, #1
 8011082:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2210      	movs	r2, #16
 801108a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801108e:	e016      	b.n	80110be <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011090:	2340      	movs	r3, #64	; 0x40
 8011092:	2202      	movs	r2, #2
 8011094:	2181      	movs	r1, #129	; 0x81
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f004 ff80 	bl	8015f9c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2201      	movs	r2, #1
 80110a0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80110a2:	2340      	movs	r3, #64	; 0x40
 80110a4:	2202      	movs	r2, #2
 80110a6:	2101      	movs	r1, #1
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f004 ff77 	bl	8015f9c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2201      	movs	r2, #1
 80110b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2210      	movs	r2, #16
 80110ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80110be:	2308      	movs	r3, #8
 80110c0:	2203      	movs	r2, #3
 80110c2:	2182      	movs	r1, #130	; 0x82
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f004 ff69 	bl	8015f9c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2201      	movs	r2, #1
 80110ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	2200      	movs	r2, #0
 80110e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	2200      	movs	r2, #0
 80110e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	7c1b      	ldrb	r3, [r3, #16]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d109      	bne.n	8011108 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80110fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110fe:	2101      	movs	r1, #1
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f005 f8c5 	bl	8016290 <USBD_LL_PrepareReceive>
 8011106:	e007      	b.n	8011118 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801110e:	2340      	movs	r3, #64	; 0x40
 8011110:	2101      	movs	r1, #1
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f005 f8bc 	bl	8016290 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	3710      	adds	r7, #16
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b082      	sub	sp, #8
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	460b      	mov	r3, r1
 801112c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801112e:	2181      	movs	r1, #129	; 0x81
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f004 ff71 	bl	8016018 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2200      	movs	r2, #0
 801113a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801113c:	2101      	movs	r1, #1
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f004 ff6a 	bl	8016018 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2200      	movs	r2, #0
 8011148:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801114c:	2182      	movs	r1, #130	; 0x82
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f004 ff62 	bl	8016018 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2200      	movs	r2, #0
 8011160:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00e      	beq.n	801118c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011174:	685b      	ldr	r3, [r3, #4]
 8011176:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801117e:	4618      	mov	r0, r3
 8011180:	f005 f8e0 	bl	8016344 <USBD_static_free>
    pdev->pClassData = NULL;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2200      	movs	r2, #0
 8011188:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801118c:	2300      	movs	r3, #0
}
 801118e:	4618      	mov	r0, r3
 8011190:	3708      	adds	r7, #8
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
	...

08011198 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b086      	sub	sp, #24
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80111aa:	2300      	movs	r3, #0
 80111ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80111ae:	2300      	movs	r3, #0
 80111b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80111b2:	2300      	movs	r3, #0
 80111b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d101      	bne.n	80111c0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80111bc:	2303      	movs	r3, #3
 80111be:	e0af      	b.n	8011320 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d03f      	beq.n	801124c <USBD_CDC_Setup+0xb4>
 80111cc:	2b20      	cmp	r3, #32
 80111ce:	f040 809f 	bne.w	8011310 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	88db      	ldrh	r3, [r3, #6]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d02e      	beq.n	8011238 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	b25b      	sxtb	r3, r3
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	da16      	bge.n	8011212 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111ea:	689b      	ldr	r3, [r3, #8]
 80111ec:	683a      	ldr	r2, [r7, #0]
 80111ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80111f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80111f2:	683a      	ldr	r2, [r7, #0]
 80111f4:	88d2      	ldrh	r2, [r2, #6]
 80111f6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	88db      	ldrh	r3, [r3, #6]
 80111fc:	2b07      	cmp	r3, #7
 80111fe:	bf28      	it	cs
 8011200:	2307      	movcs	r3, #7
 8011202:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	89fa      	ldrh	r2, [r7, #14]
 8011208:	4619      	mov	r1, r3
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f001 fb19 	bl	8012842 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8011210:	e085      	b.n	801131e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	785a      	ldrb	r2, [r3, #1]
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	88db      	ldrh	r3, [r3, #6]
 8011220:	b2da      	uxtb	r2, r3
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011228:	6939      	ldr	r1, [r7, #16]
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	88db      	ldrh	r3, [r3, #6]
 801122e:	461a      	mov	r2, r3
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f001 fb32 	bl	801289a <USBD_CtlPrepareRx>
      break;
 8011236:	e072      	b.n	801131e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801123e:	689b      	ldr	r3, [r3, #8]
 8011240:	683a      	ldr	r2, [r7, #0]
 8011242:	7850      	ldrb	r0, [r2, #1]
 8011244:	2200      	movs	r2, #0
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	4798      	blx	r3
      break;
 801124a:	e068      	b.n	801131e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	785b      	ldrb	r3, [r3, #1]
 8011250:	2b0b      	cmp	r3, #11
 8011252:	d852      	bhi.n	80112fa <USBD_CDC_Setup+0x162>
 8011254:	a201      	add	r2, pc, #4	; (adr r2, 801125c <USBD_CDC_Setup+0xc4>)
 8011256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801125a:	bf00      	nop
 801125c:	0801128d 	.word	0x0801128d
 8011260:	08011309 	.word	0x08011309
 8011264:	080112fb 	.word	0x080112fb
 8011268:	080112fb 	.word	0x080112fb
 801126c:	080112fb 	.word	0x080112fb
 8011270:	080112fb 	.word	0x080112fb
 8011274:	080112fb 	.word	0x080112fb
 8011278:	080112fb 	.word	0x080112fb
 801127c:	080112fb 	.word	0x080112fb
 8011280:	080112fb 	.word	0x080112fb
 8011284:	080112b7 	.word	0x080112b7
 8011288:	080112e1 	.word	0x080112e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011292:	b2db      	uxtb	r3, r3
 8011294:	2b03      	cmp	r3, #3
 8011296:	d107      	bne.n	80112a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011298:	f107 030a 	add.w	r3, r7, #10
 801129c:	2202      	movs	r2, #2
 801129e:	4619      	mov	r1, r3
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f001 face 	bl	8012842 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80112a6:	e032      	b.n	801130e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80112a8:	6839      	ldr	r1, [r7, #0]
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f001 fa58 	bl	8012760 <USBD_CtlError>
            ret = USBD_FAIL;
 80112b0:	2303      	movs	r3, #3
 80112b2:	75fb      	strb	r3, [r7, #23]
          break;
 80112b4:	e02b      	b.n	801130e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112bc:	b2db      	uxtb	r3, r3
 80112be:	2b03      	cmp	r3, #3
 80112c0:	d107      	bne.n	80112d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80112c2:	f107 030d 	add.w	r3, r7, #13
 80112c6:	2201      	movs	r2, #1
 80112c8:	4619      	mov	r1, r3
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f001 fab9 	bl	8012842 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80112d0:	e01d      	b.n	801130e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80112d2:	6839      	ldr	r1, [r7, #0]
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f001 fa43 	bl	8012760 <USBD_CtlError>
            ret = USBD_FAIL;
 80112da:	2303      	movs	r3, #3
 80112dc:	75fb      	strb	r3, [r7, #23]
          break;
 80112de:	e016      	b.n	801130e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	2b03      	cmp	r3, #3
 80112ea:	d00f      	beq.n	801130c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80112ec:	6839      	ldr	r1, [r7, #0]
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f001 fa36 	bl	8012760 <USBD_CtlError>
            ret = USBD_FAIL;
 80112f4:	2303      	movs	r3, #3
 80112f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80112f8:	e008      	b.n	801130c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80112fa:	6839      	ldr	r1, [r7, #0]
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f001 fa2f 	bl	8012760 <USBD_CtlError>
          ret = USBD_FAIL;
 8011302:	2303      	movs	r3, #3
 8011304:	75fb      	strb	r3, [r7, #23]
          break;
 8011306:	e002      	b.n	801130e <USBD_CDC_Setup+0x176>
          break;
 8011308:	bf00      	nop
 801130a:	e008      	b.n	801131e <USBD_CDC_Setup+0x186>
          break;
 801130c:	bf00      	nop
      }
      break;
 801130e:	e006      	b.n	801131e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011310:	6839      	ldr	r1, [r7, #0]
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f001 fa24 	bl	8012760 <USBD_CtlError>
      ret = USBD_FAIL;
 8011318:	2303      	movs	r3, #3
 801131a:	75fb      	strb	r3, [r7, #23]
      break;
 801131c:	bf00      	nop
  }

  return (uint8_t)ret;
 801131e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011320:	4618      	mov	r0, r3
 8011322:	3718      	adds	r7, #24
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}

08011328 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	460b      	mov	r3, r1
 8011332:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801133a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011342:	2b00      	cmp	r3, #0
 8011344:	d101      	bne.n	801134a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011346:	2303      	movs	r3, #3
 8011348:	e04f      	b.n	80113ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011350:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011352:	78fa      	ldrb	r2, [r7, #3]
 8011354:	6879      	ldr	r1, [r7, #4]
 8011356:	4613      	mov	r3, r2
 8011358:	009b      	lsls	r3, r3, #2
 801135a:	4413      	add	r3, r2
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	440b      	add	r3, r1
 8011360:	3318      	adds	r3, #24
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d029      	beq.n	80113bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011368:	78fa      	ldrb	r2, [r7, #3]
 801136a:	6879      	ldr	r1, [r7, #4]
 801136c:	4613      	mov	r3, r2
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	4413      	add	r3, r2
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	440b      	add	r3, r1
 8011376:	3318      	adds	r3, #24
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	78f9      	ldrb	r1, [r7, #3]
 801137c:	68f8      	ldr	r0, [r7, #12]
 801137e:	460b      	mov	r3, r1
 8011380:	00db      	lsls	r3, r3, #3
 8011382:	440b      	add	r3, r1
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4403      	add	r3, r0
 8011388:	3348      	adds	r3, #72	; 0x48
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011390:	fb01 f303 	mul.w	r3, r1, r3
 8011394:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011396:	2b00      	cmp	r3, #0
 8011398:	d110      	bne.n	80113bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801139a:	78fa      	ldrb	r2, [r7, #3]
 801139c:	6879      	ldr	r1, [r7, #4]
 801139e:	4613      	mov	r3, r2
 80113a0:	009b      	lsls	r3, r3, #2
 80113a2:	4413      	add	r3, r2
 80113a4:	009b      	lsls	r3, r3, #2
 80113a6:	440b      	add	r3, r1
 80113a8:	3318      	adds	r3, #24
 80113aa:	2200      	movs	r2, #0
 80113ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80113ae:	78f9      	ldrb	r1, [r7, #3]
 80113b0:	2300      	movs	r3, #0
 80113b2:	2200      	movs	r2, #0
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f004 ff33 	bl	8016220 <USBD_LL_Transmit>
 80113ba:	e015      	b.n	80113e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	2200      	movs	r2, #0
 80113c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113ca:	691b      	ldr	r3, [r3, #16]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d00b      	beq.n	80113e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113d6:	691b      	ldr	r3, [r3, #16]
 80113d8:	68ba      	ldr	r2, [r7, #8]
 80113da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80113de:	68ba      	ldr	r2, [r7, #8]
 80113e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80113e4:	78fa      	ldrb	r2, [r7, #3]
 80113e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80113e8:	2300      	movs	r3, #0
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3710      	adds	r7, #16
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}

080113f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80113f2:	b580      	push	{r7, lr}
 80113f4:	b084      	sub	sp, #16
 80113f6:	af00      	add	r7, sp, #0
 80113f8:	6078      	str	r0, [r7, #4]
 80113fa:	460b      	mov	r3, r1
 80113fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011404:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801140c:	2b00      	cmp	r3, #0
 801140e:	d101      	bne.n	8011414 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011410:	2303      	movs	r3, #3
 8011412:	e015      	b.n	8011440 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011414:	78fb      	ldrb	r3, [r7, #3]
 8011416:	4619      	mov	r1, r3
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f004 ff71 	bl	8016300 <USBD_LL_GetRxDataSize>
 801141e:	4602      	mov	r2, r0
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801142c:	68db      	ldr	r3, [r3, #12]
 801142e:	68fa      	ldr	r2, [r7, #12]
 8011430:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011434:	68fa      	ldr	r2, [r7, #12]
 8011436:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801143a:	4611      	mov	r1, r2
 801143c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801143e:	2300      	movs	r3, #0
}
 8011440:	4618      	mov	r0, r3
 8011442:	3710      	adds	r7, #16
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b084      	sub	sp, #16
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011456:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d101      	bne.n	8011462 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801145e:	2303      	movs	r3, #3
 8011460:	e01b      	b.n	801149a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011468:	2b00      	cmp	r3, #0
 801146a:	d015      	beq.n	8011498 <USBD_CDC_EP0_RxReady+0x50>
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011472:	2bff      	cmp	r3, #255	; 0xff
 8011474:	d010      	beq.n	8011498 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801147c:	689b      	ldr	r3, [r3, #8]
 801147e:	68fa      	ldr	r2, [r7, #12]
 8011480:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011484:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011486:	68fa      	ldr	r2, [r7, #12]
 8011488:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801148c:	b292      	uxth	r2, r2
 801148e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	22ff      	movs	r2, #255	; 0xff
 8011494:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011498:	2300      	movs	r3, #0
}
 801149a:	4618      	mov	r0, r3
 801149c:	3710      	adds	r7, #16
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
	...

080114a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2243      	movs	r2, #67	; 0x43
 80114b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80114b2:	4b03      	ldr	r3, [pc, #12]	; (80114c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr
 80114c0:	20000098 	.word	0x20000098

080114c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b083      	sub	sp, #12
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2243      	movs	r2, #67	; 0x43
 80114d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80114d2:	4b03      	ldr	r3, [pc, #12]	; (80114e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	370c      	adds	r7, #12
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr
 80114e0:	20000054 	.word	0x20000054

080114e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80114e4:	b480      	push	{r7}
 80114e6:	b083      	sub	sp, #12
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2243      	movs	r2, #67	; 0x43
 80114f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80114f2:	4b03      	ldr	r3, [pc, #12]	; (8011500 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	370c      	adds	r7, #12
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr
 8011500:	200000dc 	.word	0x200000dc

08011504 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011504:	b480      	push	{r7}
 8011506:	b083      	sub	sp, #12
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	220a      	movs	r2, #10
 8011510:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011512:	4b03      	ldr	r3, [pc, #12]	; (8011520 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011514:	4618      	mov	r0, r3
 8011516:	370c      	adds	r7, #12
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr
 8011520:	20000010 	.word	0x20000010

08011524 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011524:	b480      	push	{r7}
 8011526:	b083      	sub	sp, #12
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d101      	bne.n	8011538 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011534:	2303      	movs	r3, #3
 8011536:	e004      	b.n	8011542 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	683a      	ldr	r2, [r7, #0]
 801153c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011540:	2300      	movs	r3, #0
}
 8011542:	4618      	mov	r0, r3
 8011544:	370c      	adds	r7, #12
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr

0801154e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801154e:	b480      	push	{r7}
 8011550:	b087      	sub	sp, #28
 8011552:	af00      	add	r7, sp, #0
 8011554:	60f8      	str	r0, [r7, #12]
 8011556:	60b9      	str	r1, [r7, #8]
 8011558:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011560:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d101      	bne.n	801156c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011568:	2303      	movs	r3, #3
 801156a:	e008      	b.n	801157e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	68ba      	ldr	r2, [r7, #8]
 8011570:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801157c:	2300      	movs	r3, #0
}
 801157e:	4618      	mov	r0, r3
 8011580:	371c      	adds	r7, #28
 8011582:	46bd      	mov	sp, r7
 8011584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011588:	4770      	bx	lr

0801158a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801158a:	b480      	push	{r7}
 801158c:	b085      	sub	sp, #20
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
 8011592:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801159a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d101      	bne.n	80115a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80115a2:	2303      	movs	r3, #3
 80115a4:	e004      	b.n	80115b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	683a      	ldr	r2, [r7, #0]
 80115aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80115ae:	2300      	movs	r3, #0
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3714      	adds	r7, #20
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr

080115bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80115cc:	2301      	movs	r3, #1
 80115ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d101      	bne.n	80115de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80115da:	2303      	movs	r3, #3
 80115dc:	e01a      	b.n	8011614 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d114      	bne.n	8011612 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	2201      	movs	r2, #1
 80115ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011606:	2181      	movs	r1, #129	; 0x81
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f004 fe09 	bl	8016220 <USBD_LL_Transmit>

    ret = USBD_OK;
 801160e:	2300      	movs	r3, #0
 8011610:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011612:	7bfb      	ldrb	r3, [r7, #15]
}
 8011614:	4618      	mov	r0, r3
 8011616:	3710      	adds	r7, #16
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b084      	sub	sp, #16
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801162a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011632:	2b00      	cmp	r3, #0
 8011634:	d101      	bne.n	801163a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011636:	2303      	movs	r3, #3
 8011638:	e016      	b.n	8011668 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	7c1b      	ldrb	r3, [r3, #16]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d109      	bne.n	8011656 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011648:	f44f 7300 	mov.w	r3, #512	; 0x200
 801164c:	2101      	movs	r1, #1
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f004 fe1e 	bl	8016290 <USBD_LL_PrepareReceive>
 8011654:	e007      	b.n	8011666 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801165c:	2340      	movs	r3, #64	; 0x40
 801165e:	2101      	movs	r1, #1
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f004 fe15 	bl	8016290 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011666:	2300      	movs	r3, #0
}
 8011668:	4618      	mov	r0, r3
 801166a:	3710      	adds	r7, #16
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b086      	sub	sp, #24
 8011674:	af00      	add	r7, sp, #0
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	60b9      	str	r1, [r7, #8]
 801167a:	4613      	mov	r3, r2
 801167c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d101      	bne.n	8011688 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011684:	2303      	movs	r3, #3
 8011686:	e01f      	b.n	80116c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2200      	movs	r2, #0
 801168c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2200      	movs	r2, #0
 8011694:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2200      	movs	r2, #0
 801169c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d003      	beq.n	80116ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	68ba      	ldr	r2, [r7, #8]
 80116aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2201      	movs	r2, #1
 80116b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	79fa      	ldrb	r2, [r7, #7]
 80116ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80116bc:	68f8      	ldr	r0, [r7, #12]
 80116be:	f004 fbf1 	bl	8015ea4 <USBD_LL_Init>
 80116c2:	4603      	mov	r3, r0
 80116c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80116c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3718      	adds	r7, #24
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80116da:	2300      	movs	r3, #0
 80116dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d101      	bne.n	80116e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80116e4:	2303      	movs	r3, #3
 80116e6:	e016      	b.n	8011716 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	683a      	ldr	r2, [r7, #0]
 80116ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d00b      	beq.n	8011714 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011704:	f107 020e 	add.w	r2, r7, #14
 8011708:	4610      	mov	r0, r2
 801170a:	4798      	blx	r3
 801170c:	4602      	mov	r2, r0
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011714:	2300      	movs	r3, #0
}
 8011716:	4618      	mov	r0, r3
 8011718:	3710      	adds	r7, #16
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}

0801171e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801171e:	b580      	push	{r7, lr}
 8011720:	b082      	sub	sp, #8
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f004 fc06 	bl	8015f38 <USBD_LL_Start>
 801172c:	4603      	mov	r3, r0
}
 801172e:	4618      	mov	r0, r3
 8011730:	3708      	adds	r7, #8
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011736:	b480      	push	{r7}
 8011738:	b083      	sub	sp, #12
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801173e:	2300      	movs	r3, #0
}
 8011740:	4618      	mov	r0, r3
 8011742:	370c      	adds	r7, #12
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr

0801174c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b084      	sub	sp, #16
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	460b      	mov	r3, r1
 8011756:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011758:	2303      	movs	r3, #3
 801175a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011762:	2b00      	cmp	r3, #0
 8011764:	d009      	beq.n	801177a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	78fa      	ldrb	r2, [r7, #3]
 8011770:	4611      	mov	r1, r2
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	4798      	blx	r3
 8011776:	4603      	mov	r3, r0
 8011778:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801177a:	7bfb      	ldrb	r3, [r7, #15]
}
 801177c:	4618      	mov	r0, r3
 801177e:	3710      	adds	r7, #16
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	460b      	mov	r3, r1
 801178e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011796:	2b00      	cmp	r3, #0
 8011798:	d007      	beq.n	80117aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	78fa      	ldrb	r2, [r7, #3]
 80117a4:	4611      	mov	r1, r2
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	4798      	blx	r3
  }

  return USBD_OK;
 80117aa:	2300      	movs	r3, #0
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3708      	adds	r7, #8
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}

080117b4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80117c4:	6839      	ldr	r1, [r7, #0]
 80117c6:	4618      	mov	r0, r3
 80117c8:	f000 ff90 	bl	80126ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2201      	movs	r2, #1
 80117d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80117da:	461a      	mov	r2, r3
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80117e8:	f003 031f 	and.w	r3, r3, #31
 80117ec:	2b02      	cmp	r3, #2
 80117ee:	d01a      	beq.n	8011826 <USBD_LL_SetupStage+0x72>
 80117f0:	2b02      	cmp	r3, #2
 80117f2:	d822      	bhi.n	801183a <USBD_LL_SetupStage+0x86>
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d002      	beq.n	80117fe <USBD_LL_SetupStage+0x4a>
 80117f8:	2b01      	cmp	r3, #1
 80117fa:	d00a      	beq.n	8011812 <USBD_LL_SetupStage+0x5e>
 80117fc:	e01d      	b.n	801183a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011804:	4619      	mov	r1, r3
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f000 fa62 	bl	8011cd0 <USBD_StdDevReq>
 801180c:	4603      	mov	r3, r0
 801180e:	73fb      	strb	r3, [r7, #15]
      break;
 8011810:	e020      	b.n	8011854 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011818:	4619      	mov	r1, r3
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f000 fac6 	bl	8011dac <USBD_StdItfReq>
 8011820:	4603      	mov	r3, r0
 8011822:	73fb      	strb	r3, [r7, #15]
      break;
 8011824:	e016      	b.n	8011854 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801182c:	4619      	mov	r1, r3
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f000 fb05 	bl	8011e3e <USBD_StdEPReq>
 8011834:	4603      	mov	r3, r0
 8011836:	73fb      	strb	r3, [r7, #15]
      break;
 8011838:	e00c      	b.n	8011854 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011840:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011844:	b2db      	uxtb	r3, r3
 8011846:	4619      	mov	r1, r3
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f004 fc1b 	bl	8016084 <USBD_LL_StallEP>
 801184e:	4603      	mov	r3, r0
 8011850:	73fb      	strb	r3, [r7, #15]
      break;
 8011852:	bf00      	nop
  }

  return ret;
 8011854:	7bfb      	ldrb	r3, [r7, #15]
}
 8011856:	4618      	mov	r0, r3
 8011858:	3710      	adds	r7, #16
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}

0801185e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801185e:	b580      	push	{r7, lr}
 8011860:	b086      	sub	sp, #24
 8011862:	af00      	add	r7, sp, #0
 8011864:	60f8      	str	r0, [r7, #12]
 8011866:	460b      	mov	r3, r1
 8011868:	607a      	str	r2, [r7, #4]
 801186a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801186c:	7afb      	ldrb	r3, [r7, #11]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d138      	bne.n	80118e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011878:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011880:	2b03      	cmp	r3, #3
 8011882:	d14a      	bne.n	801191a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	689a      	ldr	r2, [r3, #8]
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	429a      	cmp	r2, r3
 801188e:	d913      	bls.n	80118b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	689a      	ldr	r2, [r3, #8]
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	68db      	ldr	r3, [r3, #12]
 8011898:	1ad2      	subs	r2, r2, r3
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	68da      	ldr	r2, [r3, #12]
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	689b      	ldr	r3, [r3, #8]
 80118a6:	4293      	cmp	r3, r2
 80118a8:	bf28      	it	cs
 80118aa:	4613      	movcs	r3, r2
 80118ac:	461a      	mov	r2, r3
 80118ae:	6879      	ldr	r1, [r7, #4]
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	f001 f80f 	bl	80128d4 <USBD_CtlContinueRx>
 80118b6:	e030      	b.n	801191a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118be:	b2db      	uxtb	r3, r3
 80118c0:	2b03      	cmp	r3, #3
 80118c2:	d10b      	bne.n	80118dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118ca:	691b      	ldr	r3, [r3, #16]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d005      	beq.n	80118dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118d6:	691b      	ldr	r3, [r3, #16]
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80118dc:	68f8      	ldr	r0, [r7, #12]
 80118de:	f001 f80a 	bl	80128f6 <USBD_CtlSendStatus>
 80118e2:	e01a      	b.n	801191a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118ea:	b2db      	uxtb	r3, r3
 80118ec:	2b03      	cmp	r3, #3
 80118ee:	d114      	bne.n	801191a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118f6:	699b      	ldr	r3, [r3, #24]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d00e      	beq.n	801191a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011902:	699b      	ldr	r3, [r3, #24]
 8011904:	7afa      	ldrb	r2, [r7, #11]
 8011906:	4611      	mov	r1, r2
 8011908:	68f8      	ldr	r0, [r7, #12]
 801190a:	4798      	blx	r3
 801190c:	4603      	mov	r3, r0
 801190e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011910:	7dfb      	ldrb	r3, [r7, #23]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d001      	beq.n	801191a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011916:	7dfb      	ldrb	r3, [r7, #23]
 8011918:	e000      	b.n	801191c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801191a:	2300      	movs	r3, #0
}
 801191c:	4618      	mov	r0, r3
 801191e:	3718      	adds	r7, #24
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}

08011924 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b086      	sub	sp, #24
 8011928:	af00      	add	r7, sp, #0
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	460b      	mov	r3, r1
 801192e:	607a      	str	r2, [r7, #4]
 8011930:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011932:	7afb      	ldrb	r3, [r7, #11]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d16b      	bne.n	8011a10 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	3314      	adds	r3, #20
 801193c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011944:	2b02      	cmp	r3, #2
 8011946:	d156      	bne.n	80119f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	689a      	ldr	r2, [r3, #8]
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	68db      	ldr	r3, [r3, #12]
 8011950:	429a      	cmp	r2, r3
 8011952:	d914      	bls.n	801197e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	689a      	ldr	r2, [r3, #8]
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	68db      	ldr	r3, [r3, #12]
 801195c:	1ad2      	subs	r2, r2, r3
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	689b      	ldr	r3, [r3, #8]
 8011966:	461a      	mov	r2, r3
 8011968:	6879      	ldr	r1, [r7, #4]
 801196a:	68f8      	ldr	r0, [r7, #12]
 801196c:	f000 ff84 	bl	8012878 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011970:	2300      	movs	r3, #0
 8011972:	2200      	movs	r2, #0
 8011974:	2100      	movs	r1, #0
 8011976:	68f8      	ldr	r0, [r7, #12]
 8011978:	f004 fc8a 	bl	8016290 <USBD_LL_PrepareReceive>
 801197c:	e03b      	b.n	80119f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	68da      	ldr	r2, [r3, #12]
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	689b      	ldr	r3, [r3, #8]
 8011986:	429a      	cmp	r2, r3
 8011988:	d11c      	bne.n	80119c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	685a      	ldr	r2, [r3, #4]
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011992:	429a      	cmp	r2, r3
 8011994:	d316      	bcc.n	80119c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	685a      	ldr	r2, [r3, #4]
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d20f      	bcs.n	80119c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80119a4:	2200      	movs	r2, #0
 80119a6:	2100      	movs	r1, #0
 80119a8:	68f8      	ldr	r0, [r7, #12]
 80119aa:	f000 ff65 	bl	8012878 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	2200      	movs	r2, #0
 80119b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80119b6:	2300      	movs	r3, #0
 80119b8:	2200      	movs	r2, #0
 80119ba:	2100      	movs	r1, #0
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f004 fc67 	bl	8016290 <USBD_LL_PrepareReceive>
 80119c2:	e018      	b.n	80119f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119ca:	b2db      	uxtb	r3, r3
 80119cc:	2b03      	cmp	r3, #3
 80119ce:	d10b      	bne.n	80119e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d005      	beq.n	80119e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	68f8      	ldr	r0, [r7, #12]
 80119e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80119e8:	2180      	movs	r1, #128	; 0x80
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	f004 fb4a 	bl	8016084 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80119f0:	68f8      	ldr	r0, [r7, #12]
 80119f2:	f000 ff93 	bl	801291c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	d122      	bne.n	8011a46 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011a00:	68f8      	ldr	r0, [r7, #12]
 8011a02:	f7ff fe98 	bl	8011736 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011a0e:	e01a      	b.n	8011a46 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a16:	b2db      	uxtb	r3, r3
 8011a18:	2b03      	cmp	r3, #3
 8011a1a:	d114      	bne.n	8011a46 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a22:	695b      	ldr	r3, [r3, #20]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d00e      	beq.n	8011a46 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a2e:	695b      	ldr	r3, [r3, #20]
 8011a30:	7afa      	ldrb	r2, [r7, #11]
 8011a32:	4611      	mov	r1, r2
 8011a34:	68f8      	ldr	r0, [r7, #12]
 8011a36:	4798      	blx	r3
 8011a38:	4603      	mov	r3, r0
 8011a3a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011a3c:	7dfb      	ldrb	r3, [r7, #23]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d001      	beq.n	8011a46 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011a42:	7dfb      	ldrb	r3, [r7, #23]
 8011a44:	e000      	b.n	8011a48 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011a46:	2300      	movs	r3, #0
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3718      	adds	r7, #24
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2201      	movs	r2, #1
 8011a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2200      	movs	r2, #0
 8011a64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2200      	movs	r2, #0
 8011a72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d101      	bne.n	8011a84 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011a80:	2303      	movs	r3, #3
 8011a82:	e02f      	b.n	8011ae4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d00f      	beq.n	8011aae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d009      	beq.n	8011aae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	6852      	ldr	r2, [r2, #4]
 8011aa6:	b2d2      	uxtb	r2, r2
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011aae:	2340      	movs	r3, #64	; 0x40
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	2100      	movs	r1, #0
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f004 fa71 	bl	8015f9c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	2201      	movs	r2, #1
 8011abe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2240      	movs	r2, #64	; 0x40
 8011ac6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011aca:	2340      	movs	r3, #64	; 0x40
 8011acc:	2200      	movs	r2, #0
 8011ace:	2180      	movs	r1, #128	; 0x80
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f004 fa63 	bl	8015f9c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2201      	movs	r2, #1
 8011ada:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2240      	movs	r2, #64	; 0x40
 8011ae0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011ae2:	2300      	movs	r3, #0
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3708      	adds	r7, #8
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011aec:	b480      	push	{r7}
 8011aee:	b083      	sub	sp, #12
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	460b      	mov	r3, r1
 8011af6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	78fa      	ldrb	r2, [r7, #3]
 8011afc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011afe:	2300      	movs	r3, #0
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr

08011b0c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b1a:	b2da      	uxtb	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2204      	movs	r2, #4
 8011b26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011b2a:	2300      	movs	r3, #0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr

08011b38 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	2b04      	cmp	r3, #4
 8011b4a:	d106      	bne.n	8011b5a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011b5a:	2300      	movs	r3, #0
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr

08011b68 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d101      	bne.n	8011b7e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8011b7a:	2303      	movs	r3, #3
 8011b7c:	e012      	b.n	8011ba4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	2b03      	cmp	r3, #3
 8011b88:	d10b      	bne.n	8011ba2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b90:	69db      	ldr	r3, [r3, #28]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d005      	beq.n	8011ba2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b9c:	69db      	ldr	r3, [r3, #28]
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011ba2:	2300      	movs	r3, #0
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d101      	bne.n	8011bc6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8011bc2:	2303      	movs	r3, #3
 8011bc4:	e014      	b.n	8011bf0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bcc:	b2db      	uxtb	r3, r3
 8011bce:	2b03      	cmp	r3, #3
 8011bd0:	d10d      	bne.n	8011bee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bd8:	6a1b      	ldr	r3, [r3, #32]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d007      	beq.n	8011bee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011be4:	6a1b      	ldr	r3, [r3, #32]
 8011be6:	78fa      	ldrb	r2, [r7, #3]
 8011be8:	4611      	mov	r1, r2
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011bee:	2300      	movs	r3, #0
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3708      	adds	r7, #8
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	460b      	mov	r3, r1
 8011c02:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d101      	bne.n	8011c12 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8011c0e:	2303      	movs	r3, #3
 8011c10:	e014      	b.n	8011c3c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	2b03      	cmp	r3, #3
 8011c1c:	d10d      	bne.n	8011c3a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d007      	beq.n	8011c3a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c32:	78fa      	ldrb	r2, [r7, #3]
 8011c34:	4611      	mov	r1, r2
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011c3a:	2300      	movs	r3, #0
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3708      	adds	r7, #8
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011c4c:	2300      	movs	r3, #0
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	370c      	adds	r7, #12
 8011c52:	46bd      	mov	sp, r7
 8011c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c58:	4770      	bx	lr

08011c5a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011c5a:	b580      	push	{r7, lr}
 8011c5c:	b082      	sub	sp, #8
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2201      	movs	r2, #1
 8011c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d009      	beq.n	8011c88 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	687a      	ldr	r2, [r7, #4]
 8011c7e:	6852      	ldr	r2, [r2, #4]
 8011c80:	b2d2      	uxtb	r2, r2
 8011c82:	4611      	mov	r1, r2
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	4798      	blx	r3
  }

  return USBD_OK;
 8011c88:	2300      	movs	r3, #0
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3708      	adds	r7, #8
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}

08011c92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011c92:	b480      	push	{r7}
 8011c94:	b087      	sub	sp, #28
 8011c96:	af00      	add	r7, sp, #0
 8011c98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011cb0:	8a3b      	ldrh	r3, [r7, #16]
 8011cb2:	021b      	lsls	r3, r3, #8
 8011cb4:	b21a      	sxth	r2, r3
 8011cb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011cba:	4313      	orrs	r3, r2
 8011cbc:	b21b      	sxth	r3, r3
 8011cbe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011cc0:	89fb      	ldrh	r3, [r7, #14]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	371c      	adds	r7, #28
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr
	...

08011cd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b084      	sub	sp, #16
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	781b      	ldrb	r3, [r3, #0]
 8011ce2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ce6:	2b40      	cmp	r3, #64	; 0x40
 8011ce8:	d005      	beq.n	8011cf6 <USBD_StdDevReq+0x26>
 8011cea:	2b40      	cmp	r3, #64	; 0x40
 8011cec:	d853      	bhi.n	8011d96 <USBD_StdDevReq+0xc6>
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d00b      	beq.n	8011d0a <USBD_StdDevReq+0x3a>
 8011cf2:	2b20      	cmp	r3, #32
 8011cf4:	d14f      	bne.n	8011d96 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cfc:	689b      	ldr	r3, [r3, #8]
 8011cfe:	6839      	ldr	r1, [r7, #0]
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	4798      	blx	r3
 8011d04:	4603      	mov	r3, r0
 8011d06:	73fb      	strb	r3, [r7, #15]
      break;
 8011d08:	e04a      	b.n	8011da0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	785b      	ldrb	r3, [r3, #1]
 8011d0e:	2b09      	cmp	r3, #9
 8011d10:	d83b      	bhi.n	8011d8a <USBD_StdDevReq+0xba>
 8011d12:	a201      	add	r2, pc, #4	; (adr r2, 8011d18 <USBD_StdDevReq+0x48>)
 8011d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d18:	08011d6d 	.word	0x08011d6d
 8011d1c:	08011d81 	.word	0x08011d81
 8011d20:	08011d8b 	.word	0x08011d8b
 8011d24:	08011d77 	.word	0x08011d77
 8011d28:	08011d8b 	.word	0x08011d8b
 8011d2c:	08011d4b 	.word	0x08011d4b
 8011d30:	08011d41 	.word	0x08011d41
 8011d34:	08011d8b 	.word	0x08011d8b
 8011d38:	08011d63 	.word	0x08011d63
 8011d3c:	08011d55 	.word	0x08011d55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011d40:	6839      	ldr	r1, [r7, #0]
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f000 f9de 	bl	8012104 <USBD_GetDescriptor>
          break;
 8011d48:	e024      	b.n	8011d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011d4a:	6839      	ldr	r1, [r7, #0]
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f000 fb43 	bl	80123d8 <USBD_SetAddress>
          break;
 8011d52:	e01f      	b.n	8011d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011d54:	6839      	ldr	r1, [r7, #0]
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 fb82 	bl	8012460 <USBD_SetConfig>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	73fb      	strb	r3, [r7, #15]
          break;
 8011d60:	e018      	b.n	8011d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011d62:	6839      	ldr	r1, [r7, #0]
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f000 fc21 	bl	80125ac <USBD_GetConfig>
          break;
 8011d6a:	e013      	b.n	8011d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011d6c:	6839      	ldr	r1, [r7, #0]
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f000 fc52 	bl	8012618 <USBD_GetStatus>
          break;
 8011d74:	e00e      	b.n	8011d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011d76:	6839      	ldr	r1, [r7, #0]
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f000 fc81 	bl	8012680 <USBD_SetFeature>
          break;
 8011d7e:	e009      	b.n	8011d94 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011d80:	6839      	ldr	r1, [r7, #0]
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f000 fc90 	bl	80126a8 <USBD_ClrFeature>
          break;
 8011d88:	e004      	b.n	8011d94 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011d8a:	6839      	ldr	r1, [r7, #0]
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f000 fce7 	bl	8012760 <USBD_CtlError>
          break;
 8011d92:	bf00      	nop
      }
      break;
 8011d94:	e004      	b.n	8011da0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011d96:	6839      	ldr	r1, [r7, #0]
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f000 fce1 	bl	8012760 <USBD_CtlError>
      break;
 8011d9e:	bf00      	nop
  }

  return ret;
 8011da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3710      	adds	r7, #16
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
 8011daa:	bf00      	nop

08011dac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011db6:	2300      	movs	r3, #0
 8011db8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011dc2:	2b40      	cmp	r3, #64	; 0x40
 8011dc4:	d005      	beq.n	8011dd2 <USBD_StdItfReq+0x26>
 8011dc6:	2b40      	cmp	r3, #64	; 0x40
 8011dc8:	d82f      	bhi.n	8011e2a <USBD_StdItfReq+0x7e>
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d001      	beq.n	8011dd2 <USBD_StdItfReq+0x26>
 8011dce:	2b20      	cmp	r3, #32
 8011dd0:	d12b      	bne.n	8011e2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	3b01      	subs	r3, #1
 8011ddc:	2b02      	cmp	r3, #2
 8011dde:	d81d      	bhi.n	8011e1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	889b      	ldrh	r3, [r3, #4]
 8011de4:	b2db      	uxtb	r3, r3
 8011de6:	2b01      	cmp	r3, #1
 8011de8:	d813      	bhi.n	8011e12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011df0:	689b      	ldr	r3, [r3, #8]
 8011df2:	6839      	ldr	r1, [r7, #0]
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	4798      	blx	r3
 8011df8:	4603      	mov	r3, r0
 8011dfa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	88db      	ldrh	r3, [r3, #6]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d110      	bne.n	8011e26 <USBD_StdItfReq+0x7a>
 8011e04:	7bfb      	ldrb	r3, [r7, #15]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d10d      	bne.n	8011e26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f000 fd73 	bl	80128f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011e10:	e009      	b.n	8011e26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011e12:	6839      	ldr	r1, [r7, #0]
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f000 fca3 	bl	8012760 <USBD_CtlError>
          break;
 8011e1a:	e004      	b.n	8011e26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8011e1c:	6839      	ldr	r1, [r7, #0]
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f000 fc9e 	bl	8012760 <USBD_CtlError>
          break;
 8011e24:	e000      	b.n	8011e28 <USBD_StdItfReq+0x7c>
          break;
 8011e26:	bf00      	nop
      }
      break;
 8011e28:	e004      	b.n	8011e34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8011e2a:	6839      	ldr	r1, [r7, #0]
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f000 fc97 	bl	8012760 <USBD_CtlError>
      break;
 8011e32:	bf00      	nop
  }

  return ret;
 8011e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3710      	adds	r7, #16
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}

08011e3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e3e:	b580      	push	{r7, lr}
 8011e40:	b084      	sub	sp, #16
 8011e42:	af00      	add	r7, sp, #0
 8011e44:	6078      	str	r0, [r7, #4]
 8011e46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	889b      	ldrh	r3, [r3, #4]
 8011e50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011e5a:	2b40      	cmp	r3, #64	; 0x40
 8011e5c:	d007      	beq.n	8011e6e <USBD_StdEPReq+0x30>
 8011e5e:	2b40      	cmp	r3, #64	; 0x40
 8011e60:	f200 8145 	bhi.w	80120ee <USBD_StdEPReq+0x2b0>
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d00c      	beq.n	8011e82 <USBD_StdEPReq+0x44>
 8011e68:	2b20      	cmp	r3, #32
 8011e6a:	f040 8140 	bne.w	80120ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e74:	689b      	ldr	r3, [r3, #8]
 8011e76:	6839      	ldr	r1, [r7, #0]
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	4798      	blx	r3
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8011e80:	e13a      	b.n	80120f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	785b      	ldrb	r3, [r3, #1]
 8011e86:	2b03      	cmp	r3, #3
 8011e88:	d007      	beq.n	8011e9a <USBD_StdEPReq+0x5c>
 8011e8a:	2b03      	cmp	r3, #3
 8011e8c:	f300 8129 	bgt.w	80120e2 <USBD_StdEPReq+0x2a4>
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d07f      	beq.n	8011f94 <USBD_StdEPReq+0x156>
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d03c      	beq.n	8011f12 <USBD_StdEPReq+0xd4>
 8011e98:	e123      	b.n	80120e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ea0:	b2db      	uxtb	r3, r3
 8011ea2:	2b02      	cmp	r3, #2
 8011ea4:	d002      	beq.n	8011eac <USBD_StdEPReq+0x6e>
 8011ea6:	2b03      	cmp	r3, #3
 8011ea8:	d016      	beq.n	8011ed8 <USBD_StdEPReq+0x9a>
 8011eaa:	e02c      	b.n	8011f06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011eac:	7bbb      	ldrb	r3, [r7, #14]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d00d      	beq.n	8011ece <USBD_StdEPReq+0x90>
 8011eb2:	7bbb      	ldrb	r3, [r7, #14]
 8011eb4:	2b80      	cmp	r3, #128	; 0x80
 8011eb6:	d00a      	beq.n	8011ece <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011eb8:	7bbb      	ldrb	r3, [r7, #14]
 8011eba:	4619      	mov	r1, r3
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f004 f8e1 	bl	8016084 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ec2:	2180      	movs	r1, #128	; 0x80
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f004 f8dd 	bl	8016084 <USBD_LL_StallEP>
 8011eca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011ecc:	e020      	b.n	8011f10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8011ece:	6839      	ldr	r1, [r7, #0]
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f000 fc45 	bl	8012760 <USBD_CtlError>
              break;
 8011ed6:	e01b      	b.n	8011f10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	885b      	ldrh	r3, [r3, #2]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d10e      	bne.n	8011efe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011ee0:	7bbb      	ldrb	r3, [r7, #14]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d00b      	beq.n	8011efe <USBD_StdEPReq+0xc0>
 8011ee6:	7bbb      	ldrb	r3, [r7, #14]
 8011ee8:	2b80      	cmp	r3, #128	; 0x80
 8011eea:	d008      	beq.n	8011efe <USBD_StdEPReq+0xc0>
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	88db      	ldrh	r3, [r3, #6]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d104      	bne.n	8011efe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ef4:	7bbb      	ldrb	r3, [r7, #14]
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f004 f8c3 	bl	8016084 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f000 fcf9 	bl	80128f6 <USBD_CtlSendStatus>

              break;
 8011f04:	e004      	b.n	8011f10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011f06:	6839      	ldr	r1, [r7, #0]
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f000 fc29 	bl	8012760 <USBD_CtlError>
              break;
 8011f0e:	bf00      	nop
          }
          break;
 8011f10:	e0ec      	b.n	80120ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f18:	b2db      	uxtb	r3, r3
 8011f1a:	2b02      	cmp	r3, #2
 8011f1c:	d002      	beq.n	8011f24 <USBD_StdEPReq+0xe6>
 8011f1e:	2b03      	cmp	r3, #3
 8011f20:	d016      	beq.n	8011f50 <USBD_StdEPReq+0x112>
 8011f22:	e030      	b.n	8011f86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011f24:	7bbb      	ldrb	r3, [r7, #14]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d00d      	beq.n	8011f46 <USBD_StdEPReq+0x108>
 8011f2a:	7bbb      	ldrb	r3, [r7, #14]
 8011f2c:	2b80      	cmp	r3, #128	; 0x80
 8011f2e:	d00a      	beq.n	8011f46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f30:	7bbb      	ldrb	r3, [r7, #14]
 8011f32:	4619      	mov	r1, r3
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f004 f8a5 	bl	8016084 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f3a:	2180      	movs	r1, #128	; 0x80
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f004 f8a1 	bl	8016084 <USBD_LL_StallEP>
 8011f42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011f44:	e025      	b.n	8011f92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011f46:	6839      	ldr	r1, [r7, #0]
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f000 fc09 	bl	8012760 <USBD_CtlError>
              break;
 8011f4e:	e020      	b.n	8011f92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	885b      	ldrh	r3, [r3, #2]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d11b      	bne.n	8011f90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011f58:	7bbb      	ldrb	r3, [r7, #14]
 8011f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d004      	beq.n	8011f6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011f62:	7bbb      	ldrb	r3, [r7, #14]
 8011f64:	4619      	mov	r1, r3
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f004 f8c2 	bl	80160f0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f000 fcc2 	bl	80128f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f78:	689b      	ldr	r3, [r3, #8]
 8011f7a:	6839      	ldr	r1, [r7, #0]
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	4798      	blx	r3
 8011f80:	4603      	mov	r3, r0
 8011f82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011f84:	e004      	b.n	8011f90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011f86:	6839      	ldr	r1, [r7, #0]
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f000 fbe9 	bl	8012760 <USBD_CtlError>
              break;
 8011f8e:	e000      	b.n	8011f92 <USBD_StdEPReq+0x154>
              break;
 8011f90:	bf00      	nop
          }
          break;
 8011f92:	e0ab      	b.n	80120ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	2b02      	cmp	r3, #2
 8011f9e:	d002      	beq.n	8011fa6 <USBD_StdEPReq+0x168>
 8011fa0:	2b03      	cmp	r3, #3
 8011fa2:	d032      	beq.n	801200a <USBD_StdEPReq+0x1cc>
 8011fa4:	e097      	b.n	80120d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011fa6:	7bbb      	ldrb	r3, [r7, #14]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d007      	beq.n	8011fbc <USBD_StdEPReq+0x17e>
 8011fac:	7bbb      	ldrb	r3, [r7, #14]
 8011fae:	2b80      	cmp	r3, #128	; 0x80
 8011fb0:	d004      	beq.n	8011fbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8011fb2:	6839      	ldr	r1, [r7, #0]
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f000 fbd3 	bl	8012760 <USBD_CtlError>
                break;
 8011fba:	e091      	b.n	80120e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	da0b      	bge.n	8011fdc <USBD_StdEPReq+0x19e>
 8011fc4:	7bbb      	ldrb	r3, [r7, #14]
 8011fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fca:	4613      	mov	r3, r2
 8011fcc:	009b      	lsls	r3, r3, #2
 8011fce:	4413      	add	r3, r2
 8011fd0:	009b      	lsls	r3, r3, #2
 8011fd2:	3310      	adds	r3, #16
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	4413      	add	r3, r2
 8011fd8:	3304      	adds	r3, #4
 8011fda:	e00b      	b.n	8011ff4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011fdc:	7bbb      	ldrb	r3, [r7, #14]
 8011fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fe2:	4613      	mov	r3, r2
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	4413      	add	r3, r2
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	3304      	adds	r3, #4
 8011ff4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	2202      	movs	r2, #2
 8012000:	4619      	mov	r1, r3
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 fc1d 	bl	8012842 <USBD_CtlSendData>
              break;
 8012008:	e06a      	b.n	80120e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801200a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801200e:	2b00      	cmp	r3, #0
 8012010:	da11      	bge.n	8012036 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012012:	7bbb      	ldrb	r3, [r7, #14]
 8012014:	f003 020f 	and.w	r2, r3, #15
 8012018:	6879      	ldr	r1, [r7, #4]
 801201a:	4613      	mov	r3, r2
 801201c:	009b      	lsls	r3, r3, #2
 801201e:	4413      	add	r3, r2
 8012020:	009b      	lsls	r3, r3, #2
 8012022:	440b      	add	r3, r1
 8012024:	3324      	adds	r3, #36	; 0x24
 8012026:	881b      	ldrh	r3, [r3, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d117      	bne.n	801205c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801202c:	6839      	ldr	r1, [r7, #0]
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f000 fb96 	bl	8012760 <USBD_CtlError>
                  break;
 8012034:	e054      	b.n	80120e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012036:	7bbb      	ldrb	r3, [r7, #14]
 8012038:	f003 020f 	and.w	r2, r3, #15
 801203c:	6879      	ldr	r1, [r7, #4]
 801203e:	4613      	mov	r3, r2
 8012040:	009b      	lsls	r3, r3, #2
 8012042:	4413      	add	r3, r2
 8012044:	009b      	lsls	r3, r3, #2
 8012046:	440b      	add	r3, r1
 8012048:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801204c:	881b      	ldrh	r3, [r3, #0]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d104      	bne.n	801205c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012052:	6839      	ldr	r1, [r7, #0]
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f000 fb83 	bl	8012760 <USBD_CtlError>
                  break;
 801205a:	e041      	b.n	80120e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801205c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012060:	2b00      	cmp	r3, #0
 8012062:	da0b      	bge.n	801207c <USBD_StdEPReq+0x23e>
 8012064:	7bbb      	ldrb	r3, [r7, #14]
 8012066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801206a:	4613      	mov	r3, r2
 801206c:	009b      	lsls	r3, r3, #2
 801206e:	4413      	add	r3, r2
 8012070:	009b      	lsls	r3, r3, #2
 8012072:	3310      	adds	r3, #16
 8012074:	687a      	ldr	r2, [r7, #4]
 8012076:	4413      	add	r3, r2
 8012078:	3304      	adds	r3, #4
 801207a:	e00b      	b.n	8012094 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801207c:	7bbb      	ldrb	r3, [r7, #14]
 801207e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012082:	4613      	mov	r3, r2
 8012084:	009b      	lsls	r3, r3, #2
 8012086:	4413      	add	r3, r2
 8012088:	009b      	lsls	r3, r3, #2
 801208a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	4413      	add	r3, r2
 8012092:	3304      	adds	r3, #4
 8012094:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012096:	7bbb      	ldrb	r3, [r7, #14]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d002      	beq.n	80120a2 <USBD_StdEPReq+0x264>
 801209c:	7bbb      	ldrb	r3, [r7, #14]
 801209e:	2b80      	cmp	r3, #128	; 0x80
 80120a0:	d103      	bne.n	80120aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	2200      	movs	r2, #0
 80120a6:	601a      	str	r2, [r3, #0]
 80120a8:	e00e      	b.n	80120c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80120aa:	7bbb      	ldrb	r3, [r7, #14]
 80120ac:	4619      	mov	r1, r3
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	f004 f854 	bl	801615c <USBD_LL_IsStallEP>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d003      	beq.n	80120c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	2201      	movs	r2, #1
 80120be:	601a      	str	r2, [r3, #0]
 80120c0:	e002      	b.n	80120c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	2200      	movs	r2, #0
 80120c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	2202      	movs	r2, #2
 80120cc:	4619      	mov	r1, r3
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 fbb7 	bl	8012842 <USBD_CtlSendData>
              break;
 80120d4:	e004      	b.n	80120e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80120d6:	6839      	ldr	r1, [r7, #0]
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f000 fb41 	bl	8012760 <USBD_CtlError>
              break;
 80120de:	bf00      	nop
          }
          break;
 80120e0:	e004      	b.n	80120ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80120e2:	6839      	ldr	r1, [r7, #0]
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f000 fb3b 	bl	8012760 <USBD_CtlError>
          break;
 80120ea:	bf00      	nop
      }
      break;
 80120ec:	e004      	b.n	80120f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80120ee:	6839      	ldr	r1, [r7, #0]
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f000 fb35 	bl	8012760 <USBD_CtlError>
      break;
 80120f6:	bf00      	nop
  }

  return ret;
 80120f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3710      	adds	r7, #16
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
	...

08012104 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b084      	sub	sp, #16
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801210e:	2300      	movs	r3, #0
 8012110:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012112:	2300      	movs	r3, #0
 8012114:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012116:	2300      	movs	r3, #0
 8012118:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	885b      	ldrh	r3, [r3, #2]
 801211e:	0a1b      	lsrs	r3, r3, #8
 8012120:	b29b      	uxth	r3, r3
 8012122:	3b01      	subs	r3, #1
 8012124:	2b06      	cmp	r3, #6
 8012126:	f200 8128 	bhi.w	801237a <USBD_GetDescriptor+0x276>
 801212a:	a201      	add	r2, pc, #4	; (adr r2, 8012130 <USBD_GetDescriptor+0x2c>)
 801212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012130:	0801214d 	.word	0x0801214d
 8012134:	08012165 	.word	0x08012165
 8012138:	080121a5 	.word	0x080121a5
 801213c:	0801237b 	.word	0x0801237b
 8012140:	0801237b 	.word	0x0801237b
 8012144:	0801231b 	.word	0x0801231b
 8012148:	08012347 	.word	0x08012347
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	7c12      	ldrb	r2, [r2, #16]
 8012158:	f107 0108 	add.w	r1, r7, #8
 801215c:	4610      	mov	r0, r2
 801215e:	4798      	blx	r3
 8012160:	60f8      	str	r0, [r7, #12]
      break;
 8012162:	e112      	b.n	801238a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	7c1b      	ldrb	r3, [r3, #16]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d10d      	bne.n	8012188 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012174:	f107 0208 	add.w	r2, r7, #8
 8012178:	4610      	mov	r0, r2
 801217a:	4798      	blx	r3
 801217c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	3301      	adds	r3, #1
 8012182:	2202      	movs	r2, #2
 8012184:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012186:	e100      	b.n	801238a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012190:	f107 0208 	add.w	r2, r7, #8
 8012194:	4610      	mov	r0, r2
 8012196:	4798      	blx	r3
 8012198:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	3301      	adds	r3, #1
 801219e:	2202      	movs	r2, #2
 80121a0:	701a      	strb	r2, [r3, #0]
      break;
 80121a2:	e0f2      	b.n	801238a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	885b      	ldrh	r3, [r3, #2]
 80121a8:	b2db      	uxtb	r3, r3
 80121aa:	2b05      	cmp	r3, #5
 80121ac:	f200 80ac 	bhi.w	8012308 <USBD_GetDescriptor+0x204>
 80121b0:	a201      	add	r2, pc, #4	; (adr r2, 80121b8 <USBD_GetDescriptor+0xb4>)
 80121b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121b6:	bf00      	nop
 80121b8:	080121d1 	.word	0x080121d1
 80121bc:	08012205 	.word	0x08012205
 80121c0:	08012239 	.word	0x08012239
 80121c4:	0801226d 	.word	0x0801226d
 80121c8:	080122a1 	.word	0x080122a1
 80121cc:	080122d5 	.word	0x080122d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121d6:	685b      	ldr	r3, [r3, #4]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d00b      	beq.n	80121f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	7c12      	ldrb	r2, [r2, #16]
 80121e8:	f107 0108 	add.w	r1, r7, #8
 80121ec:	4610      	mov	r0, r2
 80121ee:	4798      	blx	r3
 80121f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80121f2:	e091      	b.n	8012318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80121f4:	6839      	ldr	r1, [r7, #0]
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f000 fab2 	bl	8012760 <USBD_CtlError>
            err++;
 80121fc:	7afb      	ldrb	r3, [r7, #11]
 80121fe:	3301      	adds	r3, #1
 8012200:	72fb      	strb	r3, [r7, #11]
          break;
 8012202:	e089      	b.n	8012318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801220a:	689b      	ldr	r3, [r3, #8]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d00b      	beq.n	8012228 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012216:	689b      	ldr	r3, [r3, #8]
 8012218:	687a      	ldr	r2, [r7, #4]
 801221a:	7c12      	ldrb	r2, [r2, #16]
 801221c:	f107 0108 	add.w	r1, r7, #8
 8012220:	4610      	mov	r0, r2
 8012222:	4798      	blx	r3
 8012224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012226:	e077      	b.n	8012318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012228:	6839      	ldr	r1, [r7, #0]
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f000 fa98 	bl	8012760 <USBD_CtlError>
            err++;
 8012230:	7afb      	ldrb	r3, [r7, #11]
 8012232:	3301      	adds	r3, #1
 8012234:	72fb      	strb	r3, [r7, #11]
          break;
 8012236:	e06f      	b.n	8012318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801223e:	68db      	ldr	r3, [r3, #12]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d00b      	beq.n	801225c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	7c12      	ldrb	r2, [r2, #16]
 8012250:	f107 0108 	add.w	r1, r7, #8
 8012254:	4610      	mov	r0, r2
 8012256:	4798      	blx	r3
 8012258:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801225a:	e05d      	b.n	8012318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801225c:	6839      	ldr	r1, [r7, #0]
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f000 fa7e 	bl	8012760 <USBD_CtlError>
            err++;
 8012264:	7afb      	ldrb	r3, [r7, #11]
 8012266:	3301      	adds	r3, #1
 8012268:	72fb      	strb	r3, [r7, #11]
          break;
 801226a:	e055      	b.n	8012318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012272:	691b      	ldr	r3, [r3, #16]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d00b      	beq.n	8012290 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801227e:	691b      	ldr	r3, [r3, #16]
 8012280:	687a      	ldr	r2, [r7, #4]
 8012282:	7c12      	ldrb	r2, [r2, #16]
 8012284:	f107 0108 	add.w	r1, r7, #8
 8012288:	4610      	mov	r0, r2
 801228a:	4798      	blx	r3
 801228c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801228e:	e043      	b.n	8012318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012290:	6839      	ldr	r1, [r7, #0]
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f000 fa64 	bl	8012760 <USBD_CtlError>
            err++;
 8012298:	7afb      	ldrb	r3, [r7, #11]
 801229a:	3301      	adds	r3, #1
 801229c:	72fb      	strb	r3, [r7, #11]
          break;
 801229e:	e03b      	b.n	8012318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122a6:	695b      	ldr	r3, [r3, #20]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d00b      	beq.n	80122c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122b2:	695b      	ldr	r3, [r3, #20]
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	7c12      	ldrb	r2, [r2, #16]
 80122b8:	f107 0108 	add.w	r1, r7, #8
 80122bc:	4610      	mov	r0, r2
 80122be:	4798      	blx	r3
 80122c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122c2:	e029      	b.n	8012318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80122c4:	6839      	ldr	r1, [r7, #0]
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 fa4a 	bl	8012760 <USBD_CtlError>
            err++;
 80122cc:	7afb      	ldrb	r3, [r7, #11]
 80122ce:	3301      	adds	r3, #1
 80122d0:	72fb      	strb	r3, [r7, #11]
          break;
 80122d2:	e021      	b.n	8012318 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122da:	699b      	ldr	r3, [r3, #24]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d00b      	beq.n	80122f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122e6:	699b      	ldr	r3, [r3, #24]
 80122e8:	687a      	ldr	r2, [r7, #4]
 80122ea:	7c12      	ldrb	r2, [r2, #16]
 80122ec:	f107 0108 	add.w	r1, r7, #8
 80122f0:	4610      	mov	r0, r2
 80122f2:	4798      	blx	r3
 80122f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122f6:	e00f      	b.n	8012318 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80122f8:	6839      	ldr	r1, [r7, #0]
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f000 fa30 	bl	8012760 <USBD_CtlError>
            err++;
 8012300:	7afb      	ldrb	r3, [r7, #11]
 8012302:	3301      	adds	r3, #1
 8012304:	72fb      	strb	r3, [r7, #11]
          break;
 8012306:	e007      	b.n	8012318 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012308:	6839      	ldr	r1, [r7, #0]
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 fa28 	bl	8012760 <USBD_CtlError>
          err++;
 8012310:	7afb      	ldrb	r3, [r7, #11]
 8012312:	3301      	adds	r3, #1
 8012314:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012316:	bf00      	nop
      }
      break;
 8012318:	e037      	b.n	801238a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	7c1b      	ldrb	r3, [r3, #16]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d109      	bne.n	8012336 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801232a:	f107 0208 	add.w	r2, r7, #8
 801232e:	4610      	mov	r0, r2
 8012330:	4798      	blx	r3
 8012332:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012334:	e029      	b.n	801238a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012336:	6839      	ldr	r1, [r7, #0]
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f000 fa11 	bl	8012760 <USBD_CtlError>
        err++;
 801233e:	7afb      	ldrb	r3, [r7, #11]
 8012340:	3301      	adds	r3, #1
 8012342:	72fb      	strb	r3, [r7, #11]
      break;
 8012344:	e021      	b.n	801238a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	7c1b      	ldrb	r3, [r3, #16]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d10d      	bne.n	801236a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012356:	f107 0208 	add.w	r2, r7, #8
 801235a:	4610      	mov	r0, r2
 801235c:	4798      	blx	r3
 801235e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	3301      	adds	r3, #1
 8012364:	2207      	movs	r2, #7
 8012366:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012368:	e00f      	b.n	801238a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801236a:	6839      	ldr	r1, [r7, #0]
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f000 f9f7 	bl	8012760 <USBD_CtlError>
        err++;
 8012372:	7afb      	ldrb	r3, [r7, #11]
 8012374:	3301      	adds	r3, #1
 8012376:	72fb      	strb	r3, [r7, #11]
      break;
 8012378:	e007      	b.n	801238a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801237a:	6839      	ldr	r1, [r7, #0]
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f000 f9ef 	bl	8012760 <USBD_CtlError>
      err++;
 8012382:	7afb      	ldrb	r3, [r7, #11]
 8012384:	3301      	adds	r3, #1
 8012386:	72fb      	strb	r3, [r7, #11]
      break;
 8012388:	bf00      	nop
  }

  if (err != 0U)
 801238a:	7afb      	ldrb	r3, [r7, #11]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d11e      	bne.n	80123ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	88db      	ldrh	r3, [r3, #6]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d016      	beq.n	80123c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012398:	893b      	ldrh	r3, [r7, #8]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d00e      	beq.n	80123bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	88da      	ldrh	r2, [r3, #6]
 80123a2:	893b      	ldrh	r3, [r7, #8]
 80123a4:	4293      	cmp	r3, r2
 80123a6:	bf28      	it	cs
 80123a8:	4613      	movcs	r3, r2
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80123ae:	893b      	ldrh	r3, [r7, #8]
 80123b0:	461a      	mov	r2, r3
 80123b2:	68f9      	ldr	r1, [r7, #12]
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f000 fa44 	bl	8012842 <USBD_CtlSendData>
 80123ba:	e009      	b.n	80123d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80123bc:	6839      	ldr	r1, [r7, #0]
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f000 f9ce 	bl	8012760 <USBD_CtlError>
 80123c4:	e004      	b.n	80123d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f000 fa95 	bl	80128f6 <USBD_CtlSendStatus>
 80123cc:	e000      	b.n	80123d0 <USBD_GetDescriptor+0x2cc>
    return;
 80123ce:	bf00      	nop
  }
}
 80123d0:	3710      	adds	r7, #16
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop

080123d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	889b      	ldrh	r3, [r3, #4]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d131      	bne.n	801244e <USBD_SetAddress+0x76>
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	88db      	ldrh	r3, [r3, #6]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d12d      	bne.n	801244e <USBD_SetAddress+0x76>
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	885b      	ldrh	r3, [r3, #2]
 80123f6:	2b7f      	cmp	r3, #127	; 0x7f
 80123f8:	d829      	bhi.n	801244e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	885b      	ldrh	r3, [r3, #2]
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012404:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801240c:	b2db      	uxtb	r3, r3
 801240e:	2b03      	cmp	r3, #3
 8012410:	d104      	bne.n	801241c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012412:	6839      	ldr	r1, [r7, #0]
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 f9a3 	bl	8012760 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801241a:	e01d      	b.n	8012458 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	7bfa      	ldrb	r2, [r7, #15]
 8012420:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012424:	7bfb      	ldrb	r3, [r7, #15]
 8012426:	4619      	mov	r1, r3
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f003 fec3 	bl	80161b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f000 fa61 	bl	80128f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012434:	7bfb      	ldrb	r3, [r7, #15]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d004      	beq.n	8012444 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2202      	movs	r2, #2
 801243e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012442:	e009      	b.n	8012458 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2201      	movs	r2, #1
 8012448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801244c:	e004      	b.n	8012458 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801244e:	6839      	ldr	r1, [r7, #0]
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f000 f985 	bl	8012760 <USBD_CtlError>
  }
}
 8012456:	bf00      	nop
 8012458:	bf00      	nop
 801245a:	3710      	adds	r7, #16
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}

08012460 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b084      	sub	sp, #16
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801246a:	2300      	movs	r3, #0
 801246c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	885b      	ldrh	r3, [r3, #2]
 8012472:	b2da      	uxtb	r2, r3
 8012474:	4b4c      	ldr	r3, [pc, #304]	; (80125a8 <USBD_SetConfig+0x148>)
 8012476:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012478:	4b4b      	ldr	r3, [pc, #300]	; (80125a8 <USBD_SetConfig+0x148>)
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	2b01      	cmp	r3, #1
 801247e:	d905      	bls.n	801248c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012480:	6839      	ldr	r1, [r7, #0]
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f000 f96c 	bl	8012760 <USBD_CtlError>
    return USBD_FAIL;
 8012488:	2303      	movs	r3, #3
 801248a:	e088      	b.n	801259e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012492:	b2db      	uxtb	r3, r3
 8012494:	2b02      	cmp	r3, #2
 8012496:	d002      	beq.n	801249e <USBD_SetConfig+0x3e>
 8012498:	2b03      	cmp	r3, #3
 801249a:	d025      	beq.n	80124e8 <USBD_SetConfig+0x88>
 801249c:	e071      	b.n	8012582 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801249e:	4b42      	ldr	r3, [pc, #264]	; (80125a8 <USBD_SetConfig+0x148>)
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d01c      	beq.n	80124e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80124a6:	4b40      	ldr	r3, [pc, #256]	; (80125a8 <USBD_SetConfig+0x148>)
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	461a      	mov	r2, r3
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80124b0:	4b3d      	ldr	r3, [pc, #244]	; (80125a8 <USBD_SetConfig+0x148>)
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	4619      	mov	r1, r3
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f7ff f948 	bl	801174c <USBD_SetClassConfig>
 80124bc:	4603      	mov	r3, r0
 80124be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80124c0:	7bfb      	ldrb	r3, [r7, #15]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d004      	beq.n	80124d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80124c6:	6839      	ldr	r1, [r7, #0]
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f000 f949 	bl	8012760 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80124ce:	e065      	b.n	801259c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 fa10 	bl	80128f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2203      	movs	r2, #3
 80124da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80124de:	e05d      	b.n	801259c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f000 fa08 	bl	80128f6 <USBD_CtlSendStatus>
      break;
 80124e6:	e059      	b.n	801259c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80124e8:	4b2f      	ldr	r3, [pc, #188]	; (80125a8 <USBD_SetConfig+0x148>)
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d112      	bne.n	8012516 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2202      	movs	r2, #2
 80124f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80124f8:	4b2b      	ldr	r3, [pc, #172]	; (80125a8 <USBD_SetConfig+0x148>)
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	461a      	mov	r2, r3
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012502:	4b29      	ldr	r3, [pc, #164]	; (80125a8 <USBD_SetConfig+0x148>)
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	4619      	mov	r1, r3
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f7ff f93b 	bl	8011784 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f000 f9f1 	bl	80128f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012514:	e042      	b.n	801259c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012516:	4b24      	ldr	r3, [pc, #144]	; (80125a8 <USBD_SetConfig+0x148>)
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	461a      	mov	r2, r3
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	685b      	ldr	r3, [r3, #4]
 8012520:	429a      	cmp	r2, r3
 8012522:	d02a      	beq.n	801257a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	b2db      	uxtb	r3, r3
 801252a:	4619      	mov	r1, r3
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f7ff f929 	bl	8011784 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012532:	4b1d      	ldr	r3, [pc, #116]	; (80125a8 <USBD_SetConfig+0x148>)
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	461a      	mov	r2, r3
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801253c:	4b1a      	ldr	r3, [pc, #104]	; (80125a8 <USBD_SetConfig+0x148>)
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	4619      	mov	r1, r3
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f7ff f902 	bl	801174c <USBD_SetClassConfig>
 8012548:	4603      	mov	r3, r0
 801254a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801254c:	7bfb      	ldrb	r3, [r7, #15]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d00f      	beq.n	8012572 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012552:	6839      	ldr	r1, [r7, #0]
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f000 f903 	bl	8012760 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	b2db      	uxtb	r3, r3
 8012560:	4619      	mov	r1, r3
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f7ff f90e 	bl	8011784 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2202      	movs	r2, #2
 801256c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012570:	e014      	b.n	801259c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f000 f9bf 	bl	80128f6 <USBD_CtlSendStatus>
      break;
 8012578:	e010      	b.n	801259c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 f9bb 	bl	80128f6 <USBD_CtlSendStatus>
      break;
 8012580:	e00c      	b.n	801259c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012582:	6839      	ldr	r1, [r7, #0]
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f000 f8eb 	bl	8012760 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801258a:	4b07      	ldr	r3, [pc, #28]	; (80125a8 <USBD_SetConfig+0x148>)
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	4619      	mov	r1, r3
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f7ff f8f7 	bl	8011784 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012596:	2303      	movs	r3, #3
 8012598:	73fb      	strb	r3, [r7, #15]
      break;
 801259a:	bf00      	nop
  }

  return ret;
 801259c:	7bfb      	ldrb	r3, [r7, #15]
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3710      	adds	r7, #16
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	2000132c 	.word	0x2000132c

080125ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b082      	sub	sp, #8
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	88db      	ldrh	r3, [r3, #6]
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	d004      	beq.n	80125c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80125be:	6839      	ldr	r1, [r7, #0]
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f000 f8cd 	bl	8012760 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80125c6:	e023      	b.n	8012610 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	2b02      	cmp	r3, #2
 80125d2:	dc02      	bgt.n	80125da <USBD_GetConfig+0x2e>
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	dc03      	bgt.n	80125e0 <USBD_GetConfig+0x34>
 80125d8:	e015      	b.n	8012606 <USBD_GetConfig+0x5a>
 80125da:	2b03      	cmp	r3, #3
 80125dc:	d00b      	beq.n	80125f6 <USBD_GetConfig+0x4a>
 80125de:	e012      	b.n	8012606 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2200      	movs	r2, #0
 80125e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	3308      	adds	r3, #8
 80125ea:	2201      	movs	r2, #1
 80125ec:	4619      	mov	r1, r3
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f000 f927 	bl	8012842 <USBD_CtlSendData>
        break;
 80125f4:	e00c      	b.n	8012610 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	3304      	adds	r3, #4
 80125fa:	2201      	movs	r2, #1
 80125fc:	4619      	mov	r1, r3
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f000 f91f 	bl	8012842 <USBD_CtlSendData>
        break;
 8012604:	e004      	b.n	8012610 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012606:	6839      	ldr	r1, [r7, #0]
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f000 f8a9 	bl	8012760 <USBD_CtlError>
        break;
 801260e:	bf00      	nop
}
 8012610:	bf00      	nop
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012628:	b2db      	uxtb	r3, r3
 801262a:	3b01      	subs	r3, #1
 801262c:	2b02      	cmp	r3, #2
 801262e:	d81e      	bhi.n	801266e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	88db      	ldrh	r3, [r3, #6]
 8012634:	2b02      	cmp	r3, #2
 8012636:	d004      	beq.n	8012642 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012638:	6839      	ldr	r1, [r7, #0]
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f000 f890 	bl	8012760 <USBD_CtlError>
        break;
 8012640:	e01a      	b.n	8012678 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2201      	movs	r2, #1
 8012646:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801264e:	2b00      	cmp	r3, #0
 8012650:	d005      	beq.n	801265e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	68db      	ldr	r3, [r3, #12]
 8012656:	f043 0202 	orr.w	r2, r3, #2
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	330c      	adds	r3, #12
 8012662:	2202      	movs	r2, #2
 8012664:	4619      	mov	r1, r3
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f000 f8eb 	bl	8012842 <USBD_CtlSendData>
      break;
 801266c:	e004      	b.n	8012678 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801266e:	6839      	ldr	r1, [r7, #0]
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f000 f875 	bl	8012760 <USBD_CtlError>
      break;
 8012676:	bf00      	nop
  }
}
 8012678:	bf00      	nop
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	885b      	ldrh	r3, [r3, #2]
 801268e:	2b01      	cmp	r3, #1
 8012690:	d106      	bne.n	80126a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2201      	movs	r2, #1
 8012696:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f000 f92b 	bl	80128f6 <USBD_CtlSendStatus>
  }
}
 80126a0:	bf00      	nop
 80126a2:	3708      	adds	r7, #8
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}

080126a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	3b01      	subs	r3, #1
 80126bc:	2b02      	cmp	r3, #2
 80126be:	d80b      	bhi.n	80126d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	885b      	ldrh	r3, [r3, #2]
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d10c      	bne.n	80126e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	2200      	movs	r2, #0
 80126cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 f910 	bl	80128f6 <USBD_CtlSendStatus>
      }
      break;
 80126d6:	e004      	b.n	80126e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80126d8:	6839      	ldr	r1, [r7, #0]
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 f840 	bl	8012760 <USBD_CtlError>
      break;
 80126e0:	e000      	b.n	80126e4 <USBD_ClrFeature+0x3c>
      break;
 80126e2:	bf00      	nop
  }
}
 80126e4:	bf00      	nop
 80126e6:	3708      	adds	r7, #8
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}

080126ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	781a      	ldrb	r2, [r3, #0]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	3301      	adds	r3, #1
 8012706:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	781a      	ldrb	r2, [r3, #0]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	3301      	adds	r3, #1
 8012714:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012716:	68f8      	ldr	r0, [r7, #12]
 8012718:	f7ff fabb 	bl	8011c92 <SWAPBYTE>
 801271c:	4603      	mov	r3, r0
 801271e:	461a      	mov	r2, r3
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	3301      	adds	r3, #1
 8012728:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	3301      	adds	r3, #1
 801272e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012730:	68f8      	ldr	r0, [r7, #12]
 8012732:	f7ff faae 	bl	8011c92 <SWAPBYTE>
 8012736:	4603      	mov	r3, r0
 8012738:	461a      	mov	r2, r3
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	3301      	adds	r3, #1
 8012742:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	3301      	adds	r3, #1
 8012748:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801274a:	68f8      	ldr	r0, [r7, #12]
 801274c:	f7ff faa1 	bl	8011c92 <SWAPBYTE>
 8012750:	4603      	mov	r3, r0
 8012752:	461a      	mov	r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	80da      	strh	r2, [r3, #6]
}
 8012758:	bf00      	nop
 801275a:	3710      	adds	r7, #16
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801276a:	2180      	movs	r1, #128	; 0x80
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f003 fc89 	bl	8016084 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012772:	2100      	movs	r1, #0
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f003 fc85 	bl	8016084 <USBD_LL_StallEP>
}
 801277a:	bf00      	nop
 801277c:	3708      	adds	r7, #8
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}

08012782 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012782:	b580      	push	{r7, lr}
 8012784:	b086      	sub	sp, #24
 8012786:	af00      	add	r7, sp, #0
 8012788:	60f8      	str	r0, [r7, #12]
 801278a:	60b9      	str	r1, [r7, #8]
 801278c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801278e:	2300      	movs	r3, #0
 8012790:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d036      	beq.n	8012806 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801279c:	6938      	ldr	r0, [r7, #16]
 801279e:	f000 f836 	bl	801280e <USBD_GetLen>
 80127a2:	4603      	mov	r3, r0
 80127a4:	3301      	adds	r3, #1
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	005b      	lsls	r3, r3, #1
 80127aa:	b29a      	uxth	r2, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80127b0:	7dfb      	ldrb	r3, [r7, #23]
 80127b2:	68ba      	ldr	r2, [r7, #8]
 80127b4:	4413      	add	r3, r2
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	7812      	ldrb	r2, [r2, #0]
 80127ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80127bc:	7dfb      	ldrb	r3, [r7, #23]
 80127be:	3301      	adds	r3, #1
 80127c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80127c2:	7dfb      	ldrb	r3, [r7, #23]
 80127c4:	68ba      	ldr	r2, [r7, #8]
 80127c6:	4413      	add	r3, r2
 80127c8:	2203      	movs	r2, #3
 80127ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80127cc:	7dfb      	ldrb	r3, [r7, #23]
 80127ce:	3301      	adds	r3, #1
 80127d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80127d2:	e013      	b.n	80127fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80127d4:	7dfb      	ldrb	r3, [r7, #23]
 80127d6:	68ba      	ldr	r2, [r7, #8]
 80127d8:	4413      	add	r3, r2
 80127da:	693a      	ldr	r2, [r7, #16]
 80127dc:	7812      	ldrb	r2, [r2, #0]
 80127de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	3301      	adds	r3, #1
 80127e4:	613b      	str	r3, [r7, #16]
    idx++;
 80127e6:	7dfb      	ldrb	r3, [r7, #23]
 80127e8:	3301      	adds	r3, #1
 80127ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80127ec:	7dfb      	ldrb	r3, [r7, #23]
 80127ee:	68ba      	ldr	r2, [r7, #8]
 80127f0:	4413      	add	r3, r2
 80127f2:	2200      	movs	r2, #0
 80127f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80127f6:	7dfb      	ldrb	r3, [r7, #23]
 80127f8:	3301      	adds	r3, #1
 80127fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d1e7      	bne.n	80127d4 <USBD_GetString+0x52>
 8012804:	e000      	b.n	8012808 <USBD_GetString+0x86>
    return;
 8012806:	bf00      	nop
  }
}
 8012808:	3718      	adds	r7, #24
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}

0801280e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801280e:	b480      	push	{r7}
 8012810:	b085      	sub	sp, #20
 8012812:	af00      	add	r7, sp, #0
 8012814:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012816:	2300      	movs	r3, #0
 8012818:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801281e:	e005      	b.n	801282c <USBD_GetLen+0x1e>
  {
    len++;
 8012820:	7bfb      	ldrb	r3, [r7, #15]
 8012822:	3301      	adds	r3, #1
 8012824:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	3301      	adds	r3, #1
 801282a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d1f5      	bne.n	8012820 <USBD_GetLen+0x12>
  }

  return len;
 8012834:	7bfb      	ldrb	r3, [r7, #15]
}
 8012836:	4618      	mov	r0, r3
 8012838:	3714      	adds	r7, #20
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr

08012842 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012842:	b580      	push	{r7, lr}
 8012844:	b084      	sub	sp, #16
 8012846:	af00      	add	r7, sp, #0
 8012848:	60f8      	str	r0, [r7, #12]
 801284a:	60b9      	str	r1, [r7, #8]
 801284c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2202      	movs	r2, #2
 8012852:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	68ba      	ldr	r2, [r7, #8]
 8012866:	2100      	movs	r1, #0
 8012868:	68f8      	ldr	r0, [r7, #12]
 801286a:	f003 fcd9 	bl	8016220 <USBD_LL_Transmit>

  return USBD_OK;
 801286e:	2300      	movs	r3, #0
}
 8012870:	4618      	mov	r0, r3
 8012872:	3710      	adds	r7, #16
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}

08012878 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b084      	sub	sp, #16
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	68ba      	ldr	r2, [r7, #8]
 8012888:	2100      	movs	r1, #0
 801288a:	68f8      	ldr	r0, [r7, #12]
 801288c:	f003 fcc8 	bl	8016220 <USBD_LL_Transmit>

  return USBD_OK;
 8012890:	2300      	movs	r3, #0
}
 8012892:	4618      	mov	r0, r3
 8012894:	3710      	adds	r7, #16
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}

0801289a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801289a:	b580      	push	{r7, lr}
 801289c:	b084      	sub	sp, #16
 801289e:	af00      	add	r7, sp, #0
 80128a0:	60f8      	str	r0, [r7, #12]
 80128a2:	60b9      	str	r1, [r7, #8]
 80128a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	2203      	movs	r2, #3
 80128aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	687a      	ldr	r2, [r7, #4]
 80128b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	687a      	ldr	r2, [r7, #4]
 80128ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	68ba      	ldr	r2, [r7, #8]
 80128c2:	2100      	movs	r1, #0
 80128c4:	68f8      	ldr	r0, [r7, #12]
 80128c6:	f003 fce3 	bl	8016290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80128ca:	2300      	movs	r3, #0
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3710      	adds	r7, #16
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	af00      	add	r7, sp, #0
 80128da:	60f8      	str	r0, [r7, #12]
 80128dc:	60b9      	str	r1, [r7, #8]
 80128de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	68ba      	ldr	r2, [r7, #8]
 80128e4:	2100      	movs	r1, #0
 80128e6:	68f8      	ldr	r0, [r7, #12]
 80128e8:	f003 fcd2 	bl	8016290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80128ec:	2300      	movs	r3, #0
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3710      	adds	r7, #16
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}

080128f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80128f6:	b580      	push	{r7, lr}
 80128f8:	b082      	sub	sp, #8
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2204      	movs	r2, #4
 8012902:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012906:	2300      	movs	r3, #0
 8012908:	2200      	movs	r2, #0
 801290a:	2100      	movs	r1, #0
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f003 fc87 	bl	8016220 <USBD_LL_Transmit>

  return USBD_OK;
 8012912:	2300      	movs	r3, #0
}
 8012914:	4618      	mov	r0, r3
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2205      	movs	r2, #5
 8012928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801292c:	2300      	movs	r3, #0
 801292e:	2200      	movs	r2, #0
 8012930:	2100      	movs	r1, #0
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f003 fcac 	bl	8016290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012938:	2300      	movs	r3, #0
}
 801293a:	4618      	mov	r0, r3
 801293c:	3708      	adds	r7, #8
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}
	...

08012944 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b084      	sub	sp, #16
 8012948:	af00      	add	r7, sp, #0
 801294a:	4603      	mov	r3, r0
 801294c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801294e:	79fb      	ldrb	r3, [r7, #7]
 8012950:	4a08      	ldr	r2, [pc, #32]	; (8012974 <disk_status+0x30>)
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	4413      	add	r3, r2
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	79fa      	ldrb	r2, [r7, #7]
 801295c:	4905      	ldr	r1, [pc, #20]	; (8012974 <disk_status+0x30>)
 801295e:	440a      	add	r2, r1
 8012960:	7a12      	ldrb	r2, [r2, #8]
 8012962:	4610      	mov	r0, r2
 8012964:	4798      	blx	r3
 8012966:	4603      	mov	r3, r0
 8012968:	73fb      	strb	r3, [r7, #15]
  return stat;
 801296a:	7bfb      	ldrb	r3, [r7, #15]
}
 801296c:	4618      	mov	r0, r3
 801296e:	3710      	adds	r7, #16
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}
 8012974:	20001358 	.word	0x20001358

08012978 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b084      	sub	sp, #16
 801297c:	af00      	add	r7, sp, #0
 801297e:	4603      	mov	r3, r0
 8012980:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012982:	2300      	movs	r3, #0
 8012984:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012986:	79fb      	ldrb	r3, [r7, #7]
 8012988:	4a0d      	ldr	r2, [pc, #52]	; (80129c0 <disk_initialize+0x48>)
 801298a:	5cd3      	ldrb	r3, [r2, r3]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d111      	bne.n	80129b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012990:	79fb      	ldrb	r3, [r7, #7]
 8012992:	4a0b      	ldr	r2, [pc, #44]	; (80129c0 <disk_initialize+0x48>)
 8012994:	2101      	movs	r1, #1
 8012996:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012998:	79fb      	ldrb	r3, [r7, #7]
 801299a:	4a09      	ldr	r2, [pc, #36]	; (80129c0 <disk_initialize+0x48>)
 801299c:	009b      	lsls	r3, r3, #2
 801299e:	4413      	add	r3, r2
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	79fa      	ldrb	r2, [r7, #7]
 80129a6:	4906      	ldr	r1, [pc, #24]	; (80129c0 <disk_initialize+0x48>)
 80129a8:	440a      	add	r2, r1
 80129aa:	7a12      	ldrb	r2, [r2, #8]
 80129ac:	4610      	mov	r0, r2
 80129ae:	4798      	blx	r3
 80129b0:	4603      	mov	r3, r0
 80129b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80129b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	bf00      	nop
 80129c0:	20001358 	.word	0x20001358

080129c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80129c4:	b590      	push	{r4, r7, lr}
 80129c6:	b087      	sub	sp, #28
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60b9      	str	r1, [r7, #8]
 80129cc:	607a      	str	r2, [r7, #4]
 80129ce:	603b      	str	r3, [r7, #0]
 80129d0:	4603      	mov	r3, r0
 80129d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80129d4:	7bfb      	ldrb	r3, [r7, #15]
 80129d6:	4a0a      	ldr	r2, [pc, #40]	; (8012a00 <disk_read+0x3c>)
 80129d8:	009b      	lsls	r3, r3, #2
 80129da:	4413      	add	r3, r2
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	689c      	ldr	r4, [r3, #8]
 80129e0:	7bfb      	ldrb	r3, [r7, #15]
 80129e2:	4a07      	ldr	r2, [pc, #28]	; (8012a00 <disk_read+0x3c>)
 80129e4:	4413      	add	r3, r2
 80129e6:	7a18      	ldrb	r0, [r3, #8]
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	687a      	ldr	r2, [r7, #4]
 80129ec:	68b9      	ldr	r1, [r7, #8]
 80129ee:	47a0      	blx	r4
 80129f0:	4603      	mov	r3, r0
 80129f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80129f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	371c      	adds	r7, #28
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd90      	pop	{r4, r7, pc}
 80129fe:	bf00      	nop
 8012a00:	20001358 	.word	0x20001358

08012a04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012a04:	b590      	push	{r4, r7, lr}
 8012a06:	b087      	sub	sp, #28
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	60b9      	str	r1, [r7, #8]
 8012a0c:	607a      	str	r2, [r7, #4]
 8012a0e:	603b      	str	r3, [r7, #0]
 8012a10:	4603      	mov	r3, r0
 8012a12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012a14:	7bfb      	ldrb	r3, [r7, #15]
 8012a16:	4a0a      	ldr	r2, [pc, #40]	; (8012a40 <disk_write+0x3c>)
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	4413      	add	r3, r2
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	68dc      	ldr	r4, [r3, #12]
 8012a20:	7bfb      	ldrb	r3, [r7, #15]
 8012a22:	4a07      	ldr	r2, [pc, #28]	; (8012a40 <disk_write+0x3c>)
 8012a24:	4413      	add	r3, r2
 8012a26:	7a18      	ldrb	r0, [r3, #8]
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	687a      	ldr	r2, [r7, #4]
 8012a2c:	68b9      	ldr	r1, [r7, #8]
 8012a2e:	47a0      	blx	r4
 8012a30:	4603      	mov	r3, r0
 8012a32:	75fb      	strb	r3, [r7, #23]
  return res;
 8012a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	371c      	adds	r7, #28
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd90      	pop	{r4, r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	20001358 	.word	0x20001358

08012a44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	603a      	str	r2, [r7, #0]
 8012a4e:	71fb      	strb	r3, [r7, #7]
 8012a50:	460b      	mov	r3, r1
 8012a52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012a54:	79fb      	ldrb	r3, [r7, #7]
 8012a56:	4a09      	ldr	r2, [pc, #36]	; (8012a7c <disk_ioctl+0x38>)
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	4413      	add	r3, r2
 8012a5c:	685b      	ldr	r3, [r3, #4]
 8012a5e:	691b      	ldr	r3, [r3, #16]
 8012a60:	79fa      	ldrb	r2, [r7, #7]
 8012a62:	4906      	ldr	r1, [pc, #24]	; (8012a7c <disk_ioctl+0x38>)
 8012a64:	440a      	add	r2, r1
 8012a66:	7a10      	ldrb	r0, [r2, #8]
 8012a68:	79b9      	ldrb	r1, [r7, #6]
 8012a6a:	683a      	ldr	r2, [r7, #0]
 8012a6c:	4798      	blx	r3
 8012a6e:	4603      	mov	r3, r0
 8012a70:	73fb      	strb	r3, [r7, #15]
  return res;
 8012a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a74:	4618      	mov	r0, r3
 8012a76:	3710      	adds	r7, #16
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}
 8012a7c:	20001358 	.word	0x20001358

08012a80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012a80:	b480      	push	{r7}
 8012a82:	b085      	sub	sp, #20
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012a90:	89fb      	ldrh	r3, [r7, #14]
 8012a92:	021b      	lsls	r3, r3, #8
 8012a94:	b21a      	sxth	r2, r3
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	b21b      	sxth	r3, r3
 8012a9c:	4313      	orrs	r3, r2
 8012a9e:	b21b      	sxth	r3, r3
 8012aa0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012aa2:	89fb      	ldrh	r3, [r7, #14]
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	3714      	adds	r7, #20
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr

08012ab0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b085      	sub	sp, #20
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	3303      	adds	r3, #3
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	021b      	lsls	r3, r3, #8
 8012ac4:	687a      	ldr	r2, [r7, #4]
 8012ac6:	3202      	adds	r2, #2
 8012ac8:	7812      	ldrb	r2, [r2, #0]
 8012aca:	4313      	orrs	r3, r2
 8012acc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	021b      	lsls	r3, r3, #8
 8012ad2:	687a      	ldr	r2, [r7, #4]
 8012ad4:	3201      	adds	r2, #1
 8012ad6:	7812      	ldrb	r2, [r2, #0]
 8012ad8:	4313      	orrs	r3, r2
 8012ada:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	021b      	lsls	r3, r3, #8
 8012ae0:	687a      	ldr	r2, [r7, #4]
 8012ae2:	7812      	ldrb	r2, [r2, #0]
 8012ae4:	4313      	orrs	r3, r2
 8012ae6:	60fb      	str	r3, [r7, #12]
	return rv;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	3714      	adds	r7, #20
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr

08012af6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012af6:	b480      	push	{r7}
 8012af8:	b083      	sub	sp, #12
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
 8012afe:	460b      	mov	r3, r1
 8012b00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	1c5a      	adds	r2, r3, #1
 8012b06:	607a      	str	r2, [r7, #4]
 8012b08:	887a      	ldrh	r2, [r7, #2]
 8012b0a:	b2d2      	uxtb	r2, r2
 8012b0c:	701a      	strb	r2, [r3, #0]
 8012b0e:	887b      	ldrh	r3, [r7, #2]
 8012b10:	0a1b      	lsrs	r3, r3, #8
 8012b12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	1c5a      	adds	r2, r3, #1
 8012b18:	607a      	str	r2, [r7, #4]
 8012b1a:	887a      	ldrh	r2, [r7, #2]
 8012b1c:	b2d2      	uxtb	r2, r2
 8012b1e:	701a      	strb	r2, [r3, #0]
}
 8012b20:	bf00      	nop
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr

08012b2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	1c5a      	adds	r2, r3, #1
 8012b3a:	607a      	str	r2, [r7, #4]
 8012b3c:	683a      	ldr	r2, [r7, #0]
 8012b3e:	b2d2      	uxtb	r2, r2
 8012b40:	701a      	strb	r2, [r3, #0]
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	0a1b      	lsrs	r3, r3, #8
 8012b46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	1c5a      	adds	r2, r3, #1
 8012b4c:	607a      	str	r2, [r7, #4]
 8012b4e:	683a      	ldr	r2, [r7, #0]
 8012b50:	b2d2      	uxtb	r2, r2
 8012b52:	701a      	strb	r2, [r3, #0]
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	0a1b      	lsrs	r3, r3, #8
 8012b58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	1c5a      	adds	r2, r3, #1
 8012b5e:	607a      	str	r2, [r7, #4]
 8012b60:	683a      	ldr	r2, [r7, #0]
 8012b62:	b2d2      	uxtb	r2, r2
 8012b64:	701a      	strb	r2, [r3, #0]
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	0a1b      	lsrs	r3, r3, #8
 8012b6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	1c5a      	adds	r2, r3, #1
 8012b70:	607a      	str	r2, [r7, #4]
 8012b72:	683a      	ldr	r2, [r7, #0]
 8012b74:	b2d2      	uxtb	r2, r2
 8012b76:	701a      	strb	r2, [r3, #0]
}
 8012b78:	bf00      	nop
 8012b7a:	370c      	adds	r7, #12
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr

08012b84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012b84:	b480      	push	{r7}
 8012b86:	b087      	sub	sp, #28
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	60f8      	str	r0, [r7, #12]
 8012b8c:	60b9      	str	r1, [r7, #8]
 8012b8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d00d      	beq.n	8012bba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012b9e:	693a      	ldr	r2, [r7, #16]
 8012ba0:	1c53      	adds	r3, r2, #1
 8012ba2:	613b      	str	r3, [r7, #16]
 8012ba4:	697b      	ldr	r3, [r7, #20]
 8012ba6:	1c59      	adds	r1, r3, #1
 8012ba8:	6179      	str	r1, [r7, #20]
 8012baa:	7812      	ldrb	r2, [r2, #0]
 8012bac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	3b01      	subs	r3, #1
 8012bb2:	607b      	str	r3, [r7, #4]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d1f1      	bne.n	8012b9e <mem_cpy+0x1a>
	}
}
 8012bba:	bf00      	nop
 8012bbc:	371c      	adds	r7, #28
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr

08012bc6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012bc6:	b480      	push	{r7}
 8012bc8:	b087      	sub	sp, #28
 8012bca:	af00      	add	r7, sp, #0
 8012bcc:	60f8      	str	r0, [r7, #12]
 8012bce:	60b9      	str	r1, [r7, #8]
 8012bd0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	1c5a      	adds	r2, r3, #1
 8012bda:	617a      	str	r2, [r7, #20]
 8012bdc:	68ba      	ldr	r2, [r7, #8]
 8012bde:	b2d2      	uxtb	r2, r2
 8012be0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	3b01      	subs	r3, #1
 8012be6:	607b      	str	r3, [r7, #4]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d1f3      	bne.n	8012bd6 <mem_set+0x10>
}
 8012bee:	bf00      	nop
 8012bf0:	bf00      	nop
 8012bf2:	371c      	adds	r7, #28
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfa:	4770      	bx	lr

08012bfc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012bfc:	b480      	push	{r7}
 8012bfe:	b089      	sub	sp, #36	; 0x24
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	60b9      	str	r1, [r7, #8]
 8012c06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	61fb      	str	r3, [r7, #28]
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012c10:	2300      	movs	r3, #0
 8012c12:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	1c5a      	adds	r2, r3, #1
 8012c18:	61fa      	str	r2, [r7, #28]
 8012c1a:	781b      	ldrb	r3, [r3, #0]
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	69bb      	ldr	r3, [r7, #24]
 8012c20:	1c5a      	adds	r2, r3, #1
 8012c22:	61ba      	str	r2, [r7, #24]
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	1acb      	subs	r3, r1, r3
 8012c28:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	3b01      	subs	r3, #1
 8012c2e:	607b      	str	r3, [r7, #4]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d002      	beq.n	8012c3c <mem_cmp+0x40>
 8012c36:	697b      	ldr	r3, [r7, #20]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d0eb      	beq.n	8012c14 <mem_cmp+0x18>

	return r;
 8012c3c:	697b      	ldr	r3, [r7, #20]
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3724      	adds	r7, #36	; 0x24
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr

08012c4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012c4a:	b480      	push	{r7}
 8012c4c:	b083      	sub	sp, #12
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
 8012c52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012c54:	e002      	b.n	8012c5c <chk_chr+0x12>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	3301      	adds	r3, #1
 8012c5a:	607b      	str	r3, [r7, #4]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d005      	beq.n	8012c70 <chk_chr+0x26>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	461a      	mov	r2, r3
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	4293      	cmp	r3, r2
 8012c6e:	d1f2      	bne.n	8012c56 <chk_chr+0xc>
	return *str;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	781b      	ldrb	r3, [r3, #0]
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	370c      	adds	r7, #12
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr

08012c80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012c80:	b480      	push	{r7}
 8012c82:	b085      	sub	sp, #20
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	60bb      	str	r3, [r7, #8]
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	60fb      	str	r3, [r7, #12]
 8012c92:	e029      	b.n	8012ce8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012c94:	4a27      	ldr	r2, [pc, #156]	; (8012d34 <chk_lock+0xb4>)
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	011b      	lsls	r3, r3, #4
 8012c9a:	4413      	add	r3, r2
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d01d      	beq.n	8012cde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012ca2:	4a24      	ldr	r2, [pc, #144]	; (8012d34 <chk_lock+0xb4>)
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	011b      	lsls	r3, r3, #4
 8012ca8:	4413      	add	r3, r2
 8012caa:	681a      	ldr	r2, [r3, #0]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d116      	bne.n	8012ce2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012cb4:	4a1f      	ldr	r2, [pc, #124]	; (8012d34 <chk_lock+0xb4>)
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	011b      	lsls	r3, r3, #4
 8012cba:	4413      	add	r3, r2
 8012cbc:	3304      	adds	r3, #4
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d10c      	bne.n	8012ce2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012cc8:	4a1a      	ldr	r2, [pc, #104]	; (8012d34 <chk_lock+0xb4>)
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	011b      	lsls	r3, r3, #4
 8012cce:	4413      	add	r3, r2
 8012cd0:	3308      	adds	r3, #8
 8012cd2:	681a      	ldr	r2, [r3, #0]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d102      	bne.n	8012ce2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012cdc:	e007      	b.n	8012cee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012cde:	2301      	movs	r3, #1
 8012ce0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	60fb      	str	r3, [r7, #12]
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	2b01      	cmp	r3, #1
 8012cec:	d9d2      	bls.n	8012c94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	2b02      	cmp	r3, #2
 8012cf2:	d109      	bne.n	8012d08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d102      	bne.n	8012d00 <chk_lock+0x80>
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	2b02      	cmp	r3, #2
 8012cfe:	d101      	bne.n	8012d04 <chk_lock+0x84>
 8012d00:	2300      	movs	r3, #0
 8012d02:	e010      	b.n	8012d26 <chk_lock+0xa6>
 8012d04:	2312      	movs	r3, #18
 8012d06:	e00e      	b.n	8012d26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d108      	bne.n	8012d20 <chk_lock+0xa0>
 8012d0e:	4a09      	ldr	r2, [pc, #36]	; (8012d34 <chk_lock+0xb4>)
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	011b      	lsls	r3, r3, #4
 8012d14:	4413      	add	r3, r2
 8012d16:	330c      	adds	r3, #12
 8012d18:	881b      	ldrh	r3, [r3, #0]
 8012d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d1e:	d101      	bne.n	8012d24 <chk_lock+0xa4>
 8012d20:	2310      	movs	r3, #16
 8012d22:	e000      	b.n	8012d26 <chk_lock+0xa6>
 8012d24:	2300      	movs	r3, #0
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3714      	adds	r7, #20
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d30:	4770      	bx	lr
 8012d32:	bf00      	nop
 8012d34:	20001338 	.word	0x20001338

08012d38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012d38:	b480      	push	{r7}
 8012d3a:	b083      	sub	sp, #12
 8012d3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	607b      	str	r3, [r7, #4]
 8012d42:	e002      	b.n	8012d4a <enq_lock+0x12>
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	3301      	adds	r3, #1
 8012d48:	607b      	str	r3, [r7, #4]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2b01      	cmp	r3, #1
 8012d4e:	d806      	bhi.n	8012d5e <enq_lock+0x26>
 8012d50:	4a09      	ldr	r2, [pc, #36]	; (8012d78 <enq_lock+0x40>)
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	011b      	lsls	r3, r3, #4
 8012d56:	4413      	add	r3, r2
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d1f2      	bne.n	8012d44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2b02      	cmp	r3, #2
 8012d62:	bf14      	ite	ne
 8012d64:	2301      	movne	r3, #1
 8012d66:	2300      	moveq	r3, #0
 8012d68:	b2db      	uxtb	r3, r3
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	370c      	adds	r7, #12
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d74:	4770      	bx	lr
 8012d76:	bf00      	nop
 8012d78:	20001338 	.word	0x20001338

08012d7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	b085      	sub	sp, #20
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012d86:	2300      	movs	r3, #0
 8012d88:	60fb      	str	r3, [r7, #12]
 8012d8a:	e01f      	b.n	8012dcc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012d8c:	4a41      	ldr	r2, [pc, #260]	; (8012e94 <inc_lock+0x118>)
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	011b      	lsls	r3, r3, #4
 8012d92:	4413      	add	r3, r2
 8012d94:	681a      	ldr	r2, [r3, #0]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d113      	bne.n	8012dc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012d9e:	4a3d      	ldr	r2, [pc, #244]	; (8012e94 <inc_lock+0x118>)
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	011b      	lsls	r3, r3, #4
 8012da4:	4413      	add	r3, r2
 8012da6:	3304      	adds	r3, #4
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d109      	bne.n	8012dc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012db2:	4a38      	ldr	r2, [pc, #224]	; (8012e94 <inc_lock+0x118>)
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	011b      	lsls	r3, r3, #4
 8012db8:	4413      	add	r3, r2
 8012dba:	3308      	adds	r3, #8
 8012dbc:	681a      	ldr	r2, [r3, #0]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d006      	beq.n	8012dd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	3301      	adds	r3, #1
 8012dca:	60fb      	str	r3, [r7, #12]
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d9dc      	bls.n	8012d8c <inc_lock+0x10>
 8012dd2:	e000      	b.n	8012dd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012dd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	2b02      	cmp	r3, #2
 8012dda:	d132      	bne.n	8012e42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	60fb      	str	r3, [r7, #12]
 8012de0:	e002      	b.n	8012de8 <inc_lock+0x6c>
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	3301      	adds	r3, #1
 8012de6:	60fb      	str	r3, [r7, #12]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2b01      	cmp	r3, #1
 8012dec:	d806      	bhi.n	8012dfc <inc_lock+0x80>
 8012dee:	4a29      	ldr	r2, [pc, #164]	; (8012e94 <inc_lock+0x118>)
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	011b      	lsls	r3, r3, #4
 8012df4:	4413      	add	r3, r2
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d1f2      	bne.n	8012de2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2b02      	cmp	r3, #2
 8012e00:	d101      	bne.n	8012e06 <inc_lock+0x8a>
 8012e02:	2300      	movs	r3, #0
 8012e04:	e040      	b.n	8012e88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681a      	ldr	r2, [r3, #0]
 8012e0a:	4922      	ldr	r1, [pc, #136]	; (8012e94 <inc_lock+0x118>)
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	011b      	lsls	r3, r3, #4
 8012e10:	440b      	add	r3, r1
 8012e12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	689a      	ldr	r2, [r3, #8]
 8012e18:	491e      	ldr	r1, [pc, #120]	; (8012e94 <inc_lock+0x118>)
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	011b      	lsls	r3, r3, #4
 8012e1e:	440b      	add	r3, r1
 8012e20:	3304      	adds	r3, #4
 8012e22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	695a      	ldr	r2, [r3, #20]
 8012e28:	491a      	ldr	r1, [pc, #104]	; (8012e94 <inc_lock+0x118>)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	011b      	lsls	r3, r3, #4
 8012e2e:	440b      	add	r3, r1
 8012e30:	3308      	adds	r3, #8
 8012e32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012e34:	4a17      	ldr	r2, [pc, #92]	; (8012e94 <inc_lock+0x118>)
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	011b      	lsls	r3, r3, #4
 8012e3a:	4413      	add	r3, r2
 8012e3c:	330c      	adds	r3, #12
 8012e3e:	2200      	movs	r2, #0
 8012e40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d009      	beq.n	8012e5c <inc_lock+0xe0>
 8012e48:	4a12      	ldr	r2, [pc, #72]	; (8012e94 <inc_lock+0x118>)
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	011b      	lsls	r3, r3, #4
 8012e4e:	4413      	add	r3, r2
 8012e50:	330c      	adds	r3, #12
 8012e52:	881b      	ldrh	r3, [r3, #0]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d001      	beq.n	8012e5c <inc_lock+0xe0>
 8012e58:	2300      	movs	r3, #0
 8012e5a:	e015      	b.n	8012e88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d108      	bne.n	8012e74 <inc_lock+0xf8>
 8012e62:	4a0c      	ldr	r2, [pc, #48]	; (8012e94 <inc_lock+0x118>)
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	011b      	lsls	r3, r3, #4
 8012e68:	4413      	add	r3, r2
 8012e6a:	330c      	adds	r3, #12
 8012e6c:	881b      	ldrh	r3, [r3, #0]
 8012e6e:	3301      	adds	r3, #1
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	e001      	b.n	8012e78 <inc_lock+0xfc>
 8012e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012e78:	4906      	ldr	r1, [pc, #24]	; (8012e94 <inc_lock+0x118>)
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	011b      	lsls	r3, r3, #4
 8012e7e:	440b      	add	r3, r1
 8012e80:	330c      	adds	r3, #12
 8012e82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	3301      	adds	r3, #1
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3714      	adds	r7, #20
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e92:	4770      	bx	lr
 8012e94:	20001338 	.word	0x20001338

08012e98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b085      	sub	sp, #20
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	3b01      	subs	r3, #1
 8012ea4:	607b      	str	r3, [r7, #4]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d825      	bhi.n	8012ef8 <dec_lock+0x60>
		n = Files[i].ctr;
 8012eac:	4a17      	ldr	r2, [pc, #92]	; (8012f0c <dec_lock+0x74>)
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	011b      	lsls	r3, r3, #4
 8012eb2:	4413      	add	r3, r2
 8012eb4:	330c      	adds	r3, #12
 8012eb6:	881b      	ldrh	r3, [r3, #0]
 8012eb8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012eba:	89fb      	ldrh	r3, [r7, #14]
 8012ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ec0:	d101      	bne.n	8012ec6 <dec_lock+0x2e>
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012ec6:	89fb      	ldrh	r3, [r7, #14]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d002      	beq.n	8012ed2 <dec_lock+0x3a>
 8012ecc:	89fb      	ldrh	r3, [r7, #14]
 8012ece:	3b01      	subs	r3, #1
 8012ed0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012ed2:	4a0e      	ldr	r2, [pc, #56]	; (8012f0c <dec_lock+0x74>)
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	011b      	lsls	r3, r3, #4
 8012ed8:	4413      	add	r3, r2
 8012eda:	330c      	adds	r3, #12
 8012edc:	89fa      	ldrh	r2, [r7, #14]
 8012ede:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012ee0:	89fb      	ldrh	r3, [r7, #14]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d105      	bne.n	8012ef2 <dec_lock+0x5a>
 8012ee6:	4a09      	ldr	r2, [pc, #36]	; (8012f0c <dec_lock+0x74>)
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	011b      	lsls	r3, r3, #4
 8012eec:	4413      	add	r3, r2
 8012eee:	2200      	movs	r2, #0
 8012ef0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	737b      	strb	r3, [r7, #13]
 8012ef6:	e001      	b.n	8012efc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012ef8:	2302      	movs	r3, #2
 8012efa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012efc:	7b7b      	ldrb	r3, [r7, #13]
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	3714      	adds	r7, #20
 8012f02:	46bd      	mov	sp, r7
 8012f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f08:	4770      	bx	lr
 8012f0a:	bf00      	nop
 8012f0c:	20001338 	.word	0x20001338

08012f10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012f10:	b480      	push	{r7}
 8012f12:	b085      	sub	sp, #20
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012f18:	2300      	movs	r3, #0
 8012f1a:	60fb      	str	r3, [r7, #12]
 8012f1c:	e010      	b.n	8012f40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012f1e:	4a0d      	ldr	r2, [pc, #52]	; (8012f54 <clear_lock+0x44>)
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	011b      	lsls	r3, r3, #4
 8012f24:	4413      	add	r3, r2
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	687a      	ldr	r2, [r7, #4]
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d105      	bne.n	8012f3a <clear_lock+0x2a>
 8012f2e:	4a09      	ldr	r2, [pc, #36]	; (8012f54 <clear_lock+0x44>)
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	011b      	lsls	r3, r3, #4
 8012f34:	4413      	add	r3, r2
 8012f36:	2200      	movs	r2, #0
 8012f38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	3301      	adds	r3, #1
 8012f3e:	60fb      	str	r3, [r7, #12]
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	2b01      	cmp	r3, #1
 8012f44:	d9eb      	bls.n	8012f1e <clear_lock+0xe>
	}
}
 8012f46:	bf00      	nop
 8012f48:	bf00      	nop
 8012f4a:	3714      	adds	r7, #20
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr
 8012f54:	20001338 	.word	0x20001338

08012f58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b086      	sub	sp, #24
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012f60:	2300      	movs	r3, #0
 8012f62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	78db      	ldrb	r3, [r3, #3]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d034      	beq.n	8012fd6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	7858      	ldrb	r0, [r3, #1]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	697a      	ldr	r2, [r7, #20]
 8012f80:	f7ff fd40 	bl	8012a04 <disk_write>
 8012f84:	4603      	mov	r3, r0
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d002      	beq.n	8012f90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	73fb      	strb	r3, [r7, #15]
 8012f8e:	e022      	b.n	8012fd6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2200      	movs	r2, #0
 8012f94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	6a1b      	ldr	r3, [r3, #32]
 8012f9a:	697a      	ldr	r2, [r7, #20]
 8012f9c:	1ad2      	subs	r2, r2, r3
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	699b      	ldr	r3, [r3, #24]
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d217      	bcs.n	8012fd6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	789b      	ldrb	r3, [r3, #2]
 8012faa:	613b      	str	r3, [r7, #16]
 8012fac:	e010      	b.n	8012fd0 <sync_window+0x78>
					wsect += fs->fsize;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	699b      	ldr	r3, [r3, #24]
 8012fb2:	697a      	ldr	r2, [r7, #20]
 8012fb4:	4413      	add	r3, r2
 8012fb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	7858      	ldrb	r0, [r3, #1]
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	697a      	ldr	r2, [r7, #20]
 8012fc6:	f7ff fd1d 	bl	8012a04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	3b01      	subs	r3, #1
 8012fce:	613b      	str	r3, [r7, #16]
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	d8eb      	bhi.n	8012fae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3718      	adds	r7, #24
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b084      	sub	sp, #16
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012fea:	2300      	movs	r3, #0
 8012fec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff2:	683a      	ldr	r2, [r7, #0]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d01b      	beq.n	8013030 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012ff8:	6878      	ldr	r0, [r7, #4]
 8012ffa:	f7ff ffad 	bl	8012f58 <sync_window>
 8012ffe:	4603      	mov	r3, r0
 8013000:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013002:	7bfb      	ldrb	r3, [r7, #15]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d113      	bne.n	8013030 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	7858      	ldrb	r0, [r3, #1]
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013012:	2301      	movs	r3, #1
 8013014:	683a      	ldr	r2, [r7, #0]
 8013016:	f7ff fcd5 	bl	80129c4 <disk_read>
 801301a:	4603      	mov	r3, r0
 801301c:	2b00      	cmp	r3, #0
 801301e:	d004      	beq.n	801302a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013024:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013026:	2301      	movs	r3, #1
 8013028:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	683a      	ldr	r2, [r7, #0]
 801302e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8013030:	7bfb      	ldrb	r3, [r7, #15]
}
 8013032:	4618      	mov	r0, r3
 8013034:	3710      	adds	r7, #16
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
	...

0801303c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b084      	sub	sp, #16
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f7ff ff87 	bl	8012f58 <sync_window>
 801304a:	4603      	mov	r3, r0
 801304c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801304e:	7bfb      	ldrb	r3, [r7, #15]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d158      	bne.n	8013106 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	2b03      	cmp	r3, #3
 801305a:	d148      	bne.n	80130ee <sync_fs+0xb2>
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	791b      	ldrb	r3, [r3, #4]
 8013060:	2b01      	cmp	r3, #1
 8013062:	d144      	bne.n	80130ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	3330      	adds	r3, #48	; 0x30
 8013068:	f44f 7200 	mov.w	r2, #512	; 0x200
 801306c:	2100      	movs	r1, #0
 801306e:	4618      	mov	r0, r3
 8013070:	f7ff fda9 	bl	8012bc6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	3330      	adds	r3, #48	; 0x30
 8013078:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801307c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013080:	4618      	mov	r0, r3
 8013082:	f7ff fd38 	bl	8012af6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	3330      	adds	r3, #48	; 0x30
 801308a:	4921      	ldr	r1, [pc, #132]	; (8013110 <sync_fs+0xd4>)
 801308c:	4618      	mov	r0, r3
 801308e:	f7ff fd4d 	bl	8012b2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	3330      	adds	r3, #48	; 0x30
 8013096:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801309a:	491e      	ldr	r1, [pc, #120]	; (8013114 <sync_fs+0xd8>)
 801309c:	4618      	mov	r0, r3
 801309e:	f7ff fd45 	bl	8012b2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	3330      	adds	r3, #48	; 0x30
 80130a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	691b      	ldr	r3, [r3, #16]
 80130ae:	4619      	mov	r1, r3
 80130b0:	4610      	mov	r0, r2
 80130b2:	f7ff fd3b 	bl	8012b2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	3330      	adds	r3, #48	; 0x30
 80130ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	68db      	ldr	r3, [r3, #12]
 80130c2:	4619      	mov	r1, r3
 80130c4:	4610      	mov	r0, r2
 80130c6:	f7ff fd31 	bl	8012b2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	69db      	ldr	r3, [r3, #28]
 80130ce:	1c5a      	adds	r2, r3, #1
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	7858      	ldrb	r0, [r3, #1]
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130e2:	2301      	movs	r3, #1
 80130e4:	f7ff fc8e 	bl	8012a04 <disk_write>
			fs->fsi_flag = 0;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2200      	movs	r2, #0
 80130ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	785b      	ldrb	r3, [r3, #1]
 80130f2:	2200      	movs	r2, #0
 80130f4:	2100      	movs	r1, #0
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7ff fca4 	bl	8012a44 <disk_ioctl>
 80130fc:	4603      	mov	r3, r0
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d001      	beq.n	8013106 <sync_fs+0xca>
 8013102:	2301      	movs	r3, #1
 8013104:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013106:	7bfb      	ldrb	r3, [r7, #15]
}
 8013108:	4618      	mov	r0, r3
 801310a:	3710      	adds	r7, #16
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}
 8013110:	41615252 	.word	0x41615252
 8013114:	61417272 	.word	0x61417272

08013118 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013118:	b480      	push	{r7}
 801311a:	b083      	sub	sp, #12
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	3b02      	subs	r3, #2
 8013126:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	695b      	ldr	r3, [r3, #20]
 801312c:	3b02      	subs	r3, #2
 801312e:	683a      	ldr	r2, [r7, #0]
 8013130:	429a      	cmp	r2, r3
 8013132:	d301      	bcc.n	8013138 <clust2sect+0x20>
 8013134:	2300      	movs	r3, #0
 8013136:	e008      	b.n	801314a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	895b      	ldrh	r3, [r3, #10]
 801313c:	461a      	mov	r2, r3
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	fb03 f202 	mul.w	r2, r3, r2
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013148:	4413      	add	r3, r2
}
 801314a:	4618      	mov	r0, r3
 801314c:	370c      	adds	r7, #12
 801314e:	46bd      	mov	sp, r7
 8013150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013154:	4770      	bx	lr

08013156 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013156:	b580      	push	{r7, lr}
 8013158:	b086      	sub	sp, #24
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
 801315e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	2b01      	cmp	r3, #1
 801316a:	d904      	bls.n	8013176 <get_fat+0x20>
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	695b      	ldr	r3, [r3, #20]
 8013170:	683a      	ldr	r2, [r7, #0]
 8013172:	429a      	cmp	r2, r3
 8013174:	d302      	bcc.n	801317c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013176:	2301      	movs	r3, #1
 8013178:	617b      	str	r3, [r7, #20]
 801317a:	e08f      	b.n	801329c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801317c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013180:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	781b      	ldrb	r3, [r3, #0]
 8013186:	2b03      	cmp	r3, #3
 8013188:	d062      	beq.n	8013250 <get_fat+0xfa>
 801318a:	2b03      	cmp	r3, #3
 801318c:	dc7c      	bgt.n	8013288 <get_fat+0x132>
 801318e:	2b01      	cmp	r3, #1
 8013190:	d002      	beq.n	8013198 <get_fat+0x42>
 8013192:	2b02      	cmp	r3, #2
 8013194:	d042      	beq.n	801321c <get_fat+0xc6>
 8013196:	e077      	b.n	8013288 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	60fb      	str	r3, [r7, #12]
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	085b      	lsrs	r3, r3, #1
 80131a0:	68fa      	ldr	r2, [r7, #12]
 80131a2:	4413      	add	r3, r2
 80131a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	6a1a      	ldr	r2, [r3, #32]
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	0a5b      	lsrs	r3, r3, #9
 80131ae:	4413      	add	r3, r2
 80131b0:	4619      	mov	r1, r3
 80131b2:	6938      	ldr	r0, [r7, #16]
 80131b4:	f7ff ff14 	bl	8012fe0 <move_window>
 80131b8:	4603      	mov	r3, r0
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d167      	bne.n	801328e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	1c5a      	adds	r2, r3, #1
 80131c2:	60fa      	str	r2, [r7, #12]
 80131c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131c8:	693a      	ldr	r2, [r7, #16]
 80131ca:	4413      	add	r3, r2
 80131cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80131d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	6a1a      	ldr	r2, [r3, #32]
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	0a5b      	lsrs	r3, r3, #9
 80131da:	4413      	add	r3, r2
 80131dc:	4619      	mov	r1, r3
 80131de:	6938      	ldr	r0, [r7, #16]
 80131e0:	f7ff fefe 	bl	8012fe0 <move_window>
 80131e4:	4603      	mov	r3, r0
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d153      	bne.n	8013292 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131f0:	693a      	ldr	r2, [r7, #16]
 80131f2:	4413      	add	r3, r2
 80131f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80131f8:	021b      	lsls	r3, r3, #8
 80131fa:	461a      	mov	r2, r3
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	4313      	orrs	r3, r2
 8013200:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	f003 0301 	and.w	r3, r3, #1
 8013208:	2b00      	cmp	r3, #0
 801320a:	d002      	beq.n	8013212 <get_fat+0xbc>
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	091b      	lsrs	r3, r3, #4
 8013210:	e002      	b.n	8013218 <get_fat+0xc2>
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013218:	617b      	str	r3, [r7, #20]
			break;
 801321a:	e03f      	b.n	801329c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	6a1a      	ldr	r2, [r3, #32]
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	0a1b      	lsrs	r3, r3, #8
 8013224:	4413      	add	r3, r2
 8013226:	4619      	mov	r1, r3
 8013228:	6938      	ldr	r0, [r7, #16]
 801322a:	f7ff fed9 	bl	8012fe0 <move_window>
 801322e:	4603      	mov	r3, r0
 8013230:	2b00      	cmp	r3, #0
 8013232:	d130      	bne.n	8013296 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	005b      	lsls	r3, r3, #1
 801323e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013242:	4413      	add	r3, r2
 8013244:	4618      	mov	r0, r3
 8013246:	f7ff fc1b 	bl	8012a80 <ld_word>
 801324a:	4603      	mov	r3, r0
 801324c:	617b      	str	r3, [r7, #20]
			break;
 801324e:	e025      	b.n	801329c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	6a1a      	ldr	r2, [r3, #32]
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	09db      	lsrs	r3, r3, #7
 8013258:	4413      	add	r3, r2
 801325a:	4619      	mov	r1, r3
 801325c:	6938      	ldr	r0, [r7, #16]
 801325e:	f7ff febf 	bl	8012fe0 <move_window>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d118      	bne.n	801329a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	009b      	lsls	r3, r3, #2
 8013272:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013276:	4413      	add	r3, r2
 8013278:	4618      	mov	r0, r3
 801327a:	f7ff fc19 	bl	8012ab0 <ld_dword>
 801327e:	4603      	mov	r3, r0
 8013280:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013284:	617b      	str	r3, [r7, #20]
			break;
 8013286:	e009      	b.n	801329c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013288:	2301      	movs	r3, #1
 801328a:	617b      	str	r3, [r7, #20]
 801328c:	e006      	b.n	801329c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801328e:	bf00      	nop
 8013290:	e004      	b.n	801329c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013292:	bf00      	nop
 8013294:	e002      	b.n	801329c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013296:	bf00      	nop
 8013298:	e000      	b.n	801329c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801329a:	bf00      	nop
		}
	}

	return val;
 801329c:	697b      	ldr	r3, [r7, #20]
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3718      	adds	r7, #24
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}

080132a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80132a6:	b590      	push	{r4, r7, lr}
 80132a8:	b089      	sub	sp, #36	; 0x24
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	60f8      	str	r0, [r7, #12]
 80132ae:	60b9      	str	r1, [r7, #8]
 80132b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80132b2:	2302      	movs	r3, #2
 80132b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	f240 80d2 	bls.w	8013462 <put_fat+0x1bc>
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	695b      	ldr	r3, [r3, #20]
 80132c2:	68ba      	ldr	r2, [r7, #8]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	f080 80cc 	bcs.w	8013462 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	2b03      	cmp	r3, #3
 80132d0:	f000 8096 	beq.w	8013400 <put_fat+0x15a>
 80132d4:	2b03      	cmp	r3, #3
 80132d6:	f300 80cd 	bgt.w	8013474 <put_fat+0x1ce>
 80132da:	2b01      	cmp	r3, #1
 80132dc:	d002      	beq.n	80132e4 <put_fat+0x3e>
 80132de:	2b02      	cmp	r3, #2
 80132e0:	d06e      	beq.n	80133c0 <put_fat+0x11a>
 80132e2:	e0c7      	b.n	8013474 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	61bb      	str	r3, [r7, #24]
 80132e8:	69bb      	ldr	r3, [r7, #24]
 80132ea:	085b      	lsrs	r3, r3, #1
 80132ec:	69ba      	ldr	r2, [r7, #24]
 80132ee:	4413      	add	r3, r2
 80132f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	6a1a      	ldr	r2, [r3, #32]
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	0a5b      	lsrs	r3, r3, #9
 80132fa:	4413      	add	r3, r2
 80132fc:	4619      	mov	r1, r3
 80132fe:	68f8      	ldr	r0, [r7, #12]
 8013300:	f7ff fe6e 	bl	8012fe0 <move_window>
 8013304:	4603      	mov	r3, r0
 8013306:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013308:	7ffb      	ldrb	r3, [r7, #31]
 801330a:	2b00      	cmp	r3, #0
 801330c:	f040 80ab 	bne.w	8013466 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013316:	69bb      	ldr	r3, [r7, #24]
 8013318:	1c59      	adds	r1, r3, #1
 801331a:	61b9      	str	r1, [r7, #24]
 801331c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013320:	4413      	add	r3, r2
 8013322:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	f003 0301 	and.w	r3, r3, #1
 801332a:	2b00      	cmp	r3, #0
 801332c:	d00d      	beq.n	801334a <put_fat+0xa4>
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	b25b      	sxtb	r3, r3
 8013334:	f003 030f 	and.w	r3, r3, #15
 8013338:	b25a      	sxtb	r2, r3
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	b2db      	uxtb	r3, r3
 801333e:	011b      	lsls	r3, r3, #4
 8013340:	b25b      	sxtb	r3, r3
 8013342:	4313      	orrs	r3, r2
 8013344:	b25b      	sxtb	r3, r3
 8013346:	b2db      	uxtb	r3, r3
 8013348:	e001      	b.n	801334e <put_fat+0xa8>
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	b2db      	uxtb	r3, r3
 801334e:	697a      	ldr	r2, [r7, #20]
 8013350:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	2201      	movs	r2, #1
 8013356:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	6a1a      	ldr	r2, [r3, #32]
 801335c:	69bb      	ldr	r3, [r7, #24]
 801335e:	0a5b      	lsrs	r3, r3, #9
 8013360:	4413      	add	r3, r2
 8013362:	4619      	mov	r1, r3
 8013364:	68f8      	ldr	r0, [r7, #12]
 8013366:	f7ff fe3b 	bl	8012fe0 <move_window>
 801336a:	4603      	mov	r3, r0
 801336c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801336e:	7ffb      	ldrb	r3, [r7, #31]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d17a      	bne.n	801346a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801337a:	69bb      	ldr	r3, [r7, #24]
 801337c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013380:	4413      	add	r3, r2
 8013382:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	f003 0301 	and.w	r3, r3, #1
 801338a:	2b00      	cmp	r3, #0
 801338c:	d003      	beq.n	8013396 <put_fat+0xf0>
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	091b      	lsrs	r3, r3, #4
 8013392:	b2db      	uxtb	r3, r3
 8013394:	e00e      	b.n	80133b4 <put_fat+0x10e>
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	b25b      	sxtb	r3, r3
 801339c:	f023 030f 	bic.w	r3, r3, #15
 80133a0:	b25a      	sxtb	r2, r3
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	0a1b      	lsrs	r3, r3, #8
 80133a6:	b25b      	sxtb	r3, r3
 80133a8:	f003 030f 	and.w	r3, r3, #15
 80133ac:	b25b      	sxtb	r3, r3
 80133ae:	4313      	orrs	r3, r2
 80133b0:	b25b      	sxtb	r3, r3
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	697a      	ldr	r2, [r7, #20]
 80133b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2201      	movs	r2, #1
 80133bc:	70da      	strb	r2, [r3, #3]
			break;
 80133be:	e059      	b.n	8013474 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	6a1a      	ldr	r2, [r3, #32]
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	0a1b      	lsrs	r3, r3, #8
 80133c8:	4413      	add	r3, r2
 80133ca:	4619      	mov	r1, r3
 80133cc:	68f8      	ldr	r0, [r7, #12]
 80133ce:	f7ff fe07 	bl	8012fe0 <move_window>
 80133d2:	4603      	mov	r3, r0
 80133d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80133d6:	7ffb      	ldrb	r3, [r7, #31]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d148      	bne.n	801346e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	005b      	lsls	r3, r3, #1
 80133e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80133ea:	4413      	add	r3, r2
 80133ec:	687a      	ldr	r2, [r7, #4]
 80133ee:	b292      	uxth	r2, r2
 80133f0:	4611      	mov	r1, r2
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7ff fb7f 	bl	8012af6 <st_word>
			fs->wflag = 1;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2201      	movs	r2, #1
 80133fc:	70da      	strb	r2, [r3, #3]
			break;
 80133fe:	e039      	b.n	8013474 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	6a1a      	ldr	r2, [r3, #32]
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	09db      	lsrs	r3, r3, #7
 8013408:	4413      	add	r3, r2
 801340a:	4619      	mov	r1, r3
 801340c:	68f8      	ldr	r0, [r7, #12]
 801340e:	f7ff fde7 	bl	8012fe0 <move_window>
 8013412:	4603      	mov	r3, r0
 8013414:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013416:	7ffb      	ldrb	r3, [r7, #31]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d12a      	bne.n	8013472 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013430:	4413      	add	r3, r2
 8013432:	4618      	mov	r0, r3
 8013434:	f7ff fb3c 	bl	8012ab0 <ld_dword>
 8013438:	4603      	mov	r3, r0
 801343a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801343e:	4323      	orrs	r3, r4
 8013440:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	009b      	lsls	r3, r3, #2
 801344c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013450:	4413      	add	r3, r2
 8013452:	6879      	ldr	r1, [r7, #4]
 8013454:	4618      	mov	r0, r3
 8013456:	f7ff fb69 	bl	8012b2c <st_dword>
			fs->wflag = 1;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	2201      	movs	r2, #1
 801345e:	70da      	strb	r2, [r3, #3]
			break;
 8013460:	e008      	b.n	8013474 <put_fat+0x1ce>
		}
	}
 8013462:	bf00      	nop
 8013464:	e006      	b.n	8013474 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013466:	bf00      	nop
 8013468:	e004      	b.n	8013474 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801346a:	bf00      	nop
 801346c:	e002      	b.n	8013474 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801346e:	bf00      	nop
 8013470:	e000      	b.n	8013474 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013472:	bf00      	nop
	return res;
 8013474:	7ffb      	ldrb	r3, [r7, #31]
}
 8013476:	4618      	mov	r0, r3
 8013478:	3724      	adds	r7, #36	; 0x24
 801347a:	46bd      	mov	sp, r7
 801347c:	bd90      	pop	{r4, r7, pc}

0801347e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801347e:	b580      	push	{r7, lr}
 8013480:	b088      	sub	sp, #32
 8013482:	af00      	add	r7, sp, #0
 8013484:	60f8      	str	r0, [r7, #12]
 8013486:	60b9      	str	r1, [r7, #8]
 8013488:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801348a:	2300      	movs	r3, #0
 801348c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	2b01      	cmp	r3, #1
 8013498:	d904      	bls.n	80134a4 <remove_chain+0x26>
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	695b      	ldr	r3, [r3, #20]
 801349e:	68ba      	ldr	r2, [r7, #8]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d301      	bcc.n	80134a8 <remove_chain+0x2a>
 80134a4:	2302      	movs	r3, #2
 80134a6:	e04b      	b.n	8013540 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d00c      	beq.n	80134c8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80134ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80134b2:	6879      	ldr	r1, [r7, #4]
 80134b4:	69b8      	ldr	r0, [r7, #24]
 80134b6:	f7ff fef6 	bl	80132a6 <put_fat>
 80134ba:	4603      	mov	r3, r0
 80134bc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80134be:	7ffb      	ldrb	r3, [r7, #31]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d001      	beq.n	80134c8 <remove_chain+0x4a>
 80134c4:	7ffb      	ldrb	r3, [r7, #31]
 80134c6:	e03b      	b.n	8013540 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80134c8:	68b9      	ldr	r1, [r7, #8]
 80134ca:	68f8      	ldr	r0, [r7, #12]
 80134cc:	f7ff fe43 	bl	8013156 <get_fat>
 80134d0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d031      	beq.n	801353c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	2b01      	cmp	r3, #1
 80134dc:	d101      	bne.n	80134e2 <remove_chain+0x64>
 80134de:	2302      	movs	r3, #2
 80134e0:	e02e      	b.n	8013540 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80134e2:	697b      	ldr	r3, [r7, #20]
 80134e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80134e8:	d101      	bne.n	80134ee <remove_chain+0x70>
 80134ea:	2301      	movs	r3, #1
 80134ec:	e028      	b.n	8013540 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80134ee:	2200      	movs	r2, #0
 80134f0:	68b9      	ldr	r1, [r7, #8]
 80134f2:	69b8      	ldr	r0, [r7, #24]
 80134f4:	f7ff fed7 	bl	80132a6 <put_fat>
 80134f8:	4603      	mov	r3, r0
 80134fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80134fc:	7ffb      	ldrb	r3, [r7, #31]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d001      	beq.n	8013506 <remove_chain+0x88>
 8013502:	7ffb      	ldrb	r3, [r7, #31]
 8013504:	e01c      	b.n	8013540 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	691a      	ldr	r2, [r3, #16]
 801350a:	69bb      	ldr	r3, [r7, #24]
 801350c:	695b      	ldr	r3, [r3, #20]
 801350e:	3b02      	subs	r3, #2
 8013510:	429a      	cmp	r2, r3
 8013512:	d20b      	bcs.n	801352c <remove_chain+0xae>
			fs->free_clst++;
 8013514:	69bb      	ldr	r3, [r7, #24]
 8013516:	691b      	ldr	r3, [r3, #16]
 8013518:	1c5a      	adds	r2, r3, #1
 801351a:	69bb      	ldr	r3, [r7, #24]
 801351c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	791b      	ldrb	r3, [r3, #4]
 8013522:	f043 0301 	orr.w	r3, r3, #1
 8013526:	b2da      	uxtb	r2, r3
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013530:	69bb      	ldr	r3, [r7, #24]
 8013532:	695b      	ldr	r3, [r3, #20]
 8013534:	68ba      	ldr	r2, [r7, #8]
 8013536:	429a      	cmp	r2, r3
 8013538:	d3c6      	bcc.n	80134c8 <remove_chain+0x4a>
 801353a:	e000      	b.n	801353e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801353c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801353e:	2300      	movs	r3, #0
}
 8013540:	4618      	mov	r0, r3
 8013542:	3720      	adds	r7, #32
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}

08013548 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b088      	sub	sp, #32
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d10d      	bne.n	801357a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	68db      	ldr	r3, [r3, #12]
 8013562:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013564:	69bb      	ldr	r3, [r7, #24]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d004      	beq.n	8013574 <create_chain+0x2c>
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	695b      	ldr	r3, [r3, #20]
 801356e:	69ba      	ldr	r2, [r7, #24]
 8013570:	429a      	cmp	r2, r3
 8013572:	d31b      	bcc.n	80135ac <create_chain+0x64>
 8013574:	2301      	movs	r3, #1
 8013576:	61bb      	str	r3, [r7, #24]
 8013578:	e018      	b.n	80135ac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801357a:	6839      	ldr	r1, [r7, #0]
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f7ff fdea 	bl	8013156 <get_fat>
 8013582:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	2b01      	cmp	r3, #1
 8013588:	d801      	bhi.n	801358e <create_chain+0x46>
 801358a:	2301      	movs	r3, #1
 801358c:	e070      	b.n	8013670 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013594:	d101      	bne.n	801359a <create_chain+0x52>
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	e06a      	b.n	8013670 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	695b      	ldr	r3, [r3, #20]
 801359e:	68fa      	ldr	r2, [r7, #12]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d201      	bcs.n	80135a8 <create_chain+0x60>
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	e063      	b.n	8013670 <create_chain+0x128>
		scl = clst;
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80135ac:	69bb      	ldr	r3, [r7, #24]
 80135ae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	3301      	adds	r3, #1
 80135b4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	695b      	ldr	r3, [r3, #20]
 80135ba:	69fa      	ldr	r2, [r7, #28]
 80135bc:	429a      	cmp	r2, r3
 80135be:	d307      	bcc.n	80135d0 <create_chain+0x88>
				ncl = 2;
 80135c0:	2302      	movs	r3, #2
 80135c2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80135c4:	69fa      	ldr	r2, [r7, #28]
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d901      	bls.n	80135d0 <create_chain+0x88>
 80135cc:	2300      	movs	r3, #0
 80135ce:	e04f      	b.n	8013670 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80135d0:	69f9      	ldr	r1, [r7, #28]
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f7ff fdbf 	bl	8013156 <get_fat>
 80135d8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d00e      	beq.n	80135fe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	2b01      	cmp	r3, #1
 80135e4:	d003      	beq.n	80135ee <create_chain+0xa6>
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135ec:	d101      	bne.n	80135f2 <create_chain+0xaa>
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	e03e      	b.n	8013670 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80135f2:	69fa      	ldr	r2, [r7, #28]
 80135f4:	69bb      	ldr	r3, [r7, #24]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d1da      	bne.n	80135b0 <create_chain+0x68>
 80135fa:	2300      	movs	r3, #0
 80135fc:	e038      	b.n	8013670 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80135fe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013604:	69f9      	ldr	r1, [r7, #28]
 8013606:	6938      	ldr	r0, [r7, #16]
 8013608:	f7ff fe4d 	bl	80132a6 <put_fat>
 801360c:	4603      	mov	r3, r0
 801360e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013610:	7dfb      	ldrb	r3, [r7, #23]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d109      	bne.n	801362a <create_chain+0xe2>
 8013616:	683b      	ldr	r3, [r7, #0]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d006      	beq.n	801362a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801361c:	69fa      	ldr	r2, [r7, #28]
 801361e:	6839      	ldr	r1, [r7, #0]
 8013620:	6938      	ldr	r0, [r7, #16]
 8013622:	f7ff fe40 	bl	80132a6 <put_fat>
 8013626:	4603      	mov	r3, r0
 8013628:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801362a:	7dfb      	ldrb	r3, [r7, #23]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d116      	bne.n	801365e <create_chain+0x116>
		fs->last_clst = ncl;
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	69fa      	ldr	r2, [r7, #28]
 8013634:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	691a      	ldr	r2, [r3, #16]
 801363a:	693b      	ldr	r3, [r7, #16]
 801363c:	695b      	ldr	r3, [r3, #20]
 801363e:	3b02      	subs	r3, #2
 8013640:	429a      	cmp	r2, r3
 8013642:	d804      	bhi.n	801364e <create_chain+0x106>
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	691b      	ldr	r3, [r3, #16]
 8013648:	1e5a      	subs	r2, r3, #1
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	791b      	ldrb	r3, [r3, #4]
 8013652:	f043 0301 	orr.w	r3, r3, #1
 8013656:	b2da      	uxtb	r2, r3
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	711a      	strb	r2, [r3, #4]
 801365c:	e007      	b.n	801366e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801365e:	7dfb      	ldrb	r3, [r7, #23]
 8013660:	2b01      	cmp	r3, #1
 8013662:	d102      	bne.n	801366a <create_chain+0x122>
 8013664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013668:	e000      	b.n	801366c <create_chain+0x124>
 801366a:	2301      	movs	r3, #1
 801366c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801366e:	69fb      	ldr	r3, [r7, #28]
}
 8013670:	4618      	mov	r0, r3
 8013672:	3720      	adds	r7, #32
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013678:	b480      	push	{r7}
 801367a:	b087      	sub	sp, #28
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801368c:	3304      	adds	r3, #4
 801368e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	0a5b      	lsrs	r3, r3, #9
 8013694:	68fa      	ldr	r2, [r7, #12]
 8013696:	8952      	ldrh	r2, [r2, #10]
 8013698:	fbb3 f3f2 	udiv	r3, r3, r2
 801369c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	1d1a      	adds	r2, r3, #4
 80136a2:	613a      	str	r2, [r7, #16]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d101      	bne.n	80136b2 <clmt_clust+0x3a>
 80136ae:	2300      	movs	r3, #0
 80136b0:	e010      	b.n	80136d4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80136b2:	697a      	ldr	r2, [r7, #20]
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d307      	bcc.n	80136ca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80136ba:	697a      	ldr	r2, [r7, #20]
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	1ad3      	subs	r3, r2, r3
 80136c0:	617b      	str	r3, [r7, #20]
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	3304      	adds	r3, #4
 80136c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80136c8:	e7e9      	b.n	801369e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80136ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	681a      	ldr	r2, [r3, #0]
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	4413      	add	r3, r2
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	371c      	adds	r7, #28
 80136d8:	46bd      	mov	sp, r7
 80136da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136de:	4770      	bx	lr

080136e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b086      	sub	sp, #24
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80136f6:	d204      	bcs.n	8013702 <dir_sdi+0x22>
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	f003 031f 	and.w	r3, r3, #31
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d001      	beq.n	8013706 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013702:	2302      	movs	r3, #2
 8013704:	e063      	b.n	80137ce <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	683a      	ldr	r2, [r7, #0]
 801370a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	689b      	ldr	r3, [r3, #8]
 8013710:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d106      	bne.n	8013726 <dir_sdi+0x46>
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	2b02      	cmp	r3, #2
 801371e:	d902      	bls.n	8013726 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013724:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d10c      	bne.n	8013746 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	095b      	lsrs	r3, r3, #5
 8013730:	693a      	ldr	r2, [r7, #16]
 8013732:	8912      	ldrh	r2, [r2, #8]
 8013734:	4293      	cmp	r3, r2
 8013736:	d301      	bcc.n	801373c <dir_sdi+0x5c>
 8013738:	2302      	movs	r3, #2
 801373a:	e048      	b.n	80137ce <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	61da      	str	r2, [r3, #28]
 8013744:	e029      	b.n	801379a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013746:	693b      	ldr	r3, [r7, #16]
 8013748:	895b      	ldrh	r3, [r3, #10]
 801374a:	025b      	lsls	r3, r3, #9
 801374c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801374e:	e019      	b.n	8013784 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6979      	ldr	r1, [r7, #20]
 8013754:	4618      	mov	r0, r3
 8013756:	f7ff fcfe 	bl	8013156 <get_fat>
 801375a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013762:	d101      	bne.n	8013768 <dir_sdi+0x88>
 8013764:	2301      	movs	r3, #1
 8013766:	e032      	b.n	80137ce <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	2b01      	cmp	r3, #1
 801376c:	d904      	bls.n	8013778 <dir_sdi+0x98>
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	695b      	ldr	r3, [r3, #20]
 8013772:	697a      	ldr	r2, [r7, #20]
 8013774:	429a      	cmp	r2, r3
 8013776:	d301      	bcc.n	801377c <dir_sdi+0x9c>
 8013778:	2302      	movs	r3, #2
 801377a:	e028      	b.n	80137ce <dir_sdi+0xee>
			ofs -= csz;
 801377c:	683a      	ldr	r2, [r7, #0]
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	1ad3      	subs	r3, r2, r3
 8013782:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013784:	683a      	ldr	r2, [r7, #0]
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	429a      	cmp	r2, r3
 801378a:	d2e1      	bcs.n	8013750 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801378c:	6979      	ldr	r1, [r7, #20]
 801378e:	6938      	ldr	r0, [r7, #16]
 8013790:	f7ff fcc2 	bl	8013118 <clust2sect>
 8013794:	4602      	mov	r2, r0
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	697a      	ldr	r2, [r7, #20]
 801379e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	69db      	ldr	r3, [r3, #28]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d101      	bne.n	80137ac <dir_sdi+0xcc>
 80137a8:	2302      	movs	r3, #2
 80137aa:	e010      	b.n	80137ce <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	69da      	ldr	r2, [r3, #28]
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	0a5b      	lsrs	r3, r3, #9
 80137b4:	441a      	add	r2, r3
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80137c6:	441a      	add	r2, r3
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80137cc:	2300      	movs	r3, #0
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	3718      	adds	r7, #24
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}

080137d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80137d6:	b580      	push	{r7, lr}
 80137d8:	b086      	sub	sp, #24
 80137da:	af00      	add	r7, sp, #0
 80137dc:	6078      	str	r0, [r7, #4]
 80137de:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	695b      	ldr	r3, [r3, #20]
 80137ea:	3320      	adds	r3, #32
 80137ec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	69db      	ldr	r3, [r3, #28]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d003      	beq.n	80137fe <dir_next+0x28>
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80137fc:	d301      	bcc.n	8013802 <dir_next+0x2c>
 80137fe:	2304      	movs	r3, #4
 8013800:	e0aa      	b.n	8013958 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013808:	2b00      	cmp	r3, #0
 801380a:	f040 8098 	bne.w	801393e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	69db      	ldr	r3, [r3, #28]
 8013812:	1c5a      	adds	r2, r3, #1
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	699b      	ldr	r3, [r3, #24]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d10b      	bne.n	8013838 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	095b      	lsrs	r3, r3, #5
 8013824:	68fa      	ldr	r2, [r7, #12]
 8013826:	8912      	ldrh	r2, [r2, #8]
 8013828:	4293      	cmp	r3, r2
 801382a:	f0c0 8088 	bcc.w	801393e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2200      	movs	r2, #0
 8013832:	61da      	str	r2, [r3, #28]
 8013834:	2304      	movs	r3, #4
 8013836:	e08f      	b.n	8013958 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	0a5b      	lsrs	r3, r3, #9
 801383c:	68fa      	ldr	r2, [r7, #12]
 801383e:	8952      	ldrh	r2, [r2, #10]
 8013840:	3a01      	subs	r2, #1
 8013842:	4013      	ands	r3, r2
 8013844:	2b00      	cmp	r3, #0
 8013846:	d17a      	bne.n	801393e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013848:	687a      	ldr	r2, [r7, #4]
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	699b      	ldr	r3, [r3, #24]
 801384e:	4619      	mov	r1, r3
 8013850:	4610      	mov	r0, r2
 8013852:	f7ff fc80 	bl	8013156 <get_fat>
 8013856:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	2b01      	cmp	r3, #1
 801385c:	d801      	bhi.n	8013862 <dir_next+0x8c>
 801385e:	2302      	movs	r3, #2
 8013860:	e07a      	b.n	8013958 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013868:	d101      	bne.n	801386e <dir_next+0x98>
 801386a:	2301      	movs	r3, #1
 801386c:	e074      	b.n	8013958 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	695b      	ldr	r3, [r3, #20]
 8013872:	697a      	ldr	r2, [r7, #20]
 8013874:	429a      	cmp	r2, r3
 8013876:	d358      	bcc.n	801392a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d104      	bne.n	8013888 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	2200      	movs	r2, #0
 8013882:	61da      	str	r2, [r3, #28]
 8013884:	2304      	movs	r3, #4
 8013886:	e067      	b.n	8013958 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	699b      	ldr	r3, [r3, #24]
 801388e:	4619      	mov	r1, r3
 8013890:	4610      	mov	r0, r2
 8013892:	f7ff fe59 	bl	8013548 <create_chain>
 8013896:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d101      	bne.n	80138a2 <dir_next+0xcc>
 801389e:	2307      	movs	r3, #7
 80138a0:	e05a      	b.n	8013958 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d101      	bne.n	80138ac <dir_next+0xd6>
 80138a8:	2302      	movs	r3, #2
 80138aa:	e055      	b.n	8013958 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80138ac:	697b      	ldr	r3, [r7, #20]
 80138ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138b2:	d101      	bne.n	80138b8 <dir_next+0xe2>
 80138b4:	2301      	movs	r3, #1
 80138b6:	e04f      	b.n	8013958 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80138b8:	68f8      	ldr	r0, [r7, #12]
 80138ba:	f7ff fb4d 	bl	8012f58 <sync_window>
 80138be:	4603      	mov	r3, r0
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d001      	beq.n	80138c8 <dir_next+0xf2>
 80138c4:	2301      	movs	r3, #1
 80138c6:	e047      	b.n	8013958 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	3330      	adds	r3, #48	; 0x30
 80138cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80138d0:	2100      	movs	r1, #0
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7ff f977 	bl	8012bc6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80138d8:	2300      	movs	r3, #0
 80138da:	613b      	str	r3, [r7, #16]
 80138dc:	6979      	ldr	r1, [r7, #20]
 80138de:	68f8      	ldr	r0, [r7, #12]
 80138e0:	f7ff fc1a 	bl	8013118 <clust2sect>
 80138e4:	4602      	mov	r2, r0
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80138ea:	e012      	b.n	8013912 <dir_next+0x13c>
						fs->wflag = 1;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2201      	movs	r2, #1
 80138f0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f7ff fb30 	bl	8012f58 <sync_window>
 80138f8:	4603      	mov	r3, r0
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d001      	beq.n	8013902 <dir_next+0x12c>
 80138fe:	2301      	movs	r3, #1
 8013900:	e02a      	b.n	8013958 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	3301      	adds	r3, #1
 8013906:	613b      	str	r3, [r7, #16]
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801390c:	1c5a      	adds	r2, r3, #1
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	62da      	str	r2, [r3, #44]	; 0x2c
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	895b      	ldrh	r3, [r3, #10]
 8013916:	461a      	mov	r2, r3
 8013918:	693b      	ldr	r3, [r7, #16]
 801391a:	4293      	cmp	r3, r2
 801391c:	d3e6      	bcc.n	80138ec <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	1ad2      	subs	r2, r2, r3
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	697a      	ldr	r2, [r7, #20]
 801392e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013930:	6979      	ldr	r1, [r7, #20]
 8013932:	68f8      	ldr	r0, [r7, #12]
 8013934:	f7ff fbf0 	bl	8013118 <clust2sect>
 8013938:	4602      	mov	r2, r0
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	68ba      	ldr	r2, [r7, #8]
 8013942:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013950:	441a      	add	r2, r3
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013956:	2300      	movs	r3, #0
}
 8013958:	4618      	mov	r0, r3
 801395a:	3718      	adds	r7, #24
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}

08013960 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b086      	sub	sp, #24
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013970:	2100      	movs	r1, #0
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f7ff feb4 	bl	80136e0 <dir_sdi>
 8013978:	4603      	mov	r3, r0
 801397a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801397c:	7dfb      	ldrb	r3, [r7, #23]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d12b      	bne.n	80139da <dir_alloc+0x7a>
		n = 0;
 8013982:	2300      	movs	r3, #0
 8013984:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	69db      	ldr	r3, [r3, #28]
 801398a:	4619      	mov	r1, r3
 801398c:	68f8      	ldr	r0, [r7, #12]
 801398e:	f7ff fb27 	bl	8012fe0 <move_window>
 8013992:	4603      	mov	r3, r0
 8013994:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013996:	7dfb      	ldrb	r3, [r7, #23]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d11d      	bne.n	80139d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6a1b      	ldr	r3, [r3, #32]
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	2be5      	cmp	r3, #229	; 0xe5
 80139a4:	d004      	beq.n	80139b0 <dir_alloc+0x50>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6a1b      	ldr	r3, [r3, #32]
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d107      	bne.n	80139c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80139b0:	693b      	ldr	r3, [r7, #16]
 80139b2:	3301      	adds	r3, #1
 80139b4:	613b      	str	r3, [r7, #16]
 80139b6:	693a      	ldr	r2, [r7, #16]
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	d102      	bne.n	80139c4 <dir_alloc+0x64>
 80139be:	e00c      	b.n	80139da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80139c0:	2300      	movs	r3, #0
 80139c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80139c4:	2101      	movs	r1, #1
 80139c6:	6878      	ldr	r0, [r7, #4]
 80139c8:	f7ff ff05 	bl	80137d6 <dir_next>
 80139cc:	4603      	mov	r3, r0
 80139ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80139d0:	7dfb      	ldrb	r3, [r7, #23]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d0d7      	beq.n	8013986 <dir_alloc+0x26>
 80139d6:	e000      	b.n	80139da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80139d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80139da:	7dfb      	ldrb	r3, [r7, #23]
 80139dc:	2b04      	cmp	r3, #4
 80139de:	d101      	bne.n	80139e4 <dir_alloc+0x84>
 80139e0:	2307      	movs	r3, #7
 80139e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80139e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80139e6:	4618      	mov	r0, r3
 80139e8:	3718      	adds	r7, #24
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}

080139ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80139ee:	b580      	push	{r7, lr}
 80139f0:	b084      	sub	sp, #16
 80139f2:	af00      	add	r7, sp, #0
 80139f4:	6078      	str	r0, [r7, #4]
 80139f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	331a      	adds	r3, #26
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7ff f83f 	bl	8012a80 <ld_word>
 8013a02:	4603      	mov	r3, r0
 8013a04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	2b03      	cmp	r3, #3
 8013a0c:	d109      	bne.n	8013a22 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	3314      	adds	r3, #20
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7ff f834 	bl	8012a80 <ld_word>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	041b      	lsls	r3, r3, #16
 8013a1c:	68fa      	ldr	r2, [r7, #12]
 8013a1e:	4313      	orrs	r3, r2
 8013a20:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013a22:	68fb      	ldr	r3, [r7, #12]
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3710      	adds	r7, #16
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b084      	sub	sp, #16
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	60b9      	str	r1, [r7, #8]
 8013a36:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	331a      	adds	r3, #26
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	b292      	uxth	r2, r2
 8013a40:	4611      	mov	r1, r2
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7ff f857 	bl	8012af6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	781b      	ldrb	r3, [r3, #0]
 8013a4c:	2b03      	cmp	r3, #3
 8013a4e:	d109      	bne.n	8013a64 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	f103 0214 	add.w	r2, r3, #20
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	0c1b      	lsrs	r3, r3, #16
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	4610      	mov	r0, r2
 8013a60:	f7ff f849 	bl	8012af6 <st_word>
	}
}
 8013a64:	bf00      	nop
 8013a66:	3710      	adds	r7, #16
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b086      	sub	sp, #24
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f7ff fe2f 	bl	80136e0 <dir_sdi>
 8013a82:	4603      	mov	r3, r0
 8013a84:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013a86:	7dfb      	ldrb	r3, [r7, #23]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d001      	beq.n	8013a90 <dir_find+0x24>
 8013a8c:	7dfb      	ldrb	r3, [r7, #23]
 8013a8e:	e03e      	b.n	8013b0e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	69db      	ldr	r3, [r3, #28]
 8013a94:	4619      	mov	r1, r3
 8013a96:	6938      	ldr	r0, [r7, #16]
 8013a98:	f7ff faa2 	bl	8012fe0 <move_window>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013aa0:	7dfb      	ldrb	r3, [r7, #23]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d12f      	bne.n	8013b06 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6a1b      	ldr	r3, [r3, #32]
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013aae:	7bfb      	ldrb	r3, [r7, #15]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d102      	bne.n	8013aba <dir_find+0x4e>
 8013ab4:	2304      	movs	r3, #4
 8013ab6:	75fb      	strb	r3, [r7, #23]
 8013ab8:	e028      	b.n	8013b0c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6a1b      	ldr	r3, [r3, #32]
 8013abe:	330b      	adds	r3, #11
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013ac6:	b2da      	uxtb	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6a1b      	ldr	r3, [r3, #32]
 8013ad0:	330b      	adds	r3, #11
 8013ad2:	781b      	ldrb	r3, [r3, #0]
 8013ad4:	f003 0308 	and.w	r3, r3, #8
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d10a      	bne.n	8013af2 <dir_find+0x86>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6a18      	ldr	r0, [r3, #32]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	3324      	adds	r3, #36	; 0x24
 8013ae4:	220b      	movs	r2, #11
 8013ae6:	4619      	mov	r1, r3
 8013ae8:	f7ff f888 	bl	8012bfc <mem_cmp>
 8013aec:	4603      	mov	r3, r0
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d00b      	beq.n	8013b0a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013af2:	2100      	movs	r1, #0
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f7ff fe6e 	bl	80137d6 <dir_next>
 8013afa:	4603      	mov	r3, r0
 8013afc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013afe:	7dfb      	ldrb	r3, [r7, #23]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d0c5      	beq.n	8013a90 <dir_find+0x24>
 8013b04:	e002      	b.n	8013b0c <dir_find+0xa0>
		if (res != FR_OK) break;
 8013b06:	bf00      	nop
 8013b08:	e000      	b.n	8013b0c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013b0a:	bf00      	nop

	return res;
 8013b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3718      	adds	r7, #24
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}

08013b16 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013b16:	b580      	push	{r7, lr}
 8013b18:	b084      	sub	sp, #16
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013b24:	2101      	movs	r1, #1
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7ff ff1a 	bl	8013960 <dir_alloc>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013b30:	7bfb      	ldrb	r3, [r7, #15]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d11c      	bne.n	8013b70 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	69db      	ldr	r3, [r3, #28]
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	68b8      	ldr	r0, [r7, #8]
 8013b3e:	f7ff fa4f 	bl	8012fe0 <move_window>
 8013b42:	4603      	mov	r3, r0
 8013b44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013b46:	7bfb      	ldrb	r3, [r7, #15]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d111      	bne.n	8013b70 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6a1b      	ldr	r3, [r3, #32]
 8013b50:	2220      	movs	r2, #32
 8013b52:	2100      	movs	r1, #0
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7ff f836 	bl	8012bc6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	6a18      	ldr	r0, [r3, #32]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	3324      	adds	r3, #36	; 0x24
 8013b62:	220b      	movs	r2, #11
 8013b64:	4619      	mov	r1, r3
 8013b66:	f7ff f80d 	bl	8012b84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	2201      	movs	r2, #1
 8013b6e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3710      	adds	r7, #16
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}
	...

08013b7c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b088      	sub	sp, #32
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
 8013b84:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	60fb      	str	r3, [r7, #12]
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	3324      	adds	r3, #36	; 0x24
 8013b90:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013b92:	220b      	movs	r2, #11
 8013b94:	2120      	movs	r1, #32
 8013b96:	68b8      	ldr	r0, [r7, #8]
 8013b98:	f7ff f815 	bl	8012bc6 <mem_set>
	si = i = 0; ni = 8;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	613b      	str	r3, [r7, #16]
 8013ba0:	693b      	ldr	r3, [r7, #16]
 8013ba2:	61fb      	str	r3, [r7, #28]
 8013ba4:	2308      	movs	r3, #8
 8013ba6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013ba8:	69fb      	ldr	r3, [r7, #28]
 8013baa:	1c5a      	adds	r2, r3, #1
 8013bac:	61fa      	str	r2, [r7, #28]
 8013bae:	68fa      	ldr	r2, [r7, #12]
 8013bb0:	4413      	add	r3, r2
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013bb6:	7efb      	ldrb	r3, [r7, #27]
 8013bb8:	2b20      	cmp	r3, #32
 8013bba:	d94e      	bls.n	8013c5a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013bbc:	7efb      	ldrb	r3, [r7, #27]
 8013bbe:	2b2f      	cmp	r3, #47	; 0x2f
 8013bc0:	d006      	beq.n	8013bd0 <create_name+0x54>
 8013bc2:	7efb      	ldrb	r3, [r7, #27]
 8013bc4:	2b5c      	cmp	r3, #92	; 0x5c
 8013bc6:	d110      	bne.n	8013bea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013bc8:	e002      	b.n	8013bd0 <create_name+0x54>
 8013bca:	69fb      	ldr	r3, [r7, #28]
 8013bcc:	3301      	adds	r3, #1
 8013bce:	61fb      	str	r3, [r7, #28]
 8013bd0:	68fa      	ldr	r2, [r7, #12]
 8013bd2:	69fb      	ldr	r3, [r7, #28]
 8013bd4:	4413      	add	r3, r2
 8013bd6:	781b      	ldrb	r3, [r3, #0]
 8013bd8:	2b2f      	cmp	r3, #47	; 0x2f
 8013bda:	d0f6      	beq.n	8013bca <create_name+0x4e>
 8013bdc:	68fa      	ldr	r2, [r7, #12]
 8013bde:	69fb      	ldr	r3, [r7, #28]
 8013be0:	4413      	add	r3, r2
 8013be2:	781b      	ldrb	r3, [r3, #0]
 8013be4:	2b5c      	cmp	r3, #92	; 0x5c
 8013be6:	d0f0      	beq.n	8013bca <create_name+0x4e>
			break;
 8013be8:	e038      	b.n	8013c5c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013bea:	7efb      	ldrb	r3, [r7, #27]
 8013bec:	2b2e      	cmp	r3, #46	; 0x2e
 8013bee:	d003      	beq.n	8013bf8 <create_name+0x7c>
 8013bf0:	693a      	ldr	r2, [r7, #16]
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	d30c      	bcc.n	8013c12 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	2b0b      	cmp	r3, #11
 8013bfc:	d002      	beq.n	8013c04 <create_name+0x88>
 8013bfe:	7efb      	ldrb	r3, [r7, #27]
 8013c00:	2b2e      	cmp	r3, #46	; 0x2e
 8013c02:	d001      	beq.n	8013c08 <create_name+0x8c>
 8013c04:	2306      	movs	r3, #6
 8013c06:	e044      	b.n	8013c92 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013c08:	2308      	movs	r3, #8
 8013c0a:	613b      	str	r3, [r7, #16]
 8013c0c:	230b      	movs	r3, #11
 8013c0e:	617b      	str	r3, [r7, #20]
			continue;
 8013c10:	e022      	b.n	8013c58 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013c12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	da04      	bge.n	8013c24 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013c1a:	7efb      	ldrb	r3, [r7, #27]
 8013c1c:	3b80      	subs	r3, #128	; 0x80
 8013c1e:	4a1f      	ldr	r2, [pc, #124]	; (8013c9c <create_name+0x120>)
 8013c20:	5cd3      	ldrb	r3, [r2, r3]
 8013c22:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013c24:	7efb      	ldrb	r3, [r7, #27]
 8013c26:	4619      	mov	r1, r3
 8013c28:	481d      	ldr	r0, [pc, #116]	; (8013ca0 <create_name+0x124>)
 8013c2a:	f7ff f80e 	bl	8012c4a <chk_chr>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d001      	beq.n	8013c38 <create_name+0xbc>
 8013c34:	2306      	movs	r3, #6
 8013c36:	e02c      	b.n	8013c92 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013c38:	7efb      	ldrb	r3, [r7, #27]
 8013c3a:	2b60      	cmp	r3, #96	; 0x60
 8013c3c:	d905      	bls.n	8013c4a <create_name+0xce>
 8013c3e:	7efb      	ldrb	r3, [r7, #27]
 8013c40:	2b7a      	cmp	r3, #122	; 0x7a
 8013c42:	d802      	bhi.n	8013c4a <create_name+0xce>
 8013c44:	7efb      	ldrb	r3, [r7, #27]
 8013c46:	3b20      	subs	r3, #32
 8013c48:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	1c5a      	adds	r2, r3, #1
 8013c4e:	613a      	str	r2, [r7, #16]
 8013c50:	68ba      	ldr	r2, [r7, #8]
 8013c52:	4413      	add	r3, r2
 8013c54:	7efa      	ldrb	r2, [r7, #27]
 8013c56:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013c58:	e7a6      	b.n	8013ba8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013c5a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013c5c:	68fa      	ldr	r2, [r7, #12]
 8013c5e:	69fb      	ldr	r3, [r7, #28]
 8013c60:	441a      	add	r2, r3
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d101      	bne.n	8013c70 <create_name+0xf4>
 8013c6c:	2306      	movs	r3, #6
 8013c6e:	e010      	b.n	8013c92 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	781b      	ldrb	r3, [r3, #0]
 8013c74:	2be5      	cmp	r3, #229	; 0xe5
 8013c76:	d102      	bne.n	8013c7e <create_name+0x102>
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	2205      	movs	r2, #5
 8013c7c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013c7e:	7efb      	ldrb	r3, [r7, #27]
 8013c80:	2b20      	cmp	r3, #32
 8013c82:	d801      	bhi.n	8013c88 <create_name+0x10c>
 8013c84:	2204      	movs	r2, #4
 8013c86:	e000      	b.n	8013c8a <create_name+0x10e>
 8013c88:	2200      	movs	r2, #0
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	330b      	adds	r3, #11
 8013c8e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013c90:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013c92:	4618      	mov	r0, r3
 8013c94:	3720      	adds	r7, #32
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}
 8013c9a:	bf00      	nop
 8013c9c:	08019694 	.word	0x08019694
 8013ca0:	08019584 	.word	0x08019584

08013ca4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b086      	sub	sp, #24
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
 8013cac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013cb8:	e002      	b.n	8013cc0 <follow_path+0x1c>
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	3301      	adds	r3, #1
 8013cbe:	603b      	str	r3, [r7, #0]
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	781b      	ldrb	r3, [r3, #0]
 8013cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8013cc6:	d0f8      	beq.n	8013cba <follow_path+0x16>
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	2b5c      	cmp	r3, #92	; 0x5c
 8013cce:	d0f4      	beq.n	8013cba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	781b      	ldrb	r3, [r3, #0]
 8013cda:	2b1f      	cmp	r3, #31
 8013cdc:	d80a      	bhi.n	8013cf4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2280      	movs	r2, #128	; 0x80
 8013ce2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013ce6:	2100      	movs	r1, #0
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f7ff fcf9 	bl	80136e0 <dir_sdi>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	75fb      	strb	r3, [r7, #23]
 8013cf2:	e043      	b.n	8013d7c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013cf4:	463b      	mov	r3, r7
 8013cf6:	4619      	mov	r1, r3
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f7ff ff3f 	bl	8013b7c <create_name>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013d02:	7dfb      	ldrb	r3, [r7, #23]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d134      	bne.n	8013d72 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f7ff feaf 	bl	8013a6c <dir_find>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013d18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013d1a:	7dfb      	ldrb	r3, [r7, #23]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d00a      	beq.n	8013d36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013d20:	7dfb      	ldrb	r3, [r7, #23]
 8013d22:	2b04      	cmp	r3, #4
 8013d24:	d127      	bne.n	8013d76 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013d26:	7afb      	ldrb	r3, [r7, #11]
 8013d28:	f003 0304 	and.w	r3, r3, #4
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d122      	bne.n	8013d76 <follow_path+0xd2>
 8013d30:	2305      	movs	r3, #5
 8013d32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013d34:	e01f      	b.n	8013d76 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013d36:	7afb      	ldrb	r3, [r7, #11]
 8013d38:	f003 0304 	and.w	r3, r3, #4
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d11c      	bne.n	8013d7a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	799b      	ldrb	r3, [r3, #6]
 8013d44:	f003 0310 	and.w	r3, r3, #16
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d102      	bne.n	8013d52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013d4c:	2305      	movs	r3, #5
 8013d4e:	75fb      	strb	r3, [r7, #23]
 8013d50:	e014      	b.n	8013d7c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	695b      	ldr	r3, [r3, #20]
 8013d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d60:	4413      	add	r3, r2
 8013d62:	4619      	mov	r1, r3
 8013d64:	68f8      	ldr	r0, [r7, #12]
 8013d66:	f7ff fe42 	bl	80139ee <ld_clust>
 8013d6a:	4602      	mov	r2, r0
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013d70:	e7c0      	b.n	8013cf4 <follow_path+0x50>
			if (res != FR_OK) break;
 8013d72:	bf00      	nop
 8013d74:	e002      	b.n	8013d7c <follow_path+0xd8>
				break;
 8013d76:	bf00      	nop
 8013d78:	e000      	b.n	8013d7c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013d7a:	bf00      	nop
			}
		}
	}

	return res;
 8013d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3718      	adds	r7, #24
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}

08013d86 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013d86:	b480      	push	{r7}
 8013d88:	b087      	sub	sp, #28
 8013d8a:	af00      	add	r7, sp, #0
 8013d8c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d92:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d031      	beq.n	8013e00 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	617b      	str	r3, [r7, #20]
 8013da2:	e002      	b.n	8013daa <get_ldnumber+0x24>
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	3301      	adds	r3, #1
 8013da8:	617b      	str	r3, [r7, #20]
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	2b20      	cmp	r3, #32
 8013db0:	d903      	bls.n	8013dba <get_ldnumber+0x34>
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	781b      	ldrb	r3, [r3, #0]
 8013db6:	2b3a      	cmp	r3, #58	; 0x3a
 8013db8:	d1f4      	bne.n	8013da4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013dba:	697b      	ldr	r3, [r7, #20]
 8013dbc:	781b      	ldrb	r3, [r3, #0]
 8013dbe:	2b3a      	cmp	r3, #58	; 0x3a
 8013dc0:	d11c      	bne.n	8013dfc <get_ldnumber+0x76>
			tp = *path;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	1c5a      	adds	r2, r3, #1
 8013dcc:	60fa      	str	r2, [r7, #12]
 8013dce:	781b      	ldrb	r3, [r3, #0]
 8013dd0:	3b30      	subs	r3, #48	; 0x30
 8013dd2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	2b09      	cmp	r3, #9
 8013dd8:	d80e      	bhi.n	8013df8 <get_ldnumber+0x72>
 8013dda:	68fa      	ldr	r2, [r7, #12]
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	429a      	cmp	r2, r3
 8013de0:	d10a      	bne.n	8013df8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d107      	bne.n	8013df8 <get_ldnumber+0x72>
					vol = (int)i;
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	3301      	adds	r3, #1
 8013df0:	617b      	str	r3, [r7, #20]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	697a      	ldr	r2, [r7, #20]
 8013df6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	e002      	b.n	8013e02 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013e00:	693b      	ldr	r3, [r7, #16]
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	371c      	adds	r7, #28
 8013e06:	46bd      	mov	sp, r7
 8013e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0c:	4770      	bx	lr
	...

08013e10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	70da      	strb	r2, [r3, #3]
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e26:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013e28:	6839      	ldr	r1, [r7, #0]
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f7ff f8d8 	bl	8012fe0 <move_window>
 8013e30:	4603      	mov	r3, r0
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d001      	beq.n	8013e3a <check_fs+0x2a>
 8013e36:	2304      	movs	r3, #4
 8013e38:	e038      	b.n	8013eac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	3330      	adds	r3, #48	; 0x30
 8013e3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7fe fe1c 	bl	8012a80 <ld_word>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013e50:	429a      	cmp	r2, r3
 8013e52:	d001      	beq.n	8013e58 <check_fs+0x48>
 8013e54:	2303      	movs	r3, #3
 8013e56:	e029      	b.n	8013eac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e5e:	2be9      	cmp	r3, #233	; 0xe9
 8013e60:	d009      	beq.n	8013e76 <check_fs+0x66>
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e68:	2beb      	cmp	r3, #235	; 0xeb
 8013e6a:	d11e      	bne.n	8013eaa <check_fs+0x9a>
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8013e72:	2b90      	cmp	r3, #144	; 0x90
 8013e74:	d119      	bne.n	8013eaa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	3330      	adds	r3, #48	; 0x30
 8013e7a:	3336      	adds	r3, #54	; 0x36
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f7fe fe17 	bl	8012ab0 <ld_dword>
 8013e82:	4603      	mov	r3, r0
 8013e84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013e88:	4a0a      	ldr	r2, [pc, #40]	; (8013eb4 <check_fs+0xa4>)
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d101      	bne.n	8013e92 <check_fs+0x82>
 8013e8e:	2300      	movs	r3, #0
 8013e90:	e00c      	b.n	8013eac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	3330      	adds	r3, #48	; 0x30
 8013e96:	3352      	adds	r3, #82	; 0x52
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7fe fe09 	bl	8012ab0 <ld_dword>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	4a05      	ldr	r2, [pc, #20]	; (8013eb8 <check_fs+0xa8>)
 8013ea2:	4293      	cmp	r3, r2
 8013ea4:	d101      	bne.n	8013eaa <check_fs+0x9a>
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	e000      	b.n	8013eac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013eaa:	2302      	movs	r3, #2
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3708      	adds	r7, #8
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	00544146 	.word	0x00544146
 8013eb8:	33544146 	.word	0x33544146

08013ebc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b096      	sub	sp, #88	; 0x58
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	60f8      	str	r0, [r7, #12]
 8013ec4:	60b9      	str	r1, [r7, #8]
 8013ec6:	4613      	mov	r3, r2
 8013ec8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	2200      	movs	r2, #0
 8013ece:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f7ff ff58 	bl	8013d86 <get_ldnumber>
 8013ed6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	da01      	bge.n	8013ee2 <find_volume+0x26>
 8013ede:	230b      	movs	r3, #11
 8013ee0:	e22d      	b.n	801433e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013ee2:	4aa1      	ldr	r2, [pc, #644]	; (8014168 <find_volume+0x2ac>)
 8013ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013eea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d101      	bne.n	8013ef6 <find_volume+0x3a>
 8013ef2:	230c      	movs	r3, #12
 8013ef4:	e223      	b.n	801433e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013efa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013efc:	79fb      	ldrb	r3, [r7, #7]
 8013efe:	f023 0301 	bic.w	r3, r3, #1
 8013f02:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d01a      	beq.n	8013f42 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f0e:	785b      	ldrb	r3, [r3, #1]
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fe fd17 	bl	8012944 <disk_status>
 8013f16:	4603      	mov	r3, r0
 8013f18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013f1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f20:	f003 0301 	and.w	r3, r3, #1
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d10c      	bne.n	8013f42 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013f28:	79fb      	ldrb	r3, [r7, #7]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d007      	beq.n	8013f3e <find_volume+0x82>
 8013f2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f32:	f003 0304 	and.w	r3, r3, #4
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d001      	beq.n	8013f3e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013f3a:	230a      	movs	r3, #10
 8013f3c:	e1ff      	b.n	801433e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8013f3e:	2300      	movs	r3, #0
 8013f40:	e1fd      	b.n	801433e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f44:	2200      	movs	r2, #0
 8013f46:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f4a:	b2da      	uxtb	r2, r3
 8013f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f52:	785b      	ldrb	r3, [r3, #1]
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fe fd0f 	bl	8012978 <disk_initialize>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013f60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f64:	f003 0301 	and.w	r3, r3, #1
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d001      	beq.n	8013f70 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013f6c:	2303      	movs	r3, #3
 8013f6e:	e1e6      	b.n	801433e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013f70:	79fb      	ldrb	r3, [r7, #7]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d007      	beq.n	8013f86 <find_volume+0xca>
 8013f76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f7a:	f003 0304 	and.w	r3, r3, #4
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d001      	beq.n	8013f86 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013f82:	230a      	movs	r3, #10
 8013f84:	e1db      	b.n	801433e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013f86:	2300      	movs	r3, #0
 8013f88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013f8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013f8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013f8e:	f7ff ff3f 	bl	8013e10 <check_fs>
 8013f92:	4603      	mov	r3, r0
 8013f94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013f98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f9c:	2b02      	cmp	r3, #2
 8013f9e:	d149      	bne.n	8014034 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8013fa4:	e01e      	b.n	8013fe4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fae:	011b      	lsls	r3, r3, #4
 8013fb0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013fb4:	4413      	add	r3, r2
 8013fb6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fba:	3304      	adds	r3, #4
 8013fbc:	781b      	ldrb	r3, [r3, #0]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d006      	beq.n	8013fd0 <find_volume+0x114>
 8013fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc4:	3308      	adds	r3, #8
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7fe fd72 	bl	8012ab0 <ld_dword>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	e000      	b.n	8013fd2 <find_volume+0x116>
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fd4:	009b      	lsls	r3, r3, #2
 8013fd6:	3358      	adds	r3, #88	; 0x58
 8013fd8:	443b      	add	r3, r7
 8013fda:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fe0:	3301      	adds	r3, #1
 8013fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8013fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fe6:	2b03      	cmp	r3, #3
 8013fe8:	d9dd      	bls.n	8013fa6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013fea:	2300      	movs	r3, #0
 8013fec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d002      	beq.n	8013ffa <find_volume+0x13e>
 8013ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ff6:	3b01      	subs	r3, #1
 8013ff8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ffc:	009b      	lsls	r3, r3, #2
 8013ffe:	3358      	adds	r3, #88	; 0x58
 8014000:	443b      	add	r3, r7
 8014002:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014006:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801400a:	2b00      	cmp	r3, #0
 801400c:	d005      	beq.n	801401a <find_volume+0x15e>
 801400e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014010:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014012:	f7ff fefd 	bl	8013e10 <check_fs>
 8014016:	4603      	mov	r3, r0
 8014018:	e000      	b.n	801401c <find_volume+0x160>
 801401a:	2303      	movs	r3, #3
 801401c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014024:	2b01      	cmp	r3, #1
 8014026:	d905      	bls.n	8014034 <find_volume+0x178>
 8014028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801402a:	3301      	adds	r3, #1
 801402c:	643b      	str	r3, [r7, #64]	; 0x40
 801402e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014030:	2b03      	cmp	r3, #3
 8014032:	d9e2      	bls.n	8013ffa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014038:	2b04      	cmp	r3, #4
 801403a:	d101      	bne.n	8014040 <find_volume+0x184>
 801403c:	2301      	movs	r3, #1
 801403e:	e17e      	b.n	801433e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014040:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014044:	2b01      	cmp	r3, #1
 8014046:	d901      	bls.n	801404c <find_volume+0x190>
 8014048:	230d      	movs	r3, #13
 801404a:	e178      	b.n	801433e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801404e:	3330      	adds	r3, #48	; 0x30
 8014050:	330b      	adds	r3, #11
 8014052:	4618      	mov	r0, r3
 8014054:	f7fe fd14 	bl	8012a80 <ld_word>
 8014058:	4603      	mov	r3, r0
 801405a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801405e:	d001      	beq.n	8014064 <find_volume+0x1a8>
 8014060:	230d      	movs	r3, #13
 8014062:	e16c      	b.n	801433e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014066:	3330      	adds	r3, #48	; 0x30
 8014068:	3316      	adds	r3, #22
 801406a:	4618      	mov	r0, r3
 801406c:	f7fe fd08 	bl	8012a80 <ld_word>
 8014070:	4603      	mov	r3, r0
 8014072:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014076:	2b00      	cmp	r3, #0
 8014078:	d106      	bne.n	8014088 <find_volume+0x1cc>
 801407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801407c:	3330      	adds	r3, #48	; 0x30
 801407e:	3324      	adds	r3, #36	; 0x24
 8014080:	4618      	mov	r0, r3
 8014082:	f7fe fd15 	bl	8012ab0 <ld_dword>
 8014086:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801408a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801408c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014090:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8014094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014096:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801409a:	789b      	ldrb	r3, [r3, #2]
 801409c:	2b01      	cmp	r3, #1
 801409e:	d005      	beq.n	80140ac <find_volume+0x1f0>
 80140a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a2:	789b      	ldrb	r3, [r3, #2]
 80140a4:	2b02      	cmp	r3, #2
 80140a6:	d001      	beq.n	80140ac <find_volume+0x1f0>
 80140a8:	230d      	movs	r3, #13
 80140aa:	e148      	b.n	801433e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80140ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ae:	789b      	ldrb	r3, [r3, #2]
 80140b0:	461a      	mov	r2, r3
 80140b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140b4:	fb02 f303 	mul.w	r3, r2, r3
 80140b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80140ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80140c0:	b29a      	uxth	r2, r3
 80140c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80140c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c8:	895b      	ldrh	r3, [r3, #10]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d008      	beq.n	80140e0 <find_volume+0x224>
 80140ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d0:	895b      	ldrh	r3, [r3, #10]
 80140d2:	461a      	mov	r2, r3
 80140d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d6:	895b      	ldrh	r3, [r3, #10]
 80140d8:	3b01      	subs	r3, #1
 80140da:	4013      	ands	r3, r2
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d001      	beq.n	80140e4 <find_volume+0x228>
 80140e0:	230d      	movs	r3, #13
 80140e2:	e12c      	b.n	801433e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80140e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e6:	3330      	adds	r3, #48	; 0x30
 80140e8:	3311      	adds	r3, #17
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7fe fcc8 	bl	8012a80 <ld_word>
 80140f0:	4603      	mov	r3, r0
 80140f2:	461a      	mov	r2, r3
 80140f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80140f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140fa:	891b      	ldrh	r3, [r3, #8]
 80140fc:	f003 030f 	and.w	r3, r3, #15
 8014100:	b29b      	uxth	r3, r3
 8014102:	2b00      	cmp	r3, #0
 8014104:	d001      	beq.n	801410a <find_volume+0x24e>
 8014106:	230d      	movs	r3, #13
 8014108:	e119      	b.n	801433e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410c:	3330      	adds	r3, #48	; 0x30
 801410e:	3313      	adds	r3, #19
 8014110:	4618      	mov	r0, r3
 8014112:	f7fe fcb5 	bl	8012a80 <ld_word>
 8014116:	4603      	mov	r3, r0
 8014118:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801411a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801411c:	2b00      	cmp	r3, #0
 801411e:	d106      	bne.n	801412e <find_volume+0x272>
 8014120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014122:	3330      	adds	r3, #48	; 0x30
 8014124:	3320      	adds	r3, #32
 8014126:	4618      	mov	r0, r3
 8014128:	f7fe fcc2 	bl	8012ab0 <ld_dword>
 801412c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014130:	3330      	adds	r3, #48	; 0x30
 8014132:	330e      	adds	r3, #14
 8014134:	4618      	mov	r0, r3
 8014136:	f7fe fca3 	bl	8012a80 <ld_word>
 801413a:	4603      	mov	r3, r0
 801413c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801413e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014140:	2b00      	cmp	r3, #0
 8014142:	d101      	bne.n	8014148 <find_volume+0x28c>
 8014144:	230d      	movs	r3, #13
 8014146:	e0fa      	b.n	801433e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014148:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801414a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801414c:	4413      	add	r3, r2
 801414e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014150:	8912      	ldrh	r2, [r2, #8]
 8014152:	0912      	lsrs	r2, r2, #4
 8014154:	b292      	uxth	r2, r2
 8014156:	4413      	add	r3, r2
 8014158:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801415a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801415e:	429a      	cmp	r2, r3
 8014160:	d204      	bcs.n	801416c <find_volume+0x2b0>
 8014162:	230d      	movs	r3, #13
 8014164:	e0eb      	b.n	801433e <find_volume+0x482>
 8014166:	bf00      	nop
 8014168:	20001330 	.word	0x20001330
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801416c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014170:	1ad3      	subs	r3, r2, r3
 8014172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014174:	8952      	ldrh	r2, [r2, #10]
 8014176:	fbb3 f3f2 	udiv	r3, r3, r2
 801417a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417e:	2b00      	cmp	r3, #0
 8014180:	d101      	bne.n	8014186 <find_volume+0x2ca>
 8014182:	230d      	movs	r3, #13
 8014184:	e0db      	b.n	801433e <find_volume+0x482>
		fmt = FS_FAT32;
 8014186:	2303      	movs	r3, #3
 8014188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014192:	4293      	cmp	r3, r2
 8014194:	d802      	bhi.n	801419c <find_volume+0x2e0>
 8014196:	2302      	movs	r3, #2
 8014198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419e:	f640 72f5 	movw	r2, #4085	; 0xff5
 80141a2:	4293      	cmp	r3, r2
 80141a4:	d802      	bhi.n	80141ac <find_volume+0x2f0>
 80141a6:	2301      	movs	r3, #1
 80141a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80141ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ae:	1c9a      	adds	r2, r3, #2
 80141b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80141b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80141b8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80141ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80141bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141be:	441a      	add	r2, r3
 80141c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80141c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80141c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c8:	441a      	add	r2, r3
 80141ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141cc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80141ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141d2:	2b03      	cmp	r3, #3
 80141d4:	d11e      	bne.n	8014214 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80141d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d8:	3330      	adds	r3, #48	; 0x30
 80141da:	332a      	adds	r3, #42	; 0x2a
 80141dc:	4618      	mov	r0, r3
 80141de:	f7fe fc4f 	bl	8012a80 <ld_word>
 80141e2:	4603      	mov	r3, r0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d001      	beq.n	80141ec <find_volume+0x330>
 80141e8:	230d      	movs	r3, #13
 80141ea:	e0a8      	b.n	801433e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80141ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ee:	891b      	ldrh	r3, [r3, #8]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d001      	beq.n	80141f8 <find_volume+0x33c>
 80141f4:	230d      	movs	r3, #13
 80141f6:	e0a2      	b.n	801433e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80141f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141fa:	3330      	adds	r3, #48	; 0x30
 80141fc:	332c      	adds	r3, #44	; 0x2c
 80141fe:	4618      	mov	r0, r3
 8014200:	f7fe fc56 	bl	8012ab0 <ld_dword>
 8014204:	4602      	mov	r2, r0
 8014206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014208:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801420c:	695b      	ldr	r3, [r3, #20]
 801420e:	009b      	lsls	r3, r3, #2
 8014210:	647b      	str	r3, [r7, #68]	; 0x44
 8014212:	e01f      	b.n	8014254 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014216:	891b      	ldrh	r3, [r3, #8]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d101      	bne.n	8014220 <find_volume+0x364>
 801421c:	230d      	movs	r3, #13
 801421e:	e08e      	b.n	801433e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014222:	6a1a      	ldr	r2, [r3, #32]
 8014224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014226:	441a      	add	r2, r3
 8014228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801422a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801422c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014230:	2b02      	cmp	r3, #2
 8014232:	d103      	bne.n	801423c <find_volume+0x380>
 8014234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014236:	695b      	ldr	r3, [r3, #20]
 8014238:	005b      	lsls	r3, r3, #1
 801423a:	e00a      	b.n	8014252 <find_volume+0x396>
 801423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801423e:	695a      	ldr	r2, [r3, #20]
 8014240:	4613      	mov	r3, r2
 8014242:	005b      	lsls	r3, r3, #1
 8014244:	4413      	add	r3, r2
 8014246:	085a      	lsrs	r2, r3, #1
 8014248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424a:	695b      	ldr	r3, [r3, #20]
 801424c:	f003 0301 	and.w	r3, r3, #1
 8014250:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014252:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014256:	699a      	ldr	r2, [r3, #24]
 8014258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801425a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801425e:	0a5b      	lsrs	r3, r3, #9
 8014260:	429a      	cmp	r2, r3
 8014262:	d201      	bcs.n	8014268 <find_volume+0x3ac>
 8014264:	230d      	movs	r3, #13
 8014266:	e06a      	b.n	801433e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801426a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801426e:	611a      	str	r2, [r3, #16]
 8014270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014272:	691a      	ldr	r2, [r3, #16]
 8014274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014276:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8014278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801427a:	2280      	movs	r2, #128	; 0x80
 801427c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801427e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014282:	2b03      	cmp	r3, #3
 8014284:	d149      	bne.n	801431a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014288:	3330      	adds	r3, #48	; 0x30
 801428a:	3330      	adds	r3, #48	; 0x30
 801428c:	4618      	mov	r0, r3
 801428e:	f7fe fbf7 	bl	8012a80 <ld_word>
 8014292:	4603      	mov	r3, r0
 8014294:	2b01      	cmp	r3, #1
 8014296:	d140      	bne.n	801431a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801429a:	3301      	adds	r3, #1
 801429c:	4619      	mov	r1, r3
 801429e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80142a0:	f7fe fe9e 	bl	8012fe0 <move_window>
 80142a4:	4603      	mov	r3, r0
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d137      	bne.n	801431a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80142aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ac:	2200      	movs	r2, #0
 80142ae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80142b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142b2:	3330      	adds	r3, #48	; 0x30
 80142b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fe fbe1 	bl	8012a80 <ld_word>
 80142be:	4603      	mov	r3, r0
 80142c0:	461a      	mov	r2, r3
 80142c2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d127      	bne.n	801431a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80142ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142cc:	3330      	adds	r3, #48	; 0x30
 80142ce:	4618      	mov	r0, r3
 80142d0:	f7fe fbee 	bl	8012ab0 <ld_dword>
 80142d4:	4603      	mov	r3, r0
 80142d6:	4a1c      	ldr	r2, [pc, #112]	; (8014348 <find_volume+0x48c>)
 80142d8:	4293      	cmp	r3, r2
 80142da:	d11e      	bne.n	801431a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80142dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142de:	3330      	adds	r3, #48	; 0x30
 80142e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7fe fbe3 	bl	8012ab0 <ld_dword>
 80142ea:	4603      	mov	r3, r0
 80142ec:	4a17      	ldr	r2, [pc, #92]	; (801434c <find_volume+0x490>)
 80142ee:	4293      	cmp	r3, r2
 80142f0:	d113      	bne.n	801431a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80142f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f4:	3330      	adds	r3, #48	; 0x30
 80142f6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7fe fbd8 	bl	8012ab0 <ld_dword>
 8014300:	4602      	mov	r2, r0
 8014302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014304:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014308:	3330      	adds	r3, #48	; 0x30
 801430a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801430e:	4618      	mov	r0, r3
 8014310:	f7fe fbce 	bl	8012ab0 <ld_dword>
 8014314:	4602      	mov	r2, r0
 8014316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014318:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801431a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801431c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014320:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014322:	4b0b      	ldr	r3, [pc, #44]	; (8014350 <find_volume+0x494>)
 8014324:	881b      	ldrh	r3, [r3, #0]
 8014326:	3301      	adds	r3, #1
 8014328:	b29a      	uxth	r2, r3
 801432a:	4b09      	ldr	r3, [pc, #36]	; (8014350 <find_volume+0x494>)
 801432c:	801a      	strh	r2, [r3, #0]
 801432e:	4b08      	ldr	r3, [pc, #32]	; (8014350 <find_volume+0x494>)
 8014330:	881a      	ldrh	r2, [r3, #0]
 8014332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014334:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014336:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014338:	f7fe fdea 	bl	8012f10 <clear_lock>
#endif
	return FR_OK;
 801433c:	2300      	movs	r3, #0
}
 801433e:	4618      	mov	r0, r3
 8014340:	3758      	adds	r7, #88	; 0x58
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}
 8014346:	bf00      	nop
 8014348:	41615252 	.word	0x41615252
 801434c:	61417272 	.word	0x61417272
 8014350:	20001334 	.word	0x20001334

08014354 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b084      	sub	sp, #16
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
 801435c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801435e:	2309      	movs	r3, #9
 8014360:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d01c      	beq.n	80143a2 <validate+0x4e>
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d018      	beq.n	80143a2 <validate+0x4e>
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	781b      	ldrb	r3, [r3, #0]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d013      	beq.n	80143a2 <validate+0x4e>
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	889a      	ldrh	r2, [r3, #4]
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	88db      	ldrh	r3, [r3, #6]
 8014384:	429a      	cmp	r2, r3
 8014386:	d10c      	bne.n	80143a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	785b      	ldrb	r3, [r3, #1]
 801438e:	4618      	mov	r0, r3
 8014390:	f7fe fad8 	bl	8012944 <disk_status>
 8014394:	4603      	mov	r3, r0
 8014396:	f003 0301 	and.w	r3, r3, #1
 801439a:	2b00      	cmp	r3, #0
 801439c:	d101      	bne.n	80143a2 <validate+0x4e>
			res = FR_OK;
 801439e:	2300      	movs	r3, #0
 80143a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80143a2:	7bfb      	ldrb	r3, [r7, #15]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d102      	bne.n	80143ae <validate+0x5a>
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	e000      	b.n	80143b0 <validate+0x5c>
 80143ae:	2300      	movs	r3, #0
 80143b0:	683a      	ldr	r2, [r7, #0]
 80143b2:	6013      	str	r3, [r2, #0]
	return res;
 80143b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3710      	adds	r7, #16
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}
	...

080143c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b088      	sub	sp, #32
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	60b9      	str	r1, [r7, #8]
 80143ca:	4613      	mov	r3, r2
 80143cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80143d2:	f107 0310 	add.w	r3, r7, #16
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7ff fcd5 	bl	8013d86 <get_ldnumber>
 80143dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80143de:	69fb      	ldr	r3, [r7, #28]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	da01      	bge.n	80143e8 <f_mount+0x28>
 80143e4:	230b      	movs	r3, #11
 80143e6:	e02b      	b.n	8014440 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80143e8:	4a17      	ldr	r2, [pc, #92]	; (8014448 <f_mount+0x88>)
 80143ea:	69fb      	ldr	r3, [r7, #28]
 80143ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80143f2:	69bb      	ldr	r3, [r7, #24]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d005      	beq.n	8014404 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80143f8:	69b8      	ldr	r0, [r7, #24]
 80143fa:	f7fe fd89 	bl	8012f10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80143fe:	69bb      	ldr	r3, [r7, #24]
 8014400:	2200      	movs	r2, #0
 8014402:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d002      	beq.n	8014410 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	2200      	movs	r2, #0
 801440e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014410:	68fa      	ldr	r2, [r7, #12]
 8014412:	490d      	ldr	r1, [pc, #52]	; (8014448 <f_mount+0x88>)
 8014414:	69fb      	ldr	r3, [r7, #28]
 8014416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d002      	beq.n	8014426 <f_mount+0x66>
 8014420:	79fb      	ldrb	r3, [r7, #7]
 8014422:	2b01      	cmp	r3, #1
 8014424:	d001      	beq.n	801442a <f_mount+0x6a>
 8014426:	2300      	movs	r3, #0
 8014428:	e00a      	b.n	8014440 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801442a:	f107 010c 	add.w	r1, r7, #12
 801442e:	f107 0308 	add.w	r3, r7, #8
 8014432:	2200      	movs	r2, #0
 8014434:	4618      	mov	r0, r3
 8014436:	f7ff fd41 	bl	8013ebc <find_volume>
 801443a:	4603      	mov	r3, r0
 801443c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801443e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014440:	4618      	mov	r0, r3
 8014442:	3720      	adds	r7, #32
 8014444:	46bd      	mov	sp, r7
 8014446:	bd80      	pop	{r7, pc}
 8014448:	20001330 	.word	0x20001330

0801444c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b09a      	sub	sp, #104	; 0x68
 8014450:	af00      	add	r7, sp, #0
 8014452:	60f8      	str	r0, [r7, #12]
 8014454:	60b9      	str	r1, [r7, #8]
 8014456:	4613      	mov	r3, r2
 8014458:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d101      	bne.n	8014464 <f_open+0x18>
 8014460:	2309      	movs	r3, #9
 8014462:	e1ad      	b.n	80147c0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014464:	79fb      	ldrb	r3, [r7, #7]
 8014466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801446a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801446c:	79fa      	ldrb	r2, [r7, #7]
 801446e:	f107 0114 	add.w	r1, r7, #20
 8014472:	f107 0308 	add.w	r3, r7, #8
 8014476:	4618      	mov	r0, r3
 8014478:	f7ff fd20 	bl	8013ebc <find_volume>
 801447c:	4603      	mov	r3, r0
 801447e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8014482:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014486:	2b00      	cmp	r3, #0
 8014488:	f040 8191 	bne.w	80147ae <f_open+0x362>
		dj.obj.fs = fs;
 801448c:	697b      	ldr	r3, [r7, #20]
 801448e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014490:	68ba      	ldr	r2, [r7, #8]
 8014492:	f107 0318 	add.w	r3, r7, #24
 8014496:	4611      	mov	r1, r2
 8014498:	4618      	mov	r0, r3
 801449a:	f7ff fc03 	bl	8013ca4 <follow_path>
 801449e:	4603      	mov	r3, r0
 80144a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80144a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d11a      	bne.n	80144e2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80144ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80144b0:	b25b      	sxtb	r3, r3
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	da03      	bge.n	80144be <f_open+0x72>
				res = FR_INVALID_NAME;
 80144b6:	2306      	movs	r3, #6
 80144b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80144bc:	e011      	b.n	80144e2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80144be:	79fb      	ldrb	r3, [r7, #7]
 80144c0:	f023 0301 	bic.w	r3, r3, #1
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	bf14      	ite	ne
 80144c8:	2301      	movne	r3, #1
 80144ca:	2300      	moveq	r3, #0
 80144cc:	b2db      	uxtb	r3, r3
 80144ce:	461a      	mov	r2, r3
 80144d0:	f107 0318 	add.w	r3, r7, #24
 80144d4:	4611      	mov	r1, r2
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7fe fbd2 	bl	8012c80 <chk_lock>
 80144dc:	4603      	mov	r3, r0
 80144de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80144e2:	79fb      	ldrb	r3, [r7, #7]
 80144e4:	f003 031c 	and.w	r3, r3, #28
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d07f      	beq.n	80145ec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80144ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d017      	beq.n	8014524 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80144f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80144f8:	2b04      	cmp	r3, #4
 80144fa:	d10e      	bne.n	801451a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80144fc:	f7fe fc1c 	bl	8012d38 <enq_lock>
 8014500:	4603      	mov	r3, r0
 8014502:	2b00      	cmp	r3, #0
 8014504:	d006      	beq.n	8014514 <f_open+0xc8>
 8014506:	f107 0318 	add.w	r3, r7, #24
 801450a:	4618      	mov	r0, r3
 801450c:	f7ff fb03 	bl	8013b16 <dir_register>
 8014510:	4603      	mov	r3, r0
 8014512:	e000      	b.n	8014516 <f_open+0xca>
 8014514:	2312      	movs	r3, #18
 8014516:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801451a:	79fb      	ldrb	r3, [r7, #7]
 801451c:	f043 0308 	orr.w	r3, r3, #8
 8014520:	71fb      	strb	r3, [r7, #7]
 8014522:	e010      	b.n	8014546 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014524:	7fbb      	ldrb	r3, [r7, #30]
 8014526:	f003 0311 	and.w	r3, r3, #17
 801452a:	2b00      	cmp	r3, #0
 801452c:	d003      	beq.n	8014536 <f_open+0xea>
					res = FR_DENIED;
 801452e:	2307      	movs	r3, #7
 8014530:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014534:	e007      	b.n	8014546 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014536:	79fb      	ldrb	r3, [r7, #7]
 8014538:	f003 0304 	and.w	r3, r3, #4
 801453c:	2b00      	cmp	r3, #0
 801453e:	d002      	beq.n	8014546 <f_open+0xfa>
 8014540:	2308      	movs	r3, #8
 8014542:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014546:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801454a:	2b00      	cmp	r3, #0
 801454c:	d168      	bne.n	8014620 <f_open+0x1d4>
 801454e:	79fb      	ldrb	r3, [r7, #7]
 8014550:	f003 0308 	and.w	r3, r3, #8
 8014554:	2b00      	cmp	r3, #0
 8014556:	d063      	beq.n	8014620 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014558:	f7fc fbd0 	bl	8010cfc <get_fattime>
 801455c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014560:	330e      	adds	r3, #14
 8014562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014564:	4618      	mov	r0, r3
 8014566:	f7fe fae1 	bl	8012b2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801456c:	3316      	adds	r3, #22
 801456e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014570:	4618      	mov	r0, r3
 8014572:	f7fe fadb 	bl	8012b2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014578:	330b      	adds	r3, #11
 801457a:	2220      	movs	r2, #32
 801457c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014582:	4611      	mov	r1, r2
 8014584:	4618      	mov	r0, r3
 8014586:	f7ff fa32 	bl	80139ee <ld_clust>
 801458a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801458c:	697b      	ldr	r3, [r7, #20]
 801458e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014590:	2200      	movs	r2, #0
 8014592:	4618      	mov	r0, r3
 8014594:	f7ff fa4a 	bl	8013a2c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801459a:	331c      	adds	r3, #28
 801459c:	2100      	movs	r1, #0
 801459e:	4618      	mov	r0, r3
 80145a0:	f7fe fac4 	bl	8012b2c <st_dword>
					fs->wflag = 1;
 80145a4:	697b      	ldr	r3, [r7, #20]
 80145a6:	2201      	movs	r2, #1
 80145a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80145aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d037      	beq.n	8014620 <f_open+0x1d4>
						dw = fs->winsect;
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145b4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80145b6:	f107 0318 	add.w	r3, r7, #24
 80145ba:	2200      	movs	r2, #0
 80145bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80145be:	4618      	mov	r0, r3
 80145c0:	f7fe ff5d 	bl	801347e <remove_chain>
 80145c4:	4603      	mov	r3, r0
 80145c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80145ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d126      	bne.n	8014620 <f_open+0x1d4>
							res = move_window(fs, dw);
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80145d6:	4618      	mov	r0, r3
 80145d8:	f7fe fd02 	bl	8012fe0 <move_window>
 80145dc:	4603      	mov	r3, r0
 80145de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80145e2:	697b      	ldr	r3, [r7, #20]
 80145e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80145e6:	3a01      	subs	r2, #1
 80145e8:	60da      	str	r2, [r3, #12]
 80145ea:	e019      	b.n	8014620 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80145ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d115      	bne.n	8014620 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80145f4:	7fbb      	ldrb	r3, [r7, #30]
 80145f6:	f003 0310 	and.w	r3, r3, #16
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d003      	beq.n	8014606 <f_open+0x1ba>
					res = FR_NO_FILE;
 80145fe:	2304      	movs	r3, #4
 8014600:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014604:	e00c      	b.n	8014620 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014606:	79fb      	ldrb	r3, [r7, #7]
 8014608:	f003 0302 	and.w	r3, r3, #2
 801460c:	2b00      	cmp	r3, #0
 801460e:	d007      	beq.n	8014620 <f_open+0x1d4>
 8014610:	7fbb      	ldrb	r3, [r7, #30]
 8014612:	f003 0301 	and.w	r3, r3, #1
 8014616:	2b00      	cmp	r3, #0
 8014618:	d002      	beq.n	8014620 <f_open+0x1d4>
						res = FR_DENIED;
 801461a:	2307      	movs	r3, #7
 801461c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8014620:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014624:	2b00      	cmp	r3, #0
 8014626:	d128      	bne.n	801467a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014628:	79fb      	ldrb	r3, [r7, #7]
 801462a:	f003 0308 	and.w	r3, r3, #8
 801462e:	2b00      	cmp	r3, #0
 8014630:	d003      	beq.n	801463a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014632:	79fb      	ldrb	r3, [r7, #7]
 8014634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014638:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801463a:	697b      	ldr	r3, [r7, #20]
 801463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014648:	79fb      	ldrb	r3, [r7, #7]
 801464a:	f023 0301 	bic.w	r3, r3, #1
 801464e:	2b00      	cmp	r3, #0
 8014650:	bf14      	ite	ne
 8014652:	2301      	movne	r3, #1
 8014654:	2300      	moveq	r3, #0
 8014656:	b2db      	uxtb	r3, r3
 8014658:	461a      	mov	r2, r3
 801465a:	f107 0318 	add.w	r3, r7, #24
 801465e:	4611      	mov	r1, r2
 8014660:	4618      	mov	r0, r3
 8014662:	f7fe fb8b 	bl	8012d7c <inc_lock>
 8014666:	4602      	mov	r2, r0
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	691b      	ldr	r3, [r3, #16]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d102      	bne.n	801467a <f_open+0x22e>
 8014674:	2302      	movs	r3, #2
 8014676:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801467a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801467e:	2b00      	cmp	r3, #0
 8014680:	f040 8095 	bne.w	80147ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014688:	4611      	mov	r1, r2
 801468a:	4618      	mov	r0, r3
 801468c:	f7ff f9af 	bl	80139ee <ld_clust>
 8014690:	4602      	mov	r2, r0
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014698:	331c      	adds	r3, #28
 801469a:	4618      	mov	r0, r3
 801469c:	f7fe fa08 	bl	8012ab0 <ld_dword>
 80146a0:	4602      	mov	r2, r0
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	2200      	movs	r2, #0
 80146aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80146ac:	697a      	ldr	r2, [r7, #20]
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	88da      	ldrh	r2, [r3, #6]
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	79fa      	ldrb	r2, [r7, #7]
 80146be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	2200      	movs	r2, #0
 80146c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	2200      	movs	r2, #0
 80146ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	2200      	movs	r2, #0
 80146d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	3330      	adds	r3, #48	; 0x30
 80146d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80146da:	2100      	movs	r1, #0
 80146dc:	4618      	mov	r0, r3
 80146de:	f7fe fa72 	bl	8012bc6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80146e2:	79fb      	ldrb	r3, [r7, #7]
 80146e4:	f003 0320 	and.w	r3, r3, #32
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d060      	beq.n	80147ae <f_open+0x362>
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	68db      	ldr	r3, [r3, #12]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d05c      	beq.n	80147ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	68da      	ldr	r2, [r3, #12]
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	895b      	ldrh	r3, [r3, #10]
 8014700:	025b      	lsls	r3, r3, #9
 8014702:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	689b      	ldr	r3, [r3, #8]
 8014708:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014710:	e016      	b.n	8014740 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014716:	4618      	mov	r0, r3
 8014718:	f7fe fd1d 	bl	8013156 <get_fat>
 801471c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801471e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014720:	2b01      	cmp	r3, #1
 8014722:	d802      	bhi.n	801472a <f_open+0x2de>
 8014724:	2302      	movs	r3, #2
 8014726:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801472a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801472c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014730:	d102      	bne.n	8014738 <f_open+0x2ec>
 8014732:	2301      	movs	r3, #1
 8014734:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014738:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801473a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801473c:	1ad3      	subs	r3, r2, r3
 801473e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014740:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014744:	2b00      	cmp	r3, #0
 8014746:	d103      	bne.n	8014750 <f_open+0x304>
 8014748:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801474a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801474c:	429a      	cmp	r2, r3
 801474e:	d8e0      	bhi.n	8014712 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014754:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014756:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801475a:	2b00      	cmp	r3, #0
 801475c:	d127      	bne.n	80147ae <f_open+0x362>
 801475e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014764:	2b00      	cmp	r3, #0
 8014766:	d022      	beq.n	80147ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014768:	697b      	ldr	r3, [r7, #20]
 801476a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801476c:	4618      	mov	r0, r3
 801476e:	f7fe fcd3 	bl	8013118 <clust2sect>
 8014772:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014776:	2b00      	cmp	r3, #0
 8014778:	d103      	bne.n	8014782 <f_open+0x336>
						res = FR_INT_ERR;
 801477a:	2302      	movs	r3, #2
 801477c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014780:	e015      	b.n	80147ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014784:	0a5a      	lsrs	r2, r3, #9
 8014786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014788:	441a      	add	r2, r3
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	7858      	ldrb	r0, [r3, #1]
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	6a1a      	ldr	r2, [r3, #32]
 801479c:	2301      	movs	r3, #1
 801479e:	f7fe f911 	bl	80129c4 <disk_read>
 80147a2:	4603      	mov	r3, r0
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d002      	beq.n	80147ae <f_open+0x362>
 80147a8:	2301      	movs	r3, #1
 80147aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80147ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d002      	beq.n	80147bc <f_open+0x370>
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	2200      	movs	r2, #0
 80147ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80147bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80147c0:	4618      	mov	r0, r3
 80147c2:	3768      	adds	r7, #104	; 0x68
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b08e      	sub	sp, #56	; 0x38
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	60f8      	str	r0, [r7, #12]
 80147d0:	60b9      	str	r1, [r7, #8]
 80147d2:	607a      	str	r2, [r7, #4]
 80147d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	2200      	movs	r2, #0
 80147de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	f107 0214 	add.w	r2, r7, #20
 80147e6:	4611      	mov	r1, r2
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7ff fdb3 	bl	8014354 <validate>
 80147ee:	4603      	mov	r3, r0
 80147f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80147f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d107      	bne.n	801480c <f_read+0x44>
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	7d5b      	ldrb	r3, [r3, #21]
 8014800:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014804:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014808:	2b00      	cmp	r3, #0
 801480a:	d002      	beq.n	8014812 <f_read+0x4a>
 801480c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014810:	e115      	b.n	8014a3e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	7d1b      	ldrb	r3, [r3, #20]
 8014816:	f003 0301 	and.w	r3, r3, #1
 801481a:	2b00      	cmp	r3, #0
 801481c:	d101      	bne.n	8014822 <f_read+0x5a>
 801481e:	2307      	movs	r3, #7
 8014820:	e10d      	b.n	8014a3e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	68da      	ldr	r2, [r3, #12]
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	699b      	ldr	r3, [r3, #24]
 801482a:	1ad3      	subs	r3, r2, r3
 801482c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	6a3b      	ldr	r3, [r7, #32]
 8014832:	429a      	cmp	r2, r3
 8014834:	f240 80fe 	bls.w	8014a34 <f_read+0x26c>
 8014838:	6a3b      	ldr	r3, [r7, #32]
 801483a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801483c:	e0fa      	b.n	8014a34 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	699b      	ldr	r3, [r3, #24]
 8014842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014846:	2b00      	cmp	r3, #0
 8014848:	f040 80c6 	bne.w	80149d8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	699b      	ldr	r3, [r3, #24]
 8014850:	0a5b      	lsrs	r3, r3, #9
 8014852:	697a      	ldr	r2, [r7, #20]
 8014854:	8952      	ldrh	r2, [r2, #10]
 8014856:	3a01      	subs	r2, #1
 8014858:	4013      	ands	r3, r2
 801485a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801485c:	69fb      	ldr	r3, [r7, #28]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d12f      	bne.n	80148c2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	699b      	ldr	r3, [r3, #24]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d103      	bne.n	8014872 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	689b      	ldr	r3, [r3, #8]
 801486e:	633b      	str	r3, [r7, #48]	; 0x30
 8014870:	e013      	b.n	801489a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014876:	2b00      	cmp	r3, #0
 8014878:	d007      	beq.n	801488a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	699b      	ldr	r3, [r3, #24]
 801487e:	4619      	mov	r1, r3
 8014880:	68f8      	ldr	r0, [r7, #12]
 8014882:	f7fe fef9 	bl	8013678 <clmt_clust>
 8014886:	6338      	str	r0, [r7, #48]	; 0x30
 8014888:	e007      	b.n	801489a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801488a:	68fa      	ldr	r2, [r7, #12]
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	69db      	ldr	r3, [r3, #28]
 8014890:	4619      	mov	r1, r3
 8014892:	4610      	mov	r0, r2
 8014894:	f7fe fc5f 	bl	8013156 <get_fat>
 8014898:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801489c:	2b01      	cmp	r3, #1
 801489e:	d804      	bhi.n	80148aa <f_read+0xe2>
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	2202      	movs	r2, #2
 80148a4:	755a      	strb	r2, [r3, #21]
 80148a6:	2302      	movs	r3, #2
 80148a8:	e0c9      	b.n	8014a3e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80148aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148b0:	d104      	bne.n	80148bc <f_read+0xf4>
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	2201      	movs	r2, #1
 80148b6:	755a      	strb	r2, [r3, #21]
 80148b8:	2301      	movs	r3, #1
 80148ba:	e0c0      	b.n	8014a3e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80148c2:	697a      	ldr	r2, [r7, #20]
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	69db      	ldr	r3, [r3, #28]
 80148c8:	4619      	mov	r1, r3
 80148ca:	4610      	mov	r0, r2
 80148cc:	f7fe fc24 	bl	8013118 <clust2sect>
 80148d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80148d2:	69bb      	ldr	r3, [r7, #24]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d104      	bne.n	80148e2 <f_read+0x11a>
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2202      	movs	r2, #2
 80148dc:	755a      	strb	r2, [r3, #21]
 80148de:	2302      	movs	r3, #2
 80148e0:	e0ad      	b.n	8014a3e <f_read+0x276>
			sect += csect;
 80148e2:	69ba      	ldr	r2, [r7, #24]
 80148e4:	69fb      	ldr	r3, [r7, #28]
 80148e6:	4413      	add	r3, r2
 80148e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	0a5b      	lsrs	r3, r3, #9
 80148ee:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80148f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d039      	beq.n	801496a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80148f6:	69fa      	ldr	r2, [r7, #28]
 80148f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148fa:	4413      	add	r3, r2
 80148fc:	697a      	ldr	r2, [r7, #20]
 80148fe:	8952      	ldrh	r2, [r2, #10]
 8014900:	4293      	cmp	r3, r2
 8014902:	d905      	bls.n	8014910 <f_read+0x148>
					cc = fs->csize - csect;
 8014904:	697b      	ldr	r3, [r7, #20]
 8014906:	895b      	ldrh	r3, [r3, #10]
 8014908:	461a      	mov	r2, r3
 801490a:	69fb      	ldr	r3, [r7, #28]
 801490c:	1ad3      	subs	r3, r2, r3
 801490e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014910:	697b      	ldr	r3, [r7, #20]
 8014912:	7858      	ldrb	r0, [r3, #1]
 8014914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014916:	69ba      	ldr	r2, [r7, #24]
 8014918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801491a:	f7fe f853 	bl	80129c4 <disk_read>
 801491e:	4603      	mov	r3, r0
 8014920:	2b00      	cmp	r3, #0
 8014922:	d004      	beq.n	801492e <f_read+0x166>
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	2201      	movs	r2, #1
 8014928:	755a      	strb	r2, [r3, #21]
 801492a:	2301      	movs	r3, #1
 801492c:	e087      	b.n	8014a3e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	7d1b      	ldrb	r3, [r3, #20]
 8014932:	b25b      	sxtb	r3, r3
 8014934:	2b00      	cmp	r3, #0
 8014936:	da14      	bge.n	8014962 <f_read+0x19a>
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	6a1a      	ldr	r2, [r3, #32]
 801493c:	69bb      	ldr	r3, [r7, #24]
 801493e:	1ad3      	subs	r3, r2, r3
 8014940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014942:	429a      	cmp	r2, r3
 8014944:	d90d      	bls.n	8014962 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	6a1a      	ldr	r2, [r3, #32]
 801494a:	69bb      	ldr	r3, [r7, #24]
 801494c:	1ad3      	subs	r3, r2, r3
 801494e:	025b      	lsls	r3, r3, #9
 8014950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014952:	18d0      	adds	r0, r2, r3
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	3330      	adds	r3, #48	; 0x30
 8014958:	f44f 7200 	mov.w	r2, #512	; 0x200
 801495c:	4619      	mov	r1, r3
 801495e:	f7fe f911 	bl	8012b84 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014964:	025b      	lsls	r3, r3, #9
 8014966:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014968:	e050      	b.n	8014a0c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	6a1b      	ldr	r3, [r3, #32]
 801496e:	69ba      	ldr	r2, [r7, #24]
 8014970:	429a      	cmp	r2, r3
 8014972:	d02e      	beq.n	80149d2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	7d1b      	ldrb	r3, [r3, #20]
 8014978:	b25b      	sxtb	r3, r3
 801497a:	2b00      	cmp	r3, #0
 801497c:	da18      	bge.n	80149b0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	7858      	ldrb	r0, [r3, #1]
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	6a1a      	ldr	r2, [r3, #32]
 801498c:	2301      	movs	r3, #1
 801498e:	f7fe f839 	bl	8012a04 <disk_write>
 8014992:	4603      	mov	r3, r0
 8014994:	2b00      	cmp	r3, #0
 8014996:	d004      	beq.n	80149a2 <f_read+0x1da>
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	2201      	movs	r2, #1
 801499c:	755a      	strb	r2, [r3, #21]
 801499e:	2301      	movs	r3, #1
 80149a0:	e04d      	b.n	8014a3e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	7d1b      	ldrb	r3, [r3, #20]
 80149a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149aa:	b2da      	uxtb	r2, r3
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	7858      	ldrb	r0, [r3, #1]
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80149ba:	2301      	movs	r3, #1
 80149bc:	69ba      	ldr	r2, [r7, #24]
 80149be:	f7fe f801 	bl	80129c4 <disk_read>
 80149c2:	4603      	mov	r3, r0
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d004      	beq.n	80149d2 <f_read+0x20a>
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	2201      	movs	r2, #1
 80149cc:	755a      	strb	r2, [r3, #21]
 80149ce:	2301      	movs	r3, #1
 80149d0:	e035      	b.n	8014a3e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	69ba      	ldr	r2, [r7, #24]
 80149d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	699b      	ldr	r3, [r3, #24]
 80149dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80149e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80149e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	429a      	cmp	r2, r3
 80149ec:	d901      	bls.n	80149f2 <f_read+0x22a>
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	699b      	ldr	r3, [r3, #24]
 80149fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a00:	4413      	add	r3, r2
 8014a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a04:	4619      	mov	r1, r3
 8014a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a08:	f7fe f8bc 	bl	8012b84 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a10:	4413      	add	r3, r2
 8014a12:	627b      	str	r3, [r7, #36]	; 0x24
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	699a      	ldr	r2, [r3, #24]
 8014a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a1a:	441a      	add	r2, r3
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	619a      	str	r2, [r3, #24]
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a26:	441a      	add	r2, r3
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	601a      	str	r2, [r3, #0]
 8014a2c:	687a      	ldr	r2, [r7, #4]
 8014a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a30:	1ad3      	subs	r3, r2, r3
 8014a32:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	f47f af01 	bne.w	801483e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014a3c:	2300      	movs	r3, #0
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3738      	adds	r7, #56	; 0x38
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}

08014a46 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014a46:	b580      	push	{r7, lr}
 8014a48:	b08c      	sub	sp, #48	; 0x30
 8014a4a:	af00      	add	r7, sp, #0
 8014a4c:	60f8      	str	r0, [r7, #12]
 8014a4e:	60b9      	str	r1, [r7, #8]
 8014a50:	607a      	str	r2, [r7, #4]
 8014a52:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	f107 0210 	add.w	r2, r7, #16
 8014a64:	4611      	mov	r1, r2
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7ff fc74 	bl	8014354 <validate>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d107      	bne.n	8014a8a <f_write+0x44>
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	7d5b      	ldrb	r3, [r3, #21]
 8014a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d002      	beq.n	8014a90 <f_write+0x4a>
 8014a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a8e:	e14b      	b.n	8014d28 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	7d1b      	ldrb	r3, [r3, #20]
 8014a94:	f003 0302 	and.w	r3, r3, #2
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d101      	bne.n	8014aa0 <f_write+0x5a>
 8014a9c:	2307      	movs	r3, #7
 8014a9e:	e143      	b.n	8014d28 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	699a      	ldr	r2, [r3, #24]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	441a      	add	r2, r3
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	699b      	ldr	r3, [r3, #24]
 8014aac:	429a      	cmp	r2, r3
 8014aae:	f080 812d 	bcs.w	8014d0c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	699b      	ldr	r3, [r3, #24]
 8014ab6:	43db      	mvns	r3, r3
 8014ab8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014aba:	e127      	b.n	8014d0c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	699b      	ldr	r3, [r3, #24]
 8014ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	f040 80e3 	bne.w	8014c90 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	699b      	ldr	r3, [r3, #24]
 8014ace:	0a5b      	lsrs	r3, r3, #9
 8014ad0:	693a      	ldr	r2, [r7, #16]
 8014ad2:	8952      	ldrh	r2, [r2, #10]
 8014ad4:	3a01      	subs	r2, #1
 8014ad6:	4013      	ands	r3, r2
 8014ad8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014ada:	69bb      	ldr	r3, [r7, #24]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d143      	bne.n	8014b68 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	699b      	ldr	r3, [r3, #24]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d10c      	bne.n	8014b02 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	689b      	ldr	r3, [r3, #8]
 8014aec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d11a      	bne.n	8014b2a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	2100      	movs	r1, #0
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7fe fd25 	bl	8013548 <create_chain>
 8014afe:	62b8      	str	r0, [r7, #40]	; 0x28
 8014b00:	e013      	b.n	8014b2a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d007      	beq.n	8014b1a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	699b      	ldr	r3, [r3, #24]
 8014b0e:	4619      	mov	r1, r3
 8014b10:	68f8      	ldr	r0, [r7, #12]
 8014b12:	f7fe fdb1 	bl	8013678 <clmt_clust>
 8014b16:	62b8      	str	r0, [r7, #40]	; 0x28
 8014b18:	e007      	b.n	8014b2a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014b1a:	68fa      	ldr	r2, [r7, #12]
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	69db      	ldr	r3, [r3, #28]
 8014b20:	4619      	mov	r1, r3
 8014b22:	4610      	mov	r0, r2
 8014b24:	f7fe fd10 	bl	8013548 <create_chain>
 8014b28:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	f000 80f2 	beq.w	8014d16 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b34:	2b01      	cmp	r3, #1
 8014b36:	d104      	bne.n	8014b42 <f_write+0xfc>
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	2202      	movs	r2, #2
 8014b3c:	755a      	strb	r2, [r3, #21]
 8014b3e:	2302      	movs	r3, #2
 8014b40:	e0f2      	b.n	8014d28 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b48:	d104      	bne.n	8014b54 <f_write+0x10e>
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	755a      	strb	r2, [r3, #21]
 8014b50:	2301      	movs	r3, #1
 8014b52:	e0e9      	b.n	8014d28 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b58:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	689b      	ldr	r3, [r3, #8]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d102      	bne.n	8014b68 <f_write+0x122>
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b66:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	7d1b      	ldrb	r3, [r3, #20]
 8014b6c:	b25b      	sxtb	r3, r3
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	da18      	bge.n	8014ba4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	7858      	ldrb	r0, [r3, #1]
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	6a1a      	ldr	r2, [r3, #32]
 8014b80:	2301      	movs	r3, #1
 8014b82:	f7fd ff3f 	bl	8012a04 <disk_write>
 8014b86:	4603      	mov	r3, r0
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d004      	beq.n	8014b96 <f_write+0x150>
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	2201      	movs	r2, #1
 8014b90:	755a      	strb	r2, [r3, #21]
 8014b92:	2301      	movs	r3, #1
 8014b94:	e0c8      	b.n	8014d28 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	7d1b      	ldrb	r3, [r3, #20]
 8014b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b9e:	b2da      	uxtb	r2, r3
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014ba4:	693a      	ldr	r2, [r7, #16]
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	69db      	ldr	r3, [r3, #28]
 8014baa:	4619      	mov	r1, r3
 8014bac:	4610      	mov	r0, r2
 8014bae:	f7fe fab3 	bl	8013118 <clust2sect>
 8014bb2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d104      	bne.n	8014bc4 <f_write+0x17e>
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	2202      	movs	r2, #2
 8014bbe:	755a      	strb	r2, [r3, #21]
 8014bc0:	2302      	movs	r3, #2
 8014bc2:	e0b1      	b.n	8014d28 <f_write+0x2e2>
			sect += csect;
 8014bc4:	697a      	ldr	r2, [r7, #20]
 8014bc6:	69bb      	ldr	r3, [r7, #24]
 8014bc8:	4413      	add	r3, r2
 8014bca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	0a5b      	lsrs	r3, r3, #9
 8014bd0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014bd2:	6a3b      	ldr	r3, [r7, #32]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d03c      	beq.n	8014c52 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014bd8:	69ba      	ldr	r2, [r7, #24]
 8014bda:	6a3b      	ldr	r3, [r7, #32]
 8014bdc:	4413      	add	r3, r2
 8014bde:	693a      	ldr	r2, [r7, #16]
 8014be0:	8952      	ldrh	r2, [r2, #10]
 8014be2:	4293      	cmp	r3, r2
 8014be4:	d905      	bls.n	8014bf2 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014be6:	693b      	ldr	r3, [r7, #16]
 8014be8:	895b      	ldrh	r3, [r3, #10]
 8014bea:	461a      	mov	r2, r3
 8014bec:	69bb      	ldr	r3, [r7, #24]
 8014bee:	1ad3      	subs	r3, r2, r3
 8014bf0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014bf2:	693b      	ldr	r3, [r7, #16]
 8014bf4:	7858      	ldrb	r0, [r3, #1]
 8014bf6:	6a3b      	ldr	r3, [r7, #32]
 8014bf8:	697a      	ldr	r2, [r7, #20]
 8014bfa:	69f9      	ldr	r1, [r7, #28]
 8014bfc:	f7fd ff02 	bl	8012a04 <disk_write>
 8014c00:	4603      	mov	r3, r0
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d004      	beq.n	8014c10 <f_write+0x1ca>
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	2201      	movs	r2, #1
 8014c0a:	755a      	strb	r2, [r3, #21]
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	e08b      	b.n	8014d28 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	6a1a      	ldr	r2, [r3, #32]
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	1ad3      	subs	r3, r2, r3
 8014c18:	6a3a      	ldr	r2, [r7, #32]
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	d915      	bls.n	8014c4a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	6a1a      	ldr	r2, [r3, #32]
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	1ad3      	subs	r3, r2, r3
 8014c2c:	025b      	lsls	r3, r3, #9
 8014c2e:	69fa      	ldr	r2, [r7, #28]
 8014c30:	4413      	add	r3, r2
 8014c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c36:	4619      	mov	r1, r3
 8014c38:	f7fd ffa4 	bl	8012b84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	7d1b      	ldrb	r3, [r3, #20]
 8014c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c44:	b2da      	uxtb	r2, r3
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014c4a:	6a3b      	ldr	r3, [r7, #32]
 8014c4c:	025b      	lsls	r3, r3, #9
 8014c4e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014c50:	e03f      	b.n	8014cd2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	6a1b      	ldr	r3, [r3, #32]
 8014c56:	697a      	ldr	r2, [r7, #20]
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	d016      	beq.n	8014c8a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	699a      	ldr	r2, [r3, #24]
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d210      	bcs.n	8014c8a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014c68:	693b      	ldr	r3, [r7, #16]
 8014c6a:	7858      	ldrb	r0, [r3, #1]
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014c72:	2301      	movs	r3, #1
 8014c74:	697a      	ldr	r2, [r7, #20]
 8014c76:	f7fd fea5 	bl	80129c4 <disk_read>
 8014c7a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d004      	beq.n	8014c8a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	2201      	movs	r2, #1
 8014c84:	755a      	strb	r2, [r3, #21]
 8014c86:	2301      	movs	r3, #1
 8014c88:	e04e      	b.n	8014d28 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	697a      	ldr	r2, [r7, #20]
 8014c8e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	699b      	ldr	r3, [r3, #24]
 8014c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014c9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	429a      	cmp	r2, r3
 8014ca4:	d901      	bls.n	8014caa <f_write+0x264>
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	699b      	ldr	r3, [r3, #24]
 8014cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014cb8:	4413      	add	r3, r2
 8014cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cbc:	69f9      	ldr	r1, [r7, #28]
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f7fd ff60 	bl	8012b84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	7d1b      	ldrb	r3, [r3, #20]
 8014cc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014ccc:	b2da      	uxtb	r2, r3
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014cd2:	69fa      	ldr	r2, [r7, #28]
 8014cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd6:	4413      	add	r3, r2
 8014cd8:	61fb      	str	r3, [r7, #28]
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	699a      	ldr	r2, [r3, #24]
 8014cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce0:	441a      	add	r2, r3
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	619a      	str	r2, [r3, #24]
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	68da      	ldr	r2, [r3, #12]
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	699b      	ldr	r3, [r3, #24]
 8014cee:	429a      	cmp	r2, r3
 8014cf0:	bf38      	it	cc
 8014cf2:	461a      	movcc	r2, r3
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	60da      	str	r2, [r3, #12]
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	681a      	ldr	r2, [r3, #0]
 8014cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cfe:	441a      	add	r2, r3
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	601a      	str	r2, [r3, #0]
 8014d04:	687a      	ldr	r2, [r7, #4]
 8014d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d08:	1ad3      	subs	r3, r2, r3
 8014d0a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	f47f aed4 	bne.w	8014abc <f_write+0x76>
 8014d14:	e000      	b.n	8014d18 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014d16:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	7d1b      	ldrb	r3, [r3, #20]
 8014d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d20:	b2da      	uxtb	r2, r3
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014d26:	2300      	movs	r3, #0
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	3730      	adds	r7, #48	; 0x30
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}

08014d30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b086      	sub	sp, #24
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f107 0208 	add.w	r2, r7, #8
 8014d3e:	4611      	mov	r1, r2
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7ff fb07 	bl	8014354 <validate>
 8014d46:	4603      	mov	r3, r0
 8014d48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014d4a:	7dfb      	ldrb	r3, [r7, #23]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d168      	bne.n	8014e22 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	7d1b      	ldrb	r3, [r3, #20]
 8014d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d062      	beq.n	8014e22 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	7d1b      	ldrb	r3, [r3, #20]
 8014d60:	b25b      	sxtb	r3, r3
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	da15      	bge.n	8014d92 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	7858      	ldrb	r0, [r3, #1]
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	6a1a      	ldr	r2, [r3, #32]
 8014d74:	2301      	movs	r3, #1
 8014d76:	f7fd fe45 	bl	8012a04 <disk_write>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d001      	beq.n	8014d84 <f_sync+0x54>
 8014d80:	2301      	movs	r3, #1
 8014d82:	e04f      	b.n	8014e24 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	7d1b      	ldrb	r3, [r3, #20]
 8014d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d8c:	b2da      	uxtb	r2, r3
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014d92:	f7fb ffb3 	bl	8010cfc <get_fattime>
 8014d96:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014d98:	68ba      	ldr	r2, [r7, #8]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d9e:	4619      	mov	r1, r3
 8014da0:	4610      	mov	r0, r2
 8014da2:	f7fe f91d 	bl	8012fe0 <move_window>
 8014da6:	4603      	mov	r3, r0
 8014da8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014daa:	7dfb      	ldrb	r3, [r7, #23]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d138      	bne.n	8014e22 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014db4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	330b      	adds	r3, #11
 8014dba:	781a      	ldrb	r2, [r3, #0]
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	330b      	adds	r3, #11
 8014dc0:	f042 0220 	orr.w	r2, r2, #32
 8014dc4:	b2d2      	uxtb	r2, r2
 8014dc6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6818      	ldr	r0, [r3, #0]
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	689b      	ldr	r3, [r3, #8]
 8014dd0:	461a      	mov	r2, r3
 8014dd2:	68f9      	ldr	r1, [r7, #12]
 8014dd4:	f7fe fe2a 	bl	8013a2c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	f103 021c 	add.w	r2, r3, #28
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	68db      	ldr	r3, [r3, #12]
 8014de2:	4619      	mov	r1, r3
 8014de4:	4610      	mov	r0, r2
 8014de6:	f7fd fea1 	bl	8012b2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	3316      	adds	r3, #22
 8014dee:	6939      	ldr	r1, [r7, #16]
 8014df0:	4618      	mov	r0, r3
 8014df2:	f7fd fe9b 	bl	8012b2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	3312      	adds	r3, #18
 8014dfa:	2100      	movs	r1, #0
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7fd fe7a 	bl	8012af6 <st_word>
					fs->wflag = 1;
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	2201      	movs	r2, #1
 8014e06:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7fe f916 	bl	801303c <sync_fs>
 8014e10:	4603      	mov	r3, r0
 8014e12:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	7d1b      	ldrb	r3, [r3, #20]
 8014e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014e1c:	b2da      	uxtb	r2, r3
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3718      	adds	r7, #24
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}

08014e2c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b084      	sub	sp, #16
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f7ff ff7b 	bl	8014d30 <f_sync>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014e3e:	7bfb      	ldrb	r3, [r7, #15]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d118      	bne.n	8014e76 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	f107 0208 	add.w	r2, r7, #8
 8014e4a:	4611      	mov	r1, r2
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7ff fa81 	bl	8014354 <validate>
 8014e52:	4603      	mov	r3, r0
 8014e54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014e56:	7bfb      	ldrb	r3, [r7, #15]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d10c      	bne.n	8014e76 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	691b      	ldr	r3, [r3, #16]
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7fe f819 	bl	8012e98 <dec_lock>
 8014e66:	4603      	mov	r3, r0
 8014e68:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014e6a:	7bfb      	ldrb	r3, [r7, #15]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d102      	bne.n	8014e76 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	2200      	movs	r2, #0
 8014e74:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e78:	4618      	mov	r0, r3
 8014e7a:	3710      	adds	r7, #16
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}

08014e80 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8014e80:	b590      	push	{r4, r7, lr}
 8014e82:	b09d      	sub	sp, #116	; 0x74
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	60f8      	str	r0, [r7, #12]
 8014e88:	607a      	str	r2, [r7, #4]
 8014e8a:	603b      	str	r3, [r7, #0]
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8014e90:	2301      	movs	r3, #1
 8014e92:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8014e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014e98:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8014e9a:	f107 030c 	add.w	r3, r7, #12
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f7fe ff71 	bl	8013d86 <get_ldnumber>
 8014ea4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	da02      	bge.n	8014eb2 <f_mkfs+0x32>
 8014eac:	230b      	movs	r3, #11
 8014eae:	f000 bc0d 	b.w	80156cc <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8014eb2:	4a94      	ldr	r2, [pc, #592]	; (8015104 <f_mkfs+0x284>)
 8014eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d005      	beq.n	8014eca <f_mkfs+0x4a>
 8014ebe:	4a91      	ldr	r2, [pc, #580]	; (8015104 <f_mkfs+0x284>)
 8014ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8014eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ecc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8014ed6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7fd fd4c 	bl	8012978 <disk_initialize>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8014ee6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8014eea:	f003 0301 	and.w	r3, r3, #1
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d001      	beq.n	8014ef6 <f_mkfs+0x76>
 8014ef2:	2303      	movs	r3, #3
 8014ef4:	e3ea      	b.n	80156cc <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8014ef6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8014efa:	f003 0304 	and.w	r3, r3, #4
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d001      	beq.n	8014f06 <f_mkfs+0x86>
 8014f02:	230a      	movs	r3, #10
 8014f04:	e3e2      	b.n	80156cc <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8014f06:	f107 0214 	add.w	r2, r7, #20
 8014f0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014f0e:	2103      	movs	r1, #3
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7fd fd97 	bl	8012a44 <disk_ioctl>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d10c      	bne.n	8014f36 <f_mkfs+0xb6>
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d009      	beq.n	8014f36 <f_mkfs+0xb6>
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014f28:	d805      	bhi.n	8014f36 <f_mkfs+0xb6>
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	1e5a      	subs	r2, r3, #1
 8014f2e:	697b      	ldr	r3, [r7, #20]
 8014f30:	4013      	ands	r3, r2
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d001      	beq.n	8014f3a <f_mkfs+0xba>
 8014f36:	2301      	movs	r3, #1
 8014f38:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8014f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f3e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d003      	beq.n	8014f4e <f_mkfs+0xce>
 8014f46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d309      	bcc.n	8014f62 <f_mkfs+0xe2>
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014f54:	d805      	bhi.n	8014f62 <f_mkfs+0xe2>
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	1e5a      	subs	r2, r3, #1
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	4013      	ands	r3, r2
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d001      	beq.n	8014f66 <f_mkfs+0xe6>
 8014f62:	2313      	movs	r3, #19
 8014f64:	e3b2      	b.n	80156cc <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8014f66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014f68:	687a      	ldr	r2, [r7, #4]
 8014f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f6e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8014f74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014f76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8014f80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f84:	fb02 f303 	mul.w	r3, r2, r3
 8014f88:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8014f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d101      	bne.n	8014f94 <f_mkfs+0x114>
 8014f90:	230e      	movs	r3, #14
 8014f92:	e39b      	b.n	80156cc <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8014f94:	f107 0210 	add.w	r2, r7, #16
 8014f98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014f9c:	2101      	movs	r1, #1
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7fd fd50 	bl	8012a44 <disk_ioctl>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d001      	beq.n	8014fae <f_mkfs+0x12e>
 8014faa:	2301      	movs	r3, #1
 8014fac:	e38e      	b.n	80156cc <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8014fae:	7afb      	ldrb	r3, [r7, #11]
 8014fb0:	f003 0308 	and.w	r3, r3, #8
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d001      	beq.n	8014fbc <f_mkfs+0x13c>
 8014fb8:	2300      	movs	r3, #0
 8014fba:	e000      	b.n	8014fbe <f_mkfs+0x13e>
 8014fbc:	233f      	movs	r3, #63	; 0x3f
 8014fbe:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d901      	bls.n	8014fcc <f_mkfs+0x14c>
 8014fc8:	230e      	movs	r3, #14
 8014fca:	e37f      	b.n	80156cc <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8014fcc:	693a      	ldr	r2, [r7, #16]
 8014fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd0:	1ad3      	subs	r3, r2, r3
 8014fd2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8014fd8:	d801      	bhi.n	8014fde <f_mkfs+0x15e>
 8014fda:	230e      	movs	r3, #14
 8014fdc:	e376      	b.n	80156cc <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	2b80      	cmp	r3, #128	; 0x80
 8014fe2:	d901      	bls.n	8014fe8 <f_mkfs+0x168>
 8014fe4:	2313      	movs	r3, #19
 8014fe6:	e371      	b.n	80156cc <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8014fe8:	7afb      	ldrb	r3, [r7, #11]
 8014fea:	f003 0302 	and.w	r3, r3, #2
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d00d      	beq.n	801500e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8014ff2:	7afb      	ldrb	r3, [r7, #11]
 8014ff4:	f003 0307 	and.w	r3, r3, #7
 8014ff8:	2b02      	cmp	r3, #2
 8014ffa:	d004      	beq.n	8015006 <f_mkfs+0x186>
 8014ffc:	7afb      	ldrb	r3, [r7, #11]
 8014ffe:	f003 0301 	and.w	r3, r3, #1
 8015002:	2b00      	cmp	r3, #0
 8015004:	d103      	bne.n	801500e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8015006:	2303      	movs	r3, #3
 8015008:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801500c:	e009      	b.n	8015022 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 801500e:	7afb      	ldrb	r3, [r7, #11]
 8015010:	f003 0301 	and.w	r3, r3, #1
 8015014:	2b00      	cmp	r3, #0
 8015016:	d101      	bne.n	801501c <f_mkfs+0x19c>
 8015018:	2313      	movs	r3, #19
 801501a:	e357      	b.n	80156cc <f_mkfs+0x84c>
		fmt = FS_FAT16;
 801501c:	2302      	movs	r3, #2
 801501e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8015026:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801502a:	2b03      	cmp	r3, #3
 801502c:	d13c      	bne.n	80150a8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801502e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015030:	2b00      	cmp	r3, #0
 8015032:	d11b      	bne.n	801506c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8015034:	693b      	ldr	r3, [r7, #16]
 8015036:	0c5b      	lsrs	r3, r3, #17
 8015038:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801503a:	2300      	movs	r3, #0
 801503c:	64bb      	str	r3, [r7, #72]	; 0x48
 801503e:	2301      	movs	r3, #1
 8015040:	653b      	str	r3, [r7, #80]	; 0x50
 8015042:	e005      	b.n	8015050 <f_mkfs+0x1d0>
 8015044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015046:	3301      	adds	r3, #1
 8015048:	64bb      	str	r3, [r7, #72]	; 0x48
 801504a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801504c:	005b      	lsls	r3, r3, #1
 801504e:	653b      	str	r3, [r7, #80]	; 0x50
 8015050:	4a2d      	ldr	r2, [pc, #180]	; (8015108 <f_mkfs+0x288>)
 8015052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d007      	beq.n	801506c <f_mkfs+0x1ec>
 801505c:	4a2a      	ldr	r2, [pc, #168]	; (8015108 <f_mkfs+0x288>)
 801505e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015064:	461a      	mov	r2, r3
 8015066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015068:	4293      	cmp	r3, r2
 801506a:	d2eb      	bcs.n	8015044 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 801506c:	693a      	ldr	r2, [r7, #16]
 801506e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015070:	fbb2 f3f3 	udiv	r3, r2, r3
 8015074:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8015076:	6a3b      	ldr	r3, [r7, #32]
 8015078:	3302      	adds	r3, #2
 801507a:	009a      	lsls	r2, r3, #2
 801507c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801507e:	4413      	add	r3, r2
 8015080:	1e5a      	subs	r2, r3, #1
 8015082:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015084:	fbb2 f3f3 	udiv	r3, r2, r3
 8015088:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 801508a:	2320      	movs	r3, #32
 801508c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 801508e:	2300      	movs	r3, #0
 8015090:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8015092:	6a3b      	ldr	r3, [r7, #32]
 8015094:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015098:	4293      	cmp	r3, r2
 801509a:	d903      	bls.n	80150a4 <f_mkfs+0x224>
 801509c:	6a3b      	ldr	r3, [r7, #32]
 801509e:	4a1b      	ldr	r2, [pc, #108]	; (801510c <f_mkfs+0x28c>)
 80150a0:	4293      	cmp	r3, r2
 80150a2:	d952      	bls.n	801514a <f_mkfs+0x2ca>
 80150a4:	230e      	movs	r3, #14
 80150a6:	e311      	b.n	80156cc <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80150a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d11b      	bne.n	80150e6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	0b1b      	lsrs	r3, r3, #12
 80150b2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80150b4:	2300      	movs	r3, #0
 80150b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80150b8:	2301      	movs	r3, #1
 80150ba:	653b      	str	r3, [r7, #80]	; 0x50
 80150bc:	e005      	b.n	80150ca <f_mkfs+0x24a>
 80150be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150c0:	3301      	adds	r3, #1
 80150c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80150c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150c6:	005b      	lsls	r3, r3, #1
 80150c8:	653b      	str	r3, [r7, #80]	; 0x50
 80150ca:	4a11      	ldr	r2, [pc, #68]	; (8015110 <f_mkfs+0x290>)
 80150cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d007      	beq.n	80150e6 <f_mkfs+0x266>
 80150d6:	4a0e      	ldr	r2, [pc, #56]	; (8015110 <f_mkfs+0x290>)
 80150d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80150de:	461a      	mov	r2, r3
 80150e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80150e2:	4293      	cmp	r3, r2
 80150e4:	d2eb      	bcs.n	80150be <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80150e6:	693a      	ldr	r2, [r7, #16]
 80150e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80150ee:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80150f0:	6a3b      	ldr	r3, [r7, #32]
 80150f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80150f6:	4293      	cmp	r3, r2
 80150f8:	d90c      	bls.n	8015114 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80150fa:	6a3b      	ldr	r3, [r7, #32]
 80150fc:	3302      	adds	r3, #2
 80150fe:	005b      	lsls	r3, r3, #1
 8015100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015102:	e012      	b.n	801512a <f_mkfs+0x2aa>
 8015104:	20001330 	.word	0x20001330
 8015108:	08019714 	.word	0x08019714
 801510c:	0ffffff5 	.word	0x0ffffff5
 8015110:	08019724 	.word	0x08019724
				} else {
					fmt = FS_FAT12;
 8015114:	2301      	movs	r3, #1
 8015116:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 801511a:	6a3a      	ldr	r2, [r7, #32]
 801511c:	4613      	mov	r3, r2
 801511e:	005b      	lsls	r3, r3, #1
 8015120:	4413      	add	r3, r2
 8015122:	3301      	adds	r3, #1
 8015124:	085b      	lsrs	r3, r3, #1
 8015126:	3303      	adds	r3, #3
 8015128:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801512a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801512c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801512e:	4413      	add	r3, r2
 8015130:	1e5a      	subs	r2, r3, #1
 8015132:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015134:	fbb2 f3f3 	udiv	r3, r2, r3
 8015138:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 801513a:	2301      	movs	r3, #1
 801513c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801513e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015140:	015a      	lsls	r2, r3, #5
 8015142:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015144:	fbb2 f3f3 	udiv	r3, r2, r3
 8015148:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801514c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801514e:	4413      	add	r3, r2
 8015150:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8015152:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015156:	fb03 f202 	mul.w	r2, r3, r2
 801515a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801515c:	4413      	add	r3, r2
 801515e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015160:	4413      	add	r3, r2
 8015162:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8015164:	697a      	ldr	r2, [r7, #20]
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	4413      	add	r3, r2
 801516a:	1e5a      	subs	r2, r3, #1
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	425b      	negs	r3, r3
 8015170:	401a      	ands	r2, r3
 8015172:	69fb      	ldr	r3, [r7, #28]
 8015174:	1ad3      	subs	r3, r2, r3
 8015176:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8015178:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801517c:	2b03      	cmp	r3, #3
 801517e:	d108      	bne.n	8015192 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8015180:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015184:	4413      	add	r3, r2
 8015186:	657b      	str	r3, [r7, #84]	; 0x54
 8015188:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801518a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801518c:	4413      	add	r3, r2
 801518e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015190:	e006      	b.n	80151a0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8015192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015196:	fbb2 f3f3 	udiv	r3, r2, r3
 801519a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801519c:	4413      	add	r3, r2
 801519e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80151a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151a2:	011a      	lsls	r2, r3, #4
 80151a4:	69fb      	ldr	r3, [r7, #28]
 80151a6:	441a      	add	r2, r3
 80151a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151aa:	1ad2      	subs	r2, r2, r3
 80151ac:	693b      	ldr	r3, [r7, #16]
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d901      	bls.n	80151b6 <f_mkfs+0x336>
 80151b2:	230e      	movs	r3, #14
 80151b4:	e28a      	b.n	80156cc <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80151b6:	693a      	ldr	r2, [r7, #16]
 80151b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151ba:	1ad2      	subs	r2, r2, r3
 80151bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80151c0:	fb01 f303 	mul.w	r3, r1, r3
 80151c4:	1ad2      	subs	r2, r2, r3
 80151c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151c8:	1ad2      	subs	r2, r2, r3
 80151ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80151d0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80151d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80151d6:	2b03      	cmp	r3, #3
 80151d8:	d10f      	bne.n	80151fa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80151da:	6a3b      	ldr	r3, [r7, #32]
 80151dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80151e0:	4293      	cmp	r3, r2
 80151e2:	d80a      	bhi.n	80151fa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d105      	bne.n	80151f6 <f_mkfs+0x376>
 80151ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151ec:	085b      	lsrs	r3, r3, #1
 80151ee:	607b      	str	r3, [r7, #4]
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d144      	bne.n	8015280 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80151f6:	230e      	movs	r3, #14
 80151f8:	e268      	b.n	80156cc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80151fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80151fe:	2b02      	cmp	r3, #2
 8015200:	d133      	bne.n	801526a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8015202:	6a3b      	ldr	r3, [r7, #32]
 8015204:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015208:	4293      	cmp	r3, r2
 801520a:	d91e      	bls.n	801524a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d107      	bne.n	8015222 <f_mkfs+0x3a2>
 8015212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015214:	005b      	lsls	r3, r3, #1
 8015216:	2b40      	cmp	r3, #64	; 0x40
 8015218:	d803      	bhi.n	8015222 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 801521a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801521c:	005b      	lsls	r3, r3, #1
 801521e:	607b      	str	r3, [r7, #4]
 8015220:	e033      	b.n	801528a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8015222:	7afb      	ldrb	r3, [r7, #11]
 8015224:	f003 0302 	and.w	r3, r3, #2
 8015228:	2b00      	cmp	r3, #0
 801522a:	d003      	beq.n	8015234 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 801522c:	2303      	movs	r3, #3
 801522e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015232:	e02a      	b.n	801528a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d105      	bne.n	8015246 <f_mkfs+0x3c6>
 801523a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801523c:	005b      	lsls	r3, r3, #1
 801523e:	607b      	str	r3, [r7, #4]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2b80      	cmp	r3, #128	; 0x80
 8015244:	d91e      	bls.n	8015284 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8015246:	230e      	movs	r3, #14
 8015248:	e240      	b.n	80156cc <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 801524a:	6a3b      	ldr	r3, [r7, #32]
 801524c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015250:	4293      	cmp	r3, r2
 8015252:	d80a      	bhi.n	801526a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d105      	bne.n	8015266 <f_mkfs+0x3e6>
 801525a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801525c:	005b      	lsls	r3, r3, #1
 801525e:	607b      	str	r3, [r7, #4]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2b80      	cmp	r3, #128	; 0x80
 8015264:	d910      	bls.n	8015288 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8015266:	230e      	movs	r3, #14
 8015268:	e230      	b.n	80156cc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 801526a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801526e:	2b01      	cmp	r3, #1
 8015270:	d10c      	bne.n	801528c <f_mkfs+0x40c>
 8015272:	6a3b      	ldr	r3, [r7, #32]
 8015274:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015278:	4293      	cmp	r3, r2
 801527a:	d907      	bls.n	801528c <f_mkfs+0x40c>
 801527c:	230e      	movs	r3, #14
 801527e:	e225      	b.n	80156cc <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8015280:	bf00      	nop
 8015282:	e6ce      	b.n	8015022 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015284:	bf00      	nop
 8015286:	e6cc      	b.n	8015022 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8015288:	bf00      	nop
			pau = au;
 801528a:	e6ca      	b.n	8015022 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 801528c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801528e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015290:	461a      	mov	r2, r3
 8015292:	2100      	movs	r1, #0
 8015294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015296:	f7fd fc96 	bl	8012bc6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 801529a:	220b      	movs	r2, #11
 801529c:	49b2      	ldr	r1, [pc, #712]	; (8015568 <f_mkfs+0x6e8>)
 801529e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152a0:	f7fd fc70 	bl	8012b84 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80152a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a6:	330b      	adds	r3, #11
 80152a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80152aa:	4611      	mov	r1, r2
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7fd fc22 	bl	8012af6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80152b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b4:	330d      	adds	r3, #13
 80152b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80152b8:	b2d2      	uxtb	r2, r2
 80152ba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80152bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152be:	330e      	adds	r3, #14
 80152c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80152c2:	b292      	uxth	r2, r2
 80152c4:	4611      	mov	r1, r2
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7fd fc15 	bl	8012af6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80152cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ce:	3310      	adds	r3, #16
 80152d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80152d2:	b2d2      	uxtb	r2, r2
 80152d4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80152d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d8:	f103 0211 	add.w	r2, r3, #17
 80152dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80152e0:	2b03      	cmp	r3, #3
 80152e2:	d002      	beq.n	80152ea <f_mkfs+0x46a>
 80152e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80152e6:	b29b      	uxth	r3, r3
 80152e8:	e000      	b.n	80152ec <f_mkfs+0x46c>
 80152ea:	2300      	movs	r3, #0
 80152ec:	4619      	mov	r1, r3
 80152ee:	4610      	mov	r0, r2
 80152f0:	f7fd fc01 	bl	8012af6 <st_word>
		if (sz_vol < 0x10000) {
 80152f4:	693b      	ldr	r3, [r7, #16]
 80152f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152fa:	d208      	bcs.n	801530e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80152fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152fe:	3313      	adds	r3, #19
 8015300:	693a      	ldr	r2, [r7, #16]
 8015302:	b292      	uxth	r2, r2
 8015304:	4611      	mov	r1, r2
 8015306:	4618      	mov	r0, r3
 8015308:	f7fd fbf5 	bl	8012af6 <st_word>
 801530c:	e006      	b.n	801531c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015310:	3320      	adds	r3, #32
 8015312:	693a      	ldr	r2, [r7, #16]
 8015314:	4611      	mov	r1, r2
 8015316:	4618      	mov	r0, r3
 8015318:	f7fd fc08 	bl	8012b2c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 801531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801531e:	3315      	adds	r3, #21
 8015320:	22f8      	movs	r2, #248	; 0xf8
 8015322:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8015324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015326:	3318      	adds	r3, #24
 8015328:	213f      	movs	r1, #63	; 0x3f
 801532a:	4618      	mov	r0, r3
 801532c:	f7fd fbe3 	bl	8012af6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8015330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015332:	331a      	adds	r3, #26
 8015334:	21ff      	movs	r1, #255	; 0xff
 8015336:	4618      	mov	r0, r3
 8015338:	f7fd fbdd 	bl	8012af6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 801533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801533e:	331c      	adds	r3, #28
 8015340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015342:	4618      	mov	r0, r3
 8015344:	f7fd fbf2 	bl	8012b2c <st_dword>
		if (fmt == FS_FAT32) {
 8015348:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801534c:	2b03      	cmp	r3, #3
 801534e:	d131      	bne.n	80153b4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8015350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015352:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8015356:	f7fb fcd1 	bl	8010cfc <get_fattime>
 801535a:	4603      	mov	r3, r0
 801535c:	4619      	mov	r1, r3
 801535e:	4620      	mov	r0, r4
 8015360:	f7fd fbe4 	bl	8012b2c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8015364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015366:	3324      	adds	r3, #36	; 0x24
 8015368:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801536a:	4618      	mov	r0, r3
 801536c:	f7fd fbde 	bl	8012b2c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8015370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015372:	332c      	adds	r3, #44	; 0x2c
 8015374:	2102      	movs	r1, #2
 8015376:	4618      	mov	r0, r3
 8015378:	f7fd fbd8 	bl	8012b2c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 801537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801537e:	3330      	adds	r3, #48	; 0x30
 8015380:	2101      	movs	r1, #1
 8015382:	4618      	mov	r0, r3
 8015384:	f7fd fbb7 	bl	8012af6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8015388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538a:	3332      	adds	r3, #50	; 0x32
 801538c:	2106      	movs	r1, #6
 801538e:	4618      	mov	r0, r3
 8015390:	f7fd fbb1 	bl	8012af6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8015394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015396:	3340      	adds	r3, #64	; 0x40
 8015398:	2280      	movs	r2, #128	; 0x80
 801539a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 801539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801539e:	3342      	adds	r3, #66	; 0x42
 80153a0:	2229      	movs	r2, #41	; 0x29
 80153a2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80153a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a6:	3347      	adds	r3, #71	; 0x47
 80153a8:	2213      	movs	r2, #19
 80153aa:	4970      	ldr	r1, [pc, #448]	; (801556c <f_mkfs+0x6ec>)
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7fd fbe9 	bl	8012b84 <mem_cpy>
 80153b2:	e020      	b.n	80153f6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80153b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80153ba:	f7fb fc9f 	bl	8010cfc <get_fattime>
 80153be:	4603      	mov	r3, r0
 80153c0:	4619      	mov	r1, r3
 80153c2:	4620      	mov	r0, r4
 80153c4:	f7fd fbb2 	bl	8012b2c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80153c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ca:	3316      	adds	r3, #22
 80153cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80153ce:	b292      	uxth	r2, r2
 80153d0:	4611      	mov	r1, r2
 80153d2:	4618      	mov	r0, r3
 80153d4:	f7fd fb8f 	bl	8012af6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80153d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153da:	3324      	adds	r3, #36	; 0x24
 80153dc:	2280      	movs	r2, #128	; 0x80
 80153de:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80153e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e2:	3326      	adds	r3, #38	; 0x26
 80153e4:	2229      	movs	r2, #41	; 0x29
 80153e6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80153e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ea:	332b      	adds	r3, #43	; 0x2b
 80153ec:	2213      	movs	r2, #19
 80153ee:	4960      	ldr	r1, [pc, #384]	; (8015570 <f_mkfs+0x6f0>)
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7fd fbc7 	bl	8012b84 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80153f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80153fc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015400:	4618      	mov	r0, r3
 8015402:	f7fd fb78 	bl	8012af6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8015406:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801540a:	2301      	movs	r3, #1
 801540c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801540e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015410:	f7fd faf8 	bl	8012a04 <disk_write>
 8015414:	4603      	mov	r3, r0
 8015416:	2b00      	cmp	r3, #0
 8015418:	d001      	beq.n	801541e <f_mkfs+0x59e>
 801541a:	2301      	movs	r3, #1
 801541c:	e156      	b.n	80156cc <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801541e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015422:	2b03      	cmp	r3, #3
 8015424:	d140      	bne.n	80154a8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8015426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015428:	1d9a      	adds	r2, r3, #6
 801542a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801542e:	2301      	movs	r3, #1
 8015430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015432:	f7fd fae7 	bl	8012a04 <disk_write>
			mem_set(buf, 0, ss);
 8015436:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015438:	461a      	mov	r2, r3
 801543a:	2100      	movs	r1, #0
 801543c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801543e:	f7fd fbc2 	bl	8012bc6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8015442:	494c      	ldr	r1, [pc, #304]	; (8015574 <f_mkfs+0x6f4>)
 8015444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015446:	f7fd fb71 	bl	8012b2c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 801544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801544c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015450:	4949      	ldr	r1, [pc, #292]	; (8015578 <f_mkfs+0x6f8>)
 8015452:	4618      	mov	r0, r3
 8015454:	f7fd fb6a 	bl	8012b2c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8015458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801545a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801545e:	6a3b      	ldr	r3, [r7, #32]
 8015460:	3b01      	subs	r3, #1
 8015462:	4619      	mov	r1, r3
 8015464:	4610      	mov	r0, r2
 8015466:	f7fd fb61 	bl	8012b2c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 801546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801546c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015470:	2102      	movs	r1, #2
 8015472:	4618      	mov	r0, r3
 8015474:	f7fd fb5a 	bl	8012b2c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8015478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801547a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801547e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015482:	4618      	mov	r0, r3
 8015484:	f7fd fb37 	bl	8012af6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8015488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548a:	1dda      	adds	r2, r3, #7
 801548c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015490:	2301      	movs	r3, #1
 8015492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015494:	f7fd fab6 	bl	8012a04 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8015498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801549a:	1c5a      	adds	r2, r3, #1
 801549c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80154a0:	2301      	movs	r3, #1
 80154a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80154a4:	f7fd faae 	bl	8012a04 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80154a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154aa:	2100      	movs	r1, #0
 80154ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154ae:	f7fd fb8a 	bl	8012bc6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80154b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80154b4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80154b6:	2300      	movs	r3, #0
 80154b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80154ba:	e04b      	b.n	8015554 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80154bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80154c0:	2b03      	cmp	r3, #3
 80154c2:	d113      	bne.n	80154ec <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80154c4:	f06f 0107 	mvn.w	r1, #7
 80154c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154ca:	f7fd fb2f 	bl	8012b2c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80154ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d0:	3304      	adds	r3, #4
 80154d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7fd fb28 	bl	8012b2c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80154dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154de:	3308      	adds	r3, #8
 80154e0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80154e4:	4618      	mov	r0, r3
 80154e6:	f7fd fb21 	bl	8012b2c <st_dword>
 80154ea:	e00b      	b.n	8015504 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80154ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80154f0:	2b01      	cmp	r3, #1
 80154f2:	d101      	bne.n	80154f8 <f_mkfs+0x678>
 80154f4:	4b21      	ldr	r3, [pc, #132]	; (801557c <f_mkfs+0x6fc>)
 80154f6:	e001      	b.n	80154fc <f_mkfs+0x67c>
 80154f8:	f06f 0307 	mvn.w	r3, #7
 80154fc:	4619      	mov	r1, r3
 80154fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015500:	f7fd fb14 	bl	8012b2c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8015504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015506:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8015508:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801550c:	4293      	cmp	r3, r2
 801550e:	bf28      	it	cs
 8015510:	4613      	movcs	r3, r2
 8015512:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8015514:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801551a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801551c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801551e:	f7fd fa71 	bl	8012a04 <disk_write>
 8015522:	4603      	mov	r3, r0
 8015524:	2b00      	cmp	r3, #0
 8015526:	d001      	beq.n	801552c <f_mkfs+0x6ac>
 8015528:	2301      	movs	r3, #1
 801552a:	e0cf      	b.n	80156cc <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 801552c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801552e:	461a      	mov	r2, r3
 8015530:	2100      	movs	r1, #0
 8015532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015534:	f7fd fb47 	bl	8012bc6 <mem_set>
				sect += n; nsect -= n;
 8015538:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801553a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801553c:	4413      	add	r3, r2
 801553e:	667b      	str	r3, [r7, #100]	; 0x64
 8015540:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015544:	1ad3      	subs	r3, r2, r3
 8015546:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8015548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801554a:	2b00      	cmp	r3, #0
 801554c:	d1dc      	bne.n	8015508 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801554e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015550:	3301      	adds	r3, #1
 8015552:	64bb      	str	r3, [r7, #72]	; 0x48
 8015554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015558:	429a      	cmp	r2, r3
 801555a:	d3af      	bcc.n	80154bc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 801555c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015560:	2b03      	cmp	r3, #3
 8015562:	d10d      	bne.n	8015580 <f_mkfs+0x700>
 8015564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015566:	e00c      	b.n	8015582 <f_mkfs+0x702>
 8015568:	08019594 	.word	0x08019594
 801556c:	080195a0 	.word	0x080195a0
 8015570:	080195b4 	.word	0x080195b4
 8015574:	41615252 	.word	0x41615252
 8015578:	61417272 	.word	0x61417272
 801557c:	00fffff8 	.word	0x00fffff8
 8015580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015582:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8015584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015588:	4293      	cmp	r3, r2
 801558a:	bf28      	it	cs
 801558c:	4613      	movcs	r3, r2
 801558e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8015590:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8015594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015596:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015598:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801559a:	f7fd fa33 	bl	8012a04 <disk_write>
 801559e:	4603      	mov	r3, r0
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d001      	beq.n	80155a8 <f_mkfs+0x728>
 80155a4:	2301      	movs	r3, #1
 80155a6:	e091      	b.n	80156cc <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80155a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80155aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155ac:	4413      	add	r3, r2
 80155ae:	667b      	str	r3, [r7, #100]	; 0x64
 80155b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80155b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155b4:	1ad3      	subs	r3, r2, r3
 80155b6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80155b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d1e2      	bne.n	8015584 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80155be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80155c2:	2b03      	cmp	r3, #3
 80155c4:	d103      	bne.n	80155ce <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80155c6:	230c      	movs	r3, #12
 80155c8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80155cc:	e010      	b.n	80155f0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155d4:	d303      	bcc.n	80155de <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80155d6:	2306      	movs	r3, #6
 80155d8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80155dc:	e008      	b.n	80155f0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80155de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80155e2:	2b02      	cmp	r3, #2
 80155e4:	d101      	bne.n	80155ea <f_mkfs+0x76a>
 80155e6:	2304      	movs	r3, #4
 80155e8:	e000      	b.n	80155ec <f_mkfs+0x76c>
 80155ea:	2301      	movs	r3, #1
 80155ec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80155f0:	7afb      	ldrb	r3, [r7, #11]
 80155f2:	f003 0308 	and.w	r3, r3, #8
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d15b      	bne.n	80156b2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80155fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80155fc:	461a      	mov	r2, r3
 80155fe:	2100      	movs	r1, #0
 8015600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015602:	f7fd fae0 	bl	8012bc6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8015606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015608:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801560c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015610:	4618      	mov	r0, r3
 8015612:	f7fd fa70 	bl	8012af6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8015616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015618:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801561c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801561e:	69bb      	ldr	r3, [r7, #24]
 8015620:	2200      	movs	r2, #0
 8015622:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8015624:	69bb      	ldr	r3, [r7, #24]
 8015626:	3301      	adds	r3, #1
 8015628:	2201      	movs	r2, #1
 801562a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 801562c:	69bb      	ldr	r3, [r7, #24]
 801562e:	3302      	adds	r3, #2
 8015630:	2201      	movs	r2, #1
 8015632:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8015634:	69bb      	ldr	r3, [r7, #24]
 8015636:	3303      	adds	r3, #3
 8015638:	2200      	movs	r2, #0
 801563a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 801563c:	69bb      	ldr	r3, [r7, #24]
 801563e:	3304      	adds	r3, #4
 8015640:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8015644:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8015646:	693a      	ldr	r2, [r7, #16]
 8015648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801564a:	441a      	add	r2, r3
 801564c:	4b21      	ldr	r3, [pc, #132]	; (80156d4 <f_mkfs+0x854>)
 801564e:	fba3 1302 	umull	r1, r3, r3, r2
 8015652:	1ad2      	subs	r2, r2, r3
 8015654:	0852      	lsrs	r2, r2, #1
 8015656:	4413      	add	r3, r2
 8015658:	0b5b      	lsrs	r3, r3, #13
 801565a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 801565c:	69bb      	ldr	r3, [r7, #24]
 801565e:	3305      	adds	r3, #5
 8015660:	22fe      	movs	r2, #254	; 0xfe
 8015662:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8015664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015666:	089b      	lsrs	r3, r3, #2
 8015668:	b2da      	uxtb	r2, r3
 801566a:	69bb      	ldr	r3, [r7, #24]
 801566c:	3306      	adds	r3, #6
 801566e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8015672:	b2d2      	uxtb	r2, r2
 8015674:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8015676:	69bb      	ldr	r3, [r7, #24]
 8015678:	3307      	adds	r3, #7
 801567a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801567c:	b2d2      	uxtb	r2, r2
 801567e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	3308      	adds	r3, #8
 8015684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015686:	4618      	mov	r0, r3
 8015688:	f7fd fa50 	bl	8012b2c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 801568c:	69bb      	ldr	r3, [r7, #24]
 801568e:	330c      	adds	r3, #12
 8015690:	693a      	ldr	r2, [r7, #16]
 8015692:	4611      	mov	r1, r2
 8015694:	4618      	mov	r0, r3
 8015696:	f7fd fa49 	bl	8012b2c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801569a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801569e:	2301      	movs	r3, #1
 80156a0:	2200      	movs	r2, #0
 80156a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80156a4:	f7fd f9ae 	bl	8012a04 <disk_write>
 80156a8:	4603      	mov	r3, r0
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d001      	beq.n	80156b2 <f_mkfs+0x832>
 80156ae:	2301      	movs	r3, #1
 80156b0:	e00c      	b.n	80156cc <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80156b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80156b6:	2200      	movs	r2, #0
 80156b8:	2100      	movs	r1, #0
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7fd f9c2 	bl	8012a44 <disk_ioctl>
 80156c0:	4603      	mov	r3, r0
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d001      	beq.n	80156ca <f_mkfs+0x84a>
 80156c6:	2301      	movs	r3, #1
 80156c8:	e000      	b.n	80156cc <f_mkfs+0x84c>

	return FR_OK;
 80156ca:	2300      	movs	r3, #0
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	3774      	adds	r7, #116	; 0x74
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd90      	pop	{r4, r7, pc}
 80156d4:	0515565b 	.word	0x0515565b

080156d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80156d8:	b480      	push	{r7}
 80156da:	b087      	sub	sp, #28
 80156dc:	af00      	add	r7, sp, #0
 80156de:	60f8      	str	r0, [r7, #12]
 80156e0:	60b9      	str	r1, [r7, #8]
 80156e2:	4613      	mov	r3, r2
 80156e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80156e6:	2301      	movs	r3, #1
 80156e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80156ea:	2300      	movs	r3, #0
 80156ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80156ee:	4b1f      	ldr	r3, [pc, #124]	; (801576c <FATFS_LinkDriverEx+0x94>)
 80156f0:	7a5b      	ldrb	r3, [r3, #9]
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d131      	bne.n	801575c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80156f8:	4b1c      	ldr	r3, [pc, #112]	; (801576c <FATFS_LinkDriverEx+0x94>)
 80156fa:	7a5b      	ldrb	r3, [r3, #9]
 80156fc:	b2db      	uxtb	r3, r3
 80156fe:	461a      	mov	r2, r3
 8015700:	4b1a      	ldr	r3, [pc, #104]	; (801576c <FATFS_LinkDriverEx+0x94>)
 8015702:	2100      	movs	r1, #0
 8015704:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015706:	4b19      	ldr	r3, [pc, #100]	; (801576c <FATFS_LinkDriverEx+0x94>)
 8015708:	7a5b      	ldrb	r3, [r3, #9]
 801570a:	b2db      	uxtb	r3, r3
 801570c:	4a17      	ldr	r2, [pc, #92]	; (801576c <FATFS_LinkDriverEx+0x94>)
 801570e:	009b      	lsls	r3, r3, #2
 8015710:	4413      	add	r3, r2
 8015712:	68fa      	ldr	r2, [r7, #12]
 8015714:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015716:	4b15      	ldr	r3, [pc, #84]	; (801576c <FATFS_LinkDriverEx+0x94>)
 8015718:	7a5b      	ldrb	r3, [r3, #9]
 801571a:	b2db      	uxtb	r3, r3
 801571c:	461a      	mov	r2, r3
 801571e:	4b13      	ldr	r3, [pc, #76]	; (801576c <FATFS_LinkDriverEx+0x94>)
 8015720:	4413      	add	r3, r2
 8015722:	79fa      	ldrb	r2, [r7, #7]
 8015724:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015726:	4b11      	ldr	r3, [pc, #68]	; (801576c <FATFS_LinkDriverEx+0x94>)
 8015728:	7a5b      	ldrb	r3, [r3, #9]
 801572a:	b2db      	uxtb	r3, r3
 801572c:	1c5a      	adds	r2, r3, #1
 801572e:	b2d1      	uxtb	r1, r2
 8015730:	4a0e      	ldr	r2, [pc, #56]	; (801576c <FATFS_LinkDriverEx+0x94>)
 8015732:	7251      	strb	r1, [r2, #9]
 8015734:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015736:	7dbb      	ldrb	r3, [r7, #22]
 8015738:	3330      	adds	r3, #48	; 0x30
 801573a:	b2da      	uxtb	r2, r3
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015740:	68bb      	ldr	r3, [r7, #8]
 8015742:	3301      	adds	r3, #1
 8015744:	223a      	movs	r2, #58	; 0x3a
 8015746:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	3302      	adds	r3, #2
 801574c:	222f      	movs	r2, #47	; 0x2f
 801574e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015750:	68bb      	ldr	r3, [r7, #8]
 8015752:	3303      	adds	r3, #3
 8015754:	2200      	movs	r2, #0
 8015756:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015758:	2300      	movs	r3, #0
 801575a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801575c:	7dfb      	ldrb	r3, [r7, #23]
}
 801575e:	4618      	mov	r0, r3
 8015760:	371c      	adds	r7, #28
 8015762:	46bd      	mov	sp, r7
 8015764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015768:	4770      	bx	lr
 801576a:	bf00      	nop
 801576c:	20001358 	.word	0x20001358

08015770 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801577a:	2200      	movs	r2, #0
 801577c:	6839      	ldr	r1, [r7, #0]
 801577e:	6878      	ldr	r0, [r7, #4]
 8015780:	f7ff ffaa 	bl	80156d8 <FATFS_LinkDriverEx>
 8015784:	4603      	mov	r3, r0
}
 8015786:	4618      	mov	r0, r3
 8015788:	3708      	adds	r7, #8
 801578a:	46bd      	mov	sp, r7
 801578c:	bd80      	pop	{r7, pc}
	...

08015790 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015794:	2200      	movs	r2, #0
 8015796:	4912      	ldr	r1, [pc, #72]	; (80157e0 <MX_USB_DEVICE_Init+0x50>)
 8015798:	4812      	ldr	r0, [pc, #72]	; (80157e4 <MX_USB_DEVICE_Init+0x54>)
 801579a:	f7fb ff69 	bl	8011670 <USBD_Init>
 801579e:	4603      	mov	r3, r0
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d001      	beq.n	80157a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80157a4:	f7ee fb14 	bl	8003dd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80157a8:	490f      	ldr	r1, [pc, #60]	; (80157e8 <MX_USB_DEVICE_Init+0x58>)
 80157aa:	480e      	ldr	r0, [pc, #56]	; (80157e4 <MX_USB_DEVICE_Init+0x54>)
 80157ac:	f7fb ff90 	bl	80116d0 <USBD_RegisterClass>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d001      	beq.n	80157ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80157b6:	f7ee fb0b 	bl	8003dd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80157ba:	490c      	ldr	r1, [pc, #48]	; (80157ec <MX_USB_DEVICE_Init+0x5c>)
 80157bc:	4809      	ldr	r0, [pc, #36]	; (80157e4 <MX_USB_DEVICE_Init+0x54>)
 80157be:	f7fb feb1 	bl	8011524 <USBD_CDC_RegisterInterface>
 80157c2:	4603      	mov	r3, r0
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d001      	beq.n	80157cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80157c8:	f7ee fb02 	bl	8003dd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80157cc:	4805      	ldr	r0, [pc, #20]	; (80157e4 <MX_USB_DEVICE_Init+0x54>)
 80157ce:	f7fb ffa6 	bl	801171e <USBD_Start>
 80157d2:	4603      	mov	r3, r0
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d001      	beq.n	80157dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80157d8:	f7ee fafa 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80157dc:	bf00      	nop
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	20000134 	.word	0x20000134
 80157e4:	20001364 	.word	0x20001364
 80157e8:	2000001c 	.word	0x2000001c
 80157ec:	20000120 	.word	0x20000120

080157f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80157f4:	2200      	movs	r2, #0
 80157f6:	4905      	ldr	r1, [pc, #20]	; (801580c <CDC_Init_FS+0x1c>)
 80157f8:	4805      	ldr	r0, [pc, #20]	; (8015810 <CDC_Init_FS+0x20>)
 80157fa:	f7fb fea8 	bl	801154e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80157fe:	4905      	ldr	r1, [pc, #20]	; (8015814 <CDC_Init_FS+0x24>)
 8015800:	4803      	ldr	r0, [pc, #12]	; (8015810 <CDC_Init_FS+0x20>)
 8015802:	f7fb fec2 	bl	801158a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015806:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015808:	4618      	mov	r0, r3
 801580a:	bd80      	pop	{r7, pc}
 801580c:	20001e34 	.word	0x20001e34
 8015810:	20001364 	.word	0x20001364
 8015814:	20001634 	.word	0x20001634

08015818 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015818:	b480      	push	{r7}
 801581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801581c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801581e:	4618      	mov	r0, r3
 8015820:	46bd      	mov	sp, r7
 8015822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015826:	4770      	bx	lr

08015828 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015828:	b480      	push	{r7}
 801582a:	b083      	sub	sp, #12
 801582c:	af00      	add	r7, sp, #0
 801582e:	4603      	mov	r3, r0
 8015830:	6039      	str	r1, [r7, #0]
 8015832:	71fb      	strb	r3, [r7, #7]
 8015834:	4613      	mov	r3, r2
 8015836:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015838:	79fb      	ldrb	r3, [r7, #7]
 801583a:	2b23      	cmp	r3, #35	; 0x23
 801583c:	d84a      	bhi.n	80158d4 <CDC_Control_FS+0xac>
 801583e:	a201      	add	r2, pc, #4	; (adr r2, 8015844 <CDC_Control_FS+0x1c>)
 8015840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015844:	080158d5 	.word	0x080158d5
 8015848:	080158d5 	.word	0x080158d5
 801584c:	080158d5 	.word	0x080158d5
 8015850:	080158d5 	.word	0x080158d5
 8015854:	080158d5 	.word	0x080158d5
 8015858:	080158d5 	.word	0x080158d5
 801585c:	080158d5 	.word	0x080158d5
 8015860:	080158d5 	.word	0x080158d5
 8015864:	080158d5 	.word	0x080158d5
 8015868:	080158d5 	.word	0x080158d5
 801586c:	080158d5 	.word	0x080158d5
 8015870:	080158d5 	.word	0x080158d5
 8015874:	080158d5 	.word	0x080158d5
 8015878:	080158d5 	.word	0x080158d5
 801587c:	080158d5 	.word	0x080158d5
 8015880:	080158d5 	.word	0x080158d5
 8015884:	080158d5 	.word	0x080158d5
 8015888:	080158d5 	.word	0x080158d5
 801588c:	080158d5 	.word	0x080158d5
 8015890:	080158d5 	.word	0x080158d5
 8015894:	080158d5 	.word	0x080158d5
 8015898:	080158d5 	.word	0x080158d5
 801589c:	080158d5 	.word	0x080158d5
 80158a0:	080158d5 	.word	0x080158d5
 80158a4:	080158d5 	.word	0x080158d5
 80158a8:	080158d5 	.word	0x080158d5
 80158ac:	080158d5 	.word	0x080158d5
 80158b0:	080158d5 	.word	0x080158d5
 80158b4:	080158d5 	.word	0x080158d5
 80158b8:	080158d5 	.word	0x080158d5
 80158bc:	080158d5 	.word	0x080158d5
 80158c0:	080158d5 	.word	0x080158d5
 80158c4:	080158d5 	.word	0x080158d5
 80158c8:	080158d5 	.word	0x080158d5
 80158cc:	080158d5 	.word	0x080158d5
 80158d0:	080158d5 	.word	0x080158d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80158d4:	bf00      	nop
  }

  return (USBD_OK);
 80158d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80158d8:	4618      	mov	r0, r3
 80158da:	370c      	adds	r7, #12
 80158dc:	46bd      	mov	sp, r7
 80158de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e2:	4770      	bx	lr

080158e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b082      	sub	sp, #8
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
 80158ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80158ee:	6879      	ldr	r1, [r7, #4]
 80158f0:	4805      	ldr	r0, [pc, #20]	; (8015908 <CDC_Receive_FS+0x24>)
 80158f2:	f7fb fe4a 	bl	801158a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80158f6:	4804      	ldr	r0, [pc, #16]	; (8015908 <CDC_Receive_FS+0x24>)
 80158f8:	f7fb fe90 	bl	801161c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80158fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3708      	adds	r7, #8
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop
 8015908:	20001364 	.word	0x20001364

0801590c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b084      	sub	sp, #16
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	460b      	mov	r3, r1
 8015916:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015918:	2300      	movs	r3, #0
 801591a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801591c:	4b0d      	ldr	r3, [pc, #52]	; (8015954 <CDC_Transmit_FS+0x48>)
 801591e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015922:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801592a:	2b00      	cmp	r3, #0
 801592c:	d001      	beq.n	8015932 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801592e:	2301      	movs	r3, #1
 8015930:	e00b      	b.n	801594a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015932:	887b      	ldrh	r3, [r7, #2]
 8015934:	461a      	mov	r2, r3
 8015936:	6879      	ldr	r1, [r7, #4]
 8015938:	4806      	ldr	r0, [pc, #24]	; (8015954 <CDC_Transmit_FS+0x48>)
 801593a:	f7fb fe08 	bl	801154e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801593e:	4805      	ldr	r0, [pc, #20]	; (8015954 <CDC_Transmit_FS+0x48>)
 8015940:	f7fb fe3c 	bl	80115bc <USBD_CDC_TransmitPacket>
 8015944:	4603      	mov	r3, r0
 8015946:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015948:	7bfb      	ldrb	r3, [r7, #15]
}
 801594a:	4618      	mov	r0, r3
 801594c:	3710      	adds	r7, #16
 801594e:	46bd      	mov	sp, r7
 8015950:	bd80      	pop	{r7, pc}
 8015952:	bf00      	nop
 8015954:	20001364 	.word	0x20001364

08015958 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015958:	b480      	push	{r7}
 801595a:	b087      	sub	sp, #28
 801595c:	af00      	add	r7, sp, #0
 801595e:	60f8      	str	r0, [r7, #12]
 8015960:	60b9      	str	r1, [r7, #8]
 8015962:	4613      	mov	r3, r2
 8015964:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015966:	2300      	movs	r3, #0
 8015968:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801596a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801596e:	4618      	mov	r0, r3
 8015970:	371c      	adds	r7, #28
 8015972:	46bd      	mov	sp, r7
 8015974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015978:	4770      	bx	lr
	...

0801597c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801597c:	b480      	push	{r7}
 801597e:	b083      	sub	sp, #12
 8015980:	af00      	add	r7, sp, #0
 8015982:	4603      	mov	r3, r0
 8015984:	6039      	str	r1, [r7, #0]
 8015986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015988:	683b      	ldr	r3, [r7, #0]
 801598a:	2212      	movs	r2, #18
 801598c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801598e:	4b03      	ldr	r3, [pc, #12]	; (801599c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015990:	4618      	mov	r0, r3
 8015992:	370c      	adds	r7, #12
 8015994:	46bd      	mov	sp, r7
 8015996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599a:	4770      	bx	lr
 801599c:	20000150 	.word	0x20000150

080159a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159a0:	b480      	push	{r7}
 80159a2:	b083      	sub	sp, #12
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	4603      	mov	r3, r0
 80159a8:	6039      	str	r1, [r7, #0]
 80159aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	2204      	movs	r2, #4
 80159b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80159b2:	4b03      	ldr	r3, [pc, #12]	; (80159c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80159b4:	4618      	mov	r0, r3
 80159b6:	370c      	adds	r7, #12
 80159b8:	46bd      	mov	sp, r7
 80159ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159be:	4770      	bx	lr
 80159c0:	20000164 	.word	0x20000164

080159c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b082      	sub	sp, #8
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	4603      	mov	r3, r0
 80159cc:	6039      	str	r1, [r7, #0]
 80159ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80159d0:	79fb      	ldrb	r3, [r7, #7]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d105      	bne.n	80159e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80159d6:	683a      	ldr	r2, [r7, #0]
 80159d8:	4907      	ldr	r1, [pc, #28]	; (80159f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80159da:	4808      	ldr	r0, [pc, #32]	; (80159fc <USBD_FS_ProductStrDescriptor+0x38>)
 80159dc:	f7fc fed1 	bl	8012782 <USBD_GetString>
 80159e0:	e004      	b.n	80159ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80159e2:	683a      	ldr	r2, [r7, #0]
 80159e4:	4904      	ldr	r1, [pc, #16]	; (80159f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80159e6:	4805      	ldr	r0, [pc, #20]	; (80159fc <USBD_FS_ProductStrDescriptor+0x38>)
 80159e8:	f7fc fecb 	bl	8012782 <USBD_GetString>
  }
  return USBD_StrDesc;
 80159ec:	4b02      	ldr	r3, [pc, #8]	; (80159f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	3708      	adds	r7, #8
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}
 80159f6:	bf00      	nop
 80159f8:	20002634 	.word	0x20002634
 80159fc:	080195c8 	.word	0x080195c8

08015a00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	4603      	mov	r3, r0
 8015a08:	6039      	str	r1, [r7, #0]
 8015a0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015a0c:	683a      	ldr	r2, [r7, #0]
 8015a0e:	4904      	ldr	r1, [pc, #16]	; (8015a20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015a10:	4804      	ldr	r0, [pc, #16]	; (8015a24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015a12:	f7fc feb6 	bl	8012782 <USBD_GetString>
  return USBD_StrDesc;
 8015a16:	4b02      	ldr	r3, [pc, #8]	; (8015a20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	3708      	adds	r7, #8
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}
 8015a20:	20002634 	.word	0x20002634
 8015a24:	080195e0 	.word	0x080195e0

08015a28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b082      	sub	sp, #8
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	4603      	mov	r3, r0
 8015a30:	6039      	str	r1, [r7, #0]
 8015a32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015a34:	683b      	ldr	r3, [r7, #0]
 8015a36:	221a      	movs	r2, #26
 8015a38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015a3a:	f000 f843 	bl	8015ac4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015a3e:	4b02      	ldr	r3, [pc, #8]	; (8015a48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015a40:	4618      	mov	r0, r3
 8015a42:	3708      	adds	r7, #8
 8015a44:	46bd      	mov	sp, r7
 8015a46:	bd80      	pop	{r7, pc}
 8015a48:	20000168 	.word	0x20000168

08015a4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b082      	sub	sp, #8
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	4603      	mov	r3, r0
 8015a54:	6039      	str	r1, [r7, #0]
 8015a56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015a58:	79fb      	ldrb	r3, [r7, #7]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d105      	bne.n	8015a6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015a5e:	683a      	ldr	r2, [r7, #0]
 8015a60:	4907      	ldr	r1, [pc, #28]	; (8015a80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015a62:	4808      	ldr	r0, [pc, #32]	; (8015a84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015a64:	f7fc fe8d 	bl	8012782 <USBD_GetString>
 8015a68:	e004      	b.n	8015a74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015a6a:	683a      	ldr	r2, [r7, #0]
 8015a6c:	4904      	ldr	r1, [pc, #16]	; (8015a80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015a6e:	4805      	ldr	r0, [pc, #20]	; (8015a84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015a70:	f7fc fe87 	bl	8012782 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a74:	4b02      	ldr	r3, [pc, #8]	; (8015a80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3708      	adds	r7, #8
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}
 8015a7e:	bf00      	nop
 8015a80:	20002634 	.word	0x20002634
 8015a84:	080195f4 	.word	0x080195f4

08015a88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b082      	sub	sp, #8
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	4603      	mov	r3, r0
 8015a90:	6039      	str	r1, [r7, #0]
 8015a92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015a94:	79fb      	ldrb	r3, [r7, #7]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d105      	bne.n	8015aa6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015a9a:	683a      	ldr	r2, [r7, #0]
 8015a9c:	4907      	ldr	r1, [pc, #28]	; (8015abc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015a9e:	4808      	ldr	r0, [pc, #32]	; (8015ac0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015aa0:	f7fc fe6f 	bl	8012782 <USBD_GetString>
 8015aa4:	e004      	b.n	8015ab0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015aa6:	683a      	ldr	r2, [r7, #0]
 8015aa8:	4904      	ldr	r1, [pc, #16]	; (8015abc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015aaa:	4805      	ldr	r0, [pc, #20]	; (8015ac0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015aac:	f7fc fe69 	bl	8012782 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015ab0:	4b02      	ldr	r3, [pc, #8]	; (8015abc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	3708      	adds	r7, #8
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd80      	pop	{r7, pc}
 8015aba:	bf00      	nop
 8015abc:	20002634 	.word	0x20002634
 8015ac0:	08019600 	.word	0x08019600

08015ac4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b084      	sub	sp, #16
 8015ac8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015aca:	4b0f      	ldr	r3, [pc, #60]	; (8015b08 <Get_SerialNum+0x44>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015ad0:	4b0e      	ldr	r3, [pc, #56]	; (8015b0c <Get_SerialNum+0x48>)
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015ad6:	4b0e      	ldr	r3, [pc, #56]	; (8015b10 <Get_SerialNum+0x4c>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015adc:	68fa      	ldr	r2, [r7, #12]
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d009      	beq.n	8015afe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015aea:	2208      	movs	r2, #8
 8015aec:	4909      	ldr	r1, [pc, #36]	; (8015b14 <Get_SerialNum+0x50>)
 8015aee:	68f8      	ldr	r0, [r7, #12]
 8015af0:	f000 f814 	bl	8015b1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015af4:	2204      	movs	r2, #4
 8015af6:	4908      	ldr	r1, [pc, #32]	; (8015b18 <Get_SerialNum+0x54>)
 8015af8:	68b8      	ldr	r0, [r7, #8]
 8015afa:	f000 f80f 	bl	8015b1c <IntToUnicode>
  }
}
 8015afe:	bf00      	nop
 8015b00:	3710      	adds	r7, #16
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
 8015b06:	bf00      	nop
 8015b08:	1fff7590 	.word	0x1fff7590
 8015b0c:	1fff7594 	.word	0x1fff7594
 8015b10:	1fff7598 	.word	0x1fff7598
 8015b14:	2000016a 	.word	0x2000016a
 8015b18:	2000017a 	.word	0x2000017a

08015b1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015b1c:	b480      	push	{r7}
 8015b1e:	b087      	sub	sp, #28
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	60f8      	str	r0, [r7, #12]
 8015b24:	60b9      	str	r1, [r7, #8]
 8015b26:	4613      	mov	r3, r2
 8015b28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015b2e:	2300      	movs	r3, #0
 8015b30:	75fb      	strb	r3, [r7, #23]
 8015b32:	e027      	b.n	8015b84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	0f1b      	lsrs	r3, r3, #28
 8015b38:	2b09      	cmp	r3, #9
 8015b3a:	d80b      	bhi.n	8015b54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	0f1b      	lsrs	r3, r3, #28
 8015b40:	b2da      	uxtb	r2, r3
 8015b42:	7dfb      	ldrb	r3, [r7, #23]
 8015b44:	005b      	lsls	r3, r3, #1
 8015b46:	4619      	mov	r1, r3
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	440b      	add	r3, r1
 8015b4c:	3230      	adds	r2, #48	; 0x30
 8015b4e:	b2d2      	uxtb	r2, r2
 8015b50:	701a      	strb	r2, [r3, #0]
 8015b52:	e00a      	b.n	8015b6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	0f1b      	lsrs	r3, r3, #28
 8015b58:	b2da      	uxtb	r2, r3
 8015b5a:	7dfb      	ldrb	r3, [r7, #23]
 8015b5c:	005b      	lsls	r3, r3, #1
 8015b5e:	4619      	mov	r1, r3
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	440b      	add	r3, r1
 8015b64:	3237      	adds	r2, #55	; 0x37
 8015b66:	b2d2      	uxtb	r2, r2
 8015b68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	011b      	lsls	r3, r3, #4
 8015b6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015b70:	7dfb      	ldrb	r3, [r7, #23]
 8015b72:	005b      	lsls	r3, r3, #1
 8015b74:	3301      	adds	r3, #1
 8015b76:	68ba      	ldr	r2, [r7, #8]
 8015b78:	4413      	add	r3, r2
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015b7e:	7dfb      	ldrb	r3, [r7, #23]
 8015b80:	3301      	adds	r3, #1
 8015b82:	75fb      	strb	r3, [r7, #23]
 8015b84:	7dfa      	ldrb	r2, [r7, #23]
 8015b86:	79fb      	ldrb	r3, [r7, #7]
 8015b88:	429a      	cmp	r2, r3
 8015b8a:	d3d3      	bcc.n	8015b34 <IntToUnicode+0x18>
  }
}
 8015b8c:	bf00      	nop
 8015b8e:	bf00      	nop
 8015b90:	371c      	adds	r7, #28
 8015b92:	46bd      	mov	sp, r7
 8015b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b98:	4770      	bx	lr
	...

08015b9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b0b0      	sub	sp, #192	; 0xc0
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015ba4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015ba8:	2200      	movs	r2, #0
 8015baa:	601a      	str	r2, [r3, #0]
 8015bac:	605a      	str	r2, [r3, #4]
 8015bae:	609a      	str	r2, [r3, #8]
 8015bb0:	60da      	str	r2, [r3, #12]
 8015bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8015bb4:	f107 0318 	add.w	r3, r7, #24
 8015bb8:	2294      	movs	r2, #148	; 0x94
 8015bba:	2100      	movs	r1, #0
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f000 fc0b 	bl	80163d8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015bca:	d163      	bne.n	8015c94 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015bd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015bd8:	f107 0318 	add.w	r3, r7, #24
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7f3 fc29 	bl	8009434 <HAL_RCCEx_PeriphCLKConfig>
 8015be2:	4603      	mov	r3, r0
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d001      	beq.n	8015bec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8015be8:	f7ee f8f2 	bl	8003dd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015bec:	4b2b      	ldr	r3, [pc, #172]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015bf0:	4a2a      	ldr	r2, [pc, #168]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015bf2:	f043 0301 	orr.w	r3, r3, #1
 8015bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8015bf8:	4b28      	ldr	r3, [pc, #160]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015bfc:	f003 0301 	and.w	r3, r3, #1
 8015c00:	617b      	str	r3, [r7, #20]
 8015c02:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015c04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c0c:	2302      	movs	r3, #2
 8015c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c12:	2300      	movs	r3, #0
 8015c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c18:	2303      	movs	r3, #3
 8015c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015c1e:	230a      	movs	r3, #10
 8015c20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015c24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015c28:	4619      	mov	r1, r3
 8015c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8015c2e:	f7ef fde1 	bl	80057f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015c32:	4b1a      	ldr	r3, [pc, #104]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c36:	4a19      	ldr	r2, [pc, #100]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015c38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8015c3e:	4b17      	ldr	r3, [pc, #92]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015c46:	613b      	str	r3, [r7, #16]
 8015c48:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015c4a:	4b14      	ldr	r3, [pc, #80]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d114      	bne.n	8015c80 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015c56:	4b11      	ldr	r3, [pc, #68]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c5a:	4a10      	ldr	r2, [pc, #64]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015c60:	6593      	str	r3, [r2, #88]	; 0x58
 8015c62:	4b0e      	ldr	r3, [pc, #56]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015c6a:	60fb      	str	r3, [r7, #12]
 8015c6c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8015c6e:	f7f2 fccd 	bl	800860c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8015c72:	4b0a      	ldr	r3, [pc, #40]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c76:	4a09      	ldr	r2, [pc, #36]	; (8015c9c <HAL_PCD_MspInit+0x100>)
 8015c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8015c7e:	e001      	b.n	8015c84 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8015c80:	f7f2 fcc4 	bl	800860c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015c84:	2200      	movs	r2, #0
 8015c86:	2100      	movs	r1, #0
 8015c88:	2043      	movs	r0, #67	; 0x43
 8015c8a:	f7ef fcc2 	bl	8005612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015c8e:	2043      	movs	r0, #67	; 0x43
 8015c90:	f7ef fcdb 	bl	800564a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015c94:	bf00      	nop
 8015c96:	37c0      	adds	r7, #192	; 0xc0
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}
 8015c9c:	40021000 	.word	0x40021000

08015ca0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b082      	sub	sp, #8
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	4610      	mov	r0, r2
 8015cb8:	f7fb fd7c 	bl	80117b4 <USBD_LL_SetupStage>
}
 8015cbc:	bf00      	nop
 8015cbe:	3708      	adds	r7, #8
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}

08015cc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
 8015ccc:	460b      	mov	r3, r1
 8015cce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015cd6:	78fa      	ldrb	r2, [r7, #3]
 8015cd8:	6879      	ldr	r1, [r7, #4]
 8015cda:	4613      	mov	r3, r2
 8015cdc:	00db      	lsls	r3, r3, #3
 8015cde:	4413      	add	r3, r2
 8015ce0:	009b      	lsls	r3, r3, #2
 8015ce2:	440b      	add	r3, r1
 8015ce4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8015ce8:	681a      	ldr	r2, [r3, #0]
 8015cea:	78fb      	ldrb	r3, [r7, #3]
 8015cec:	4619      	mov	r1, r3
 8015cee:	f7fb fdb6 	bl	801185e <USBD_LL_DataOutStage>
}
 8015cf2:	bf00      	nop
 8015cf4:	3708      	adds	r7, #8
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}

08015cfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cfa:	b580      	push	{r7, lr}
 8015cfc:	b082      	sub	sp, #8
 8015cfe:	af00      	add	r7, sp, #0
 8015d00:	6078      	str	r0, [r7, #4]
 8015d02:	460b      	mov	r3, r1
 8015d04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015d0c:	78fa      	ldrb	r2, [r7, #3]
 8015d0e:	6879      	ldr	r1, [r7, #4]
 8015d10:	4613      	mov	r3, r2
 8015d12:	00db      	lsls	r3, r3, #3
 8015d14:	4413      	add	r3, r2
 8015d16:	009b      	lsls	r3, r3, #2
 8015d18:	440b      	add	r3, r1
 8015d1a:	334c      	adds	r3, #76	; 0x4c
 8015d1c:	681a      	ldr	r2, [r3, #0]
 8015d1e:	78fb      	ldrb	r3, [r7, #3]
 8015d20:	4619      	mov	r1, r3
 8015d22:	f7fb fdff 	bl	8011924 <USBD_LL_DataInStage>
}
 8015d26:	bf00      	nop
 8015d28:	3708      	adds	r7, #8
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}

08015d2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d2e:	b580      	push	{r7, lr}
 8015d30:	b082      	sub	sp, #8
 8015d32:	af00      	add	r7, sp, #0
 8015d34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f7fb ff13 	bl	8011b68 <USBD_LL_SOF>
}
 8015d42:	bf00      	nop
 8015d44:	3708      	adds	r7, #8
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}

08015d4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d4a:	b580      	push	{r7, lr}
 8015d4c:	b084      	sub	sp, #16
 8015d4e:	af00      	add	r7, sp, #0
 8015d50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015d52:	2301      	movs	r3, #1
 8015d54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	68db      	ldr	r3, [r3, #12]
 8015d5a:	2b02      	cmp	r3, #2
 8015d5c:	d001      	beq.n	8015d62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015d5e:	f7ee f837 	bl	8003dd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015d68:	7bfa      	ldrb	r2, [r7, #15]
 8015d6a:	4611      	mov	r1, r2
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f7fb febd 	bl	8011aec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7fb fe69 	bl	8011a50 <USBD_LL_Reset>
}
 8015d7e:	bf00      	nop
 8015d80:	3710      	adds	r7, #16
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
	...

08015d88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	687a      	ldr	r2, [r7, #4]
 8015d9c:	6812      	ldr	r2, [r2, #0]
 8015d9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015da2:	f043 0301 	orr.w	r3, r3, #1
 8015da6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015dae:	4618      	mov	r0, r3
 8015db0:	f7fb feac 	bl	8011b0c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	6a1b      	ldr	r3, [r3, #32]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d005      	beq.n	8015dc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015dbc:	4b04      	ldr	r3, [pc, #16]	; (8015dd0 <HAL_PCD_SuspendCallback+0x48>)
 8015dbe:	691b      	ldr	r3, [r3, #16]
 8015dc0:	4a03      	ldr	r2, [pc, #12]	; (8015dd0 <HAL_PCD_SuspendCallback+0x48>)
 8015dc2:	f043 0306 	orr.w	r3, r3, #6
 8015dc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015dc8:	bf00      	nop
 8015dca:	3708      	adds	r7, #8
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}
 8015dd0:	e000ed00 	.word	0xe000ed00

08015dd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b082      	sub	sp, #8
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	687a      	ldr	r2, [r7, #4]
 8015de8:	6812      	ldr	r2, [r2, #0]
 8015dea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015dee:	f023 0301 	bic.w	r3, r3, #1
 8015df2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	6a1b      	ldr	r3, [r3, #32]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d007      	beq.n	8015e0c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015dfc:	4b08      	ldr	r3, [pc, #32]	; (8015e20 <HAL_PCD_ResumeCallback+0x4c>)
 8015dfe:	691b      	ldr	r3, [r3, #16]
 8015e00:	4a07      	ldr	r2, [pc, #28]	; (8015e20 <HAL_PCD_ResumeCallback+0x4c>)
 8015e02:	f023 0306 	bic.w	r3, r3, #6
 8015e06:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015e08:	f000 faa6 	bl	8016358 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015e12:	4618      	mov	r0, r3
 8015e14:	f7fb fe90 	bl	8011b38 <USBD_LL_Resume>
}
 8015e18:	bf00      	nop
 8015e1a:	3708      	adds	r7, #8
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}
 8015e20:	e000ed00 	.word	0xe000ed00

08015e24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015e36:	78fa      	ldrb	r2, [r7, #3]
 8015e38:	4611      	mov	r1, r2
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7fb fedc 	bl	8011bf8 <USBD_LL_IsoOUTIncomplete>
}
 8015e40:	bf00      	nop
 8015e42:	3708      	adds	r7, #8
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}

08015e48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b082      	sub	sp, #8
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
 8015e50:	460b      	mov	r3, r1
 8015e52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015e5a:	78fa      	ldrb	r2, [r7, #3]
 8015e5c:	4611      	mov	r1, r2
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f7fb fea4 	bl	8011bac <USBD_LL_IsoINIncomplete>
}
 8015e64:	bf00      	nop
 8015e66:	3708      	adds	r7, #8
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}

08015e6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b082      	sub	sp, #8
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7fb fee2 	bl	8011c44 <USBD_LL_DevConnected>
}
 8015e80:	bf00      	nop
 8015e82:	3708      	adds	r7, #8
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}

08015e88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b082      	sub	sp, #8
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015e96:	4618      	mov	r0, r3
 8015e98:	f7fb fedf 	bl	8011c5a <USBD_LL_DevDisconnected>
}
 8015e9c:	bf00      	nop
 8015e9e:	3708      	adds	r7, #8
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}

08015ea4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	781b      	ldrb	r3, [r3, #0]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d139      	bne.n	8015f28 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015eb4:	4a1f      	ldr	r2, [pc, #124]	; (8015f34 <USBD_LL_Init+0x90>)
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	4a1d      	ldr	r2, [pc, #116]	; (8015f34 <USBD_LL_Init+0x90>)
 8015ec0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015ec4:	4b1b      	ldr	r3, [pc, #108]	; (8015f34 <USBD_LL_Init+0x90>)
 8015ec6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015eca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8015ecc:	4b19      	ldr	r3, [pc, #100]	; (8015f34 <USBD_LL_Init+0x90>)
 8015ece:	2206      	movs	r2, #6
 8015ed0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015ed2:	4b18      	ldr	r3, [pc, #96]	; (8015f34 <USBD_LL_Init+0x90>)
 8015ed4:	2202      	movs	r2, #2
 8015ed6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015ed8:	4b16      	ldr	r3, [pc, #88]	; (8015f34 <USBD_LL_Init+0x90>)
 8015eda:	2200      	movs	r2, #0
 8015edc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015ede:	4b15      	ldr	r3, [pc, #84]	; (8015f34 <USBD_LL_Init+0x90>)
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015ee4:	4b13      	ldr	r3, [pc, #76]	; (8015f34 <USBD_LL_Init+0x90>)
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8015eea:	4b12      	ldr	r3, [pc, #72]	; (8015f34 <USBD_LL_Init+0x90>)
 8015eec:	2200      	movs	r2, #0
 8015eee:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015ef0:	4b10      	ldr	r3, [pc, #64]	; (8015f34 <USBD_LL_Init+0x90>)
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015ef6:	4b0f      	ldr	r3, [pc, #60]	; (8015f34 <USBD_LL_Init+0x90>)
 8015ef8:	2200      	movs	r2, #0
 8015efa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015efc:	480d      	ldr	r0, [pc, #52]	; (8015f34 <USBD_LL_Init+0x90>)
 8015efe:	f7f1 f8f6 	bl	80070ee <HAL_PCD_Init>
 8015f02:	4603      	mov	r3, r0
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d001      	beq.n	8015f0c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8015f08:	f7ed ff62 	bl	8003dd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015f0c:	2180      	movs	r1, #128	; 0x80
 8015f0e:	4809      	ldr	r0, [pc, #36]	; (8015f34 <USBD_LL_Init+0x90>)
 8015f10:	f7f2 fa77 	bl	8008402 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015f14:	2240      	movs	r2, #64	; 0x40
 8015f16:	2100      	movs	r1, #0
 8015f18:	4806      	ldr	r0, [pc, #24]	; (8015f34 <USBD_LL_Init+0x90>)
 8015f1a:	f7f2 fa2b 	bl	8008374 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015f1e:	2280      	movs	r2, #128	; 0x80
 8015f20:	2101      	movs	r1, #1
 8015f22:	4804      	ldr	r0, [pc, #16]	; (8015f34 <USBD_LL_Init+0x90>)
 8015f24:	f7f2 fa26 	bl	8008374 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015f28:	2300      	movs	r3, #0
}
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	3708      	adds	r7, #8
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}
 8015f32:	bf00      	nop
 8015f34:	20002834 	.word	0x20002834

08015f38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b084      	sub	sp, #16
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f40:	2300      	movs	r3, #0
 8015f42:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f44:	2300      	movs	r3, #0
 8015f46:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f7f1 f9f1 	bl	8007336 <HAL_PCD_Start>
 8015f54:	4603      	mov	r3, r0
 8015f56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8015f58:	7bbb      	ldrb	r3, [r7, #14]
 8015f5a:	2b03      	cmp	r3, #3
 8015f5c:	d816      	bhi.n	8015f8c <USBD_LL_Start+0x54>
 8015f5e:	a201      	add	r2, pc, #4	; (adr r2, 8015f64 <USBD_LL_Start+0x2c>)
 8015f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f64:	08015f75 	.word	0x08015f75
 8015f68:	08015f7b 	.word	0x08015f7b
 8015f6c:	08015f81 	.word	0x08015f81
 8015f70:	08015f87 	.word	0x08015f87
    case HAL_OK :
      usb_status = USBD_OK;
 8015f74:	2300      	movs	r3, #0
 8015f76:	73fb      	strb	r3, [r7, #15]
    break;
 8015f78:	e00b      	b.n	8015f92 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015f7a:	2303      	movs	r3, #3
 8015f7c:	73fb      	strb	r3, [r7, #15]
    break;
 8015f7e:	e008      	b.n	8015f92 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015f80:	2301      	movs	r3, #1
 8015f82:	73fb      	strb	r3, [r7, #15]
    break;
 8015f84:	e005      	b.n	8015f92 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015f86:	2303      	movs	r3, #3
 8015f88:	73fb      	strb	r3, [r7, #15]
    break;
 8015f8a:	e002      	b.n	8015f92 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8015f8c:	2303      	movs	r3, #3
 8015f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8015f90:	bf00      	nop
  }
  return usb_status;
 8015f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f94:	4618      	mov	r0, r3
 8015f96:	3710      	adds	r7, #16
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}

08015f9c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b084      	sub	sp, #16
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
 8015fa4:	4608      	mov	r0, r1
 8015fa6:	4611      	mov	r1, r2
 8015fa8:	461a      	mov	r2, r3
 8015faa:	4603      	mov	r3, r0
 8015fac:	70fb      	strb	r3, [r7, #3]
 8015fae:	460b      	mov	r3, r1
 8015fb0:	70bb      	strb	r3, [r7, #2]
 8015fb2:	4613      	mov	r3, r2
 8015fb4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015fc4:	78bb      	ldrb	r3, [r7, #2]
 8015fc6:	883a      	ldrh	r2, [r7, #0]
 8015fc8:	78f9      	ldrb	r1, [r7, #3]
 8015fca:	f7f1 fe9b 	bl	8007d04 <HAL_PCD_EP_Open>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8015fd2:	7bbb      	ldrb	r3, [r7, #14]
 8015fd4:	2b03      	cmp	r3, #3
 8015fd6:	d817      	bhi.n	8016008 <USBD_LL_OpenEP+0x6c>
 8015fd8:	a201      	add	r2, pc, #4	; (adr r2, 8015fe0 <USBD_LL_OpenEP+0x44>)
 8015fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fde:	bf00      	nop
 8015fe0:	08015ff1 	.word	0x08015ff1
 8015fe4:	08015ff7 	.word	0x08015ff7
 8015fe8:	08015ffd 	.word	0x08015ffd
 8015fec:	08016003 	.word	0x08016003
    case HAL_OK :
      usb_status = USBD_OK;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8015ff4:	e00b      	b.n	801600e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015ff6:	2303      	movs	r3, #3
 8015ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8015ffa:	e008      	b.n	801600e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8016000:	e005      	b.n	801600e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016002:	2303      	movs	r3, #3
 8016004:	73fb      	strb	r3, [r7, #15]
    break;
 8016006:	e002      	b.n	801600e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8016008:	2303      	movs	r3, #3
 801600a:	73fb      	strb	r3, [r7, #15]
    break;
 801600c:	bf00      	nop
  }
  return usb_status;
 801600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016010:	4618      	mov	r0, r3
 8016012:	3710      	adds	r7, #16
 8016014:	46bd      	mov	sp, r7
 8016016:	bd80      	pop	{r7, pc}

08016018 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b084      	sub	sp, #16
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	460b      	mov	r3, r1
 8016022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016024:	2300      	movs	r3, #0
 8016026:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016028:	2300      	movs	r3, #0
 801602a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016032:	78fa      	ldrb	r2, [r7, #3]
 8016034:	4611      	mov	r1, r2
 8016036:	4618      	mov	r0, r3
 8016038:	f7f1 fecc 	bl	8007dd4 <HAL_PCD_EP_Close>
 801603c:	4603      	mov	r3, r0
 801603e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016040:	7bbb      	ldrb	r3, [r7, #14]
 8016042:	2b03      	cmp	r3, #3
 8016044:	d816      	bhi.n	8016074 <USBD_LL_CloseEP+0x5c>
 8016046:	a201      	add	r2, pc, #4	; (adr r2, 801604c <USBD_LL_CloseEP+0x34>)
 8016048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801604c:	0801605d 	.word	0x0801605d
 8016050:	08016063 	.word	0x08016063
 8016054:	08016069 	.word	0x08016069
 8016058:	0801606f 	.word	0x0801606f
    case HAL_OK :
      usb_status = USBD_OK;
 801605c:	2300      	movs	r3, #0
 801605e:	73fb      	strb	r3, [r7, #15]
    break;
 8016060:	e00b      	b.n	801607a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016062:	2303      	movs	r3, #3
 8016064:	73fb      	strb	r3, [r7, #15]
    break;
 8016066:	e008      	b.n	801607a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016068:	2301      	movs	r3, #1
 801606a:	73fb      	strb	r3, [r7, #15]
    break;
 801606c:	e005      	b.n	801607a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801606e:	2303      	movs	r3, #3
 8016070:	73fb      	strb	r3, [r7, #15]
    break;
 8016072:	e002      	b.n	801607a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8016074:	2303      	movs	r3, #3
 8016076:	73fb      	strb	r3, [r7, #15]
    break;
 8016078:	bf00      	nop
  }
  return usb_status;
 801607a:	7bfb      	ldrb	r3, [r7, #15]
}
 801607c:	4618      	mov	r0, r3
 801607e:	3710      	adds	r7, #16
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}

08016084 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b084      	sub	sp, #16
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	460b      	mov	r3, r1
 801608e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016090:	2300      	movs	r3, #0
 8016092:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016094:	2300      	movs	r3, #0
 8016096:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801609e:	78fa      	ldrb	r2, [r7, #3]
 80160a0:	4611      	mov	r1, r2
 80160a2:	4618      	mov	r0, r3
 80160a4:	f7f1 ff73 	bl	8007f8e <HAL_PCD_EP_SetStall>
 80160a8:	4603      	mov	r3, r0
 80160aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80160ac:	7bbb      	ldrb	r3, [r7, #14]
 80160ae:	2b03      	cmp	r3, #3
 80160b0:	d816      	bhi.n	80160e0 <USBD_LL_StallEP+0x5c>
 80160b2:	a201      	add	r2, pc, #4	; (adr r2, 80160b8 <USBD_LL_StallEP+0x34>)
 80160b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160b8:	080160c9 	.word	0x080160c9
 80160bc:	080160cf 	.word	0x080160cf
 80160c0:	080160d5 	.word	0x080160d5
 80160c4:	080160db 	.word	0x080160db
    case HAL_OK :
      usb_status = USBD_OK;
 80160c8:	2300      	movs	r3, #0
 80160ca:	73fb      	strb	r3, [r7, #15]
    break;
 80160cc:	e00b      	b.n	80160e6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80160ce:	2303      	movs	r3, #3
 80160d0:	73fb      	strb	r3, [r7, #15]
    break;
 80160d2:	e008      	b.n	80160e6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80160d4:	2301      	movs	r3, #1
 80160d6:	73fb      	strb	r3, [r7, #15]
    break;
 80160d8:	e005      	b.n	80160e6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80160da:	2303      	movs	r3, #3
 80160dc:	73fb      	strb	r3, [r7, #15]
    break;
 80160de:	e002      	b.n	80160e6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80160e0:	2303      	movs	r3, #3
 80160e2:	73fb      	strb	r3, [r7, #15]
    break;
 80160e4:	bf00      	nop
  }
  return usb_status;
 80160e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80160e8:	4618      	mov	r0, r3
 80160ea:	3710      	adds	r7, #16
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}

080160f0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b084      	sub	sp, #16
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
 80160f8:	460b      	mov	r3, r1
 80160fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160fc:	2300      	movs	r3, #0
 80160fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016100:	2300      	movs	r3, #0
 8016102:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801610a:	78fa      	ldrb	r2, [r7, #3]
 801610c:	4611      	mov	r1, r2
 801610e:	4618      	mov	r0, r3
 8016110:	f7f1 ff9f 	bl	8008052 <HAL_PCD_EP_ClrStall>
 8016114:	4603      	mov	r3, r0
 8016116:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016118:	7bbb      	ldrb	r3, [r7, #14]
 801611a:	2b03      	cmp	r3, #3
 801611c:	d816      	bhi.n	801614c <USBD_LL_ClearStallEP+0x5c>
 801611e:	a201      	add	r2, pc, #4	; (adr r2, 8016124 <USBD_LL_ClearStallEP+0x34>)
 8016120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016124:	08016135 	.word	0x08016135
 8016128:	0801613b 	.word	0x0801613b
 801612c:	08016141 	.word	0x08016141
 8016130:	08016147 	.word	0x08016147
    case HAL_OK :
      usb_status = USBD_OK;
 8016134:	2300      	movs	r3, #0
 8016136:	73fb      	strb	r3, [r7, #15]
    break;
 8016138:	e00b      	b.n	8016152 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801613a:	2303      	movs	r3, #3
 801613c:	73fb      	strb	r3, [r7, #15]
    break;
 801613e:	e008      	b.n	8016152 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016140:	2301      	movs	r3, #1
 8016142:	73fb      	strb	r3, [r7, #15]
    break;
 8016144:	e005      	b.n	8016152 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016146:	2303      	movs	r3, #3
 8016148:	73fb      	strb	r3, [r7, #15]
    break;
 801614a:	e002      	b.n	8016152 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801614c:	2303      	movs	r3, #3
 801614e:	73fb      	strb	r3, [r7, #15]
    break;
 8016150:	bf00      	nop
  }
  return usb_status;
 8016152:	7bfb      	ldrb	r3, [r7, #15]
}
 8016154:	4618      	mov	r0, r3
 8016156:	3710      	adds	r7, #16
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}

0801615c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801615c:	b480      	push	{r7}
 801615e:	b085      	sub	sp, #20
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
 8016164:	460b      	mov	r3, r1
 8016166:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801616e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016174:	2b00      	cmp	r3, #0
 8016176:	da0b      	bge.n	8016190 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016178:	78fb      	ldrb	r3, [r7, #3]
 801617a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801617e:	68f9      	ldr	r1, [r7, #12]
 8016180:	4613      	mov	r3, r2
 8016182:	00db      	lsls	r3, r3, #3
 8016184:	4413      	add	r3, r2
 8016186:	009b      	lsls	r3, r3, #2
 8016188:	440b      	add	r3, r1
 801618a:	333e      	adds	r3, #62	; 0x3e
 801618c:	781b      	ldrb	r3, [r3, #0]
 801618e:	e00b      	b.n	80161a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016190:	78fb      	ldrb	r3, [r7, #3]
 8016192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016196:	68f9      	ldr	r1, [r7, #12]
 8016198:	4613      	mov	r3, r2
 801619a:	00db      	lsls	r3, r3, #3
 801619c:	4413      	add	r3, r2
 801619e:	009b      	lsls	r3, r3, #2
 80161a0:	440b      	add	r3, r1
 80161a2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80161a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80161a8:	4618      	mov	r0, r3
 80161aa:	3714      	adds	r7, #20
 80161ac:	46bd      	mov	sp, r7
 80161ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b2:	4770      	bx	lr

080161b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b084      	sub	sp, #16
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
 80161bc:	460b      	mov	r3, r1
 80161be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80161c0:	2300      	movs	r3, #0
 80161c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80161c4:	2300      	movs	r3, #0
 80161c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80161ce:	78fa      	ldrb	r2, [r7, #3]
 80161d0:	4611      	mov	r1, r2
 80161d2:	4618      	mov	r0, r3
 80161d4:	f7f1 fd71 	bl	8007cba <HAL_PCD_SetAddress>
 80161d8:	4603      	mov	r3, r0
 80161da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80161dc:	7bbb      	ldrb	r3, [r7, #14]
 80161de:	2b03      	cmp	r3, #3
 80161e0:	d816      	bhi.n	8016210 <USBD_LL_SetUSBAddress+0x5c>
 80161e2:	a201      	add	r2, pc, #4	; (adr r2, 80161e8 <USBD_LL_SetUSBAddress+0x34>)
 80161e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161e8:	080161f9 	.word	0x080161f9
 80161ec:	080161ff 	.word	0x080161ff
 80161f0:	08016205 	.word	0x08016205
 80161f4:	0801620b 	.word	0x0801620b
    case HAL_OK :
      usb_status = USBD_OK;
 80161f8:	2300      	movs	r3, #0
 80161fa:	73fb      	strb	r3, [r7, #15]
    break;
 80161fc:	e00b      	b.n	8016216 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80161fe:	2303      	movs	r3, #3
 8016200:	73fb      	strb	r3, [r7, #15]
    break;
 8016202:	e008      	b.n	8016216 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016204:	2301      	movs	r3, #1
 8016206:	73fb      	strb	r3, [r7, #15]
    break;
 8016208:	e005      	b.n	8016216 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801620a:	2303      	movs	r3, #3
 801620c:	73fb      	strb	r3, [r7, #15]
    break;
 801620e:	e002      	b.n	8016216 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8016210:	2303      	movs	r3, #3
 8016212:	73fb      	strb	r3, [r7, #15]
    break;
 8016214:	bf00      	nop
  }
  return usb_status;
 8016216:	7bfb      	ldrb	r3, [r7, #15]
}
 8016218:	4618      	mov	r0, r3
 801621a:	3710      	adds	r7, #16
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}

08016220 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b086      	sub	sp, #24
 8016224:	af00      	add	r7, sp, #0
 8016226:	60f8      	str	r0, [r7, #12]
 8016228:	607a      	str	r2, [r7, #4]
 801622a:	603b      	str	r3, [r7, #0]
 801622c:	460b      	mov	r3, r1
 801622e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016230:	2300      	movs	r3, #0
 8016232:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016234:	2300      	movs	r3, #0
 8016236:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801623e:	7af9      	ldrb	r1, [r7, #11]
 8016240:	683b      	ldr	r3, [r7, #0]
 8016242:	687a      	ldr	r2, [r7, #4]
 8016244:	f7f1 fe66 	bl	8007f14 <HAL_PCD_EP_Transmit>
 8016248:	4603      	mov	r3, r0
 801624a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801624c:	7dbb      	ldrb	r3, [r7, #22]
 801624e:	2b03      	cmp	r3, #3
 8016250:	d816      	bhi.n	8016280 <USBD_LL_Transmit+0x60>
 8016252:	a201      	add	r2, pc, #4	; (adr r2, 8016258 <USBD_LL_Transmit+0x38>)
 8016254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016258:	08016269 	.word	0x08016269
 801625c:	0801626f 	.word	0x0801626f
 8016260:	08016275 	.word	0x08016275
 8016264:	0801627b 	.word	0x0801627b
    case HAL_OK :
      usb_status = USBD_OK;
 8016268:	2300      	movs	r3, #0
 801626a:	75fb      	strb	r3, [r7, #23]
    break;
 801626c:	e00b      	b.n	8016286 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801626e:	2303      	movs	r3, #3
 8016270:	75fb      	strb	r3, [r7, #23]
    break;
 8016272:	e008      	b.n	8016286 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016274:	2301      	movs	r3, #1
 8016276:	75fb      	strb	r3, [r7, #23]
    break;
 8016278:	e005      	b.n	8016286 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801627a:	2303      	movs	r3, #3
 801627c:	75fb      	strb	r3, [r7, #23]
    break;
 801627e:	e002      	b.n	8016286 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8016280:	2303      	movs	r3, #3
 8016282:	75fb      	strb	r3, [r7, #23]
    break;
 8016284:	bf00      	nop
  }
  return usb_status;
 8016286:	7dfb      	ldrb	r3, [r7, #23]
}
 8016288:	4618      	mov	r0, r3
 801628a:	3718      	adds	r7, #24
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}

08016290 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b086      	sub	sp, #24
 8016294:	af00      	add	r7, sp, #0
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	607a      	str	r2, [r7, #4]
 801629a:	603b      	str	r3, [r7, #0]
 801629c:	460b      	mov	r3, r1
 801629e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80162a0:	2300      	movs	r3, #0
 80162a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162a4:	2300      	movs	r3, #0
 80162a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80162ae:	7af9      	ldrb	r1, [r7, #11]
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	687a      	ldr	r2, [r7, #4]
 80162b4:	f7f1 fdd8 	bl	8007e68 <HAL_PCD_EP_Receive>
 80162b8:	4603      	mov	r3, r0
 80162ba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80162bc:	7dbb      	ldrb	r3, [r7, #22]
 80162be:	2b03      	cmp	r3, #3
 80162c0:	d816      	bhi.n	80162f0 <USBD_LL_PrepareReceive+0x60>
 80162c2:	a201      	add	r2, pc, #4	; (adr r2, 80162c8 <USBD_LL_PrepareReceive+0x38>)
 80162c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162c8:	080162d9 	.word	0x080162d9
 80162cc:	080162df 	.word	0x080162df
 80162d0:	080162e5 	.word	0x080162e5
 80162d4:	080162eb 	.word	0x080162eb
    case HAL_OK :
      usb_status = USBD_OK;
 80162d8:	2300      	movs	r3, #0
 80162da:	75fb      	strb	r3, [r7, #23]
    break;
 80162dc:	e00b      	b.n	80162f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80162de:	2303      	movs	r3, #3
 80162e0:	75fb      	strb	r3, [r7, #23]
    break;
 80162e2:	e008      	b.n	80162f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80162e4:	2301      	movs	r3, #1
 80162e6:	75fb      	strb	r3, [r7, #23]
    break;
 80162e8:	e005      	b.n	80162f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80162ea:	2303      	movs	r3, #3
 80162ec:	75fb      	strb	r3, [r7, #23]
    break;
 80162ee:	e002      	b.n	80162f6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80162f0:	2303      	movs	r3, #3
 80162f2:	75fb      	strb	r3, [r7, #23]
    break;
 80162f4:	bf00      	nop
  }
  return usb_status;
 80162f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3718      	adds	r7, #24
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}

08016300 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b082      	sub	sp, #8
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	460b      	mov	r3, r1
 801630a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016312:	78fa      	ldrb	r2, [r7, #3]
 8016314:	4611      	mov	r1, r2
 8016316:	4618      	mov	r0, r3
 8016318:	f7f1 fde4 	bl	8007ee4 <HAL_PCD_EP_GetRxCount>
 801631c:	4603      	mov	r3, r0
}
 801631e:	4618      	mov	r0, r3
 8016320:	3708      	adds	r7, #8
 8016322:	46bd      	mov	sp, r7
 8016324:	bd80      	pop	{r7, pc}
	...

08016328 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016328:	b480      	push	{r7}
 801632a:	b083      	sub	sp, #12
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016330:	4b03      	ldr	r3, [pc, #12]	; (8016340 <USBD_static_malloc+0x18>)
}
 8016332:	4618      	mov	r0, r3
 8016334:	370c      	adds	r7, #12
 8016336:	46bd      	mov	sp, r7
 8016338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633c:	4770      	bx	lr
 801633e:	bf00      	nop
 8016340:	20002d40 	.word	0x20002d40

08016344 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016344:	b480      	push	{r7}
 8016346:	b083      	sub	sp, #12
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]

}
 801634c:	bf00      	nop
 801634e:	370c      	adds	r7, #12
 8016350:	46bd      	mov	sp, r7
 8016352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016356:	4770      	bx	lr

08016358 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801635c:	f7ed fa52 	bl	8003804 <SystemClock_Config>
}
 8016360:	bf00      	nop
 8016362:	bd80      	pop	{r7, pc}

08016364 <__libc_init_array>:
 8016364:	b570      	push	{r4, r5, r6, lr}
 8016366:	4d0d      	ldr	r5, [pc, #52]	; (801639c <__libc_init_array+0x38>)
 8016368:	4c0d      	ldr	r4, [pc, #52]	; (80163a0 <__libc_init_array+0x3c>)
 801636a:	1b64      	subs	r4, r4, r5
 801636c:	10a4      	asrs	r4, r4, #2
 801636e:	2600      	movs	r6, #0
 8016370:	42a6      	cmp	r6, r4
 8016372:	d109      	bne.n	8016388 <__libc_init_array+0x24>
 8016374:	4d0b      	ldr	r5, [pc, #44]	; (80163a4 <__libc_init_array+0x40>)
 8016376:	4c0c      	ldr	r4, [pc, #48]	; (80163a8 <__libc_init_array+0x44>)
 8016378:	f002 ff6e 	bl	8019258 <_init>
 801637c:	1b64      	subs	r4, r4, r5
 801637e:	10a4      	asrs	r4, r4, #2
 8016380:	2600      	movs	r6, #0
 8016382:	42a6      	cmp	r6, r4
 8016384:	d105      	bne.n	8016392 <__libc_init_array+0x2e>
 8016386:	bd70      	pop	{r4, r5, r6, pc}
 8016388:	f855 3b04 	ldr.w	r3, [r5], #4
 801638c:	4798      	blx	r3
 801638e:	3601      	adds	r6, #1
 8016390:	e7ee      	b.n	8016370 <__libc_init_array+0xc>
 8016392:	f855 3b04 	ldr.w	r3, [r5], #4
 8016396:	4798      	blx	r3
 8016398:	3601      	adds	r6, #1
 801639a:	e7f2      	b.n	8016382 <__libc_init_array+0x1e>
 801639c:	08019b20 	.word	0x08019b20
 80163a0:	08019b20 	.word	0x08019b20
 80163a4:	08019b20 	.word	0x08019b20
 80163a8:	08019b24 	.word	0x08019b24

080163ac <malloc>:
 80163ac:	4b02      	ldr	r3, [pc, #8]	; (80163b8 <malloc+0xc>)
 80163ae:	4601      	mov	r1, r0
 80163b0:	6818      	ldr	r0, [r3, #0]
 80163b2:	f000 b885 	b.w	80164c0 <_malloc_r>
 80163b6:	bf00      	nop
 80163b8:	20000184 	.word	0x20000184

080163bc <memcpy>:
 80163bc:	440a      	add	r2, r1
 80163be:	4291      	cmp	r1, r2
 80163c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80163c4:	d100      	bne.n	80163c8 <memcpy+0xc>
 80163c6:	4770      	bx	lr
 80163c8:	b510      	push	{r4, lr}
 80163ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80163d2:	4291      	cmp	r1, r2
 80163d4:	d1f9      	bne.n	80163ca <memcpy+0xe>
 80163d6:	bd10      	pop	{r4, pc}

080163d8 <memset>:
 80163d8:	4402      	add	r2, r0
 80163da:	4603      	mov	r3, r0
 80163dc:	4293      	cmp	r3, r2
 80163de:	d100      	bne.n	80163e2 <memset+0xa>
 80163e0:	4770      	bx	lr
 80163e2:	f803 1b01 	strb.w	r1, [r3], #1
 80163e6:	e7f9      	b.n	80163dc <memset+0x4>

080163e8 <_free_r>:
 80163e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163ea:	2900      	cmp	r1, #0
 80163ec:	d044      	beq.n	8016478 <_free_r+0x90>
 80163ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163f2:	9001      	str	r0, [sp, #4]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	f1a1 0404 	sub.w	r4, r1, #4
 80163fa:	bfb8      	it	lt
 80163fc:	18e4      	addlt	r4, r4, r3
 80163fe:	f001 fd3f 	bl	8017e80 <__malloc_lock>
 8016402:	4a1e      	ldr	r2, [pc, #120]	; (801647c <_free_r+0x94>)
 8016404:	9801      	ldr	r0, [sp, #4]
 8016406:	6813      	ldr	r3, [r2, #0]
 8016408:	b933      	cbnz	r3, 8016418 <_free_r+0x30>
 801640a:	6063      	str	r3, [r4, #4]
 801640c:	6014      	str	r4, [r2, #0]
 801640e:	b003      	add	sp, #12
 8016410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016414:	f001 bd3a 	b.w	8017e8c <__malloc_unlock>
 8016418:	42a3      	cmp	r3, r4
 801641a:	d908      	bls.n	801642e <_free_r+0x46>
 801641c:	6825      	ldr	r5, [r4, #0]
 801641e:	1961      	adds	r1, r4, r5
 8016420:	428b      	cmp	r3, r1
 8016422:	bf01      	itttt	eq
 8016424:	6819      	ldreq	r1, [r3, #0]
 8016426:	685b      	ldreq	r3, [r3, #4]
 8016428:	1949      	addeq	r1, r1, r5
 801642a:	6021      	streq	r1, [r4, #0]
 801642c:	e7ed      	b.n	801640a <_free_r+0x22>
 801642e:	461a      	mov	r2, r3
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	b10b      	cbz	r3, 8016438 <_free_r+0x50>
 8016434:	42a3      	cmp	r3, r4
 8016436:	d9fa      	bls.n	801642e <_free_r+0x46>
 8016438:	6811      	ldr	r1, [r2, #0]
 801643a:	1855      	adds	r5, r2, r1
 801643c:	42a5      	cmp	r5, r4
 801643e:	d10b      	bne.n	8016458 <_free_r+0x70>
 8016440:	6824      	ldr	r4, [r4, #0]
 8016442:	4421      	add	r1, r4
 8016444:	1854      	adds	r4, r2, r1
 8016446:	42a3      	cmp	r3, r4
 8016448:	6011      	str	r1, [r2, #0]
 801644a:	d1e0      	bne.n	801640e <_free_r+0x26>
 801644c:	681c      	ldr	r4, [r3, #0]
 801644e:	685b      	ldr	r3, [r3, #4]
 8016450:	6053      	str	r3, [r2, #4]
 8016452:	4421      	add	r1, r4
 8016454:	6011      	str	r1, [r2, #0]
 8016456:	e7da      	b.n	801640e <_free_r+0x26>
 8016458:	d902      	bls.n	8016460 <_free_r+0x78>
 801645a:	230c      	movs	r3, #12
 801645c:	6003      	str	r3, [r0, #0]
 801645e:	e7d6      	b.n	801640e <_free_r+0x26>
 8016460:	6825      	ldr	r5, [r4, #0]
 8016462:	1961      	adds	r1, r4, r5
 8016464:	428b      	cmp	r3, r1
 8016466:	bf04      	itt	eq
 8016468:	6819      	ldreq	r1, [r3, #0]
 801646a:	685b      	ldreq	r3, [r3, #4]
 801646c:	6063      	str	r3, [r4, #4]
 801646e:	bf04      	itt	eq
 8016470:	1949      	addeq	r1, r1, r5
 8016472:	6021      	streq	r1, [r4, #0]
 8016474:	6054      	str	r4, [r2, #4]
 8016476:	e7ca      	b.n	801640e <_free_r+0x26>
 8016478:	b003      	add	sp, #12
 801647a:	bd30      	pop	{r4, r5, pc}
 801647c:	20002f60 	.word	0x20002f60

08016480 <sbrk_aligned>:
 8016480:	b570      	push	{r4, r5, r6, lr}
 8016482:	4e0e      	ldr	r6, [pc, #56]	; (80164bc <sbrk_aligned+0x3c>)
 8016484:	460c      	mov	r4, r1
 8016486:	6831      	ldr	r1, [r6, #0]
 8016488:	4605      	mov	r5, r0
 801648a:	b911      	cbnz	r1, 8016492 <sbrk_aligned+0x12>
 801648c:	f000 fd0e 	bl	8016eac <_sbrk_r>
 8016490:	6030      	str	r0, [r6, #0]
 8016492:	4621      	mov	r1, r4
 8016494:	4628      	mov	r0, r5
 8016496:	f000 fd09 	bl	8016eac <_sbrk_r>
 801649a:	1c43      	adds	r3, r0, #1
 801649c:	d00a      	beq.n	80164b4 <sbrk_aligned+0x34>
 801649e:	1cc4      	adds	r4, r0, #3
 80164a0:	f024 0403 	bic.w	r4, r4, #3
 80164a4:	42a0      	cmp	r0, r4
 80164a6:	d007      	beq.n	80164b8 <sbrk_aligned+0x38>
 80164a8:	1a21      	subs	r1, r4, r0
 80164aa:	4628      	mov	r0, r5
 80164ac:	f000 fcfe 	bl	8016eac <_sbrk_r>
 80164b0:	3001      	adds	r0, #1
 80164b2:	d101      	bne.n	80164b8 <sbrk_aligned+0x38>
 80164b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80164b8:	4620      	mov	r0, r4
 80164ba:	bd70      	pop	{r4, r5, r6, pc}
 80164bc:	20002f64 	.word	0x20002f64

080164c0 <_malloc_r>:
 80164c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164c4:	1ccd      	adds	r5, r1, #3
 80164c6:	f025 0503 	bic.w	r5, r5, #3
 80164ca:	3508      	adds	r5, #8
 80164cc:	2d0c      	cmp	r5, #12
 80164ce:	bf38      	it	cc
 80164d0:	250c      	movcc	r5, #12
 80164d2:	2d00      	cmp	r5, #0
 80164d4:	4607      	mov	r7, r0
 80164d6:	db01      	blt.n	80164dc <_malloc_r+0x1c>
 80164d8:	42a9      	cmp	r1, r5
 80164da:	d905      	bls.n	80164e8 <_malloc_r+0x28>
 80164dc:	230c      	movs	r3, #12
 80164de:	603b      	str	r3, [r7, #0]
 80164e0:	2600      	movs	r6, #0
 80164e2:	4630      	mov	r0, r6
 80164e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164e8:	4e2e      	ldr	r6, [pc, #184]	; (80165a4 <_malloc_r+0xe4>)
 80164ea:	f001 fcc9 	bl	8017e80 <__malloc_lock>
 80164ee:	6833      	ldr	r3, [r6, #0]
 80164f0:	461c      	mov	r4, r3
 80164f2:	bb34      	cbnz	r4, 8016542 <_malloc_r+0x82>
 80164f4:	4629      	mov	r1, r5
 80164f6:	4638      	mov	r0, r7
 80164f8:	f7ff ffc2 	bl	8016480 <sbrk_aligned>
 80164fc:	1c43      	adds	r3, r0, #1
 80164fe:	4604      	mov	r4, r0
 8016500:	d14d      	bne.n	801659e <_malloc_r+0xde>
 8016502:	6834      	ldr	r4, [r6, #0]
 8016504:	4626      	mov	r6, r4
 8016506:	2e00      	cmp	r6, #0
 8016508:	d140      	bne.n	801658c <_malloc_r+0xcc>
 801650a:	6823      	ldr	r3, [r4, #0]
 801650c:	4631      	mov	r1, r6
 801650e:	4638      	mov	r0, r7
 8016510:	eb04 0803 	add.w	r8, r4, r3
 8016514:	f000 fcca 	bl	8016eac <_sbrk_r>
 8016518:	4580      	cmp	r8, r0
 801651a:	d13a      	bne.n	8016592 <_malloc_r+0xd2>
 801651c:	6821      	ldr	r1, [r4, #0]
 801651e:	3503      	adds	r5, #3
 8016520:	1a6d      	subs	r5, r5, r1
 8016522:	f025 0503 	bic.w	r5, r5, #3
 8016526:	3508      	adds	r5, #8
 8016528:	2d0c      	cmp	r5, #12
 801652a:	bf38      	it	cc
 801652c:	250c      	movcc	r5, #12
 801652e:	4629      	mov	r1, r5
 8016530:	4638      	mov	r0, r7
 8016532:	f7ff ffa5 	bl	8016480 <sbrk_aligned>
 8016536:	3001      	adds	r0, #1
 8016538:	d02b      	beq.n	8016592 <_malloc_r+0xd2>
 801653a:	6823      	ldr	r3, [r4, #0]
 801653c:	442b      	add	r3, r5
 801653e:	6023      	str	r3, [r4, #0]
 8016540:	e00e      	b.n	8016560 <_malloc_r+0xa0>
 8016542:	6822      	ldr	r2, [r4, #0]
 8016544:	1b52      	subs	r2, r2, r5
 8016546:	d41e      	bmi.n	8016586 <_malloc_r+0xc6>
 8016548:	2a0b      	cmp	r2, #11
 801654a:	d916      	bls.n	801657a <_malloc_r+0xba>
 801654c:	1961      	adds	r1, r4, r5
 801654e:	42a3      	cmp	r3, r4
 8016550:	6025      	str	r5, [r4, #0]
 8016552:	bf18      	it	ne
 8016554:	6059      	strne	r1, [r3, #4]
 8016556:	6863      	ldr	r3, [r4, #4]
 8016558:	bf08      	it	eq
 801655a:	6031      	streq	r1, [r6, #0]
 801655c:	5162      	str	r2, [r4, r5]
 801655e:	604b      	str	r3, [r1, #4]
 8016560:	4638      	mov	r0, r7
 8016562:	f104 060b 	add.w	r6, r4, #11
 8016566:	f001 fc91 	bl	8017e8c <__malloc_unlock>
 801656a:	f026 0607 	bic.w	r6, r6, #7
 801656e:	1d23      	adds	r3, r4, #4
 8016570:	1af2      	subs	r2, r6, r3
 8016572:	d0b6      	beq.n	80164e2 <_malloc_r+0x22>
 8016574:	1b9b      	subs	r3, r3, r6
 8016576:	50a3      	str	r3, [r4, r2]
 8016578:	e7b3      	b.n	80164e2 <_malloc_r+0x22>
 801657a:	6862      	ldr	r2, [r4, #4]
 801657c:	42a3      	cmp	r3, r4
 801657e:	bf0c      	ite	eq
 8016580:	6032      	streq	r2, [r6, #0]
 8016582:	605a      	strne	r2, [r3, #4]
 8016584:	e7ec      	b.n	8016560 <_malloc_r+0xa0>
 8016586:	4623      	mov	r3, r4
 8016588:	6864      	ldr	r4, [r4, #4]
 801658a:	e7b2      	b.n	80164f2 <_malloc_r+0x32>
 801658c:	4634      	mov	r4, r6
 801658e:	6876      	ldr	r6, [r6, #4]
 8016590:	e7b9      	b.n	8016506 <_malloc_r+0x46>
 8016592:	230c      	movs	r3, #12
 8016594:	603b      	str	r3, [r7, #0]
 8016596:	4638      	mov	r0, r7
 8016598:	f001 fc78 	bl	8017e8c <__malloc_unlock>
 801659c:	e7a1      	b.n	80164e2 <_malloc_r+0x22>
 801659e:	6025      	str	r5, [r4, #0]
 80165a0:	e7de      	b.n	8016560 <_malloc_r+0xa0>
 80165a2:	bf00      	nop
 80165a4:	20002f60 	.word	0x20002f60

080165a8 <__cvt>:
 80165a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80165ac:	ec55 4b10 	vmov	r4, r5, d0
 80165b0:	2d00      	cmp	r5, #0
 80165b2:	460e      	mov	r6, r1
 80165b4:	4619      	mov	r1, r3
 80165b6:	462b      	mov	r3, r5
 80165b8:	bfbb      	ittet	lt
 80165ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80165be:	461d      	movlt	r5, r3
 80165c0:	2300      	movge	r3, #0
 80165c2:	232d      	movlt	r3, #45	; 0x2d
 80165c4:	700b      	strb	r3, [r1, #0]
 80165c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80165cc:	4691      	mov	r9, r2
 80165ce:	f023 0820 	bic.w	r8, r3, #32
 80165d2:	bfbc      	itt	lt
 80165d4:	4622      	movlt	r2, r4
 80165d6:	4614      	movlt	r4, r2
 80165d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80165dc:	d005      	beq.n	80165ea <__cvt+0x42>
 80165de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80165e2:	d100      	bne.n	80165e6 <__cvt+0x3e>
 80165e4:	3601      	adds	r6, #1
 80165e6:	2102      	movs	r1, #2
 80165e8:	e000      	b.n	80165ec <__cvt+0x44>
 80165ea:	2103      	movs	r1, #3
 80165ec:	ab03      	add	r3, sp, #12
 80165ee:	9301      	str	r3, [sp, #4]
 80165f0:	ab02      	add	r3, sp, #8
 80165f2:	9300      	str	r3, [sp, #0]
 80165f4:	ec45 4b10 	vmov	d0, r4, r5
 80165f8:	4653      	mov	r3, sl
 80165fa:	4632      	mov	r2, r6
 80165fc:	f000 fd30 	bl	8017060 <_dtoa_r>
 8016600:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016604:	4607      	mov	r7, r0
 8016606:	d102      	bne.n	801660e <__cvt+0x66>
 8016608:	f019 0f01 	tst.w	r9, #1
 801660c:	d022      	beq.n	8016654 <__cvt+0xac>
 801660e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016612:	eb07 0906 	add.w	r9, r7, r6
 8016616:	d110      	bne.n	801663a <__cvt+0x92>
 8016618:	783b      	ldrb	r3, [r7, #0]
 801661a:	2b30      	cmp	r3, #48	; 0x30
 801661c:	d10a      	bne.n	8016634 <__cvt+0x8c>
 801661e:	2200      	movs	r2, #0
 8016620:	2300      	movs	r3, #0
 8016622:	4620      	mov	r0, r4
 8016624:	4629      	mov	r1, r5
 8016626:	f7ea fa67 	bl	8000af8 <__aeabi_dcmpeq>
 801662a:	b918      	cbnz	r0, 8016634 <__cvt+0x8c>
 801662c:	f1c6 0601 	rsb	r6, r6, #1
 8016630:	f8ca 6000 	str.w	r6, [sl]
 8016634:	f8da 3000 	ldr.w	r3, [sl]
 8016638:	4499      	add	r9, r3
 801663a:	2200      	movs	r2, #0
 801663c:	2300      	movs	r3, #0
 801663e:	4620      	mov	r0, r4
 8016640:	4629      	mov	r1, r5
 8016642:	f7ea fa59 	bl	8000af8 <__aeabi_dcmpeq>
 8016646:	b108      	cbz	r0, 801664c <__cvt+0xa4>
 8016648:	f8cd 900c 	str.w	r9, [sp, #12]
 801664c:	2230      	movs	r2, #48	; 0x30
 801664e:	9b03      	ldr	r3, [sp, #12]
 8016650:	454b      	cmp	r3, r9
 8016652:	d307      	bcc.n	8016664 <__cvt+0xbc>
 8016654:	9b03      	ldr	r3, [sp, #12]
 8016656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016658:	1bdb      	subs	r3, r3, r7
 801665a:	4638      	mov	r0, r7
 801665c:	6013      	str	r3, [r2, #0]
 801665e:	b004      	add	sp, #16
 8016660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016664:	1c59      	adds	r1, r3, #1
 8016666:	9103      	str	r1, [sp, #12]
 8016668:	701a      	strb	r2, [r3, #0]
 801666a:	e7f0      	b.n	801664e <__cvt+0xa6>

0801666c <__exponent>:
 801666c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801666e:	4603      	mov	r3, r0
 8016670:	2900      	cmp	r1, #0
 8016672:	bfb8      	it	lt
 8016674:	4249      	neglt	r1, r1
 8016676:	f803 2b02 	strb.w	r2, [r3], #2
 801667a:	bfb4      	ite	lt
 801667c:	222d      	movlt	r2, #45	; 0x2d
 801667e:	222b      	movge	r2, #43	; 0x2b
 8016680:	2909      	cmp	r1, #9
 8016682:	7042      	strb	r2, [r0, #1]
 8016684:	dd2a      	ble.n	80166dc <__exponent+0x70>
 8016686:	f10d 0407 	add.w	r4, sp, #7
 801668a:	46a4      	mov	ip, r4
 801668c:	270a      	movs	r7, #10
 801668e:	46a6      	mov	lr, r4
 8016690:	460a      	mov	r2, r1
 8016692:	fb91 f6f7 	sdiv	r6, r1, r7
 8016696:	fb07 1516 	mls	r5, r7, r6, r1
 801669a:	3530      	adds	r5, #48	; 0x30
 801669c:	2a63      	cmp	r2, #99	; 0x63
 801669e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80166a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80166a6:	4631      	mov	r1, r6
 80166a8:	dcf1      	bgt.n	801668e <__exponent+0x22>
 80166aa:	3130      	adds	r1, #48	; 0x30
 80166ac:	f1ae 0502 	sub.w	r5, lr, #2
 80166b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80166b4:	1c44      	adds	r4, r0, #1
 80166b6:	4629      	mov	r1, r5
 80166b8:	4561      	cmp	r1, ip
 80166ba:	d30a      	bcc.n	80166d2 <__exponent+0x66>
 80166bc:	f10d 0209 	add.w	r2, sp, #9
 80166c0:	eba2 020e 	sub.w	r2, r2, lr
 80166c4:	4565      	cmp	r5, ip
 80166c6:	bf88      	it	hi
 80166c8:	2200      	movhi	r2, #0
 80166ca:	4413      	add	r3, r2
 80166cc:	1a18      	subs	r0, r3, r0
 80166ce:	b003      	add	sp, #12
 80166d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80166d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80166da:	e7ed      	b.n	80166b8 <__exponent+0x4c>
 80166dc:	2330      	movs	r3, #48	; 0x30
 80166de:	3130      	adds	r1, #48	; 0x30
 80166e0:	7083      	strb	r3, [r0, #2]
 80166e2:	70c1      	strb	r1, [r0, #3]
 80166e4:	1d03      	adds	r3, r0, #4
 80166e6:	e7f1      	b.n	80166cc <__exponent+0x60>

080166e8 <_printf_float>:
 80166e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ec:	ed2d 8b02 	vpush	{d8}
 80166f0:	b08d      	sub	sp, #52	; 0x34
 80166f2:	460c      	mov	r4, r1
 80166f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80166f8:	4616      	mov	r6, r2
 80166fa:	461f      	mov	r7, r3
 80166fc:	4605      	mov	r5, r0
 80166fe:	f001 fba5 	bl	8017e4c <_localeconv_r>
 8016702:	f8d0 a000 	ldr.w	sl, [r0]
 8016706:	4650      	mov	r0, sl
 8016708:	f7e9 fd7a 	bl	8000200 <strlen>
 801670c:	2300      	movs	r3, #0
 801670e:	930a      	str	r3, [sp, #40]	; 0x28
 8016710:	6823      	ldr	r3, [r4, #0]
 8016712:	9305      	str	r3, [sp, #20]
 8016714:	f8d8 3000 	ldr.w	r3, [r8]
 8016718:	f894 b018 	ldrb.w	fp, [r4, #24]
 801671c:	3307      	adds	r3, #7
 801671e:	f023 0307 	bic.w	r3, r3, #7
 8016722:	f103 0208 	add.w	r2, r3, #8
 8016726:	f8c8 2000 	str.w	r2, [r8]
 801672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801672e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016732:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016736:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801673a:	9307      	str	r3, [sp, #28]
 801673c:	f8cd 8018 	str.w	r8, [sp, #24]
 8016740:	ee08 0a10 	vmov	s16, r0
 8016744:	4b9f      	ldr	r3, [pc, #636]	; (80169c4 <_printf_float+0x2dc>)
 8016746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801674a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801674e:	f7ea fa05 	bl	8000b5c <__aeabi_dcmpun>
 8016752:	bb88      	cbnz	r0, 80167b8 <_printf_float+0xd0>
 8016754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016758:	4b9a      	ldr	r3, [pc, #616]	; (80169c4 <_printf_float+0x2dc>)
 801675a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801675e:	f7ea f9df 	bl	8000b20 <__aeabi_dcmple>
 8016762:	bb48      	cbnz	r0, 80167b8 <_printf_float+0xd0>
 8016764:	2200      	movs	r2, #0
 8016766:	2300      	movs	r3, #0
 8016768:	4640      	mov	r0, r8
 801676a:	4649      	mov	r1, r9
 801676c:	f7ea f9ce 	bl	8000b0c <__aeabi_dcmplt>
 8016770:	b110      	cbz	r0, 8016778 <_printf_float+0x90>
 8016772:	232d      	movs	r3, #45	; 0x2d
 8016774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016778:	4b93      	ldr	r3, [pc, #588]	; (80169c8 <_printf_float+0x2e0>)
 801677a:	4894      	ldr	r0, [pc, #592]	; (80169cc <_printf_float+0x2e4>)
 801677c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016780:	bf94      	ite	ls
 8016782:	4698      	movls	r8, r3
 8016784:	4680      	movhi	r8, r0
 8016786:	2303      	movs	r3, #3
 8016788:	6123      	str	r3, [r4, #16]
 801678a:	9b05      	ldr	r3, [sp, #20]
 801678c:	f023 0204 	bic.w	r2, r3, #4
 8016790:	6022      	str	r2, [r4, #0]
 8016792:	f04f 0900 	mov.w	r9, #0
 8016796:	9700      	str	r7, [sp, #0]
 8016798:	4633      	mov	r3, r6
 801679a:	aa0b      	add	r2, sp, #44	; 0x2c
 801679c:	4621      	mov	r1, r4
 801679e:	4628      	mov	r0, r5
 80167a0:	f000 f9d8 	bl	8016b54 <_printf_common>
 80167a4:	3001      	adds	r0, #1
 80167a6:	f040 8090 	bne.w	80168ca <_printf_float+0x1e2>
 80167aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167ae:	b00d      	add	sp, #52	; 0x34
 80167b0:	ecbd 8b02 	vpop	{d8}
 80167b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167b8:	4642      	mov	r2, r8
 80167ba:	464b      	mov	r3, r9
 80167bc:	4640      	mov	r0, r8
 80167be:	4649      	mov	r1, r9
 80167c0:	f7ea f9cc 	bl	8000b5c <__aeabi_dcmpun>
 80167c4:	b140      	cbz	r0, 80167d8 <_printf_float+0xf0>
 80167c6:	464b      	mov	r3, r9
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	bfbc      	itt	lt
 80167cc:	232d      	movlt	r3, #45	; 0x2d
 80167ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80167d2:	487f      	ldr	r0, [pc, #508]	; (80169d0 <_printf_float+0x2e8>)
 80167d4:	4b7f      	ldr	r3, [pc, #508]	; (80169d4 <_printf_float+0x2ec>)
 80167d6:	e7d1      	b.n	801677c <_printf_float+0x94>
 80167d8:	6863      	ldr	r3, [r4, #4]
 80167da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80167de:	9206      	str	r2, [sp, #24]
 80167e0:	1c5a      	adds	r2, r3, #1
 80167e2:	d13f      	bne.n	8016864 <_printf_float+0x17c>
 80167e4:	2306      	movs	r3, #6
 80167e6:	6063      	str	r3, [r4, #4]
 80167e8:	9b05      	ldr	r3, [sp, #20]
 80167ea:	6861      	ldr	r1, [r4, #4]
 80167ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80167f0:	2300      	movs	r3, #0
 80167f2:	9303      	str	r3, [sp, #12]
 80167f4:	ab0a      	add	r3, sp, #40	; 0x28
 80167f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80167fa:	ab09      	add	r3, sp, #36	; 0x24
 80167fc:	ec49 8b10 	vmov	d0, r8, r9
 8016800:	9300      	str	r3, [sp, #0]
 8016802:	6022      	str	r2, [r4, #0]
 8016804:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016808:	4628      	mov	r0, r5
 801680a:	f7ff fecd 	bl	80165a8 <__cvt>
 801680e:	9b06      	ldr	r3, [sp, #24]
 8016810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016812:	2b47      	cmp	r3, #71	; 0x47
 8016814:	4680      	mov	r8, r0
 8016816:	d108      	bne.n	801682a <_printf_float+0x142>
 8016818:	1cc8      	adds	r0, r1, #3
 801681a:	db02      	blt.n	8016822 <_printf_float+0x13a>
 801681c:	6863      	ldr	r3, [r4, #4]
 801681e:	4299      	cmp	r1, r3
 8016820:	dd41      	ble.n	80168a6 <_printf_float+0x1be>
 8016822:	f1ab 0b02 	sub.w	fp, fp, #2
 8016826:	fa5f fb8b 	uxtb.w	fp, fp
 801682a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801682e:	d820      	bhi.n	8016872 <_printf_float+0x18a>
 8016830:	3901      	subs	r1, #1
 8016832:	465a      	mov	r2, fp
 8016834:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016838:	9109      	str	r1, [sp, #36]	; 0x24
 801683a:	f7ff ff17 	bl	801666c <__exponent>
 801683e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016840:	1813      	adds	r3, r2, r0
 8016842:	2a01      	cmp	r2, #1
 8016844:	4681      	mov	r9, r0
 8016846:	6123      	str	r3, [r4, #16]
 8016848:	dc02      	bgt.n	8016850 <_printf_float+0x168>
 801684a:	6822      	ldr	r2, [r4, #0]
 801684c:	07d2      	lsls	r2, r2, #31
 801684e:	d501      	bpl.n	8016854 <_printf_float+0x16c>
 8016850:	3301      	adds	r3, #1
 8016852:	6123      	str	r3, [r4, #16]
 8016854:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016858:	2b00      	cmp	r3, #0
 801685a:	d09c      	beq.n	8016796 <_printf_float+0xae>
 801685c:	232d      	movs	r3, #45	; 0x2d
 801685e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016862:	e798      	b.n	8016796 <_printf_float+0xae>
 8016864:	9a06      	ldr	r2, [sp, #24]
 8016866:	2a47      	cmp	r2, #71	; 0x47
 8016868:	d1be      	bne.n	80167e8 <_printf_float+0x100>
 801686a:	2b00      	cmp	r3, #0
 801686c:	d1bc      	bne.n	80167e8 <_printf_float+0x100>
 801686e:	2301      	movs	r3, #1
 8016870:	e7b9      	b.n	80167e6 <_printf_float+0xfe>
 8016872:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016876:	d118      	bne.n	80168aa <_printf_float+0x1c2>
 8016878:	2900      	cmp	r1, #0
 801687a:	6863      	ldr	r3, [r4, #4]
 801687c:	dd0b      	ble.n	8016896 <_printf_float+0x1ae>
 801687e:	6121      	str	r1, [r4, #16]
 8016880:	b913      	cbnz	r3, 8016888 <_printf_float+0x1a0>
 8016882:	6822      	ldr	r2, [r4, #0]
 8016884:	07d0      	lsls	r0, r2, #31
 8016886:	d502      	bpl.n	801688e <_printf_float+0x1a6>
 8016888:	3301      	adds	r3, #1
 801688a:	440b      	add	r3, r1
 801688c:	6123      	str	r3, [r4, #16]
 801688e:	65a1      	str	r1, [r4, #88]	; 0x58
 8016890:	f04f 0900 	mov.w	r9, #0
 8016894:	e7de      	b.n	8016854 <_printf_float+0x16c>
 8016896:	b913      	cbnz	r3, 801689e <_printf_float+0x1b6>
 8016898:	6822      	ldr	r2, [r4, #0]
 801689a:	07d2      	lsls	r2, r2, #31
 801689c:	d501      	bpl.n	80168a2 <_printf_float+0x1ba>
 801689e:	3302      	adds	r3, #2
 80168a0:	e7f4      	b.n	801688c <_printf_float+0x1a4>
 80168a2:	2301      	movs	r3, #1
 80168a4:	e7f2      	b.n	801688c <_printf_float+0x1a4>
 80168a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80168aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168ac:	4299      	cmp	r1, r3
 80168ae:	db05      	blt.n	80168bc <_printf_float+0x1d4>
 80168b0:	6823      	ldr	r3, [r4, #0]
 80168b2:	6121      	str	r1, [r4, #16]
 80168b4:	07d8      	lsls	r0, r3, #31
 80168b6:	d5ea      	bpl.n	801688e <_printf_float+0x1a6>
 80168b8:	1c4b      	adds	r3, r1, #1
 80168ba:	e7e7      	b.n	801688c <_printf_float+0x1a4>
 80168bc:	2900      	cmp	r1, #0
 80168be:	bfd4      	ite	le
 80168c0:	f1c1 0202 	rsble	r2, r1, #2
 80168c4:	2201      	movgt	r2, #1
 80168c6:	4413      	add	r3, r2
 80168c8:	e7e0      	b.n	801688c <_printf_float+0x1a4>
 80168ca:	6823      	ldr	r3, [r4, #0]
 80168cc:	055a      	lsls	r2, r3, #21
 80168ce:	d407      	bmi.n	80168e0 <_printf_float+0x1f8>
 80168d0:	6923      	ldr	r3, [r4, #16]
 80168d2:	4642      	mov	r2, r8
 80168d4:	4631      	mov	r1, r6
 80168d6:	4628      	mov	r0, r5
 80168d8:	47b8      	blx	r7
 80168da:	3001      	adds	r0, #1
 80168dc:	d12c      	bne.n	8016938 <_printf_float+0x250>
 80168de:	e764      	b.n	80167aa <_printf_float+0xc2>
 80168e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80168e4:	f240 80e0 	bls.w	8016aa8 <_printf_float+0x3c0>
 80168e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80168ec:	2200      	movs	r2, #0
 80168ee:	2300      	movs	r3, #0
 80168f0:	f7ea f902 	bl	8000af8 <__aeabi_dcmpeq>
 80168f4:	2800      	cmp	r0, #0
 80168f6:	d034      	beq.n	8016962 <_printf_float+0x27a>
 80168f8:	4a37      	ldr	r2, [pc, #220]	; (80169d8 <_printf_float+0x2f0>)
 80168fa:	2301      	movs	r3, #1
 80168fc:	4631      	mov	r1, r6
 80168fe:	4628      	mov	r0, r5
 8016900:	47b8      	blx	r7
 8016902:	3001      	adds	r0, #1
 8016904:	f43f af51 	beq.w	80167aa <_printf_float+0xc2>
 8016908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801690c:	429a      	cmp	r2, r3
 801690e:	db02      	blt.n	8016916 <_printf_float+0x22e>
 8016910:	6823      	ldr	r3, [r4, #0]
 8016912:	07d8      	lsls	r0, r3, #31
 8016914:	d510      	bpl.n	8016938 <_printf_float+0x250>
 8016916:	ee18 3a10 	vmov	r3, s16
 801691a:	4652      	mov	r2, sl
 801691c:	4631      	mov	r1, r6
 801691e:	4628      	mov	r0, r5
 8016920:	47b8      	blx	r7
 8016922:	3001      	adds	r0, #1
 8016924:	f43f af41 	beq.w	80167aa <_printf_float+0xc2>
 8016928:	f04f 0800 	mov.w	r8, #0
 801692c:	f104 091a 	add.w	r9, r4, #26
 8016930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016932:	3b01      	subs	r3, #1
 8016934:	4543      	cmp	r3, r8
 8016936:	dc09      	bgt.n	801694c <_printf_float+0x264>
 8016938:	6823      	ldr	r3, [r4, #0]
 801693a:	079b      	lsls	r3, r3, #30
 801693c:	f100 8105 	bmi.w	8016b4a <_printf_float+0x462>
 8016940:	68e0      	ldr	r0, [r4, #12]
 8016942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016944:	4298      	cmp	r0, r3
 8016946:	bfb8      	it	lt
 8016948:	4618      	movlt	r0, r3
 801694a:	e730      	b.n	80167ae <_printf_float+0xc6>
 801694c:	2301      	movs	r3, #1
 801694e:	464a      	mov	r2, r9
 8016950:	4631      	mov	r1, r6
 8016952:	4628      	mov	r0, r5
 8016954:	47b8      	blx	r7
 8016956:	3001      	adds	r0, #1
 8016958:	f43f af27 	beq.w	80167aa <_printf_float+0xc2>
 801695c:	f108 0801 	add.w	r8, r8, #1
 8016960:	e7e6      	b.n	8016930 <_printf_float+0x248>
 8016962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016964:	2b00      	cmp	r3, #0
 8016966:	dc39      	bgt.n	80169dc <_printf_float+0x2f4>
 8016968:	4a1b      	ldr	r2, [pc, #108]	; (80169d8 <_printf_float+0x2f0>)
 801696a:	2301      	movs	r3, #1
 801696c:	4631      	mov	r1, r6
 801696e:	4628      	mov	r0, r5
 8016970:	47b8      	blx	r7
 8016972:	3001      	adds	r0, #1
 8016974:	f43f af19 	beq.w	80167aa <_printf_float+0xc2>
 8016978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801697c:	4313      	orrs	r3, r2
 801697e:	d102      	bne.n	8016986 <_printf_float+0x29e>
 8016980:	6823      	ldr	r3, [r4, #0]
 8016982:	07d9      	lsls	r1, r3, #31
 8016984:	d5d8      	bpl.n	8016938 <_printf_float+0x250>
 8016986:	ee18 3a10 	vmov	r3, s16
 801698a:	4652      	mov	r2, sl
 801698c:	4631      	mov	r1, r6
 801698e:	4628      	mov	r0, r5
 8016990:	47b8      	blx	r7
 8016992:	3001      	adds	r0, #1
 8016994:	f43f af09 	beq.w	80167aa <_printf_float+0xc2>
 8016998:	f04f 0900 	mov.w	r9, #0
 801699c:	f104 0a1a 	add.w	sl, r4, #26
 80169a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169a2:	425b      	negs	r3, r3
 80169a4:	454b      	cmp	r3, r9
 80169a6:	dc01      	bgt.n	80169ac <_printf_float+0x2c4>
 80169a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169aa:	e792      	b.n	80168d2 <_printf_float+0x1ea>
 80169ac:	2301      	movs	r3, #1
 80169ae:	4652      	mov	r2, sl
 80169b0:	4631      	mov	r1, r6
 80169b2:	4628      	mov	r0, r5
 80169b4:	47b8      	blx	r7
 80169b6:	3001      	adds	r0, #1
 80169b8:	f43f aef7 	beq.w	80167aa <_printf_float+0xc2>
 80169bc:	f109 0901 	add.w	r9, r9, #1
 80169c0:	e7ee      	b.n	80169a0 <_printf_float+0x2b8>
 80169c2:	bf00      	nop
 80169c4:	7fefffff 	.word	0x7fefffff
 80169c8:	08019738 	.word	0x08019738
 80169cc:	0801973c 	.word	0x0801973c
 80169d0:	08019744 	.word	0x08019744
 80169d4:	08019740 	.word	0x08019740
 80169d8:	08019748 	.word	0x08019748
 80169dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80169e0:	429a      	cmp	r2, r3
 80169e2:	bfa8      	it	ge
 80169e4:	461a      	movge	r2, r3
 80169e6:	2a00      	cmp	r2, #0
 80169e8:	4691      	mov	r9, r2
 80169ea:	dc37      	bgt.n	8016a5c <_printf_float+0x374>
 80169ec:	f04f 0b00 	mov.w	fp, #0
 80169f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80169f4:	f104 021a 	add.w	r2, r4, #26
 80169f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80169fa:	9305      	str	r3, [sp, #20]
 80169fc:	eba3 0309 	sub.w	r3, r3, r9
 8016a00:	455b      	cmp	r3, fp
 8016a02:	dc33      	bgt.n	8016a6c <_printf_float+0x384>
 8016a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	db3b      	blt.n	8016a84 <_printf_float+0x39c>
 8016a0c:	6823      	ldr	r3, [r4, #0]
 8016a0e:	07da      	lsls	r2, r3, #31
 8016a10:	d438      	bmi.n	8016a84 <_printf_float+0x39c>
 8016a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a14:	9a05      	ldr	r2, [sp, #20]
 8016a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a18:	1a9a      	subs	r2, r3, r2
 8016a1a:	eba3 0901 	sub.w	r9, r3, r1
 8016a1e:	4591      	cmp	r9, r2
 8016a20:	bfa8      	it	ge
 8016a22:	4691      	movge	r9, r2
 8016a24:	f1b9 0f00 	cmp.w	r9, #0
 8016a28:	dc35      	bgt.n	8016a96 <_printf_float+0x3ae>
 8016a2a:	f04f 0800 	mov.w	r8, #0
 8016a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016a32:	f104 0a1a 	add.w	sl, r4, #26
 8016a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016a3a:	1a9b      	subs	r3, r3, r2
 8016a3c:	eba3 0309 	sub.w	r3, r3, r9
 8016a40:	4543      	cmp	r3, r8
 8016a42:	f77f af79 	ble.w	8016938 <_printf_float+0x250>
 8016a46:	2301      	movs	r3, #1
 8016a48:	4652      	mov	r2, sl
 8016a4a:	4631      	mov	r1, r6
 8016a4c:	4628      	mov	r0, r5
 8016a4e:	47b8      	blx	r7
 8016a50:	3001      	adds	r0, #1
 8016a52:	f43f aeaa 	beq.w	80167aa <_printf_float+0xc2>
 8016a56:	f108 0801 	add.w	r8, r8, #1
 8016a5a:	e7ec      	b.n	8016a36 <_printf_float+0x34e>
 8016a5c:	4613      	mov	r3, r2
 8016a5e:	4631      	mov	r1, r6
 8016a60:	4642      	mov	r2, r8
 8016a62:	4628      	mov	r0, r5
 8016a64:	47b8      	blx	r7
 8016a66:	3001      	adds	r0, #1
 8016a68:	d1c0      	bne.n	80169ec <_printf_float+0x304>
 8016a6a:	e69e      	b.n	80167aa <_printf_float+0xc2>
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	4631      	mov	r1, r6
 8016a70:	4628      	mov	r0, r5
 8016a72:	9205      	str	r2, [sp, #20]
 8016a74:	47b8      	blx	r7
 8016a76:	3001      	adds	r0, #1
 8016a78:	f43f ae97 	beq.w	80167aa <_printf_float+0xc2>
 8016a7c:	9a05      	ldr	r2, [sp, #20]
 8016a7e:	f10b 0b01 	add.w	fp, fp, #1
 8016a82:	e7b9      	b.n	80169f8 <_printf_float+0x310>
 8016a84:	ee18 3a10 	vmov	r3, s16
 8016a88:	4652      	mov	r2, sl
 8016a8a:	4631      	mov	r1, r6
 8016a8c:	4628      	mov	r0, r5
 8016a8e:	47b8      	blx	r7
 8016a90:	3001      	adds	r0, #1
 8016a92:	d1be      	bne.n	8016a12 <_printf_float+0x32a>
 8016a94:	e689      	b.n	80167aa <_printf_float+0xc2>
 8016a96:	9a05      	ldr	r2, [sp, #20]
 8016a98:	464b      	mov	r3, r9
 8016a9a:	4442      	add	r2, r8
 8016a9c:	4631      	mov	r1, r6
 8016a9e:	4628      	mov	r0, r5
 8016aa0:	47b8      	blx	r7
 8016aa2:	3001      	adds	r0, #1
 8016aa4:	d1c1      	bne.n	8016a2a <_printf_float+0x342>
 8016aa6:	e680      	b.n	80167aa <_printf_float+0xc2>
 8016aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016aaa:	2a01      	cmp	r2, #1
 8016aac:	dc01      	bgt.n	8016ab2 <_printf_float+0x3ca>
 8016aae:	07db      	lsls	r3, r3, #31
 8016ab0:	d538      	bpl.n	8016b24 <_printf_float+0x43c>
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	4642      	mov	r2, r8
 8016ab6:	4631      	mov	r1, r6
 8016ab8:	4628      	mov	r0, r5
 8016aba:	47b8      	blx	r7
 8016abc:	3001      	adds	r0, #1
 8016abe:	f43f ae74 	beq.w	80167aa <_printf_float+0xc2>
 8016ac2:	ee18 3a10 	vmov	r3, s16
 8016ac6:	4652      	mov	r2, sl
 8016ac8:	4631      	mov	r1, r6
 8016aca:	4628      	mov	r0, r5
 8016acc:	47b8      	blx	r7
 8016ace:	3001      	adds	r0, #1
 8016ad0:	f43f ae6b 	beq.w	80167aa <_printf_float+0xc2>
 8016ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016ad8:	2200      	movs	r2, #0
 8016ada:	2300      	movs	r3, #0
 8016adc:	f7ea f80c 	bl	8000af8 <__aeabi_dcmpeq>
 8016ae0:	b9d8      	cbnz	r0, 8016b1a <_printf_float+0x432>
 8016ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ae4:	f108 0201 	add.w	r2, r8, #1
 8016ae8:	3b01      	subs	r3, #1
 8016aea:	4631      	mov	r1, r6
 8016aec:	4628      	mov	r0, r5
 8016aee:	47b8      	blx	r7
 8016af0:	3001      	adds	r0, #1
 8016af2:	d10e      	bne.n	8016b12 <_printf_float+0x42a>
 8016af4:	e659      	b.n	80167aa <_printf_float+0xc2>
 8016af6:	2301      	movs	r3, #1
 8016af8:	4652      	mov	r2, sl
 8016afa:	4631      	mov	r1, r6
 8016afc:	4628      	mov	r0, r5
 8016afe:	47b8      	blx	r7
 8016b00:	3001      	adds	r0, #1
 8016b02:	f43f ae52 	beq.w	80167aa <_printf_float+0xc2>
 8016b06:	f108 0801 	add.w	r8, r8, #1
 8016b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b0c:	3b01      	subs	r3, #1
 8016b0e:	4543      	cmp	r3, r8
 8016b10:	dcf1      	bgt.n	8016af6 <_printf_float+0x40e>
 8016b12:	464b      	mov	r3, r9
 8016b14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016b18:	e6dc      	b.n	80168d4 <_printf_float+0x1ec>
 8016b1a:	f04f 0800 	mov.w	r8, #0
 8016b1e:	f104 0a1a 	add.w	sl, r4, #26
 8016b22:	e7f2      	b.n	8016b0a <_printf_float+0x422>
 8016b24:	2301      	movs	r3, #1
 8016b26:	4642      	mov	r2, r8
 8016b28:	e7df      	b.n	8016aea <_printf_float+0x402>
 8016b2a:	2301      	movs	r3, #1
 8016b2c:	464a      	mov	r2, r9
 8016b2e:	4631      	mov	r1, r6
 8016b30:	4628      	mov	r0, r5
 8016b32:	47b8      	blx	r7
 8016b34:	3001      	adds	r0, #1
 8016b36:	f43f ae38 	beq.w	80167aa <_printf_float+0xc2>
 8016b3a:	f108 0801 	add.w	r8, r8, #1
 8016b3e:	68e3      	ldr	r3, [r4, #12]
 8016b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b42:	1a5b      	subs	r3, r3, r1
 8016b44:	4543      	cmp	r3, r8
 8016b46:	dcf0      	bgt.n	8016b2a <_printf_float+0x442>
 8016b48:	e6fa      	b.n	8016940 <_printf_float+0x258>
 8016b4a:	f04f 0800 	mov.w	r8, #0
 8016b4e:	f104 0919 	add.w	r9, r4, #25
 8016b52:	e7f4      	b.n	8016b3e <_printf_float+0x456>

08016b54 <_printf_common>:
 8016b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b58:	4616      	mov	r6, r2
 8016b5a:	4699      	mov	r9, r3
 8016b5c:	688a      	ldr	r2, [r1, #8]
 8016b5e:	690b      	ldr	r3, [r1, #16]
 8016b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016b64:	4293      	cmp	r3, r2
 8016b66:	bfb8      	it	lt
 8016b68:	4613      	movlt	r3, r2
 8016b6a:	6033      	str	r3, [r6, #0]
 8016b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016b70:	4607      	mov	r7, r0
 8016b72:	460c      	mov	r4, r1
 8016b74:	b10a      	cbz	r2, 8016b7a <_printf_common+0x26>
 8016b76:	3301      	adds	r3, #1
 8016b78:	6033      	str	r3, [r6, #0]
 8016b7a:	6823      	ldr	r3, [r4, #0]
 8016b7c:	0699      	lsls	r1, r3, #26
 8016b7e:	bf42      	ittt	mi
 8016b80:	6833      	ldrmi	r3, [r6, #0]
 8016b82:	3302      	addmi	r3, #2
 8016b84:	6033      	strmi	r3, [r6, #0]
 8016b86:	6825      	ldr	r5, [r4, #0]
 8016b88:	f015 0506 	ands.w	r5, r5, #6
 8016b8c:	d106      	bne.n	8016b9c <_printf_common+0x48>
 8016b8e:	f104 0a19 	add.w	sl, r4, #25
 8016b92:	68e3      	ldr	r3, [r4, #12]
 8016b94:	6832      	ldr	r2, [r6, #0]
 8016b96:	1a9b      	subs	r3, r3, r2
 8016b98:	42ab      	cmp	r3, r5
 8016b9a:	dc26      	bgt.n	8016bea <_printf_common+0x96>
 8016b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016ba0:	1e13      	subs	r3, r2, #0
 8016ba2:	6822      	ldr	r2, [r4, #0]
 8016ba4:	bf18      	it	ne
 8016ba6:	2301      	movne	r3, #1
 8016ba8:	0692      	lsls	r2, r2, #26
 8016baa:	d42b      	bmi.n	8016c04 <_printf_common+0xb0>
 8016bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016bb0:	4649      	mov	r1, r9
 8016bb2:	4638      	mov	r0, r7
 8016bb4:	47c0      	blx	r8
 8016bb6:	3001      	adds	r0, #1
 8016bb8:	d01e      	beq.n	8016bf8 <_printf_common+0xa4>
 8016bba:	6823      	ldr	r3, [r4, #0]
 8016bbc:	68e5      	ldr	r5, [r4, #12]
 8016bbe:	6832      	ldr	r2, [r6, #0]
 8016bc0:	f003 0306 	and.w	r3, r3, #6
 8016bc4:	2b04      	cmp	r3, #4
 8016bc6:	bf08      	it	eq
 8016bc8:	1aad      	subeq	r5, r5, r2
 8016bca:	68a3      	ldr	r3, [r4, #8]
 8016bcc:	6922      	ldr	r2, [r4, #16]
 8016bce:	bf0c      	ite	eq
 8016bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016bd4:	2500      	movne	r5, #0
 8016bd6:	4293      	cmp	r3, r2
 8016bd8:	bfc4      	itt	gt
 8016bda:	1a9b      	subgt	r3, r3, r2
 8016bdc:	18ed      	addgt	r5, r5, r3
 8016bde:	2600      	movs	r6, #0
 8016be0:	341a      	adds	r4, #26
 8016be2:	42b5      	cmp	r5, r6
 8016be4:	d11a      	bne.n	8016c1c <_printf_common+0xc8>
 8016be6:	2000      	movs	r0, #0
 8016be8:	e008      	b.n	8016bfc <_printf_common+0xa8>
 8016bea:	2301      	movs	r3, #1
 8016bec:	4652      	mov	r2, sl
 8016bee:	4649      	mov	r1, r9
 8016bf0:	4638      	mov	r0, r7
 8016bf2:	47c0      	blx	r8
 8016bf4:	3001      	adds	r0, #1
 8016bf6:	d103      	bne.n	8016c00 <_printf_common+0xac>
 8016bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c00:	3501      	adds	r5, #1
 8016c02:	e7c6      	b.n	8016b92 <_printf_common+0x3e>
 8016c04:	18e1      	adds	r1, r4, r3
 8016c06:	1c5a      	adds	r2, r3, #1
 8016c08:	2030      	movs	r0, #48	; 0x30
 8016c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c0e:	4422      	add	r2, r4
 8016c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c18:	3302      	adds	r3, #2
 8016c1a:	e7c7      	b.n	8016bac <_printf_common+0x58>
 8016c1c:	2301      	movs	r3, #1
 8016c1e:	4622      	mov	r2, r4
 8016c20:	4649      	mov	r1, r9
 8016c22:	4638      	mov	r0, r7
 8016c24:	47c0      	blx	r8
 8016c26:	3001      	adds	r0, #1
 8016c28:	d0e6      	beq.n	8016bf8 <_printf_common+0xa4>
 8016c2a:	3601      	adds	r6, #1
 8016c2c:	e7d9      	b.n	8016be2 <_printf_common+0x8e>
	...

08016c30 <_printf_i>:
 8016c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c34:	7e0f      	ldrb	r7, [r1, #24]
 8016c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016c38:	2f78      	cmp	r7, #120	; 0x78
 8016c3a:	4691      	mov	r9, r2
 8016c3c:	4680      	mov	r8, r0
 8016c3e:	460c      	mov	r4, r1
 8016c40:	469a      	mov	sl, r3
 8016c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016c46:	d807      	bhi.n	8016c58 <_printf_i+0x28>
 8016c48:	2f62      	cmp	r7, #98	; 0x62
 8016c4a:	d80a      	bhi.n	8016c62 <_printf_i+0x32>
 8016c4c:	2f00      	cmp	r7, #0
 8016c4e:	f000 80d8 	beq.w	8016e02 <_printf_i+0x1d2>
 8016c52:	2f58      	cmp	r7, #88	; 0x58
 8016c54:	f000 80a3 	beq.w	8016d9e <_printf_i+0x16e>
 8016c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016c60:	e03a      	b.n	8016cd8 <_printf_i+0xa8>
 8016c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016c66:	2b15      	cmp	r3, #21
 8016c68:	d8f6      	bhi.n	8016c58 <_printf_i+0x28>
 8016c6a:	a101      	add	r1, pc, #4	; (adr r1, 8016c70 <_printf_i+0x40>)
 8016c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016c70:	08016cc9 	.word	0x08016cc9
 8016c74:	08016cdd 	.word	0x08016cdd
 8016c78:	08016c59 	.word	0x08016c59
 8016c7c:	08016c59 	.word	0x08016c59
 8016c80:	08016c59 	.word	0x08016c59
 8016c84:	08016c59 	.word	0x08016c59
 8016c88:	08016cdd 	.word	0x08016cdd
 8016c8c:	08016c59 	.word	0x08016c59
 8016c90:	08016c59 	.word	0x08016c59
 8016c94:	08016c59 	.word	0x08016c59
 8016c98:	08016c59 	.word	0x08016c59
 8016c9c:	08016de9 	.word	0x08016de9
 8016ca0:	08016d0d 	.word	0x08016d0d
 8016ca4:	08016dcb 	.word	0x08016dcb
 8016ca8:	08016c59 	.word	0x08016c59
 8016cac:	08016c59 	.word	0x08016c59
 8016cb0:	08016e0b 	.word	0x08016e0b
 8016cb4:	08016c59 	.word	0x08016c59
 8016cb8:	08016d0d 	.word	0x08016d0d
 8016cbc:	08016c59 	.word	0x08016c59
 8016cc0:	08016c59 	.word	0x08016c59
 8016cc4:	08016dd3 	.word	0x08016dd3
 8016cc8:	682b      	ldr	r3, [r5, #0]
 8016cca:	1d1a      	adds	r2, r3, #4
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	602a      	str	r2, [r5, #0]
 8016cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016cd8:	2301      	movs	r3, #1
 8016cda:	e0a3      	b.n	8016e24 <_printf_i+0x1f4>
 8016cdc:	6820      	ldr	r0, [r4, #0]
 8016cde:	6829      	ldr	r1, [r5, #0]
 8016ce0:	0606      	lsls	r6, r0, #24
 8016ce2:	f101 0304 	add.w	r3, r1, #4
 8016ce6:	d50a      	bpl.n	8016cfe <_printf_i+0xce>
 8016ce8:	680e      	ldr	r6, [r1, #0]
 8016cea:	602b      	str	r3, [r5, #0]
 8016cec:	2e00      	cmp	r6, #0
 8016cee:	da03      	bge.n	8016cf8 <_printf_i+0xc8>
 8016cf0:	232d      	movs	r3, #45	; 0x2d
 8016cf2:	4276      	negs	r6, r6
 8016cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016cf8:	485e      	ldr	r0, [pc, #376]	; (8016e74 <_printf_i+0x244>)
 8016cfa:	230a      	movs	r3, #10
 8016cfc:	e019      	b.n	8016d32 <_printf_i+0x102>
 8016cfe:	680e      	ldr	r6, [r1, #0]
 8016d00:	602b      	str	r3, [r5, #0]
 8016d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016d06:	bf18      	it	ne
 8016d08:	b236      	sxthne	r6, r6
 8016d0a:	e7ef      	b.n	8016cec <_printf_i+0xbc>
 8016d0c:	682b      	ldr	r3, [r5, #0]
 8016d0e:	6820      	ldr	r0, [r4, #0]
 8016d10:	1d19      	adds	r1, r3, #4
 8016d12:	6029      	str	r1, [r5, #0]
 8016d14:	0601      	lsls	r1, r0, #24
 8016d16:	d501      	bpl.n	8016d1c <_printf_i+0xec>
 8016d18:	681e      	ldr	r6, [r3, #0]
 8016d1a:	e002      	b.n	8016d22 <_printf_i+0xf2>
 8016d1c:	0646      	lsls	r6, r0, #25
 8016d1e:	d5fb      	bpl.n	8016d18 <_printf_i+0xe8>
 8016d20:	881e      	ldrh	r6, [r3, #0]
 8016d22:	4854      	ldr	r0, [pc, #336]	; (8016e74 <_printf_i+0x244>)
 8016d24:	2f6f      	cmp	r7, #111	; 0x6f
 8016d26:	bf0c      	ite	eq
 8016d28:	2308      	moveq	r3, #8
 8016d2a:	230a      	movne	r3, #10
 8016d2c:	2100      	movs	r1, #0
 8016d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d32:	6865      	ldr	r5, [r4, #4]
 8016d34:	60a5      	str	r5, [r4, #8]
 8016d36:	2d00      	cmp	r5, #0
 8016d38:	bfa2      	ittt	ge
 8016d3a:	6821      	ldrge	r1, [r4, #0]
 8016d3c:	f021 0104 	bicge.w	r1, r1, #4
 8016d40:	6021      	strge	r1, [r4, #0]
 8016d42:	b90e      	cbnz	r6, 8016d48 <_printf_i+0x118>
 8016d44:	2d00      	cmp	r5, #0
 8016d46:	d04d      	beq.n	8016de4 <_printf_i+0x1b4>
 8016d48:	4615      	mov	r5, r2
 8016d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8016d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8016d52:	5dc7      	ldrb	r7, [r0, r7]
 8016d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016d58:	4637      	mov	r7, r6
 8016d5a:	42bb      	cmp	r3, r7
 8016d5c:	460e      	mov	r6, r1
 8016d5e:	d9f4      	bls.n	8016d4a <_printf_i+0x11a>
 8016d60:	2b08      	cmp	r3, #8
 8016d62:	d10b      	bne.n	8016d7c <_printf_i+0x14c>
 8016d64:	6823      	ldr	r3, [r4, #0]
 8016d66:	07de      	lsls	r6, r3, #31
 8016d68:	d508      	bpl.n	8016d7c <_printf_i+0x14c>
 8016d6a:	6923      	ldr	r3, [r4, #16]
 8016d6c:	6861      	ldr	r1, [r4, #4]
 8016d6e:	4299      	cmp	r1, r3
 8016d70:	bfde      	ittt	le
 8016d72:	2330      	movle	r3, #48	; 0x30
 8016d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016d78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016d7c:	1b52      	subs	r2, r2, r5
 8016d7e:	6122      	str	r2, [r4, #16]
 8016d80:	f8cd a000 	str.w	sl, [sp]
 8016d84:	464b      	mov	r3, r9
 8016d86:	aa03      	add	r2, sp, #12
 8016d88:	4621      	mov	r1, r4
 8016d8a:	4640      	mov	r0, r8
 8016d8c:	f7ff fee2 	bl	8016b54 <_printf_common>
 8016d90:	3001      	adds	r0, #1
 8016d92:	d14c      	bne.n	8016e2e <_printf_i+0x1fe>
 8016d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d98:	b004      	add	sp, #16
 8016d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d9e:	4835      	ldr	r0, [pc, #212]	; (8016e74 <_printf_i+0x244>)
 8016da0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016da4:	6829      	ldr	r1, [r5, #0]
 8016da6:	6823      	ldr	r3, [r4, #0]
 8016da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8016dac:	6029      	str	r1, [r5, #0]
 8016dae:	061d      	lsls	r5, r3, #24
 8016db0:	d514      	bpl.n	8016ddc <_printf_i+0x1ac>
 8016db2:	07df      	lsls	r7, r3, #31
 8016db4:	bf44      	itt	mi
 8016db6:	f043 0320 	orrmi.w	r3, r3, #32
 8016dba:	6023      	strmi	r3, [r4, #0]
 8016dbc:	b91e      	cbnz	r6, 8016dc6 <_printf_i+0x196>
 8016dbe:	6823      	ldr	r3, [r4, #0]
 8016dc0:	f023 0320 	bic.w	r3, r3, #32
 8016dc4:	6023      	str	r3, [r4, #0]
 8016dc6:	2310      	movs	r3, #16
 8016dc8:	e7b0      	b.n	8016d2c <_printf_i+0xfc>
 8016dca:	6823      	ldr	r3, [r4, #0]
 8016dcc:	f043 0320 	orr.w	r3, r3, #32
 8016dd0:	6023      	str	r3, [r4, #0]
 8016dd2:	2378      	movs	r3, #120	; 0x78
 8016dd4:	4828      	ldr	r0, [pc, #160]	; (8016e78 <_printf_i+0x248>)
 8016dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016dda:	e7e3      	b.n	8016da4 <_printf_i+0x174>
 8016ddc:	0659      	lsls	r1, r3, #25
 8016dde:	bf48      	it	mi
 8016de0:	b2b6      	uxthmi	r6, r6
 8016de2:	e7e6      	b.n	8016db2 <_printf_i+0x182>
 8016de4:	4615      	mov	r5, r2
 8016de6:	e7bb      	b.n	8016d60 <_printf_i+0x130>
 8016de8:	682b      	ldr	r3, [r5, #0]
 8016dea:	6826      	ldr	r6, [r4, #0]
 8016dec:	6961      	ldr	r1, [r4, #20]
 8016dee:	1d18      	adds	r0, r3, #4
 8016df0:	6028      	str	r0, [r5, #0]
 8016df2:	0635      	lsls	r5, r6, #24
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	d501      	bpl.n	8016dfc <_printf_i+0x1cc>
 8016df8:	6019      	str	r1, [r3, #0]
 8016dfa:	e002      	b.n	8016e02 <_printf_i+0x1d2>
 8016dfc:	0670      	lsls	r0, r6, #25
 8016dfe:	d5fb      	bpl.n	8016df8 <_printf_i+0x1c8>
 8016e00:	8019      	strh	r1, [r3, #0]
 8016e02:	2300      	movs	r3, #0
 8016e04:	6123      	str	r3, [r4, #16]
 8016e06:	4615      	mov	r5, r2
 8016e08:	e7ba      	b.n	8016d80 <_printf_i+0x150>
 8016e0a:	682b      	ldr	r3, [r5, #0]
 8016e0c:	1d1a      	adds	r2, r3, #4
 8016e0e:	602a      	str	r2, [r5, #0]
 8016e10:	681d      	ldr	r5, [r3, #0]
 8016e12:	6862      	ldr	r2, [r4, #4]
 8016e14:	2100      	movs	r1, #0
 8016e16:	4628      	mov	r0, r5
 8016e18:	f7e9 f9fa 	bl	8000210 <memchr>
 8016e1c:	b108      	cbz	r0, 8016e22 <_printf_i+0x1f2>
 8016e1e:	1b40      	subs	r0, r0, r5
 8016e20:	6060      	str	r0, [r4, #4]
 8016e22:	6863      	ldr	r3, [r4, #4]
 8016e24:	6123      	str	r3, [r4, #16]
 8016e26:	2300      	movs	r3, #0
 8016e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e2c:	e7a8      	b.n	8016d80 <_printf_i+0x150>
 8016e2e:	6923      	ldr	r3, [r4, #16]
 8016e30:	462a      	mov	r2, r5
 8016e32:	4649      	mov	r1, r9
 8016e34:	4640      	mov	r0, r8
 8016e36:	47d0      	blx	sl
 8016e38:	3001      	adds	r0, #1
 8016e3a:	d0ab      	beq.n	8016d94 <_printf_i+0x164>
 8016e3c:	6823      	ldr	r3, [r4, #0]
 8016e3e:	079b      	lsls	r3, r3, #30
 8016e40:	d413      	bmi.n	8016e6a <_printf_i+0x23a>
 8016e42:	68e0      	ldr	r0, [r4, #12]
 8016e44:	9b03      	ldr	r3, [sp, #12]
 8016e46:	4298      	cmp	r0, r3
 8016e48:	bfb8      	it	lt
 8016e4a:	4618      	movlt	r0, r3
 8016e4c:	e7a4      	b.n	8016d98 <_printf_i+0x168>
 8016e4e:	2301      	movs	r3, #1
 8016e50:	4632      	mov	r2, r6
 8016e52:	4649      	mov	r1, r9
 8016e54:	4640      	mov	r0, r8
 8016e56:	47d0      	blx	sl
 8016e58:	3001      	adds	r0, #1
 8016e5a:	d09b      	beq.n	8016d94 <_printf_i+0x164>
 8016e5c:	3501      	adds	r5, #1
 8016e5e:	68e3      	ldr	r3, [r4, #12]
 8016e60:	9903      	ldr	r1, [sp, #12]
 8016e62:	1a5b      	subs	r3, r3, r1
 8016e64:	42ab      	cmp	r3, r5
 8016e66:	dcf2      	bgt.n	8016e4e <_printf_i+0x21e>
 8016e68:	e7eb      	b.n	8016e42 <_printf_i+0x212>
 8016e6a:	2500      	movs	r5, #0
 8016e6c:	f104 0619 	add.w	r6, r4, #25
 8016e70:	e7f5      	b.n	8016e5e <_printf_i+0x22e>
 8016e72:	bf00      	nop
 8016e74:	0801974a 	.word	0x0801974a
 8016e78:	0801975b 	.word	0x0801975b

08016e7c <iprintf>:
 8016e7c:	b40f      	push	{r0, r1, r2, r3}
 8016e7e:	4b0a      	ldr	r3, [pc, #40]	; (8016ea8 <iprintf+0x2c>)
 8016e80:	b513      	push	{r0, r1, r4, lr}
 8016e82:	681c      	ldr	r4, [r3, #0]
 8016e84:	b124      	cbz	r4, 8016e90 <iprintf+0x14>
 8016e86:	69a3      	ldr	r3, [r4, #24]
 8016e88:	b913      	cbnz	r3, 8016e90 <iprintf+0x14>
 8016e8a:	4620      	mov	r0, r4
 8016e8c:	f000 ff2e 	bl	8017cec <__sinit>
 8016e90:	ab05      	add	r3, sp, #20
 8016e92:	9a04      	ldr	r2, [sp, #16]
 8016e94:	68a1      	ldr	r1, [r4, #8]
 8016e96:	9301      	str	r3, [sp, #4]
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f001 fd1d 	bl	80188d8 <_vfiprintf_r>
 8016e9e:	b002      	add	sp, #8
 8016ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ea4:	b004      	add	sp, #16
 8016ea6:	4770      	bx	lr
 8016ea8:	20000184 	.word	0x20000184

08016eac <_sbrk_r>:
 8016eac:	b538      	push	{r3, r4, r5, lr}
 8016eae:	4d06      	ldr	r5, [pc, #24]	; (8016ec8 <_sbrk_r+0x1c>)
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	4604      	mov	r4, r0
 8016eb4:	4608      	mov	r0, r1
 8016eb6:	602b      	str	r3, [r5, #0]
 8016eb8:	f002 f9b6 	bl	8019228 <_sbrk>
 8016ebc:	1c43      	adds	r3, r0, #1
 8016ebe:	d102      	bne.n	8016ec6 <_sbrk_r+0x1a>
 8016ec0:	682b      	ldr	r3, [r5, #0]
 8016ec2:	b103      	cbz	r3, 8016ec6 <_sbrk_r+0x1a>
 8016ec4:	6023      	str	r3, [r4, #0]
 8016ec6:	bd38      	pop	{r3, r4, r5, pc}
 8016ec8:	20002f6c 	.word	0x20002f6c

08016ecc <siprintf>:
 8016ecc:	b40e      	push	{r1, r2, r3}
 8016ece:	b500      	push	{lr}
 8016ed0:	b09c      	sub	sp, #112	; 0x70
 8016ed2:	ab1d      	add	r3, sp, #116	; 0x74
 8016ed4:	9002      	str	r0, [sp, #8]
 8016ed6:	9006      	str	r0, [sp, #24]
 8016ed8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016edc:	4809      	ldr	r0, [pc, #36]	; (8016f04 <siprintf+0x38>)
 8016ede:	9107      	str	r1, [sp, #28]
 8016ee0:	9104      	str	r1, [sp, #16]
 8016ee2:	4909      	ldr	r1, [pc, #36]	; (8016f08 <siprintf+0x3c>)
 8016ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ee8:	9105      	str	r1, [sp, #20]
 8016eea:	6800      	ldr	r0, [r0, #0]
 8016eec:	9301      	str	r3, [sp, #4]
 8016eee:	a902      	add	r1, sp, #8
 8016ef0:	f001 fbc8 	bl	8018684 <_svfiprintf_r>
 8016ef4:	9b02      	ldr	r3, [sp, #8]
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	701a      	strb	r2, [r3, #0]
 8016efa:	b01c      	add	sp, #112	; 0x70
 8016efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f00:	b003      	add	sp, #12
 8016f02:	4770      	bx	lr
 8016f04:	20000184 	.word	0x20000184
 8016f08:	ffff0208 	.word	0xffff0208

08016f0c <__assert_func>:
 8016f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f0e:	4614      	mov	r4, r2
 8016f10:	461a      	mov	r2, r3
 8016f12:	4b09      	ldr	r3, [pc, #36]	; (8016f38 <__assert_func+0x2c>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	4605      	mov	r5, r0
 8016f18:	68d8      	ldr	r0, [r3, #12]
 8016f1a:	b14c      	cbz	r4, 8016f30 <__assert_func+0x24>
 8016f1c:	4b07      	ldr	r3, [pc, #28]	; (8016f3c <__assert_func+0x30>)
 8016f1e:	9100      	str	r1, [sp, #0]
 8016f20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016f24:	4906      	ldr	r1, [pc, #24]	; (8016f40 <__assert_func+0x34>)
 8016f26:	462b      	mov	r3, r5
 8016f28:	f000 ff5e 	bl	8017de8 <fiprintf>
 8016f2c:	f001 ff28 	bl	8018d80 <abort>
 8016f30:	4b04      	ldr	r3, [pc, #16]	; (8016f44 <__assert_func+0x38>)
 8016f32:	461c      	mov	r4, r3
 8016f34:	e7f3      	b.n	8016f1e <__assert_func+0x12>
 8016f36:	bf00      	nop
 8016f38:	20000184 	.word	0x20000184
 8016f3c:	0801976c 	.word	0x0801976c
 8016f40:	08019779 	.word	0x08019779
 8016f44:	080197a7 	.word	0x080197a7

08016f48 <quorem>:
 8016f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f4c:	6903      	ldr	r3, [r0, #16]
 8016f4e:	690c      	ldr	r4, [r1, #16]
 8016f50:	42a3      	cmp	r3, r4
 8016f52:	4607      	mov	r7, r0
 8016f54:	f2c0 8081 	blt.w	801705a <quorem+0x112>
 8016f58:	3c01      	subs	r4, #1
 8016f5a:	f101 0814 	add.w	r8, r1, #20
 8016f5e:	f100 0514 	add.w	r5, r0, #20
 8016f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016f66:	9301      	str	r3, [sp, #4]
 8016f68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016f70:	3301      	adds	r3, #1
 8016f72:	429a      	cmp	r2, r3
 8016f74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016f78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016f7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8016f80:	d331      	bcc.n	8016fe6 <quorem+0x9e>
 8016f82:	f04f 0e00 	mov.w	lr, #0
 8016f86:	4640      	mov	r0, r8
 8016f88:	46ac      	mov	ip, r5
 8016f8a:	46f2      	mov	sl, lr
 8016f8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8016f90:	b293      	uxth	r3, r2
 8016f92:	fb06 e303 	mla	r3, r6, r3, lr
 8016f96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016f9a:	b29b      	uxth	r3, r3
 8016f9c:	ebaa 0303 	sub.w	r3, sl, r3
 8016fa0:	f8dc a000 	ldr.w	sl, [ip]
 8016fa4:	0c12      	lsrs	r2, r2, #16
 8016fa6:	fa13 f38a 	uxtah	r3, r3, sl
 8016faa:	fb06 e202 	mla	r2, r6, r2, lr
 8016fae:	9300      	str	r3, [sp, #0]
 8016fb0:	9b00      	ldr	r3, [sp, #0]
 8016fb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016fb6:	b292      	uxth	r2, r2
 8016fb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016fbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016fc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8016fc4:	4581      	cmp	r9, r0
 8016fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016fca:	f84c 3b04 	str.w	r3, [ip], #4
 8016fce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016fd2:	d2db      	bcs.n	8016f8c <quorem+0x44>
 8016fd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8016fd8:	b92b      	cbnz	r3, 8016fe6 <quorem+0x9e>
 8016fda:	9b01      	ldr	r3, [sp, #4]
 8016fdc:	3b04      	subs	r3, #4
 8016fde:	429d      	cmp	r5, r3
 8016fe0:	461a      	mov	r2, r3
 8016fe2:	d32e      	bcc.n	8017042 <quorem+0xfa>
 8016fe4:	613c      	str	r4, [r7, #16]
 8016fe6:	4638      	mov	r0, r7
 8016fe8:	f001 f9d8 	bl	801839c <__mcmp>
 8016fec:	2800      	cmp	r0, #0
 8016fee:	db24      	blt.n	801703a <quorem+0xf2>
 8016ff0:	3601      	adds	r6, #1
 8016ff2:	4628      	mov	r0, r5
 8016ff4:	f04f 0c00 	mov.w	ip, #0
 8016ff8:	f858 2b04 	ldr.w	r2, [r8], #4
 8016ffc:	f8d0 e000 	ldr.w	lr, [r0]
 8017000:	b293      	uxth	r3, r2
 8017002:	ebac 0303 	sub.w	r3, ip, r3
 8017006:	0c12      	lsrs	r2, r2, #16
 8017008:	fa13 f38e 	uxtah	r3, r3, lr
 801700c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017010:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017014:	b29b      	uxth	r3, r3
 8017016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801701a:	45c1      	cmp	r9, r8
 801701c:	f840 3b04 	str.w	r3, [r0], #4
 8017020:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017024:	d2e8      	bcs.n	8016ff8 <quorem+0xb0>
 8017026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801702a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801702e:	b922      	cbnz	r2, 801703a <quorem+0xf2>
 8017030:	3b04      	subs	r3, #4
 8017032:	429d      	cmp	r5, r3
 8017034:	461a      	mov	r2, r3
 8017036:	d30a      	bcc.n	801704e <quorem+0x106>
 8017038:	613c      	str	r4, [r7, #16]
 801703a:	4630      	mov	r0, r6
 801703c:	b003      	add	sp, #12
 801703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017042:	6812      	ldr	r2, [r2, #0]
 8017044:	3b04      	subs	r3, #4
 8017046:	2a00      	cmp	r2, #0
 8017048:	d1cc      	bne.n	8016fe4 <quorem+0x9c>
 801704a:	3c01      	subs	r4, #1
 801704c:	e7c7      	b.n	8016fde <quorem+0x96>
 801704e:	6812      	ldr	r2, [r2, #0]
 8017050:	3b04      	subs	r3, #4
 8017052:	2a00      	cmp	r2, #0
 8017054:	d1f0      	bne.n	8017038 <quorem+0xf0>
 8017056:	3c01      	subs	r4, #1
 8017058:	e7eb      	b.n	8017032 <quorem+0xea>
 801705a:	2000      	movs	r0, #0
 801705c:	e7ee      	b.n	801703c <quorem+0xf4>
	...

08017060 <_dtoa_r>:
 8017060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017064:	ed2d 8b04 	vpush	{d8-d9}
 8017068:	ec57 6b10 	vmov	r6, r7, d0
 801706c:	b093      	sub	sp, #76	; 0x4c
 801706e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017070:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017074:	9106      	str	r1, [sp, #24]
 8017076:	ee10 aa10 	vmov	sl, s0
 801707a:	4604      	mov	r4, r0
 801707c:	9209      	str	r2, [sp, #36]	; 0x24
 801707e:	930c      	str	r3, [sp, #48]	; 0x30
 8017080:	46bb      	mov	fp, r7
 8017082:	b975      	cbnz	r5, 80170a2 <_dtoa_r+0x42>
 8017084:	2010      	movs	r0, #16
 8017086:	f7ff f991 	bl	80163ac <malloc>
 801708a:	4602      	mov	r2, r0
 801708c:	6260      	str	r0, [r4, #36]	; 0x24
 801708e:	b920      	cbnz	r0, 801709a <_dtoa_r+0x3a>
 8017090:	4ba7      	ldr	r3, [pc, #668]	; (8017330 <_dtoa_r+0x2d0>)
 8017092:	21ea      	movs	r1, #234	; 0xea
 8017094:	48a7      	ldr	r0, [pc, #668]	; (8017334 <_dtoa_r+0x2d4>)
 8017096:	f7ff ff39 	bl	8016f0c <__assert_func>
 801709a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801709e:	6005      	str	r5, [r0, #0]
 80170a0:	60c5      	str	r5, [r0, #12]
 80170a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170a4:	6819      	ldr	r1, [r3, #0]
 80170a6:	b151      	cbz	r1, 80170be <_dtoa_r+0x5e>
 80170a8:	685a      	ldr	r2, [r3, #4]
 80170aa:	604a      	str	r2, [r1, #4]
 80170ac:	2301      	movs	r3, #1
 80170ae:	4093      	lsls	r3, r2
 80170b0:	608b      	str	r3, [r1, #8]
 80170b2:	4620      	mov	r0, r4
 80170b4:	f000 ff30 	bl	8017f18 <_Bfree>
 80170b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170ba:	2200      	movs	r2, #0
 80170bc:	601a      	str	r2, [r3, #0]
 80170be:	1e3b      	subs	r3, r7, #0
 80170c0:	bfaa      	itet	ge
 80170c2:	2300      	movge	r3, #0
 80170c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80170c8:	f8c8 3000 	strge.w	r3, [r8]
 80170cc:	4b9a      	ldr	r3, [pc, #616]	; (8017338 <_dtoa_r+0x2d8>)
 80170ce:	bfbc      	itt	lt
 80170d0:	2201      	movlt	r2, #1
 80170d2:	f8c8 2000 	strlt.w	r2, [r8]
 80170d6:	ea33 030b 	bics.w	r3, r3, fp
 80170da:	d11b      	bne.n	8017114 <_dtoa_r+0xb4>
 80170dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80170de:	f242 730f 	movw	r3, #9999	; 0x270f
 80170e2:	6013      	str	r3, [r2, #0]
 80170e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80170e8:	4333      	orrs	r3, r6
 80170ea:	f000 8592 	beq.w	8017c12 <_dtoa_r+0xbb2>
 80170ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170f0:	b963      	cbnz	r3, 801710c <_dtoa_r+0xac>
 80170f2:	4b92      	ldr	r3, [pc, #584]	; (801733c <_dtoa_r+0x2dc>)
 80170f4:	e022      	b.n	801713c <_dtoa_r+0xdc>
 80170f6:	4b92      	ldr	r3, [pc, #584]	; (8017340 <_dtoa_r+0x2e0>)
 80170f8:	9301      	str	r3, [sp, #4]
 80170fa:	3308      	adds	r3, #8
 80170fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80170fe:	6013      	str	r3, [r2, #0]
 8017100:	9801      	ldr	r0, [sp, #4]
 8017102:	b013      	add	sp, #76	; 0x4c
 8017104:	ecbd 8b04 	vpop	{d8-d9}
 8017108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801710c:	4b8b      	ldr	r3, [pc, #556]	; (801733c <_dtoa_r+0x2dc>)
 801710e:	9301      	str	r3, [sp, #4]
 8017110:	3303      	adds	r3, #3
 8017112:	e7f3      	b.n	80170fc <_dtoa_r+0x9c>
 8017114:	2200      	movs	r2, #0
 8017116:	2300      	movs	r3, #0
 8017118:	4650      	mov	r0, sl
 801711a:	4659      	mov	r1, fp
 801711c:	f7e9 fcec 	bl	8000af8 <__aeabi_dcmpeq>
 8017120:	ec4b ab19 	vmov	d9, sl, fp
 8017124:	4680      	mov	r8, r0
 8017126:	b158      	cbz	r0, 8017140 <_dtoa_r+0xe0>
 8017128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801712a:	2301      	movs	r3, #1
 801712c:	6013      	str	r3, [r2, #0]
 801712e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017130:	2b00      	cmp	r3, #0
 8017132:	f000 856b 	beq.w	8017c0c <_dtoa_r+0xbac>
 8017136:	4883      	ldr	r0, [pc, #524]	; (8017344 <_dtoa_r+0x2e4>)
 8017138:	6018      	str	r0, [r3, #0]
 801713a:	1e43      	subs	r3, r0, #1
 801713c:	9301      	str	r3, [sp, #4]
 801713e:	e7df      	b.n	8017100 <_dtoa_r+0xa0>
 8017140:	ec4b ab10 	vmov	d0, sl, fp
 8017144:	aa10      	add	r2, sp, #64	; 0x40
 8017146:	a911      	add	r1, sp, #68	; 0x44
 8017148:	4620      	mov	r0, r4
 801714a:	f001 f9cd 	bl	80184e8 <__d2b>
 801714e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8017152:	ee08 0a10 	vmov	s16, r0
 8017156:	2d00      	cmp	r5, #0
 8017158:	f000 8084 	beq.w	8017264 <_dtoa_r+0x204>
 801715c:	ee19 3a90 	vmov	r3, s19
 8017160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017164:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017168:	4656      	mov	r6, sl
 801716a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801716e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017172:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8017176:	4b74      	ldr	r3, [pc, #464]	; (8017348 <_dtoa_r+0x2e8>)
 8017178:	2200      	movs	r2, #0
 801717a:	4630      	mov	r0, r6
 801717c:	4639      	mov	r1, r7
 801717e:	f7e9 f89b 	bl	80002b8 <__aeabi_dsub>
 8017182:	a365      	add	r3, pc, #404	; (adr r3, 8017318 <_dtoa_r+0x2b8>)
 8017184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017188:	f7e9 fa4e 	bl	8000628 <__aeabi_dmul>
 801718c:	a364      	add	r3, pc, #400	; (adr r3, 8017320 <_dtoa_r+0x2c0>)
 801718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017192:	f7e9 f893 	bl	80002bc <__adddf3>
 8017196:	4606      	mov	r6, r0
 8017198:	4628      	mov	r0, r5
 801719a:	460f      	mov	r7, r1
 801719c:	f7e9 f9da 	bl	8000554 <__aeabi_i2d>
 80171a0:	a361      	add	r3, pc, #388	; (adr r3, 8017328 <_dtoa_r+0x2c8>)
 80171a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a6:	f7e9 fa3f 	bl	8000628 <__aeabi_dmul>
 80171aa:	4602      	mov	r2, r0
 80171ac:	460b      	mov	r3, r1
 80171ae:	4630      	mov	r0, r6
 80171b0:	4639      	mov	r1, r7
 80171b2:	f7e9 f883 	bl	80002bc <__adddf3>
 80171b6:	4606      	mov	r6, r0
 80171b8:	460f      	mov	r7, r1
 80171ba:	f7e9 fce5 	bl	8000b88 <__aeabi_d2iz>
 80171be:	2200      	movs	r2, #0
 80171c0:	9000      	str	r0, [sp, #0]
 80171c2:	2300      	movs	r3, #0
 80171c4:	4630      	mov	r0, r6
 80171c6:	4639      	mov	r1, r7
 80171c8:	f7e9 fca0 	bl	8000b0c <__aeabi_dcmplt>
 80171cc:	b150      	cbz	r0, 80171e4 <_dtoa_r+0x184>
 80171ce:	9800      	ldr	r0, [sp, #0]
 80171d0:	f7e9 f9c0 	bl	8000554 <__aeabi_i2d>
 80171d4:	4632      	mov	r2, r6
 80171d6:	463b      	mov	r3, r7
 80171d8:	f7e9 fc8e 	bl	8000af8 <__aeabi_dcmpeq>
 80171dc:	b910      	cbnz	r0, 80171e4 <_dtoa_r+0x184>
 80171de:	9b00      	ldr	r3, [sp, #0]
 80171e0:	3b01      	subs	r3, #1
 80171e2:	9300      	str	r3, [sp, #0]
 80171e4:	9b00      	ldr	r3, [sp, #0]
 80171e6:	2b16      	cmp	r3, #22
 80171e8:	d85a      	bhi.n	80172a0 <_dtoa_r+0x240>
 80171ea:	9a00      	ldr	r2, [sp, #0]
 80171ec:	4b57      	ldr	r3, [pc, #348]	; (801734c <_dtoa_r+0x2ec>)
 80171ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80171f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f6:	ec51 0b19 	vmov	r0, r1, d9
 80171fa:	f7e9 fc87 	bl	8000b0c <__aeabi_dcmplt>
 80171fe:	2800      	cmp	r0, #0
 8017200:	d050      	beq.n	80172a4 <_dtoa_r+0x244>
 8017202:	9b00      	ldr	r3, [sp, #0]
 8017204:	3b01      	subs	r3, #1
 8017206:	9300      	str	r3, [sp, #0]
 8017208:	2300      	movs	r3, #0
 801720a:	930b      	str	r3, [sp, #44]	; 0x2c
 801720c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801720e:	1b5d      	subs	r5, r3, r5
 8017210:	1e6b      	subs	r3, r5, #1
 8017212:	9305      	str	r3, [sp, #20]
 8017214:	bf45      	ittet	mi
 8017216:	f1c5 0301 	rsbmi	r3, r5, #1
 801721a:	9304      	strmi	r3, [sp, #16]
 801721c:	2300      	movpl	r3, #0
 801721e:	2300      	movmi	r3, #0
 8017220:	bf4c      	ite	mi
 8017222:	9305      	strmi	r3, [sp, #20]
 8017224:	9304      	strpl	r3, [sp, #16]
 8017226:	9b00      	ldr	r3, [sp, #0]
 8017228:	2b00      	cmp	r3, #0
 801722a:	db3d      	blt.n	80172a8 <_dtoa_r+0x248>
 801722c:	9b05      	ldr	r3, [sp, #20]
 801722e:	9a00      	ldr	r2, [sp, #0]
 8017230:	920a      	str	r2, [sp, #40]	; 0x28
 8017232:	4413      	add	r3, r2
 8017234:	9305      	str	r3, [sp, #20]
 8017236:	2300      	movs	r3, #0
 8017238:	9307      	str	r3, [sp, #28]
 801723a:	9b06      	ldr	r3, [sp, #24]
 801723c:	2b09      	cmp	r3, #9
 801723e:	f200 8089 	bhi.w	8017354 <_dtoa_r+0x2f4>
 8017242:	2b05      	cmp	r3, #5
 8017244:	bfc4      	itt	gt
 8017246:	3b04      	subgt	r3, #4
 8017248:	9306      	strgt	r3, [sp, #24]
 801724a:	9b06      	ldr	r3, [sp, #24]
 801724c:	f1a3 0302 	sub.w	r3, r3, #2
 8017250:	bfcc      	ite	gt
 8017252:	2500      	movgt	r5, #0
 8017254:	2501      	movle	r5, #1
 8017256:	2b03      	cmp	r3, #3
 8017258:	f200 8087 	bhi.w	801736a <_dtoa_r+0x30a>
 801725c:	e8df f003 	tbb	[pc, r3]
 8017260:	59383a2d 	.word	0x59383a2d
 8017264:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017268:	441d      	add	r5, r3
 801726a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801726e:	2b20      	cmp	r3, #32
 8017270:	bfc1      	itttt	gt
 8017272:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017276:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801727a:	fa0b f303 	lslgt.w	r3, fp, r3
 801727e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017282:	bfda      	itte	le
 8017284:	f1c3 0320 	rsble	r3, r3, #32
 8017288:	fa06 f003 	lslle.w	r0, r6, r3
 801728c:	4318      	orrgt	r0, r3
 801728e:	f7e9 f951 	bl	8000534 <__aeabi_ui2d>
 8017292:	2301      	movs	r3, #1
 8017294:	4606      	mov	r6, r0
 8017296:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801729a:	3d01      	subs	r5, #1
 801729c:	930e      	str	r3, [sp, #56]	; 0x38
 801729e:	e76a      	b.n	8017176 <_dtoa_r+0x116>
 80172a0:	2301      	movs	r3, #1
 80172a2:	e7b2      	b.n	801720a <_dtoa_r+0x1aa>
 80172a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80172a6:	e7b1      	b.n	801720c <_dtoa_r+0x1ac>
 80172a8:	9b04      	ldr	r3, [sp, #16]
 80172aa:	9a00      	ldr	r2, [sp, #0]
 80172ac:	1a9b      	subs	r3, r3, r2
 80172ae:	9304      	str	r3, [sp, #16]
 80172b0:	4253      	negs	r3, r2
 80172b2:	9307      	str	r3, [sp, #28]
 80172b4:	2300      	movs	r3, #0
 80172b6:	930a      	str	r3, [sp, #40]	; 0x28
 80172b8:	e7bf      	b.n	801723a <_dtoa_r+0x1da>
 80172ba:	2300      	movs	r3, #0
 80172bc:	9308      	str	r3, [sp, #32]
 80172be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	dc55      	bgt.n	8017370 <_dtoa_r+0x310>
 80172c4:	2301      	movs	r3, #1
 80172c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80172ca:	461a      	mov	r2, r3
 80172cc:	9209      	str	r2, [sp, #36]	; 0x24
 80172ce:	e00c      	b.n	80172ea <_dtoa_r+0x28a>
 80172d0:	2301      	movs	r3, #1
 80172d2:	e7f3      	b.n	80172bc <_dtoa_r+0x25c>
 80172d4:	2300      	movs	r3, #0
 80172d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172d8:	9308      	str	r3, [sp, #32]
 80172da:	9b00      	ldr	r3, [sp, #0]
 80172dc:	4413      	add	r3, r2
 80172de:	9302      	str	r3, [sp, #8]
 80172e0:	3301      	adds	r3, #1
 80172e2:	2b01      	cmp	r3, #1
 80172e4:	9303      	str	r3, [sp, #12]
 80172e6:	bfb8      	it	lt
 80172e8:	2301      	movlt	r3, #1
 80172ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80172ec:	2200      	movs	r2, #0
 80172ee:	6042      	str	r2, [r0, #4]
 80172f0:	2204      	movs	r2, #4
 80172f2:	f102 0614 	add.w	r6, r2, #20
 80172f6:	429e      	cmp	r6, r3
 80172f8:	6841      	ldr	r1, [r0, #4]
 80172fa:	d93d      	bls.n	8017378 <_dtoa_r+0x318>
 80172fc:	4620      	mov	r0, r4
 80172fe:	f000 fdcb 	bl	8017e98 <_Balloc>
 8017302:	9001      	str	r0, [sp, #4]
 8017304:	2800      	cmp	r0, #0
 8017306:	d13b      	bne.n	8017380 <_dtoa_r+0x320>
 8017308:	4b11      	ldr	r3, [pc, #68]	; (8017350 <_dtoa_r+0x2f0>)
 801730a:	4602      	mov	r2, r0
 801730c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017310:	e6c0      	b.n	8017094 <_dtoa_r+0x34>
 8017312:	2301      	movs	r3, #1
 8017314:	e7df      	b.n	80172d6 <_dtoa_r+0x276>
 8017316:	bf00      	nop
 8017318:	636f4361 	.word	0x636f4361
 801731c:	3fd287a7 	.word	0x3fd287a7
 8017320:	8b60c8b3 	.word	0x8b60c8b3
 8017324:	3fc68a28 	.word	0x3fc68a28
 8017328:	509f79fb 	.word	0x509f79fb
 801732c:	3fd34413 	.word	0x3fd34413
 8017330:	080198b6 	.word	0x080198b6
 8017334:	080198cd 	.word	0x080198cd
 8017338:	7ff00000 	.word	0x7ff00000
 801733c:	080198b2 	.word	0x080198b2
 8017340:	080198a9 	.word	0x080198a9
 8017344:	08019749 	.word	0x08019749
 8017348:	3ff80000 	.word	0x3ff80000
 801734c:	08019a30 	.word	0x08019a30
 8017350:	08019928 	.word	0x08019928
 8017354:	2501      	movs	r5, #1
 8017356:	2300      	movs	r3, #0
 8017358:	9306      	str	r3, [sp, #24]
 801735a:	9508      	str	r5, [sp, #32]
 801735c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017360:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017364:	2200      	movs	r2, #0
 8017366:	2312      	movs	r3, #18
 8017368:	e7b0      	b.n	80172cc <_dtoa_r+0x26c>
 801736a:	2301      	movs	r3, #1
 801736c:	9308      	str	r3, [sp, #32]
 801736e:	e7f5      	b.n	801735c <_dtoa_r+0x2fc>
 8017370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017372:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017376:	e7b8      	b.n	80172ea <_dtoa_r+0x28a>
 8017378:	3101      	adds	r1, #1
 801737a:	6041      	str	r1, [r0, #4]
 801737c:	0052      	lsls	r2, r2, #1
 801737e:	e7b8      	b.n	80172f2 <_dtoa_r+0x292>
 8017380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017382:	9a01      	ldr	r2, [sp, #4]
 8017384:	601a      	str	r2, [r3, #0]
 8017386:	9b03      	ldr	r3, [sp, #12]
 8017388:	2b0e      	cmp	r3, #14
 801738a:	f200 809d 	bhi.w	80174c8 <_dtoa_r+0x468>
 801738e:	2d00      	cmp	r5, #0
 8017390:	f000 809a 	beq.w	80174c8 <_dtoa_r+0x468>
 8017394:	9b00      	ldr	r3, [sp, #0]
 8017396:	2b00      	cmp	r3, #0
 8017398:	dd32      	ble.n	8017400 <_dtoa_r+0x3a0>
 801739a:	4ab7      	ldr	r2, [pc, #732]	; (8017678 <_dtoa_r+0x618>)
 801739c:	f003 030f 	and.w	r3, r3, #15
 80173a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80173a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80173a8:	9b00      	ldr	r3, [sp, #0]
 80173aa:	05d8      	lsls	r0, r3, #23
 80173ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80173b0:	d516      	bpl.n	80173e0 <_dtoa_r+0x380>
 80173b2:	4bb2      	ldr	r3, [pc, #712]	; (801767c <_dtoa_r+0x61c>)
 80173b4:	ec51 0b19 	vmov	r0, r1, d9
 80173b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80173bc:	f7e9 fa5e 	bl	800087c <__aeabi_ddiv>
 80173c0:	f007 070f 	and.w	r7, r7, #15
 80173c4:	4682      	mov	sl, r0
 80173c6:	468b      	mov	fp, r1
 80173c8:	2503      	movs	r5, #3
 80173ca:	4eac      	ldr	r6, [pc, #688]	; (801767c <_dtoa_r+0x61c>)
 80173cc:	b957      	cbnz	r7, 80173e4 <_dtoa_r+0x384>
 80173ce:	4642      	mov	r2, r8
 80173d0:	464b      	mov	r3, r9
 80173d2:	4650      	mov	r0, sl
 80173d4:	4659      	mov	r1, fp
 80173d6:	f7e9 fa51 	bl	800087c <__aeabi_ddiv>
 80173da:	4682      	mov	sl, r0
 80173dc:	468b      	mov	fp, r1
 80173de:	e028      	b.n	8017432 <_dtoa_r+0x3d2>
 80173e0:	2502      	movs	r5, #2
 80173e2:	e7f2      	b.n	80173ca <_dtoa_r+0x36a>
 80173e4:	07f9      	lsls	r1, r7, #31
 80173e6:	d508      	bpl.n	80173fa <_dtoa_r+0x39a>
 80173e8:	4640      	mov	r0, r8
 80173ea:	4649      	mov	r1, r9
 80173ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80173f0:	f7e9 f91a 	bl	8000628 <__aeabi_dmul>
 80173f4:	3501      	adds	r5, #1
 80173f6:	4680      	mov	r8, r0
 80173f8:	4689      	mov	r9, r1
 80173fa:	107f      	asrs	r7, r7, #1
 80173fc:	3608      	adds	r6, #8
 80173fe:	e7e5      	b.n	80173cc <_dtoa_r+0x36c>
 8017400:	f000 809b 	beq.w	801753a <_dtoa_r+0x4da>
 8017404:	9b00      	ldr	r3, [sp, #0]
 8017406:	4f9d      	ldr	r7, [pc, #628]	; (801767c <_dtoa_r+0x61c>)
 8017408:	425e      	negs	r6, r3
 801740a:	4b9b      	ldr	r3, [pc, #620]	; (8017678 <_dtoa_r+0x618>)
 801740c:	f006 020f 	and.w	r2, r6, #15
 8017410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017418:	ec51 0b19 	vmov	r0, r1, d9
 801741c:	f7e9 f904 	bl	8000628 <__aeabi_dmul>
 8017420:	1136      	asrs	r6, r6, #4
 8017422:	4682      	mov	sl, r0
 8017424:	468b      	mov	fp, r1
 8017426:	2300      	movs	r3, #0
 8017428:	2502      	movs	r5, #2
 801742a:	2e00      	cmp	r6, #0
 801742c:	d17a      	bne.n	8017524 <_dtoa_r+0x4c4>
 801742e:	2b00      	cmp	r3, #0
 8017430:	d1d3      	bne.n	80173da <_dtoa_r+0x37a>
 8017432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017434:	2b00      	cmp	r3, #0
 8017436:	f000 8082 	beq.w	801753e <_dtoa_r+0x4de>
 801743a:	4b91      	ldr	r3, [pc, #580]	; (8017680 <_dtoa_r+0x620>)
 801743c:	2200      	movs	r2, #0
 801743e:	4650      	mov	r0, sl
 8017440:	4659      	mov	r1, fp
 8017442:	f7e9 fb63 	bl	8000b0c <__aeabi_dcmplt>
 8017446:	2800      	cmp	r0, #0
 8017448:	d079      	beq.n	801753e <_dtoa_r+0x4de>
 801744a:	9b03      	ldr	r3, [sp, #12]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d076      	beq.n	801753e <_dtoa_r+0x4de>
 8017450:	9b02      	ldr	r3, [sp, #8]
 8017452:	2b00      	cmp	r3, #0
 8017454:	dd36      	ble.n	80174c4 <_dtoa_r+0x464>
 8017456:	9b00      	ldr	r3, [sp, #0]
 8017458:	4650      	mov	r0, sl
 801745a:	4659      	mov	r1, fp
 801745c:	1e5f      	subs	r7, r3, #1
 801745e:	2200      	movs	r2, #0
 8017460:	4b88      	ldr	r3, [pc, #544]	; (8017684 <_dtoa_r+0x624>)
 8017462:	f7e9 f8e1 	bl	8000628 <__aeabi_dmul>
 8017466:	9e02      	ldr	r6, [sp, #8]
 8017468:	4682      	mov	sl, r0
 801746a:	468b      	mov	fp, r1
 801746c:	3501      	adds	r5, #1
 801746e:	4628      	mov	r0, r5
 8017470:	f7e9 f870 	bl	8000554 <__aeabi_i2d>
 8017474:	4652      	mov	r2, sl
 8017476:	465b      	mov	r3, fp
 8017478:	f7e9 f8d6 	bl	8000628 <__aeabi_dmul>
 801747c:	4b82      	ldr	r3, [pc, #520]	; (8017688 <_dtoa_r+0x628>)
 801747e:	2200      	movs	r2, #0
 8017480:	f7e8 ff1c 	bl	80002bc <__adddf3>
 8017484:	46d0      	mov	r8, sl
 8017486:	46d9      	mov	r9, fp
 8017488:	4682      	mov	sl, r0
 801748a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801748e:	2e00      	cmp	r6, #0
 8017490:	d158      	bne.n	8017544 <_dtoa_r+0x4e4>
 8017492:	4b7e      	ldr	r3, [pc, #504]	; (801768c <_dtoa_r+0x62c>)
 8017494:	2200      	movs	r2, #0
 8017496:	4640      	mov	r0, r8
 8017498:	4649      	mov	r1, r9
 801749a:	f7e8 ff0d 	bl	80002b8 <__aeabi_dsub>
 801749e:	4652      	mov	r2, sl
 80174a0:	465b      	mov	r3, fp
 80174a2:	4680      	mov	r8, r0
 80174a4:	4689      	mov	r9, r1
 80174a6:	f7e9 fb4f 	bl	8000b48 <__aeabi_dcmpgt>
 80174aa:	2800      	cmp	r0, #0
 80174ac:	f040 8295 	bne.w	80179da <_dtoa_r+0x97a>
 80174b0:	4652      	mov	r2, sl
 80174b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80174b6:	4640      	mov	r0, r8
 80174b8:	4649      	mov	r1, r9
 80174ba:	f7e9 fb27 	bl	8000b0c <__aeabi_dcmplt>
 80174be:	2800      	cmp	r0, #0
 80174c0:	f040 8289 	bne.w	80179d6 <_dtoa_r+0x976>
 80174c4:	ec5b ab19 	vmov	sl, fp, d9
 80174c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	f2c0 8148 	blt.w	8017760 <_dtoa_r+0x700>
 80174d0:	9a00      	ldr	r2, [sp, #0]
 80174d2:	2a0e      	cmp	r2, #14
 80174d4:	f300 8144 	bgt.w	8017760 <_dtoa_r+0x700>
 80174d8:	4b67      	ldr	r3, [pc, #412]	; (8017678 <_dtoa_r+0x618>)
 80174da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80174de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80174e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	f280 80d5 	bge.w	8017694 <_dtoa_r+0x634>
 80174ea:	9b03      	ldr	r3, [sp, #12]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	f300 80d1 	bgt.w	8017694 <_dtoa_r+0x634>
 80174f2:	f040 826f 	bne.w	80179d4 <_dtoa_r+0x974>
 80174f6:	4b65      	ldr	r3, [pc, #404]	; (801768c <_dtoa_r+0x62c>)
 80174f8:	2200      	movs	r2, #0
 80174fa:	4640      	mov	r0, r8
 80174fc:	4649      	mov	r1, r9
 80174fe:	f7e9 f893 	bl	8000628 <__aeabi_dmul>
 8017502:	4652      	mov	r2, sl
 8017504:	465b      	mov	r3, fp
 8017506:	f7e9 fb15 	bl	8000b34 <__aeabi_dcmpge>
 801750a:	9e03      	ldr	r6, [sp, #12]
 801750c:	4637      	mov	r7, r6
 801750e:	2800      	cmp	r0, #0
 8017510:	f040 8245 	bne.w	801799e <_dtoa_r+0x93e>
 8017514:	9d01      	ldr	r5, [sp, #4]
 8017516:	2331      	movs	r3, #49	; 0x31
 8017518:	f805 3b01 	strb.w	r3, [r5], #1
 801751c:	9b00      	ldr	r3, [sp, #0]
 801751e:	3301      	adds	r3, #1
 8017520:	9300      	str	r3, [sp, #0]
 8017522:	e240      	b.n	80179a6 <_dtoa_r+0x946>
 8017524:	07f2      	lsls	r2, r6, #31
 8017526:	d505      	bpl.n	8017534 <_dtoa_r+0x4d4>
 8017528:	e9d7 2300 	ldrd	r2, r3, [r7]
 801752c:	f7e9 f87c 	bl	8000628 <__aeabi_dmul>
 8017530:	3501      	adds	r5, #1
 8017532:	2301      	movs	r3, #1
 8017534:	1076      	asrs	r6, r6, #1
 8017536:	3708      	adds	r7, #8
 8017538:	e777      	b.n	801742a <_dtoa_r+0x3ca>
 801753a:	2502      	movs	r5, #2
 801753c:	e779      	b.n	8017432 <_dtoa_r+0x3d2>
 801753e:	9f00      	ldr	r7, [sp, #0]
 8017540:	9e03      	ldr	r6, [sp, #12]
 8017542:	e794      	b.n	801746e <_dtoa_r+0x40e>
 8017544:	9901      	ldr	r1, [sp, #4]
 8017546:	4b4c      	ldr	r3, [pc, #304]	; (8017678 <_dtoa_r+0x618>)
 8017548:	4431      	add	r1, r6
 801754a:	910d      	str	r1, [sp, #52]	; 0x34
 801754c:	9908      	ldr	r1, [sp, #32]
 801754e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017552:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017556:	2900      	cmp	r1, #0
 8017558:	d043      	beq.n	80175e2 <_dtoa_r+0x582>
 801755a:	494d      	ldr	r1, [pc, #308]	; (8017690 <_dtoa_r+0x630>)
 801755c:	2000      	movs	r0, #0
 801755e:	f7e9 f98d 	bl	800087c <__aeabi_ddiv>
 8017562:	4652      	mov	r2, sl
 8017564:	465b      	mov	r3, fp
 8017566:	f7e8 fea7 	bl	80002b8 <__aeabi_dsub>
 801756a:	9d01      	ldr	r5, [sp, #4]
 801756c:	4682      	mov	sl, r0
 801756e:	468b      	mov	fp, r1
 8017570:	4649      	mov	r1, r9
 8017572:	4640      	mov	r0, r8
 8017574:	f7e9 fb08 	bl	8000b88 <__aeabi_d2iz>
 8017578:	4606      	mov	r6, r0
 801757a:	f7e8 ffeb 	bl	8000554 <__aeabi_i2d>
 801757e:	4602      	mov	r2, r0
 8017580:	460b      	mov	r3, r1
 8017582:	4640      	mov	r0, r8
 8017584:	4649      	mov	r1, r9
 8017586:	f7e8 fe97 	bl	80002b8 <__aeabi_dsub>
 801758a:	3630      	adds	r6, #48	; 0x30
 801758c:	f805 6b01 	strb.w	r6, [r5], #1
 8017590:	4652      	mov	r2, sl
 8017592:	465b      	mov	r3, fp
 8017594:	4680      	mov	r8, r0
 8017596:	4689      	mov	r9, r1
 8017598:	f7e9 fab8 	bl	8000b0c <__aeabi_dcmplt>
 801759c:	2800      	cmp	r0, #0
 801759e:	d163      	bne.n	8017668 <_dtoa_r+0x608>
 80175a0:	4642      	mov	r2, r8
 80175a2:	464b      	mov	r3, r9
 80175a4:	4936      	ldr	r1, [pc, #216]	; (8017680 <_dtoa_r+0x620>)
 80175a6:	2000      	movs	r0, #0
 80175a8:	f7e8 fe86 	bl	80002b8 <__aeabi_dsub>
 80175ac:	4652      	mov	r2, sl
 80175ae:	465b      	mov	r3, fp
 80175b0:	f7e9 faac 	bl	8000b0c <__aeabi_dcmplt>
 80175b4:	2800      	cmp	r0, #0
 80175b6:	f040 80b5 	bne.w	8017724 <_dtoa_r+0x6c4>
 80175ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175bc:	429d      	cmp	r5, r3
 80175be:	d081      	beq.n	80174c4 <_dtoa_r+0x464>
 80175c0:	4b30      	ldr	r3, [pc, #192]	; (8017684 <_dtoa_r+0x624>)
 80175c2:	2200      	movs	r2, #0
 80175c4:	4650      	mov	r0, sl
 80175c6:	4659      	mov	r1, fp
 80175c8:	f7e9 f82e 	bl	8000628 <__aeabi_dmul>
 80175cc:	4b2d      	ldr	r3, [pc, #180]	; (8017684 <_dtoa_r+0x624>)
 80175ce:	4682      	mov	sl, r0
 80175d0:	468b      	mov	fp, r1
 80175d2:	4640      	mov	r0, r8
 80175d4:	4649      	mov	r1, r9
 80175d6:	2200      	movs	r2, #0
 80175d8:	f7e9 f826 	bl	8000628 <__aeabi_dmul>
 80175dc:	4680      	mov	r8, r0
 80175de:	4689      	mov	r9, r1
 80175e0:	e7c6      	b.n	8017570 <_dtoa_r+0x510>
 80175e2:	4650      	mov	r0, sl
 80175e4:	4659      	mov	r1, fp
 80175e6:	f7e9 f81f 	bl	8000628 <__aeabi_dmul>
 80175ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175ec:	9d01      	ldr	r5, [sp, #4]
 80175ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80175f0:	4682      	mov	sl, r0
 80175f2:	468b      	mov	fp, r1
 80175f4:	4649      	mov	r1, r9
 80175f6:	4640      	mov	r0, r8
 80175f8:	f7e9 fac6 	bl	8000b88 <__aeabi_d2iz>
 80175fc:	4606      	mov	r6, r0
 80175fe:	f7e8 ffa9 	bl	8000554 <__aeabi_i2d>
 8017602:	3630      	adds	r6, #48	; 0x30
 8017604:	4602      	mov	r2, r0
 8017606:	460b      	mov	r3, r1
 8017608:	4640      	mov	r0, r8
 801760a:	4649      	mov	r1, r9
 801760c:	f7e8 fe54 	bl	80002b8 <__aeabi_dsub>
 8017610:	f805 6b01 	strb.w	r6, [r5], #1
 8017614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017616:	429d      	cmp	r5, r3
 8017618:	4680      	mov	r8, r0
 801761a:	4689      	mov	r9, r1
 801761c:	f04f 0200 	mov.w	r2, #0
 8017620:	d124      	bne.n	801766c <_dtoa_r+0x60c>
 8017622:	4b1b      	ldr	r3, [pc, #108]	; (8017690 <_dtoa_r+0x630>)
 8017624:	4650      	mov	r0, sl
 8017626:	4659      	mov	r1, fp
 8017628:	f7e8 fe48 	bl	80002bc <__adddf3>
 801762c:	4602      	mov	r2, r0
 801762e:	460b      	mov	r3, r1
 8017630:	4640      	mov	r0, r8
 8017632:	4649      	mov	r1, r9
 8017634:	f7e9 fa88 	bl	8000b48 <__aeabi_dcmpgt>
 8017638:	2800      	cmp	r0, #0
 801763a:	d173      	bne.n	8017724 <_dtoa_r+0x6c4>
 801763c:	4652      	mov	r2, sl
 801763e:	465b      	mov	r3, fp
 8017640:	4913      	ldr	r1, [pc, #76]	; (8017690 <_dtoa_r+0x630>)
 8017642:	2000      	movs	r0, #0
 8017644:	f7e8 fe38 	bl	80002b8 <__aeabi_dsub>
 8017648:	4602      	mov	r2, r0
 801764a:	460b      	mov	r3, r1
 801764c:	4640      	mov	r0, r8
 801764e:	4649      	mov	r1, r9
 8017650:	f7e9 fa5c 	bl	8000b0c <__aeabi_dcmplt>
 8017654:	2800      	cmp	r0, #0
 8017656:	f43f af35 	beq.w	80174c4 <_dtoa_r+0x464>
 801765a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801765c:	1e6b      	subs	r3, r5, #1
 801765e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017660:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017664:	2b30      	cmp	r3, #48	; 0x30
 8017666:	d0f8      	beq.n	801765a <_dtoa_r+0x5fa>
 8017668:	9700      	str	r7, [sp, #0]
 801766a:	e049      	b.n	8017700 <_dtoa_r+0x6a0>
 801766c:	4b05      	ldr	r3, [pc, #20]	; (8017684 <_dtoa_r+0x624>)
 801766e:	f7e8 ffdb 	bl	8000628 <__aeabi_dmul>
 8017672:	4680      	mov	r8, r0
 8017674:	4689      	mov	r9, r1
 8017676:	e7bd      	b.n	80175f4 <_dtoa_r+0x594>
 8017678:	08019a30 	.word	0x08019a30
 801767c:	08019a08 	.word	0x08019a08
 8017680:	3ff00000 	.word	0x3ff00000
 8017684:	40240000 	.word	0x40240000
 8017688:	401c0000 	.word	0x401c0000
 801768c:	40140000 	.word	0x40140000
 8017690:	3fe00000 	.word	0x3fe00000
 8017694:	9d01      	ldr	r5, [sp, #4]
 8017696:	4656      	mov	r6, sl
 8017698:	465f      	mov	r7, fp
 801769a:	4642      	mov	r2, r8
 801769c:	464b      	mov	r3, r9
 801769e:	4630      	mov	r0, r6
 80176a0:	4639      	mov	r1, r7
 80176a2:	f7e9 f8eb 	bl	800087c <__aeabi_ddiv>
 80176a6:	f7e9 fa6f 	bl	8000b88 <__aeabi_d2iz>
 80176aa:	4682      	mov	sl, r0
 80176ac:	f7e8 ff52 	bl	8000554 <__aeabi_i2d>
 80176b0:	4642      	mov	r2, r8
 80176b2:	464b      	mov	r3, r9
 80176b4:	f7e8 ffb8 	bl	8000628 <__aeabi_dmul>
 80176b8:	4602      	mov	r2, r0
 80176ba:	460b      	mov	r3, r1
 80176bc:	4630      	mov	r0, r6
 80176be:	4639      	mov	r1, r7
 80176c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80176c4:	f7e8 fdf8 	bl	80002b8 <__aeabi_dsub>
 80176c8:	f805 6b01 	strb.w	r6, [r5], #1
 80176cc:	9e01      	ldr	r6, [sp, #4]
 80176ce:	9f03      	ldr	r7, [sp, #12]
 80176d0:	1bae      	subs	r6, r5, r6
 80176d2:	42b7      	cmp	r7, r6
 80176d4:	4602      	mov	r2, r0
 80176d6:	460b      	mov	r3, r1
 80176d8:	d135      	bne.n	8017746 <_dtoa_r+0x6e6>
 80176da:	f7e8 fdef 	bl	80002bc <__adddf3>
 80176de:	4642      	mov	r2, r8
 80176e0:	464b      	mov	r3, r9
 80176e2:	4606      	mov	r6, r0
 80176e4:	460f      	mov	r7, r1
 80176e6:	f7e9 fa2f 	bl	8000b48 <__aeabi_dcmpgt>
 80176ea:	b9d0      	cbnz	r0, 8017722 <_dtoa_r+0x6c2>
 80176ec:	4642      	mov	r2, r8
 80176ee:	464b      	mov	r3, r9
 80176f0:	4630      	mov	r0, r6
 80176f2:	4639      	mov	r1, r7
 80176f4:	f7e9 fa00 	bl	8000af8 <__aeabi_dcmpeq>
 80176f8:	b110      	cbz	r0, 8017700 <_dtoa_r+0x6a0>
 80176fa:	f01a 0f01 	tst.w	sl, #1
 80176fe:	d110      	bne.n	8017722 <_dtoa_r+0x6c2>
 8017700:	4620      	mov	r0, r4
 8017702:	ee18 1a10 	vmov	r1, s16
 8017706:	f000 fc07 	bl	8017f18 <_Bfree>
 801770a:	2300      	movs	r3, #0
 801770c:	9800      	ldr	r0, [sp, #0]
 801770e:	702b      	strb	r3, [r5, #0]
 8017710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017712:	3001      	adds	r0, #1
 8017714:	6018      	str	r0, [r3, #0]
 8017716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017718:	2b00      	cmp	r3, #0
 801771a:	f43f acf1 	beq.w	8017100 <_dtoa_r+0xa0>
 801771e:	601d      	str	r5, [r3, #0]
 8017720:	e4ee      	b.n	8017100 <_dtoa_r+0xa0>
 8017722:	9f00      	ldr	r7, [sp, #0]
 8017724:	462b      	mov	r3, r5
 8017726:	461d      	mov	r5, r3
 8017728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801772c:	2a39      	cmp	r2, #57	; 0x39
 801772e:	d106      	bne.n	801773e <_dtoa_r+0x6de>
 8017730:	9a01      	ldr	r2, [sp, #4]
 8017732:	429a      	cmp	r2, r3
 8017734:	d1f7      	bne.n	8017726 <_dtoa_r+0x6c6>
 8017736:	9901      	ldr	r1, [sp, #4]
 8017738:	2230      	movs	r2, #48	; 0x30
 801773a:	3701      	adds	r7, #1
 801773c:	700a      	strb	r2, [r1, #0]
 801773e:	781a      	ldrb	r2, [r3, #0]
 8017740:	3201      	adds	r2, #1
 8017742:	701a      	strb	r2, [r3, #0]
 8017744:	e790      	b.n	8017668 <_dtoa_r+0x608>
 8017746:	4ba6      	ldr	r3, [pc, #664]	; (80179e0 <_dtoa_r+0x980>)
 8017748:	2200      	movs	r2, #0
 801774a:	f7e8 ff6d 	bl	8000628 <__aeabi_dmul>
 801774e:	2200      	movs	r2, #0
 8017750:	2300      	movs	r3, #0
 8017752:	4606      	mov	r6, r0
 8017754:	460f      	mov	r7, r1
 8017756:	f7e9 f9cf 	bl	8000af8 <__aeabi_dcmpeq>
 801775a:	2800      	cmp	r0, #0
 801775c:	d09d      	beq.n	801769a <_dtoa_r+0x63a>
 801775e:	e7cf      	b.n	8017700 <_dtoa_r+0x6a0>
 8017760:	9a08      	ldr	r2, [sp, #32]
 8017762:	2a00      	cmp	r2, #0
 8017764:	f000 80d7 	beq.w	8017916 <_dtoa_r+0x8b6>
 8017768:	9a06      	ldr	r2, [sp, #24]
 801776a:	2a01      	cmp	r2, #1
 801776c:	f300 80ba 	bgt.w	80178e4 <_dtoa_r+0x884>
 8017770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017772:	2a00      	cmp	r2, #0
 8017774:	f000 80b2 	beq.w	80178dc <_dtoa_r+0x87c>
 8017778:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801777c:	9e07      	ldr	r6, [sp, #28]
 801777e:	9d04      	ldr	r5, [sp, #16]
 8017780:	9a04      	ldr	r2, [sp, #16]
 8017782:	441a      	add	r2, r3
 8017784:	9204      	str	r2, [sp, #16]
 8017786:	9a05      	ldr	r2, [sp, #20]
 8017788:	2101      	movs	r1, #1
 801778a:	441a      	add	r2, r3
 801778c:	4620      	mov	r0, r4
 801778e:	9205      	str	r2, [sp, #20]
 8017790:	f000 fc7a 	bl	8018088 <__i2b>
 8017794:	4607      	mov	r7, r0
 8017796:	2d00      	cmp	r5, #0
 8017798:	dd0c      	ble.n	80177b4 <_dtoa_r+0x754>
 801779a:	9b05      	ldr	r3, [sp, #20]
 801779c:	2b00      	cmp	r3, #0
 801779e:	dd09      	ble.n	80177b4 <_dtoa_r+0x754>
 80177a0:	42ab      	cmp	r3, r5
 80177a2:	9a04      	ldr	r2, [sp, #16]
 80177a4:	bfa8      	it	ge
 80177a6:	462b      	movge	r3, r5
 80177a8:	1ad2      	subs	r2, r2, r3
 80177aa:	9204      	str	r2, [sp, #16]
 80177ac:	9a05      	ldr	r2, [sp, #20]
 80177ae:	1aed      	subs	r5, r5, r3
 80177b0:	1ad3      	subs	r3, r2, r3
 80177b2:	9305      	str	r3, [sp, #20]
 80177b4:	9b07      	ldr	r3, [sp, #28]
 80177b6:	b31b      	cbz	r3, 8017800 <_dtoa_r+0x7a0>
 80177b8:	9b08      	ldr	r3, [sp, #32]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	f000 80af 	beq.w	801791e <_dtoa_r+0x8be>
 80177c0:	2e00      	cmp	r6, #0
 80177c2:	dd13      	ble.n	80177ec <_dtoa_r+0x78c>
 80177c4:	4639      	mov	r1, r7
 80177c6:	4632      	mov	r2, r6
 80177c8:	4620      	mov	r0, r4
 80177ca:	f000 fd1d 	bl	8018208 <__pow5mult>
 80177ce:	ee18 2a10 	vmov	r2, s16
 80177d2:	4601      	mov	r1, r0
 80177d4:	4607      	mov	r7, r0
 80177d6:	4620      	mov	r0, r4
 80177d8:	f000 fc6c 	bl	80180b4 <__multiply>
 80177dc:	ee18 1a10 	vmov	r1, s16
 80177e0:	4680      	mov	r8, r0
 80177e2:	4620      	mov	r0, r4
 80177e4:	f000 fb98 	bl	8017f18 <_Bfree>
 80177e8:	ee08 8a10 	vmov	s16, r8
 80177ec:	9b07      	ldr	r3, [sp, #28]
 80177ee:	1b9a      	subs	r2, r3, r6
 80177f0:	d006      	beq.n	8017800 <_dtoa_r+0x7a0>
 80177f2:	ee18 1a10 	vmov	r1, s16
 80177f6:	4620      	mov	r0, r4
 80177f8:	f000 fd06 	bl	8018208 <__pow5mult>
 80177fc:	ee08 0a10 	vmov	s16, r0
 8017800:	2101      	movs	r1, #1
 8017802:	4620      	mov	r0, r4
 8017804:	f000 fc40 	bl	8018088 <__i2b>
 8017808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801780a:	2b00      	cmp	r3, #0
 801780c:	4606      	mov	r6, r0
 801780e:	f340 8088 	ble.w	8017922 <_dtoa_r+0x8c2>
 8017812:	461a      	mov	r2, r3
 8017814:	4601      	mov	r1, r0
 8017816:	4620      	mov	r0, r4
 8017818:	f000 fcf6 	bl	8018208 <__pow5mult>
 801781c:	9b06      	ldr	r3, [sp, #24]
 801781e:	2b01      	cmp	r3, #1
 8017820:	4606      	mov	r6, r0
 8017822:	f340 8081 	ble.w	8017928 <_dtoa_r+0x8c8>
 8017826:	f04f 0800 	mov.w	r8, #0
 801782a:	6933      	ldr	r3, [r6, #16]
 801782c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017830:	6918      	ldr	r0, [r3, #16]
 8017832:	f000 fbd9 	bl	8017fe8 <__hi0bits>
 8017836:	f1c0 0020 	rsb	r0, r0, #32
 801783a:	9b05      	ldr	r3, [sp, #20]
 801783c:	4418      	add	r0, r3
 801783e:	f010 001f 	ands.w	r0, r0, #31
 8017842:	f000 8092 	beq.w	801796a <_dtoa_r+0x90a>
 8017846:	f1c0 0320 	rsb	r3, r0, #32
 801784a:	2b04      	cmp	r3, #4
 801784c:	f340 808a 	ble.w	8017964 <_dtoa_r+0x904>
 8017850:	f1c0 001c 	rsb	r0, r0, #28
 8017854:	9b04      	ldr	r3, [sp, #16]
 8017856:	4403      	add	r3, r0
 8017858:	9304      	str	r3, [sp, #16]
 801785a:	9b05      	ldr	r3, [sp, #20]
 801785c:	4403      	add	r3, r0
 801785e:	4405      	add	r5, r0
 8017860:	9305      	str	r3, [sp, #20]
 8017862:	9b04      	ldr	r3, [sp, #16]
 8017864:	2b00      	cmp	r3, #0
 8017866:	dd07      	ble.n	8017878 <_dtoa_r+0x818>
 8017868:	ee18 1a10 	vmov	r1, s16
 801786c:	461a      	mov	r2, r3
 801786e:	4620      	mov	r0, r4
 8017870:	f000 fd24 	bl	80182bc <__lshift>
 8017874:	ee08 0a10 	vmov	s16, r0
 8017878:	9b05      	ldr	r3, [sp, #20]
 801787a:	2b00      	cmp	r3, #0
 801787c:	dd05      	ble.n	801788a <_dtoa_r+0x82a>
 801787e:	4631      	mov	r1, r6
 8017880:	461a      	mov	r2, r3
 8017882:	4620      	mov	r0, r4
 8017884:	f000 fd1a 	bl	80182bc <__lshift>
 8017888:	4606      	mov	r6, r0
 801788a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801788c:	2b00      	cmp	r3, #0
 801788e:	d06e      	beq.n	801796e <_dtoa_r+0x90e>
 8017890:	ee18 0a10 	vmov	r0, s16
 8017894:	4631      	mov	r1, r6
 8017896:	f000 fd81 	bl	801839c <__mcmp>
 801789a:	2800      	cmp	r0, #0
 801789c:	da67      	bge.n	801796e <_dtoa_r+0x90e>
 801789e:	9b00      	ldr	r3, [sp, #0]
 80178a0:	3b01      	subs	r3, #1
 80178a2:	ee18 1a10 	vmov	r1, s16
 80178a6:	9300      	str	r3, [sp, #0]
 80178a8:	220a      	movs	r2, #10
 80178aa:	2300      	movs	r3, #0
 80178ac:	4620      	mov	r0, r4
 80178ae:	f000 fb55 	bl	8017f5c <__multadd>
 80178b2:	9b08      	ldr	r3, [sp, #32]
 80178b4:	ee08 0a10 	vmov	s16, r0
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	f000 81b1 	beq.w	8017c20 <_dtoa_r+0xbc0>
 80178be:	2300      	movs	r3, #0
 80178c0:	4639      	mov	r1, r7
 80178c2:	220a      	movs	r2, #10
 80178c4:	4620      	mov	r0, r4
 80178c6:	f000 fb49 	bl	8017f5c <__multadd>
 80178ca:	9b02      	ldr	r3, [sp, #8]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	4607      	mov	r7, r0
 80178d0:	f300 808e 	bgt.w	80179f0 <_dtoa_r+0x990>
 80178d4:	9b06      	ldr	r3, [sp, #24]
 80178d6:	2b02      	cmp	r3, #2
 80178d8:	dc51      	bgt.n	801797e <_dtoa_r+0x91e>
 80178da:	e089      	b.n	80179f0 <_dtoa_r+0x990>
 80178dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80178de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80178e2:	e74b      	b.n	801777c <_dtoa_r+0x71c>
 80178e4:	9b03      	ldr	r3, [sp, #12]
 80178e6:	1e5e      	subs	r6, r3, #1
 80178e8:	9b07      	ldr	r3, [sp, #28]
 80178ea:	42b3      	cmp	r3, r6
 80178ec:	bfbf      	itttt	lt
 80178ee:	9b07      	ldrlt	r3, [sp, #28]
 80178f0:	9607      	strlt	r6, [sp, #28]
 80178f2:	1af2      	sublt	r2, r6, r3
 80178f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80178f6:	bfb6      	itet	lt
 80178f8:	189b      	addlt	r3, r3, r2
 80178fa:	1b9e      	subge	r6, r3, r6
 80178fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80178fe:	9b03      	ldr	r3, [sp, #12]
 8017900:	bfb8      	it	lt
 8017902:	2600      	movlt	r6, #0
 8017904:	2b00      	cmp	r3, #0
 8017906:	bfb7      	itett	lt
 8017908:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801790c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8017910:	1a9d      	sublt	r5, r3, r2
 8017912:	2300      	movlt	r3, #0
 8017914:	e734      	b.n	8017780 <_dtoa_r+0x720>
 8017916:	9e07      	ldr	r6, [sp, #28]
 8017918:	9d04      	ldr	r5, [sp, #16]
 801791a:	9f08      	ldr	r7, [sp, #32]
 801791c:	e73b      	b.n	8017796 <_dtoa_r+0x736>
 801791e:	9a07      	ldr	r2, [sp, #28]
 8017920:	e767      	b.n	80177f2 <_dtoa_r+0x792>
 8017922:	9b06      	ldr	r3, [sp, #24]
 8017924:	2b01      	cmp	r3, #1
 8017926:	dc18      	bgt.n	801795a <_dtoa_r+0x8fa>
 8017928:	f1ba 0f00 	cmp.w	sl, #0
 801792c:	d115      	bne.n	801795a <_dtoa_r+0x8fa>
 801792e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017932:	b993      	cbnz	r3, 801795a <_dtoa_r+0x8fa>
 8017934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017938:	0d1b      	lsrs	r3, r3, #20
 801793a:	051b      	lsls	r3, r3, #20
 801793c:	b183      	cbz	r3, 8017960 <_dtoa_r+0x900>
 801793e:	9b04      	ldr	r3, [sp, #16]
 8017940:	3301      	adds	r3, #1
 8017942:	9304      	str	r3, [sp, #16]
 8017944:	9b05      	ldr	r3, [sp, #20]
 8017946:	3301      	adds	r3, #1
 8017948:	9305      	str	r3, [sp, #20]
 801794a:	f04f 0801 	mov.w	r8, #1
 801794e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017950:	2b00      	cmp	r3, #0
 8017952:	f47f af6a 	bne.w	801782a <_dtoa_r+0x7ca>
 8017956:	2001      	movs	r0, #1
 8017958:	e76f      	b.n	801783a <_dtoa_r+0x7da>
 801795a:	f04f 0800 	mov.w	r8, #0
 801795e:	e7f6      	b.n	801794e <_dtoa_r+0x8ee>
 8017960:	4698      	mov	r8, r3
 8017962:	e7f4      	b.n	801794e <_dtoa_r+0x8ee>
 8017964:	f43f af7d 	beq.w	8017862 <_dtoa_r+0x802>
 8017968:	4618      	mov	r0, r3
 801796a:	301c      	adds	r0, #28
 801796c:	e772      	b.n	8017854 <_dtoa_r+0x7f4>
 801796e:	9b03      	ldr	r3, [sp, #12]
 8017970:	2b00      	cmp	r3, #0
 8017972:	dc37      	bgt.n	80179e4 <_dtoa_r+0x984>
 8017974:	9b06      	ldr	r3, [sp, #24]
 8017976:	2b02      	cmp	r3, #2
 8017978:	dd34      	ble.n	80179e4 <_dtoa_r+0x984>
 801797a:	9b03      	ldr	r3, [sp, #12]
 801797c:	9302      	str	r3, [sp, #8]
 801797e:	9b02      	ldr	r3, [sp, #8]
 8017980:	b96b      	cbnz	r3, 801799e <_dtoa_r+0x93e>
 8017982:	4631      	mov	r1, r6
 8017984:	2205      	movs	r2, #5
 8017986:	4620      	mov	r0, r4
 8017988:	f000 fae8 	bl	8017f5c <__multadd>
 801798c:	4601      	mov	r1, r0
 801798e:	4606      	mov	r6, r0
 8017990:	ee18 0a10 	vmov	r0, s16
 8017994:	f000 fd02 	bl	801839c <__mcmp>
 8017998:	2800      	cmp	r0, #0
 801799a:	f73f adbb 	bgt.w	8017514 <_dtoa_r+0x4b4>
 801799e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179a0:	9d01      	ldr	r5, [sp, #4]
 80179a2:	43db      	mvns	r3, r3
 80179a4:	9300      	str	r3, [sp, #0]
 80179a6:	f04f 0800 	mov.w	r8, #0
 80179aa:	4631      	mov	r1, r6
 80179ac:	4620      	mov	r0, r4
 80179ae:	f000 fab3 	bl	8017f18 <_Bfree>
 80179b2:	2f00      	cmp	r7, #0
 80179b4:	f43f aea4 	beq.w	8017700 <_dtoa_r+0x6a0>
 80179b8:	f1b8 0f00 	cmp.w	r8, #0
 80179bc:	d005      	beq.n	80179ca <_dtoa_r+0x96a>
 80179be:	45b8      	cmp	r8, r7
 80179c0:	d003      	beq.n	80179ca <_dtoa_r+0x96a>
 80179c2:	4641      	mov	r1, r8
 80179c4:	4620      	mov	r0, r4
 80179c6:	f000 faa7 	bl	8017f18 <_Bfree>
 80179ca:	4639      	mov	r1, r7
 80179cc:	4620      	mov	r0, r4
 80179ce:	f000 faa3 	bl	8017f18 <_Bfree>
 80179d2:	e695      	b.n	8017700 <_dtoa_r+0x6a0>
 80179d4:	2600      	movs	r6, #0
 80179d6:	4637      	mov	r7, r6
 80179d8:	e7e1      	b.n	801799e <_dtoa_r+0x93e>
 80179da:	9700      	str	r7, [sp, #0]
 80179dc:	4637      	mov	r7, r6
 80179de:	e599      	b.n	8017514 <_dtoa_r+0x4b4>
 80179e0:	40240000 	.word	0x40240000
 80179e4:	9b08      	ldr	r3, [sp, #32]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	f000 80ca 	beq.w	8017b80 <_dtoa_r+0xb20>
 80179ec:	9b03      	ldr	r3, [sp, #12]
 80179ee:	9302      	str	r3, [sp, #8]
 80179f0:	2d00      	cmp	r5, #0
 80179f2:	dd05      	ble.n	8017a00 <_dtoa_r+0x9a0>
 80179f4:	4639      	mov	r1, r7
 80179f6:	462a      	mov	r2, r5
 80179f8:	4620      	mov	r0, r4
 80179fa:	f000 fc5f 	bl	80182bc <__lshift>
 80179fe:	4607      	mov	r7, r0
 8017a00:	f1b8 0f00 	cmp.w	r8, #0
 8017a04:	d05b      	beq.n	8017abe <_dtoa_r+0xa5e>
 8017a06:	6879      	ldr	r1, [r7, #4]
 8017a08:	4620      	mov	r0, r4
 8017a0a:	f000 fa45 	bl	8017e98 <_Balloc>
 8017a0e:	4605      	mov	r5, r0
 8017a10:	b928      	cbnz	r0, 8017a1e <_dtoa_r+0x9be>
 8017a12:	4b87      	ldr	r3, [pc, #540]	; (8017c30 <_dtoa_r+0xbd0>)
 8017a14:	4602      	mov	r2, r0
 8017a16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017a1a:	f7ff bb3b 	b.w	8017094 <_dtoa_r+0x34>
 8017a1e:	693a      	ldr	r2, [r7, #16]
 8017a20:	3202      	adds	r2, #2
 8017a22:	0092      	lsls	r2, r2, #2
 8017a24:	f107 010c 	add.w	r1, r7, #12
 8017a28:	300c      	adds	r0, #12
 8017a2a:	f7fe fcc7 	bl	80163bc <memcpy>
 8017a2e:	2201      	movs	r2, #1
 8017a30:	4629      	mov	r1, r5
 8017a32:	4620      	mov	r0, r4
 8017a34:	f000 fc42 	bl	80182bc <__lshift>
 8017a38:	9b01      	ldr	r3, [sp, #4]
 8017a3a:	f103 0901 	add.w	r9, r3, #1
 8017a3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017a42:	4413      	add	r3, r2
 8017a44:	9305      	str	r3, [sp, #20]
 8017a46:	f00a 0301 	and.w	r3, sl, #1
 8017a4a:	46b8      	mov	r8, r7
 8017a4c:	9304      	str	r3, [sp, #16]
 8017a4e:	4607      	mov	r7, r0
 8017a50:	4631      	mov	r1, r6
 8017a52:	ee18 0a10 	vmov	r0, s16
 8017a56:	f7ff fa77 	bl	8016f48 <quorem>
 8017a5a:	4641      	mov	r1, r8
 8017a5c:	9002      	str	r0, [sp, #8]
 8017a5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017a62:	ee18 0a10 	vmov	r0, s16
 8017a66:	f000 fc99 	bl	801839c <__mcmp>
 8017a6a:	463a      	mov	r2, r7
 8017a6c:	9003      	str	r0, [sp, #12]
 8017a6e:	4631      	mov	r1, r6
 8017a70:	4620      	mov	r0, r4
 8017a72:	f000 fcaf 	bl	80183d4 <__mdiff>
 8017a76:	68c2      	ldr	r2, [r0, #12]
 8017a78:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8017a7c:	4605      	mov	r5, r0
 8017a7e:	bb02      	cbnz	r2, 8017ac2 <_dtoa_r+0xa62>
 8017a80:	4601      	mov	r1, r0
 8017a82:	ee18 0a10 	vmov	r0, s16
 8017a86:	f000 fc89 	bl	801839c <__mcmp>
 8017a8a:	4602      	mov	r2, r0
 8017a8c:	4629      	mov	r1, r5
 8017a8e:	4620      	mov	r0, r4
 8017a90:	9207      	str	r2, [sp, #28]
 8017a92:	f000 fa41 	bl	8017f18 <_Bfree>
 8017a96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017a9a:	ea43 0102 	orr.w	r1, r3, r2
 8017a9e:	9b04      	ldr	r3, [sp, #16]
 8017aa0:	430b      	orrs	r3, r1
 8017aa2:	464d      	mov	r5, r9
 8017aa4:	d10f      	bne.n	8017ac6 <_dtoa_r+0xa66>
 8017aa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017aaa:	d02a      	beq.n	8017b02 <_dtoa_r+0xaa2>
 8017aac:	9b03      	ldr	r3, [sp, #12]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	dd02      	ble.n	8017ab8 <_dtoa_r+0xa58>
 8017ab2:	9b02      	ldr	r3, [sp, #8]
 8017ab4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8017ab8:	f88b a000 	strb.w	sl, [fp]
 8017abc:	e775      	b.n	80179aa <_dtoa_r+0x94a>
 8017abe:	4638      	mov	r0, r7
 8017ac0:	e7ba      	b.n	8017a38 <_dtoa_r+0x9d8>
 8017ac2:	2201      	movs	r2, #1
 8017ac4:	e7e2      	b.n	8017a8c <_dtoa_r+0xa2c>
 8017ac6:	9b03      	ldr	r3, [sp, #12]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	db04      	blt.n	8017ad6 <_dtoa_r+0xa76>
 8017acc:	9906      	ldr	r1, [sp, #24]
 8017ace:	430b      	orrs	r3, r1
 8017ad0:	9904      	ldr	r1, [sp, #16]
 8017ad2:	430b      	orrs	r3, r1
 8017ad4:	d122      	bne.n	8017b1c <_dtoa_r+0xabc>
 8017ad6:	2a00      	cmp	r2, #0
 8017ad8:	ddee      	ble.n	8017ab8 <_dtoa_r+0xa58>
 8017ada:	ee18 1a10 	vmov	r1, s16
 8017ade:	2201      	movs	r2, #1
 8017ae0:	4620      	mov	r0, r4
 8017ae2:	f000 fbeb 	bl	80182bc <__lshift>
 8017ae6:	4631      	mov	r1, r6
 8017ae8:	ee08 0a10 	vmov	s16, r0
 8017aec:	f000 fc56 	bl	801839c <__mcmp>
 8017af0:	2800      	cmp	r0, #0
 8017af2:	dc03      	bgt.n	8017afc <_dtoa_r+0xa9c>
 8017af4:	d1e0      	bne.n	8017ab8 <_dtoa_r+0xa58>
 8017af6:	f01a 0f01 	tst.w	sl, #1
 8017afa:	d0dd      	beq.n	8017ab8 <_dtoa_r+0xa58>
 8017afc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017b00:	d1d7      	bne.n	8017ab2 <_dtoa_r+0xa52>
 8017b02:	2339      	movs	r3, #57	; 0x39
 8017b04:	f88b 3000 	strb.w	r3, [fp]
 8017b08:	462b      	mov	r3, r5
 8017b0a:	461d      	mov	r5, r3
 8017b0c:	3b01      	subs	r3, #1
 8017b0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017b12:	2a39      	cmp	r2, #57	; 0x39
 8017b14:	d071      	beq.n	8017bfa <_dtoa_r+0xb9a>
 8017b16:	3201      	adds	r2, #1
 8017b18:	701a      	strb	r2, [r3, #0]
 8017b1a:	e746      	b.n	80179aa <_dtoa_r+0x94a>
 8017b1c:	2a00      	cmp	r2, #0
 8017b1e:	dd07      	ble.n	8017b30 <_dtoa_r+0xad0>
 8017b20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017b24:	d0ed      	beq.n	8017b02 <_dtoa_r+0xaa2>
 8017b26:	f10a 0301 	add.w	r3, sl, #1
 8017b2a:	f88b 3000 	strb.w	r3, [fp]
 8017b2e:	e73c      	b.n	80179aa <_dtoa_r+0x94a>
 8017b30:	9b05      	ldr	r3, [sp, #20]
 8017b32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017b36:	4599      	cmp	r9, r3
 8017b38:	d047      	beq.n	8017bca <_dtoa_r+0xb6a>
 8017b3a:	ee18 1a10 	vmov	r1, s16
 8017b3e:	2300      	movs	r3, #0
 8017b40:	220a      	movs	r2, #10
 8017b42:	4620      	mov	r0, r4
 8017b44:	f000 fa0a 	bl	8017f5c <__multadd>
 8017b48:	45b8      	cmp	r8, r7
 8017b4a:	ee08 0a10 	vmov	s16, r0
 8017b4e:	f04f 0300 	mov.w	r3, #0
 8017b52:	f04f 020a 	mov.w	r2, #10
 8017b56:	4641      	mov	r1, r8
 8017b58:	4620      	mov	r0, r4
 8017b5a:	d106      	bne.n	8017b6a <_dtoa_r+0xb0a>
 8017b5c:	f000 f9fe 	bl	8017f5c <__multadd>
 8017b60:	4680      	mov	r8, r0
 8017b62:	4607      	mov	r7, r0
 8017b64:	f109 0901 	add.w	r9, r9, #1
 8017b68:	e772      	b.n	8017a50 <_dtoa_r+0x9f0>
 8017b6a:	f000 f9f7 	bl	8017f5c <__multadd>
 8017b6e:	4639      	mov	r1, r7
 8017b70:	4680      	mov	r8, r0
 8017b72:	2300      	movs	r3, #0
 8017b74:	220a      	movs	r2, #10
 8017b76:	4620      	mov	r0, r4
 8017b78:	f000 f9f0 	bl	8017f5c <__multadd>
 8017b7c:	4607      	mov	r7, r0
 8017b7e:	e7f1      	b.n	8017b64 <_dtoa_r+0xb04>
 8017b80:	9b03      	ldr	r3, [sp, #12]
 8017b82:	9302      	str	r3, [sp, #8]
 8017b84:	9d01      	ldr	r5, [sp, #4]
 8017b86:	ee18 0a10 	vmov	r0, s16
 8017b8a:	4631      	mov	r1, r6
 8017b8c:	f7ff f9dc 	bl	8016f48 <quorem>
 8017b90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017b94:	9b01      	ldr	r3, [sp, #4]
 8017b96:	f805 ab01 	strb.w	sl, [r5], #1
 8017b9a:	1aea      	subs	r2, r5, r3
 8017b9c:	9b02      	ldr	r3, [sp, #8]
 8017b9e:	4293      	cmp	r3, r2
 8017ba0:	dd09      	ble.n	8017bb6 <_dtoa_r+0xb56>
 8017ba2:	ee18 1a10 	vmov	r1, s16
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	220a      	movs	r2, #10
 8017baa:	4620      	mov	r0, r4
 8017bac:	f000 f9d6 	bl	8017f5c <__multadd>
 8017bb0:	ee08 0a10 	vmov	s16, r0
 8017bb4:	e7e7      	b.n	8017b86 <_dtoa_r+0xb26>
 8017bb6:	9b02      	ldr	r3, [sp, #8]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	bfc8      	it	gt
 8017bbc:	461d      	movgt	r5, r3
 8017bbe:	9b01      	ldr	r3, [sp, #4]
 8017bc0:	bfd8      	it	le
 8017bc2:	2501      	movle	r5, #1
 8017bc4:	441d      	add	r5, r3
 8017bc6:	f04f 0800 	mov.w	r8, #0
 8017bca:	ee18 1a10 	vmov	r1, s16
 8017bce:	2201      	movs	r2, #1
 8017bd0:	4620      	mov	r0, r4
 8017bd2:	f000 fb73 	bl	80182bc <__lshift>
 8017bd6:	4631      	mov	r1, r6
 8017bd8:	ee08 0a10 	vmov	s16, r0
 8017bdc:	f000 fbde 	bl	801839c <__mcmp>
 8017be0:	2800      	cmp	r0, #0
 8017be2:	dc91      	bgt.n	8017b08 <_dtoa_r+0xaa8>
 8017be4:	d102      	bne.n	8017bec <_dtoa_r+0xb8c>
 8017be6:	f01a 0f01 	tst.w	sl, #1
 8017bea:	d18d      	bne.n	8017b08 <_dtoa_r+0xaa8>
 8017bec:	462b      	mov	r3, r5
 8017bee:	461d      	mov	r5, r3
 8017bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017bf4:	2a30      	cmp	r2, #48	; 0x30
 8017bf6:	d0fa      	beq.n	8017bee <_dtoa_r+0xb8e>
 8017bf8:	e6d7      	b.n	80179aa <_dtoa_r+0x94a>
 8017bfa:	9a01      	ldr	r2, [sp, #4]
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d184      	bne.n	8017b0a <_dtoa_r+0xaaa>
 8017c00:	9b00      	ldr	r3, [sp, #0]
 8017c02:	3301      	adds	r3, #1
 8017c04:	9300      	str	r3, [sp, #0]
 8017c06:	2331      	movs	r3, #49	; 0x31
 8017c08:	7013      	strb	r3, [r2, #0]
 8017c0a:	e6ce      	b.n	80179aa <_dtoa_r+0x94a>
 8017c0c:	4b09      	ldr	r3, [pc, #36]	; (8017c34 <_dtoa_r+0xbd4>)
 8017c0e:	f7ff ba95 	b.w	801713c <_dtoa_r+0xdc>
 8017c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	f47f aa6e 	bne.w	80170f6 <_dtoa_r+0x96>
 8017c1a:	4b07      	ldr	r3, [pc, #28]	; (8017c38 <_dtoa_r+0xbd8>)
 8017c1c:	f7ff ba8e 	b.w	801713c <_dtoa_r+0xdc>
 8017c20:	9b02      	ldr	r3, [sp, #8]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	dcae      	bgt.n	8017b84 <_dtoa_r+0xb24>
 8017c26:	9b06      	ldr	r3, [sp, #24]
 8017c28:	2b02      	cmp	r3, #2
 8017c2a:	f73f aea8 	bgt.w	801797e <_dtoa_r+0x91e>
 8017c2e:	e7a9      	b.n	8017b84 <_dtoa_r+0xb24>
 8017c30:	08019928 	.word	0x08019928
 8017c34:	08019748 	.word	0x08019748
 8017c38:	080198a9 	.word	0x080198a9

08017c3c <std>:
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	b510      	push	{r4, lr}
 8017c40:	4604      	mov	r4, r0
 8017c42:	e9c0 3300 	strd	r3, r3, [r0]
 8017c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017c4a:	6083      	str	r3, [r0, #8]
 8017c4c:	8181      	strh	r1, [r0, #12]
 8017c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8017c50:	81c2      	strh	r2, [r0, #14]
 8017c52:	6183      	str	r3, [r0, #24]
 8017c54:	4619      	mov	r1, r3
 8017c56:	2208      	movs	r2, #8
 8017c58:	305c      	adds	r0, #92	; 0x5c
 8017c5a:	f7fe fbbd 	bl	80163d8 <memset>
 8017c5e:	4b05      	ldr	r3, [pc, #20]	; (8017c74 <std+0x38>)
 8017c60:	6263      	str	r3, [r4, #36]	; 0x24
 8017c62:	4b05      	ldr	r3, [pc, #20]	; (8017c78 <std+0x3c>)
 8017c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8017c66:	4b05      	ldr	r3, [pc, #20]	; (8017c7c <std+0x40>)
 8017c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017c6a:	4b05      	ldr	r3, [pc, #20]	; (8017c80 <std+0x44>)
 8017c6c:	6224      	str	r4, [r4, #32]
 8017c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8017c70:	bd10      	pop	{r4, pc}
 8017c72:	bf00      	nop
 8017c74:	08018b39 	.word	0x08018b39
 8017c78:	08018b5b 	.word	0x08018b5b
 8017c7c:	08018b93 	.word	0x08018b93
 8017c80:	08018bb7 	.word	0x08018bb7

08017c84 <_cleanup_r>:
 8017c84:	4901      	ldr	r1, [pc, #4]	; (8017c8c <_cleanup_r+0x8>)
 8017c86:	f000 b8c1 	b.w	8017e0c <_fwalk_reent>
 8017c8a:	bf00      	nop
 8017c8c:	08018ebd 	.word	0x08018ebd

08017c90 <__sfmoreglue>:
 8017c90:	b570      	push	{r4, r5, r6, lr}
 8017c92:	2268      	movs	r2, #104	; 0x68
 8017c94:	1e4d      	subs	r5, r1, #1
 8017c96:	4355      	muls	r5, r2
 8017c98:	460e      	mov	r6, r1
 8017c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017c9e:	f7fe fc0f 	bl	80164c0 <_malloc_r>
 8017ca2:	4604      	mov	r4, r0
 8017ca4:	b140      	cbz	r0, 8017cb8 <__sfmoreglue+0x28>
 8017ca6:	2100      	movs	r1, #0
 8017ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8017cac:	300c      	adds	r0, #12
 8017cae:	60a0      	str	r0, [r4, #8]
 8017cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017cb4:	f7fe fb90 	bl	80163d8 <memset>
 8017cb8:	4620      	mov	r0, r4
 8017cba:	bd70      	pop	{r4, r5, r6, pc}

08017cbc <__sfp_lock_acquire>:
 8017cbc:	4801      	ldr	r0, [pc, #4]	; (8017cc4 <__sfp_lock_acquire+0x8>)
 8017cbe:	f000 b8ca 	b.w	8017e56 <__retarget_lock_acquire_recursive>
 8017cc2:	bf00      	nop
 8017cc4:	20002f69 	.word	0x20002f69

08017cc8 <__sfp_lock_release>:
 8017cc8:	4801      	ldr	r0, [pc, #4]	; (8017cd0 <__sfp_lock_release+0x8>)
 8017cca:	f000 b8c5 	b.w	8017e58 <__retarget_lock_release_recursive>
 8017cce:	bf00      	nop
 8017cd0:	20002f69 	.word	0x20002f69

08017cd4 <__sinit_lock_acquire>:
 8017cd4:	4801      	ldr	r0, [pc, #4]	; (8017cdc <__sinit_lock_acquire+0x8>)
 8017cd6:	f000 b8be 	b.w	8017e56 <__retarget_lock_acquire_recursive>
 8017cda:	bf00      	nop
 8017cdc:	20002f6a 	.word	0x20002f6a

08017ce0 <__sinit_lock_release>:
 8017ce0:	4801      	ldr	r0, [pc, #4]	; (8017ce8 <__sinit_lock_release+0x8>)
 8017ce2:	f000 b8b9 	b.w	8017e58 <__retarget_lock_release_recursive>
 8017ce6:	bf00      	nop
 8017ce8:	20002f6a 	.word	0x20002f6a

08017cec <__sinit>:
 8017cec:	b510      	push	{r4, lr}
 8017cee:	4604      	mov	r4, r0
 8017cf0:	f7ff fff0 	bl	8017cd4 <__sinit_lock_acquire>
 8017cf4:	69a3      	ldr	r3, [r4, #24]
 8017cf6:	b11b      	cbz	r3, 8017d00 <__sinit+0x14>
 8017cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017cfc:	f7ff bff0 	b.w	8017ce0 <__sinit_lock_release>
 8017d00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017d04:	6523      	str	r3, [r4, #80]	; 0x50
 8017d06:	4b13      	ldr	r3, [pc, #76]	; (8017d54 <__sinit+0x68>)
 8017d08:	4a13      	ldr	r2, [pc, #76]	; (8017d58 <__sinit+0x6c>)
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8017d0e:	42a3      	cmp	r3, r4
 8017d10:	bf04      	itt	eq
 8017d12:	2301      	moveq	r3, #1
 8017d14:	61a3      	streq	r3, [r4, #24]
 8017d16:	4620      	mov	r0, r4
 8017d18:	f000 f820 	bl	8017d5c <__sfp>
 8017d1c:	6060      	str	r0, [r4, #4]
 8017d1e:	4620      	mov	r0, r4
 8017d20:	f000 f81c 	bl	8017d5c <__sfp>
 8017d24:	60a0      	str	r0, [r4, #8]
 8017d26:	4620      	mov	r0, r4
 8017d28:	f000 f818 	bl	8017d5c <__sfp>
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	60e0      	str	r0, [r4, #12]
 8017d30:	2104      	movs	r1, #4
 8017d32:	6860      	ldr	r0, [r4, #4]
 8017d34:	f7ff ff82 	bl	8017c3c <std>
 8017d38:	68a0      	ldr	r0, [r4, #8]
 8017d3a:	2201      	movs	r2, #1
 8017d3c:	2109      	movs	r1, #9
 8017d3e:	f7ff ff7d 	bl	8017c3c <std>
 8017d42:	68e0      	ldr	r0, [r4, #12]
 8017d44:	2202      	movs	r2, #2
 8017d46:	2112      	movs	r1, #18
 8017d48:	f7ff ff78 	bl	8017c3c <std>
 8017d4c:	2301      	movs	r3, #1
 8017d4e:	61a3      	str	r3, [r4, #24]
 8017d50:	e7d2      	b.n	8017cf8 <__sinit+0xc>
 8017d52:	bf00      	nop
 8017d54:	08019734 	.word	0x08019734
 8017d58:	08017c85 	.word	0x08017c85

08017d5c <__sfp>:
 8017d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d5e:	4607      	mov	r7, r0
 8017d60:	f7ff ffac 	bl	8017cbc <__sfp_lock_acquire>
 8017d64:	4b1e      	ldr	r3, [pc, #120]	; (8017de0 <__sfp+0x84>)
 8017d66:	681e      	ldr	r6, [r3, #0]
 8017d68:	69b3      	ldr	r3, [r6, #24]
 8017d6a:	b913      	cbnz	r3, 8017d72 <__sfp+0x16>
 8017d6c:	4630      	mov	r0, r6
 8017d6e:	f7ff ffbd 	bl	8017cec <__sinit>
 8017d72:	3648      	adds	r6, #72	; 0x48
 8017d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017d78:	3b01      	subs	r3, #1
 8017d7a:	d503      	bpl.n	8017d84 <__sfp+0x28>
 8017d7c:	6833      	ldr	r3, [r6, #0]
 8017d7e:	b30b      	cbz	r3, 8017dc4 <__sfp+0x68>
 8017d80:	6836      	ldr	r6, [r6, #0]
 8017d82:	e7f7      	b.n	8017d74 <__sfp+0x18>
 8017d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017d88:	b9d5      	cbnz	r5, 8017dc0 <__sfp+0x64>
 8017d8a:	4b16      	ldr	r3, [pc, #88]	; (8017de4 <__sfp+0x88>)
 8017d8c:	60e3      	str	r3, [r4, #12]
 8017d8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017d92:	6665      	str	r5, [r4, #100]	; 0x64
 8017d94:	f000 f85e 	bl	8017e54 <__retarget_lock_init_recursive>
 8017d98:	f7ff ff96 	bl	8017cc8 <__sfp_lock_release>
 8017d9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017da0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017da4:	6025      	str	r5, [r4, #0]
 8017da6:	61a5      	str	r5, [r4, #24]
 8017da8:	2208      	movs	r2, #8
 8017daa:	4629      	mov	r1, r5
 8017dac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017db0:	f7fe fb12 	bl	80163d8 <memset>
 8017db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017db8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017dbc:	4620      	mov	r0, r4
 8017dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dc0:	3468      	adds	r4, #104	; 0x68
 8017dc2:	e7d9      	b.n	8017d78 <__sfp+0x1c>
 8017dc4:	2104      	movs	r1, #4
 8017dc6:	4638      	mov	r0, r7
 8017dc8:	f7ff ff62 	bl	8017c90 <__sfmoreglue>
 8017dcc:	4604      	mov	r4, r0
 8017dce:	6030      	str	r0, [r6, #0]
 8017dd0:	2800      	cmp	r0, #0
 8017dd2:	d1d5      	bne.n	8017d80 <__sfp+0x24>
 8017dd4:	f7ff ff78 	bl	8017cc8 <__sfp_lock_release>
 8017dd8:	230c      	movs	r3, #12
 8017dda:	603b      	str	r3, [r7, #0]
 8017ddc:	e7ee      	b.n	8017dbc <__sfp+0x60>
 8017dde:	bf00      	nop
 8017de0:	08019734 	.word	0x08019734
 8017de4:	ffff0001 	.word	0xffff0001

08017de8 <fiprintf>:
 8017de8:	b40e      	push	{r1, r2, r3}
 8017dea:	b503      	push	{r0, r1, lr}
 8017dec:	4601      	mov	r1, r0
 8017dee:	ab03      	add	r3, sp, #12
 8017df0:	4805      	ldr	r0, [pc, #20]	; (8017e08 <fiprintf+0x20>)
 8017df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017df6:	6800      	ldr	r0, [r0, #0]
 8017df8:	9301      	str	r3, [sp, #4]
 8017dfa:	f000 fd6d 	bl	80188d8 <_vfiprintf_r>
 8017dfe:	b002      	add	sp, #8
 8017e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e04:	b003      	add	sp, #12
 8017e06:	4770      	bx	lr
 8017e08:	20000184 	.word	0x20000184

08017e0c <_fwalk_reent>:
 8017e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e10:	4606      	mov	r6, r0
 8017e12:	4688      	mov	r8, r1
 8017e14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017e18:	2700      	movs	r7, #0
 8017e1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017e1e:	f1b9 0901 	subs.w	r9, r9, #1
 8017e22:	d505      	bpl.n	8017e30 <_fwalk_reent+0x24>
 8017e24:	6824      	ldr	r4, [r4, #0]
 8017e26:	2c00      	cmp	r4, #0
 8017e28:	d1f7      	bne.n	8017e1a <_fwalk_reent+0xe>
 8017e2a:	4638      	mov	r0, r7
 8017e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e30:	89ab      	ldrh	r3, [r5, #12]
 8017e32:	2b01      	cmp	r3, #1
 8017e34:	d907      	bls.n	8017e46 <_fwalk_reent+0x3a>
 8017e36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017e3a:	3301      	adds	r3, #1
 8017e3c:	d003      	beq.n	8017e46 <_fwalk_reent+0x3a>
 8017e3e:	4629      	mov	r1, r5
 8017e40:	4630      	mov	r0, r6
 8017e42:	47c0      	blx	r8
 8017e44:	4307      	orrs	r7, r0
 8017e46:	3568      	adds	r5, #104	; 0x68
 8017e48:	e7e9      	b.n	8017e1e <_fwalk_reent+0x12>
	...

08017e4c <_localeconv_r>:
 8017e4c:	4800      	ldr	r0, [pc, #0]	; (8017e50 <_localeconv_r+0x4>)
 8017e4e:	4770      	bx	lr
 8017e50:	200002d8 	.word	0x200002d8

08017e54 <__retarget_lock_init_recursive>:
 8017e54:	4770      	bx	lr

08017e56 <__retarget_lock_acquire_recursive>:
 8017e56:	4770      	bx	lr

08017e58 <__retarget_lock_release_recursive>:
 8017e58:	4770      	bx	lr

08017e5a <__ascii_mbtowc>:
 8017e5a:	b082      	sub	sp, #8
 8017e5c:	b901      	cbnz	r1, 8017e60 <__ascii_mbtowc+0x6>
 8017e5e:	a901      	add	r1, sp, #4
 8017e60:	b142      	cbz	r2, 8017e74 <__ascii_mbtowc+0x1a>
 8017e62:	b14b      	cbz	r3, 8017e78 <__ascii_mbtowc+0x1e>
 8017e64:	7813      	ldrb	r3, [r2, #0]
 8017e66:	600b      	str	r3, [r1, #0]
 8017e68:	7812      	ldrb	r2, [r2, #0]
 8017e6a:	1e10      	subs	r0, r2, #0
 8017e6c:	bf18      	it	ne
 8017e6e:	2001      	movne	r0, #1
 8017e70:	b002      	add	sp, #8
 8017e72:	4770      	bx	lr
 8017e74:	4610      	mov	r0, r2
 8017e76:	e7fb      	b.n	8017e70 <__ascii_mbtowc+0x16>
 8017e78:	f06f 0001 	mvn.w	r0, #1
 8017e7c:	e7f8      	b.n	8017e70 <__ascii_mbtowc+0x16>
	...

08017e80 <__malloc_lock>:
 8017e80:	4801      	ldr	r0, [pc, #4]	; (8017e88 <__malloc_lock+0x8>)
 8017e82:	f7ff bfe8 	b.w	8017e56 <__retarget_lock_acquire_recursive>
 8017e86:	bf00      	nop
 8017e88:	20002f68 	.word	0x20002f68

08017e8c <__malloc_unlock>:
 8017e8c:	4801      	ldr	r0, [pc, #4]	; (8017e94 <__malloc_unlock+0x8>)
 8017e8e:	f7ff bfe3 	b.w	8017e58 <__retarget_lock_release_recursive>
 8017e92:	bf00      	nop
 8017e94:	20002f68 	.word	0x20002f68

08017e98 <_Balloc>:
 8017e98:	b570      	push	{r4, r5, r6, lr}
 8017e9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017e9c:	4604      	mov	r4, r0
 8017e9e:	460d      	mov	r5, r1
 8017ea0:	b976      	cbnz	r6, 8017ec0 <_Balloc+0x28>
 8017ea2:	2010      	movs	r0, #16
 8017ea4:	f7fe fa82 	bl	80163ac <malloc>
 8017ea8:	4602      	mov	r2, r0
 8017eaa:	6260      	str	r0, [r4, #36]	; 0x24
 8017eac:	b920      	cbnz	r0, 8017eb8 <_Balloc+0x20>
 8017eae:	4b18      	ldr	r3, [pc, #96]	; (8017f10 <_Balloc+0x78>)
 8017eb0:	4818      	ldr	r0, [pc, #96]	; (8017f14 <_Balloc+0x7c>)
 8017eb2:	2166      	movs	r1, #102	; 0x66
 8017eb4:	f7ff f82a 	bl	8016f0c <__assert_func>
 8017eb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017ebc:	6006      	str	r6, [r0, #0]
 8017ebe:	60c6      	str	r6, [r0, #12]
 8017ec0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017ec2:	68f3      	ldr	r3, [r6, #12]
 8017ec4:	b183      	cbz	r3, 8017ee8 <_Balloc+0x50>
 8017ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ec8:	68db      	ldr	r3, [r3, #12]
 8017eca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017ece:	b9b8      	cbnz	r0, 8017f00 <_Balloc+0x68>
 8017ed0:	2101      	movs	r1, #1
 8017ed2:	fa01 f605 	lsl.w	r6, r1, r5
 8017ed6:	1d72      	adds	r2, r6, #5
 8017ed8:	0092      	lsls	r2, r2, #2
 8017eda:	4620      	mov	r0, r4
 8017edc:	f000 fb60 	bl	80185a0 <_calloc_r>
 8017ee0:	b160      	cbz	r0, 8017efc <_Balloc+0x64>
 8017ee2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017ee6:	e00e      	b.n	8017f06 <_Balloc+0x6e>
 8017ee8:	2221      	movs	r2, #33	; 0x21
 8017eea:	2104      	movs	r1, #4
 8017eec:	4620      	mov	r0, r4
 8017eee:	f000 fb57 	bl	80185a0 <_calloc_r>
 8017ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ef4:	60f0      	str	r0, [r6, #12]
 8017ef6:	68db      	ldr	r3, [r3, #12]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d1e4      	bne.n	8017ec6 <_Balloc+0x2e>
 8017efc:	2000      	movs	r0, #0
 8017efe:	bd70      	pop	{r4, r5, r6, pc}
 8017f00:	6802      	ldr	r2, [r0, #0]
 8017f02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017f06:	2300      	movs	r3, #0
 8017f08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017f0c:	e7f7      	b.n	8017efe <_Balloc+0x66>
 8017f0e:	bf00      	nop
 8017f10:	080198b6 	.word	0x080198b6
 8017f14:	080199a6 	.word	0x080199a6

08017f18 <_Bfree>:
 8017f18:	b570      	push	{r4, r5, r6, lr}
 8017f1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017f1c:	4605      	mov	r5, r0
 8017f1e:	460c      	mov	r4, r1
 8017f20:	b976      	cbnz	r6, 8017f40 <_Bfree+0x28>
 8017f22:	2010      	movs	r0, #16
 8017f24:	f7fe fa42 	bl	80163ac <malloc>
 8017f28:	4602      	mov	r2, r0
 8017f2a:	6268      	str	r0, [r5, #36]	; 0x24
 8017f2c:	b920      	cbnz	r0, 8017f38 <_Bfree+0x20>
 8017f2e:	4b09      	ldr	r3, [pc, #36]	; (8017f54 <_Bfree+0x3c>)
 8017f30:	4809      	ldr	r0, [pc, #36]	; (8017f58 <_Bfree+0x40>)
 8017f32:	218a      	movs	r1, #138	; 0x8a
 8017f34:	f7fe ffea 	bl	8016f0c <__assert_func>
 8017f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f3c:	6006      	str	r6, [r0, #0]
 8017f3e:	60c6      	str	r6, [r0, #12]
 8017f40:	b13c      	cbz	r4, 8017f52 <_Bfree+0x3a>
 8017f42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017f44:	6862      	ldr	r2, [r4, #4]
 8017f46:	68db      	ldr	r3, [r3, #12]
 8017f48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017f4c:	6021      	str	r1, [r4, #0]
 8017f4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017f52:	bd70      	pop	{r4, r5, r6, pc}
 8017f54:	080198b6 	.word	0x080198b6
 8017f58:	080199a6 	.word	0x080199a6

08017f5c <__multadd>:
 8017f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f60:	690d      	ldr	r5, [r1, #16]
 8017f62:	4607      	mov	r7, r0
 8017f64:	460c      	mov	r4, r1
 8017f66:	461e      	mov	r6, r3
 8017f68:	f101 0c14 	add.w	ip, r1, #20
 8017f6c:	2000      	movs	r0, #0
 8017f6e:	f8dc 3000 	ldr.w	r3, [ip]
 8017f72:	b299      	uxth	r1, r3
 8017f74:	fb02 6101 	mla	r1, r2, r1, r6
 8017f78:	0c1e      	lsrs	r6, r3, #16
 8017f7a:	0c0b      	lsrs	r3, r1, #16
 8017f7c:	fb02 3306 	mla	r3, r2, r6, r3
 8017f80:	b289      	uxth	r1, r1
 8017f82:	3001      	adds	r0, #1
 8017f84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017f88:	4285      	cmp	r5, r0
 8017f8a:	f84c 1b04 	str.w	r1, [ip], #4
 8017f8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017f92:	dcec      	bgt.n	8017f6e <__multadd+0x12>
 8017f94:	b30e      	cbz	r6, 8017fda <__multadd+0x7e>
 8017f96:	68a3      	ldr	r3, [r4, #8]
 8017f98:	42ab      	cmp	r3, r5
 8017f9a:	dc19      	bgt.n	8017fd0 <__multadd+0x74>
 8017f9c:	6861      	ldr	r1, [r4, #4]
 8017f9e:	4638      	mov	r0, r7
 8017fa0:	3101      	adds	r1, #1
 8017fa2:	f7ff ff79 	bl	8017e98 <_Balloc>
 8017fa6:	4680      	mov	r8, r0
 8017fa8:	b928      	cbnz	r0, 8017fb6 <__multadd+0x5a>
 8017faa:	4602      	mov	r2, r0
 8017fac:	4b0c      	ldr	r3, [pc, #48]	; (8017fe0 <__multadd+0x84>)
 8017fae:	480d      	ldr	r0, [pc, #52]	; (8017fe4 <__multadd+0x88>)
 8017fb0:	21b5      	movs	r1, #181	; 0xb5
 8017fb2:	f7fe ffab 	bl	8016f0c <__assert_func>
 8017fb6:	6922      	ldr	r2, [r4, #16]
 8017fb8:	3202      	adds	r2, #2
 8017fba:	f104 010c 	add.w	r1, r4, #12
 8017fbe:	0092      	lsls	r2, r2, #2
 8017fc0:	300c      	adds	r0, #12
 8017fc2:	f7fe f9fb 	bl	80163bc <memcpy>
 8017fc6:	4621      	mov	r1, r4
 8017fc8:	4638      	mov	r0, r7
 8017fca:	f7ff ffa5 	bl	8017f18 <_Bfree>
 8017fce:	4644      	mov	r4, r8
 8017fd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017fd4:	3501      	adds	r5, #1
 8017fd6:	615e      	str	r6, [r3, #20]
 8017fd8:	6125      	str	r5, [r4, #16]
 8017fda:	4620      	mov	r0, r4
 8017fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fe0:	08019928 	.word	0x08019928
 8017fe4:	080199a6 	.word	0x080199a6

08017fe8 <__hi0bits>:
 8017fe8:	0c03      	lsrs	r3, r0, #16
 8017fea:	041b      	lsls	r3, r3, #16
 8017fec:	b9d3      	cbnz	r3, 8018024 <__hi0bits+0x3c>
 8017fee:	0400      	lsls	r0, r0, #16
 8017ff0:	2310      	movs	r3, #16
 8017ff2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017ff6:	bf04      	itt	eq
 8017ff8:	0200      	lsleq	r0, r0, #8
 8017ffa:	3308      	addeq	r3, #8
 8017ffc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018000:	bf04      	itt	eq
 8018002:	0100      	lsleq	r0, r0, #4
 8018004:	3304      	addeq	r3, #4
 8018006:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801800a:	bf04      	itt	eq
 801800c:	0080      	lsleq	r0, r0, #2
 801800e:	3302      	addeq	r3, #2
 8018010:	2800      	cmp	r0, #0
 8018012:	db05      	blt.n	8018020 <__hi0bits+0x38>
 8018014:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018018:	f103 0301 	add.w	r3, r3, #1
 801801c:	bf08      	it	eq
 801801e:	2320      	moveq	r3, #32
 8018020:	4618      	mov	r0, r3
 8018022:	4770      	bx	lr
 8018024:	2300      	movs	r3, #0
 8018026:	e7e4      	b.n	8017ff2 <__hi0bits+0xa>

08018028 <__lo0bits>:
 8018028:	6803      	ldr	r3, [r0, #0]
 801802a:	f013 0207 	ands.w	r2, r3, #7
 801802e:	4601      	mov	r1, r0
 8018030:	d00b      	beq.n	801804a <__lo0bits+0x22>
 8018032:	07da      	lsls	r2, r3, #31
 8018034:	d423      	bmi.n	801807e <__lo0bits+0x56>
 8018036:	0798      	lsls	r0, r3, #30
 8018038:	bf49      	itett	mi
 801803a:	085b      	lsrmi	r3, r3, #1
 801803c:	089b      	lsrpl	r3, r3, #2
 801803e:	2001      	movmi	r0, #1
 8018040:	600b      	strmi	r3, [r1, #0]
 8018042:	bf5c      	itt	pl
 8018044:	600b      	strpl	r3, [r1, #0]
 8018046:	2002      	movpl	r0, #2
 8018048:	4770      	bx	lr
 801804a:	b298      	uxth	r0, r3
 801804c:	b9a8      	cbnz	r0, 801807a <__lo0bits+0x52>
 801804e:	0c1b      	lsrs	r3, r3, #16
 8018050:	2010      	movs	r0, #16
 8018052:	b2da      	uxtb	r2, r3
 8018054:	b90a      	cbnz	r2, 801805a <__lo0bits+0x32>
 8018056:	3008      	adds	r0, #8
 8018058:	0a1b      	lsrs	r3, r3, #8
 801805a:	071a      	lsls	r2, r3, #28
 801805c:	bf04      	itt	eq
 801805e:	091b      	lsreq	r3, r3, #4
 8018060:	3004      	addeq	r0, #4
 8018062:	079a      	lsls	r2, r3, #30
 8018064:	bf04      	itt	eq
 8018066:	089b      	lsreq	r3, r3, #2
 8018068:	3002      	addeq	r0, #2
 801806a:	07da      	lsls	r2, r3, #31
 801806c:	d403      	bmi.n	8018076 <__lo0bits+0x4e>
 801806e:	085b      	lsrs	r3, r3, #1
 8018070:	f100 0001 	add.w	r0, r0, #1
 8018074:	d005      	beq.n	8018082 <__lo0bits+0x5a>
 8018076:	600b      	str	r3, [r1, #0]
 8018078:	4770      	bx	lr
 801807a:	4610      	mov	r0, r2
 801807c:	e7e9      	b.n	8018052 <__lo0bits+0x2a>
 801807e:	2000      	movs	r0, #0
 8018080:	4770      	bx	lr
 8018082:	2020      	movs	r0, #32
 8018084:	4770      	bx	lr
	...

08018088 <__i2b>:
 8018088:	b510      	push	{r4, lr}
 801808a:	460c      	mov	r4, r1
 801808c:	2101      	movs	r1, #1
 801808e:	f7ff ff03 	bl	8017e98 <_Balloc>
 8018092:	4602      	mov	r2, r0
 8018094:	b928      	cbnz	r0, 80180a2 <__i2b+0x1a>
 8018096:	4b05      	ldr	r3, [pc, #20]	; (80180ac <__i2b+0x24>)
 8018098:	4805      	ldr	r0, [pc, #20]	; (80180b0 <__i2b+0x28>)
 801809a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801809e:	f7fe ff35 	bl	8016f0c <__assert_func>
 80180a2:	2301      	movs	r3, #1
 80180a4:	6144      	str	r4, [r0, #20]
 80180a6:	6103      	str	r3, [r0, #16]
 80180a8:	bd10      	pop	{r4, pc}
 80180aa:	bf00      	nop
 80180ac:	08019928 	.word	0x08019928
 80180b0:	080199a6 	.word	0x080199a6

080180b4 <__multiply>:
 80180b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180b8:	4691      	mov	r9, r2
 80180ba:	690a      	ldr	r2, [r1, #16]
 80180bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80180c0:	429a      	cmp	r2, r3
 80180c2:	bfb8      	it	lt
 80180c4:	460b      	movlt	r3, r1
 80180c6:	460c      	mov	r4, r1
 80180c8:	bfbc      	itt	lt
 80180ca:	464c      	movlt	r4, r9
 80180cc:	4699      	movlt	r9, r3
 80180ce:	6927      	ldr	r7, [r4, #16]
 80180d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80180d4:	68a3      	ldr	r3, [r4, #8]
 80180d6:	6861      	ldr	r1, [r4, #4]
 80180d8:	eb07 060a 	add.w	r6, r7, sl
 80180dc:	42b3      	cmp	r3, r6
 80180de:	b085      	sub	sp, #20
 80180e0:	bfb8      	it	lt
 80180e2:	3101      	addlt	r1, #1
 80180e4:	f7ff fed8 	bl	8017e98 <_Balloc>
 80180e8:	b930      	cbnz	r0, 80180f8 <__multiply+0x44>
 80180ea:	4602      	mov	r2, r0
 80180ec:	4b44      	ldr	r3, [pc, #272]	; (8018200 <__multiply+0x14c>)
 80180ee:	4845      	ldr	r0, [pc, #276]	; (8018204 <__multiply+0x150>)
 80180f0:	f240 115d 	movw	r1, #349	; 0x15d
 80180f4:	f7fe ff0a 	bl	8016f0c <__assert_func>
 80180f8:	f100 0514 	add.w	r5, r0, #20
 80180fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018100:	462b      	mov	r3, r5
 8018102:	2200      	movs	r2, #0
 8018104:	4543      	cmp	r3, r8
 8018106:	d321      	bcc.n	801814c <__multiply+0x98>
 8018108:	f104 0314 	add.w	r3, r4, #20
 801810c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018110:	f109 0314 	add.w	r3, r9, #20
 8018114:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018118:	9202      	str	r2, [sp, #8]
 801811a:	1b3a      	subs	r2, r7, r4
 801811c:	3a15      	subs	r2, #21
 801811e:	f022 0203 	bic.w	r2, r2, #3
 8018122:	3204      	adds	r2, #4
 8018124:	f104 0115 	add.w	r1, r4, #21
 8018128:	428f      	cmp	r7, r1
 801812a:	bf38      	it	cc
 801812c:	2204      	movcc	r2, #4
 801812e:	9201      	str	r2, [sp, #4]
 8018130:	9a02      	ldr	r2, [sp, #8]
 8018132:	9303      	str	r3, [sp, #12]
 8018134:	429a      	cmp	r2, r3
 8018136:	d80c      	bhi.n	8018152 <__multiply+0x9e>
 8018138:	2e00      	cmp	r6, #0
 801813a:	dd03      	ble.n	8018144 <__multiply+0x90>
 801813c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018140:	2b00      	cmp	r3, #0
 8018142:	d05a      	beq.n	80181fa <__multiply+0x146>
 8018144:	6106      	str	r6, [r0, #16]
 8018146:	b005      	add	sp, #20
 8018148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801814c:	f843 2b04 	str.w	r2, [r3], #4
 8018150:	e7d8      	b.n	8018104 <__multiply+0x50>
 8018152:	f8b3 a000 	ldrh.w	sl, [r3]
 8018156:	f1ba 0f00 	cmp.w	sl, #0
 801815a:	d024      	beq.n	80181a6 <__multiply+0xf2>
 801815c:	f104 0e14 	add.w	lr, r4, #20
 8018160:	46a9      	mov	r9, r5
 8018162:	f04f 0c00 	mov.w	ip, #0
 8018166:	f85e 2b04 	ldr.w	r2, [lr], #4
 801816a:	f8d9 1000 	ldr.w	r1, [r9]
 801816e:	fa1f fb82 	uxth.w	fp, r2
 8018172:	b289      	uxth	r1, r1
 8018174:	fb0a 110b 	mla	r1, sl, fp, r1
 8018178:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801817c:	f8d9 2000 	ldr.w	r2, [r9]
 8018180:	4461      	add	r1, ip
 8018182:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018186:	fb0a c20b 	mla	r2, sl, fp, ip
 801818a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801818e:	b289      	uxth	r1, r1
 8018190:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018194:	4577      	cmp	r7, lr
 8018196:	f849 1b04 	str.w	r1, [r9], #4
 801819a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801819e:	d8e2      	bhi.n	8018166 <__multiply+0xb2>
 80181a0:	9a01      	ldr	r2, [sp, #4]
 80181a2:	f845 c002 	str.w	ip, [r5, r2]
 80181a6:	9a03      	ldr	r2, [sp, #12]
 80181a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80181ac:	3304      	adds	r3, #4
 80181ae:	f1b9 0f00 	cmp.w	r9, #0
 80181b2:	d020      	beq.n	80181f6 <__multiply+0x142>
 80181b4:	6829      	ldr	r1, [r5, #0]
 80181b6:	f104 0c14 	add.w	ip, r4, #20
 80181ba:	46ae      	mov	lr, r5
 80181bc:	f04f 0a00 	mov.w	sl, #0
 80181c0:	f8bc b000 	ldrh.w	fp, [ip]
 80181c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80181c8:	fb09 220b 	mla	r2, r9, fp, r2
 80181cc:	4492      	add	sl, r2
 80181ce:	b289      	uxth	r1, r1
 80181d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80181d4:	f84e 1b04 	str.w	r1, [lr], #4
 80181d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80181dc:	f8be 1000 	ldrh.w	r1, [lr]
 80181e0:	0c12      	lsrs	r2, r2, #16
 80181e2:	fb09 1102 	mla	r1, r9, r2, r1
 80181e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80181ea:	4567      	cmp	r7, ip
 80181ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80181f0:	d8e6      	bhi.n	80181c0 <__multiply+0x10c>
 80181f2:	9a01      	ldr	r2, [sp, #4]
 80181f4:	50a9      	str	r1, [r5, r2]
 80181f6:	3504      	adds	r5, #4
 80181f8:	e79a      	b.n	8018130 <__multiply+0x7c>
 80181fa:	3e01      	subs	r6, #1
 80181fc:	e79c      	b.n	8018138 <__multiply+0x84>
 80181fe:	bf00      	nop
 8018200:	08019928 	.word	0x08019928
 8018204:	080199a6 	.word	0x080199a6

08018208 <__pow5mult>:
 8018208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801820c:	4615      	mov	r5, r2
 801820e:	f012 0203 	ands.w	r2, r2, #3
 8018212:	4606      	mov	r6, r0
 8018214:	460f      	mov	r7, r1
 8018216:	d007      	beq.n	8018228 <__pow5mult+0x20>
 8018218:	4c25      	ldr	r4, [pc, #148]	; (80182b0 <__pow5mult+0xa8>)
 801821a:	3a01      	subs	r2, #1
 801821c:	2300      	movs	r3, #0
 801821e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018222:	f7ff fe9b 	bl	8017f5c <__multadd>
 8018226:	4607      	mov	r7, r0
 8018228:	10ad      	asrs	r5, r5, #2
 801822a:	d03d      	beq.n	80182a8 <__pow5mult+0xa0>
 801822c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801822e:	b97c      	cbnz	r4, 8018250 <__pow5mult+0x48>
 8018230:	2010      	movs	r0, #16
 8018232:	f7fe f8bb 	bl	80163ac <malloc>
 8018236:	4602      	mov	r2, r0
 8018238:	6270      	str	r0, [r6, #36]	; 0x24
 801823a:	b928      	cbnz	r0, 8018248 <__pow5mult+0x40>
 801823c:	4b1d      	ldr	r3, [pc, #116]	; (80182b4 <__pow5mult+0xac>)
 801823e:	481e      	ldr	r0, [pc, #120]	; (80182b8 <__pow5mult+0xb0>)
 8018240:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018244:	f7fe fe62 	bl	8016f0c <__assert_func>
 8018248:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801824c:	6004      	str	r4, [r0, #0]
 801824e:	60c4      	str	r4, [r0, #12]
 8018250:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018254:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018258:	b94c      	cbnz	r4, 801826e <__pow5mult+0x66>
 801825a:	f240 2171 	movw	r1, #625	; 0x271
 801825e:	4630      	mov	r0, r6
 8018260:	f7ff ff12 	bl	8018088 <__i2b>
 8018264:	2300      	movs	r3, #0
 8018266:	f8c8 0008 	str.w	r0, [r8, #8]
 801826a:	4604      	mov	r4, r0
 801826c:	6003      	str	r3, [r0, #0]
 801826e:	f04f 0900 	mov.w	r9, #0
 8018272:	07eb      	lsls	r3, r5, #31
 8018274:	d50a      	bpl.n	801828c <__pow5mult+0x84>
 8018276:	4639      	mov	r1, r7
 8018278:	4622      	mov	r2, r4
 801827a:	4630      	mov	r0, r6
 801827c:	f7ff ff1a 	bl	80180b4 <__multiply>
 8018280:	4639      	mov	r1, r7
 8018282:	4680      	mov	r8, r0
 8018284:	4630      	mov	r0, r6
 8018286:	f7ff fe47 	bl	8017f18 <_Bfree>
 801828a:	4647      	mov	r7, r8
 801828c:	106d      	asrs	r5, r5, #1
 801828e:	d00b      	beq.n	80182a8 <__pow5mult+0xa0>
 8018290:	6820      	ldr	r0, [r4, #0]
 8018292:	b938      	cbnz	r0, 80182a4 <__pow5mult+0x9c>
 8018294:	4622      	mov	r2, r4
 8018296:	4621      	mov	r1, r4
 8018298:	4630      	mov	r0, r6
 801829a:	f7ff ff0b 	bl	80180b4 <__multiply>
 801829e:	6020      	str	r0, [r4, #0]
 80182a0:	f8c0 9000 	str.w	r9, [r0]
 80182a4:	4604      	mov	r4, r0
 80182a6:	e7e4      	b.n	8018272 <__pow5mult+0x6a>
 80182a8:	4638      	mov	r0, r7
 80182aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182ae:	bf00      	nop
 80182b0:	08019af8 	.word	0x08019af8
 80182b4:	080198b6 	.word	0x080198b6
 80182b8:	080199a6 	.word	0x080199a6

080182bc <__lshift>:
 80182bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182c0:	460c      	mov	r4, r1
 80182c2:	6849      	ldr	r1, [r1, #4]
 80182c4:	6923      	ldr	r3, [r4, #16]
 80182c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80182ca:	68a3      	ldr	r3, [r4, #8]
 80182cc:	4607      	mov	r7, r0
 80182ce:	4691      	mov	r9, r2
 80182d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80182d4:	f108 0601 	add.w	r6, r8, #1
 80182d8:	42b3      	cmp	r3, r6
 80182da:	db0b      	blt.n	80182f4 <__lshift+0x38>
 80182dc:	4638      	mov	r0, r7
 80182de:	f7ff fddb 	bl	8017e98 <_Balloc>
 80182e2:	4605      	mov	r5, r0
 80182e4:	b948      	cbnz	r0, 80182fa <__lshift+0x3e>
 80182e6:	4602      	mov	r2, r0
 80182e8:	4b2a      	ldr	r3, [pc, #168]	; (8018394 <__lshift+0xd8>)
 80182ea:	482b      	ldr	r0, [pc, #172]	; (8018398 <__lshift+0xdc>)
 80182ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80182f0:	f7fe fe0c 	bl	8016f0c <__assert_func>
 80182f4:	3101      	adds	r1, #1
 80182f6:	005b      	lsls	r3, r3, #1
 80182f8:	e7ee      	b.n	80182d8 <__lshift+0x1c>
 80182fa:	2300      	movs	r3, #0
 80182fc:	f100 0114 	add.w	r1, r0, #20
 8018300:	f100 0210 	add.w	r2, r0, #16
 8018304:	4618      	mov	r0, r3
 8018306:	4553      	cmp	r3, sl
 8018308:	db37      	blt.n	801837a <__lshift+0xbe>
 801830a:	6920      	ldr	r0, [r4, #16]
 801830c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018310:	f104 0314 	add.w	r3, r4, #20
 8018314:	f019 091f 	ands.w	r9, r9, #31
 8018318:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801831c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018320:	d02f      	beq.n	8018382 <__lshift+0xc6>
 8018322:	f1c9 0e20 	rsb	lr, r9, #32
 8018326:	468a      	mov	sl, r1
 8018328:	f04f 0c00 	mov.w	ip, #0
 801832c:	681a      	ldr	r2, [r3, #0]
 801832e:	fa02 f209 	lsl.w	r2, r2, r9
 8018332:	ea42 020c 	orr.w	r2, r2, ip
 8018336:	f84a 2b04 	str.w	r2, [sl], #4
 801833a:	f853 2b04 	ldr.w	r2, [r3], #4
 801833e:	4298      	cmp	r0, r3
 8018340:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018344:	d8f2      	bhi.n	801832c <__lshift+0x70>
 8018346:	1b03      	subs	r3, r0, r4
 8018348:	3b15      	subs	r3, #21
 801834a:	f023 0303 	bic.w	r3, r3, #3
 801834e:	3304      	adds	r3, #4
 8018350:	f104 0215 	add.w	r2, r4, #21
 8018354:	4290      	cmp	r0, r2
 8018356:	bf38      	it	cc
 8018358:	2304      	movcc	r3, #4
 801835a:	f841 c003 	str.w	ip, [r1, r3]
 801835e:	f1bc 0f00 	cmp.w	ip, #0
 8018362:	d001      	beq.n	8018368 <__lshift+0xac>
 8018364:	f108 0602 	add.w	r6, r8, #2
 8018368:	3e01      	subs	r6, #1
 801836a:	4638      	mov	r0, r7
 801836c:	612e      	str	r6, [r5, #16]
 801836e:	4621      	mov	r1, r4
 8018370:	f7ff fdd2 	bl	8017f18 <_Bfree>
 8018374:	4628      	mov	r0, r5
 8018376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801837a:	f842 0f04 	str.w	r0, [r2, #4]!
 801837e:	3301      	adds	r3, #1
 8018380:	e7c1      	b.n	8018306 <__lshift+0x4a>
 8018382:	3904      	subs	r1, #4
 8018384:	f853 2b04 	ldr.w	r2, [r3], #4
 8018388:	f841 2f04 	str.w	r2, [r1, #4]!
 801838c:	4298      	cmp	r0, r3
 801838e:	d8f9      	bhi.n	8018384 <__lshift+0xc8>
 8018390:	e7ea      	b.n	8018368 <__lshift+0xac>
 8018392:	bf00      	nop
 8018394:	08019928 	.word	0x08019928
 8018398:	080199a6 	.word	0x080199a6

0801839c <__mcmp>:
 801839c:	b530      	push	{r4, r5, lr}
 801839e:	6902      	ldr	r2, [r0, #16]
 80183a0:	690c      	ldr	r4, [r1, #16]
 80183a2:	1b12      	subs	r2, r2, r4
 80183a4:	d10e      	bne.n	80183c4 <__mcmp+0x28>
 80183a6:	f100 0314 	add.w	r3, r0, #20
 80183aa:	3114      	adds	r1, #20
 80183ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80183b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80183b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80183b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80183bc:	42a5      	cmp	r5, r4
 80183be:	d003      	beq.n	80183c8 <__mcmp+0x2c>
 80183c0:	d305      	bcc.n	80183ce <__mcmp+0x32>
 80183c2:	2201      	movs	r2, #1
 80183c4:	4610      	mov	r0, r2
 80183c6:	bd30      	pop	{r4, r5, pc}
 80183c8:	4283      	cmp	r3, r0
 80183ca:	d3f3      	bcc.n	80183b4 <__mcmp+0x18>
 80183cc:	e7fa      	b.n	80183c4 <__mcmp+0x28>
 80183ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80183d2:	e7f7      	b.n	80183c4 <__mcmp+0x28>

080183d4 <__mdiff>:
 80183d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183d8:	460c      	mov	r4, r1
 80183da:	4606      	mov	r6, r0
 80183dc:	4611      	mov	r1, r2
 80183de:	4620      	mov	r0, r4
 80183e0:	4690      	mov	r8, r2
 80183e2:	f7ff ffdb 	bl	801839c <__mcmp>
 80183e6:	1e05      	subs	r5, r0, #0
 80183e8:	d110      	bne.n	801840c <__mdiff+0x38>
 80183ea:	4629      	mov	r1, r5
 80183ec:	4630      	mov	r0, r6
 80183ee:	f7ff fd53 	bl	8017e98 <_Balloc>
 80183f2:	b930      	cbnz	r0, 8018402 <__mdiff+0x2e>
 80183f4:	4b3a      	ldr	r3, [pc, #232]	; (80184e0 <__mdiff+0x10c>)
 80183f6:	4602      	mov	r2, r0
 80183f8:	f240 2132 	movw	r1, #562	; 0x232
 80183fc:	4839      	ldr	r0, [pc, #228]	; (80184e4 <__mdiff+0x110>)
 80183fe:	f7fe fd85 	bl	8016f0c <__assert_func>
 8018402:	2301      	movs	r3, #1
 8018404:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801840c:	bfa4      	itt	ge
 801840e:	4643      	movge	r3, r8
 8018410:	46a0      	movge	r8, r4
 8018412:	4630      	mov	r0, r6
 8018414:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018418:	bfa6      	itte	ge
 801841a:	461c      	movge	r4, r3
 801841c:	2500      	movge	r5, #0
 801841e:	2501      	movlt	r5, #1
 8018420:	f7ff fd3a 	bl	8017e98 <_Balloc>
 8018424:	b920      	cbnz	r0, 8018430 <__mdiff+0x5c>
 8018426:	4b2e      	ldr	r3, [pc, #184]	; (80184e0 <__mdiff+0x10c>)
 8018428:	4602      	mov	r2, r0
 801842a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801842e:	e7e5      	b.n	80183fc <__mdiff+0x28>
 8018430:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018434:	6926      	ldr	r6, [r4, #16]
 8018436:	60c5      	str	r5, [r0, #12]
 8018438:	f104 0914 	add.w	r9, r4, #20
 801843c:	f108 0514 	add.w	r5, r8, #20
 8018440:	f100 0e14 	add.w	lr, r0, #20
 8018444:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018448:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801844c:	f108 0210 	add.w	r2, r8, #16
 8018450:	46f2      	mov	sl, lr
 8018452:	2100      	movs	r1, #0
 8018454:	f859 3b04 	ldr.w	r3, [r9], #4
 8018458:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801845c:	fa1f f883 	uxth.w	r8, r3
 8018460:	fa11 f18b 	uxtah	r1, r1, fp
 8018464:	0c1b      	lsrs	r3, r3, #16
 8018466:	eba1 0808 	sub.w	r8, r1, r8
 801846a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801846e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018472:	fa1f f888 	uxth.w	r8, r8
 8018476:	1419      	asrs	r1, r3, #16
 8018478:	454e      	cmp	r6, r9
 801847a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801847e:	f84a 3b04 	str.w	r3, [sl], #4
 8018482:	d8e7      	bhi.n	8018454 <__mdiff+0x80>
 8018484:	1b33      	subs	r3, r6, r4
 8018486:	3b15      	subs	r3, #21
 8018488:	f023 0303 	bic.w	r3, r3, #3
 801848c:	3304      	adds	r3, #4
 801848e:	3415      	adds	r4, #21
 8018490:	42a6      	cmp	r6, r4
 8018492:	bf38      	it	cc
 8018494:	2304      	movcc	r3, #4
 8018496:	441d      	add	r5, r3
 8018498:	4473      	add	r3, lr
 801849a:	469e      	mov	lr, r3
 801849c:	462e      	mov	r6, r5
 801849e:	4566      	cmp	r6, ip
 80184a0:	d30e      	bcc.n	80184c0 <__mdiff+0xec>
 80184a2:	f10c 0203 	add.w	r2, ip, #3
 80184a6:	1b52      	subs	r2, r2, r5
 80184a8:	f022 0203 	bic.w	r2, r2, #3
 80184ac:	3d03      	subs	r5, #3
 80184ae:	45ac      	cmp	ip, r5
 80184b0:	bf38      	it	cc
 80184b2:	2200      	movcc	r2, #0
 80184b4:	441a      	add	r2, r3
 80184b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80184ba:	b17b      	cbz	r3, 80184dc <__mdiff+0x108>
 80184bc:	6107      	str	r7, [r0, #16]
 80184be:	e7a3      	b.n	8018408 <__mdiff+0x34>
 80184c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80184c4:	fa11 f288 	uxtah	r2, r1, r8
 80184c8:	1414      	asrs	r4, r2, #16
 80184ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80184ce:	b292      	uxth	r2, r2
 80184d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80184d4:	f84e 2b04 	str.w	r2, [lr], #4
 80184d8:	1421      	asrs	r1, r4, #16
 80184da:	e7e0      	b.n	801849e <__mdiff+0xca>
 80184dc:	3f01      	subs	r7, #1
 80184de:	e7ea      	b.n	80184b6 <__mdiff+0xe2>
 80184e0:	08019928 	.word	0x08019928
 80184e4:	080199a6 	.word	0x080199a6

080184e8 <__d2b>:
 80184e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80184ec:	4689      	mov	r9, r1
 80184ee:	2101      	movs	r1, #1
 80184f0:	ec57 6b10 	vmov	r6, r7, d0
 80184f4:	4690      	mov	r8, r2
 80184f6:	f7ff fccf 	bl	8017e98 <_Balloc>
 80184fa:	4604      	mov	r4, r0
 80184fc:	b930      	cbnz	r0, 801850c <__d2b+0x24>
 80184fe:	4602      	mov	r2, r0
 8018500:	4b25      	ldr	r3, [pc, #148]	; (8018598 <__d2b+0xb0>)
 8018502:	4826      	ldr	r0, [pc, #152]	; (801859c <__d2b+0xb4>)
 8018504:	f240 310a 	movw	r1, #778	; 0x30a
 8018508:	f7fe fd00 	bl	8016f0c <__assert_func>
 801850c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018514:	bb35      	cbnz	r5, 8018564 <__d2b+0x7c>
 8018516:	2e00      	cmp	r6, #0
 8018518:	9301      	str	r3, [sp, #4]
 801851a:	d028      	beq.n	801856e <__d2b+0x86>
 801851c:	4668      	mov	r0, sp
 801851e:	9600      	str	r6, [sp, #0]
 8018520:	f7ff fd82 	bl	8018028 <__lo0bits>
 8018524:	9900      	ldr	r1, [sp, #0]
 8018526:	b300      	cbz	r0, 801856a <__d2b+0x82>
 8018528:	9a01      	ldr	r2, [sp, #4]
 801852a:	f1c0 0320 	rsb	r3, r0, #32
 801852e:	fa02 f303 	lsl.w	r3, r2, r3
 8018532:	430b      	orrs	r3, r1
 8018534:	40c2      	lsrs	r2, r0
 8018536:	6163      	str	r3, [r4, #20]
 8018538:	9201      	str	r2, [sp, #4]
 801853a:	9b01      	ldr	r3, [sp, #4]
 801853c:	61a3      	str	r3, [r4, #24]
 801853e:	2b00      	cmp	r3, #0
 8018540:	bf14      	ite	ne
 8018542:	2202      	movne	r2, #2
 8018544:	2201      	moveq	r2, #1
 8018546:	6122      	str	r2, [r4, #16]
 8018548:	b1d5      	cbz	r5, 8018580 <__d2b+0x98>
 801854a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801854e:	4405      	add	r5, r0
 8018550:	f8c9 5000 	str.w	r5, [r9]
 8018554:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018558:	f8c8 0000 	str.w	r0, [r8]
 801855c:	4620      	mov	r0, r4
 801855e:	b003      	add	sp, #12
 8018560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018568:	e7d5      	b.n	8018516 <__d2b+0x2e>
 801856a:	6161      	str	r1, [r4, #20]
 801856c:	e7e5      	b.n	801853a <__d2b+0x52>
 801856e:	a801      	add	r0, sp, #4
 8018570:	f7ff fd5a 	bl	8018028 <__lo0bits>
 8018574:	9b01      	ldr	r3, [sp, #4]
 8018576:	6163      	str	r3, [r4, #20]
 8018578:	2201      	movs	r2, #1
 801857a:	6122      	str	r2, [r4, #16]
 801857c:	3020      	adds	r0, #32
 801857e:	e7e3      	b.n	8018548 <__d2b+0x60>
 8018580:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018584:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018588:	f8c9 0000 	str.w	r0, [r9]
 801858c:	6918      	ldr	r0, [r3, #16]
 801858e:	f7ff fd2b 	bl	8017fe8 <__hi0bits>
 8018592:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018596:	e7df      	b.n	8018558 <__d2b+0x70>
 8018598:	08019928 	.word	0x08019928
 801859c:	080199a6 	.word	0x080199a6

080185a0 <_calloc_r>:
 80185a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80185a2:	fba1 2402 	umull	r2, r4, r1, r2
 80185a6:	b94c      	cbnz	r4, 80185bc <_calloc_r+0x1c>
 80185a8:	4611      	mov	r1, r2
 80185aa:	9201      	str	r2, [sp, #4]
 80185ac:	f7fd ff88 	bl	80164c0 <_malloc_r>
 80185b0:	9a01      	ldr	r2, [sp, #4]
 80185b2:	4605      	mov	r5, r0
 80185b4:	b930      	cbnz	r0, 80185c4 <_calloc_r+0x24>
 80185b6:	4628      	mov	r0, r5
 80185b8:	b003      	add	sp, #12
 80185ba:	bd30      	pop	{r4, r5, pc}
 80185bc:	220c      	movs	r2, #12
 80185be:	6002      	str	r2, [r0, #0]
 80185c0:	2500      	movs	r5, #0
 80185c2:	e7f8      	b.n	80185b6 <_calloc_r+0x16>
 80185c4:	4621      	mov	r1, r4
 80185c6:	f7fd ff07 	bl	80163d8 <memset>
 80185ca:	e7f4      	b.n	80185b6 <_calloc_r+0x16>

080185cc <__ssputs_r>:
 80185cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185d0:	688e      	ldr	r6, [r1, #8]
 80185d2:	429e      	cmp	r6, r3
 80185d4:	4682      	mov	sl, r0
 80185d6:	460c      	mov	r4, r1
 80185d8:	4690      	mov	r8, r2
 80185da:	461f      	mov	r7, r3
 80185dc:	d838      	bhi.n	8018650 <__ssputs_r+0x84>
 80185de:	898a      	ldrh	r2, [r1, #12]
 80185e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80185e4:	d032      	beq.n	801864c <__ssputs_r+0x80>
 80185e6:	6825      	ldr	r5, [r4, #0]
 80185e8:	6909      	ldr	r1, [r1, #16]
 80185ea:	eba5 0901 	sub.w	r9, r5, r1
 80185ee:	6965      	ldr	r5, [r4, #20]
 80185f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80185f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80185f8:	3301      	adds	r3, #1
 80185fa:	444b      	add	r3, r9
 80185fc:	106d      	asrs	r5, r5, #1
 80185fe:	429d      	cmp	r5, r3
 8018600:	bf38      	it	cc
 8018602:	461d      	movcc	r5, r3
 8018604:	0553      	lsls	r3, r2, #21
 8018606:	d531      	bpl.n	801866c <__ssputs_r+0xa0>
 8018608:	4629      	mov	r1, r5
 801860a:	f7fd ff59 	bl	80164c0 <_malloc_r>
 801860e:	4606      	mov	r6, r0
 8018610:	b950      	cbnz	r0, 8018628 <__ssputs_r+0x5c>
 8018612:	230c      	movs	r3, #12
 8018614:	f8ca 3000 	str.w	r3, [sl]
 8018618:	89a3      	ldrh	r3, [r4, #12]
 801861a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801861e:	81a3      	strh	r3, [r4, #12]
 8018620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018628:	6921      	ldr	r1, [r4, #16]
 801862a:	464a      	mov	r2, r9
 801862c:	f7fd fec6 	bl	80163bc <memcpy>
 8018630:	89a3      	ldrh	r3, [r4, #12]
 8018632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801863a:	81a3      	strh	r3, [r4, #12]
 801863c:	6126      	str	r6, [r4, #16]
 801863e:	6165      	str	r5, [r4, #20]
 8018640:	444e      	add	r6, r9
 8018642:	eba5 0509 	sub.w	r5, r5, r9
 8018646:	6026      	str	r6, [r4, #0]
 8018648:	60a5      	str	r5, [r4, #8]
 801864a:	463e      	mov	r6, r7
 801864c:	42be      	cmp	r6, r7
 801864e:	d900      	bls.n	8018652 <__ssputs_r+0x86>
 8018650:	463e      	mov	r6, r7
 8018652:	6820      	ldr	r0, [r4, #0]
 8018654:	4632      	mov	r2, r6
 8018656:	4641      	mov	r1, r8
 8018658:	f000 fce4 	bl	8019024 <memmove>
 801865c:	68a3      	ldr	r3, [r4, #8]
 801865e:	1b9b      	subs	r3, r3, r6
 8018660:	60a3      	str	r3, [r4, #8]
 8018662:	6823      	ldr	r3, [r4, #0]
 8018664:	4433      	add	r3, r6
 8018666:	6023      	str	r3, [r4, #0]
 8018668:	2000      	movs	r0, #0
 801866a:	e7db      	b.n	8018624 <__ssputs_r+0x58>
 801866c:	462a      	mov	r2, r5
 801866e:	f000 fcf3 	bl	8019058 <_realloc_r>
 8018672:	4606      	mov	r6, r0
 8018674:	2800      	cmp	r0, #0
 8018676:	d1e1      	bne.n	801863c <__ssputs_r+0x70>
 8018678:	6921      	ldr	r1, [r4, #16]
 801867a:	4650      	mov	r0, sl
 801867c:	f7fd feb4 	bl	80163e8 <_free_r>
 8018680:	e7c7      	b.n	8018612 <__ssputs_r+0x46>
	...

08018684 <_svfiprintf_r>:
 8018684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018688:	4698      	mov	r8, r3
 801868a:	898b      	ldrh	r3, [r1, #12]
 801868c:	061b      	lsls	r3, r3, #24
 801868e:	b09d      	sub	sp, #116	; 0x74
 8018690:	4607      	mov	r7, r0
 8018692:	460d      	mov	r5, r1
 8018694:	4614      	mov	r4, r2
 8018696:	d50e      	bpl.n	80186b6 <_svfiprintf_r+0x32>
 8018698:	690b      	ldr	r3, [r1, #16]
 801869a:	b963      	cbnz	r3, 80186b6 <_svfiprintf_r+0x32>
 801869c:	2140      	movs	r1, #64	; 0x40
 801869e:	f7fd ff0f 	bl	80164c0 <_malloc_r>
 80186a2:	6028      	str	r0, [r5, #0]
 80186a4:	6128      	str	r0, [r5, #16]
 80186a6:	b920      	cbnz	r0, 80186b2 <_svfiprintf_r+0x2e>
 80186a8:	230c      	movs	r3, #12
 80186aa:	603b      	str	r3, [r7, #0]
 80186ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80186b0:	e0d1      	b.n	8018856 <_svfiprintf_r+0x1d2>
 80186b2:	2340      	movs	r3, #64	; 0x40
 80186b4:	616b      	str	r3, [r5, #20]
 80186b6:	2300      	movs	r3, #0
 80186b8:	9309      	str	r3, [sp, #36]	; 0x24
 80186ba:	2320      	movs	r3, #32
 80186bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80186c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80186c4:	2330      	movs	r3, #48	; 0x30
 80186c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018870 <_svfiprintf_r+0x1ec>
 80186ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80186ce:	f04f 0901 	mov.w	r9, #1
 80186d2:	4623      	mov	r3, r4
 80186d4:	469a      	mov	sl, r3
 80186d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186da:	b10a      	cbz	r2, 80186e0 <_svfiprintf_r+0x5c>
 80186dc:	2a25      	cmp	r2, #37	; 0x25
 80186de:	d1f9      	bne.n	80186d4 <_svfiprintf_r+0x50>
 80186e0:	ebba 0b04 	subs.w	fp, sl, r4
 80186e4:	d00b      	beq.n	80186fe <_svfiprintf_r+0x7a>
 80186e6:	465b      	mov	r3, fp
 80186e8:	4622      	mov	r2, r4
 80186ea:	4629      	mov	r1, r5
 80186ec:	4638      	mov	r0, r7
 80186ee:	f7ff ff6d 	bl	80185cc <__ssputs_r>
 80186f2:	3001      	adds	r0, #1
 80186f4:	f000 80aa 	beq.w	801884c <_svfiprintf_r+0x1c8>
 80186f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186fa:	445a      	add	r2, fp
 80186fc:	9209      	str	r2, [sp, #36]	; 0x24
 80186fe:	f89a 3000 	ldrb.w	r3, [sl]
 8018702:	2b00      	cmp	r3, #0
 8018704:	f000 80a2 	beq.w	801884c <_svfiprintf_r+0x1c8>
 8018708:	2300      	movs	r3, #0
 801870a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801870e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018712:	f10a 0a01 	add.w	sl, sl, #1
 8018716:	9304      	str	r3, [sp, #16]
 8018718:	9307      	str	r3, [sp, #28]
 801871a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801871e:	931a      	str	r3, [sp, #104]	; 0x68
 8018720:	4654      	mov	r4, sl
 8018722:	2205      	movs	r2, #5
 8018724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018728:	4851      	ldr	r0, [pc, #324]	; (8018870 <_svfiprintf_r+0x1ec>)
 801872a:	f7e7 fd71 	bl	8000210 <memchr>
 801872e:	9a04      	ldr	r2, [sp, #16]
 8018730:	b9d8      	cbnz	r0, 801876a <_svfiprintf_r+0xe6>
 8018732:	06d0      	lsls	r0, r2, #27
 8018734:	bf44      	itt	mi
 8018736:	2320      	movmi	r3, #32
 8018738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801873c:	0711      	lsls	r1, r2, #28
 801873e:	bf44      	itt	mi
 8018740:	232b      	movmi	r3, #43	; 0x2b
 8018742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018746:	f89a 3000 	ldrb.w	r3, [sl]
 801874a:	2b2a      	cmp	r3, #42	; 0x2a
 801874c:	d015      	beq.n	801877a <_svfiprintf_r+0xf6>
 801874e:	9a07      	ldr	r2, [sp, #28]
 8018750:	4654      	mov	r4, sl
 8018752:	2000      	movs	r0, #0
 8018754:	f04f 0c0a 	mov.w	ip, #10
 8018758:	4621      	mov	r1, r4
 801875a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801875e:	3b30      	subs	r3, #48	; 0x30
 8018760:	2b09      	cmp	r3, #9
 8018762:	d94e      	bls.n	8018802 <_svfiprintf_r+0x17e>
 8018764:	b1b0      	cbz	r0, 8018794 <_svfiprintf_r+0x110>
 8018766:	9207      	str	r2, [sp, #28]
 8018768:	e014      	b.n	8018794 <_svfiprintf_r+0x110>
 801876a:	eba0 0308 	sub.w	r3, r0, r8
 801876e:	fa09 f303 	lsl.w	r3, r9, r3
 8018772:	4313      	orrs	r3, r2
 8018774:	9304      	str	r3, [sp, #16]
 8018776:	46a2      	mov	sl, r4
 8018778:	e7d2      	b.n	8018720 <_svfiprintf_r+0x9c>
 801877a:	9b03      	ldr	r3, [sp, #12]
 801877c:	1d19      	adds	r1, r3, #4
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	9103      	str	r1, [sp, #12]
 8018782:	2b00      	cmp	r3, #0
 8018784:	bfbb      	ittet	lt
 8018786:	425b      	neglt	r3, r3
 8018788:	f042 0202 	orrlt.w	r2, r2, #2
 801878c:	9307      	strge	r3, [sp, #28]
 801878e:	9307      	strlt	r3, [sp, #28]
 8018790:	bfb8      	it	lt
 8018792:	9204      	strlt	r2, [sp, #16]
 8018794:	7823      	ldrb	r3, [r4, #0]
 8018796:	2b2e      	cmp	r3, #46	; 0x2e
 8018798:	d10c      	bne.n	80187b4 <_svfiprintf_r+0x130>
 801879a:	7863      	ldrb	r3, [r4, #1]
 801879c:	2b2a      	cmp	r3, #42	; 0x2a
 801879e:	d135      	bne.n	801880c <_svfiprintf_r+0x188>
 80187a0:	9b03      	ldr	r3, [sp, #12]
 80187a2:	1d1a      	adds	r2, r3, #4
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	9203      	str	r2, [sp, #12]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	bfb8      	it	lt
 80187ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80187b0:	3402      	adds	r4, #2
 80187b2:	9305      	str	r3, [sp, #20]
 80187b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018880 <_svfiprintf_r+0x1fc>
 80187b8:	7821      	ldrb	r1, [r4, #0]
 80187ba:	2203      	movs	r2, #3
 80187bc:	4650      	mov	r0, sl
 80187be:	f7e7 fd27 	bl	8000210 <memchr>
 80187c2:	b140      	cbz	r0, 80187d6 <_svfiprintf_r+0x152>
 80187c4:	2340      	movs	r3, #64	; 0x40
 80187c6:	eba0 000a 	sub.w	r0, r0, sl
 80187ca:	fa03 f000 	lsl.w	r0, r3, r0
 80187ce:	9b04      	ldr	r3, [sp, #16]
 80187d0:	4303      	orrs	r3, r0
 80187d2:	3401      	adds	r4, #1
 80187d4:	9304      	str	r3, [sp, #16]
 80187d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187da:	4826      	ldr	r0, [pc, #152]	; (8018874 <_svfiprintf_r+0x1f0>)
 80187dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80187e0:	2206      	movs	r2, #6
 80187e2:	f7e7 fd15 	bl	8000210 <memchr>
 80187e6:	2800      	cmp	r0, #0
 80187e8:	d038      	beq.n	801885c <_svfiprintf_r+0x1d8>
 80187ea:	4b23      	ldr	r3, [pc, #140]	; (8018878 <_svfiprintf_r+0x1f4>)
 80187ec:	bb1b      	cbnz	r3, 8018836 <_svfiprintf_r+0x1b2>
 80187ee:	9b03      	ldr	r3, [sp, #12]
 80187f0:	3307      	adds	r3, #7
 80187f2:	f023 0307 	bic.w	r3, r3, #7
 80187f6:	3308      	adds	r3, #8
 80187f8:	9303      	str	r3, [sp, #12]
 80187fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187fc:	4433      	add	r3, r6
 80187fe:	9309      	str	r3, [sp, #36]	; 0x24
 8018800:	e767      	b.n	80186d2 <_svfiprintf_r+0x4e>
 8018802:	fb0c 3202 	mla	r2, ip, r2, r3
 8018806:	460c      	mov	r4, r1
 8018808:	2001      	movs	r0, #1
 801880a:	e7a5      	b.n	8018758 <_svfiprintf_r+0xd4>
 801880c:	2300      	movs	r3, #0
 801880e:	3401      	adds	r4, #1
 8018810:	9305      	str	r3, [sp, #20]
 8018812:	4619      	mov	r1, r3
 8018814:	f04f 0c0a 	mov.w	ip, #10
 8018818:	4620      	mov	r0, r4
 801881a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801881e:	3a30      	subs	r2, #48	; 0x30
 8018820:	2a09      	cmp	r2, #9
 8018822:	d903      	bls.n	801882c <_svfiprintf_r+0x1a8>
 8018824:	2b00      	cmp	r3, #0
 8018826:	d0c5      	beq.n	80187b4 <_svfiprintf_r+0x130>
 8018828:	9105      	str	r1, [sp, #20]
 801882a:	e7c3      	b.n	80187b4 <_svfiprintf_r+0x130>
 801882c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018830:	4604      	mov	r4, r0
 8018832:	2301      	movs	r3, #1
 8018834:	e7f0      	b.n	8018818 <_svfiprintf_r+0x194>
 8018836:	ab03      	add	r3, sp, #12
 8018838:	9300      	str	r3, [sp, #0]
 801883a:	462a      	mov	r2, r5
 801883c:	4b0f      	ldr	r3, [pc, #60]	; (801887c <_svfiprintf_r+0x1f8>)
 801883e:	a904      	add	r1, sp, #16
 8018840:	4638      	mov	r0, r7
 8018842:	f7fd ff51 	bl	80166e8 <_printf_float>
 8018846:	1c42      	adds	r2, r0, #1
 8018848:	4606      	mov	r6, r0
 801884a:	d1d6      	bne.n	80187fa <_svfiprintf_r+0x176>
 801884c:	89ab      	ldrh	r3, [r5, #12]
 801884e:	065b      	lsls	r3, r3, #25
 8018850:	f53f af2c 	bmi.w	80186ac <_svfiprintf_r+0x28>
 8018854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018856:	b01d      	add	sp, #116	; 0x74
 8018858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801885c:	ab03      	add	r3, sp, #12
 801885e:	9300      	str	r3, [sp, #0]
 8018860:	462a      	mov	r2, r5
 8018862:	4b06      	ldr	r3, [pc, #24]	; (801887c <_svfiprintf_r+0x1f8>)
 8018864:	a904      	add	r1, sp, #16
 8018866:	4638      	mov	r0, r7
 8018868:	f7fe f9e2 	bl	8016c30 <_printf_i>
 801886c:	e7eb      	b.n	8018846 <_svfiprintf_r+0x1c2>
 801886e:	bf00      	nop
 8018870:	08019b04 	.word	0x08019b04
 8018874:	08019b0e 	.word	0x08019b0e
 8018878:	080166e9 	.word	0x080166e9
 801887c:	080185cd 	.word	0x080185cd
 8018880:	08019b0a 	.word	0x08019b0a

08018884 <__sfputc_r>:
 8018884:	6893      	ldr	r3, [r2, #8]
 8018886:	3b01      	subs	r3, #1
 8018888:	2b00      	cmp	r3, #0
 801888a:	b410      	push	{r4}
 801888c:	6093      	str	r3, [r2, #8]
 801888e:	da08      	bge.n	80188a2 <__sfputc_r+0x1e>
 8018890:	6994      	ldr	r4, [r2, #24]
 8018892:	42a3      	cmp	r3, r4
 8018894:	db01      	blt.n	801889a <__sfputc_r+0x16>
 8018896:	290a      	cmp	r1, #10
 8018898:	d103      	bne.n	80188a2 <__sfputc_r+0x1e>
 801889a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801889e:	f000 b98f 	b.w	8018bc0 <__swbuf_r>
 80188a2:	6813      	ldr	r3, [r2, #0]
 80188a4:	1c58      	adds	r0, r3, #1
 80188a6:	6010      	str	r0, [r2, #0]
 80188a8:	7019      	strb	r1, [r3, #0]
 80188aa:	4608      	mov	r0, r1
 80188ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188b0:	4770      	bx	lr

080188b2 <__sfputs_r>:
 80188b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188b4:	4606      	mov	r6, r0
 80188b6:	460f      	mov	r7, r1
 80188b8:	4614      	mov	r4, r2
 80188ba:	18d5      	adds	r5, r2, r3
 80188bc:	42ac      	cmp	r4, r5
 80188be:	d101      	bne.n	80188c4 <__sfputs_r+0x12>
 80188c0:	2000      	movs	r0, #0
 80188c2:	e007      	b.n	80188d4 <__sfputs_r+0x22>
 80188c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188c8:	463a      	mov	r2, r7
 80188ca:	4630      	mov	r0, r6
 80188cc:	f7ff ffda 	bl	8018884 <__sfputc_r>
 80188d0:	1c43      	adds	r3, r0, #1
 80188d2:	d1f3      	bne.n	80188bc <__sfputs_r+0xa>
 80188d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080188d8 <_vfiprintf_r>:
 80188d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188dc:	460d      	mov	r5, r1
 80188de:	b09d      	sub	sp, #116	; 0x74
 80188e0:	4614      	mov	r4, r2
 80188e2:	4698      	mov	r8, r3
 80188e4:	4606      	mov	r6, r0
 80188e6:	b118      	cbz	r0, 80188f0 <_vfiprintf_r+0x18>
 80188e8:	6983      	ldr	r3, [r0, #24]
 80188ea:	b90b      	cbnz	r3, 80188f0 <_vfiprintf_r+0x18>
 80188ec:	f7ff f9fe 	bl	8017cec <__sinit>
 80188f0:	4b89      	ldr	r3, [pc, #548]	; (8018b18 <_vfiprintf_r+0x240>)
 80188f2:	429d      	cmp	r5, r3
 80188f4:	d11b      	bne.n	801892e <_vfiprintf_r+0x56>
 80188f6:	6875      	ldr	r5, [r6, #4]
 80188f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80188fa:	07d9      	lsls	r1, r3, #31
 80188fc:	d405      	bmi.n	801890a <_vfiprintf_r+0x32>
 80188fe:	89ab      	ldrh	r3, [r5, #12]
 8018900:	059a      	lsls	r2, r3, #22
 8018902:	d402      	bmi.n	801890a <_vfiprintf_r+0x32>
 8018904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018906:	f7ff faa6 	bl	8017e56 <__retarget_lock_acquire_recursive>
 801890a:	89ab      	ldrh	r3, [r5, #12]
 801890c:	071b      	lsls	r3, r3, #28
 801890e:	d501      	bpl.n	8018914 <_vfiprintf_r+0x3c>
 8018910:	692b      	ldr	r3, [r5, #16]
 8018912:	b9eb      	cbnz	r3, 8018950 <_vfiprintf_r+0x78>
 8018914:	4629      	mov	r1, r5
 8018916:	4630      	mov	r0, r6
 8018918:	f000 f9c4 	bl	8018ca4 <__swsetup_r>
 801891c:	b1c0      	cbz	r0, 8018950 <_vfiprintf_r+0x78>
 801891e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018920:	07dc      	lsls	r4, r3, #31
 8018922:	d50e      	bpl.n	8018942 <_vfiprintf_r+0x6a>
 8018924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018928:	b01d      	add	sp, #116	; 0x74
 801892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801892e:	4b7b      	ldr	r3, [pc, #492]	; (8018b1c <_vfiprintf_r+0x244>)
 8018930:	429d      	cmp	r5, r3
 8018932:	d101      	bne.n	8018938 <_vfiprintf_r+0x60>
 8018934:	68b5      	ldr	r5, [r6, #8]
 8018936:	e7df      	b.n	80188f8 <_vfiprintf_r+0x20>
 8018938:	4b79      	ldr	r3, [pc, #484]	; (8018b20 <_vfiprintf_r+0x248>)
 801893a:	429d      	cmp	r5, r3
 801893c:	bf08      	it	eq
 801893e:	68f5      	ldreq	r5, [r6, #12]
 8018940:	e7da      	b.n	80188f8 <_vfiprintf_r+0x20>
 8018942:	89ab      	ldrh	r3, [r5, #12]
 8018944:	0598      	lsls	r0, r3, #22
 8018946:	d4ed      	bmi.n	8018924 <_vfiprintf_r+0x4c>
 8018948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801894a:	f7ff fa85 	bl	8017e58 <__retarget_lock_release_recursive>
 801894e:	e7e9      	b.n	8018924 <_vfiprintf_r+0x4c>
 8018950:	2300      	movs	r3, #0
 8018952:	9309      	str	r3, [sp, #36]	; 0x24
 8018954:	2320      	movs	r3, #32
 8018956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801895a:	f8cd 800c 	str.w	r8, [sp, #12]
 801895e:	2330      	movs	r3, #48	; 0x30
 8018960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018b24 <_vfiprintf_r+0x24c>
 8018964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018968:	f04f 0901 	mov.w	r9, #1
 801896c:	4623      	mov	r3, r4
 801896e:	469a      	mov	sl, r3
 8018970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018974:	b10a      	cbz	r2, 801897a <_vfiprintf_r+0xa2>
 8018976:	2a25      	cmp	r2, #37	; 0x25
 8018978:	d1f9      	bne.n	801896e <_vfiprintf_r+0x96>
 801897a:	ebba 0b04 	subs.w	fp, sl, r4
 801897e:	d00b      	beq.n	8018998 <_vfiprintf_r+0xc0>
 8018980:	465b      	mov	r3, fp
 8018982:	4622      	mov	r2, r4
 8018984:	4629      	mov	r1, r5
 8018986:	4630      	mov	r0, r6
 8018988:	f7ff ff93 	bl	80188b2 <__sfputs_r>
 801898c:	3001      	adds	r0, #1
 801898e:	f000 80aa 	beq.w	8018ae6 <_vfiprintf_r+0x20e>
 8018992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018994:	445a      	add	r2, fp
 8018996:	9209      	str	r2, [sp, #36]	; 0x24
 8018998:	f89a 3000 	ldrb.w	r3, [sl]
 801899c:	2b00      	cmp	r3, #0
 801899e:	f000 80a2 	beq.w	8018ae6 <_vfiprintf_r+0x20e>
 80189a2:	2300      	movs	r3, #0
 80189a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80189a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189ac:	f10a 0a01 	add.w	sl, sl, #1
 80189b0:	9304      	str	r3, [sp, #16]
 80189b2:	9307      	str	r3, [sp, #28]
 80189b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80189b8:	931a      	str	r3, [sp, #104]	; 0x68
 80189ba:	4654      	mov	r4, sl
 80189bc:	2205      	movs	r2, #5
 80189be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189c2:	4858      	ldr	r0, [pc, #352]	; (8018b24 <_vfiprintf_r+0x24c>)
 80189c4:	f7e7 fc24 	bl	8000210 <memchr>
 80189c8:	9a04      	ldr	r2, [sp, #16]
 80189ca:	b9d8      	cbnz	r0, 8018a04 <_vfiprintf_r+0x12c>
 80189cc:	06d1      	lsls	r1, r2, #27
 80189ce:	bf44      	itt	mi
 80189d0:	2320      	movmi	r3, #32
 80189d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80189d6:	0713      	lsls	r3, r2, #28
 80189d8:	bf44      	itt	mi
 80189da:	232b      	movmi	r3, #43	; 0x2b
 80189dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80189e0:	f89a 3000 	ldrb.w	r3, [sl]
 80189e4:	2b2a      	cmp	r3, #42	; 0x2a
 80189e6:	d015      	beq.n	8018a14 <_vfiprintf_r+0x13c>
 80189e8:	9a07      	ldr	r2, [sp, #28]
 80189ea:	4654      	mov	r4, sl
 80189ec:	2000      	movs	r0, #0
 80189ee:	f04f 0c0a 	mov.w	ip, #10
 80189f2:	4621      	mov	r1, r4
 80189f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80189f8:	3b30      	subs	r3, #48	; 0x30
 80189fa:	2b09      	cmp	r3, #9
 80189fc:	d94e      	bls.n	8018a9c <_vfiprintf_r+0x1c4>
 80189fe:	b1b0      	cbz	r0, 8018a2e <_vfiprintf_r+0x156>
 8018a00:	9207      	str	r2, [sp, #28]
 8018a02:	e014      	b.n	8018a2e <_vfiprintf_r+0x156>
 8018a04:	eba0 0308 	sub.w	r3, r0, r8
 8018a08:	fa09 f303 	lsl.w	r3, r9, r3
 8018a0c:	4313      	orrs	r3, r2
 8018a0e:	9304      	str	r3, [sp, #16]
 8018a10:	46a2      	mov	sl, r4
 8018a12:	e7d2      	b.n	80189ba <_vfiprintf_r+0xe2>
 8018a14:	9b03      	ldr	r3, [sp, #12]
 8018a16:	1d19      	adds	r1, r3, #4
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	9103      	str	r1, [sp, #12]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	bfbb      	ittet	lt
 8018a20:	425b      	neglt	r3, r3
 8018a22:	f042 0202 	orrlt.w	r2, r2, #2
 8018a26:	9307      	strge	r3, [sp, #28]
 8018a28:	9307      	strlt	r3, [sp, #28]
 8018a2a:	bfb8      	it	lt
 8018a2c:	9204      	strlt	r2, [sp, #16]
 8018a2e:	7823      	ldrb	r3, [r4, #0]
 8018a30:	2b2e      	cmp	r3, #46	; 0x2e
 8018a32:	d10c      	bne.n	8018a4e <_vfiprintf_r+0x176>
 8018a34:	7863      	ldrb	r3, [r4, #1]
 8018a36:	2b2a      	cmp	r3, #42	; 0x2a
 8018a38:	d135      	bne.n	8018aa6 <_vfiprintf_r+0x1ce>
 8018a3a:	9b03      	ldr	r3, [sp, #12]
 8018a3c:	1d1a      	adds	r2, r3, #4
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	9203      	str	r2, [sp, #12]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	bfb8      	it	lt
 8018a46:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018a4a:	3402      	adds	r4, #2
 8018a4c:	9305      	str	r3, [sp, #20]
 8018a4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018b34 <_vfiprintf_r+0x25c>
 8018a52:	7821      	ldrb	r1, [r4, #0]
 8018a54:	2203      	movs	r2, #3
 8018a56:	4650      	mov	r0, sl
 8018a58:	f7e7 fbda 	bl	8000210 <memchr>
 8018a5c:	b140      	cbz	r0, 8018a70 <_vfiprintf_r+0x198>
 8018a5e:	2340      	movs	r3, #64	; 0x40
 8018a60:	eba0 000a 	sub.w	r0, r0, sl
 8018a64:	fa03 f000 	lsl.w	r0, r3, r0
 8018a68:	9b04      	ldr	r3, [sp, #16]
 8018a6a:	4303      	orrs	r3, r0
 8018a6c:	3401      	adds	r4, #1
 8018a6e:	9304      	str	r3, [sp, #16]
 8018a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a74:	482c      	ldr	r0, [pc, #176]	; (8018b28 <_vfiprintf_r+0x250>)
 8018a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018a7a:	2206      	movs	r2, #6
 8018a7c:	f7e7 fbc8 	bl	8000210 <memchr>
 8018a80:	2800      	cmp	r0, #0
 8018a82:	d03f      	beq.n	8018b04 <_vfiprintf_r+0x22c>
 8018a84:	4b29      	ldr	r3, [pc, #164]	; (8018b2c <_vfiprintf_r+0x254>)
 8018a86:	bb1b      	cbnz	r3, 8018ad0 <_vfiprintf_r+0x1f8>
 8018a88:	9b03      	ldr	r3, [sp, #12]
 8018a8a:	3307      	adds	r3, #7
 8018a8c:	f023 0307 	bic.w	r3, r3, #7
 8018a90:	3308      	adds	r3, #8
 8018a92:	9303      	str	r3, [sp, #12]
 8018a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a96:	443b      	add	r3, r7
 8018a98:	9309      	str	r3, [sp, #36]	; 0x24
 8018a9a:	e767      	b.n	801896c <_vfiprintf_r+0x94>
 8018a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018aa0:	460c      	mov	r4, r1
 8018aa2:	2001      	movs	r0, #1
 8018aa4:	e7a5      	b.n	80189f2 <_vfiprintf_r+0x11a>
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	3401      	adds	r4, #1
 8018aaa:	9305      	str	r3, [sp, #20]
 8018aac:	4619      	mov	r1, r3
 8018aae:	f04f 0c0a 	mov.w	ip, #10
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ab8:	3a30      	subs	r2, #48	; 0x30
 8018aba:	2a09      	cmp	r2, #9
 8018abc:	d903      	bls.n	8018ac6 <_vfiprintf_r+0x1ee>
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d0c5      	beq.n	8018a4e <_vfiprintf_r+0x176>
 8018ac2:	9105      	str	r1, [sp, #20]
 8018ac4:	e7c3      	b.n	8018a4e <_vfiprintf_r+0x176>
 8018ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8018aca:	4604      	mov	r4, r0
 8018acc:	2301      	movs	r3, #1
 8018ace:	e7f0      	b.n	8018ab2 <_vfiprintf_r+0x1da>
 8018ad0:	ab03      	add	r3, sp, #12
 8018ad2:	9300      	str	r3, [sp, #0]
 8018ad4:	462a      	mov	r2, r5
 8018ad6:	4b16      	ldr	r3, [pc, #88]	; (8018b30 <_vfiprintf_r+0x258>)
 8018ad8:	a904      	add	r1, sp, #16
 8018ada:	4630      	mov	r0, r6
 8018adc:	f7fd fe04 	bl	80166e8 <_printf_float>
 8018ae0:	4607      	mov	r7, r0
 8018ae2:	1c78      	adds	r0, r7, #1
 8018ae4:	d1d6      	bne.n	8018a94 <_vfiprintf_r+0x1bc>
 8018ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ae8:	07d9      	lsls	r1, r3, #31
 8018aea:	d405      	bmi.n	8018af8 <_vfiprintf_r+0x220>
 8018aec:	89ab      	ldrh	r3, [r5, #12]
 8018aee:	059a      	lsls	r2, r3, #22
 8018af0:	d402      	bmi.n	8018af8 <_vfiprintf_r+0x220>
 8018af2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018af4:	f7ff f9b0 	bl	8017e58 <__retarget_lock_release_recursive>
 8018af8:	89ab      	ldrh	r3, [r5, #12]
 8018afa:	065b      	lsls	r3, r3, #25
 8018afc:	f53f af12 	bmi.w	8018924 <_vfiprintf_r+0x4c>
 8018b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b02:	e711      	b.n	8018928 <_vfiprintf_r+0x50>
 8018b04:	ab03      	add	r3, sp, #12
 8018b06:	9300      	str	r3, [sp, #0]
 8018b08:	462a      	mov	r2, r5
 8018b0a:	4b09      	ldr	r3, [pc, #36]	; (8018b30 <_vfiprintf_r+0x258>)
 8018b0c:	a904      	add	r1, sp, #16
 8018b0e:	4630      	mov	r0, r6
 8018b10:	f7fe f88e 	bl	8016c30 <_printf_i>
 8018b14:	e7e4      	b.n	8018ae0 <_vfiprintf_r+0x208>
 8018b16:	bf00      	nop
 8018b18:	0801995c 	.word	0x0801995c
 8018b1c:	0801997c 	.word	0x0801997c
 8018b20:	0801993c 	.word	0x0801993c
 8018b24:	08019b04 	.word	0x08019b04
 8018b28:	08019b0e 	.word	0x08019b0e
 8018b2c:	080166e9 	.word	0x080166e9
 8018b30:	080188b3 	.word	0x080188b3
 8018b34:	08019b0a 	.word	0x08019b0a

08018b38 <__sread>:
 8018b38:	b510      	push	{r4, lr}
 8018b3a:	460c      	mov	r4, r1
 8018b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b40:	f000 faba 	bl	80190b8 <_read_r>
 8018b44:	2800      	cmp	r0, #0
 8018b46:	bfab      	itete	ge
 8018b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8018b4c:	181b      	addge	r3, r3, r0
 8018b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018b52:	bfac      	ite	ge
 8018b54:	6563      	strge	r3, [r4, #84]	; 0x54
 8018b56:	81a3      	strhlt	r3, [r4, #12]
 8018b58:	bd10      	pop	{r4, pc}

08018b5a <__swrite>:
 8018b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b5e:	461f      	mov	r7, r3
 8018b60:	898b      	ldrh	r3, [r1, #12]
 8018b62:	05db      	lsls	r3, r3, #23
 8018b64:	4605      	mov	r5, r0
 8018b66:	460c      	mov	r4, r1
 8018b68:	4616      	mov	r6, r2
 8018b6a:	d505      	bpl.n	8018b78 <__swrite+0x1e>
 8018b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b70:	2302      	movs	r3, #2
 8018b72:	2200      	movs	r2, #0
 8018b74:	f000 f9de 	bl	8018f34 <_lseek_r>
 8018b78:	89a3      	ldrh	r3, [r4, #12]
 8018b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018b82:	81a3      	strh	r3, [r4, #12]
 8018b84:	4632      	mov	r2, r6
 8018b86:	463b      	mov	r3, r7
 8018b88:	4628      	mov	r0, r5
 8018b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b8e:	f000 b877 	b.w	8018c80 <_write_r>

08018b92 <__sseek>:
 8018b92:	b510      	push	{r4, lr}
 8018b94:	460c      	mov	r4, r1
 8018b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b9a:	f000 f9cb 	bl	8018f34 <_lseek_r>
 8018b9e:	1c43      	adds	r3, r0, #1
 8018ba0:	89a3      	ldrh	r3, [r4, #12]
 8018ba2:	bf15      	itete	ne
 8018ba4:	6560      	strne	r0, [r4, #84]	; 0x54
 8018ba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018baa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018bae:	81a3      	strheq	r3, [r4, #12]
 8018bb0:	bf18      	it	ne
 8018bb2:	81a3      	strhne	r3, [r4, #12]
 8018bb4:	bd10      	pop	{r4, pc}

08018bb6 <__sclose>:
 8018bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bba:	f000 b8e9 	b.w	8018d90 <_close_r>
	...

08018bc0 <__swbuf_r>:
 8018bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bc2:	460e      	mov	r6, r1
 8018bc4:	4614      	mov	r4, r2
 8018bc6:	4605      	mov	r5, r0
 8018bc8:	b118      	cbz	r0, 8018bd2 <__swbuf_r+0x12>
 8018bca:	6983      	ldr	r3, [r0, #24]
 8018bcc:	b90b      	cbnz	r3, 8018bd2 <__swbuf_r+0x12>
 8018bce:	f7ff f88d 	bl	8017cec <__sinit>
 8018bd2:	4b21      	ldr	r3, [pc, #132]	; (8018c58 <__swbuf_r+0x98>)
 8018bd4:	429c      	cmp	r4, r3
 8018bd6:	d12b      	bne.n	8018c30 <__swbuf_r+0x70>
 8018bd8:	686c      	ldr	r4, [r5, #4]
 8018bda:	69a3      	ldr	r3, [r4, #24]
 8018bdc:	60a3      	str	r3, [r4, #8]
 8018bde:	89a3      	ldrh	r3, [r4, #12]
 8018be0:	071a      	lsls	r2, r3, #28
 8018be2:	d52f      	bpl.n	8018c44 <__swbuf_r+0x84>
 8018be4:	6923      	ldr	r3, [r4, #16]
 8018be6:	b36b      	cbz	r3, 8018c44 <__swbuf_r+0x84>
 8018be8:	6923      	ldr	r3, [r4, #16]
 8018bea:	6820      	ldr	r0, [r4, #0]
 8018bec:	1ac0      	subs	r0, r0, r3
 8018bee:	6963      	ldr	r3, [r4, #20]
 8018bf0:	b2f6      	uxtb	r6, r6
 8018bf2:	4283      	cmp	r3, r0
 8018bf4:	4637      	mov	r7, r6
 8018bf6:	dc04      	bgt.n	8018c02 <__swbuf_r+0x42>
 8018bf8:	4621      	mov	r1, r4
 8018bfa:	4628      	mov	r0, r5
 8018bfc:	f000 f95e 	bl	8018ebc <_fflush_r>
 8018c00:	bb30      	cbnz	r0, 8018c50 <__swbuf_r+0x90>
 8018c02:	68a3      	ldr	r3, [r4, #8]
 8018c04:	3b01      	subs	r3, #1
 8018c06:	60a3      	str	r3, [r4, #8]
 8018c08:	6823      	ldr	r3, [r4, #0]
 8018c0a:	1c5a      	adds	r2, r3, #1
 8018c0c:	6022      	str	r2, [r4, #0]
 8018c0e:	701e      	strb	r6, [r3, #0]
 8018c10:	6963      	ldr	r3, [r4, #20]
 8018c12:	3001      	adds	r0, #1
 8018c14:	4283      	cmp	r3, r0
 8018c16:	d004      	beq.n	8018c22 <__swbuf_r+0x62>
 8018c18:	89a3      	ldrh	r3, [r4, #12]
 8018c1a:	07db      	lsls	r3, r3, #31
 8018c1c:	d506      	bpl.n	8018c2c <__swbuf_r+0x6c>
 8018c1e:	2e0a      	cmp	r6, #10
 8018c20:	d104      	bne.n	8018c2c <__swbuf_r+0x6c>
 8018c22:	4621      	mov	r1, r4
 8018c24:	4628      	mov	r0, r5
 8018c26:	f000 f949 	bl	8018ebc <_fflush_r>
 8018c2a:	b988      	cbnz	r0, 8018c50 <__swbuf_r+0x90>
 8018c2c:	4638      	mov	r0, r7
 8018c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c30:	4b0a      	ldr	r3, [pc, #40]	; (8018c5c <__swbuf_r+0x9c>)
 8018c32:	429c      	cmp	r4, r3
 8018c34:	d101      	bne.n	8018c3a <__swbuf_r+0x7a>
 8018c36:	68ac      	ldr	r4, [r5, #8]
 8018c38:	e7cf      	b.n	8018bda <__swbuf_r+0x1a>
 8018c3a:	4b09      	ldr	r3, [pc, #36]	; (8018c60 <__swbuf_r+0xa0>)
 8018c3c:	429c      	cmp	r4, r3
 8018c3e:	bf08      	it	eq
 8018c40:	68ec      	ldreq	r4, [r5, #12]
 8018c42:	e7ca      	b.n	8018bda <__swbuf_r+0x1a>
 8018c44:	4621      	mov	r1, r4
 8018c46:	4628      	mov	r0, r5
 8018c48:	f000 f82c 	bl	8018ca4 <__swsetup_r>
 8018c4c:	2800      	cmp	r0, #0
 8018c4e:	d0cb      	beq.n	8018be8 <__swbuf_r+0x28>
 8018c50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018c54:	e7ea      	b.n	8018c2c <__swbuf_r+0x6c>
 8018c56:	bf00      	nop
 8018c58:	0801995c 	.word	0x0801995c
 8018c5c:	0801997c 	.word	0x0801997c
 8018c60:	0801993c 	.word	0x0801993c

08018c64 <__ascii_wctomb>:
 8018c64:	b149      	cbz	r1, 8018c7a <__ascii_wctomb+0x16>
 8018c66:	2aff      	cmp	r2, #255	; 0xff
 8018c68:	bf85      	ittet	hi
 8018c6a:	238a      	movhi	r3, #138	; 0x8a
 8018c6c:	6003      	strhi	r3, [r0, #0]
 8018c6e:	700a      	strbls	r2, [r1, #0]
 8018c70:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8018c74:	bf98      	it	ls
 8018c76:	2001      	movls	r0, #1
 8018c78:	4770      	bx	lr
 8018c7a:	4608      	mov	r0, r1
 8018c7c:	4770      	bx	lr
	...

08018c80 <_write_r>:
 8018c80:	b538      	push	{r3, r4, r5, lr}
 8018c82:	4d07      	ldr	r5, [pc, #28]	; (8018ca0 <_write_r+0x20>)
 8018c84:	4604      	mov	r4, r0
 8018c86:	4608      	mov	r0, r1
 8018c88:	4611      	mov	r1, r2
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	602a      	str	r2, [r5, #0]
 8018c8e:	461a      	mov	r2, r3
 8018c90:	f000 fad8 	bl	8019244 <_write>
 8018c94:	1c43      	adds	r3, r0, #1
 8018c96:	d102      	bne.n	8018c9e <_write_r+0x1e>
 8018c98:	682b      	ldr	r3, [r5, #0]
 8018c9a:	b103      	cbz	r3, 8018c9e <_write_r+0x1e>
 8018c9c:	6023      	str	r3, [r4, #0]
 8018c9e:	bd38      	pop	{r3, r4, r5, pc}
 8018ca0:	20002f6c 	.word	0x20002f6c

08018ca4 <__swsetup_r>:
 8018ca4:	4b32      	ldr	r3, [pc, #200]	; (8018d70 <__swsetup_r+0xcc>)
 8018ca6:	b570      	push	{r4, r5, r6, lr}
 8018ca8:	681d      	ldr	r5, [r3, #0]
 8018caa:	4606      	mov	r6, r0
 8018cac:	460c      	mov	r4, r1
 8018cae:	b125      	cbz	r5, 8018cba <__swsetup_r+0x16>
 8018cb0:	69ab      	ldr	r3, [r5, #24]
 8018cb2:	b913      	cbnz	r3, 8018cba <__swsetup_r+0x16>
 8018cb4:	4628      	mov	r0, r5
 8018cb6:	f7ff f819 	bl	8017cec <__sinit>
 8018cba:	4b2e      	ldr	r3, [pc, #184]	; (8018d74 <__swsetup_r+0xd0>)
 8018cbc:	429c      	cmp	r4, r3
 8018cbe:	d10f      	bne.n	8018ce0 <__swsetup_r+0x3c>
 8018cc0:	686c      	ldr	r4, [r5, #4]
 8018cc2:	89a3      	ldrh	r3, [r4, #12]
 8018cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018cc8:	0719      	lsls	r1, r3, #28
 8018cca:	d42c      	bmi.n	8018d26 <__swsetup_r+0x82>
 8018ccc:	06dd      	lsls	r5, r3, #27
 8018cce:	d411      	bmi.n	8018cf4 <__swsetup_r+0x50>
 8018cd0:	2309      	movs	r3, #9
 8018cd2:	6033      	str	r3, [r6, #0]
 8018cd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018cd8:	81a3      	strh	r3, [r4, #12]
 8018cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018cde:	e03e      	b.n	8018d5e <__swsetup_r+0xba>
 8018ce0:	4b25      	ldr	r3, [pc, #148]	; (8018d78 <__swsetup_r+0xd4>)
 8018ce2:	429c      	cmp	r4, r3
 8018ce4:	d101      	bne.n	8018cea <__swsetup_r+0x46>
 8018ce6:	68ac      	ldr	r4, [r5, #8]
 8018ce8:	e7eb      	b.n	8018cc2 <__swsetup_r+0x1e>
 8018cea:	4b24      	ldr	r3, [pc, #144]	; (8018d7c <__swsetup_r+0xd8>)
 8018cec:	429c      	cmp	r4, r3
 8018cee:	bf08      	it	eq
 8018cf0:	68ec      	ldreq	r4, [r5, #12]
 8018cf2:	e7e6      	b.n	8018cc2 <__swsetup_r+0x1e>
 8018cf4:	0758      	lsls	r0, r3, #29
 8018cf6:	d512      	bpl.n	8018d1e <__swsetup_r+0x7a>
 8018cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018cfa:	b141      	cbz	r1, 8018d0e <__swsetup_r+0x6a>
 8018cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d00:	4299      	cmp	r1, r3
 8018d02:	d002      	beq.n	8018d0a <__swsetup_r+0x66>
 8018d04:	4630      	mov	r0, r6
 8018d06:	f7fd fb6f 	bl	80163e8 <_free_r>
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8018d0e:	89a3      	ldrh	r3, [r4, #12]
 8018d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018d14:	81a3      	strh	r3, [r4, #12]
 8018d16:	2300      	movs	r3, #0
 8018d18:	6063      	str	r3, [r4, #4]
 8018d1a:	6923      	ldr	r3, [r4, #16]
 8018d1c:	6023      	str	r3, [r4, #0]
 8018d1e:	89a3      	ldrh	r3, [r4, #12]
 8018d20:	f043 0308 	orr.w	r3, r3, #8
 8018d24:	81a3      	strh	r3, [r4, #12]
 8018d26:	6923      	ldr	r3, [r4, #16]
 8018d28:	b94b      	cbnz	r3, 8018d3e <__swsetup_r+0x9a>
 8018d2a:	89a3      	ldrh	r3, [r4, #12]
 8018d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018d34:	d003      	beq.n	8018d3e <__swsetup_r+0x9a>
 8018d36:	4621      	mov	r1, r4
 8018d38:	4630      	mov	r0, r6
 8018d3a:	f000 f933 	bl	8018fa4 <__smakebuf_r>
 8018d3e:	89a0      	ldrh	r0, [r4, #12]
 8018d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018d44:	f010 0301 	ands.w	r3, r0, #1
 8018d48:	d00a      	beq.n	8018d60 <__swsetup_r+0xbc>
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	60a3      	str	r3, [r4, #8]
 8018d4e:	6963      	ldr	r3, [r4, #20]
 8018d50:	425b      	negs	r3, r3
 8018d52:	61a3      	str	r3, [r4, #24]
 8018d54:	6923      	ldr	r3, [r4, #16]
 8018d56:	b943      	cbnz	r3, 8018d6a <__swsetup_r+0xc6>
 8018d58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018d5c:	d1ba      	bne.n	8018cd4 <__swsetup_r+0x30>
 8018d5e:	bd70      	pop	{r4, r5, r6, pc}
 8018d60:	0781      	lsls	r1, r0, #30
 8018d62:	bf58      	it	pl
 8018d64:	6963      	ldrpl	r3, [r4, #20]
 8018d66:	60a3      	str	r3, [r4, #8]
 8018d68:	e7f4      	b.n	8018d54 <__swsetup_r+0xb0>
 8018d6a:	2000      	movs	r0, #0
 8018d6c:	e7f7      	b.n	8018d5e <__swsetup_r+0xba>
 8018d6e:	bf00      	nop
 8018d70:	20000184 	.word	0x20000184
 8018d74:	0801995c 	.word	0x0801995c
 8018d78:	0801997c 	.word	0x0801997c
 8018d7c:	0801993c 	.word	0x0801993c

08018d80 <abort>:
 8018d80:	b508      	push	{r3, lr}
 8018d82:	2006      	movs	r0, #6
 8018d84:	f000 f9d2 	bl	801912c <raise>
 8018d88:	2001      	movs	r0, #1
 8018d8a:	f000 fa63 	bl	8019254 <_exit>
	...

08018d90 <_close_r>:
 8018d90:	b538      	push	{r3, r4, r5, lr}
 8018d92:	4d06      	ldr	r5, [pc, #24]	; (8018dac <_close_r+0x1c>)
 8018d94:	2300      	movs	r3, #0
 8018d96:	4604      	mov	r4, r0
 8018d98:	4608      	mov	r0, r1
 8018d9a:	602b      	str	r3, [r5, #0]
 8018d9c:	f000 fa0c 	bl	80191b8 <_close>
 8018da0:	1c43      	adds	r3, r0, #1
 8018da2:	d102      	bne.n	8018daa <_close_r+0x1a>
 8018da4:	682b      	ldr	r3, [r5, #0]
 8018da6:	b103      	cbz	r3, 8018daa <_close_r+0x1a>
 8018da8:	6023      	str	r3, [r4, #0]
 8018daa:	bd38      	pop	{r3, r4, r5, pc}
 8018dac:	20002f6c 	.word	0x20002f6c

08018db0 <__sflush_r>:
 8018db0:	898a      	ldrh	r2, [r1, #12]
 8018db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018db6:	4605      	mov	r5, r0
 8018db8:	0710      	lsls	r0, r2, #28
 8018dba:	460c      	mov	r4, r1
 8018dbc:	d458      	bmi.n	8018e70 <__sflush_r+0xc0>
 8018dbe:	684b      	ldr	r3, [r1, #4]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	dc05      	bgt.n	8018dd0 <__sflush_r+0x20>
 8018dc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	dc02      	bgt.n	8018dd0 <__sflush_r+0x20>
 8018dca:	2000      	movs	r0, #0
 8018dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018dd2:	2e00      	cmp	r6, #0
 8018dd4:	d0f9      	beq.n	8018dca <__sflush_r+0x1a>
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018ddc:	682f      	ldr	r7, [r5, #0]
 8018dde:	602b      	str	r3, [r5, #0]
 8018de0:	d032      	beq.n	8018e48 <__sflush_r+0x98>
 8018de2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018de4:	89a3      	ldrh	r3, [r4, #12]
 8018de6:	075a      	lsls	r2, r3, #29
 8018de8:	d505      	bpl.n	8018df6 <__sflush_r+0x46>
 8018dea:	6863      	ldr	r3, [r4, #4]
 8018dec:	1ac0      	subs	r0, r0, r3
 8018dee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018df0:	b10b      	cbz	r3, 8018df6 <__sflush_r+0x46>
 8018df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018df4:	1ac0      	subs	r0, r0, r3
 8018df6:	2300      	movs	r3, #0
 8018df8:	4602      	mov	r2, r0
 8018dfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018dfc:	6a21      	ldr	r1, [r4, #32]
 8018dfe:	4628      	mov	r0, r5
 8018e00:	47b0      	blx	r6
 8018e02:	1c43      	adds	r3, r0, #1
 8018e04:	89a3      	ldrh	r3, [r4, #12]
 8018e06:	d106      	bne.n	8018e16 <__sflush_r+0x66>
 8018e08:	6829      	ldr	r1, [r5, #0]
 8018e0a:	291d      	cmp	r1, #29
 8018e0c:	d82c      	bhi.n	8018e68 <__sflush_r+0xb8>
 8018e0e:	4a2a      	ldr	r2, [pc, #168]	; (8018eb8 <__sflush_r+0x108>)
 8018e10:	40ca      	lsrs	r2, r1
 8018e12:	07d6      	lsls	r6, r2, #31
 8018e14:	d528      	bpl.n	8018e68 <__sflush_r+0xb8>
 8018e16:	2200      	movs	r2, #0
 8018e18:	6062      	str	r2, [r4, #4]
 8018e1a:	04d9      	lsls	r1, r3, #19
 8018e1c:	6922      	ldr	r2, [r4, #16]
 8018e1e:	6022      	str	r2, [r4, #0]
 8018e20:	d504      	bpl.n	8018e2c <__sflush_r+0x7c>
 8018e22:	1c42      	adds	r2, r0, #1
 8018e24:	d101      	bne.n	8018e2a <__sflush_r+0x7a>
 8018e26:	682b      	ldr	r3, [r5, #0]
 8018e28:	b903      	cbnz	r3, 8018e2c <__sflush_r+0x7c>
 8018e2a:	6560      	str	r0, [r4, #84]	; 0x54
 8018e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e2e:	602f      	str	r7, [r5, #0]
 8018e30:	2900      	cmp	r1, #0
 8018e32:	d0ca      	beq.n	8018dca <__sflush_r+0x1a>
 8018e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e38:	4299      	cmp	r1, r3
 8018e3a:	d002      	beq.n	8018e42 <__sflush_r+0x92>
 8018e3c:	4628      	mov	r0, r5
 8018e3e:	f7fd fad3 	bl	80163e8 <_free_r>
 8018e42:	2000      	movs	r0, #0
 8018e44:	6360      	str	r0, [r4, #52]	; 0x34
 8018e46:	e7c1      	b.n	8018dcc <__sflush_r+0x1c>
 8018e48:	6a21      	ldr	r1, [r4, #32]
 8018e4a:	2301      	movs	r3, #1
 8018e4c:	4628      	mov	r0, r5
 8018e4e:	47b0      	blx	r6
 8018e50:	1c41      	adds	r1, r0, #1
 8018e52:	d1c7      	bne.n	8018de4 <__sflush_r+0x34>
 8018e54:	682b      	ldr	r3, [r5, #0]
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d0c4      	beq.n	8018de4 <__sflush_r+0x34>
 8018e5a:	2b1d      	cmp	r3, #29
 8018e5c:	d001      	beq.n	8018e62 <__sflush_r+0xb2>
 8018e5e:	2b16      	cmp	r3, #22
 8018e60:	d101      	bne.n	8018e66 <__sflush_r+0xb6>
 8018e62:	602f      	str	r7, [r5, #0]
 8018e64:	e7b1      	b.n	8018dca <__sflush_r+0x1a>
 8018e66:	89a3      	ldrh	r3, [r4, #12]
 8018e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e6c:	81a3      	strh	r3, [r4, #12]
 8018e6e:	e7ad      	b.n	8018dcc <__sflush_r+0x1c>
 8018e70:	690f      	ldr	r7, [r1, #16]
 8018e72:	2f00      	cmp	r7, #0
 8018e74:	d0a9      	beq.n	8018dca <__sflush_r+0x1a>
 8018e76:	0793      	lsls	r3, r2, #30
 8018e78:	680e      	ldr	r6, [r1, #0]
 8018e7a:	bf08      	it	eq
 8018e7c:	694b      	ldreq	r3, [r1, #20]
 8018e7e:	600f      	str	r7, [r1, #0]
 8018e80:	bf18      	it	ne
 8018e82:	2300      	movne	r3, #0
 8018e84:	eba6 0807 	sub.w	r8, r6, r7
 8018e88:	608b      	str	r3, [r1, #8]
 8018e8a:	f1b8 0f00 	cmp.w	r8, #0
 8018e8e:	dd9c      	ble.n	8018dca <__sflush_r+0x1a>
 8018e90:	6a21      	ldr	r1, [r4, #32]
 8018e92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018e94:	4643      	mov	r3, r8
 8018e96:	463a      	mov	r2, r7
 8018e98:	4628      	mov	r0, r5
 8018e9a:	47b0      	blx	r6
 8018e9c:	2800      	cmp	r0, #0
 8018e9e:	dc06      	bgt.n	8018eae <__sflush_r+0xfe>
 8018ea0:	89a3      	ldrh	r3, [r4, #12]
 8018ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018ea6:	81a3      	strh	r3, [r4, #12]
 8018ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018eac:	e78e      	b.n	8018dcc <__sflush_r+0x1c>
 8018eae:	4407      	add	r7, r0
 8018eb0:	eba8 0800 	sub.w	r8, r8, r0
 8018eb4:	e7e9      	b.n	8018e8a <__sflush_r+0xda>
 8018eb6:	bf00      	nop
 8018eb8:	20400001 	.word	0x20400001

08018ebc <_fflush_r>:
 8018ebc:	b538      	push	{r3, r4, r5, lr}
 8018ebe:	690b      	ldr	r3, [r1, #16]
 8018ec0:	4605      	mov	r5, r0
 8018ec2:	460c      	mov	r4, r1
 8018ec4:	b913      	cbnz	r3, 8018ecc <_fflush_r+0x10>
 8018ec6:	2500      	movs	r5, #0
 8018ec8:	4628      	mov	r0, r5
 8018eca:	bd38      	pop	{r3, r4, r5, pc}
 8018ecc:	b118      	cbz	r0, 8018ed6 <_fflush_r+0x1a>
 8018ece:	6983      	ldr	r3, [r0, #24]
 8018ed0:	b90b      	cbnz	r3, 8018ed6 <_fflush_r+0x1a>
 8018ed2:	f7fe ff0b 	bl	8017cec <__sinit>
 8018ed6:	4b14      	ldr	r3, [pc, #80]	; (8018f28 <_fflush_r+0x6c>)
 8018ed8:	429c      	cmp	r4, r3
 8018eda:	d11b      	bne.n	8018f14 <_fflush_r+0x58>
 8018edc:	686c      	ldr	r4, [r5, #4]
 8018ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d0ef      	beq.n	8018ec6 <_fflush_r+0xa>
 8018ee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018ee8:	07d0      	lsls	r0, r2, #31
 8018eea:	d404      	bmi.n	8018ef6 <_fflush_r+0x3a>
 8018eec:	0599      	lsls	r1, r3, #22
 8018eee:	d402      	bmi.n	8018ef6 <_fflush_r+0x3a>
 8018ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ef2:	f7fe ffb0 	bl	8017e56 <__retarget_lock_acquire_recursive>
 8018ef6:	4628      	mov	r0, r5
 8018ef8:	4621      	mov	r1, r4
 8018efa:	f7ff ff59 	bl	8018db0 <__sflush_r>
 8018efe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018f00:	07da      	lsls	r2, r3, #31
 8018f02:	4605      	mov	r5, r0
 8018f04:	d4e0      	bmi.n	8018ec8 <_fflush_r+0xc>
 8018f06:	89a3      	ldrh	r3, [r4, #12]
 8018f08:	059b      	lsls	r3, r3, #22
 8018f0a:	d4dd      	bmi.n	8018ec8 <_fflush_r+0xc>
 8018f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018f0e:	f7fe ffa3 	bl	8017e58 <__retarget_lock_release_recursive>
 8018f12:	e7d9      	b.n	8018ec8 <_fflush_r+0xc>
 8018f14:	4b05      	ldr	r3, [pc, #20]	; (8018f2c <_fflush_r+0x70>)
 8018f16:	429c      	cmp	r4, r3
 8018f18:	d101      	bne.n	8018f1e <_fflush_r+0x62>
 8018f1a:	68ac      	ldr	r4, [r5, #8]
 8018f1c:	e7df      	b.n	8018ede <_fflush_r+0x22>
 8018f1e:	4b04      	ldr	r3, [pc, #16]	; (8018f30 <_fflush_r+0x74>)
 8018f20:	429c      	cmp	r4, r3
 8018f22:	bf08      	it	eq
 8018f24:	68ec      	ldreq	r4, [r5, #12]
 8018f26:	e7da      	b.n	8018ede <_fflush_r+0x22>
 8018f28:	0801995c 	.word	0x0801995c
 8018f2c:	0801997c 	.word	0x0801997c
 8018f30:	0801993c 	.word	0x0801993c

08018f34 <_lseek_r>:
 8018f34:	b538      	push	{r3, r4, r5, lr}
 8018f36:	4d07      	ldr	r5, [pc, #28]	; (8018f54 <_lseek_r+0x20>)
 8018f38:	4604      	mov	r4, r0
 8018f3a:	4608      	mov	r0, r1
 8018f3c:	4611      	mov	r1, r2
 8018f3e:	2200      	movs	r2, #0
 8018f40:	602a      	str	r2, [r5, #0]
 8018f42:	461a      	mov	r2, r3
 8018f44:	f000 f960 	bl	8019208 <_lseek>
 8018f48:	1c43      	adds	r3, r0, #1
 8018f4a:	d102      	bne.n	8018f52 <_lseek_r+0x1e>
 8018f4c:	682b      	ldr	r3, [r5, #0]
 8018f4e:	b103      	cbz	r3, 8018f52 <_lseek_r+0x1e>
 8018f50:	6023      	str	r3, [r4, #0]
 8018f52:	bd38      	pop	{r3, r4, r5, pc}
 8018f54:	20002f6c 	.word	0x20002f6c

08018f58 <__swhatbuf_r>:
 8018f58:	b570      	push	{r4, r5, r6, lr}
 8018f5a:	460e      	mov	r6, r1
 8018f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f60:	2900      	cmp	r1, #0
 8018f62:	b096      	sub	sp, #88	; 0x58
 8018f64:	4614      	mov	r4, r2
 8018f66:	461d      	mov	r5, r3
 8018f68:	da08      	bge.n	8018f7c <__swhatbuf_r+0x24>
 8018f6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018f6e:	2200      	movs	r2, #0
 8018f70:	602a      	str	r2, [r5, #0]
 8018f72:	061a      	lsls	r2, r3, #24
 8018f74:	d410      	bmi.n	8018f98 <__swhatbuf_r+0x40>
 8018f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018f7a:	e00e      	b.n	8018f9a <__swhatbuf_r+0x42>
 8018f7c:	466a      	mov	r2, sp
 8018f7e:	f000 f8f1 	bl	8019164 <_fstat_r>
 8018f82:	2800      	cmp	r0, #0
 8018f84:	dbf1      	blt.n	8018f6a <__swhatbuf_r+0x12>
 8018f86:	9a01      	ldr	r2, [sp, #4]
 8018f88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018f8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018f90:	425a      	negs	r2, r3
 8018f92:	415a      	adcs	r2, r3
 8018f94:	602a      	str	r2, [r5, #0]
 8018f96:	e7ee      	b.n	8018f76 <__swhatbuf_r+0x1e>
 8018f98:	2340      	movs	r3, #64	; 0x40
 8018f9a:	2000      	movs	r0, #0
 8018f9c:	6023      	str	r3, [r4, #0]
 8018f9e:	b016      	add	sp, #88	; 0x58
 8018fa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08018fa4 <__smakebuf_r>:
 8018fa4:	898b      	ldrh	r3, [r1, #12]
 8018fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018fa8:	079d      	lsls	r5, r3, #30
 8018faa:	4606      	mov	r6, r0
 8018fac:	460c      	mov	r4, r1
 8018fae:	d507      	bpl.n	8018fc0 <__smakebuf_r+0x1c>
 8018fb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018fb4:	6023      	str	r3, [r4, #0]
 8018fb6:	6123      	str	r3, [r4, #16]
 8018fb8:	2301      	movs	r3, #1
 8018fba:	6163      	str	r3, [r4, #20]
 8018fbc:	b002      	add	sp, #8
 8018fbe:	bd70      	pop	{r4, r5, r6, pc}
 8018fc0:	ab01      	add	r3, sp, #4
 8018fc2:	466a      	mov	r2, sp
 8018fc4:	f7ff ffc8 	bl	8018f58 <__swhatbuf_r>
 8018fc8:	9900      	ldr	r1, [sp, #0]
 8018fca:	4605      	mov	r5, r0
 8018fcc:	4630      	mov	r0, r6
 8018fce:	f7fd fa77 	bl	80164c0 <_malloc_r>
 8018fd2:	b948      	cbnz	r0, 8018fe8 <__smakebuf_r+0x44>
 8018fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fd8:	059a      	lsls	r2, r3, #22
 8018fda:	d4ef      	bmi.n	8018fbc <__smakebuf_r+0x18>
 8018fdc:	f023 0303 	bic.w	r3, r3, #3
 8018fe0:	f043 0302 	orr.w	r3, r3, #2
 8018fe4:	81a3      	strh	r3, [r4, #12]
 8018fe6:	e7e3      	b.n	8018fb0 <__smakebuf_r+0xc>
 8018fe8:	4b0d      	ldr	r3, [pc, #52]	; (8019020 <__smakebuf_r+0x7c>)
 8018fea:	62b3      	str	r3, [r6, #40]	; 0x28
 8018fec:	89a3      	ldrh	r3, [r4, #12]
 8018fee:	6020      	str	r0, [r4, #0]
 8018ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018ff4:	81a3      	strh	r3, [r4, #12]
 8018ff6:	9b00      	ldr	r3, [sp, #0]
 8018ff8:	6163      	str	r3, [r4, #20]
 8018ffa:	9b01      	ldr	r3, [sp, #4]
 8018ffc:	6120      	str	r0, [r4, #16]
 8018ffe:	b15b      	cbz	r3, 8019018 <__smakebuf_r+0x74>
 8019000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019004:	4630      	mov	r0, r6
 8019006:	f000 f8bf 	bl	8019188 <_isatty_r>
 801900a:	b128      	cbz	r0, 8019018 <__smakebuf_r+0x74>
 801900c:	89a3      	ldrh	r3, [r4, #12]
 801900e:	f023 0303 	bic.w	r3, r3, #3
 8019012:	f043 0301 	orr.w	r3, r3, #1
 8019016:	81a3      	strh	r3, [r4, #12]
 8019018:	89a0      	ldrh	r0, [r4, #12]
 801901a:	4305      	orrs	r5, r0
 801901c:	81a5      	strh	r5, [r4, #12]
 801901e:	e7cd      	b.n	8018fbc <__smakebuf_r+0x18>
 8019020:	08017c85 	.word	0x08017c85

08019024 <memmove>:
 8019024:	4288      	cmp	r0, r1
 8019026:	b510      	push	{r4, lr}
 8019028:	eb01 0402 	add.w	r4, r1, r2
 801902c:	d902      	bls.n	8019034 <memmove+0x10>
 801902e:	4284      	cmp	r4, r0
 8019030:	4623      	mov	r3, r4
 8019032:	d807      	bhi.n	8019044 <memmove+0x20>
 8019034:	1e43      	subs	r3, r0, #1
 8019036:	42a1      	cmp	r1, r4
 8019038:	d008      	beq.n	801904c <memmove+0x28>
 801903a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801903e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019042:	e7f8      	b.n	8019036 <memmove+0x12>
 8019044:	4402      	add	r2, r0
 8019046:	4601      	mov	r1, r0
 8019048:	428a      	cmp	r2, r1
 801904a:	d100      	bne.n	801904e <memmove+0x2a>
 801904c:	bd10      	pop	{r4, pc}
 801904e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019056:	e7f7      	b.n	8019048 <memmove+0x24>

08019058 <_realloc_r>:
 8019058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801905c:	4680      	mov	r8, r0
 801905e:	4614      	mov	r4, r2
 8019060:	460e      	mov	r6, r1
 8019062:	b921      	cbnz	r1, 801906e <_realloc_r+0x16>
 8019064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019068:	4611      	mov	r1, r2
 801906a:	f7fd ba29 	b.w	80164c0 <_malloc_r>
 801906e:	b92a      	cbnz	r2, 801907c <_realloc_r+0x24>
 8019070:	f7fd f9ba 	bl	80163e8 <_free_r>
 8019074:	4625      	mov	r5, r4
 8019076:	4628      	mov	r0, r5
 8019078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801907c:	f000 f894 	bl	80191a8 <_malloc_usable_size_r>
 8019080:	4284      	cmp	r4, r0
 8019082:	4607      	mov	r7, r0
 8019084:	d802      	bhi.n	801908c <_realloc_r+0x34>
 8019086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801908a:	d812      	bhi.n	80190b2 <_realloc_r+0x5a>
 801908c:	4621      	mov	r1, r4
 801908e:	4640      	mov	r0, r8
 8019090:	f7fd fa16 	bl	80164c0 <_malloc_r>
 8019094:	4605      	mov	r5, r0
 8019096:	2800      	cmp	r0, #0
 8019098:	d0ed      	beq.n	8019076 <_realloc_r+0x1e>
 801909a:	42bc      	cmp	r4, r7
 801909c:	4622      	mov	r2, r4
 801909e:	4631      	mov	r1, r6
 80190a0:	bf28      	it	cs
 80190a2:	463a      	movcs	r2, r7
 80190a4:	f7fd f98a 	bl	80163bc <memcpy>
 80190a8:	4631      	mov	r1, r6
 80190aa:	4640      	mov	r0, r8
 80190ac:	f7fd f99c 	bl	80163e8 <_free_r>
 80190b0:	e7e1      	b.n	8019076 <_realloc_r+0x1e>
 80190b2:	4635      	mov	r5, r6
 80190b4:	e7df      	b.n	8019076 <_realloc_r+0x1e>
	...

080190b8 <_read_r>:
 80190b8:	b538      	push	{r3, r4, r5, lr}
 80190ba:	4d07      	ldr	r5, [pc, #28]	; (80190d8 <_read_r+0x20>)
 80190bc:	4604      	mov	r4, r0
 80190be:	4608      	mov	r0, r1
 80190c0:	4611      	mov	r1, r2
 80190c2:	2200      	movs	r2, #0
 80190c4:	602a      	str	r2, [r5, #0]
 80190c6:	461a      	mov	r2, r3
 80190c8:	f000 f8a6 	bl	8019218 <_read>
 80190cc:	1c43      	adds	r3, r0, #1
 80190ce:	d102      	bne.n	80190d6 <_read_r+0x1e>
 80190d0:	682b      	ldr	r3, [r5, #0]
 80190d2:	b103      	cbz	r3, 80190d6 <_read_r+0x1e>
 80190d4:	6023      	str	r3, [r4, #0]
 80190d6:	bd38      	pop	{r3, r4, r5, pc}
 80190d8:	20002f6c 	.word	0x20002f6c

080190dc <_raise_r>:
 80190dc:	291f      	cmp	r1, #31
 80190de:	b538      	push	{r3, r4, r5, lr}
 80190e0:	4604      	mov	r4, r0
 80190e2:	460d      	mov	r5, r1
 80190e4:	d904      	bls.n	80190f0 <_raise_r+0x14>
 80190e6:	2316      	movs	r3, #22
 80190e8:	6003      	str	r3, [r0, #0]
 80190ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190ee:	bd38      	pop	{r3, r4, r5, pc}
 80190f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80190f2:	b112      	cbz	r2, 80190fa <_raise_r+0x1e>
 80190f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80190f8:	b94b      	cbnz	r3, 801910e <_raise_r+0x32>
 80190fa:	4620      	mov	r0, r4
 80190fc:	f000 f830 	bl	8019160 <_getpid_r>
 8019100:	462a      	mov	r2, r5
 8019102:	4601      	mov	r1, r0
 8019104:	4620      	mov	r0, r4
 8019106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801910a:	f000 b817 	b.w	801913c <_kill_r>
 801910e:	2b01      	cmp	r3, #1
 8019110:	d00a      	beq.n	8019128 <_raise_r+0x4c>
 8019112:	1c59      	adds	r1, r3, #1
 8019114:	d103      	bne.n	801911e <_raise_r+0x42>
 8019116:	2316      	movs	r3, #22
 8019118:	6003      	str	r3, [r0, #0]
 801911a:	2001      	movs	r0, #1
 801911c:	e7e7      	b.n	80190ee <_raise_r+0x12>
 801911e:	2400      	movs	r4, #0
 8019120:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019124:	4628      	mov	r0, r5
 8019126:	4798      	blx	r3
 8019128:	2000      	movs	r0, #0
 801912a:	e7e0      	b.n	80190ee <_raise_r+0x12>

0801912c <raise>:
 801912c:	4b02      	ldr	r3, [pc, #8]	; (8019138 <raise+0xc>)
 801912e:	4601      	mov	r1, r0
 8019130:	6818      	ldr	r0, [r3, #0]
 8019132:	f7ff bfd3 	b.w	80190dc <_raise_r>
 8019136:	bf00      	nop
 8019138:	20000184 	.word	0x20000184

0801913c <_kill_r>:
 801913c:	b538      	push	{r3, r4, r5, lr}
 801913e:	4d07      	ldr	r5, [pc, #28]	; (801915c <_kill_r+0x20>)
 8019140:	2300      	movs	r3, #0
 8019142:	4604      	mov	r4, r0
 8019144:	4608      	mov	r0, r1
 8019146:	4611      	mov	r1, r2
 8019148:	602b      	str	r3, [r5, #0]
 801914a:	f000 f855 	bl	80191f8 <_kill>
 801914e:	1c43      	adds	r3, r0, #1
 8019150:	d102      	bne.n	8019158 <_kill_r+0x1c>
 8019152:	682b      	ldr	r3, [r5, #0]
 8019154:	b103      	cbz	r3, 8019158 <_kill_r+0x1c>
 8019156:	6023      	str	r3, [r4, #0]
 8019158:	bd38      	pop	{r3, r4, r5, pc}
 801915a:	bf00      	nop
 801915c:	20002f6c 	.word	0x20002f6c

08019160 <_getpid_r>:
 8019160:	f000 b83a 	b.w	80191d8 <_getpid>

08019164 <_fstat_r>:
 8019164:	b538      	push	{r3, r4, r5, lr}
 8019166:	4d07      	ldr	r5, [pc, #28]	; (8019184 <_fstat_r+0x20>)
 8019168:	2300      	movs	r3, #0
 801916a:	4604      	mov	r4, r0
 801916c:	4608      	mov	r0, r1
 801916e:	4611      	mov	r1, r2
 8019170:	602b      	str	r3, [r5, #0]
 8019172:	f000 f829 	bl	80191c8 <_fstat>
 8019176:	1c43      	adds	r3, r0, #1
 8019178:	d102      	bne.n	8019180 <_fstat_r+0x1c>
 801917a:	682b      	ldr	r3, [r5, #0]
 801917c:	b103      	cbz	r3, 8019180 <_fstat_r+0x1c>
 801917e:	6023      	str	r3, [r4, #0]
 8019180:	bd38      	pop	{r3, r4, r5, pc}
 8019182:	bf00      	nop
 8019184:	20002f6c 	.word	0x20002f6c

08019188 <_isatty_r>:
 8019188:	b538      	push	{r3, r4, r5, lr}
 801918a:	4d06      	ldr	r5, [pc, #24]	; (80191a4 <_isatty_r+0x1c>)
 801918c:	2300      	movs	r3, #0
 801918e:	4604      	mov	r4, r0
 8019190:	4608      	mov	r0, r1
 8019192:	602b      	str	r3, [r5, #0]
 8019194:	f000 f828 	bl	80191e8 <_isatty>
 8019198:	1c43      	adds	r3, r0, #1
 801919a:	d102      	bne.n	80191a2 <_isatty_r+0x1a>
 801919c:	682b      	ldr	r3, [r5, #0]
 801919e:	b103      	cbz	r3, 80191a2 <_isatty_r+0x1a>
 80191a0:	6023      	str	r3, [r4, #0]
 80191a2:	bd38      	pop	{r3, r4, r5, pc}
 80191a4:	20002f6c 	.word	0x20002f6c

080191a8 <_malloc_usable_size_r>:
 80191a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80191ac:	1f18      	subs	r0, r3, #4
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	bfbc      	itt	lt
 80191b2:	580b      	ldrlt	r3, [r1, r0]
 80191b4:	18c0      	addlt	r0, r0, r3
 80191b6:	4770      	bx	lr

080191b8 <_close>:
 80191b8:	4b02      	ldr	r3, [pc, #8]	; (80191c4 <_close+0xc>)
 80191ba:	2258      	movs	r2, #88	; 0x58
 80191bc:	601a      	str	r2, [r3, #0]
 80191be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80191c2:	4770      	bx	lr
 80191c4:	20002f6c 	.word	0x20002f6c

080191c8 <_fstat>:
 80191c8:	4b02      	ldr	r3, [pc, #8]	; (80191d4 <_fstat+0xc>)
 80191ca:	2258      	movs	r2, #88	; 0x58
 80191cc:	601a      	str	r2, [r3, #0]
 80191ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80191d2:	4770      	bx	lr
 80191d4:	20002f6c 	.word	0x20002f6c

080191d8 <_getpid>:
 80191d8:	4b02      	ldr	r3, [pc, #8]	; (80191e4 <_getpid+0xc>)
 80191da:	2258      	movs	r2, #88	; 0x58
 80191dc:	601a      	str	r2, [r3, #0]
 80191de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80191e2:	4770      	bx	lr
 80191e4:	20002f6c 	.word	0x20002f6c

080191e8 <_isatty>:
 80191e8:	4b02      	ldr	r3, [pc, #8]	; (80191f4 <_isatty+0xc>)
 80191ea:	2258      	movs	r2, #88	; 0x58
 80191ec:	601a      	str	r2, [r3, #0]
 80191ee:	2000      	movs	r0, #0
 80191f0:	4770      	bx	lr
 80191f2:	bf00      	nop
 80191f4:	20002f6c 	.word	0x20002f6c

080191f8 <_kill>:
 80191f8:	4b02      	ldr	r3, [pc, #8]	; (8019204 <_kill+0xc>)
 80191fa:	2258      	movs	r2, #88	; 0x58
 80191fc:	601a      	str	r2, [r3, #0]
 80191fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019202:	4770      	bx	lr
 8019204:	20002f6c 	.word	0x20002f6c

08019208 <_lseek>:
 8019208:	4b02      	ldr	r3, [pc, #8]	; (8019214 <_lseek+0xc>)
 801920a:	2258      	movs	r2, #88	; 0x58
 801920c:	601a      	str	r2, [r3, #0]
 801920e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019212:	4770      	bx	lr
 8019214:	20002f6c 	.word	0x20002f6c

08019218 <_read>:
 8019218:	4b02      	ldr	r3, [pc, #8]	; (8019224 <_read+0xc>)
 801921a:	2258      	movs	r2, #88	; 0x58
 801921c:	601a      	str	r2, [r3, #0]
 801921e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019222:	4770      	bx	lr
 8019224:	20002f6c 	.word	0x20002f6c

08019228 <_sbrk>:
 8019228:	4a04      	ldr	r2, [pc, #16]	; (801923c <_sbrk+0x14>)
 801922a:	6811      	ldr	r1, [r2, #0]
 801922c:	4603      	mov	r3, r0
 801922e:	b909      	cbnz	r1, 8019234 <_sbrk+0xc>
 8019230:	4903      	ldr	r1, [pc, #12]	; (8019240 <_sbrk+0x18>)
 8019232:	6011      	str	r1, [r2, #0]
 8019234:	6810      	ldr	r0, [r2, #0]
 8019236:	4403      	add	r3, r0
 8019238:	6013      	str	r3, [r2, #0]
 801923a:	4770      	bx	lr
 801923c:	20002f70 	.word	0x20002f70
 8019240:	20002f78 	.word	0x20002f78

08019244 <_write>:
 8019244:	4b02      	ldr	r3, [pc, #8]	; (8019250 <_write+0xc>)
 8019246:	2258      	movs	r2, #88	; 0x58
 8019248:	601a      	str	r2, [r3, #0]
 801924a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801924e:	4770      	bx	lr
 8019250:	20002f6c 	.word	0x20002f6c

08019254 <_exit>:
 8019254:	e7fe      	b.n	8019254 <_exit>
	...

08019258 <_init>:
 8019258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801925a:	bf00      	nop
 801925c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801925e:	bc08      	pop	{r3}
 8019260:	469e      	mov	lr, r3
 8019262:	4770      	bx	lr

08019264 <_fini>:
 8019264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019266:	bf00      	nop
 8019268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801926a:	bc08      	pop	{r3}
 801926c:	469e      	mov	lr, r3
 801926e:	4770      	bx	lr
