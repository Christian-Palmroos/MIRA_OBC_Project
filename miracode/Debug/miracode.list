
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f150  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800f310  0800f310  0001f310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4c8  0800f4c8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4c8  0800f4c8  0001f4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4d0  0800f4d0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4d0  0800f4d0  0001f4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4d4  0800f4d4  0001f4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f4d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000203c  200001e4  0800f6bc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20002220  0800f6bc  00022220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029377  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052bc  00000000  00000000  0004958b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002108  00000000  00000000  0004e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee0  00000000  00000000  00050950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031c78  00000000  00000000  00052830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b40f  00000000  00000000  000844a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a18b  00000000  00000000  000af8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c9a42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009470  00000000  00000000  001c9a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  001d2f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001d2fa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f2f8 	.word	0x0800f2f8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	0800f2f8 	.word	0x0800f2f8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	f5ad 6d9a 	sub.w	sp, sp, #1232	; 0x4d0
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	UINT byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[50] = "STM32 FATFS works great!"; /* File write buffer. */
 80005ac:	4b6b      	ldr	r3, [pc, #428]	; (800075c <main+0x1b8>)
 80005ae:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 80005b2:	461d      	mov	r5, r3
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005bc:	c403      	stmia	r4!, {r0, r1}
 80005be:	7022      	strb	r2, [r4, #0]
 80005c0:	f207 4361 	addw	r3, r7, #1121	; 0x461
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
 80005d0:	615a      	str	r2, [r3, #20]
 80005d2:	761a      	strb	r2, [r3, #24]
	uint8_t UART2_RxBuffer[272];

	// For USB Transmission
	USBD_HandleTypeDef hUsbDeviceFS;
	uint8_t USB_Tx_STATUS;
	uint8_t *data = "Hello!\n";
 80005d4:	4b62      	ldr	r3, [pc, #392]	; (8000760 <main+0x1bc>)
 80005d6:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc

	uint8_t USB_TxBuffer_FS;

	uint32_t USB_TxBuffer_Length = 1000;
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 ff30 	bl	8001446 <HAL_Init>

  /* USER CODE BEGIN Init */

  // SD reader
  MX_FATFS_Init();
 80005e6:	f00b fa1b 	bl	800ba20 <MX_FATFS_Init>

  HAL_UART_MspInit(&huart1);
 80005ea:	485e      	ldr	r0, [pc, #376]	; (8000764 <main+0x1c0>)
 80005ec:	f000 fdb0 	bl	8001150 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart2);
 80005f0:	485d      	ldr	r0, [pc, #372]	; (8000768 <main+0x1c4>)
 80005f2:	f000 fdad 	bl	8001150 <HAL_UART_MspInit>
//   USBD_TxBuffer_Status = USBD_CDC_SetTxBuffer(&hUsbDeviceFS, USB_TxBuffer_FS, USB_TxBuffer_Length);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f8c1 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fb15 	bl	8000c28 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005fe:	f000 f923 	bl	8000848 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000602:	f000 f961 	bl	80008c8 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8000606:	f000 f99f 	bl	8000948 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800060a:	f000 f9bf 	bl	800098c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800060e:	f000 fa71 	bl	8000af4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000612:	f000 fabd 	bl	8000b90 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000616:	f00b fa03 	bl	800ba20 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800061a:	f00d f88b 	bl	800d734 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 800061e:	f000 f9f3 	bl	8000a08 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000622:	f000 f8fd 	bl	8000820 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  volatile unsigned tmp;

  // Setting the buffer for UART2 data reading
  rxBuffer = rxBuffer1;
 8000626:	4b51      	ldr	r3, [pc, #324]	; (800076c <main+0x1c8>)
 8000628:	4a51      	ldr	r2, [pc, #324]	; (8000770 <main+0x1cc>)
 800062a:	601a      	str	r2, [r3, #0]
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 800062c:	4b4e      	ldr	r3, [pc, #312]	; (8000768 <main+0x1c4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000634:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8000638:	e853 3f00 	ldrex	r3, [r3]
 800063c:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
   return(result);
 8000640:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800064c:	4b46      	ldr	r3, [pc, #280]	; (8000768 <main+0x1c4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8000656:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800065a:	f8c7 24b0 	str.w	r2, [r7, #1200]	; 0x4b0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800065e:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 8000662:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 8000666:	e841 2300 	strex	r3, r2, [r1]
 800066a:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
   return(result);
 800066e:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1da      	bne.n	800062c <main+0x88>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 8000676:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <main+0x1c4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800067e:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8000682:	e853 3f00 	ldrex	r3, [r3]
 8000686:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
   return(result);
 800068a:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8000696:	4b34      	ldr	r3, [pc, #208]	; (8000768 <main+0x1c4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 80006a0:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 80006a4:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006a8:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 80006ac:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80006b0:	e841 2300 	strex	r3, r2, [r1]
 80006b4:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
   return(result);
 80006b8:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1da      	bne.n	8000676 <main+0xd2>
  ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <main+0x1c4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80006c8:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80006cc:	e853 3f00 	ldrex	r3, [r3]
 80006d0:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
   return(result);
 80006d4:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80006d8:	f043 0320 	orr.w	r3, r3, #32
 80006dc:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <main+0x1c4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80006ea:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 80006ee:	f8c7 2488 	str.w	r2, [r7, #1160]	; 0x488
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006f2:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 80006f6:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 80006fa:	e841 2300 	strex	r3, r2, [r1]
 80006fe:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
   return(result);
 8000702:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1da      	bne.n	80006c0 <main+0x11c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  tmp = data_ready;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <main+0x1d0>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8000712:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8000716:	601a      	str	r2, [r3, #0]

	  // Check here if data is ready
	  if (1)
	  {

		  if (rxBuffer == rxBuffer1)
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <main+0x1c8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <main+0x1cc>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d110      	bne.n	8000744 <main+0x1a0>
		  {
			  USBD_TxBuffer_Status = USBD_CDC_SetTxBuffer (&hUsbDeviceFS, rxBuffer2, 120);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2278      	movs	r2, #120	; 0x78
 8000726:	4914      	ldr	r1, [pc, #80]	; (8000778 <main+0x1d4>)
 8000728:	4618      	mov	r0, r3
 800072a:	f00b fdac 	bl	800c286 <USBD_CDC_SetTxBuffer>
 800072e:	4603      	mov	r3, r0
 8000730:	f887 34ba 	strb.w	r3, [r7, #1210]	; 0x4ba

			  // Saving the transmit status for debugging
			  USB_Tx_STATUS = CDC_Transmit_FS (rxBuffer2, 120);
 8000734:	2178      	movs	r1, #120	; 0x78
 8000736:	4810      	ldr	r0, [pc, #64]	; (8000778 <main+0x1d4>)
 8000738:	f00d f8ba 	bl	800d8b0 <CDC_Transmit_FS>
 800073c:	4603      	mov	r3, r0
 800073e:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
 8000742:	e006      	b.n	8000752 <main+0x1ae>

		  }
		  else
		  {
			  // Saving the transmit status for debugging
			  USB_Tx_STATUS = CDC_Transmit_FS (rxBuffer1, 120);
 8000744:	2178      	movs	r1, #120	; 0x78
 8000746:	480a      	ldr	r0, [pc, #40]	; (8000770 <main+0x1cc>)
 8000748:	f00d f8b2 	bl	800d8b0 <CDC_Transmit_FS>
 800074c:	4603      	mov	r3, r0
 800074e:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb

		  }

		  data_ready = 0;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <main+0x1d0>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
	  tmp = data_ready;
 8000758:	e7d7      	b.n	800070a <main+0x166>
 800075a:	bf00      	nop
 800075c:	0800f318 	.word	0x0800f318
 8000760:	0800f310 	.word	0x0800f310
 8000764:	200003d8 	.word	0x200003d8
 8000768:	20000468 	.word	0x20000468
 800076c:	200005e8 	.word	0x200005e8
 8000770:	200004f8 	.word	0x200004f8
 8000774:	200005f0 	.word	0x200005f0
 8000778:	20000570 	.word	0x20000570

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b096      	sub	sp, #88	; 0x58
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2244      	movs	r2, #68	; 0x44
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f00d fde0 	bl	800e350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800079e:	2000      	movs	r0, #0
 80007a0:	f002 fda4 	bl	80032ec <HAL_PWREx_ControlVoltageScaling>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x32>
  {
    Error_Handler();
 80007aa:	f000 fb1b 	bl	8000de4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007ae:	2321      	movs	r3, #33	; 0x21
 80007b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c0:	2303      	movs	r3, #3
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80007c8:	231e      	movs	r3, #30
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV20;
 80007cc:	2314      	movs	r3, #20
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fe39 	bl	8003454 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x70>
  {
    Error_Handler();
 80007e8:	f000 fafc 	bl	8000de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2303      	movs	r3, #3
 80007f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	2105      	movs	r1, #5
 8000804:	4618      	mov	r0, r3
 8000806:	f003 fa3f 	bl	8003c88 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000810:	f000 fae8 	bl	8000de4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000814:	f003 fc36 	bl	8004084 <HAL_RCC_EnableCSS>
}
 8000818:	bf00      	nop
 800081a:	3758      	adds	r7, #88	; 0x58
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	201a      	movs	r0, #26
 800082a:	f000 ff80 	bl	800172e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800082e:	201a      	movs	r0, #26
 8000830:	f000 ff99 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2026      	movs	r0, #38	; 0x26
 800083a:	f000 ff78 	bl	800172e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800083e:	2026      	movs	r0, #38	; 0x26
 8000840:	f000 ff91 	bl	8001766 <HAL_NVIC_EnableIRQ>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_I2C1_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <MX_I2C1_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_I2C1_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <MX_I2C1_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_I2C1_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_I2C1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <MX_I2C1_Init+0x74>)
 8000884:	f001 fa20 	bl	8001cc8 <HAL_I2C_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 faa9 	bl	8000de4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <MX_I2C1_Init+0x74>)
 8000896:	f001 faa6 	bl	8001de6 <HAL_I2CEx_ConfigAnalogFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 faa0 	bl	8000de4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_I2C1_Init+0x74>)
 80008a8:	f001 fae8 	bl	8001e7c <HAL_I2CEx_ConfigDigitalFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 fa97 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000200 	.word	0x20000200
 80008c0:	40005400 	.word	0x40005400
 80008c4:	307075b1 	.word	0x307075b1

080008c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_I2C2_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_I2C2_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_I2C2_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <MX_I2C2_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_I2C2_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_I2C2_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_I2C2_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_I2C2_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_I2C2_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_I2C2_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2C2_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <MX_I2C2_Init+0x74>)
 8000904:	f001 f9e0 	bl	8001cc8 <HAL_I2C_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800090e:	f000 fa69 	bl	8000de4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <MX_I2C2_Init+0x74>)
 8000916:	f001 fa66 	bl	8001de6 <HAL_I2CEx_ConfigAnalogFilter>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000920:	f000 fa60 	bl	8000de4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_I2C2_Init+0x74>)
 8000928:	f001 faa8 	bl	8001e7c <HAL_I2CEx_ConfigDigitalFilter>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 fa57 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000254 	.word	0x20000254
 8000940:	40005800 	.word	0x40005800
 8000944:	307075b1 	.word	0x307075b1

08000948 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_SDMMC1_SD_Init+0x3c>)
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <MX_SDMMC1_SD_Init+0x40>)
 8000950:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_SDMMC1_SD_Init+0x3c>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <MX_SDMMC1_SD_Init+0x3c>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_SDMMC1_SD_Init+0x3c>)
 8000960:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000964:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_SDMMC1_SD_Init+0x3c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <MX_SDMMC1_SD_Init+0x3c>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <MX_SDMMC1_SD_Init+0x3c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200002a8 	.word	0x200002a8
 8000988:	50062400 	.word	0x50062400

0800098c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_SPI1_Init+0x74>)
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <MX_SPI1_Init+0x78>)
 8000994:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_SPI1_Init+0x74>)
 8000998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800099c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009da:	2207      	movs	r2, #7
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009e6:	2208      	movs	r2, #8
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_SPI1_Init+0x74>)
 80009ec:	f006 fdc1 	bl	8007572 <HAL_SPI_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 f9f5 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000328 	.word	0x20000328
 8000a04:	40013000 	.word	0x40013000

08000a08 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b092      	sub	sp, #72	; 0x48
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a22:	463b      	mov	r3, r7
 8000a24:	222c      	movs	r2, #44	; 0x2c
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f00d fc91 	bl	800e350 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <MX_TIM17_Init+0xe4>)
 8000a30:	4a2f      	ldr	r2, [pc, #188]	; (8000af0 <MX_TIM17_Init+0xe8>)
 8000a32:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <MX_TIM17_Init+0xe4>)
 8000a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a3a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <MX_TIM17_Init+0xe4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 11999;
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <MX_TIM17_Init+0xe4>)
 8000a44:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000a48:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4a:	4b28      	ldr	r3, [pc, #160]	; (8000aec <MX_TIM17_Init+0xe4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <MX_TIM17_Init+0xe4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <MX_TIM17_Init+0xe4>)
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a5c:	4823      	ldr	r0, [pc, #140]	; (8000aec <MX_TIM17_Init+0xe4>)
 8000a5e:	f006 fe2b 	bl	80076b8 <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8000a68:	f000 f9bc 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000a6c:	481f      	ldr	r0, [pc, #124]	; (8000aec <MX_TIM17_Init+0xe4>)
 8000a6e:	f006 fe7a 	bl	8007766 <HAL_TIM_OC_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8000a78:	f000 f9b4 	bl	8000de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4812      	ldr	r0, [pc, #72]	; (8000aec <MX_TIM17_Init+0xe4>)
 8000aa2:	f006 ffe1 	bl	8007a68 <HAL_TIM_OC_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8000aac:	f000 f99a 	bl	8000de4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	; (8000aec <MX_TIM17_Init+0xe4>)
 8000ad4:	f007 fbe4 	bl	80082a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000ade:	f000 f981 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	3748      	adds	r7, #72	; 0x48
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000038c 	.word	0x2000038c
 8000af0:	40014800 	.word	0x40014800

08000af4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000afa:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <MX_USART1_UART_Init+0x94>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115000;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b00:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <MX_USART1_UART_Init+0x98>)
 8000b02:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b18:	220c      	movs	r2, #12
 8000b1a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b3a:	4812      	ldr	r0, [pc, #72]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b3c:	f007 fc4c 	bl	80083d8 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b46:	f000 f94d 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b4e:	f008 fd7a 	bl	8009646 <HAL_UARTEx_SetTxFifoThreshold>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000b58:	f000 f944 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4809      	ldr	r0, [pc, #36]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b60:	f008 fdaf 	bl	80096c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000b6a:	f000 f93b 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART1_UART_Init+0x90>)
 8000b70:	f008 fd30 	bl	80095d4 <HAL_UARTEx_DisableFifoMode>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000b7a:	f000 f933 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200003d8 	.word	0x200003d8
 8000b88:	40013800 	.word	0x40013800
 8000b8c:	0001c138 	.word	0x0001c138

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000b96:	4a23      	ldr	r2, [pc, #140]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000b9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd8:	4811      	ldr	r0, [pc, #68]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bda:	f007 fbfd 	bl	80083d8 <HAL_UART_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000be4:	f000 f8fe 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be8:	2100      	movs	r1, #0
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bec:	f008 fd2b 	bl	8009646 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bf6:	f000 f8f5 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4808      	ldr	r0, [pc, #32]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000bfe:	f008 fd60 	bl	80096c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c08:	f000 f8ec 	bl	8000de4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_USART2_UART_Init+0x90>)
 8000c0e:	f008 fce1 	bl	80095d4 <HAL_UARTEx_DisableFifoMode>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c18:	f000 f8e4 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000468 	.word	0x20000468
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	; 0x30
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3e:	4b64      	ldr	r3, [pc, #400]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a63      	ldr	r2, [pc, #396]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c44:	f043 0310 	orr.w	r3, r3, #16
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b61      	ldr	r3, [pc, #388]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0310 	and.w	r3, r3, #16
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b5e      	ldr	r3, [pc, #376]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a5d      	ldr	r2, [pc, #372]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b5b      	ldr	r3, [pc, #364]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	4b58      	ldr	r3, [pc, #352]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a57      	ldr	r2, [pc, #348]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b55      	ldr	r3, [pc, #340]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b52      	ldr	r3, [pc, #328]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a51      	ldr	r2, [pc, #324]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b4f      	ldr	r3, [pc, #316]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b4c      	ldr	r3, [pc, #304]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a4b      	ldr	r2, [pc, #300]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b49      	ldr	r3, [pc, #292]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b46      	ldr	r3, [pc, #280]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a45      	ldr	r2, [pc, #276]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b43      	ldr	r3, [pc, #268]	; (8000dd0 <MX_GPIO_Init+0x1a8>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f641 013c 	movw	r1, #6204	; 0x183c
 8000cd4:	483f      	ldr	r0, [pc, #252]	; (8000dd4 <MX_GPIO_Init+0x1ac>)
 8000cd6:	f000 ffc5 	bl	8001c64 <HAL_GPIO_WritePin>
                          |MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2130      	movs	r1, #48	; 0x30
 8000cde:	483e      	ldr	r0, [pc, #248]	; (8000dd8 <MX_GPIO_Init+0x1b0>)
 8000ce0:	f000 ffc0 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2178      	movs	r1, #120	; 0x78
 8000ce8:	483c      	ldr	r0, [pc, #240]	; (8000ddc <MX_GPIO_Init+0x1b4>)
 8000cea:	f000 ffbb 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
  GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 8000cee:	f641 033c 	movw	r3, #6204	; 0x183c
 8000cf2:	61fb      	str	r3, [r7, #28]
                          |MIRA_EN_PWR_Pin|OCPEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4833      	ldr	r0, [pc, #204]	; (8000dd4 <MX_GPIO_Init+0x1ac>)
 8000d08:	f000 fe02 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_INT_Pin */
  GPIO_InitStruct.Pin = CHG_INT_Pin;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	482d      	ldr	r0, [pc, #180]	; (8000dd8 <MX_GPIO_Init+0x1b0>)
 8000d22:	f000 fdf5 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIG0_Pin */
  GPIO_InitStruct.Pin = LORA_DIG0_Pin;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LORA_DIG0_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3c:	f000 fde8 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8000d40:	2330      	movs	r3, #48	; 0x30
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4820      	ldr	r0, [pc, #128]	; (8000dd8 <MX_GPIO_Init+0x1b0>)
 8000d58:	f000 fdda 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCPFAULT_Pin */
  GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8000d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4818      	ldr	r0, [pc, #96]	; (8000dd4 <MX_GPIO_Init+0x1ac>)
 8000d72:	f000 fdcd 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = CARD_DETECT_Pin;
 8000d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f000 fdbf 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000d92:	2378      	movs	r3, #120	; 0x78
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_GPIO_Init+0x1b4>)
 8000daa:	f000 fdb1 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWERGOOD_Pin */
  GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8000dae:	2320      	movs	r3, #32
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <MX_GPIO_Init+0x1b8>)
 8000dc2:	f000 fda5 	bl	8001910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3730      	adds	r7, #48	; 0x30
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48001000 	.word	0x48001000
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	48000c00 	.word	0x48000c00
 8000de0:	48000400 	.word	0x48000400

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error_Handler() called");
 8000dec:	4801      	ldr	r0, [pc, #4]	; (8000df4 <Error_Handler+0x10>)
 8000dee:	f00d fab7 	bl	800e360 <iprintf>
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <Error_Handler+0xe>
 8000df4:	0800f34c 	.word	0x0800f34c

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_MspInit+0x44>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <HAL_MspInit+0x44>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_MspInit+0x44>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_MspInit+0x44>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_MspInit+0x44>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e20:	6593      	str	r3, [r2, #88]	; 0x58
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_MspInit+0x44>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0b0      	sub	sp, #192	; 0xc0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0318 	add.w	r3, r7, #24
 8000e5c:	2294      	movs	r2, #148	; 0x94
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00d fa75 	bl	800e350 <memset>
  if(hi2c->Instance==I2C1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a42      	ldr	r2, [pc, #264]	; (8000f74 <HAL_I2C_MspInit+0x134>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d13b      	bne.n	8000ee8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e70:	2340      	movs	r3, #64	; 0x40
 8000e72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 f9ed 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e88:	f7ff ffac 	bl	8000de4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e90:	4a39      	ldr	r2, [pc, #228]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea4:	23c0      	movs	r3, #192	; 0xc0
 8000ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eaa:	2312      	movs	r3, #18
 8000eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	482c      	ldr	r0, [pc, #176]	; (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000eca:	f000 fd21 	bl	8001910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eda:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ee6:	e040      	b.n	8000f6a <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <HAL_I2C_MspInit+0x140>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d13b      	bne.n	8000f6a <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efa:	f107 0318 	add.w	r3, r7, #24
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 f9ac 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000f0a:	f7ff ff6b 	bl	8000de4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2e:	2312      	movs	r3, #18
 8000f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f40:	2304      	movs	r3, #4
 8000f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000f4e:	f000 fcdf 	bl	8001910 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000f58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_I2C_MspInit+0x138>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
}
 8000f6a:	bf00      	nop
 8000f6c:	37c0      	adds	r7, #192	; 0xc0
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40005400 	.word	0x40005400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	40005800 	.word	0x40005800

08000f84 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0b0      	sub	sp, #192	; 0xc0
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	2294      	movs	r2, #148	; 0x94
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00d f9d3 	bl	800e350 <memset>
  if(hsd->Instance==SDMMC1)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a33      	ldr	r2, [pc, #204]	; (800107c <HAL_SD_MspInit+0xf8>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d15f      	bne.n	8001074 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000fb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000fb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000fba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc2:	f107 0318 	add.w	r3, r7, #24
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 f948 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000fd2:	f7ff ff07 	bl	8000de4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_SD_MspInit+0xfc>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a29      	ldr	r2, [pc, #164]	; (8001080 <HAL_SD_MspInit+0xfc>)
 8000fdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b27      	ldr	r3, [pc, #156]	; (8001080 <HAL_SD_MspInit+0xfc>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <HAL_SD_MspInit+0xfc>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a23      	ldr	r2, [pc, #140]	; (8001080 <HAL_SD_MspInit+0xfc>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_SD_MspInit+0xfc>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <HAL_SD_MspInit+0xfc>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <HAL_SD_MspInit+0xfc>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_SD_MspInit+0xfc>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800101e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001038:	230c      	movs	r3, #12
 800103a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001042:	4619      	mov	r1, r3
 8001044:	480f      	ldr	r0, [pc, #60]	; (8001084 <HAL_SD_MspInit+0x100>)
 8001046:	f000 fc63 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800104a:	2304      	movs	r3, #4
 800104c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001062:	230c      	movs	r3, #12
 8001064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001068:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <HAL_SD_MspInit+0x104>)
 8001070:	f000 fc4e 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	37c0      	adds	r7, #192	; 0xc0
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	50062400 	.word	0x50062400
 8001080:	40021000 	.word	0x40021000
 8001084:	48000800 	.word	0x48000800
 8001088:	48000c00 	.word	0x48000c00

0800108c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_SPI_MspInit+0x7c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d128      	bne.n	8001100 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_SPI_MspInit+0x80>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b2:	4a16      	ldr	r2, [pc, #88]	; (800110c <HAL_SPI_MspInit+0x80>)
 80010b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_SPI_MspInit+0x80>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_SPI_MspInit+0x80>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_SPI_MspInit+0x80>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_SPI_MspInit+0x80>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010de:	23f0      	movs	r3, #240	; 0xf0
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ee:	2305      	movs	r3, #5
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f000 fc08 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40013000 	.word	0x40013000
 800110c:	40021000 	.word	0x40021000

08001110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_TIM_Base_MspInit+0x38>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d10b      	bne.n	800113a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_TIM_Base_MspInit+0x3c>)
 8001124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <HAL_TIM_Base_MspInit+0x3c>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6613      	str	r3, [r2, #96]	; 0x60
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_TIM_Base_MspInit+0x3c>)
 8001130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40014800 	.word	0x40014800
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0b0      	sub	sp, #192	; 0xc0
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	2294      	movs	r2, #148	; 0x94
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f00d f8ed 	bl	800e350 <memset>
  if(huart->Instance==USART1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a43      	ldr	r2, [pc, #268]	; (8001288 <HAL_UART_MspInit+0x138>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d13d      	bne.n	80011fc <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001184:	2300      	movs	r3, #0
 8001186:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001188:	f107 0318 	add.w	r3, r7, #24
 800118c:	4618      	mov	r0, r3
 800118e:	f003 f865 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001198:	f7ff fe24 	bl	8000de4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800119c:	4b3b      	ldr	r3, [pc, #236]	; (800128c <HAL_UART_MspInit+0x13c>)
 800119e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a0:	4a3a      	ldr	r2, [pc, #232]	; (800128c <HAL_UART_MspInit+0x13c>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a6:	6613      	str	r3, [r2, #96]	; 0x60
 80011a8:	4b38      	ldr	r3, [pc, #224]	; (800128c <HAL_UART_MspInit+0x13c>)
 80011aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b35      	ldr	r3, [pc, #212]	; (800128c <HAL_UART_MspInit+0x13c>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	4a34      	ldr	r2, [pc, #208]	; (800128c <HAL_UART_MspInit+0x13c>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c0:	4b32      	ldr	r3, [pc, #200]	; (800128c <HAL_UART_MspInit+0x13c>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80011cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e6:	2307      	movs	r3, #7
 80011e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011f0:	4619      	mov	r1, r3
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f000 fb8b 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011fa:	e040      	b.n	800127e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a23      	ldr	r2, [pc, #140]	; (8001290 <HAL_UART_MspInit+0x140>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d13b      	bne.n	800127e <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800120a:	2300      	movs	r3, #0
 800120c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	4618      	mov	r0, r3
 8001214:	f003 f822 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800121e:	f7ff fde1 	bl	8000de4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <HAL_UART_MspInit+0x13c>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_UART_MspInit+0x13c>)
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	6593      	str	r3, [r2, #88]	; 0x58
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_UART_MspInit+0x13c>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_UART_MspInit+0x13c>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a13      	ldr	r2, [pc, #76]	; (800128c <HAL_UART_MspInit+0x13c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_UART_MspInit+0x13c>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001252:	230c      	movs	r3, #12
 8001254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800126a:	2307      	movs	r3, #7
 800126c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127a:	f000 fb49 	bl	8001910 <HAL_GPIO_Init>
}
 800127e:	bf00      	nop
 8001280:	37c0      	adds	r7, #192	; 0xc0
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40013800 	.word	0x40013800
 800128c:	40021000 	.word	0x40021000
 8001290:	40004400 	.word	0x40004400

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001298:	f002 ff04 	bl	80040a4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800129c:	e7fe      	b.n	800129c <NMI_Handler+0x8>

0800129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 f904 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80012f2:	f006 fa99 	bl	8007828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000038c 	.word	0x2000038c

08001300 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    char c = huart2.Instance->RDR;
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <USART2_IRQHandler+0xa0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800130c:	b29b      	uxth	r3, r3
 800130e:	71fb      	strb	r3, [r7, #7]
    if (rxBufferPos < RXBUFSIZE - 1) { rxBuffer[rxBufferPos++] = (uint8_t) c; }
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <USART2_IRQHandler+0xa4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b76      	cmp	r3, #118	; 0x76
 8001318:	d80b      	bhi.n	8001332 <USART2_IRQHandler+0x32>
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <USART2_IRQHandler+0xa8>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <USART2_IRQHandler+0xa4>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	1c59      	adds	r1, r3, #1
 8001326:	b2c8      	uxtb	r0, r1
 8001328:	491e      	ldr	r1, [pc, #120]	; (80013a4 <USART2_IRQHandler+0xa4>)
 800132a:	7008      	strb	r0, [r1, #0]
 800132c:	4413      	add	r3, r2
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	701a      	strb	r2, [r3, #0]

    if ((c == '\r') || (c == '\n')) {
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b0d      	cmp	r3, #13
 8001336:	d002      	beq.n	800133e <USART2_IRQHandler+0x3e>
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b0a      	cmp	r3, #10
 800133c:	d125      	bne.n	800138a <USART2_IRQHandler+0x8a>
        rxBuffer[rxBufferPos] = 0;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <USART2_IRQHandler+0xa8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <USART2_IRQHandler+0xa4>)
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	4413      	add	r3, r2
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
        if (rxBufferPos > 1) {
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <USART2_IRQHandler+0xa4>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d905      	bls.n	8001364 <USART2_IRQHandler+0x64>
            data_ready |= 1;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <USART2_IRQHandler+0xac>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <USART2_IRQHandler+0xac>)
 8001362:	6013      	str	r3, [r2, #0]
        }
        rxBufferPos = 0;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <USART2_IRQHandler+0xa4>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
        if (rxBuffer == rxBuffer1) {rxBuffer = rxBuffer2;}
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <USART2_IRQHandler+0xa8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <USART2_IRQHandler+0xb0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d103      	bne.n	800137c <USART2_IRQHandler+0x7c>
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <USART2_IRQHandler+0xa8>)
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <USART2_IRQHandler+0xb4>)
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e002      	b.n	8001382 <USART2_IRQHandler+0x82>
        else {rxBuffer = rxBuffer1;}
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <USART2_IRQHandler+0xa8>)
 800137e:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <USART2_IRQHandler+0xb0>)
 8001380:	601a      	str	r2, [r3, #0]
  	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8001382:	2110      	movs	r1, #16
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <USART2_IRQHandler+0xb8>)
 8001386:	f000 fc85 	bl	8001c94 <HAL_GPIO_TogglePin>
    }
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 800138a:	2108      	movs	r1, #8
 800138c:	480a      	ldr	r0, [pc, #40]	; (80013b8 <USART2_IRQHandler+0xb8>)
 800138e:	f000 fc81 	bl	8001c94 <HAL_GPIO_TogglePin>
	  //rchar = huart2.Instance->RDR;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <USART2_IRQHandler+0xa0>)
 8001394:	f007 f870 	bl	8008478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000468 	.word	0x20000468
 80013a4:	200005ec 	.word	0x200005ec
 80013a8:	200005e8 	.word	0x200005e8
 80013ac:	200005f0 	.word	0x200005f0
 80013b0:	200004f8 	.word	0x200004f8
 80013b4:	20000570 	.word	0x20000570
 80013b8:	48000c00 	.word	0x48000c00

080013bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <OTG_FS_IRQHandler+0x10>)
 80013c2:	f000 fefa 	bl	80021ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20001ae0 	.word	0x20001ae0

080013d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <SystemInit+0x20>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <SystemInit+0x20>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800142c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f8:	f7ff ffea 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <LoopForever+0x6>)
  ldr r1, =_edata
 80013fe:	490d      	ldr	r1, [pc, #52]	; (8001434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <LoopForever+0xe>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001414:	4c0a      	ldr	r4, [pc, #40]	; (8001440 <LoopForever+0x16>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001422:	f00c ff71 	bl	800e308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001426:	f7ff f8bd 	bl	80005a4 <main>

0800142a <LoopForever>:

LoopForever:
    b LoopForever
 800142a:	e7fe      	b.n	800142a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800142c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001438:	0800f4d8 	.word	0x0800f4d8
  ldr r2, =_sbss
 800143c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001440:	20002220 	.word	0x20002220

08001444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC1_IRQHandler>

08001446 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f961 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f80e 	bl	8001478 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e001      	b.n	800146c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001468:	f7ff fcc6 	bl	8000df8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800146c:	79fb      	ldrb	r3, [r7, #7]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_InitTick+0x6c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d023      	beq.n	80014d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_InitTick+0x70>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_InitTick+0x6c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f96d 	bl	8001782 <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d809      	bhi.n	80014c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014bc:	f000 f937 	bl	800172e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_InitTick+0x74>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e007      	b.n	80014d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e004      	b.n	80014d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	e001      	b.n	80014d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000004 	.word	0x20000004

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008
 8001514:	200005f4 	.word	0x200005f4

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200005f4 	.word	0x200005f4

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4907      	ldr	r1, [pc, #28]	; (8001614 <__NVIC_EnableIRQ+0x38>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e4:	d301      	bcc.n	80016ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00f      	b.n	800170a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <SysTick_Config+0x40>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f2:	210f      	movs	r1, #15
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f8:	f7ff ff8e 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <SysTick_Config+0x40>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SysTick_Config+0x40>)
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	e000e010 	.word	0xe000e010

08001718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff29 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001740:	f7ff ff3e 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 8001744:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f7ff ff8e 	bl	800166c <NVIC_EncodePriority>
 8001750:	4602      	mov	r2, r0
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff5d 	bl	8001618 <__NVIC_SetPriority>
}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff31 	bl	80015dc <__NVIC_EnableIRQ>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffa2 	bl	80016d4 <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d008      	beq.n	80017c4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2204      	movs	r2, #4
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e040      	b.n	8001846 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 020e 	bic.w	r2, r2, #14
 80017d2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017e2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	f003 021c 	and.w	r2, r3, #28
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001810:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00c      	beq.n	8001834 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001828:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001832:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d005      	beq.n	8001876 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2204      	movs	r2, #4
 800186e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e047      	b.n	8001906 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 020e 	bic.w	r2, r2, #14
 8001884:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0201 	bic.w	r2, r2, #1
 8001894:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f003 021c 	and.w	r2, r3, #28
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	2101      	movs	r1, #1
 80018b4:	fa01 f202 	lsl.w	r2, r1, r2
 80018b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018c2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00c      	beq.n	80018e6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018e4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
    }
  }
  return status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	e166      	b.n	8001bee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2101      	movs	r1, #1
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8158 	beq.w	8001be8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d005      	beq.n	8001950 <HAL_GPIO_Init+0x40>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d130      	bne.n	80019b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001986:	2201      	movs	r2, #1
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	f003 0201 	and.w	r2, r3, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d017      	beq.n	80019ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d123      	bne.n	8001a42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	220f      	movs	r2, #15
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	6939      	ldr	r1, [r7, #16]
 8001a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0203 	and.w	r2, r3, #3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 80b2 	beq.w	8001be8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a84:	4b61      	ldr	r3, [pc, #388]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a88:	4a60      	ldr	r2, [pc, #384]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a90:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a9c:	4a5c      	ldr	r2, [pc, #368]	; (8001c10 <HAL_GPIO_Init+0x300>)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ac6:	d02b      	beq.n	8001b20 <HAL_GPIO_Init+0x210>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d025      	beq.n	8001b1c <HAL_GPIO_Init+0x20c>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a51      	ldr	r2, [pc, #324]	; (8001c18 <HAL_GPIO_Init+0x308>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d01f      	beq.n	8001b18 <HAL_GPIO_Init+0x208>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a50      	ldr	r2, [pc, #320]	; (8001c1c <HAL_GPIO_Init+0x30c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d019      	beq.n	8001b14 <HAL_GPIO_Init+0x204>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a4f      	ldr	r2, [pc, #316]	; (8001c20 <HAL_GPIO_Init+0x310>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d013      	beq.n	8001b10 <HAL_GPIO_Init+0x200>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a4e      	ldr	r2, [pc, #312]	; (8001c24 <HAL_GPIO_Init+0x314>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00d      	beq.n	8001b0c <HAL_GPIO_Init+0x1fc>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a4d      	ldr	r2, [pc, #308]	; (8001c28 <HAL_GPIO_Init+0x318>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d007      	beq.n	8001b08 <HAL_GPIO_Init+0x1f8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a4c      	ldr	r2, [pc, #304]	; (8001c2c <HAL_GPIO_Init+0x31c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_GPIO_Init+0x1f4>
 8001b00:	2307      	movs	r3, #7
 8001b02:	e00e      	b.n	8001b22 <HAL_GPIO_Init+0x212>
 8001b04:	2308      	movs	r3, #8
 8001b06:	e00c      	b.n	8001b22 <HAL_GPIO_Init+0x212>
 8001b08:	2306      	movs	r3, #6
 8001b0a:	e00a      	b.n	8001b22 <HAL_GPIO_Init+0x212>
 8001b0c:	2305      	movs	r3, #5
 8001b0e:	e008      	b.n	8001b22 <HAL_GPIO_Init+0x212>
 8001b10:	2304      	movs	r3, #4
 8001b12:	e006      	b.n	8001b22 <HAL_GPIO_Init+0x212>
 8001b14:	2303      	movs	r3, #3
 8001b16:	e004      	b.n	8001b22 <HAL_GPIO_Init+0x212>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x212>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_GPIO_Init+0x212>
 8001b20:	2300      	movs	r3, #0
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	f002 0203 	and.w	r2, r2, #3
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b32:	4937      	ldr	r1, [pc, #220]	; (8001c10 <HAL_GPIO_Init+0x300>)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b40:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b64:	4a32      	ldr	r2, [pc, #200]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b8e:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b94:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bb8:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001be2:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3301      	adds	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f47f ae91 	bne.w	8001920 <HAL_GPIO_Init+0x10>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000
 8001c14:	48000400 	.word	0x48000400
 8001c18:	48000800 	.word	0x48000800
 8001c1c:	48000c00 	.word	0x48000c00
 8001c20:	48001000 	.word	0x48001000
 8001c24:	48001400 	.word	0x48001400
 8001c28:	48001800 	.word	0x48001800
 8001c2c:	48001c00 	.word	0x48001c00
 8001c30:	40010400 	.word	0x40010400

08001c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e001      	b.n	8001c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	4613      	mov	r3, r2
 8001c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c74:	787b      	ldrb	r3, [r7, #1]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c80:	e002      	b.n	8001c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4013      	ands	r3, r2
 8001cac:	041a      	lsls	r2, r3, #16
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43d9      	mvns	r1, r3
 8001cb2:	887b      	ldrh	r3, [r7, #2]
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e081      	b.n	8001dde <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff f8a6 	bl	8000e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2224      	movs	r2, #36	; 0x24
 8001cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d107      	bne.n	8001d42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	e006      	b.n	8001d50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d104      	bne.n	8001d62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69d9      	ldr	r1, [r3, #28]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d138      	bne.n	8001e6e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e032      	b.n	8001e70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2224      	movs	r2, #36	; 0x24
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0201 	bic.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e38:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6819      	ldr	r1, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
  }
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d139      	bne.n	8001f06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e033      	b.n	8001f08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2224      	movs	r2, #36	; 0x24
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ece:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0201 	orr.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
  }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	b08f      	sub	sp, #60	; 0x3c
 8001f18:	af0a      	add	r7, sp, #40	; 0x28
 8001f1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e116      	b.n	8002154 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d106      	bne.n	8001f46 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f00b fdfd 	bl	800db40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2203      	movs	r2, #3
 8001f4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f008 faf8 	bl	800a55a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	687e      	ldr	r6, [r7, #4]
 8001f72:	466d      	mov	r5, sp
 8001f74:	f106 0410 	add.w	r4, r6, #16
 8001f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f84:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f88:	1d33      	adds	r3, r6, #4
 8001f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f8c:	6838      	ldr	r0, [r7, #0]
 8001f8e:	f008 fa0b 	bl	800a3a8 <USB_CoreInit>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0d7      	b.n	8002154 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f008 fae6 	bl	800a57c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e04a      	b.n	800204c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	333d      	adds	r3, #61	; 0x3d
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	333c      	adds	r3, #60	; 0x3c
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	b298      	uxth	r0, r3
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	3344      	adds	r3, #68	; 0x44
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3340      	adds	r3, #64	; 0x40
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3348      	adds	r3, #72	; 0x48
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	334c      	adds	r3, #76	; 0x4c
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	3354      	adds	r3, #84	; 0x54
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	3301      	adds	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	d3af      	bcc.n	8001fb6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	e044      	b.n	80020e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	3301      	adds	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d3b5      	bcc.n	800205c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	687e      	ldr	r6, [r7, #4]
 80020f8:	466d      	mov	r5, sp
 80020fa:	f106 0410 	add.w	r4, r6, #16
 80020fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002106:	e894 0003 	ldmia.w	r4, {r0, r1}
 800210a:	e885 0003 	stmia.w	r5, {r0, r1}
 800210e:	1d33      	adds	r3, r6, #4
 8002110:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002112:	6838      	ldr	r0, [r7, #0]
 8002114:	f008 fa7e 	bl	800a614 <USB_DevInit>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e014      	b.n	8002154 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	2b01      	cmp	r3, #1
 8002140:	d102      	bne.n	8002148 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f001 f882 	bl	800324c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f009 fb06 	bl	800b75e <USB_DevDisconnect>

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800215c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_PCD_Start+0x1c>
 8002174:	2302      	movs	r3, #2
 8002176:	e01c      	b.n	80021b2 <HAL_PCD_Start+0x56>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f008 f9cd 	bl	800a538 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f009 faba 	bl	800b71c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021ba:	b590      	push	{r4, r7, lr}
 80021bc:	b08d      	sub	sp, #52	; 0x34
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f009 fb78 	bl	800b8c6 <USB_GetMode>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 847e 	bne.w	8002ada <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f009 fadc 	bl	800b7a0 <USB_ReadInterrupts>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8474 	beq.w	8002ad8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f009 fac9 	bl	800b7a0 <USB_ReadInterrupts>
 800220e:	4603      	mov	r3, r0
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b02      	cmp	r3, #2
 8002216:	d107      	bne.n	8002228 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f002 0202 	and.w	r2, r2, #2
 8002226:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f009 fab7 	bl	800b7a0 <USB_ReadInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b10      	cmp	r3, #16
 800223a:	d161      	bne.n	8002300 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0210 	bic.w	r2, r2, #16
 800224a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f003 020f 	and.w	r2, r3, #15
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	0c5b      	lsrs	r3, r3, #17
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	2b02      	cmp	r3, #2
 8002276:	d124      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d035      	beq.n	80022f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800228e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002292:	b29b      	uxth	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	6a38      	ldr	r0, [r7, #32]
 8002298:	f009 f8ee 	bl	800b478 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a8:	441a      	add	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	6a1a      	ldr	r2, [r3, #32]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ba:	441a      	add	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	621a      	str	r2, [r3, #32]
 80022c0:	e016      	b.n	80022f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	0c5b      	lsrs	r3, r3, #17
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d110      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022d4:	2208      	movs	r2, #8
 80022d6:	4619      	mov	r1, r3
 80022d8:	6a38      	ldr	r0, [r7, #32]
 80022da:	f009 f8cd 	bl	800b478 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	6a1a      	ldr	r2, [r3, #32]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ea:	441a      	add	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0210 	orr.w	r2, r2, #16
 80022fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f009 fa4b 	bl	800b7a0 <USB_ReadInterrupts>
 800230a:	4603      	mov	r3, r0
 800230c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002310:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002314:	f040 80a7 	bne.w	8002466 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f009 fa50 	bl	800b7c6 <USB_ReadDevAllOutEpInterrupt>
 8002326:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002328:	e099      	b.n	800245e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800232a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 808e 	beq.w	8002452 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f009 fa74 	bl	800b82e <USB_ReadDevOutEPInterrupt>
 8002346:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00c      	beq.n	800236c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235e:	461a      	mov	r2, r3
 8002360:	2301      	movs	r3, #1
 8002362:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fe96 	bl	8003098 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00c      	beq.n	8002390 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002382:	461a      	mov	r2, r3
 8002384:	2308      	movs	r3, #8
 8002386:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fed2 	bl	8003134 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a6:	461a      	mov	r2, r3
 80023a8:	2310      	movs	r3, #16
 80023aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d030      	beq.n	8002418 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	2b80      	cmp	r3, #128	; 0x80
 80023c0:	d109      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	3304      	adds	r3, #4
 80023ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	78db      	ldrb	r3, [r3, #3]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2200      	movs	r2, #0
 80023f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	4619      	mov	r1, r3
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f00b fce1 	bl	800ddc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002412:	461a      	mov	r2, r3
 8002414:	2302      	movs	r3, #2
 8002416:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	4413      	add	r3, r2
 800242a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242e:	461a      	mov	r2, r3
 8002430:	2320      	movs	r3, #32
 8002432:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244a:	461a      	mov	r2, r3
 800244c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002450:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	3301      	adds	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	085b      	lsrs	r3, r3, #1
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	f47f af62 	bne.w	800232a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f009 f998 	bl	800b7a0 <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800247a:	f040 80a4 	bne.w	80025c6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f009 f9b9 	bl	800b7fa <USB_ReadDevAllInEpInterrupt>
 8002488:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800248e:	e096      	b.n	80025be <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 808b 	beq.w	80025b2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f009 f9df 	bl	800b86a <USB_ReadDevInEPInterrupt>
 80024ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	2201      	movs	r2, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69f9      	ldr	r1, [r7, #28]
 80024d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024d8:	4013      	ands	r3, r2
 80024da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024e8:	461a      	mov	r2, r3
 80024ea:	2301      	movs	r3, #1
 80024ec:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	4619      	mov	r1, r3
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f00b fbd2 	bl	800dc9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4413      	add	r3, r2
 800250c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002510:	461a      	mov	r2, r3
 8002512:	2308      	movs	r3, #8
 8002514:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800252c:	461a      	mov	r2, r3
 800252e:	2310      	movs	r3, #16
 8002530:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002548:	461a      	mov	r2, r3
 800254a:	2340      	movs	r3, #64	; 0x40
 800254c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d023      	beq.n	80025a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800255a:	6a38      	ldr	r0, [r7, #32]
 800255c:	f008 f9a6 	bl	800a8ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	3338      	adds	r3, #56	; 0x38
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	3304      	adds	r3, #4
 8002572:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	78db      	ldrb	r3, [r3, #3]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d108      	bne.n	800258e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2200      	movs	r2, #0
 8002580:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f00b fc2f 	bl	800ddec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4413      	add	r3, r2
 8002596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800259a:	461a      	mov	r2, r3
 800259c:	2302      	movs	r3, #2
 800259e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fcea 	bl	8002f86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	3301      	adds	r3, #1
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f47f af65 	bne.w	8002490 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f009 f8e8 	bl	800b7a0 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025da:	d122      	bne.n	8002622 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d108      	bne.n	800260c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002602:	2100      	movs	r1, #0
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fe45 	bl	8003294 <HAL_PCDEx_LPM_Callback>
 800260a:	e002      	b.n	8002612 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f00b fbb3 	bl	800dd78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f009 f8ba 	bl	800b7a0 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002636:	d112      	bne.n	800265e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d102      	bne.n	800264e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f00b fb6f 	bl	800dd2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800265c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f009 f89c 	bl	800b7a0 <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800266e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002672:	d121      	bne.n	80026b8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002682:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d111      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	f003 020f 	and.w	r2, r3, #15
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026a8:	2101      	movs	r1, #1
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fdf2 	bl	8003294 <HAL_PCDEx_LPM_Callback>
 80026b0:	e002      	b.n	80026b8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f00b fb3a 	bl	800dd2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f009 f86f 	bl	800b7a0 <USB_ReadInterrupts>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026cc:	f040 80b5 	bne.w	800283a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2110      	movs	r1, #16
 80026ea:	4618      	mov	r0, r3
 80026ec:	f008 f8de 	bl	800a8ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f4:	e046      	b.n	8002784 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002702:	461a      	mov	r2, r3
 8002704:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002708:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800271a:	0151      	lsls	r1, r2, #5
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	440a      	add	r2, r1
 8002720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002724:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002728:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4413      	add	r3, r2
 8002732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002736:	461a      	mov	r2, r3
 8002738:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800273c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800274e:	0151      	lsls	r1, r2, #5
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	440a      	add	r2, r1
 8002754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002758:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800275c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	4413      	add	r3, r2
 8002766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276e:	0151      	lsls	r1, r2, #5
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	440a      	add	r2, r1
 8002774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002778:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800277c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	3301      	adds	r3, #1
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800278a:	429a      	cmp	r2, r3
 800278c:	d3b3      	bcc.n	80026f6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800279c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d016      	beq.n	80027d8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ba:	f043 030b 	orr.w	r3, r3, #11
 80027be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d0:	f043 030b 	orr.w	r3, r3, #11
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	e015      	b.n	8002804 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027ea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fe:	f043 030b 	orr.w	r3, r3, #11
 8002802:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002812:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002816:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002822:	4619      	mov	r1, r3
 8002824:	4610      	mov	r0, r2
 8002826:	f009 f87f 	bl	800b928 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f008 ffae 	bl	800b7a0 <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800284a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284e:	d124      	bne.n	800289a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f009 f844 	bl	800b8e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f008 f8a1 	bl	800a9a6 <USB_GetDevSpeed>
 8002864:	4603      	mov	r3, r0
 8002866:	461a      	mov	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681c      	ldr	r4, [r3, #0]
 8002870:	f001 fbd0 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8002874:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	4620      	mov	r0, r4
 8002880:	f007 fdbe 	bl	800a400 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f00b fa32 	bl	800dcee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002898:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f008 ff7e 	bl	800b7a0 <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d10a      	bne.n	80028c4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f00b fa0f 	bl	800dcd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f002 0208 	and.w	r2, r2, #8
 80028c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f008 ff69 	bl	800b7a0 <USB_ReadInterrupts>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d122      	bne.n	800291e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e4:	2301      	movs	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
 80028e8:	e014      	b.n	8002914 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d105      	bne.n	800290e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4619      	mov	r1, r3
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fb0b 	bl	8002f24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	3301      	adds	r3, #1
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291a:	429a      	cmp	r2, r3
 800291c:	d3e5      	bcc.n	80028ea <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f008 ff3c 	bl	800b7a0 <USB_ReadInterrupts>
 8002928:	4603      	mov	r3, r0
 800292a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002932:	d13b      	bne.n	80029ac <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002934:	2301      	movs	r3, #1
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
 8002938:	e02b      	b.n	8002992 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4413      	add	r3, r2
 8002942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	3340      	adds	r3, #64	; 0x40
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d115      	bne.n	800298c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002960:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002962:	2b00      	cmp	r3, #0
 8002964:	da12      	bge.n	800298c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	333f      	adds	r3, #63	; 0x3f
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 facc 	bl	8002f24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	3301      	adds	r3, #1
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002998:	429a      	cmp	r2, r3
 800299a:	d3ce      	bcc.n	800293a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f008 fef5 	bl	800b7a0 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029c0:	d155      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029c2:	2301      	movs	r3, #1
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	e045      	b.n	8002a54 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d12e      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	da2b      	bge.n	8002a4e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d121      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4a:	6053      	str	r3, [r2, #4]
            break;
 8002a4c:	e007      	b.n	8002a5e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	3301      	adds	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d3b4      	bcc.n	80029c8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f008 fe94 	bl	800b7a0 <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a82:	d10a      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f00b f9c3 	bl	800de10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f008 fe7e 	bl	800b7a0 <USB_ReadInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d115      	bne.n	8002ada <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f00b f9b3 	bl	800de2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	e000      	b.n	8002ada <HAL_PCD_IRQHandler+0x920>
      return;
 8002ad8:	bf00      	nop
    }
  }
}
 8002ada:	3734      	adds	r7, #52	; 0x34
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd90      	pop	{r4, r7, pc}

08002ae0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_PCD_SetAddress+0x1a>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e013      	b.n	8002b22 <HAL_PCD_SetAddress+0x42>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f008 fddc 	bl	800b6d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	4608      	mov	r0, r1
 8002b34:	4611      	mov	r1, r2
 8002b36:	461a      	mov	r2, r3
 8002b38:	4603      	mov	r3, r0
 8002b3a:	70fb      	strb	r3, [r7, #3]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	803b      	strh	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da0f      	bge.n	8002b70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	3338      	adds	r3, #56	; 0x38
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	705a      	strb	r2, [r3, #1]
 8002b6e:	e00f      	b.n	8002b90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b9c:	883a      	ldrh	r2, [r7, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	78ba      	ldrb	r2, [r7, #2]
 8002ba6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bba:	78bb      	ldrb	r3, [r7, #2]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_PCD_EP_Open+0xaa>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e00e      	b.n	8002bf2 <HAL_PCD_EP_Open+0xc8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f007 fefe 	bl	800a9e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bf0:	7afb      	ldrb	r3, [r7, #11]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da0f      	bge.n	8002c2e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 020f 	and.w	r2, r3, #15
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	3338      	adds	r3, #56	; 0x38
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	705a      	strb	r2, [r3, #1]
 8002c2c:	e00f      	b.n	8002c4e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	f003 020f 	and.w	r2, r3, #15
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	4413      	add	r3, r2
 8002c44:	3304      	adds	r3, #4
 8002c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_PCD_EP_Close+0x6e>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e00e      	b.n	8002c86 <HAL_PCD_EP_Close+0x8c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68f9      	ldr	r1, [r7, #12]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f007 ff3c 	bl	800aaf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
 8002ca0:	f003 020f 	and.w	r2, r3, #15
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6979      	ldr	r1, [r7, #20]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f008 f9bd 	bl	800b06c <USB_EP0StartXfer>
 8002cf2:	e005      	b.n	8002d00 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6979      	ldr	r1, [r7, #20]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f007 ffd6 	bl	800acac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d2c:	681b      	ldr	r3, [r3, #0]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	460b      	mov	r3, r1
 8002d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	f003 020f 	and.w	r2, r3, #15
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	3338      	adds	r3, #56	; 0x38
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3304      	adds	r3, #4
 8002d60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2201      	movs	r2, #1
 8002d78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d86:	7afb      	ldrb	r3, [r7, #11]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6979      	ldr	r1, [r7, #20]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f008 f968 	bl	800b06c <USB_EP0StartXfer>
 8002d9c:	e005      	b.n	8002daa <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6979      	ldr	r1, [r7, #20]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f007 ff81 	bl	800acac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 020f 	and.w	r2, r3, #15
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d901      	bls.n	8002dd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e04e      	b.n	8002e70 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da0f      	bge.n	8002dfa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	3338      	adds	r3, #56	; 0x38
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	3304      	adds	r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	705a      	strb	r2, [r3, #1]
 8002df8:	e00d      	b.n	8002e16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_PCD_EP_SetStall+0x82>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e01c      	b.n	8002e70 <HAL_PCD_EP_SetStall+0xbc>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f008 fb6f 	bl	800b528 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d108      	bne.n	8002e66 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f008 fd61 	bl	800b928 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d901      	bls.n	8002e96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e042      	b.n	8002f1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	da0f      	bge.n	8002ebe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	3338      	adds	r3, #56	; 0x38
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	705a      	strb	r2, [r3, #1]
 8002ebc:	e00f      	b.n	8002ede <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 020f 	and.w	r2, r3, #15
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_PCD_EP_ClrStall+0x86>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e00e      	b.n	8002f1c <HAL_PCD_EP_ClrStall+0xa4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68f9      	ldr	r1, [r7, #12]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f008 fb79 	bl	800b604 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da0c      	bge.n	8002f52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 020f 	and.w	r2, r3, #15
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	3338      	adds	r3, #56	; 0x38
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e00c      	b.n	8002f6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 020f 	and.w	r2, r3, #15
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	3304      	adds	r3, #4
 8002f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f008 f99c 	bl	800b2b0 <USB_EPStopXfer>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b088      	sub	sp, #32
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	3338      	adds	r3, #56	; 0x38
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	3304      	adds	r3, #4
 8002fac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1a      	ldr	r2, [r3, #32]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d901      	bls.n	8002fbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e067      	b.n	800308e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d902      	bls.n	8002fda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3303      	adds	r3, #3
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fe2:	e026      	b.n	8003032 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d902      	bls.n	8003000 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	3303      	adds	r3, #3
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6919      	ldr	r1, [r3, #16]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	b29b      	uxth	r3, r3
 8003014:	6978      	ldr	r0, [r7, #20]
 8003016:	f008 f9f5 	bl	800b404 <USB_WritePacket>

    ep->xfer_buff  += len;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	441a      	add	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	441a      	add	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	b29b      	uxth	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	429a      	cmp	r2, r3
 8003046:	d809      	bhi.n	800305c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a1a      	ldr	r2, [r3, #32]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003050:	429a      	cmp	r2, r3
 8003052:	d203      	bcs.n	800305c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1c3      	bne.n	8002fe4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	429a      	cmp	r2, r3
 8003066:	d811      	bhi.n	800308c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	2201      	movs	r2, #1
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	43db      	mvns	r3, r3
 8003082:	6939      	ldr	r1, [r7, #16]
 8003084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003088:	4013      	ands	r3, r2
 800308a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3720      	adds	r7, #32
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	333c      	adds	r3, #60	; 0x3c
 80030b0:	3304      	adds	r3, #4
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a19      	ldr	r2, [pc, #100]	; (8003130 <PCD_EP_OutXfrComplete_int+0x98>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d124      	bne.n	8003118 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e4:	461a      	mov	r2, r3
 80030e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ea:	6093      	str	r3, [r2, #8]
 80030ec:	e01a      	b.n	8003124 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003104:	461a      	mov	r2, r3
 8003106:	2320      	movs	r3, #32
 8003108:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4619      	mov	r1, r3
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f00a fda9 	bl	800dc68 <HAL_PCD_DataOutStageCallback>
 8003116:	e005      	b.n	8003124 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f00a fda2 	bl	800dc68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	4f54310a 	.word	0x4f54310a

08003134 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	333c      	adds	r3, #60	; 0x3c
 800314c:	3304      	adds	r3, #4
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4a0c      	ldr	r2, [pc, #48]	; (8003198 <PCD_EP_OutSetupPacket_int+0x64>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d90e      	bls.n	8003188 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003170:	2b00      	cmp	r3, #0
 8003172:	d009      	beq.n	8003188 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003180:	461a      	mov	r2, r3
 8003182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003186:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f00a fd5b 	bl	800dc44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	4f54300a 	.word	0x4f54300a

0800319c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
 80031a8:	4613      	mov	r3, r2
 80031aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031ba:	883b      	ldrh	r3, [r7, #0]
 80031bc:	0419      	lsls	r1, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28
 80031c8:	e028      	b.n	800321c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4413      	add	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e00d      	b.n	80031fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	3340      	adds	r3, #64	; 0x40
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	4413      	add	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	3301      	adds	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	3b01      	subs	r3, #1
 8003200:	429a      	cmp	r2, r3
 8003202:	d3ec      	bcc.n	80031de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003204:	883b      	ldrh	r3, [r7, #0]
 8003206:	0418      	lsls	r0, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6819      	ldr	r1, [r3, #0]
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	3b01      	subs	r3, #1
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	4302      	orrs	r2, r0
 8003214:	3340      	adds	r3, #64	; 0x40
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327e:	f043 0303 	orr.w	r3, r3, #3
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032bc:	d102      	bne.n	80032c4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80032be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c2:	e00b      	b.n	80032dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80032c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d2:	d102      	bne.n	80032da <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80032d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d8:	e000      	b.n	80032dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80032da:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40007000 	.word	0x40007000

080032ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d141      	bne.n	800337e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032fa:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003306:	d131      	bne.n	800336c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003308:	4b47      	ldr	r3, [pc, #284]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330e:	4a46      	ldr	r2, [pc, #280]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003314:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003320:	4a41      	ldr	r2, [pc, #260]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003326:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003328:	4b40      	ldr	r3, [pc, #256]	; (800342c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2232      	movs	r2, #50	; 0x32
 800332e:	fb02 f303 	mul.w	r3, r2, r3
 8003332:	4a3f      	ldr	r2, [pc, #252]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	0c9b      	lsrs	r3, r3, #18
 800333a:	3301      	adds	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333e:	e002      	b.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3b01      	subs	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003346:	4b38      	ldr	r3, [pc, #224]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d102      	bne.n	800335a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f2      	bne.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800335a:	4b33      	ldr	r3, [pc, #204]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003366:	d158      	bne.n	800341a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e057      	b.n	800341c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800336c:	4b2e      	ldr	r3, [pc, #184]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003372:	4a2d      	ldr	r2, [pc, #180]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003378:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800337c:	e04d      	b.n	800341a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d141      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003386:	4b28      	ldr	r3, [pc, #160]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003392:	d131      	bne.n	80033f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003394:	4b24      	ldr	r3, [pc, #144]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339a:	4a23      	ldr	r2, [pc, #140]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033a4:	4b20      	ldr	r3, [pc, #128]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ac:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80033b4:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2232      	movs	r2, #50	; 0x32
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	0c9b      	lsrs	r3, r3, #18
 80033c6:	3301      	adds	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ca:	e002      	b.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d102      	bne.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f2      	bne.n	80033cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f2:	d112      	bne.n	800341a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e011      	b.n	800341c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003408:	e007      	b.n	800341a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003412:	4a05      	ldr	r2, [pc, #20]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003414:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003418:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40007000 	.word	0x40007000
 800342c:	20000000 	.word	0x20000000
 8003430:	431bde83 	.word	0x431bde83

08003434 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_PWREx_EnableVddUSB+0x1c>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a04      	ldr	r2, [pc, #16]	; (8003450 <HAL_PWREx_EnableVddUSB+0x1c>)
 800343e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003442:	6053      	str	r3, [r2, #4]
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40007000 	.word	0x40007000

08003454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d102      	bne.n	8003468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	f000 bc08 	b.w	8003c78 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003468:	4b96      	ldr	r3, [pc, #600]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003472:	4b94      	ldr	r3, [pc, #592]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80e4 	beq.w	8003652 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <HAL_RCC_OscConfig+0x4c>
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b0c      	cmp	r3, #12
 8003494:	f040 808b 	bne.w	80035ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b01      	cmp	r3, #1
 800349c:	f040 8087 	bne.w	80035ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034a0:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_OscConfig+0x64>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e3df      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1a      	ldr	r2, [r3, #32]
 80034bc:	4b81      	ldr	r3, [pc, #516]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <HAL_RCC_OscConfig+0x7e>
 80034c8:	4b7e      	ldr	r3, [pc, #504]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d0:	e005      	b.n	80034de <HAL_RCC_OscConfig+0x8a>
 80034d2:	4b7c      	ldr	r3, [pc, #496]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80034d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034de:	4293      	cmp	r3, r2
 80034e0:	d223      	bcs.n	800352a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fdf8 	bl	80040dc <RCC_SetFlashLatencyFromMSIRange>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e3c0      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f6:	4b73      	ldr	r3, [pc, #460]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a72      	ldr	r2, [pc, #456]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80034fc:	f043 0308 	orr.w	r3, r3, #8
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	4b70      	ldr	r3, [pc, #448]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	496d      	ldr	r1, [pc, #436]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003514:	4b6b      	ldr	r3, [pc, #428]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	4968      	ldr	r1, [pc, #416]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
 8003528:	e025      	b.n	8003576 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800352a:	4b66      	ldr	r3, [pc, #408]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a65      	ldr	r2, [pc, #404]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003530:	f043 0308 	orr.w	r3, r3, #8
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	4b63      	ldr	r3, [pc, #396]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4960      	ldr	r1, [pc, #384]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003544:	4313      	orrs	r3, r2
 8003546:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003548:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	495b      	ldr	r1, [pc, #364]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fdb8 	bl	80040dc <RCC_SetFlashLatencyFromMSIRange>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e380      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003576:	f000 fcc1 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 800357a:	4602      	mov	r2, r0
 800357c:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	4950      	ldr	r1, [pc, #320]	; (80036c8 <HAL_RCC_OscConfig+0x274>)
 8003588:	5ccb      	ldrb	r3, [r1, r3]
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	fa22 f303 	lsr.w	r3, r2, r3
 8003592:	4a4e      	ldr	r2, [pc, #312]	; (80036cc <HAL_RCC_OscConfig+0x278>)
 8003594:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003596:	4b4e      	ldr	r3, [pc, #312]	; (80036d0 <HAL_RCC_OscConfig+0x27c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd ff6c 	bl	8001478 <HAL_InitTick>
 80035a0:	4603      	mov	r3, r0
 80035a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d052      	beq.n	8003650 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	e364      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d032      	beq.n	800361c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035b6:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a42      	ldr	r2, [pc, #264]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035c2:	f7fd ffa9 	bl	8001518 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ca:	f7fd ffa5 	bl	8001518 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e34d      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035dc:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e8:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a35      	ldr	r2, [pc, #212]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80035ee:	f043 0308 	orr.w	r3, r3, #8
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	4b33      	ldr	r3, [pc, #204]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	4930      	ldr	r1, [pc, #192]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003606:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	492b      	ldr	r1, [pc, #172]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]
 800361a:	e01a      	b.n	8003652 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800361c:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a28      	ldr	r2, [pc, #160]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003628:	f7fd ff76 	bl	8001518 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003630:	f7fd ff72 	bl	8001518 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e31a      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x1dc>
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d073      	beq.n	8003746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d005      	beq.n	8003670 <HAL_RCC_OscConfig+0x21c>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b0c      	cmp	r3, #12
 8003668:	d10e      	bne.n	8003688 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d10b      	bne.n	8003688 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d063      	beq.n	8003744 <HAL_RCC_OscConfig+0x2f0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d15f      	bne.n	8003744 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e2f7      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d106      	bne.n	80036a0 <HAL_RCC_OscConfig+0x24c>
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e025      	b.n	80036ec <HAL_RCC_OscConfig+0x298>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a8:	d114      	bne.n	80036d4 <HAL_RCC_OscConfig+0x280>
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80036b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a02      	ldr	r2, [pc, #8]	; (80036c4 <HAL_RCC_OscConfig+0x270>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e013      	b.n	80036ec <HAL_RCC_OscConfig+0x298>
 80036c4:	40021000 	.word	0x40021000
 80036c8:	0800f3ac 	.word	0x0800f3ac
 80036cc:	20000000 	.word	0x20000000
 80036d0:	20000004 	.word	0x20000004
 80036d4:	4ba0      	ldr	r3, [pc, #640]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a9f      	ldr	r2, [pc, #636]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80036da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	4b9d      	ldr	r3, [pc, #628]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a9c      	ldr	r2, [pc, #624]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80036e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d013      	beq.n	800371c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fd ff10 	bl	8001518 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fd ff0c 	bl	8001518 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e2b4      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370e:	4b92      	ldr	r3, [pc, #584]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x2a8>
 800371a:	e014      	b.n	8003746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fd fefc 	bl	8001518 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fd fef8 	bl	8001518 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e2a0      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003736:	4b88      	ldr	r3, [pc, #544]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x2d0>
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d060      	beq.n	8003814 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d005      	beq.n	8003764 <HAL_RCC_OscConfig+0x310>
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b0c      	cmp	r3, #12
 800375c:	d119      	bne.n	8003792 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d116      	bne.n	8003792 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003764:	4b7c      	ldr	r3, [pc, #496]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_OscConfig+0x328>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e27d      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377c:	4b76      	ldr	r3, [pc, #472]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	061b      	lsls	r3, r3, #24
 800378a:	4973      	ldr	r1, [pc, #460]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003790:	e040      	b.n	8003814 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d023      	beq.n	80037e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800379a:	4b6f      	ldr	r3, [pc, #444]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6e      	ldr	r2, [pc, #440]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fd feb7 	bl	8001518 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ae:	f7fd feb3 	bl	8001518 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e25b      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c0:	4b65      	ldr	r3, [pc, #404]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037cc:	4b62      	ldr	r3, [pc, #392]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	495f      	ldr	r1, [pc, #380]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
 80037e0:	e018      	b.n	8003814 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e2:	4b5d      	ldr	r3, [pc, #372]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a5c      	ldr	r2, [pc, #368]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80037e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fd fe93 	bl	8001518 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f6:	f7fd fe8f 	bl	8001518 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e237      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003808:	4b53      	ldr	r3, [pc, #332]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d03c      	beq.n	800389a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01c      	beq.n	8003862 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003828:	4b4b      	ldr	r3, [pc, #300]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 800382a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382e:	4a4a      	ldr	r2, [pc, #296]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fd fe6e 	bl	8001518 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003840:	f7fd fe6a 	bl	8001518 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e212      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003852:	4b41      	ldr	r3, [pc, #260]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 8003854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <HAL_RCC_OscConfig+0x3ec>
 8003860:	e01b      	b.n	800389a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003862:	4b3d      	ldr	r3, [pc, #244]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 8003864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003868:	4a3b      	ldr	r2, [pc, #236]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fd fe51 	bl	8001518 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387a:	f7fd fe4d 	bl	8001518 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e1f5      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800388c:	4b32      	ldr	r3, [pc, #200]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 800388e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ef      	bne.n	800387a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80a6 	beq.w	80039f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a8:	2300      	movs	r3, #0
 80038aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038ac:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10d      	bne.n	80038d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b8:	4b27      	ldr	r3, [pc, #156]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	4a26      	ldr	r2, [pc, #152]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6593      	str	r3, [r2, #88]	; 0x58
 80038c4:	4b24      	ldr	r3, [pc, #144]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d0:	2301      	movs	r3, #1
 80038d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d4:	4b21      	ldr	r3, [pc, #132]	; (800395c <HAL_RCC_OscConfig+0x508>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d118      	bne.n	8003912 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038e0:	4b1e      	ldr	r3, [pc, #120]	; (800395c <HAL_RCC_OscConfig+0x508>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1d      	ldr	r2, [pc, #116]	; (800395c <HAL_RCC_OscConfig+0x508>)
 80038e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ec:	f7fd fe14 	bl	8001518 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f4:	f7fd fe10 	bl	8001518 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1b8      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <HAL_RCC_OscConfig+0x508>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d108      	bne.n	800392c <HAL_RCC_OscConfig+0x4d8>
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	4a0d      	ldr	r2, [pc, #52]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800392a:	e029      	b.n	8003980 <HAL_RCC_OscConfig+0x52c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b05      	cmp	r3, #5
 8003932:	d115      	bne.n	8003960 <HAL_RCC_OscConfig+0x50c>
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	4a07      	ldr	r2, [pc, #28]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 800393c:	f043 0304 	orr.w	r3, r3, #4
 8003940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394a:	4a03      	ldr	r2, [pc, #12]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003954:	e014      	b.n	8003980 <HAL_RCC_OscConfig+0x52c>
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	40007000 	.word	0x40007000
 8003960:	4b9d      	ldr	r3, [pc, #628]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	4a9c      	ldr	r2, [pc, #624]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003970:	4b99      	ldr	r3, [pc, #612]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	4a98      	ldr	r2, [pc, #608]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d016      	beq.n	80039b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fd fdc6 	bl	8001518 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fd fdc2 	bl	8001518 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e168      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a6:	4b8c      	ldr	r3, [pc, #560]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ed      	beq.n	8003990 <HAL_RCC_OscConfig+0x53c>
 80039b4:	e015      	b.n	80039e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7fd fdaf 	bl	8001518 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fd fdab 	bl	8001518 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e151      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d4:	4b80      	ldr	r3, [pc, #512]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ed      	bne.n	80039be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e2:	7ffb      	ldrb	r3, [r7, #31]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d105      	bne.n	80039f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e8:	4b7b      	ldr	r3, [pc, #492]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	4a7a      	ldr	r2, [pc, #488]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 80039ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d03c      	beq.n	8003a7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01c      	beq.n	8003a42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a08:	4b73      	ldr	r3, [pc, #460]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a0e:	4a72      	ldr	r2, [pc, #456]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fd fd7e 	bl	8001518 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a20:	f7fd fd7a 	bl	8001518 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e122      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a32:	4b69      	ldr	r3, [pc, #420]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ef      	beq.n	8003a20 <HAL_RCC_OscConfig+0x5cc>
 8003a40:	e01b      	b.n	8003a7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a42:	4b65      	ldr	r3, [pc, #404]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a48:	4a63      	ldr	r2, [pc, #396]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a52:	f7fd fd61 	bl	8001518 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a5a:	f7fd fd5d 	bl	8001518 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e105      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a6c:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1ef      	bne.n	8003a5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80f9 	beq.w	8003c76 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	f040 80cf 	bne.w	8003c2c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a8e:	4b52      	ldr	r3, [pc, #328]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 0203 	and.w	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d12c      	bne.n	8003afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	3b01      	subs	r3, #1
 8003aae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d123      	bne.n	8003afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d11b      	bne.n	8003afc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d113      	bne.n	8003afc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d109      	bne.n	8003afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	3b01      	subs	r3, #1
 8003af6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d071      	beq.n	8003be0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d068      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b02:	4b35      	ldr	r3, [pc, #212]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b0e:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0ac      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b2e      	ldr	r3, [pc, #184]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2d      	ldr	r2, [pc, #180]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b2a:	f7fd fcf5 	bl	8001518 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b32:	f7fd fcf1 	bl	8001518 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e099      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b44:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f0      	bne.n	8003b32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b50:	4b21      	ldr	r3, [pc, #132]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <HAL_RCC_OscConfig+0x788>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b60:	3a01      	subs	r2, #1
 8003b62:	0112      	lsls	r2, r2, #4
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b6a:	0212      	lsls	r2, r2, #8
 8003b6c:	4311      	orrs	r1, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b72:	0852      	lsrs	r2, r2, #1
 8003b74:	3a01      	subs	r2, #1
 8003b76:	0552      	lsls	r2, r2, #21
 8003b78:	4311      	orrs	r1, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b7e:	0852      	lsrs	r2, r2, #1
 8003b80:	3a01      	subs	r2, #1
 8003b82:	0652      	lsls	r2, r2, #25
 8003b84:	4311      	orrs	r1, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b8a:	06d2      	lsls	r2, r2, #27
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	4912      	ldr	r1, [pc, #72]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b94:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0f      	ldr	r2, [pc, #60]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a0c      	ldr	r2, [pc, #48]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003baa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bac:	f7fd fcb4 	bl	8001518 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb4:	f7fd fcb0 	bl	8001518 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e058      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc6:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <HAL_RCC_OscConfig+0x784>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd2:	e050      	b.n	8003c76 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e04f      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be0:	4b27      	ldr	r3, [pc, #156]	; (8003c80 <HAL_RCC_OscConfig+0x82c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d144      	bne.n	8003c76 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bec:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_RCC_OscConfig+0x82c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <HAL_RCC_OscConfig+0x82c>)
 8003bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf8:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <HAL_RCC_OscConfig+0x82c>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a20      	ldr	r2, [pc, #128]	; (8003c80 <HAL_RCC_OscConfig+0x82c>)
 8003bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c04:	f7fd fc88 	bl	8001518 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fd fc84 	bl	8001518 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e02c      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <HAL_RCC_OscConfig+0x82c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x7b8>
 8003c2a:	e024      	b.n	8003c76 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	d01f      	beq.n	8003c72 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c32:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <HAL_RCC_OscConfig+0x82c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <HAL_RCC_OscConfig+0x82c>)
 8003c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fd fc6b 	bl	8001518 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fd fc67 	bl	8001518 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e00f      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_RCC_OscConfig+0x82c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_RCC_OscConfig+0x82c>)
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	4905      	ldr	r1, [pc, #20]	; (8003c80 <HAL_RCC_OscConfig+0x82c>)
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_RCC_OscConfig+0x830>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60cb      	str	r3, [r1, #12]
 8003c70:	e001      	b.n	8003c76 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	feeefffc 	.word	0xfeeefffc

08003c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e11d      	b.n	8003edc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b90      	ldr	r3, [pc, #576]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d910      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b8d      	ldr	r3, [pc, #564]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 020f 	bic.w	r2, r3, #15
 8003cb6:	498b      	ldr	r1, [pc, #556]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b89      	ldr	r3, [pc, #548]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e105      	b.n	8003edc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d010      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	4b81      	ldr	r3, [pc, #516]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d908      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b7e      	ldr	r3, [pc, #504]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	497b      	ldr	r1, [pc, #492]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d079      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d11e      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d12:	4b75      	ldr	r3, [pc, #468]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e0dc      	b.n	8003edc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003d22:	f000 fa35 	bl	8004190 <RCC_GetSysClockFreqFromPLLSource>
 8003d26:	4603      	mov	r3, r0
 8003d28:	4a70      	ldr	r2, [pc, #448]	; (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d946      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d2e:	4b6e      	ldr	r3, [pc, #440]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d140      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d3a:	4b6b      	ldr	r3, [pc, #428]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d42:	4a69      	ldr	r2, [pc, #420]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e035      	b.n	8003dbc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d58:	4b63      	ldr	r3, [pc, #396]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d115      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b9      	b.n	8003edc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d70:	4b5d      	ldr	r3, [pc, #372]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d109      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0ad      	b.n	8003edc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d80:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0a5      	b.n	8003edc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003d90:	f000 f8b4 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003d94:	4603      	mov	r3, r0
 8003d96:	4a55      	ldr	r2, [pc, #340]	; (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d90f      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d9c:	4b52      	ldr	r3, [pc, #328]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003da8:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003db0:	4a4d      	ldr	r2, [pc, #308]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dbc:	4b4a      	ldr	r3, [pc, #296]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 0203 	bic.w	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4947      	ldr	r1, [pc, #284]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dce:	f7fd fba3 	bl	8001518 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd6:	f7fd fb9f 	bl	8001518 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e077      	b.n	8003edc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dec:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 020c 	and.w	r2, r3, #12
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d1eb      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b80      	cmp	r3, #128	; 0x80
 8003e02:	d105      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e04:	4b38      	ldr	r3, [pc, #224]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4a37      	ldr	r2, [pc, #220]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e0e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d010      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d208      	bcs.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	492b      	ldr	r1, [pc, #172]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e3e:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d210      	bcs.n	8003e6e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f023 020f 	bic.w	r2, r3, #15
 8003e54:	4923      	ldr	r1, [pc, #140]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_RCC_ClockConfig+0x25c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d001      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e036      	b.n	8003edc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	4918      	ldr	r1, [pc, #96]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d009      	beq.n	8003eac <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e98:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4910      	ldr	r1, [pc, #64]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eac:	f000 f826 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	490c      	ldr	r1, [pc, #48]	; (8003ef0 <HAL_RCC_ClockConfig+0x268>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec8:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x26c>)
 8003eca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_RCC_ClockConfig+0x270>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fd fad1 	bl	8001478 <HAL_InitTick>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40022000 	.word	0x40022000
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	04c4b400 	.word	0x04c4b400
 8003ef0:	0800f3ac 	.word	0x0800f3ac
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	20000004 	.word	0x20000004

08003efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b089      	sub	sp, #36	; 0x24
 8003f00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f0a:	4b3e      	ldr	r3, [pc, #248]	; (8004004 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f14:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x34>
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d121      	bne.n	8003f6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d11e      	bne.n	8003f6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f30:	4b34      	ldr	r3, [pc, #208]	; (8004004 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f3c:	4b31      	ldr	r3, [pc, #196]	; (8004004 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	e005      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f4c:	4b2d      	ldr	r3, [pc, #180]	; (8004004 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f58:	4a2b      	ldr	r2, [pc, #172]	; (8004008 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10d      	bne.n	8003f84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d102      	bne.n	8003f7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f74:	4b25      	ldr	r3, [pc, #148]	; (800400c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	e004      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f80:	4b23      	ldr	r3, [pc, #140]	; (8004010 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d134      	bne.n	8003ff4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d003      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d003      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xac>
 8003fa0:	e005      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fa2:	4b1a      	ldr	r3, [pc, #104]	; (800400c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fa4:	617b      	str	r3, [r7, #20]
      break;
 8003fa6:	e005      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_RCC_GetSysClockFreq+0x114>)
 8003faa:	617b      	str	r3, [r7, #20]
      break;
 8003fac:	e002      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	617b      	str	r3, [r7, #20]
      break;
 8003fb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fb4:	4b13      	ldr	r3, [pc, #76]	; (8004004 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	fb03 f202 	mul.w	r2, r3, r2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	0e5b      	lsrs	r3, r3, #25
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000
 8004008:	0800f3c4 	.word	0x0800f3c4
 800400c:	00f42400 	.word	0x00f42400
 8004010:	007a1200 	.word	0x007a1200

08004014 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_RCC_GetHCLKFreq+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000000 	.word	0x20000000

0800402c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004030:	f7ff fff0 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4904      	ldr	r1, [pc, #16]	; (8004054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	0800f3bc 	.word	0x0800f3bc

08004058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800405c:	f7ff ffda 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004060:	4602      	mov	r2, r0
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	0adb      	lsrs	r3, r3, #11
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	4904      	ldr	r1, [pc, #16]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000
 8004080:	0800f3bc 	.word	0x0800f3bc

08004084 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_EnableCSS+0x1c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <HAL_RCC_EnableCSS+0x1c>)
 800408e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004092:	6013      	str	r3, [r2, #0]
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000

080040a4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80040a8:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b4:	d105      	bne.n	80040c2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80040b6:	f000 f809 	bl	80040cc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80040ba:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80040bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040c0:	621a      	str	r2, [r3, #32]
  }
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000

080040cc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040e8:	4b27      	ldr	r3, [pc, #156]	; (8004188 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040f4:	f7ff f8da 	bl	80032ac <HAL_PWREx_GetVoltageRange>
 80040f8:	6178      	str	r0, [r7, #20]
 80040fa:	e014      	b.n	8004126 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040fc:	4b22      	ldr	r3, [pc, #136]	; (8004188 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	4a21      	ldr	r2, [pc, #132]	; (8004188 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004106:	6593      	str	r3, [r2, #88]	; 0x58
 8004108:	4b1f      	ldr	r3, [pc, #124]	; (8004188 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004114:	f7ff f8ca 	bl	80032ac <HAL_PWREx_GetVoltageRange>
 8004118:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800411a:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	4a1a      	ldr	r2, [pc, #104]	; (8004188 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004124:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d10b      	bne.n	8004146 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b80      	cmp	r3, #128	; 0x80
 8004132:	d913      	bls.n	800415c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2ba0      	cmp	r3, #160	; 0xa0
 8004138:	d902      	bls.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800413a:	2302      	movs	r3, #2
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	e00d      	b.n	800415c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004140:	2301      	movs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	e00a      	b.n	800415c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b7f      	cmp	r3, #127	; 0x7f
 800414a:	d902      	bls.n	8004152 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800414c:	2302      	movs	r3, #2
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	e004      	b.n	800415c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b70      	cmp	r3, #112	; 0x70
 8004156:	d101      	bne.n	800415c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004158:	2301      	movs	r3, #1
 800415a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f023 020f 	bic.w	r2, r3, #15
 8004164:	4909      	ldr	r1, [pc, #36]	; (800418c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800416c:	4b07      	ldr	r3, [pc, #28]	; (800418c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	429a      	cmp	r2, r3
 8004178:	d001      	beq.n	800417e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40021000 	.word	0x40021000
 800418c:	40022000 	.word	0x40022000

08004190 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004196:	4b2d      	ldr	r3, [pc, #180]	; (800424c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d00b      	beq.n	80041be <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d825      	bhi.n	80041f8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d008      	beq.n	80041c4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d11f      	bne.n	80041f8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80041b8:	4b25      	ldr	r3, [pc, #148]	; (8004250 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80041ba:	613b      	str	r3, [r7, #16]
    break;
 80041bc:	e01f      	b.n	80041fe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80041be:	4b25      	ldr	r3, [pc, #148]	; (8004254 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80041c0:	613b      	str	r3, [r7, #16]
    break;
 80041c2:	e01c      	b.n	80041fe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041c4:	4b21      	ldr	r3, [pc, #132]	; (800424c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e005      	b.n	80041ec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041e0:	4b1a      	ldr	r3, [pc, #104]	; (800424c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80041ec:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f4:	613b      	str	r3, [r7, #16]
    break;
 80041f6:	e002      	b.n	80041fe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
    break;
 80041fc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	3301      	adds	r3, #1
 800420a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	fb03 f202 	mul.w	r2, r3, r2
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004222:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	0e5b      	lsrs	r3, r3, #25
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	3301      	adds	r3, #1
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	fbb2 f3f3 	udiv	r3, r2, r3
 800423c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800423e:	683b      	ldr	r3, [r7, #0]
}
 8004240:	4618      	mov	r0, r3
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40021000 	.word	0x40021000
 8004250:	00f42400 	.word	0x00f42400
 8004254:	007a1200 	.word	0x007a1200
 8004258:	0800f3c4 	.word	0x0800f3c4

0800425c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004264:	2300      	movs	r3, #0
 8004266:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004268:	2300      	movs	r3, #0
 800426a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004274:	2b00      	cmp	r3, #0
 8004276:	d040      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800427c:	2b80      	cmp	r3, #128	; 0x80
 800427e:	d02a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004280:	2b80      	cmp	r3, #128	; 0x80
 8004282:	d825      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004284:	2b60      	cmp	r3, #96	; 0x60
 8004286:	d026      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004288:	2b60      	cmp	r3, #96	; 0x60
 800428a:	d821      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	d006      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d81d      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004298:	2b20      	cmp	r3, #32
 800429a:	d010      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x62>
 800429c:	e018      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800429e:	4b89      	ldr	r3, [pc, #548]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	4a88      	ldr	r2, [pc, #544]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042aa:	e015      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f001 fa24 	bl	8005700 <RCCEx_PLLSAI1_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042bc:	e00c      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3320      	adds	r3, #32
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 fb0f 	bl	80058e8 <RCCEx_PLLSAI2_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ce:	e003      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	74fb      	strb	r3, [r7, #19]
      break;
 80042d4:	e000      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80042d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10b      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042de:	4b79      	ldr	r3, [pc, #484]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042e4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ec:	4975      	ldr	r1, [pc, #468]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80042f4:	e001      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f6:	7cfb      	ldrb	r3, [r7, #19]
 80042f8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d047      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430e:	d030      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004314:	d82a      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800431a:	d02a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800431c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004320:	d824      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004326:	d008      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d81e      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004336:	d010      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004338:	e018      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800433a:	4b62      	ldr	r3, [pc, #392]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	4a61      	ldr	r2, [pc, #388]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004344:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004346:	e015      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f001 f9d6 	bl	8005700 <RCCEx_PLLSAI1_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004358:	e00c      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3320      	adds	r3, #32
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f001 fac1 	bl	80058e8 <RCCEx_PLLSAI2_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800436a:	e003      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	74fb      	strb	r3, [r7, #19]
      break;
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800437a:	4b52      	ldr	r3, [pc, #328]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800437c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	494e      	ldr	r1, [pc, #312]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004390:	e001      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 809f 	beq.w	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a4:	2300      	movs	r3, #0
 80043a6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043a8:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80043b8:	2300      	movs	r3, #0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00d      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043be:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	4a40      	ldr	r2, [pc, #256]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c8:	6593      	str	r3, [r2, #88]	; 0x58
 80043ca:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d6:	2301      	movs	r3, #1
 80043d8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043da:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a3a      	ldr	r2, [pc, #232]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e6:	f7fd f897 	bl	8001518 <HAL_GetTick>
 80043ea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ec:	e009      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ee:	f7fd f893 	bl	8001518 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d902      	bls.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	74fb      	strb	r3, [r7, #19]
        break;
 8004400:	e005      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004402:	4b31      	ldr	r3, [pc, #196]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0ef      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d15b      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004414:	4b2b      	ldr	r3, [pc, #172]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01f      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	429a      	cmp	r2, r3
 8004430:	d019      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004432:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800443e:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	4a1f      	ldr	r2, [pc, #124]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800444e:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	4a1b      	ldr	r2, [pc, #108]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800445e:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d016      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fd f852 	bl	8001518 <HAL_GetTick>
 8004474:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004476:	e00b      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fd f84e 	bl	8001518 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d902      	bls.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	74fb      	strb	r3, [r7, #19]
            break;
 800448e:	e006      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0ec      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800449e:	7cfb      	ldrb	r3, [r7, #19]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10c      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a4:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	4903      	ldr	r1, [pc, #12]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044bc:	e008      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	74bb      	strb	r3, [r7, #18]
 80044c2:	e005      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044d0:	7c7b      	ldrb	r3, [r7, #17]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d6:	4ba0      	ldr	r3, [pc, #640]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	4a9f      	ldr	r2, [pc, #636]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ee:	4b9a      	ldr	r3, [pc, #616]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f4:	f023 0203 	bic.w	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	4996      	ldr	r1, [pc, #600]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004510:	4b91      	ldr	r3, [pc, #580]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f023 020c 	bic.w	r2, r3, #12
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	498e      	ldr	r1, [pc, #568]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004532:	4b89      	ldr	r3, [pc, #548]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	4985      	ldr	r1, [pc, #532]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004554:	4b80      	ldr	r3, [pc, #512]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004562:	497d      	ldr	r1, [pc, #500]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004576:	4b78      	ldr	r3, [pc, #480]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004584:	4974      	ldr	r1, [pc, #464]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004598:	4b6f      	ldr	r3, [pc, #444]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a6:	496c      	ldr	r1, [pc, #432]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045ba:	4b67      	ldr	r3, [pc, #412]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c8:	4963      	ldr	r1, [pc, #396]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045dc:	4b5e      	ldr	r3, [pc, #376]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ea:	495b      	ldr	r1, [pc, #364]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045fe:	4b56      	ldr	r3, [pc, #344]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	4952      	ldr	r1, [pc, #328]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004620:	4b4d      	ldr	r3, [pc, #308]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	494a      	ldr	r1, [pc, #296]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004642:	4b45      	ldr	r3, [pc, #276]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	4941      	ldr	r1, [pc, #260]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004664:	4b3c      	ldr	r3, [pc, #240]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800466a:	f023 0203 	bic.w	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004672:	4939      	ldr	r1, [pc, #228]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d028      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004686:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004694:	4930      	ldr	r1, [pc, #192]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a4:	d106      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a6:	4b2c      	ldr	r3, [pc, #176]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b0:	60d3      	str	r3, [r2, #12]
 80046b2:	e011      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 f81b 	bl	8005700 <RCCEx_PLLSAI1_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d04d      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ec:	d108      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80046ee:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f4:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80046fe:	e012      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004700:	4b15      	ldr	r3, [pc, #84]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004706:	4a14      	ldr	r2, [pc, #80]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800470c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004710:	4b11      	ldr	r3, [pc, #68]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800471e:	490e      	ldr	r1, [pc, #56]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800472e:	d106      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800473a:	60d3      	str	r3, [r2, #12]
 800473c:	e020      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004746:	d109      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4a02      	ldr	r2, [pc, #8]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800474e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004752:	60d3      	str	r3, [r2, #12]
 8004754:	e014      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004764:	d10c      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3304      	adds	r3, #4
 800476a:	2101      	movs	r1, #1
 800476c:	4618      	mov	r0, r3
 800476e:	f000 ffc7 	bl	8005700 <RCCEx_PLLSAI1_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d028      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800478c:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800479a:	4947      	ldr	r1, [pc, #284]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047aa:	d106      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ac:	4b42      	ldr	r3, [pc, #264]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a41      	ldr	r2, [pc, #260]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b6:	60d3      	str	r3, [r2, #12]
 80047b8:	e011      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c2:	d10c      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	2101      	movs	r1, #1
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 ff98 	bl	8005700 <RCCEx_PLLSAI1_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01e      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047ea:	4b33      	ldr	r3, [pc, #204]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fa:	492f      	ldr	r1, [pc, #188]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480c:	d10c      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	2102      	movs	r1, #2
 8004814:	4618      	mov	r0, r3
 8004816:	f000 ff73 	bl	8005700 <RCCEx_PLLSAI1_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004834:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800483a:	f023 0204 	bic.w	r2, r3, #4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004844:	491c      	ldr	r1, [pc, #112]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004858:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800485e:	f023 0218 	bic.w	r2, r3, #24
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	4913      	ldr	r1, [pc, #76]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d017      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800487c:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800487e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800488c:	490a      	ldr	r1, [pc, #40]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800489e:	d105      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000

080048bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ce:	d13e      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80048d0:	4bb6      	ldr	r3, [pc, #728]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e2:	d028      	beq.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ea:	f200 86f4 	bhi.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f4:	d005      	beq.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048fc:	d00e      	beq.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80048fe:	f000 beea 	b.w	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004902:	4baa      	ldr	r3, [pc, #680]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b02      	cmp	r3, #2
 800490e:	f040 86e4 	bne.w	80056da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 8004912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004916:	61fb      	str	r3, [r7, #28]
      break;
 8004918:	f000 bedf 	b.w	80056da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800491c:	4ba3      	ldr	r3, [pc, #652]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800491e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b02      	cmp	r3, #2
 8004928:	f040 86d9 	bne.w	80056de <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800492c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004930:	61fb      	str	r3, [r7, #28]
      break;
 8004932:	f000 bed4 	b.w	80056de <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004936:	4b9d      	ldr	r3, [pc, #628]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004942:	f040 86ce 	bne.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 8004946:	4b9a      	ldr	r3, [pc, #616]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004948:	61fb      	str	r3, [r7, #28]
      break;
 800494a:	f000 beca 	b.w	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800494e:	4b97      	ldr	r3, [pc, #604]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b03      	cmp	r3, #3
 800495c:	d036      	beq.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d840      	bhi.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d003      	beq.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d020      	beq.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004970:	e039      	b.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004972:	4b8e      	ldr	r3, [pc, #568]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d116      	bne.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800497e:	4b8b      	ldr	r3, [pc, #556]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800498a:	4b88      	ldr	r3, [pc, #544]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	e005      	b.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004996:	4b85      	ldr	r3, [pc, #532]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	4a84      	ldr	r2, [pc, #528]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80049a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80049aa:	e01f      	b.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
      break;
 80049b0:	e01c      	b.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049b2:	4b7e      	ldr	r3, [pc, #504]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049be:	d102      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80049c0:	4b7d      	ldr	r3, [pc, #500]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80049c2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80049c4:	e012      	b.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
      break;
 80049ca:	e00f      	b.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049cc:	4b77      	ldr	r3, [pc, #476]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d8:	d102      	bne.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80049da:	4b78      	ldr	r3, [pc, #480]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80049dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80049de:	e005      	b.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61bb      	str	r3, [r7, #24]
      break;
 80049e4:	e002      	b.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
      break;
 80049ea:	bf00      	nop
    }

    switch(PeriphClk)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049f2:	f000 8606 	beq.w	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049fc:	f200 8673 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a06:	f000 8469 	beq.w	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a10:	f200 8669 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a1a:	f000 8531 	beq.w	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a24:	f200 865f 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a2e:	f000 8187 	beq.w	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a38:	f200 8655 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a42:	f000 80cd 	beq.w	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a4c:	f200 864b 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a56:	f000 8430 	beq.w	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a60:	f200 8641 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a6a:	f000 83e4 	beq.w	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a74:	f200 8637 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7e:	f000 80af 	beq.w	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a88:	f200 862d 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a92:	f000 809d 	beq.w	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9c:	f200 8623 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa6:	f000 808b 	beq.w	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab0:	f200 8619 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aba:	f000 8554 	beq.w	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac4:	f200 860f 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ace:	f000 8500 	beq.w	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad8:	f200 8605 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae2:	f000 84a1 	beq.w	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aec:	f200 85fb 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b80      	cmp	r3, #128	; 0x80
 8004af4:	f000 846c 	beq.w	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b80      	cmp	r3, #128	; 0x80
 8004afc:	f200 85f3 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d84c      	bhi.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 85ec 	beq.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	2b1f      	cmp	r3, #31
 8004b14:	f200 85e7 	bhi.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004b18:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004f35 	.word	0x08004f35
 8004b24:	08004fa3 	.word	0x08004fa3
 8004b28:	080056e7 	.word	0x080056e7
 8004b2c:	08005037 	.word	0x08005037
 8004b30:	080056e7 	.word	0x080056e7
 8004b34:	080056e7 	.word	0x080056e7
 8004b38:	080056e7 	.word	0x080056e7
 8004b3c:	080050af 	.word	0x080050af
 8004b40:	080056e7 	.word	0x080056e7
 8004b44:	080056e7 	.word	0x080056e7
 8004b48:	080056e7 	.word	0x080056e7
 8004b4c:	080056e7 	.word	0x080056e7
 8004b50:	080056e7 	.word	0x080056e7
 8004b54:	080056e7 	.word	0x080056e7
 8004b58:	080056e7 	.word	0x080056e7
 8004b5c:	08005133 	.word	0x08005133
 8004b60:	080056e7 	.word	0x080056e7
 8004b64:	080056e7 	.word	0x080056e7
 8004b68:	080056e7 	.word	0x080056e7
 8004b6c:	080056e7 	.word	0x080056e7
 8004b70:	080056e7 	.word	0x080056e7
 8004b74:	080056e7 	.word	0x080056e7
 8004b78:	080056e7 	.word	0x080056e7
 8004b7c:	080056e7 	.word	0x080056e7
 8004b80:	080056e7 	.word	0x080056e7
 8004b84:	080056e7 	.word	0x080056e7
 8004b88:	080056e7 	.word	0x080056e7
 8004b8c:	080056e7 	.word	0x080056e7
 8004b90:	080056e7 	.word	0x080056e7
 8004b94:	080056e7 	.word	0x080056e7
 8004b98:	080056e7 	.word	0x080056e7
 8004b9c:	080051b5 	.word	0x080051b5
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	f000 83e8 	beq.w	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004ba8:	f000 bd9d 	b.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	0003d090 	.word	0x0003d090
 8004bb4:	0800f3c4 	.word	0x0800f3c4
 8004bb8:	00f42400 	.word	0x00f42400
 8004bbc:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004bc0:	69b9      	ldr	r1, [r7, #24]
 8004bc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004bc6:	f000 ff83 	bl	8005ad0 <RCCEx_GetSAIxPeriphCLKFreq>
 8004bca:	61f8      	str	r0, [r7, #28]
      break;
 8004bcc:	f000 bd8e 	b.w	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004bd0:	69b9      	ldr	r1, [r7, #24]
 8004bd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004bd6:	f000 ff7b 	bl	8005ad0 <RCCEx_GetSAIxPeriphCLKFreq>
 8004bda:	61f8      	str	r0, [r7, #28]
      break;
 8004bdc:	f000 bd86 	b.w	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004be0:	4b9a      	ldr	r3, [pc, #616]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004bf2:	d015      	beq.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004bfa:	f200 8092 	bhi.w	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c04:	d029      	beq.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c0c:	f200 8089 	bhi.w	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d07b      	beq.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c1c:	d04a      	beq.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8004c1e:	e080      	b.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004c20:	4b8a      	ldr	r3, [pc, #552]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d17d      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004c2c:	4b87      	ldr	r3, [pc, #540]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8004c38:	4b84      	ldr	r3, [pc, #528]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	091b      	lsrs	r3, r3, #4
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	e005      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004c44:	4b81      	ldr	r3, [pc, #516]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	4a7f      	ldr	r2, [pc, #508]	; (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c56:	61fb      	str	r3, [r7, #28]
          break;
 8004c58:	e066      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004c5a:	4b7c      	ldr	r3, [pc, #496]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c66:	d162      	bne.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004c68:	4b78      	ldr	r3, [pc, #480]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c74:	d15b      	bne.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c76:	4b75      	ldr	r3, [pc, #468]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c80:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	fb03 f202 	mul.w	r2, r3, r2
 8004c8a:	4b70      	ldr	r3, [pc, #448]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	3301      	adds	r3, #1
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004c9c:	4b6b      	ldr	r3, [pc, #428]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	0d5b      	lsrs	r3, r3, #21
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	61fb      	str	r3, [r7, #28]
          break;
 8004cb2:	e03c      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004cb4:	4b65      	ldr	r3, [pc, #404]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc0:	d138      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004cc2:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cce:	d131      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004cd0:	4b5e      	ldr	r3, [pc, #376]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	0a1b      	lsrs	r3, r3, #8
 8004cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cda:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	fb03 f202 	mul.w	r2, r3, r2
 8004ce4:	4b59      	ldr	r3, [pc, #356]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	3301      	adds	r3, #1
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004cf6:	4b55      	ldr	r3, [pc, #340]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	0d5b      	lsrs	r3, r3, #21
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	3301      	adds	r3, #1
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0a:	61fb      	str	r3, [r7, #28]
          break;
 8004d0c:	e012      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004d0e:	4b4f      	ldr	r3, [pc, #316]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d10e      	bne.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8004d1c:	4b4d      	ldr	r3, [pc, #308]	; (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004d1e:	61fb      	str	r3, [r7, #28]
          break;
 8004d20:	e00b      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8004d22:	bf00      	nop
 8004d24:	f000 bce2 	b.w	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d28:	bf00      	nop
 8004d2a:	f000 bcdf 	b.w	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d2e:	bf00      	nop
 8004d30:	f000 bcdc 	b.w	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d34:	bf00      	nop
 8004d36:	f000 bcd9 	b.w	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004d3a:	bf00      	nop
        break;
 8004d3c:	f000 bcd6 	b.w	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004d40:	4b42      	ldr	r3, [pc, #264]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d4e:	d13d      	bne.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004d50:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d5c:	f040 84c5 	bne.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004d60:	4b3a      	ldr	r3, [pc, #232]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	f040 84bd 	bne.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004d70:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	fb03 f202 	mul.w	r2, r3, r2
 8004d84:	4b31      	ldr	r3, [pc, #196]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	3301      	adds	r3, #1
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004d96:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	0edb      	lsrs	r3, r3, #27
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004da8:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 8004db4:	2311      	movs	r3, #17
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e001      	b.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8004dba:	2307      	movs	r3, #7
 8004dbc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	61fb      	str	r3, [r7, #28]
      break;
 8004dc8:	f000 bc8f 	b.w	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004dcc:	4b1f      	ldr	r3, [pc, #124]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004dde:	d016      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004de6:	f200 809b 	bhi.w	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df0:	d032      	beq.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df8:	f200 8092 	bhi.w	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8084 	beq.w	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e0a:	d052      	beq.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8004e0c:	e088      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	f040 8084 	bne.w	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004e28:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	e005      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	4a03      	ldr	r2, [pc, #12]	; (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e46:	61fb      	str	r3, [r7, #28]
          break;
 8004e48:	e06c      	b.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8004e4a:	bf00      	nop
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	0800f3c4 	.word	0x0800f3c4
 8004e54:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004e58:	4ba5      	ldr	r3, [pc, #660]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e64:	d160      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004e66:	4ba2      	ldr	r3, [pc, #648]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e72:	d159      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004e74:	4b9e      	ldr	r3, [pc, #632]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	0a1b      	lsrs	r3, r3, #8
 8004e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	fb03 f202 	mul.w	r2, r3, r2
 8004e88:	4b99      	ldr	r3, [pc, #612]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	3301      	adds	r3, #1
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004e9a:	4b95      	ldr	r3, [pc, #596]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	0d5b      	lsrs	r3, r3, #21
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	61fb      	str	r3, [r7, #28]
          break;
 8004eb0:	e03a      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004eb2:	4b8f      	ldr	r3, [pc, #572]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ebe:	d135      	bne.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004ec0:	4b8b      	ldr	r3, [pc, #556]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ecc:	d12e      	bne.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004ece:	4b88      	ldr	r3, [pc, #544]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	fb03 f202 	mul.w	r2, r3, r2
 8004ee2:	4b83      	ldr	r3, [pc, #524]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	3301      	adds	r3, #1
 8004eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004ef4:	4b7e      	ldr	r3, [pc, #504]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	0d5b      	lsrs	r3, r3, #21
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	3301      	adds	r3, #1
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	61fb      	str	r3, [r7, #28]
          break;
 8004f0a:	e00f      	b.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004f0c:	4b78      	ldr	r3, [pc, #480]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d10a      	bne.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8004f1a:	4b76      	ldr	r3, [pc, #472]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004f1c:	61fb      	str	r3, [r7, #28]
          break;
 8004f1e:	e007      	b.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8004f20:	bf00      	nop
 8004f22:	e3e2      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004f24:	bf00      	nop
 8004f26:	e3e0      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004f28:	bf00      	nop
 8004f2a:	e3de      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004f2c:	bf00      	nop
 8004f2e:	e3dc      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8004f30:	bf00      	nop
      break;
 8004f32:	e3da      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004f34:	4b6e      	ldr	r3, [pc, #440]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d827      	bhi.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f65 	.word	0x08004f65
 8004f54:	08004f6d 	.word	0x08004f6d
 8004f58:	08004f81 	.word	0x08004f81
          frequency = HAL_RCC_GetPCLK2Freq();
 8004f5c:	f7ff f87c 	bl	8004058 <HAL_RCC_GetPCLK2Freq>
 8004f60:	61f8      	str	r0, [r7, #28]
          break;
 8004f62:	e01d      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f64:	f7fe ffca 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8004f68:	61f8      	str	r0, [r7, #28]
          break;
 8004f6a:	e019      	b.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f6c:	4b60      	ldr	r3, [pc, #384]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d10f      	bne.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8004f7a:	4b5f      	ldr	r3, [pc, #380]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004f7c:	61fb      	str	r3, [r7, #28]
          break;
 8004f7e:	e00c      	b.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f80:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8004f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f92:	61fb      	str	r3, [r7, #28]
          break;
 8004f94:	e003      	b.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 8004f96:	bf00      	nop
 8004f98:	e3a8      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f9a:	bf00      	nop
 8004f9c:	e3a6      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8004f9e:	bf00      	nop
        break;
 8004fa0:	e3a4      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004fa2:	4b53      	ldr	r3, [pc, #332]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa8:	f003 030c 	and.w	r3, r3, #12
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	d83a      	bhi.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	08004ff1 	.word	0x08004ff1
 8004fc0:	0800502b 	.word	0x0800502b
 8004fc4:	0800502b 	.word	0x0800502b
 8004fc8:	0800502b 	.word	0x0800502b
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	0800502b 	.word	0x0800502b
 8004fd4:	0800502b 	.word	0x0800502b
 8004fd8:	0800502b 	.word	0x0800502b
 8004fdc:	08005001 	.word	0x08005001
 8004fe0:	0800502b 	.word	0x0800502b
 8004fe4:	0800502b 	.word	0x0800502b
 8004fe8:	0800502b 	.word	0x0800502b
 8004fec:	08005015 	.word	0x08005015
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ff0:	f7ff f81c 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8004ff4:	61f8      	str	r0, [r7, #28]
          break;
 8004ff6:	e01d      	b.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ff8:	f7fe ff80 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8004ffc:	61f8      	str	r0, [r7, #28]
          break;
 8004ffe:	e019      	b.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005000:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500c:	d10f      	bne.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800500e:	4b3a      	ldr	r3, [pc, #232]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005010:	61fb      	str	r3, [r7, #28]
          break;
 8005012:	e00c      	b.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005014:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b02      	cmp	r3, #2
 8005020:	d107      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005026:	61fb      	str	r3, [r7, #28]
          break;
 8005028:	e003      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800502a:	bf00      	nop
 800502c:	e35e      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800502e:	bf00      	nop
 8005030:	e35c      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005032:	bf00      	nop
        break;
 8005034:	e35a      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005036:	4b2e      	ldr	r3, [pc, #184]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b30      	cmp	r3, #48	; 0x30
 8005046:	d021      	beq.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b30      	cmp	r3, #48	; 0x30
 800504c:	d829      	bhi.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b20      	cmp	r3, #32
 8005052:	d011      	beq.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b20      	cmp	r3, #32
 8005058:	d823      	bhi.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b10      	cmp	r3, #16
 8005064:	d004      	beq.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8005066:	e01c      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005068:	f7fe ffe0 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 800506c:	61f8      	str	r0, [r7, #28]
          break;
 800506e:	e01d      	b.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005070:	f7fe ff44 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8005074:	61f8      	str	r0, [r7, #28]
          break;
 8005076:	e019      	b.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005084:	d10f      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 8005086:	4b1c      	ldr	r3, [pc, #112]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005088:	61fb      	str	r3, [r7, #28]
          break;
 800508a:	e00c      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800508c:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b02      	cmp	r3, #2
 8005098:	d107      	bne.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	61fb      	str	r3, [r7, #28]
          break;
 80050a0:	e003      	b.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 80050a2:	bf00      	nop
 80050a4:	e322      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050a6:	bf00      	nop
 80050a8:	e320      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80050aa:	bf00      	nop
        break;
 80050ac:	e31e      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80050ae:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2bc0      	cmp	r3, #192	; 0xc0
 80050be:	d027      	beq.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2bc0      	cmp	r3, #192	; 0xc0
 80050c4:	d82f      	bhi.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b80      	cmp	r3, #128	; 0x80
 80050ca:	d017      	beq.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b80      	cmp	r3, #128	; 0x80
 80050d0:	d829      	bhi.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d004      	beq.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80050de:	e022      	b.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80050e0:	f7fe ffa4 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80050e4:	61f8      	str	r0, [r7, #28]
          break;
 80050e6:	e023      	b.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80050e8:	f7fe ff08 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 80050ec:	61f8      	str	r0, [r7, #28]
          break;
 80050ee:	e01f      	b.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80050f0:	40021000 	.word	0x40021000
 80050f4:	02dc6c00 	.word	0x02dc6c00
 80050f8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050fc:	4b9b      	ldr	r3, [pc, #620]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005108:	d10f      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800510a:	4b99      	ldr	r3, [pc, #612]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800510c:	61fb      	str	r3, [r7, #28]
          break;
 800510e:	e00c      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005110:	4b96      	ldr	r3, [pc, #600]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d107      	bne.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800511e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005122:	61fb      	str	r3, [r7, #28]
          break;
 8005124:	e003      	b.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8005126:	bf00      	nop
 8005128:	e2e0      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800512a:	bf00      	nop
 800512c:	e2de      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800512e:	bf00      	nop
        break;
 8005130:	e2dc      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005132:	4b8e      	ldr	r3, [pc, #568]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005144:	d025      	beq.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800514c:	d82c      	bhi.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005154:	d013      	beq.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800515c:	d824      	bhi.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516a:	d004      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800516c:	e01c      	b.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800516e:	f7fe ff5d 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8005172:	61f8      	str	r0, [r7, #28]
          break;
 8005174:	e01d      	b.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005176:	f7fe fec1 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 800517a:	61f8      	str	r0, [r7, #28]
          break;
 800517c:	e019      	b.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800517e:	4b7b      	ldr	r3, [pc, #492]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518a:	d10f      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800518c:	4b78      	ldr	r3, [pc, #480]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800518e:	61fb      	str	r3, [r7, #28]
          break;
 8005190:	e00c      	b.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005192:	4b76      	ldr	r3, [pc, #472]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b02      	cmp	r3, #2
 800519e:	d107      	bne.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 80051a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051a4:	61fb      	str	r3, [r7, #28]
          break;
 80051a6:	e003      	b.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 80051a8:	bf00      	nop
 80051aa:	e29f      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051ac:	bf00      	nop
 80051ae:	e29d      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80051b0:	bf00      	nop
        break;
 80051b2:	e29b      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80051b4:	4b6d      	ldr	r3, [pc, #436]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051c6:	d025      	beq.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ce:	d82c      	bhi.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d6:	d013      	beq.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051de:	d824      	bhi.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ec:	d004      	beq.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 80051ee:	e01c      	b.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80051f0:	f7fe ff1c 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80051f4:	61f8      	str	r0, [r7, #28]
          break;
 80051f6:	e01d      	b.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 80051f8:	f7fe fe80 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 80051fc:	61f8      	str	r0, [r7, #28]
          break;
 80051fe:	e019      	b.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005200:	4b5a      	ldr	r3, [pc, #360]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520c:	d10f      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800520e:	4b58      	ldr	r3, [pc, #352]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005210:	61fb      	str	r3, [r7, #28]
          break;
 8005212:	e00c      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005214:	4b55      	ldr	r3, [pc, #340]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b02      	cmp	r3, #2
 8005220:	d107      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8005222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005226:	61fb      	str	r3, [r7, #28]
          break;
 8005228:	e003      	b.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800522a:	bf00      	nop
 800522c:	e25e      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800522e:	bf00      	nop
 8005230:	e25c      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005232:	bf00      	nop
        break;
 8005234:	e25a      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005236:	4b4d      	ldr	r3, [pc, #308]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005248:	d007      	beq.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005250:	d12f      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005252:	f7fe fe53 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8005256:	61f8      	str	r0, [r7, #28]
          break;
 8005258:	e02e      	b.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800525a:	4b44      	ldr	r3, [pc, #272]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005266:	d126      	bne.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005268:	4b40      	ldr	r3, [pc, #256]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d020      	beq.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005274:	4b3d      	ldr	r3, [pc, #244]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	0a1b      	lsrs	r3, r3, #8
 800527a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800527e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	fb03 f202 	mul.w	r2, r3, r2
 8005288:	4b38      	ldr	r3, [pc, #224]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	091b      	lsrs	r3, r3, #4
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	3301      	adds	r3, #1
 8005294:	fbb2 f3f3 	udiv	r3, r2, r3
 8005298:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800529a:	4b34      	ldr	r3, [pc, #208]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	0e5b      	lsrs	r3, r3, #25
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	3301      	adds	r3, #1
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ae:	61fb      	str	r3, [r7, #28]
          break;
 80052b0:	e001      	b.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 80052b2:	bf00      	nop
 80052b4:	e21a      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80052b6:	bf00      	nop
        break;
 80052b8:	e218      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80052ba:	4b2c      	ldr	r3, [pc, #176]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80052bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 80052cc:	f7fe fec4 	bl	8004058 <HAL_RCC_GetPCLK2Freq>
 80052d0:	61f8      	str	r0, [r7, #28]
        break;
 80052d2:	e20b      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 80052d4:	f7fe fe12 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 80052d8:	61f8      	str	r0, [r7, #28]
        break;
 80052da:	e207      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80052dc:	4b23      	ldr	r3, [pc, #140]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80052de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052e2:	f003 0318 	and.w	r3, r3, #24
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d010      	beq.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d834      	bhi.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d024      	beq.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8005300:	e02d      	b.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005302:	69b9      	ldr	r1, [r7, #24]
 8005304:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005308:	f000 fbe2 	bl	8005ad0 <RCCEx_GetSAIxPeriphCLKFreq>
 800530c:	61f8      	str	r0, [r7, #28]
          break;
 800530e:	e02b      	b.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005310:	4b16      	ldr	r3, [pc, #88]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d122      	bne.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800531c:	4b13      	ldr	r3, [pc, #76]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005328:	4b10      	ldr	r3, [pc, #64]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	e005      	b.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8005334:	4b0d      	ldr	r3, [pc, #52]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	4a0c      	ldr	r2, [pc, #48]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005346:	61fb      	str	r3, [r7, #28]
          break;
 8005348:	e00b      	b.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800534a:	4b08      	ldr	r3, [pc, #32]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005356:	d106      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800535a:	61fb      	str	r3, [r7, #28]
          break;
 800535c:	e003      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800535e:	bf00      	nop
 8005360:	e1c4      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005362:	bf00      	nop
 8005364:	e1c2      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005366:	bf00      	nop
        break;
 8005368:	e1c0      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000
 8005370:	00f42400 	.word	0x00f42400
 8005374:	0800f3c4 	.word	0x0800f3c4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005378:	4b96      	ldr	r3, [pc, #600]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538a:	d013      	beq.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005392:	d819      	bhi.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a0:	d004      	beq.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 80053a2:	e011      	b.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053a4:	f7fe fe42 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80053a8:	61f8      	str	r0, [r7, #28]
          break;
 80053aa:	e010      	b.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 80053ac:	f7fe fda6 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 80053b0:	61f8      	str	r0, [r7, #28]
          break;
 80053b2:	e00c      	b.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053b4:	4b87      	ldr	r3, [pc, #540]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c0:	d104      	bne.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 80053c2:	4b85      	ldr	r3, [pc, #532]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80053c4:	61fb      	str	r3, [r7, #28]
          break;
 80053c6:	e001      	b.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 80053c8:	bf00      	nop
 80053ca:	e18f      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80053cc:	bf00      	nop
        break;
 80053ce:	e18d      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80053d0:	4b80      	ldr	r3, [pc, #512]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e2:	d013      	beq.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ea:	d819      	bhi.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053f8:	d004      	beq.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 80053fa:	e011      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053fc:	f7fe fe16 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8005400:	61f8      	str	r0, [r7, #28]
          break;
 8005402:	e010      	b.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005404:	f7fe fd7a 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8005408:	61f8      	str	r0, [r7, #28]
          break;
 800540a:	e00c      	b.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800540c:	4b71      	ldr	r3, [pc, #452]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005418:	d104      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800541a:	4b6f      	ldr	r3, [pc, #444]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800541c:	61fb      	str	r3, [r7, #28]
          break;
 800541e:	e001      	b.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8005420:	bf00      	nop
 8005422:	e163      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005424:	bf00      	nop
        break;
 8005426:	e161      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005428:	4b6a      	ldr	r3, [pc, #424]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800543a:	d013      	beq.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005442:	d819      	bhi.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d004      	beq.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005450:	d004      	beq.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8005452:	e011      	b.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005454:	f7fe fdea 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8005458:	61f8      	str	r0, [r7, #28]
          break;
 800545a:	e010      	b.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800545c:	f7fe fd4e 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8005460:	61f8      	str	r0, [r7, #28]
          break;
 8005462:	e00c      	b.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005464:	4b5b      	ldr	r3, [pc, #364]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005470:	d104      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8005472:	4b59      	ldr	r3, [pc, #356]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8005474:	61fb      	str	r3, [r7, #28]
          break;
 8005476:	e001      	b.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8005478:	bf00      	nop
 800547a:	e137      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800547c:	bf00      	nop
        break;
 800547e:	e135      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005480:	4b54      	ldr	r3, [pc, #336]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d011      	beq.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d818      	bhi.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d004      	beq.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 80054a4:	e011      	b.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80054a6:	f7fe fdc1 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80054aa:	61f8      	str	r0, [r7, #28]
          break;
 80054ac:	e010      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 80054ae:	f7fe fd25 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 80054b2:	61f8      	str	r0, [r7, #28]
          break;
 80054b4:	e00c      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054b6:	4b47      	ldr	r3, [pc, #284]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c2:	d104      	bne.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 80054c4:	4b44      	ldr	r3, [pc, #272]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80054c6:	61fb      	str	r3, [r7, #28]
          break;
 80054c8:	e001      	b.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 80054ca:	bf00      	nop
 80054cc:	e10e      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80054ce:	bf00      	nop
        break;
 80054d0:	e10c      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80054d2:	4b40      	ldr	r3, [pc, #256]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054e4:	d02c      	beq.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054ec:	d833      	bhi.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054f4:	d01a      	beq.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054fc:	d82b      	bhi.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800550a:	d004      	beq.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800550c:	e023      	b.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800550e:	f7fe fd8d 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8005512:	61f8      	str	r0, [r7, #28]
          break;
 8005514:	e026      	b.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005516:	4b2f      	ldr	r3, [pc, #188]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b02      	cmp	r3, #2
 8005522:	d11a      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8005524:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005528:	61fb      	str	r3, [r7, #28]
          break;
 800552a:	e016      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800552c:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005538:	d111      	bne.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800553a:	4b27      	ldr	r3, [pc, #156]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800553c:	61fb      	str	r3, [r7, #28]
          break;
 800553e:	e00e      	b.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005540:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b02      	cmp	r3, #2
 800554c:	d109      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800554e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005552:	61fb      	str	r3, [r7, #28]
          break;
 8005554:	e005      	b.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8005556:	bf00      	nop
 8005558:	e0c8      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800555a:	bf00      	nop
 800555c:	e0c6      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800555e:	bf00      	nop
 8005560:	e0c4      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8005562:	bf00      	nop
        break;
 8005564:	e0c2      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005566:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005578:	d030      	beq.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005580:	d837      	bhi.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005588:	d01a      	beq.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005590:	d82f      	bhi.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800559e:	d004      	beq.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 80055a0:	e027      	b.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80055a2:	f7fe fd43 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80055a6:	61f8      	str	r0, [r7, #28]
          break;
 80055a8:	e02a      	b.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80055ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d11e      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 80055b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80055bc:	61fb      	str	r3, [r7, #28]
          break;
 80055be:	e01a      	b.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055c0:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055cc:	d115      	bne.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 80055ce:	4b02      	ldr	r3, [pc, #8]	; (80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 80055d0:	61fb      	str	r3, [r7, #28]
          break;
 80055d2:	e012      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80055d4:	40021000 	.word	0x40021000
 80055d8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80055dc:	4b46      	ldr	r3, [pc, #280]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d109      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 80055ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ee:	61fb      	str	r3, [r7, #28]
          break;
 80055f0:	e005      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 80055f2:	bf00      	nop
 80055f4:	e07a      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80055f6:	bf00      	nop
 80055f8:	e078      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80055fa:	bf00      	nop
 80055fc:	e076      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80055fe:	bf00      	nop
        break;
 8005600:	e074      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005602:	4b3d      	ldr	r3, [pc, #244]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005608:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005614:	d02c      	beq.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800561c:	d855      	bhi.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800562a:	d004      	beq.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800562c:	e04d      	b.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800562e:	f7fe fc65 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8005632:	61f8      	str	r0, [r7, #28]
          break;
 8005634:	e04e      	b.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005636:	4b30      	ldr	r3, [pc, #192]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b02      	cmp	r3, #2
 8005640:	d145      	bne.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005642:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800564e:	4b2a      	ldr	r3, [pc, #168]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	091b      	lsrs	r3, r3, #4
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	e005      	b.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800565a:	4b27      	ldr	r3, [pc, #156]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800565c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	4a25      	ldr	r2, [pc, #148]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8005668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566c:	61fb      	str	r3, [r7, #28]
          break;
 800566e:	e02e      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005670:	4b21      	ldr	r3, [pc, #132]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800567c:	d129      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800567e:	4b1e      	ldr	r3, [pc, #120]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800568a:	d122      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800568c:	4b1a      	ldr	r3, [pc, #104]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005696:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	fb03 f202 	mul.w	r2, r3, r2
 80056a0:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	3301      	adds	r3, #1
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80056b2:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	0d5b      	lsrs	r3, r3, #21
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	3301      	adds	r3, #1
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	61fb      	str	r3, [r7, #28]
          break;
 80056c8:	e003      	b.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 80056ca:	bf00      	nop
 80056cc:	e00e      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056ce:	bf00      	nop
 80056d0:	e00c      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80056d2:	bf00      	nop
        break;
 80056d4:	e00a      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80056d6:	bf00      	nop
 80056d8:	e008      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80056da:	bf00      	nop
 80056dc:	e006      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80056de:	bf00      	nop
 80056e0:	e004      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80056e2:	bf00      	nop
 80056e4:	e002      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 80056ea:	bf00      	nop
    }
  }

  return(frequency);
 80056ec:	69fb      	ldr	r3, [r7, #28]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40021000 	.word	0x40021000
 80056fc:	0800f3c4 	.word	0x0800f3c4

08005700 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800570e:	4b72      	ldr	r3, [pc, #456]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800571a:	4b6f      	ldr	r3, [pc, #444]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0203 	and.w	r2, r3, #3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d103      	bne.n	8005732 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
       ||
 800572e:	2b00      	cmp	r3, #0
 8005730:	d142      	bne.n	80057b8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
 8005736:	e03f      	b.n	80057b8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d018      	beq.n	8005772 <RCCEx_PLLSAI1_Config+0x72>
 8005740:	2b03      	cmp	r3, #3
 8005742:	d825      	bhi.n	8005790 <RCCEx_PLLSAI1_Config+0x90>
 8005744:	2b01      	cmp	r3, #1
 8005746:	d002      	beq.n	800574e <RCCEx_PLLSAI1_Config+0x4e>
 8005748:	2b02      	cmp	r3, #2
 800574a:	d009      	beq.n	8005760 <RCCEx_PLLSAI1_Config+0x60>
 800574c:	e020      	b.n	8005790 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800574e:	4b62      	ldr	r3, [pc, #392]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d11d      	bne.n	8005796 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800575e:	e01a      	b.n	8005796 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005760:	4b5d      	ldr	r3, [pc, #372]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005768:	2b00      	cmp	r3, #0
 800576a:	d116      	bne.n	800579a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005770:	e013      	b.n	800579a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005772:	4b59      	ldr	r3, [pc, #356]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10f      	bne.n	800579e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800577e:	4b56      	ldr	r3, [pc, #344]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800578e:	e006      	b.n	800579e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
      break;
 8005794:	e004      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005796:	bf00      	nop
 8005798:	e002      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800579a:	bf00      	nop
 800579c:	e000      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800579e:	bf00      	nop
    }

    if(status == HAL_OK)
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d108      	bne.n	80057b8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80057a6:	4b4c      	ldr	r3, [pc, #304]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f023 0203 	bic.w	r2, r3, #3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4949      	ldr	r1, [pc, #292]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f040 8086 	bne.w	80058cc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057c0:	4b45      	ldr	r3, [pc, #276]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a44      	ldr	r2, [pc, #272]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057cc:	f7fb fea4 	bl	8001518 <HAL_GetTick>
 80057d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057d2:	e009      	b.n	80057e8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057d4:	f7fb fea0 	bl	8001518 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d902      	bls.n	80057e8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	73fb      	strb	r3, [r7, #15]
        break;
 80057e6:	e005      	b.n	80057f4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057e8:	4b3b      	ldr	r3, [pc, #236]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ef      	bne.n	80057d4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d168      	bne.n	80058cc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d113      	bne.n	8005828 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005800:	4b35      	ldr	r3, [pc, #212]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	4b35      	ldr	r3, [pc, #212]	; (80058dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005806:	4013      	ands	r3, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6892      	ldr	r2, [r2, #8]
 800580c:	0211      	lsls	r1, r2, #8
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68d2      	ldr	r2, [r2, #12]
 8005812:	06d2      	lsls	r2, r2, #27
 8005814:	4311      	orrs	r1, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6852      	ldr	r2, [r2, #4]
 800581a:	3a01      	subs	r2, #1
 800581c:	0112      	lsls	r2, r2, #4
 800581e:	430a      	orrs	r2, r1
 8005820:	492d      	ldr	r1, [pc, #180]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005822:	4313      	orrs	r3, r2
 8005824:	610b      	str	r3, [r1, #16]
 8005826:	e02d      	b.n	8005884 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d115      	bne.n	800585a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800582e:	4b2a      	ldr	r3, [pc, #168]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	4b2b      	ldr	r3, [pc, #172]	; (80058e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005834:	4013      	ands	r3, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6892      	ldr	r2, [r2, #8]
 800583a:	0211      	lsls	r1, r2, #8
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6912      	ldr	r2, [r2, #16]
 8005840:	0852      	lsrs	r2, r2, #1
 8005842:	3a01      	subs	r2, #1
 8005844:	0552      	lsls	r2, r2, #21
 8005846:	4311      	orrs	r1, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6852      	ldr	r2, [r2, #4]
 800584c:	3a01      	subs	r2, #1
 800584e:	0112      	lsls	r2, r2, #4
 8005850:	430a      	orrs	r2, r1
 8005852:	4921      	ldr	r1, [pc, #132]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005854:	4313      	orrs	r3, r2
 8005856:	610b      	str	r3, [r1, #16]
 8005858:	e014      	b.n	8005884 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800585a:	4b1f      	ldr	r3, [pc, #124]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	4b21      	ldr	r3, [pc, #132]	; (80058e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005860:	4013      	ands	r3, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6892      	ldr	r2, [r2, #8]
 8005866:	0211      	lsls	r1, r2, #8
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6952      	ldr	r2, [r2, #20]
 800586c:	0852      	lsrs	r2, r2, #1
 800586e:	3a01      	subs	r2, #1
 8005870:	0652      	lsls	r2, r2, #25
 8005872:	4311      	orrs	r1, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6852      	ldr	r2, [r2, #4]
 8005878:	3a01      	subs	r2, #1
 800587a:	0112      	lsls	r2, r2, #4
 800587c:	430a      	orrs	r2, r1
 800587e:	4916      	ldr	r1, [pc, #88]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005880:	4313      	orrs	r3, r2
 8005882:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005884:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800588a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800588e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005890:	f7fb fe42 	bl	8001518 <HAL_GetTick>
 8005894:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005896:	e009      	b.n	80058ac <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005898:	f7fb fe3e 	bl	8001518 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d902      	bls.n	80058ac <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	73fb      	strb	r3, [r7, #15]
          break;
 80058aa:	e005      	b.n	80058b8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0ef      	beq.n	8005898 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	4904      	ldr	r1, [pc, #16]	; (80058d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40021000 	.word	0x40021000
 80058dc:	07ff800f 	.word	0x07ff800f
 80058e0:	ff9f800f 	.word	0xff9f800f
 80058e4:	f9ff800f 	.word	0xf9ff800f

080058e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058f6:	4b72      	ldr	r3, [pc, #456]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00e      	beq.n	8005920 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005902:	4b6f      	ldr	r3, [pc, #444]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f003 0203 	and.w	r2, r3, #3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d103      	bne.n	800591a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
       ||
 8005916:	2b00      	cmp	r3, #0
 8005918:	d142      	bne.n	80059a0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	73fb      	strb	r3, [r7, #15]
 800591e:	e03f      	b.n	80059a0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d018      	beq.n	800595a <RCCEx_PLLSAI2_Config+0x72>
 8005928:	2b03      	cmp	r3, #3
 800592a:	d825      	bhi.n	8005978 <RCCEx_PLLSAI2_Config+0x90>
 800592c:	2b01      	cmp	r3, #1
 800592e:	d002      	beq.n	8005936 <RCCEx_PLLSAI2_Config+0x4e>
 8005930:	2b02      	cmp	r3, #2
 8005932:	d009      	beq.n	8005948 <RCCEx_PLLSAI2_Config+0x60>
 8005934:	e020      	b.n	8005978 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005936:	4b62      	ldr	r3, [pc, #392]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d11d      	bne.n	800597e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005946:	e01a      	b.n	800597e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005948:	4b5d      	ldr	r3, [pc, #372]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d116      	bne.n	8005982 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005958:	e013      	b.n	8005982 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800595a:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10f      	bne.n	8005986 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005966:	4b56      	ldr	r3, [pc, #344]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005976:	e006      	b.n	8005986 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
      break;
 800597c:	e004      	b.n	8005988 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800597e:	bf00      	nop
 8005980:	e002      	b.n	8005988 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005982:	bf00      	nop
 8005984:	e000      	b.n	8005988 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005986:	bf00      	nop
    }

    if(status == HAL_OK)
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d108      	bne.n	80059a0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800598e:	4b4c      	ldr	r3, [pc, #304]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f023 0203 	bic.w	r2, r3, #3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4949      	ldr	r1, [pc, #292]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800599c:	4313      	orrs	r3, r2
 800599e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 8086 	bne.w	8005ab4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059a8:	4b45      	ldr	r3, [pc, #276]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a44      	ldr	r2, [pc, #272]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b4:	f7fb fdb0 	bl	8001518 <HAL_GetTick>
 80059b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059ba:	e009      	b.n	80059d0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059bc:	f7fb fdac 	bl	8001518 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d902      	bls.n	80059d0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	73fb      	strb	r3, [r7, #15]
        break;
 80059ce:	e005      	b.n	80059dc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059d0:	4b3b      	ldr	r3, [pc, #236]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1ef      	bne.n	80059bc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d168      	bne.n	8005ab4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d113      	bne.n	8005a10 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059e8:	4b35      	ldr	r3, [pc, #212]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	4b35      	ldr	r3, [pc, #212]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6892      	ldr	r2, [r2, #8]
 80059f4:	0211      	lsls	r1, r2, #8
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	68d2      	ldr	r2, [r2, #12]
 80059fa:	06d2      	lsls	r2, r2, #27
 80059fc:	4311      	orrs	r1, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6852      	ldr	r2, [r2, #4]
 8005a02:	3a01      	subs	r2, #1
 8005a04:	0112      	lsls	r2, r2, #4
 8005a06:	430a      	orrs	r2, r1
 8005a08:	492d      	ldr	r1, [pc, #180]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	614b      	str	r3, [r1, #20]
 8005a0e:	e02d      	b.n	8005a6c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d115      	bne.n	8005a42 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a16:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6892      	ldr	r2, [r2, #8]
 8005a22:	0211      	lsls	r1, r2, #8
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6912      	ldr	r2, [r2, #16]
 8005a28:	0852      	lsrs	r2, r2, #1
 8005a2a:	3a01      	subs	r2, #1
 8005a2c:	0552      	lsls	r2, r2, #21
 8005a2e:	4311      	orrs	r1, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6852      	ldr	r2, [r2, #4]
 8005a34:	3a01      	subs	r2, #1
 8005a36:	0112      	lsls	r2, r2, #4
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	4921      	ldr	r1, [pc, #132]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	614b      	str	r3, [r1, #20]
 8005a40:	e014      	b.n	8005a6c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a42:	4b1f      	ldr	r3, [pc, #124]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a44:	695a      	ldr	r2, [r3, #20]
 8005a46:	4b21      	ldr	r3, [pc, #132]	; (8005acc <RCCEx_PLLSAI2_Config+0x1e4>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6892      	ldr	r2, [r2, #8]
 8005a4e:	0211      	lsls	r1, r2, #8
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6952      	ldr	r2, [r2, #20]
 8005a54:	0852      	lsrs	r2, r2, #1
 8005a56:	3a01      	subs	r2, #1
 8005a58:	0652      	lsls	r2, r2, #25
 8005a5a:	4311      	orrs	r1, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6852      	ldr	r2, [r2, #4]
 8005a60:	3a01      	subs	r2, #1
 8005a62:	0112      	lsls	r2, r2, #4
 8005a64:	430a      	orrs	r2, r1
 8005a66:	4916      	ldr	r1, [pc, #88]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a6c:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a78:	f7fb fd4e 	bl	8001518 <HAL_GetTick>
 8005a7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a7e:	e009      	b.n	8005a94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a80:	f7fb fd4a 	bl	8001518 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d902      	bls.n	8005a94 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	73fb      	strb	r3, [r7, #15]
          break;
 8005a92:	e005      	b.n	8005aa0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0ef      	beq.n	8005a80 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005aa6:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	4904      	ldr	r1, [pc, #16]	; (8005ac0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	07ff800f 	.word	0x07ff800f
 8005ac8:	ff9f800f 	.word	0xff9f800f
 8005acc:	f9ff800f 	.word	0xf9ff800f

08005ad0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b089      	sub	sp, #36	; 0x24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aec:	d10b      	bne.n	8005b06 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005aee:	4b7e      	ldr	r3, [pc, #504]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005af4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005af8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b60      	cmp	r3, #96	; 0x60
 8005afe:	d112      	bne.n	8005b26 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005b00:	4b7a      	ldr	r3, [pc, #488]	; (8005cec <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	e00f      	b.n	8005b26 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0c:	d10b      	bne.n	8005b26 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005b0e:	4b76      	ldr	r3, [pc, #472]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b18:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b20:	d101      	bne.n	8005b26 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005b22:	4b72      	ldr	r3, [pc, #456]	; (8005cec <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005b24:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f040 80d6 	bne.w	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d003      	beq.n	8005b40 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b3e:	d13b      	bne.n	8005bb8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005b40:	4b69      	ldr	r3, [pc, #420]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b4c:	f040 80c4 	bne.w	8005cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005b50:	4b65      	ldr	r3, [pc, #404]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 80bd 	beq.w	8005cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005b5e:	4b62      	ldr	r3, [pc, #392]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	091b      	lsrs	r3, r3, #4
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	3301      	adds	r3, #1
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005b72:	4b5d      	ldr	r3, [pc, #372]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	0a1b      	lsrs	r3, r3, #8
 8005b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005b7e:	4b5a      	ldr	r3, [pc, #360]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	0edb      	lsrs	r3, r3, #27
 8005b84:	f003 031f 	and.w	r3, r3, #31
 8005b88:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005b90:	4b55      	ldr	r3, [pc, #340]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8005b9c:	2311      	movs	r3, #17
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	e001      	b.n	8005ba6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8005ba2:	2307      	movs	r3, #7
 8005ba4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	fb03 f202 	mul.w	r2, r3, r2
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005bb6:	e08f      	b.n	8005cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d13a      	bne.n	8005c34 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005bbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bca:	f040 8086 	bne.w	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005bce:	4b46      	ldr	r3, [pc, #280]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d07f      	beq.n	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005bda:	4b43      	ldr	r3, [pc, #268]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	091b      	lsrs	r3, r3, #4
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	3301      	adds	r3, #1
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bec:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005bee:	4b3e      	ldr	r3, [pc, #248]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	0edb      	lsrs	r3, r3, #27
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005c0c:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8005c18:	2311      	movs	r3, #17
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e001      	b.n	8005c22 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005c1e:	2307      	movs	r3, #7
 8005c20:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	fb03 f202 	mul.w	r2, r3, r2
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	e052      	b.n	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b80      	cmp	r3, #128	; 0x80
 8005c38:	d003      	beq.n	8005c42 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c40:	d109      	bne.n	8005c56 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c42:	4b29      	ldr	r3, [pc, #164]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4e:	d144      	bne.n	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005c50:	4b27      	ldr	r3, [pc, #156]	; (8005cf0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005c52:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c54:	e041      	b.n	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d003      	beq.n	8005c64 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c62:	d13a      	bne.n	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005c64:	4b20      	ldr	r3, [pc, #128]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c70:	d133      	bne.n	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005c72:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d02d      	beq.n	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	091b      	lsrs	r3, r3, #4
 8005c84:	f003 030f 	and.w	r3, r3, #15
 8005c88:	3301      	adds	r3, #1
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005c92:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c9c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	0edb      	lsrs	r3, r3, #27
 8005ca4:	f003 031f 	and.w	r3, r3, #31
 8005ca8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005cb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8005cbc:	2311      	movs	r3, #17
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	e001      	b.n	8005cc6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8005cc2:	2307      	movs	r3, #7
 8005cc4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	fb03 f202 	mul.w	r2, r3, r2
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	e000      	b.n	8005cda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005cd8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005cda:	69fb      	ldr	r3, [r7, #28]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3724      	adds	r7, #36	; 0x24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	001fff68 	.word	0x001fff68
 8005cf0:	00f42400 	.word	0x00f42400

08005cf4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e078      	b.n	8005df8 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d105      	bne.n	8005d1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7fb f933 	bl	8000f84 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2203      	movs	r2, #3
 8005d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f86a 	bl	8005e00 <HAL_SD_InitCard>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e060      	b.n	8005df8 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005d36:	f107 0308 	add.w	r3, r7, #8
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fdcd 	bl	80068dc <HAL_SD_GetCardStatus>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e055      	b.n	8005df8 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005d4c:	7e3b      	ldrb	r3, [r7, #24]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005d52:	7e7b      	ldrb	r3, [r7, #25]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10a      	bne.n	8005d76 <HAL_SD_Init+0x82>
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <HAL_SD_Init+0x78>
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d72:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d74:	e00b      	b.n	8005d8e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d104      	bne.n	8005d88 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d86:	e002      	b.n	8005d8e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fe83 	bl	8006aa0 <HAL_SD_ConfigWideBusOperation>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e029      	b.n	8005df8 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005da4:	f7fb fbb8 	bl	8001518 <HAL_GetTick>
 8005da8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005daa:	e014      	b.n	8005dd6 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005dac:	f7fb fbb4 	bl	8001518 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dba:	d10c      	bne.n	8005dd6 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e010      	b.n	8005df8 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 ff76 	bl	8006cc8 <HAL_SD_GetCardState>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d1e4      	bne.n	8005dac <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3728      	adds	r7, #40	; 0x28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005e00:	b5b0      	push	{r4, r5, r7, lr}
 8005e02:	b08e      	sub	sp, #56	; 0x38
 8005e04:	af04      	add	r7, sp, #16
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005e18:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005e1c:	f7fe fd4e 	bl	80048bc <HAL_RCCEx_GetPeriphCLKFreq>
 8005e20:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d109      	bne.n	8005e3c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e079      	b.n	8005f30 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	4a3d      	ldr	r2, [pc, #244]	; (8005f38 <HAL_SD_InitCard+0x138>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d107      	bne.n	8005e68 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0210 	orr.w	r2, r2, #16
 8005e66:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681d      	ldr	r5, [r3, #0]
 8005e6c:	466c      	mov	r4, sp
 8005e6e:	f107 0314 	add.w	r3, r7, #20
 8005e72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e7a:	f107 0308 	add.w	r3, r7, #8
 8005e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e80:	4628      	mov	r0, r5
 8005e82:	f003 fcab 	bl	80097dc <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f003 fcee 	bl	800986c <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005e9c:	4a27      	ldr	r2, [pc, #156]	; (8005f3c <HAL_SD_InitCard+0x13c>)
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fb fb42 	bl	8001530 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 ffeb 	bl	8006e88 <SD_PowerON>
 8005eb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e02e      	b.n	8005f30 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 ff18 	bl	8006d08 <SD_InitCard>
 8005ed8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e01b      	b.n	8005f30 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f00:	4618      	mov	r0, r3
 8005f02:	f003 fd49 	bl	8009998 <SDMMC_CmdBlockLength>
 8005f06:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00f      	beq.n	8005f2e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a0b      	ldr	r2, [pc, #44]	; (8005f40 <HAL_SD_InitCard+0x140>)
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3728      	adds	r7, #40	; 0x28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bdb0      	pop	{r4, r5, r7, pc}
 8005f38:	014f8b59 	.word	0x014f8b59
 8005f3c:	00012110 	.word	0x00012110
 8005f40:	1fe00fff 	.word	0x1fe00fff

08005f44 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b092      	sub	sp, #72	; 0x48
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005f52:	f7fb fae1 	bl	8001518 <HAL_GetTick>
 8005f56:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e170      	b.n	8006258 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	f040 8163 	bne.w	800624a <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	441a      	add	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d907      	bls.n	8005fa8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e157      	b.n	8006258 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2203      	movs	r2, #3
 8005fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d002      	beq.n	8005fc6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	025b      	lsls	r3, r3, #9
 8005fc4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fca:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	025b      	lsls	r3, r3, #9
 8005fd0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005fd2:	2390      	movs	r3, #144	; 0x90
 8005fd4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f107 0214 	add.w	r2, r7, #20
 8005fea:	4611      	mov	r1, r2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f003 fca7 	bl	8009940 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006000:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d90a      	bls.n	800601e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2202      	movs	r2, #2
 800600c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006014:	4618      	mov	r0, r3
 8006016:	f003 fd05 	bl	8009a24 <SDMMC_CmdReadMultiBlock>
 800601a:	6478      	str	r0, [r7, #68]	; 0x44
 800601c:	e009      	b.n	8006032 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800602a:	4618      	mov	r0, r3
 800602c:	f003 fcd7 	bl	80099de <SDMMC_CmdReadSingleBlock>
 8006030:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006034:	2b00      	cmp	r3, #0
 8006036:	d012      	beq.n	800605e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a88      	ldr	r2, [pc, #544]	; (8006260 <HAL_SD_ReadBlocks+0x31c>)
 800603e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006046:	431a      	orrs	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e0fc      	b.n	8006258 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006062:	e061      	b.n	8006128 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d03c      	beq.n	80060ec <HAL_SD_ReadBlocks+0x1a8>
 8006072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d039      	beq.n	80060ec <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006078:	2300      	movs	r3, #0
 800607a:	643b      	str	r3, [r7, #64]	; 0x40
 800607c:	e033      	b.n	80060e6 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f003 fbd4 	bl	8009830 <SDMMC_ReadFIFO>
 8006088:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	b2da      	uxtb	r2, r3
 800608e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006090:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	3301      	adds	r3, #1
 8006096:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609a:	3b01      	subs	r3, #1
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	0a1b      	lsrs	r3, r3, #8
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80060a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060aa:	3301      	adds	r3, #1
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80060ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b0:	3b01      	subs	r3, #1
 80060b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	0c1b      	lsrs	r3, r3, #16
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	3301      	adds	r3, #1
 80060c2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80060c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c6:	3b01      	subs	r3, #1
 80060c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	0e1b      	lsrs	r3, r3, #24
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80060d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d6:	3301      	adds	r3, #1
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80060da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060dc:	3b01      	subs	r3, #1
 80060de:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80060e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e2:	3301      	adds	r3, #1
 80060e4:	643b      	str	r3, [r7, #64]	; 0x40
 80060e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e8:	2b07      	cmp	r3, #7
 80060ea:	d9c8      	bls.n	800607e <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80060ec:	f7fb fa14 	bl	8001518 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d902      	bls.n	8006102 <HAL_SD_ReadBlocks+0x1be>
 80060fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d112      	bne.n	8006128 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a56      	ldr	r2, [pc, #344]	; (8006260 <HAL_SD_ReadBlocks+0x31c>)
 8006108:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e097      	b.n	8006258 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006132:	2b00      	cmp	r3, #0
 8006134:	d096      	beq.n	8006064 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006144:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006150:	2b00      	cmp	r3, #0
 8006152:	d022      	beq.n	800619a <HAL_SD_ReadBlocks+0x256>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d91f      	bls.n	800619a <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	2b03      	cmp	r3, #3
 8006160:	d01b      	beq.n	800619a <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f003 fcc6 	bl	8009af8 <SDMMC_CmdStopTransfer>
 800616c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800616e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006170:	2b00      	cmp	r3, #0
 8006172:	d012      	beq.n	800619a <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a39      	ldr	r2, [pc, #228]	; (8006260 <HAL_SD_ReadBlocks+0x31c>)
 800617a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006182:	431a      	orrs	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e05e      	b.n	8006258 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d012      	beq.n	80061ce <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a2c      	ldr	r2, [pc, #176]	; (8006260 <HAL_SD_ReadBlocks+0x31c>)
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	f043 0208 	orr.w	r2, r3, #8
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e044      	b.n	8006258 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d012      	beq.n	8006202 <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1f      	ldr	r2, [pc, #124]	; (8006260 <HAL_SD_ReadBlocks+0x31c>)
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	f043 0202 	orr.w	r2, r3, #2
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e02a      	b.n	8006258 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b00      	cmp	r3, #0
 800620e:	d012      	beq.n	8006236 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a12      	ldr	r2, [pc, #72]	; (8006260 <HAL_SD_ReadBlocks+0x31c>)
 8006216:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	f043 0220 	orr.w	r2, r3, #32
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e010      	b.n	8006258 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a0a      	ldr	r2, [pc, #40]	; (8006264 <HAL_SD_ReadBlocks+0x320>)
 800623c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	e006      	b.n	8006258 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
  }
}
 8006258:	4618      	mov	r0, r3
 800625a:	3748      	adds	r7, #72	; 0x48
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	1fe00fff 	.word	0x1fe00fff
 8006264:	18000f3a 	.word	0x18000f3a

08006268 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b092      	sub	sp, #72	; 0x48
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006276:	f7fb f94f 	bl	8001518 <HAL_GetTick>
 800627a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d107      	bne.n	800629a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e174      	b.n	8006584 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	f040 8167 	bne.w	8006576 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80062ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	441a      	add	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d907      	bls.n	80062cc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e15b      	b.n	8006584 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2203      	movs	r2, #3
 80062d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2200      	movs	r2, #0
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d002      	beq.n	80062ea <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	025b      	lsls	r3, r3, #9
 80062e8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062ee:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	025b      	lsls	r3, r3, #9
 80062f4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80062f6:	2390      	movs	r3, #144	; 0x90
 80062f8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80062fa:	2300      	movs	r3, #0
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80062fe:	2300      	movs	r3, #0
 8006300:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006302:	2300      	movs	r3, #0
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f107 0218 	add.w	r2, r7, #24
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f003 fb15 	bl	8009940 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006324:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d90a      	bls.n	8006342 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2220      	movs	r2, #32
 8006330:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006338:	4618      	mov	r0, r3
 800633a:	f003 fbb9 	bl	8009ab0 <SDMMC_CmdWriteMultiBlock>
 800633e:	6478      	str	r0, [r7, #68]	; 0x44
 8006340:	e009      	b.n	8006356 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2210      	movs	r2, #16
 8006346:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800634e:	4618      	mov	r0, r3
 8006350:	f003 fb8b 	bl	8009a6a <SDMMC_CmdWriteSingleBlock>
 8006354:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006358:	2b00      	cmp	r3, #0
 800635a:	d012      	beq.n	8006382 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a8a      	ldr	r2, [pc, #552]	; (800658c <HAL_SD_WriteBlocks+0x324>)
 8006362:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636a:	431a      	orrs	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e100      	b.n	8006584 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006386:	e065      	b.n	8006454 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d040      	beq.n	8006418 <HAL_SD_WriteBlocks+0x1b0>
 8006396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006398:	2b00      	cmp	r3, #0
 800639a:	d03d      	beq.n	8006418 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800639c:	2300      	movs	r3, #0
 800639e:	643b      	str	r3, [r7, #64]	; 0x40
 80063a0:	e037      	b.n	8006412 <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 80063a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	3301      	adds	r3, #1
 80063ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80063ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b0:	3b01      	subs	r3, #1
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80063b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	021a      	lsls	r2, r3, #8
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80063c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c2:	3301      	adds	r3, #1
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80063c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c8:	3b01      	subs	r3, #1
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80063cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	041a      	lsls	r2, r3, #16
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80063d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063da:	3301      	adds	r3, #1
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80063de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e0:	3b01      	subs	r3, #1
 80063e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	061a      	lsls	r2, r3, #24
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80063f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f2:	3301      	adds	r3, #1
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80063f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f8:	3b01      	subs	r3, #1
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f107 0214 	add.w	r2, r7, #20
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f003 fa1f 	bl	800984a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800640c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800640e:	3301      	adds	r3, #1
 8006410:	643b      	str	r3, [r7, #64]	; 0x40
 8006412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006414:	2b07      	cmp	r3, #7
 8006416:	d9c4      	bls.n	80063a2 <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006418:	f7fb f87e 	bl	8001518 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006424:	429a      	cmp	r2, r3
 8006426:	d902      	bls.n	800642e <HAL_SD_WriteBlocks+0x1c6>
 8006428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800642a:	2b00      	cmp	r3, #0
 800642c:	d112      	bne.n	8006454 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a56      	ldr	r2, [pc, #344]	; (800658c <HAL_SD_WriteBlocks+0x324>)
 8006434:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800643a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800643c:	431a      	orrs	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e097      	b.n	8006584 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800645e:	2b00      	cmp	r3, #0
 8006460:	d092      	beq.n	8006388 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006470:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d022      	beq.n	80064c6 <HAL_SD_WriteBlocks+0x25e>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d91f      	bls.n	80064c6 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648a:	2b03      	cmp	r3, #3
 800648c:	d01b      	beq.n	80064c6 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f003 fb30 	bl	8009af8 <SDMMC_CmdStopTransfer>
 8006498:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800649a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649c:	2b00      	cmp	r3, #0
 800649e:	d012      	beq.n	80064c6 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a39      	ldr	r2, [pc, #228]	; (800658c <HAL_SD_WriteBlocks+0x324>)
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ae:	431a      	orrs	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e05e      	b.n	8006584 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d012      	beq.n	80064fa <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a2c      	ldr	r2, [pc, #176]	; (800658c <HAL_SD_WriteBlocks+0x324>)
 80064da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	f043 0208 	orr.w	r2, r3, #8
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e044      	b.n	8006584 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d012      	beq.n	800652e <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1f      	ldr	r2, [pc, #124]	; (800658c <HAL_SD_WriteBlocks+0x324>)
 800650e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	f043 0202 	orr.w	r2, r3, #2
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e02a      	b.n	8006584 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b00      	cmp	r3, #0
 800653a:	d012      	beq.n	8006562 <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a12      	ldr	r2, [pc, #72]	; (800658c <HAL_SD_WriteBlocks+0x324>)
 8006542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	f043 0210 	orr.w	r2, r3, #16
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e010      	b.n	8006584 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a0a      	ldr	r2, [pc, #40]	; (8006590 <HAL_SD_WriteBlocks+0x328>)
 8006568:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	e006      	b.n	8006584 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	3748      	adds	r7, #72	; 0x48
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	1fe00fff 	.word	0x1fe00fff
 8006590:	18000f3a 	.word	0x18000f3a

08006594 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a2:	0f9b      	lsrs	r3, r3, #30
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ae:	0e9b      	lsrs	r3, r3, #26
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c0:	0e1b      	lsrs	r3, r3, #24
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d2:	0c1b      	lsrs	r3, r3, #16
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065de:	0a1b      	lsrs	r3, r3, #8
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f4:	0d1b      	lsrs	r3, r3, #20
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006600:	0c1b      	lsrs	r3, r3, #16
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f003 030f 	and.w	r3, r3, #15
 8006608:	b2da      	uxtb	r2, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006612:	0bdb      	lsrs	r3, r3, #15
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	b2da      	uxtb	r2, r3
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006624:	0b9b      	lsrs	r3, r3, #14
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	b2da      	uxtb	r2, r3
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006636:	0b5b      	lsrs	r3, r3, #13
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	b2da      	uxtb	r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006648:	0b1b      	lsrs	r3, r3, #12
 800664a:	b2db      	uxtb	r3, r3
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	b2da      	uxtb	r2, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2200      	movs	r2, #0
 800665a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d163      	bne.n	800672c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006668:	009a      	lsls	r2, r3, #2
 800666a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800666e:	4013      	ands	r3, r2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006674:	0f92      	lsrs	r2, r2, #30
 8006676:	431a      	orrs	r2, r3
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006680:	0edb      	lsrs	r3, r3, #27
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	b2da      	uxtb	r2, r3
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006692:	0e1b      	lsrs	r3, r3, #24
 8006694:	b2db      	uxtb	r3, r3
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	b2da      	uxtb	r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a4:	0d5b      	lsrs	r3, r3, #21
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b6:	0c9b      	lsrs	r3, r3, #18
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c8:	0bdb      	lsrs	r3, r3, #15
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	7e1b      	ldrb	r3, [r3, #24]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	3302      	adds	r3, #2
 80066ec:	2201      	movs	r2, #1
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80066f6:	fb03 f202 	mul.w	r2, r3, r2
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	7a1b      	ldrb	r3, [r3, #8]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	2201      	movs	r2, #1
 800670a:	409a      	lsls	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006718:	0a52      	lsrs	r2, r2, #9
 800671a:	fb03 f202 	mul.w	r2, r3, r2
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006728:	659a      	str	r2, [r3, #88]	; 0x58
 800672a:	e031      	b.n	8006790 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006730:	2b01      	cmp	r3, #1
 8006732:	d11d      	bne.n	8006770 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006738:	041b      	lsls	r3, r3, #16
 800673a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006742:	0c1b      	lsrs	r3, r3, #16
 8006744:	431a      	orrs	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	3301      	adds	r3, #1
 8006750:	029a      	lsls	r2, r3, #10
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006764:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	659a      	str	r2, [r3, #88]	; 0x58
 800676e:	e00f      	b.n	8006790 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a58      	ldr	r2, [pc, #352]	; (80068d8 <HAL_SD_GetCardCSD+0x344>)
 8006776:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e09d      	b.n	80068cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006794:	0b9b      	lsrs	r3, r3, #14
 8006796:	b2db      	uxtb	r3, r3
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	b2da      	uxtb	r2, r3
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a6:	09db      	lsrs	r3, r3, #7
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c8:	0fdb      	lsrs	r3, r3, #31
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d4:	0f5b      	lsrs	r3, r3, #29
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f003 0303 	and.w	r3, r3, #3
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e6:	0e9b      	lsrs	r3, r3, #26
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f8:	0d9b      	lsrs	r3, r3, #22
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	b2da      	uxtb	r2, r3
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800680a:	0d5b      	lsrs	r3, r3, #21
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	b2da      	uxtb	r2, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006826:	0c1b      	lsrs	r3, r3, #16
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	b2da      	uxtb	r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683a:	0bdb      	lsrs	r3, r3, #15
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	b2da      	uxtb	r2, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684e:	0b9b      	lsrs	r3, r3, #14
 8006850:	b2db      	uxtb	r3, r3
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006862:	0b5b      	lsrs	r3, r3, #13
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	b2da      	uxtb	r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006876:	0b1b      	lsrs	r3, r3, #12
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688a:	0a9b      	lsrs	r3, r3, #10
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f003 0303 	and.w	r3, r3, #3
 8006892:	b2da      	uxtb	r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689e:	0a1b      	lsrs	r3, r3, #8
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b2:	085b      	lsrs	r3, r3, #1
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	1fe00fff 	.word	0x1fe00fff

080068dc <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b094      	sub	sp, #80	; 0x50
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80068ec:	f107 0308 	add.w	r3, r7, #8
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fbd4 	bl	80070a0 <SD_SendSDStatus>
 80068f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80068fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d011      	beq.n	8006924 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a4f      	ldr	r2, [pc, #316]	; (8006a44 <HAL_SD_GetCardStatus+0x168>)
 8006906:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800690c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006922:	e070      	b.n	8006a06 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	099b      	lsrs	r3, r3, #6
 8006928:	b2db      	uxtb	r3, r3
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	b2da      	uxtb	r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	b2da      	uxtb	r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	b29b      	uxth	r3, r3
 800694a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800694e:	b29a      	uxth	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	0e1b      	lsrs	r3, r3, #24
 8006954:	b29b      	uxth	r3, r3
 8006956:	4313      	orrs	r3, r2
 8006958:	b29a      	uxth	r2, r3
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	061a      	lsls	r2, r3, #24
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800696a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	0a1b      	lsrs	r3, r3, #8
 8006970:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006974:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	0e1b      	lsrs	r3, r3, #24
 800697a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	b2da      	uxtb	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	0a1b      	lsrs	r3, r3, #8
 800698c:	b2da      	uxtb	r2, r3
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	0d1b      	lsrs	r3, r3, #20
 8006996:	b2db      	uxtb	r3, r3
 8006998:	f003 030f 	and.w	r3, r3, #15
 800699c:	b2da      	uxtb	r2, r3
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	0c1b      	lsrs	r3, r3, #16
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	4313      	orrs	r3, r2
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	0a9b      	lsrs	r3, r3, #10
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	0a1b      	lsrs	r3, r3, #8
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	091b      	lsrs	r3, r3, #4
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	0e1b      	lsrs	r3, r3, #24
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f002 ffc2 	bl	8009998 <SDMMC_CmdBlockLength>
 8006a14:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00d      	beq.n	8006a38 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <HAL_SD_GetCardStatus+0x168>)
 8006a22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006a38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3750      	adds	r7, #80	; 0x50
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	1fe00fff 	.word	0x1fe00fff

08006a48 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006aa0:	b5b0      	push	{r4, r5, r7, lr}
 8006aa2:	b090      	sub	sp, #64	; 0x40
 8006aa4:	af04      	add	r7, sp, #16
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d02e      	beq.n	8006b1e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac6:	d106      	bne.n	8006ad6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006acc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38
 8006ad4:	e029      	b.n	8006b2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006adc:	d10a      	bne.n	8006af4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fbd6 	bl	8007290 <SD_WideBus_Enable>
 8006ae4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
 8006af2:	e01a      	b.n	8006b2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fc13 	bl	8007326 <SD_WideBus_Disable>
 8006b00:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
 8006b0e:	e00c      	b.n	8006b2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b1c:	e005      	b.n	8006b2a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a60      	ldr	r2, [pc, #384]	; (8006cb8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b40:	e097      	b.n	8006c72 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006b42:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006b46:	f7fd feb9 	bl	80048bc <HAL_RCCEx_GetPeriphCLKFreq>
 8006b4a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 8086 	beq.w	8006c60 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695a      	ldr	r2, [r3, #20]
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	4952      	ldr	r1, [pc, #328]	; (8006cbc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006b72:	fba1 1303 	umull	r1, r3, r1, r3
 8006b76:	0e1b      	lsrs	r3, r3, #24
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d303      	bcc.n	8006b84 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	61fb      	str	r3, [r7, #28]
 8006b82:	e05a      	b.n	8006c3a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b8c:	d103      	bne.n	8006b96 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	e051      	b.n	8006c3a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9e:	d126      	bne.n	8006bee <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10e      	bne.n	8006bc6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	4a45      	ldr	r2, [pc, #276]	; (8006cc0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d906      	bls.n	8006bbe <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	4a42      	ldr	r2, [pc, #264]	; (8006cbc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb8:	0e5b      	lsrs	r3, r3, #25
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	e03d      	b.n	8006c3a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	e039      	b.n	8006c3a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd2:	4a3b      	ldr	r2, [pc, #236]	; (8006cc0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d906      	bls.n	8006be6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	4a38      	ldr	r2, [pc, #224]	; (8006cbc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006be0:	0e5b      	lsrs	r3, r3, #25
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	e029      	b.n	8006c3a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	e025      	b.n	8006c3a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10e      	bne.n	8006c14 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	4a32      	ldr	r2, [pc, #200]	; (8006cc4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d906      	bls.n	8006c0c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	4a2e      	ldr	r2, [pc, #184]	; (8006cbc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	0e1b      	lsrs	r3, r3, #24
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	e016      	b.n	8006c3a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	61fb      	str	r3, [r7, #28]
 8006c12:	e012      	b.n	8006c3a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c20:	4a28      	ldr	r2, [pc, #160]	; (8006cc4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d906      	bls.n	8006c34 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	4a24      	ldr	r2, [pc, #144]	; (8006cbc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2e:	0e1b      	lsrs	r3, r3, #24
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	e002      	b.n	8006c3a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681d      	ldr	r5, [r3, #0]
 8006c44:	466c      	mov	r4, sp
 8006c46:	f107 0318 	add.w	r3, r7, #24
 8006c4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c52:	f107 030c 	add.w	r3, r7, #12
 8006c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f002 fdbf 	bl	80097dc <SDMMC_Init>
 8006c5e:	e008      	b.n	8006c72 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f002 fe8c 	bl	8009998 <SDMMC_CmdBlockLength>
 8006c80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00c      	beq.n	8006ca2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a0a      	ldr	r2, [pc, #40]	; (8006cb8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3730      	adds	r7, #48	; 0x30
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	1fe00fff 	.word	0x1fe00fff
 8006cbc:	55e63b89 	.word	0x55e63b89
 8006cc0:	02faf080 	.word	0x02faf080
 8006cc4:	017d7840 	.word	0x017d7840

08006cc8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006cd4:	f107 030c 	add.w	r3, r7, #12
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fab0 	bl	8007240 <SD_SendStatus>
 8006ce0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	0a5b      	lsrs	r3, r3, #9
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006cfe:	693b      	ldr	r3, [r7, #16]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d08:	b5b0      	push	{r4, r5, r7, lr}
 8006d0a:	b090      	sub	sp, #64	; 0x40
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006d10:	2301      	movs	r3, #1
 8006d12:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f002 fdb9 	bl	8009890 <SDMMC_GetPowerState>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006d28:	e0a9      	b.n	8006e7e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d02e      	beq.n	8006d90 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f002 fffe 	bl	8009d38 <SDMMC_CmdSendCID>
 8006d3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <SD_InitCard+0x40>
    {
      return errorstate;
 8006d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d46:	e09a      	b.n	8006e7e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f002 fde3 	bl	800991a <SDMMC_GetResponse>
 8006d54:	4602      	mov	r2, r0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2104      	movs	r1, #4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f002 fdda 	bl	800991a <SDMMC_GetResponse>
 8006d66:	4602      	mov	r2, r0
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2108      	movs	r1, #8
 8006d72:	4618      	mov	r0, r3
 8006d74:	f002 fdd1 	bl	800991a <SDMMC_GetResponse>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	210c      	movs	r1, #12
 8006d84:	4618      	mov	r0, r3
 8006d86:	f002 fdc8 	bl	800991a <SDMMC_GetResponse>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d00d      	beq.n	8006db4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f107 020e 	add.w	r2, r7, #14
 8006da0:	4611      	mov	r1, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f003 f807 	bl	8009db6 <SDMMC_CmdSetRelAdd>
 8006da8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <SD_InitCard+0xac>
    {
      return errorstate;
 8006db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db2:	e064      	b.n	8006e7e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d036      	beq.n	8006e2a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006dbc:	89fb      	ldrh	r3, [r7, #14]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dcc:	041b      	lsls	r3, r3, #16
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f002 ffd0 	bl	8009d76 <SDMMC_CmdSendCSD>
 8006dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <SD_InitCard+0xda>
    {
      return errorstate;
 8006dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de0:	e04d      	b.n	8006e7e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2100      	movs	r1, #0
 8006de8:	4618      	mov	r0, r3
 8006dea:	f002 fd96 	bl	800991a <SDMMC_GetResponse>
 8006dee:	4602      	mov	r2, r0
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2104      	movs	r1, #4
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f002 fd8d 	bl	800991a <SDMMC_GetResponse>
 8006e00:	4602      	mov	r2, r0
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2108      	movs	r1, #8
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f002 fd84 	bl	800991a <SDMMC_GetResponse>
 8006e12:	4602      	mov	r2, r0
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	210c      	movs	r1, #12
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f002 fd7b 	bl	800991a <SDMMC_GetResponse>
 8006e24:	4602      	mov	r2, r0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2104      	movs	r1, #4
 8006e30:	4618      	mov	r0, r3
 8006e32:	f002 fd72 	bl	800991a <SDMMC_GetResponse>
 8006e36:	4603      	mov	r3, r0
 8006e38:	0d1a      	lsrs	r2, r3, #20
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006e3e:	f107 0310 	add.w	r3, r7, #16
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff fba5 	bl	8006594 <HAL_SD_GetCardCSD>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e54:	e013      	b.n	8006e7e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6819      	ldr	r1, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5e:	041b      	lsls	r3, r3, #16
 8006e60:	2200      	movs	r2, #0
 8006e62:	461c      	mov	r4, r3
 8006e64:	4615      	mov	r5, r2
 8006e66:	4622      	mov	r2, r4
 8006e68:	462b      	mov	r3, r5
 8006e6a:	4608      	mov	r0, r1
 8006e6c:	f002 fe7a 	bl	8009b64 <SDMMC_CmdSelDesel>
 8006e70:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <SD_InitCard+0x174>
  {
    return errorstate;
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7a:	e000      	b.n	8006e7e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3740      	adds	r7, #64	; 0x40
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006e88 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006e9c:	f7fa fb3c 	bl	8001518 <HAL_GetTick>
 8006ea0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f002 fe80 	bl	8009bac <SDMMC_CmdGoIdleState>
 8006eac:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <SD_PowerON+0x30>
  {
    return errorstate;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	e0ed      	b.n	8007094 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f002 fe93 	bl	8009be8 <SDMMC_CmdOperCond>
 8006ec2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00d      	beq.n	8006ee6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f002 fe69 	bl	8009bac <SDMMC_CmdGoIdleState>
 8006eda:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <SD_PowerON+0x64>
    {
      return errorstate;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	e0d6      	b.n	8007094 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d137      	bne.n	8006f64 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f002 fe94 	bl	8009c28 <SDMMC_CmdAppCommand>
 8006f00:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d02d      	beq.n	8006f64 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f0c:	e0c2      	b.n	8007094 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f002 fe87 	bl	8009c28 <SDMMC_CmdAppCommand>
 8006f1a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <SD_PowerON+0x9e>
    {
      return errorstate;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	e0b6      	b.n	8007094 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	495c      	ldr	r1, [pc, #368]	; (800709c <SD_PowerON+0x214>)
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f002 fe9e 	bl	8009c6e <SDMMC_CmdAppOperCommand>
 8006f32:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f3e:	e0a9      	b.n	8007094 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f002 fce7 	bl	800991a <SDMMC_GetResponse>
 8006f4c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	0fdb      	lsrs	r3, r3, #31
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <SD_PowerON+0xd2>
 8006f56:	2301      	movs	r3, #1
 8006f58:	e000      	b.n	8006f5c <SD_PowerON+0xd4>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61bb      	str	r3, [r7, #24]

    count++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d802      	bhi.n	8006f74 <SD_PowerON+0xec>
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0cc      	beq.n	8006f0e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d902      	bls.n	8006f84 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f82:	e087      	b.n	8007094 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d07e      	beq.n	800708c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d17a      	bne.n	8007092 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d075      	beq.n	8007092 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fac:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0208 	orr.w	r2, r2, #8
 8006fbc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f002 ff5e 	bl	8009e84 <SDMMC_CmdVoltageSwitch>
 8006fc8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00c      	beq.n	8006fea <SD_PowerON+0x162>
        {
          return errorstate;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	e05f      	b.n	8007094 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006fd4:	f7fa faa0 	bl	8001518 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe2:	d102      	bne.n	8006fea <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006fe4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fe8:	e054      	b.n	8007094 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ff8:	d1ec      	bne.n	8006fd4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007002:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800700e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007012:	d002      	beq.n	800701a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007014:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007018:	e03c      	b.n	8007094 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800701a:	2001      	movs	r0, #1
 800701c:	f000 fa9e 	bl	800755c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0204 	orr.w	r2, r2, #4
 800702e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007030:	e00a      	b.n	8007048 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007032:	f7fa fa71 	bl	8001518 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007040:	d102      	bne.n	8007048 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007042:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007046:	e025      	b.n	8007094 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007056:	d1ec      	bne.n	8007032 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007060:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800706c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007070:	d102      	bne.n	8007078 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007072:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007076:	e00d      	b.n	8007094 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2213      	movs	r2, #19
 800707e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007088:	639a      	str	r2, [r3, #56]	; 0x38
 800708a:	e002      	b.n	8007092 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3720      	adds	r7, #32
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	c1100000 	.word	0xc1100000

080070a0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08c      	sub	sp, #48	; 0x30
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80070aa:	f7fa fa35 	bl	8001518 <HAL_GetTick>
 80070ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2100      	movs	r1, #0
 80070ba:	4618      	mov	r0, r3
 80070bc:	f002 fc2d 	bl	800991a <SDMMC_GetResponse>
 80070c0:	4603      	mov	r3, r0
 80070c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ca:	d102      	bne.n	80070d2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80070cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070d0:	e0b0      	b.n	8007234 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2140      	movs	r1, #64	; 0x40
 80070d8:	4618      	mov	r0, r3
 80070da:	f002 fc5d 	bl	8009998 <SDMMC_CmdBlockLength>
 80070de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d005      	beq.n	80070f2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	e0a0      	b.n	8007234 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070fa:	041b      	lsls	r3, r3, #16
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f002 fd92 	bl	8009c28 <SDMMC_CmdAppCommand>
 8007104:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	e08d      	b.n	8007234 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800711c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800711e:	2340      	movs	r3, #64	; 0x40
 8007120:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007122:	2360      	movs	r3, #96	; 0x60
 8007124:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007126:	2302      	movs	r3, #2
 8007128:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800712a:	2300      	movs	r3, #0
 800712c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800712e:	2301      	movs	r3, #1
 8007130:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f107 0208 	add.w	r2, r7, #8
 800713a:	4611      	mov	r1, r2
 800713c:	4618      	mov	r0, r3
 800713e:	f002 fbff 	bl	8009940 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f002 fe7a 	bl	8009e40 <SDMMC_CmdStatusRegister>
 800714c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d02b      	beq.n	80071ac <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	e069      	b.n	8007234 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d013      	beq.n	8007196 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800716e:	2300      	movs	r3, #0
 8007170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007172:	e00d      	b.n	8007190 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f002 fb59 	bl	8009830 <SDMMC_ReadFIFO>
 800717e:	4602      	mov	r2, r0
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	601a      	str	r2, [r3, #0]
        pData++;
 8007184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007186:	3304      	adds	r3, #4
 8007188:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	3301      	adds	r3, #1
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	2b07      	cmp	r3, #7
 8007194:	d9ee      	bls.n	8007174 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007196:	f7fa f9bf 	bl	8001518 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a4:	d102      	bne.n	80071ac <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071aa:	e043      	b.n	8007234 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0d2      	beq.n	8007160 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80071c8:	2308      	movs	r3, #8
 80071ca:	e033      	b.n	8007234 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071da:	2302      	movs	r3, #2
 80071dc:	e02a      	b.n	8007234 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d017      	beq.n	800721c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80071ec:	2320      	movs	r3, #32
 80071ee:	e021      	b.n	8007234 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f002 fb1b 	bl	8009830 <SDMMC_ReadFIFO>
 80071fa:	4602      	mov	r2, r0
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	601a      	str	r2, [r3, #0]
    pData++;
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	3304      	adds	r3, #4
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007206:	f7fa f987 	bl	8001518 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007214:	d102      	bne.n	800721c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007216:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800721a:	e00b      	b.n	8007234 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e2      	bne.n	80071f0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a03      	ldr	r2, [pc, #12]	; (800723c <SD_SendSDStatus+0x19c>)
 8007230:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3730      	adds	r7, #48	; 0x30
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	18000f3a 	.word	0x18000f3a

08007240 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007250:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007254:	e018      	b.n	8007288 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800725e:	041b      	lsls	r3, r3, #16
 8007260:	4619      	mov	r1, r3
 8007262:	4610      	mov	r0, r2
 8007264:	f002 fdc9 	bl	8009dfa <SDMMC_CmdSendStatus>
 8007268:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	e009      	b.n	8007288 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2100      	movs	r1, #0
 800727a:	4618      	mov	r0, r3
 800727c:	f002 fb4d 	bl	800991a <SDMMC_GetResponse>
 8007280:	4602      	mov	r2, r0
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	2300      	movs	r3, #0
 800729e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f002 fb37 	bl	800991a <SDMMC_GetResponse>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072b6:	d102      	bne.n	80072be <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072bc:	e02f      	b.n	800731e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072be:	f107 030c 	add.w	r3, r7, #12
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f879 	bl	80073bc <SD_FindSCR>
 80072ca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	e023      	b.n	800731e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01c      	beq.n	800731a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e8:	041b      	lsls	r3, r3, #16
 80072ea:	4619      	mov	r1, r3
 80072ec:	4610      	mov	r0, r2
 80072ee:	f002 fc9b 	bl	8009c28 <SDMMC_CmdAppCommand>
 80072f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	e00f      	b.n	800731e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2102      	movs	r1, #2
 8007304:	4618      	mov	r0, r3
 8007306:	f002 fcd2 	bl	8009cae <SDMMC_CmdBusWidth>
 800730a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	e003      	b.n	800731e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007316:	2300      	movs	r3, #0
 8007318:	e001      	b.n	800731e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800731a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b086      	sub	sp, #24
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	2300      	movs	r3, #0
 8007334:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2100      	movs	r1, #0
 800733c:	4618      	mov	r0, r3
 800733e:	f002 faec 	bl	800991a <SDMMC_GetResponse>
 8007342:	4603      	mov	r3, r0
 8007344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800734c:	d102      	bne.n	8007354 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800734e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007352:	e02f      	b.n	80073b4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007354:	f107 030c 	add.w	r3, r7, #12
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f82e 	bl	80073bc <SD_FindSCR>
 8007360:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	e023      	b.n	80073b4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d01c      	beq.n	80073b0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737e:	041b      	lsls	r3, r3, #16
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f002 fc50 	bl	8009c28 <SDMMC_CmdAppCommand>
 8007388:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	e00f      	b.n	80073b4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f002 fc87 	bl	8009cae <SDMMC_CmdBusWidth>
 80073a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	e003      	b.n	80073b4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80073ac:	2300      	movs	r3, #0
 80073ae:	e001      	b.n	80073b4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08e      	sub	sp, #56	; 0x38
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073c6:	f7fa f8a7 	bl	8001518 <HAL_GetTick>
 80073ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80073d0:	2300      	movs	r3, #0
 80073d2:	60bb      	str	r3, [r7, #8]
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2108      	movs	r1, #8
 80073e2:	4618      	mov	r0, r3
 80073e4:	f002 fad8 	bl	8009998 <SDMMC_CmdBlockLength>
 80073e8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	e0ad      	b.n	8007550 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fc:	041b      	lsls	r3, r3, #16
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f002 fc11 	bl	8009c28 <SDMMC_CmdAppCommand>
 8007406:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <SD_FindSCR+0x56>
  {
    return errorstate;
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	e09e      	b.n	8007550 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007416:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007418:	2308      	movs	r3, #8
 800741a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800741c:	2330      	movs	r3, #48	; 0x30
 800741e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007420:	2302      	movs	r3, #2
 8007422:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007424:	2300      	movs	r3, #0
 8007426:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007428:	2301      	movs	r3, #1
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f107 0210 	add.w	r2, r7, #16
 8007434:	4611      	mov	r1, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f002 fa82 	bl	8009940 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f002 fc57 	bl	8009cf4 <SDMMC_CmdSendSCR>
 8007446:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	2b00      	cmp	r3, #0
 800744c:	d027      	beq.n	800749e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	e07e      	b.n	8007550 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d113      	bne.n	8007488 <SD_FindSCR+0xcc>
 8007460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007462:	2b00      	cmp	r3, #0
 8007464:	d110      	bne.n	8007488 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f002 f9e0 	bl	8009830 <SDMMC_ReadFIFO>
 8007470:	4603      	mov	r3, r0
 8007472:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4618      	mov	r0, r3
 800747a:	f002 f9d9 	bl	8009830 <SDMMC_ReadFIFO>
 800747e:	4603      	mov	r3, r0
 8007480:	60fb      	str	r3, [r7, #12]
      index++;
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	3301      	adds	r3, #1
 8007486:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007488:	f7fa f846 	bl	8001518 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007496:	d102      	bne.n	800749e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007498:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800749c:	e058      	b.n	8007550 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a4:	f240 532a 	movw	r3, #1322	; 0x52a
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0d1      	beq.n	8007452 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d005      	beq.n	80074c8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2208      	movs	r2, #8
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80074c4:	2308      	movs	r3, #8
 80074c6:	e043      	b.n	8007550 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2202      	movs	r2, #2
 80074dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80074de:	2302      	movs	r3, #2
 80074e0:	e036      	b.n	8007550 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2220      	movs	r2, #32
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80074f8:	2320      	movs	r3, #32
 80074fa:	e029      	b.n	8007550 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a15      	ldr	r2, [pc, #84]	; (8007558 <SD_FindSCR+0x19c>)
 8007502:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	061a      	lsls	r2, r3, #24
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007510:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800751a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	0e1b      	lsrs	r3, r3, #24
 8007520:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	601a      	str	r2, [r3, #0]
    scr++;
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	3304      	adds	r3, #4
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	061a      	lsls	r2, r3, #24
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007538:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	0a1b      	lsrs	r3, r3, #8
 800753e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007542:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	0e1b      	lsrs	r3, r3, #24
 8007548:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3738      	adds	r7, #56	; 0x38
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	18000f3a 	.word	0x18000f3a

0800755c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e095      	b.n	80076b0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	2b00      	cmp	r3, #0
 800758a:	d108      	bne.n	800759e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007594:	d009      	beq.n	80075aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	61da      	str	r2, [r3, #28]
 800759c:	e005      	b.n	80075aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d106      	bne.n	80075ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7f9 fd61 	bl	800108c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075ea:	d902      	bls.n	80075f2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	e002      	b.n	80075f8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007600:	d007      	beq.n	8007612 <HAL_SPI_Init+0xa0>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800760a:	d002      	beq.n	8007612 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007654:	ea42 0103 	orr.w	r1, r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	f003 0204 	and.w	r2, r3, #4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007680:	f003 0308 	and.w	r3, r3, #8
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800768e:	ea42 0103 	orr.w	r1, r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e049      	b.n	800775e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7f9 fd16 	bl	8001110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4619      	mov	r1, r3
 80076f6:	4610      	mov	r0, r2
 80076f8:	f000 fa62 	bl	8007bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e049      	b.n	800780c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d106      	bne.n	8007792 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f841 	bl	8007814 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f000 fa0b 	bl	8007bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b02      	cmp	r3, #2
 800783c:	d122      	bne.n	8007884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b02      	cmp	r3, #2
 800784a:	d11b      	bne.n	8007884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f06f 0202 	mvn.w	r2, #2
 8007854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f98a 	bl	8007b84 <HAL_TIM_IC_CaptureCallback>
 8007870:	e005      	b.n	800787e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f97c 	bl	8007b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f98d 	bl	8007b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b04      	cmp	r3, #4
 8007890:	d122      	bne.n	80078d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b04      	cmp	r3, #4
 800789e:	d11b      	bne.n	80078d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f06f 0204 	mvn.w	r2, #4
 80078a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2202      	movs	r2, #2
 80078ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f960 	bl	8007b84 <HAL_TIM_IC_CaptureCallback>
 80078c4:	e005      	b.n	80078d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f952 	bl	8007b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f963 	bl	8007b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b08      	cmp	r3, #8
 80078e4:	d122      	bne.n	800792c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d11b      	bne.n	800792c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0208 	mvn.w	r2, #8
 80078fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2204      	movs	r2, #4
 8007902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f936 	bl	8007b84 <HAL_TIM_IC_CaptureCallback>
 8007918:	e005      	b.n	8007926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f928 	bl	8007b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f939 	bl	8007b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	f003 0310 	and.w	r3, r3, #16
 8007936:	2b10      	cmp	r3, #16
 8007938:	d122      	bne.n	8007980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f003 0310 	and.w	r3, r3, #16
 8007944:	2b10      	cmp	r3, #16
 8007946:	d11b      	bne.n	8007980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f06f 0210 	mvn.w	r2, #16
 8007950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2208      	movs	r2, #8
 8007956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f90c 	bl	8007b84 <HAL_TIM_IC_CaptureCallback>
 800796c:	e005      	b.n	800797a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f8fe 	bl	8007b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f90f 	bl	8007b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b01      	cmp	r3, #1
 800798c:	d10e      	bne.n	80079ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b01      	cmp	r3, #1
 800799a:	d107      	bne.n	80079ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f06f 0201 	mvn.w	r2, #1
 80079a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8d8 	bl	8007b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b6:	2b80      	cmp	r3, #128	; 0x80
 80079b8:	d10e      	bne.n	80079d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c4:	2b80      	cmp	r3, #128	; 0x80
 80079c6:	d107      	bne.n	80079d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fcec 	bl	80083b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e6:	d10e      	bne.n	8007a06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d107      	bne.n	8007a06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fcdf 	bl	80083c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a10:	2b40      	cmp	r3, #64	; 0x40
 8007a12:	d10e      	bne.n	8007a32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1e:	2b40      	cmp	r3, #64	; 0x40
 8007a20:	d107      	bne.n	8007a32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f8bd 	bl	8007bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d10e      	bne.n	8007a5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d107      	bne.n	8007a5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f06f 0220 	mvn.w	r2, #32
 8007a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fc9f 	bl	800839c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d101      	bne.n	8007a86 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007a82:	2302      	movs	r3, #2
 8007a84:	e066      	b.n	8007b54 <HAL_TIM_OC_ConfigChannel+0xec>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b14      	cmp	r3, #20
 8007a92:	d857      	bhi.n	8007b44 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007a94:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9a:	bf00      	nop
 8007a9c:	08007af1 	.word	0x08007af1
 8007aa0:	08007b45 	.word	0x08007b45
 8007aa4:	08007b45 	.word	0x08007b45
 8007aa8:	08007b45 	.word	0x08007b45
 8007aac:	08007aff 	.word	0x08007aff
 8007ab0:	08007b45 	.word	0x08007b45
 8007ab4:	08007b45 	.word	0x08007b45
 8007ab8:	08007b45 	.word	0x08007b45
 8007abc:	08007b0d 	.word	0x08007b0d
 8007ac0:	08007b45 	.word	0x08007b45
 8007ac4:	08007b45 	.word	0x08007b45
 8007ac8:	08007b45 	.word	0x08007b45
 8007acc:	08007b1b 	.word	0x08007b1b
 8007ad0:	08007b45 	.word	0x08007b45
 8007ad4:	08007b45 	.word	0x08007b45
 8007ad8:	08007b45 	.word	0x08007b45
 8007adc:	08007b29 	.word	0x08007b29
 8007ae0:	08007b45 	.word	0x08007b45
 8007ae4:	08007b45 	.word	0x08007b45
 8007ae8:	08007b45 	.word	0x08007b45
 8007aec:	08007b37 	.word	0x08007b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 f8fc 	bl	8007cf4 <TIM_OC1_SetConfig>
      break;
 8007afc:	e025      	b.n	8007b4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 f985 	bl	8007e14 <TIM_OC2_SetConfig>
      break;
 8007b0a:	e01e      	b.n	8007b4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fa08 	bl	8007f28 <TIM_OC3_SetConfig>
      break;
 8007b18:	e017      	b.n	8007b4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68b9      	ldr	r1, [r7, #8]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fa89 	bl	8008038 <TIM_OC4_SetConfig>
      break;
 8007b26:	e010      	b.n	8007b4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 faec 	bl	800810c <TIM_OC5_SetConfig>
      break;
 8007b34:	e009      	b.n	8007b4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fb49 	bl	80081d4 <TIM_OC6_SetConfig>
      break;
 8007b42:	e002      	b.n	8007b4a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	75fb      	strb	r3, [r7, #23]
      break;
 8007b48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a40      	ldr	r2, [pc, #256]	; (8007cd4 <TIM_Base_SetConfig+0x114>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d013      	beq.n	8007c00 <TIM_Base_SetConfig+0x40>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bde:	d00f      	beq.n	8007c00 <TIM_Base_SetConfig+0x40>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a3d      	ldr	r2, [pc, #244]	; (8007cd8 <TIM_Base_SetConfig+0x118>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00b      	beq.n	8007c00 <TIM_Base_SetConfig+0x40>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a3c      	ldr	r2, [pc, #240]	; (8007cdc <TIM_Base_SetConfig+0x11c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d007      	beq.n	8007c00 <TIM_Base_SetConfig+0x40>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a3b      	ldr	r2, [pc, #236]	; (8007ce0 <TIM_Base_SetConfig+0x120>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d003      	beq.n	8007c00 <TIM_Base_SetConfig+0x40>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a3a      	ldr	r2, [pc, #232]	; (8007ce4 <TIM_Base_SetConfig+0x124>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d108      	bne.n	8007c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a2f      	ldr	r2, [pc, #188]	; (8007cd4 <TIM_Base_SetConfig+0x114>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01f      	beq.n	8007c5a <TIM_Base_SetConfig+0x9a>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c20:	d01b      	beq.n	8007c5a <TIM_Base_SetConfig+0x9a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a2c      	ldr	r2, [pc, #176]	; (8007cd8 <TIM_Base_SetConfig+0x118>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d017      	beq.n	8007c5a <TIM_Base_SetConfig+0x9a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a2b      	ldr	r2, [pc, #172]	; (8007cdc <TIM_Base_SetConfig+0x11c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <TIM_Base_SetConfig+0x9a>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a2a      	ldr	r2, [pc, #168]	; (8007ce0 <TIM_Base_SetConfig+0x120>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00f      	beq.n	8007c5a <TIM_Base_SetConfig+0x9a>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a29      	ldr	r2, [pc, #164]	; (8007ce4 <TIM_Base_SetConfig+0x124>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00b      	beq.n	8007c5a <TIM_Base_SetConfig+0x9a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a28      	ldr	r2, [pc, #160]	; (8007ce8 <TIM_Base_SetConfig+0x128>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d007      	beq.n	8007c5a <TIM_Base_SetConfig+0x9a>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a27      	ldr	r2, [pc, #156]	; (8007cec <TIM_Base_SetConfig+0x12c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d003      	beq.n	8007c5a <TIM_Base_SetConfig+0x9a>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a26      	ldr	r2, [pc, #152]	; (8007cf0 <TIM_Base_SetConfig+0x130>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d108      	bne.n	8007c6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a10      	ldr	r2, [pc, #64]	; (8007cd4 <TIM_Base_SetConfig+0x114>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00f      	beq.n	8007cb8 <TIM_Base_SetConfig+0xf8>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a12      	ldr	r2, [pc, #72]	; (8007ce4 <TIM_Base_SetConfig+0x124>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00b      	beq.n	8007cb8 <TIM_Base_SetConfig+0xf8>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a11      	ldr	r2, [pc, #68]	; (8007ce8 <TIM_Base_SetConfig+0x128>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d007      	beq.n	8007cb8 <TIM_Base_SetConfig+0xf8>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a10      	ldr	r2, [pc, #64]	; (8007cec <TIM_Base_SetConfig+0x12c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_Base_SetConfig+0xf8>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a0f      	ldr	r2, [pc, #60]	; (8007cf0 <TIM_Base_SetConfig+0x130>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d103      	bne.n	8007cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	691a      	ldr	r2, [r3, #16]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	615a      	str	r2, [r3, #20]
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40012c00 	.word	0x40012c00
 8007cd8:	40000400 	.word	0x40000400
 8007cdc:	40000800 	.word	0x40000800
 8007ce0:	40000c00 	.word	0x40000c00
 8007ce4:	40013400 	.word	0x40013400
 8007ce8:	40014000 	.word	0x40014000
 8007cec:	40014400 	.word	0x40014400
 8007cf0:	40014800 	.word	0x40014800

08007cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	f023 0201 	bic.w	r2, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f023 0302 	bic.w	r3, r3, #2
 8007d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a2c      	ldr	r2, [pc, #176]	; (8007e00 <TIM_OC1_SetConfig+0x10c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00f      	beq.n	8007d74 <TIM_OC1_SetConfig+0x80>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a2b      	ldr	r2, [pc, #172]	; (8007e04 <TIM_OC1_SetConfig+0x110>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00b      	beq.n	8007d74 <TIM_OC1_SetConfig+0x80>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a2a      	ldr	r2, [pc, #168]	; (8007e08 <TIM_OC1_SetConfig+0x114>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d007      	beq.n	8007d74 <TIM_OC1_SetConfig+0x80>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a29      	ldr	r2, [pc, #164]	; (8007e0c <TIM_OC1_SetConfig+0x118>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d003      	beq.n	8007d74 <TIM_OC1_SetConfig+0x80>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a28      	ldr	r2, [pc, #160]	; (8007e10 <TIM_OC1_SetConfig+0x11c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d10c      	bne.n	8007d8e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f023 0308 	bic.w	r3, r3, #8
 8007d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f023 0304 	bic.w	r3, r3, #4
 8007d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a1b      	ldr	r2, [pc, #108]	; (8007e00 <TIM_OC1_SetConfig+0x10c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00f      	beq.n	8007db6 <TIM_OC1_SetConfig+0xc2>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a1a      	ldr	r2, [pc, #104]	; (8007e04 <TIM_OC1_SetConfig+0x110>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00b      	beq.n	8007db6 <TIM_OC1_SetConfig+0xc2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a19      	ldr	r2, [pc, #100]	; (8007e08 <TIM_OC1_SetConfig+0x114>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d007      	beq.n	8007db6 <TIM_OC1_SetConfig+0xc2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a18      	ldr	r2, [pc, #96]	; (8007e0c <TIM_OC1_SetConfig+0x118>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d003      	beq.n	8007db6 <TIM_OC1_SetConfig+0xc2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a17      	ldr	r2, [pc, #92]	; (8007e10 <TIM_OC1_SetConfig+0x11c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d111      	bne.n	8007dda <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	621a      	str	r2, [r3, #32]
}
 8007df4:	bf00      	nop
 8007df6:	371c      	adds	r7, #28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	40012c00 	.word	0x40012c00
 8007e04:	40013400 	.word	0x40013400
 8007e08:	40014000 	.word	0x40014000
 8007e0c:	40014400 	.word	0x40014400
 8007e10:	40014800 	.word	0x40014800

08007e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f023 0210 	bic.w	r2, r3, #16
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f023 0320 	bic.w	r3, r3, #32
 8007e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a28      	ldr	r2, [pc, #160]	; (8007f14 <TIM_OC2_SetConfig+0x100>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d003      	beq.n	8007e80 <TIM_OC2_SetConfig+0x6c>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a27      	ldr	r2, [pc, #156]	; (8007f18 <TIM_OC2_SetConfig+0x104>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d10d      	bne.n	8007e9c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	011b      	lsls	r3, r3, #4
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <TIM_OC2_SetConfig+0x100>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d00f      	beq.n	8007ec4 <TIM_OC2_SetConfig+0xb0>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a1c      	ldr	r2, [pc, #112]	; (8007f18 <TIM_OC2_SetConfig+0x104>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00b      	beq.n	8007ec4 <TIM_OC2_SetConfig+0xb0>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a1b      	ldr	r2, [pc, #108]	; (8007f1c <TIM_OC2_SetConfig+0x108>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d007      	beq.n	8007ec4 <TIM_OC2_SetConfig+0xb0>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a1a      	ldr	r2, [pc, #104]	; (8007f20 <TIM_OC2_SetConfig+0x10c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d003      	beq.n	8007ec4 <TIM_OC2_SetConfig+0xb0>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a19      	ldr	r2, [pc, #100]	; (8007f24 <TIM_OC2_SetConfig+0x110>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d113      	bne.n	8007eec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	621a      	str	r2, [r3, #32]
}
 8007f06:	bf00      	nop
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	40012c00 	.word	0x40012c00
 8007f18:	40013400 	.word	0x40013400
 8007f1c:	40014000 	.word	0x40014000
 8007f20:	40014400 	.word	0x40014400
 8007f24:	40014800 	.word	0x40014800

08007f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 0303 	bic.w	r3, r3, #3
 8007f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a27      	ldr	r2, [pc, #156]	; (8008024 <TIM_OC3_SetConfig+0xfc>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d003      	beq.n	8007f92 <TIM_OC3_SetConfig+0x6a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a26      	ldr	r2, [pc, #152]	; (8008028 <TIM_OC3_SetConfig+0x100>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d10d      	bne.n	8007fae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	021b      	lsls	r3, r3, #8
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a1c      	ldr	r2, [pc, #112]	; (8008024 <TIM_OC3_SetConfig+0xfc>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d00f      	beq.n	8007fd6 <TIM_OC3_SetConfig+0xae>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a1b      	ldr	r2, [pc, #108]	; (8008028 <TIM_OC3_SetConfig+0x100>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d00b      	beq.n	8007fd6 <TIM_OC3_SetConfig+0xae>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a1a      	ldr	r2, [pc, #104]	; (800802c <TIM_OC3_SetConfig+0x104>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d007      	beq.n	8007fd6 <TIM_OC3_SetConfig+0xae>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a19      	ldr	r2, [pc, #100]	; (8008030 <TIM_OC3_SetConfig+0x108>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d003      	beq.n	8007fd6 <TIM_OC3_SetConfig+0xae>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a18      	ldr	r2, [pc, #96]	; (8008034 <TIM_OC3_SetConfig+0x10c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d113      	bne.n	8007ffe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	621a      	str	r2, [r3, #32]
}
 8008018:	bf00      	nop
 800801a:	371c      	adds	r7, #28
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	40012c00 	.word	0x40012c00
 8008028:	40013400 	.word	0x40013400
 800802c:	40014000 	.word	0x40014000
 8008030:	40014400 	.word	0x40014400
 8008034:	40014800 	.word	0x40014800

08008038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800806a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	021b      	lsls	r3, r3, #8
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	031b      	lsls	r3, r3, #12
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	4313      	orrs	r3, r2
 8008092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a18      	ldr	r2, [pc, #96]	; (80080f8 <TIM_OC4_SetConfig+0xc0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00f      	beq.n	80080bc <TIM_OC4_SetConfig+0x84>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a17      	ldr	r2, [pc, #92]	; (80080fc <TIM_OC4_SetConfig+0xc4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d00b      	beq.n	80080bc <TIM_OC4_SetConfig+0x84>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a16      	ldr	r2, [pc, #88]	; (8008100 <TIM_OC4_SetConfig+0xc8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d007      	beq.n	80080bc <TIM_OC4_SetConfig+0x84>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a15      	ldr	r2, [pc, #84]	; (8008104 <TIM_OC4_SetConfig+0xcc>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_OC4_SetConfig+0x84>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a14      	ldr	r2, [pc, #80]	; (8008108 <TIM_OC4_SetConfig+0xd0>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d109      	bne.n	80080d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	019b      	lsls	r3, r3, #6
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	40012c00 	.word	0x40012c00
 80080fc:	40013400 	.word	0x40013400
 8008100:	40014000 	.word	0x40014000
 8008104:	40014400 	.word	0x40014400
 8008108:	40014800 	.word	0x40014800

0800810c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800813a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008150:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	041b      	lsls	r3, r3, #16
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	4313      	orrs	r3, r2
 800815c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a17      	ldr	r2, [pc, #92]	; (80081c0 <TIM_OC5_SetConfig+0xb4>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00f      	beq.n	8008186 <TIM_OC5_SetConfig+0x7a>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a16      	ldr	r2, [pc, #88]	; (80081c4 <TIM_OC5_SetConfig+0xb8>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d00b      	beq.n	8008186 <TIM_OC5_SetConfig+0x7a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <TIM_OC5_SetConfig+0xbc>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d007      	beq.n	8008186 <TIM_OC5_SetConfig+0x7a>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a14      	ldr	r2, [pc, #80]	; (80081cc <TIM_OC5_SetConfig+0xc0>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d003      	beq.n	8008186 <TIM_OC5_SetConfig+0x7a>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a13      	ldr	r2, [pc, #76]	; (80081d0 <TIM_OC5_SetConfig+0xc4>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d109      	bne.n	800819a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800818c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	621a      	str	r2, [r3, #32]
}
 80081b4:	bf00      	nop
 80081b6:	371c      	adds	r7, #28
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	40012c00 	.word	0x40012c00
 80081c4:	40013400 	.word	0x40013400
 80081c8:	40014000 	.word	0x40014000
 80081cc:	40014400 	.word	0x40014400
 80081d0:	40014800 	.word	0x40014800

080081d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4313      	orrs	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800821a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	051b      	lsls	r3, r3, #20
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	4313      	orrs	r3, r2
 8008226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a18      	ldr	r2, [pc, #96]	; (800828c <TIM_OC6_SetConfig+0xb8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00f      	beq.n	8008250 <TIM_OC6_SetConfig+0x7c>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a17      	ldr	r2, [pc, #92]	; (8008290 <TIM_OC6_SetConfig+0xbc>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00b      	beq.n	8008250 <TIM_OC6_SetConfig+0x7c>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a16      	ldr	r2, [pc, #88]	; (8008294 <TIM_OC6_SetConfig+0xc0>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d007      	beq.n	8008250 <TIM_OC6_SetConfig+0x7c>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a15      	ldr	r2, [pc, #84]	; (8008298 <TIM_OC6_SetConfig+0xc4>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d003      	beq.n	8008250 <TIM_OC6_SetConfig+0x7c>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a14      	ldr	r2, [pc, #80]	; (800829c <TIM_OC6_SetConfig+0xc8>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d109      	bne.n	8008264 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008256:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	029b      	lsls	r3, r3, #10
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	4313      	orrs	r3, r2
 8008262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	621a      	str	r2, [r3, #32]
}
 800827e:	bf00      	nop
 8008280:	371c      	adds	r7, #28
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40012c00 	.word	0x40012c00
 8008290:	40013400 	.word	0x40013400
 8008294:	40014000 	.word	0x40014000
 8008298:	40014400 	.word	0x40014400
 800829c:	40014800 	.word	0x40014800

080082a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d101      	bne.n	80082bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e065      	b.n	8008388 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	041b      	lsls	r3, r3, #16
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a16      	ldr	r2, [pc, #88]	; (8008394 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d004      	beq.n	800834a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a14      	ldr	r2, [pc, #80]	; (8008398 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d115      	bne.n	8008376 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	051b      	lsls	r3, r3, #20
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	4313      	orrs	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	4313      	orrs	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	40012c00 	.word	0x40012c00
 8008398:	40013400 	.word	0x40013400

0800839c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e042      	b.n	8008470 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7f8 fea7 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2224      	movs	r2, #36	; 0x24
 8008406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0201 	bic.w	r2, r2, #1
 8008418:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fb64 	bl	8008ae8 <UART_SetConfig>
 8008420:	4603      	mov	r3, r0
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e022      	b.n	8008470 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fe54 	bl	80090e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689a      	ldr	r2, [r3, #8]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0201 	orr.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fedb 	bl	8009224 <UART_CheckIdleState>
 800846e:	4603      	mov	r3, r0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b0ba      	sub	sp, #232	; 0xe8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800849e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80084a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80084a6:	4013      	ands	r3, r2
 80084a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80084ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d11b      	bne.n	80084ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b8:	f003 0320 	and.w	r3, r3, #32
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d015      	beq.n	80084ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c4:	f003 0320 	and.w	r3, r3, #32
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d105      	bne.n	80084d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d009      	beq.n	80084ec <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 82d6 	beq.w	8008a8e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
      }
      return;
 80084ea:	e2d0      	b.n	8008a8e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80084ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 811f 	beq.w	8008734 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80084fa:	4b8b      	ldr	r3, [pc, #556]	; (8008728 <HAL_UART_IRQHandler+0x2b0>)
 80084fc:	4013      	ands	r3, r2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d106      	bne.n	8008510 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008502:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008506:	4b89      	ldr	r3, [pc, #548]	; (800872c <HAL_UART_IRQHandler+0x2b4>)
 8008508:	4013      	ands	r3, r2
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8112 	beq.w	8008734 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d011      	beq.n	8008540 <HAL_UART_IRQHandler+0xc8>
 800851c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00b      	beq.n	8008540 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2201      	movs	r2, #1
 800852e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008536:	f043 0201 	orr.w	r2, r3, #1
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d011      	beq.n	8008570 <HAL_UART_IRQHandler+0xf8>
 800854c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00b      	beq.n	8008570 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2202      	movs	r2, #2
 800855e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008566:	f043 0204 	orr.w	r2, r3, #4
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b00      	cmp	r3, #0
 800857a:	d011      	beq.n	80085a0 <HAL_UART_IRQHandler+0x128>
 800857c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00b      	beq.n	80085a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2204      	movs	r2, #4
 800858e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008596:	f043 0202 	orr.w	r2, r3, #2
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a4:	f003 0308 	and.w	r3, r3, #8
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d017      	beq.n	80085dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d105      	bne.n	80085c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80085bc:	4b5a      	ldr	r3, [pc, #360]	; (8008728 <HAL_UART_IRQHandler+0x2b0>)
 80085be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2208      	movs	r2, #8
 80085ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085d2:	f043 0208 	orr.w	r2, r3, #8
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d012      	beq.n	800860e <HAL_UART_IRQHandler+0x196>
 80085e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00c      	beq.n	800860e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008604:	f043 0220 	orr.w	r2, r3, #32
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 823c 	beq.w	8008a92 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800861a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800861e:	f003 0320 	and.w	r3, r3, #32
 8008622:	2b00      	cmp	r3, #0
 8008624:	d013      	beq.n	800864e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d105      	bne.n	800863e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d007      	beq.n	800864e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008654:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008662:	2b40      	cmp	r3, #64	; 0x40
 8008664:	d005      	beq.n	8008672 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800866a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800866e:	2b00      	cmp	r3, #0
 8008670:	d04f      	beq.n	8008712 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fee9 	bl	800944a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008682:	2b40      	cmp	r3, #64	; 0x40
 8008684:	d141      	bne.n	800870a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800869c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80086b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80086b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80086be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1d9      	bne.n	8008686 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d013      	beq.n	8008702 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086de:	4a14      	ldr	r2, [pc, #80]	; (8008730 <HAL_UART_IRQHandler+0x2b8>)
 80086e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7f9 f8b3 	bl	8001852 <HAL_DMA_Abort_IT>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d017      	beq.n	8008722 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80086fc:	4610      	mov	r0, r2
 80086fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008700:	e00f      	b.n	8008722 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f9da 	bl	8008abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008708:	e00b      	b.n	8008722 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f9d6 	bl	8008abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008710:	e007      	b.n	8008722 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f9d2 	bl	8008abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008720:	e1b7      	b.n	8008a92 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008722:	bf00      	nop
    return;
 8008724:	e1b5      	b.n	8008a92 <HAL_UART_IRQHandler+0x61a>
 8008726:	bf00      	nop
 8008728:	10000001 	.word	0x10000001
 800872c:	04000120 	.word	0x04000120
 8008730:	08009517 	.word	0x08009517

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008738:	2b01      	cmp	r3, #1
 800873a:	f040 814a 	bne.w	80089d2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800873e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008742:	f003 0310 	and.w	r3, r3, #16
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 8143 	beq.w	80089d2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800874c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008750:	f003 0310 	and.w	r3, r3, #16
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 813c 	beq.w	80089d2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2210      	movs	r2, #16
 8008760:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876c:	2b40      	cmp	r3, #64	; 0x40
 800876e:	f040 80b5 	bne.w	80088dc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800877e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 8187 	beq.w	8008a96 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800878e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008792:	429a      	cmp	r2, r3
 8008794:	f080 817f 	bcs.w	8008a96 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800879e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0320 	and.w	r3, r3, #32
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f040 8086 	bne.w	80088c0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80087c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087ee:	e841 2300 	strex	r3, r2, [r1]
 80087f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1da      	bne.n	80087b4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3308      	adds	r3, #8
 8008804:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800880e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008810:	f023 0301 	bic.w	r3, r3, #1
 8008814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3308      	adds	r3, #8
 800881e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008822:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008826:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800882a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e1      	bne.n	80087fe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3308      	adds	r3, #8
 8008840:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800884a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800884c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3308      	adds	r3, #8
 800885a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800885e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008860:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008864:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800886c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e3      	bne.n	800883a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2220      	movs	r2, #32
 8008876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008888:	e853 3f00 	ldrex	r3, [r3]
 800888c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800888e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008890:	f023 0310 	bic.w	r3, r3, #16
 8008894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	461a      	mov	r2, r3
 800889e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80088a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e4      	bne.n	8008880 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7f8 ff6d 	bl	800179a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f8fb 	bl	8008ad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088da:	e0dc      	b.n	8008a96 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 80ce 	beq.w	8008a9a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80088fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 80c9 	beq.w	8008a9a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800891c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800892a:	647b      	str	r3, [r7, #68]	; 0x44
 800892c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e4      	bne.n	8008908 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3308      	adds	r3, #8
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	623b      	str	r3, [r7, #32]
   return(result);
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008954:	f023 0301 	bic.w	r3, r3, #1
 8008958:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3308      	adds	r3, #8
 8008962:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008966:	633a      	str	r2, [r7, #48]	; 0x30
 8008968:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800896c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800896e:	e841 2300 	strex	r3, r2, [r1]
 8008972:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1e1      	bne.n	800893e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	e853 3f00 	ldrex	r3, [r3]
 800899a:	60fb      	str	r3, [r7, #12]
   return(result);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0310 	bic.w	r3, r3, #16
 80089a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80089b0:	61fb      	str	r3, [r7, #28]
 80089b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	69b9      	ldr	r1, [r7, #24]
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	617b      	str	r3, [r7, #20]
   return(result);
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e4      	bne.n	800898e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f880 	bl	8008ad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089d0:	e063      	b.n	8008a9a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00e      	beq.n	80089fc <HAL_UART_IRQHandler+0x584>
 80089de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d008      	beq.n	80089fc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fdcf 	bl	8009598 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089fa:	e051      	b.n	8008aa0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d014      	beq.n	8008a32 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d105      	bne.n	8008a20 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d008      	beq.n	8008a32 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d03a      	beq.n	8008a9e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	4798      	blx	r3
    }
    return;
 8008a30:	e035      	b.n	8008a9e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <HAL_UART_IRQHandler+0x5da>
 8008a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fd79 	bl	8009542 <UART_EndTransmit_IT>
    return;
 8008a50:	e026      	b.n	8008aa0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d009      	beq.n	8008a72 <HAL_UART_IRQHandler+0x5fa>
 8008a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fda8 	bl	80095c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a70:	e016      	b.n	8008aa0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d010      	beq.n	8008aa0 <HAL_UART_IRQHandler+0x628>
 8008a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	da0c      	bge.n	8008aa0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fd90 	bl	80095ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a8c:	e008      	b.n	8008aa0 <HAL_UART_IRQHandler+0x628>
      return;
 8008a8e:	bf00      	nop
 8008a90:	e006      	b.n	8008aa0 <HAL_UART_IRQHandler+0x628>
    return;
 8008a92:	bf00      	nop
 8008a94:	e004      	b.n	8008aa0 <HAL_UART_IRQHandler+0x628>
      return;
 8008a96:	bf00      	nop
 8008a98:	e002      	b.n	8008aa0 <HAL_UART_IRQHandler+0x628>
      return;
 8008a9a:	bf00      	nop
 8008a9c:	e000      	b.n	8008aa0 <HAL_UART_IRQHandler+0x628>
    return;
 8008a9e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8008aa0:	37e8      	adds	r7, #232	; 0xe8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop

08008aa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aec:	b08c      	sub	sp, #48	; 0x30
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	689a      	ldr	r2, [r3, #8]
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	431a      	orrs	r2, r3
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	4baa      	ldr	r3, [pc, #680]	; (8008dc0 <UART_SetConfig+0x2d8>)
 8008b18:	4013      	ands	r3, r2
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	6812      	ldr	r2, [r2, #0]
 8008b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b20:	430b      	orrs	r3, r1
 8008b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	68da      	ldr	r2, [r3, #12]
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a9f      	ldr	r2, [pc, #636]	; (8008dc4 <UART_SetConfig+0x2dc>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d004      	beq.n	8008b54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b50:	4313      	orrs	r3, r2
 8008b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008b5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	6812      	ldr	r2, [r2, #0]
 8008b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b68:	430b      	orrs	r3, r1
 8008b6a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b72:	f023 010f 	bic.w	r1, r3, #15
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a90      	ldr	r2, [pc, #576]	; (8008dc8 <UART_SetConfig+0x2e0>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d125      	bne.n	8008bd8 <UART_SetConfig+0xf0>
 8008b8c:	4b8f      	ldr	r3, [pc, #572]	; (8008dcc <UART_SetConfig+0x2e4>)
 8008b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d81a      	bhi.n	8008bd0 <UART_SetConfig+0xe8>
 8008b9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ba0 <UART_SetConfig+0xb8>)
 8008b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba0:	08008bb1 	.word	0x08008bb1
 8008ba4:	08008bc1 	.word	0x08008bc1
 8008ba8:	08008bb9 	.word	0x08008bb9
 8008bac:	08008bc9 	.word	0x08008bc9
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bb6:	e116      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bbe:	e112      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008bc0:	2304      	movs	r3, #4
 8008bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bc6:	e10e      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008bc8:	2308      	movs	r3, #8
 8008bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bce:	e10a      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bd6:	e106      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a7c      	ldr	r2, [pc, #496]	; (8008dd0 <UART_SetConfig+0x2e8>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d138      	bne.n	8008c54 <UART_SetConfig+0x16c>
 8008be2:	4b7a      	ldr	r3, [pc, #488]	; (8008dcc <UART_SetConfig+0x2e4>)
 8008be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be8:	f003 030c 	and.w	r3, r3, #12
 8008bec:	2b0c      	cmp	r3, #12
 8008bee:	d82d      	bhi.n	8008c4c <UART_SetConfig+0x164>
 8008bf0:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <UART_SetConfig+0x110>)
 8008bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf6:	bf00      	nop
 8008bf8:	08008c2d 	.word	0x08008c2d
 8008bfc:	08008c4d 	.word	0x08008c4d
 8008c00:	08008c4d 	.word	0x08008c4d
 8008c04:	08008c4d 	.word	0x08008c4d
 8008c08:	08008c3d 	.word	0x08008c3d
 8008c0c:	08008c4d 	.word	0x08008c4d
 8008c10:	08008c4d 	.word	0x08008c4d
 8008c14:	08008c4d 	.word	0x08008c4d
 8008c18:	08008c35 	.word	0x08008c35
 8008c1c:	08008c4d 	.word	0x08008c4d
 8008c20:	08008c4d 	.word	0x08008c4d
 8008c24:	08008c4d 	.word	0x08008c4d
 8008c28:	08008c45 	.word	0x08008c45
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c32:	e0d8      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008c34:	2302      	movs	r3, #2
 8008c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c3a:	e0d4      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008c3c:	2304      	movs	r3, #4
 8008c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c42:	e0d0      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008c44:	2308      	movs	r3, #8
 8008c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c4a:	e0cc      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008c4c:	2310      	movs	r3, #16
 8008c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c52:	e0c8      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a5e      	ldr	r2, [pc, #376]	; (8008dd4 <UART_SetConfig+0x2ec>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d125      	bne.n	8008caa <UART_SetConfig+0x1c2>
 8008c5e:	4b5b      	ldr	r3, [pc, #364]	; (8008dcc <UART_SetConfig+0x2e4>)
 8008c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c68:	2b30      	cmp	r3, #48	; 0x30
 8008c6a:	d016      	beq.n	8008c9a <UART_SetConfig+0x1b2>
 8008c6c:	2b30      	cmp	r3, #48	; 0x30
 8008c6e:	d818      	bhi.n	8008ca2 <UART_SetConfig+0x1ba>
 8008c70:	2b20      	cmp	r3, #32
 8008c72:	d00a      	beq.n	8008c8a <UART_SetConfig+0x1a2>
 8008c74:	2b20      	cmp	r3, #32
 8008c76:	d814      	bhi.n	8008ca2 <UART_SetConfig+0x1ba>
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <UART_SetConfig+0x19a>
 8008c7c:	2b10      	cmp	r3, #16
 8008c7e:	d008      	beq.n	8008c92 <UART_SetConfig+0x1aa>
 8008c80:	e00f      	b.n	8008ca2 <UART_SetConfig+0x1ba>
 8008c82:	2300      	movs	r3, #0
 8008c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c88:	e0ad      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c90:	e0a9      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008c92:	2304      	movs	r3, #4
 8008c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c98:	e0a5      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008c9a:	2308      	movs	r3, #8
 8008c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ca0:	e0a1      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008ca2:	2310      	movs	r3, #16
 8008ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ca8:	e09d      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a4a      	ldr	r2, [pc, #296]	; (8008dd8 <UART_SetConfig+0x2f0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d125      	bne.n	8008d00 <UART_SetConfig+0x218>
 8008cb4:	4b45      	ldr	r3, [pc, #276]	; (8008dcc <UART_SetConfig+0x2e4>)
 8008cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8008cc0:	d016      	beq.n	8008cf0 <UART_SetConfig+0x208>
 8008cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8008cc4:	d818      	bhi.n	8008cf8 <UART_SetConfig+0x210>
 8008cc6:	2b80      	cmp	r3, #128	; 0x80
 8008cc8:	d00a      	beq.n	8008ce0 <UART_SetConfig+0x1f8>
 8008cca:	2b80      	cmp	r3, #128	; 0x80
 8008ccc:	d814      	bhi.n	8008cf8 <UART_SetConfig+0x210>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <UART_SetConfig+0x1f0>
 8008cd2:	2b40      	cmp	r3, #64	; 0x40
 8008cd4:	d008      	beq.n	8008ce8 <UART_SetConfig+0x200>
 8008cd6:	e00f      	b.n	8008cf8 <UART_SetConfig+0x210>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cde:	e082      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ce6:	e07e      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008ce8:	2304      	movs	r3, #4
 8008cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cee:	e07a      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008cf0:	2308      	movs	r3, #8
 8008cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cf6:	e076      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008cf8:	2310      	movs	r3, #16
 8008cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cfe:	e072      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a35      	ldr	r2, [pc, #212]	; (8008ddc <UART_SetConfig+0x2f4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d12a      	bne.n	8008d60 <UART_SetConfig+0x278>
 8008d0a:	4b30      	ldr	r3, [pc, #192]	; (8008dcc <UART_SetConfig+0x2e4>)
 8008d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d18:	d01a      	beq.n	8008d50 <UART_SetConfig+0x268>
 8008d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d1e:	d81b      	bhi.n	8008d58 <UART_SetConfig+0x270>
 8008d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d24:	d00c      	beq.n	8008d40 <UART_SetConfig+0x258>
 8008d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d2a:	d815      	bhi.n	8008d58 <UART_SetConfig+0x270>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d003      	beq.n	8008d38 <UART_SetConfig+0x250>
 8008d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d34:	d008      	beq.n	8008d48 <UART_SetConfig+0x260>
 8008d36:	e00f      	b.n	8008d58 <UART_SetConfig+0x270>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d3e:	e052      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008d40:	2302      	movs	r3, #2
 8008d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d46:	e04e      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008d48:	2304      	movs	r3, #4
 8008d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d4e:	e04a      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008d50:	2308      	movs	r3, #8
 8008d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d56:	e046      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008d58:	2310      	movs	r3, #16
 8008d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d5e:	e042      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a17      	ldr	r2, [pc, #92]	; (8008dc4 <UART_SetConfig+0x2dc>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d13a      	bne.n	8008de0 <UART_SetConfig+0x2f8>
 8008d6a:	4b18      	ldr	r3, [pc, #96]	; (8008dcc <UART_SetConfig+0x2e4>)
 8008d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d78:	d01a      	beq.n	8008db0 <UART_SetConfig+0x2c8>
 8008d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d7e:	d81b      	bhi.n	8008db8 <UART_SetConfig+0x2d0>
 8008d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d84:	d00c      	beq.n	8008da0 <UART_SetConfig+0x2b8>
 8008d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d8a:	d815      	bhi.n	8008db8 <UART_SetConfig+0x2d0>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <UART_SetConfig+0x2b0>
 8008d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d94:	d008      	beq.n	8008da8 <UART_SetConfig+0x2c0>
 8008d96:	e00f      	b.n	8008db8 <UART_SetConfig+0x2d0>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d9e:	e022      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008da0:	2302      	movs	r3, #2
 8008da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008da6:	e01e      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008da8:	2304      	movs	r3, #4
 8008daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dae:	e01a      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008db0:	2308      	movs	r3, #8
 8008db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008db6:	e016      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008db8:	2310      	movs	r3, #16
 8008dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dbe:	e012      	b.n	8008de6 <UART_SetConfig+0x2fe>
 8008dc0:	cfff69f3 	.word	0xcfff69f3
 8008dc4:	40008000 	.word	0x40008000
 8008dc8:	40013800 	.word	0x40013800
 8008dcc:	40021000 	.word	0x40021000
 8008dd0:	40004400 	.word	0x40004400
 8008dd4:	40004800 	.word	0x40004800
 8008dd8:	40004c00 	.word	0x40004c00
 8008ddc:	40005000 	.word	0x40005000
 8008de0:	2310      	movs	r3, #16
 8008de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4aae      	ldr	r2, [pc, #696]	; (80090a4 <UART_SetConfig+0x5bc>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	f040 8097 	bne.w	8008f20 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008df2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008df6:	2b08      	cmp	r3, #8
 8008df8:	d823      	bhi.n	8008e42 <UART_SetConfig+0x35a>
 8008dfa:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <UART_SetConfig+0x318>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e25 	.word	0x08008e25
 8008e04:	08008e43 	.word	0x08008e43
 8008e08:	08008e2d 	.word	0x08008e2d
 8008e0c:	08008e43 	.word	0x08008e43
 8008e10:	08008e33 	.word	0x08008e33
 8008e14:	08008e43 	.word	0x08008e43
 8008e18:	08008e43 	.word	0x08008e43
 8008e1c:	08008e43 	.word	0x08008e43
 8008e20:	08008e3b 	.word	0x08008e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e24:	f7fb f902 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8008e28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e2a:	e010      	b.n	8008e4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e2c:	4b9e      	ldr	r3, [pc, #632]	; (80090a8 <UART_SetConfig+0x5c0>)
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e30:	e00d      	b.n	8008e4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e32:	f7fb f863 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8008e36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e38:	e009      	b.n	8008e4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e40:	e005      	b.n	8008e4e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008e42:	2300      	movs	r3, #0
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 8130 	beq.w	80090b6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5a:	4a94      	ldr	r2, [pc, #592]	; (80090ac <UART_SetConfig+0x5c4>)
 8008e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e60:	461a      	mov	r2, r3
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	4413      	add	r3, r2
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d305      	bcc.n	8008e86 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d903      	bls.n	8008e8e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e8c:	e113      	b.n	80090b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	2200      	movs	r2, #0
 8008e92:	60bb      	str	r3, [r7, #8]
 8008e94:	60fa      	str	r2, [r7, #12]
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	4a84      	ldr	r2, [pc, #528]	; (80090ac <UART_SetConfig+0x5c4>)
 8008e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	603b      	str	r3, [r7, #0]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008eb0:	f7f7 f9f6 	bl	80002a0 <__aeabi_uldivmod>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4619      	mov	r1, r3
 8008ebc:	f04f 0200 	mov.w	r2, #0
 8008ec0:	f04f 0300 	mov.w	r3, #0
 8008ec4:	020b      	lsls	r3, r1, #8
 8008ec6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008eca:	0202      	lsls	r2, r0, #8
 8008ecc:	6979      	ldr	r1, [r7, #20]
 8008ece:	6849      	ldr	r1, [r1, #4]
 8008ed0:	0849      	lsrs	r1, r1, #1
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	eb12 0804 	adds.w	r8, r2, r4
 8008edc:	eb43 0905 	adc.w	r9, r3, r5
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	469a      	mov	sl, r3
 8008ee8:	4693      	mov	fp, r2
 8008eea:	4652      	mov	r2, sl
 8008eec:	465b      	mov	r3, fp
 8008eee:	4640      	mov	r0, r8
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	f7f7 f9d5 	bl	80002a0 <__aeabi_uldivmod>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4613      	mov	r3, r2
 8008efc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008efe:	6a3b      	ldr	r3, [r7, #32]
 8008f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f04:	d308      	bcc.n	8008f18 <UART_SetConfig+0x430>
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f0c:	d204      	bcs.n	8008f18 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6a3a      	ldr	r2, [r7, #32]
 8008f14:	60da      	str	r2, [r3, #12]
 8008f16:	e0ce      	b.n	80090b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f1e:	e0ca      	b.n	80090b6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f28:	d166      	bne.n	8008ff8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008f2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f2e:	2b08      	cmp	r3, #8
 8008f30:	d827      	bhi.n	8008f82 <UART_SetConfig+0x49a>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <UART_SetConfig+0x450>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f5d 	.word	0x08008f5d
 8008f3c:	08008f65 	.word	0x08008f65
 8008f40:	08008f6d 	.word	0x08008f6d
 8008f44:	08008f83 	.word	0x08008f83
 8008f48:	08008f73 	.word	0x08008f73
 8008f4c:	08008f83 	.word	0x08008f83
 8008f50:	08008f83 	.word	0x08008f83
 8008f54:	08008f83 	.word	0x08008f83
 8008f58:	08008f7b 	.word	0x08008f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f5c:	f7fb f866 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8008f60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f62:	e014      	b.n	8008f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f64:	f7fb f878 	bl	8004058 <HAL_RCC_GetPCLK2Freq>
 8008f68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f6a:	e010      	b.n	8008f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f6c:	4b4e      	ldr	r3, [pc, #312]	; (80090a8 <UART_SetConfig+0x5c0>)
 8008f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f70:	e00d      	b.n	8008f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f72:	f7fa ffc3 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8008f76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f78:	e009      	b.n	8008f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f80:	e005      	b.n	8008f8e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 8090 	beq.w	80090b6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	4a44      	ldr	r2, [pc, #272]	; (80090ac <UART_SetConfig+0x5c4>)
 8008f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fa8:	005a      	lsls	r2, r3, #1
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	085b      	lsrs	r3, r3, #1
 8008fb0:	441a      	add	r2, r3
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fba:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	2b0f      	cmp	r3, #15
 8008fc0:	d916      	bls.n	8008ff0 <UART_SetConfig+0x508>
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc8:	d212      	bcs.n	8008ff0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f023 030f 	bic.w	r3, r3, #15
 8008fd2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	085b      	lsrs	r3, r3, #1
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	8bfb      	ldrh	r3, [r7, #30]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	8bfa      	ldrh	r2, [r7, #30]
 8008fec:	60da      	str	r2, [r3, #12]
 8008fee:	e062      	b.n	80090b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ff6:	e05e      	b.n	80090b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ff8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ffc:	2b08      	cmp	r3, #8
 8008ffe:	d828      	bhi.n	8009052 <UART_SetConfig+0x56a>
 8009000:	a201      	add	r2, pc, #4	; (adr r2, 8009008 <UART_SetConfig+0x520>)
 8009002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009006:	bf00      	nop
 8009008:	0800902d 	.word	0x0800902d
 800900c:	08009035 	.word	0x08009035
 8009010:	0800903d 	.word	0x0800903d
 8009014:	08009053 	.word	0x08009053
 8009018:	08009043 	.word	0x08009043
 800901c:	08009053 	.word	0x08009053
 8009020:	08009053 	.word	0x08009053
 8009024:	08009053 	.word	0x08009053
 8009028:	0800904b 	.word	0x0800904b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800902c:	f7fa fffe 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8009030:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009032:	e014      	b.n	800905e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009034:	f7fb f810 	bl	8004058 <HAL_RCC_GetPCLK2Freq>
 8009038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800903a:	e010      	b.n	800905e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800903c:	4b1a      	ldr	r3, [pc, #104]	; (80090a8 <UART_SetConfig+0x5c0>)
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009040:	e00d      	b.n	800905e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009042:	f7fa ff5b 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8009046:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009048:	e009      	b.n	800905e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800904a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800904e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009050:	e005      	b.n	800905e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800905c:	bf00      	nop
    }

    if (pclk != 0U)
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	2b00      	cmp	r3, #0
 8009062:	d028      	beq.n	80090b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	4a10      	ldr	r2, [pc, #64]	; (80090ac <UART_SetConfig+0x5c4>)
 800906a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800906e:	461a      	mov	r2, r3
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	fbb3 f2f2 	udiv	r2, r3, r2
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	085b      	lsrs	r3, r3, #1
 800907c:	441a      	add	r2, r3
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	fbb2 f3f3 	udiv	r3, r2, r3
 8009086:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	2b0f      	cmp	r3, #15
 800908c:	d910      	bls.n	80090b0 <UART_SetConfig+0x5c8>
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009094:	d20c      	bcs.n	80090b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	b29a      	uxth	r2, r3
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	60da      	str	r2, [r3, #12]
 80090a0:	e009      	b.n	80090b6 <UART_SetConfig+0x5ce>
 80090a2:	bf00      	nop
 80090a4:	40008000 	.word	0x40008000
 80090a8:	00f42400 	.word	0x00f42400
 80090ac:	0800f3f4 	.word	0x0800f3f4
      }
      else
      {
        ret = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2200      	movs	r2, #0
 80090ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2200      	movs	r2, #0
 80090d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80090d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3730      	adds	r7, #48	; 0x30
 80090da:	46bd      	mov	sp, r7
 80090dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080090e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00a      	beq.n	800910a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00a      	beq.n	800912c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009130:	f003 0304 	and.w	r3, r3, #4
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00a      	beq.n	800914e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	430a      	orrs	r2, r1
 800914c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009152:	f003 0308 	and.w	r3, r3, #8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	430a      	orrs	r2, r1
 800916e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00a      	beq.n	8009192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009196:	f003 0320 	and.w	r3, r3, #32
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d01a      	beq.n	80091f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091de:	d10a      	bne.n	80091f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	605a      	str	r2, [r3, #4]
  }
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af02      	add	r7, sp, #8
 800922a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009234:	f7f8 f970 	bl	8001518 <HAL_GetTick>
 8009238:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0308 	and.w	r3, r3, #8
 8009244:	2b08      	cmp	r3, #8
 8009246:	d10e      	bne.n	8009266 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f82f 	bl	80092ba <UART_WaitOnFlagUntilTimeout>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e025      	b.n	80092b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b04      	cmp	r3, #4
 8009272:	d10e      	bne.n	8009292 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f819 	bl	80092ba <UART_WaitOnFlagUntilTimeout>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e00f      	b.n	80092b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2220      	movs	r2, #32
 8009296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2220      	movs	r2, #32
 800929e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b09c      	sub	sp, #112	; 0x70
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	603b      	str	r3, [r7, #0]
 80092c6:	4613      	mov	r3, r2
 80092c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ca:	e0a9      	b.n	8009420 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092d2:	f000 80a5 	beq.w	8009420 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092d6:	f7f8 f91f 	bl	8001518 <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d302      	bcc.n	80092ec <UART_WaitOnFlagUntilTimeout+0x32>
 80092e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d140      	bne.n	800936e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092f4:	e853 3f00 	ldrex	r3, [r3]
 80092f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009300:	667b      	str	r3, [r7, #100]	; 0x64
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800930a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800930c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009310:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009312:	e841 2300 	strex	r3, r2, [r1]
 8009316:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e6      	bne.n	80092ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009330:	f023 0301 	bic.w	r3, r3, #1
 8009334:	663b      	str	r3, [r7, #96]	; 0x60
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	3308      	adds	r3, #8
 800933c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800933e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009340:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800934c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e5      	bne.n	800931e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2220      	movs	r2, #32
 8009356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2220      	movs	r2, #32
 800935e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e069      	b.n	8009442 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0304 	and.w	r3, r3, #4
 8009378:	2b00      	cmp	r3, #0
 800937a:	d051      	beq.n	8009420 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800938a:	d149      	bne.n	8009420 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009394:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b4:	637b      	str	r3, [r7, #52]	; 0x34
 80093b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e6      	bne.n	8009396 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3308      	adds	r3, #8
 80093ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	613b      	str	r3, [r7, #16]
   return(result);
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	f023 0301 	bic.w	r3, r3, #1
 80093de:	66bb      	str	r3, [r7, #104]	; 0x68
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3308      	adds	r3, #8
 80093e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093e8:	623a      	str	r2, [r7, #32]
 80093ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	69f9      	ldr	r1, [r7, #28]
 80093ee:	6a3a      	ldr	r2, [r7, #32]
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e5      	bne.n	80093c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2220      	movs	r2, #32
 8009400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2220      	movs	r2, #32
 8009408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2220      	movs	r2, #32
 8009410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	e010      	b.n	8009442 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	69da      	ldr	r2, [r3, #28]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	4013      	ands	r3, r2
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	429a      	cmp	r2, r3
 800942e:	bf0c      	ite	eq
 8009430:	2301      	moveq	r3, #1
 8009432:	2300      	movne	r3, #0
 8009434:	b2db      	uxtb	r3, r3
 8009436:	461a      	mov	r2, r3
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	429a      	cmp	r2, r3
 800943c:	f43f af46 	beq.w	80092cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3770      	adds	r7, #112	; 0x70
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800944a:	b480      	push	{r7}
 800944c:	b095      	sub	sp, #84	; 0x54
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945a:	e853 3f00 	ldrex	r3, [r3]
 800945e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	461a      	mov	r2, r3
 800946e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009470:	643b      	str	r3, [r7, #64]	; 0x40
 8009472:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009476:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009478:	e841 2300 	strex	r3, r2, [r1]
 800947c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800947e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e6      	bne.n	8009452 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3308      	adds	r3, #8
 800948a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	e853 3f00 	ldrex	r3, [r3]
 8009492:	61fb      	str	r3, [r7, #28]
   return(result);
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800949a:	f023 0301 	bic.w	r3, r3, #1
 800949e:	64bb      	str	r3, [r7, #72]	; 0x48
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3308      	adds	r3, #8
 80094a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b0:	e841 2300 	strex	r3, r2, [r1]
 80094b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1e3      	bne.n	8009484 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d118      	bne.n	80094f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	f023 0310 	bic.w	r3, r3, #16
 80094d8:	647b      	str	r3, [r7, #68]	; 0x44
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094e2:	61bb      	str	r3, [r7, #24]
 80094e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e6:	6979      	ldr	r1, [r7, #20]
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	613b      	str	r3, [r7, #16]
   return(result);
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e6      	bne.n	80094c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	671a      	str	r2, [r3, #112]	; 0x70
}
 800950a:	bf00      	nop
 800950c:	3754      	adds	r7, #84	; 0x54
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009522:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f7ff fac1 	bl	8008abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800953a:	bf00      	nop
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b088      	sub	sp, #32
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	e853 3f00 	ldrex	r3, [r3]
 8009556:	60bb      	str	r3, [r7, #8]
   return(result);
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800955e:	61fb      	str	r3, [r7, #28]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	461a      	mov	r2, r3
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956c:	6979      	ldr	r1, [r7, #20]
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	e841 2300 	strex	r3, r2, [r1]
 8009574:	613b      	str	r3, [r7, #16]
   return(result);
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1e6      	bne.n	800954a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2220      	movs	r2, #32
 8009580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff fa8c 	bl	8008aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009590:	bf00      	nop
 8009592:	3720      	adds	r7, #32
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d101      	bne.n	80095ea <HAL_UARTEx_DisableFifoMode+0x16>
 80095e6:	2302      	movs	r3, #2
 80095e8:	e027      	b.n	800963a <HAL_UARTEx_DisableFifoMode+0x66>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2224      	movs	r2, #36	; 0x24
 80095f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0201 	bic.w	r2, r2, #1
 8009610:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009618:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2220      	movs	r2, #32
 800962c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009656:	2b01      	cmp	r3, #1
 8009658:	d101      	bne.n	800965e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800965a:	2302      	movs	r3, #2
 800965c:	e02d      	b.n	80096ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2224      	movs	r2, #36	; 0x24
 800966a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 0201 	bic.w	r2, r2, #1
 8009684:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f850 	bl	8009740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d101      	bne.n	80096da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096d6:	2302      	movs	r3, #2
 80096d8:	e02d      	b.n	8009736 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2224      	movs	r2, #36	; 0x24
 80096e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0201 	bic.w	r2, r2, #1
 8009700:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f812 	bl	8009740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2220      	movs	r2, #32
 8009728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800974c:	2b00      	cmp	r3, #0
 800974e:	d108      	bne.n	8009762 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009760:	e031      	b.n	80097c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009762:	2308      	movs	r3, #8
 8009764:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009766:	2308      	movs	r3, #8
 8009768:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	0e5b      	lsrs	r3, r3, #25
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 0307 	and.w	r3, r3, #7
 8009778:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	0f5b      	lsrs	r3, r3, #29
 8009782:	b2db      	uxtb	r3, r3
 8009784:	f003 0307 	and.w	r3, r3, #7
 8009788:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	7b3a      	ldrb	r2, [r7, #12]
 800978e:	4911      	ldr	r1, [pc, #68]	; (80097d4 <UARTEx_SetNbDataToProcess+0x94>)
 8009790:	5c8a      	ldrb	r2, [r1, r2]
 8009792:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009796:	7b3a      	ldrb	r2, [r7, #12]
 8009798:	490f      	ldr	r1, [pc, #60]	; (80097d8 <UARTEx_SetNbDataToProcess+0x98>)
 800979a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800979c:	fb93 f3f2 	sdiv	r3, r3, r2
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	7b7a      	ldrb	r2, [r7, #13]
 80097ac:	4909      	ldr	r1, [pc, #36]	; (80097d4 <UARTEx_SetNbDataToProcess+0x94>)
 80097ae:	5c8a      	ldrb	r2, [r1, r2]
 80097b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097b4:	7b7a      	ldrb	r2, [r7, #13]
 80097b6:	4908      	ldr	r1, [pc, #32]	; (80097d8 <UARTEx_SetNbDataToProcess+0x98>)
 80097b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80097be:	b29a      	uxth	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097c6:	bf00      	nop
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	0800f40c 	.word	0x0800f40c
 80097d8:	0800f414 	.word	0x0800f414

080097dc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80097dc:	b084      	sub	sp, #16
 80097de:	b480      	push	{r7}
 80097e0:	b085      	sub	sp, #20
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
 80097e6:	f107 001c 	add.w	r0, r7, #28
 80097ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80097f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80097f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80097f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80097fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80097fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8009802:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	4313      	orrs	r3, r2
 8009808:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	4b07      	ldr	r3, [pc, #28]	; (800982c <SDMMC_Init+0x50>)
 8009810:	4013      	ands	r3, r2
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	431a      	orrs	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	b004      	add	sp, #16
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	ffc02c00 	.word	0xffc02c00

08009830 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f043 0203 	orr.w	r2, r3, #3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009880:	2002      	movs	r0, #2
 8009882:	f7f7 fe55 	bl	8001530 <HAL_Delay>

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0303 	and.w	r3, r3, #3
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80098ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80098d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80098d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4313      	orrs	r3, r2
 80098dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68da      	ldr	r2, [r3, #12]
 80098e2:	4b06      	ldr	r3, [pc, #24]	; (80098fc <SDMMC_SendCommand+0x50>)
 80098e4:	4013      	ands	r3, r2
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	431a      	orrs	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	fffee0c0 	.word	0xfffee0c0

08009900 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	b2db      	uxtb	r3, r3
}
 800990e:	4618      	mov	r0, r3
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800991a:	b480      	push	{r7}
 800991c:	b085      	sub	sp, #20
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3314      	adds	r3, #20
 8009928:	461a      	mov	r2, r3
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	4413      	add	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685a      	ldr	r2, [r3, #4]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009966:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800996c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009972:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	431a      	orrs	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800998a:	2300      	movs	r3, #0

}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80099a6:	2310      	movs	r3, #16
 80099a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099b0:	2300      	movs	r3, #0
 80099b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099ba:	f107 0308 	add.w	r3, r7, #8
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff ff73 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80099c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ca:	2110      	movs	r1, #16
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fa7b 	bl	8009ec8 <SDMMC_GetCmdResp1>
 80099d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099d4:	69fb      	ldr	r3, [r7, #28]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3720      	adds	r7, #32
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b088      	sub	sp, #32
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80099ec:	2311      	movs	r3, #17
 80099ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099f6:	2300      	movs	r3, #0
 80099f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a00:	f107 0308 	add.w	r3, r7, #8
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7ff ff50 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a10:	2111      	movs	r1, #17
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fa58 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a1a:	69fb      	ldr	r3, [r7, #28]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3720      	adds	r7, #32
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b088      	sub	sp, #32
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009a32:	2312      	movs	r3, #18
 8009a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a46:	f107 0308 	add.w	r3, r7, #8
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7ff ff2d 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a56:	2112      	movs	r1, #18
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fa35 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a60:	69fb      	ldr	r3, [r7, #28]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3720      	adds	r7, #32
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b088      	sub	sp, #32
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009a78:	2318      	movs	r3, #24
 8009a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a82:	2300      	movs	r3, #0
 8009a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a8c:	f107 0308 	add.w	r3, r7, #8
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff ff0a 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a9c:	2118      	movs	r1, #24
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fa12 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3720      	adds	r7, #32
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b088      	sub	sp, #32
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009abe:	2319      	movs	r3, #25
 8009ac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ad0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ad2:	f107 0308 	add.w	r3, r7, #8
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff fee7 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ae2:	2119      	movs	r1, #25
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f9ef 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009aea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aec:	69fb      	ldr	r3, [r7, #28]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3720      	adds	r7, #32
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009b04:	230c      	movs	r3, #12
 8009b06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b16:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b30:	f107 0308 	add.w	r3, r7, #8
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff feb8 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009b3c:	4a08      	ldr	r2, [pc, #32]	; (8009b60 <SDMMC_CmdStopTransfer+0x68>)
 8009b3e:	210c      	movs	r1, #12
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f9c1 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009b46:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009b54:	69fb      	ldr	r3, [r7, #28]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3720      	adds	r7, #32
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	05f5e100 	.word	0x05f5e100

08009b64 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08a      	sub	sp, #40	; 0x28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009b74:	2307      	movs	r3, #7
 8009b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b7c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b86:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b88:	f107 0310 	add.w	r3, r7, #16
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7ff fe8c 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b98:	2107      	movs	r1, #7
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 f994 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009ba0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3728      	adds	r7, #40	; 0x28
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bca:	f107 0308 	add.w	r3, r7, #8
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7ff fe6b 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fbb8 	bl	800a34c <SDMMC_GetCmdError>
 8009bdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bde:	69fb      	ldr	r3, [r7, #28]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3720      	adds	r7, #32
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009bf0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009bf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009bf6:	2308      	movs	r3, #8
 8009bf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c0a:	f107 0308 	add.w	r3, r7, #8
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff fe4b 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fb4a 	bl	800a2b0 <SDMMC_GetCmdResp7>
 8009c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c1e:	69fb      	ldr	r3, [r7, #28]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3720      	adds	r7, #32
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b088      	sub	sp, #32
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009c36:	2337      	movs	r3, #55	; 0x37
 8009c38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c40:	2300      	movs	r3, #0
 8009c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c4a:	f107 0308 	add.w	r3, r7, #8
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7ff fe2b 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c5a:	2137      	movs	r1, #55	; 0x37
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f933 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009c62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c64:	69fb      	ldr	r3, [r7, #28]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3720      	adds	r7, #32
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b088      	sub	sp, #32
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009c7c:	2329      	movs	r3, #41	; 0x29
 8009c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c86:	2300      	movs	r3, #0
 8009c88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff fe08 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fa4f 	bl	800a140 <SDMMC_GetCmdResp3>
 8009ca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b088      	sub	sp, #32
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009cbc:	2306      	movs	r3, #6
 8009cbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cd0:	f107 0308 	add.w	r3, r7, #8
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff fde8 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce0:	2106      	movs	r1, #6
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f8f0 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009ce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cea:	69fb      	ldr	r3, [r7, #28]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3720      	adds	r7, #32
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009d00:	2333      	movs	r3, #51	; 0x33
 8009d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d14:	f107 0308 	add.w	r3, r7, #8
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff fdc6 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d24:	2133      	movs	r1, #51	; 0x33
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f8ce 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009d2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d2e:	69fb      	ldr	r3, [r7, #28]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3720      	adds	r7, #32
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009d44:	2302      	movs	r3, #2
 8009d46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d58:	f107 0308 	add.w	r3, r7, #8
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7ff fda4 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f9a1 	bl	800a0ac <SDMMC_GetCmdResp2>
 8009d6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d6c:	69fb      	ldr	r3, [r7, #28]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3720      	adds	r7, #32
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b088      	sub	sp, #32
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009d84:	2309      	movs	r3, #9
 8009d86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d98:	f107 0308 	add.w	r3, r7, #8
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7ff fd84 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f981 	bl	800a0ac <SDMMC_GetCmdResp2>
 8009daa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dac:	69fb      	ldr	r3, [r7, #28]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b088      	sub	sp, #32
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dd8:	f107 0308 	add.w	r3, r7, #8
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff fd64 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	2103      	movs	r1, #3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f9e9 	bl	800a1c0 <SDMMC_GetCmdResp6>
 8009dee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009df0:	69fb      	ldr	r3, [r7, #28]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3720      	adds	r7, #32
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b088      	sub	sp, #32
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009e08:	230d      	movs	r3, #13
 8009e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e12:	2300      	movs	r3, #0
 8009e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e1c:	f107 0308 	add.w	r3, r7, #8
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff fd42 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e2c:	210d      	movs	r1, #13
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f84a 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e36:	69fb      	ldr	r3, [r7, #28]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3720      	adds	r7, #32
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009e4c:	230d      	movs	r3, #13
 8009e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e56:	2300      	movs	r3, #0
 8009e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e60:	f107 0308 	add.w	r3, r7, #8
 8009e64:	4619      	mov	r1, r3
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7ff fd20 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e70:	210d      	movs	r1, #13
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f828 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e7a:	69fb      	ldr	r3, [r7, #28]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3720      	adds	r7, #32
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009e90:	230b      	movs	r3, #11
 8009e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ea4:	f107 0308 	add.w	r3, r7, #8
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff fcfe 	bl	80098ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eb4:	210b      	movs	r1, #11
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f806 	bl	8009ec8 <SDMMC_GetCmdResp1>
 8009ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ebe:	69fb      	ldr	r3, [r7, #28]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3720      	adds	r7, #32
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009ed6:	4b70      	ldr	r3, [pc, #448]	; (800a098 <SDMMC_GetCmdResp1+0x1d0>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a70      	ldr	r2, [pc, #448]	; (800a09c <SDMMC_GetCmdResp1+0x1d4>)
 8009edc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee0:	0a5a      	lsrs	r2, r3, #9
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	fb02 f303 	mul.w	r3, r2, r3
 8009ee8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	1e5a      	subs	r2, r3, #1
 8009eee:	61fa      	str	r2, [r7, #28]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d102      	bne.n	8009efa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ef4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ef8:	e0c9      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efe:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009f00:	69ba      	ldr	r2, [r7, #24]
 8009f02:	4b67      	ldr	r3, [pc, #412]	; (800a0a0 <SDMMC_GetCmdResp1+0x1d8>)
 8009f04:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d0ef      	beq.n	8009eea <SDMMC_GetCmdResp1+0x22>
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1ea      	bne.n	8009eea <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d004      	beq.n	8009f2a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2204      	movs	r2, #4
 8009f24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f26:	2304      	movs	r3, #4
 8009f28:	e0b1      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d004      	beq.n	8009f40 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e0a6      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	4a58      	ldr	r2, [pc, #352]	; (800a0a4 <SDMMC_GetCmdResp1+0x1dc>)
 8009f44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f7ff fcda 	bl	8009900 <SDMMC_GetCommandResponse>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	461a      	mov	r2, r3
 8009f50:	7afb      	ldrb	r3, [r7, #11]
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d001      	beq.n	8009f5a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e099      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff fcdc 	bl	800991a <SDMMC_GetResponse>
 8009f62:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	4b50      	ldr	r3, [pc, #320]	; (800a0a8 <SDMMC_GetCmdResp1+0x1e0>)
 8009f68:	4013      	ands	r3, r2
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d101      	bne.n	8009f72 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e08d      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	da02      	bge.n	8009f7e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009f78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f7c:	e087      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009f88:	2340      	movs	r3, #64	; 0x40
 8009f8a:	e080      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009f96:	2380      	movs	r3, #128	; 0x80
 8009f98:	e079      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fa8:	e071      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fb8:	e069      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fc8:	e061      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009fd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fd8:	e059      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fe8:	e051      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ff8:	e049      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a004:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a008:	e041      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a018:	e039      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a028:	e031      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a034:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a038:	e029      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a044:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a048:	e021      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d002      	beq.n	800a05a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a054:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a058:	e019      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a064:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a068:	e011      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a074:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a078:	e009      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f003 0308 	and.w	r3, r3, #8
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a084:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a088:	e001      	b.n	800a08e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a08a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3720      	adds	r7, #32
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20000000 	.word	0x20000000
 800a09c:	10624dd3 	.word	0x10624dd3
 800a0a0:	00200045 	.word	0x00200045
 800a0a4:	002000c5 	.word	0x002000c5
 800a0a8:	fdffe008 	.word	0xfdffe008

0800a0ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0b4:	4b1f      	ldr	r3, [pc, #124]	; (800a134 <SDMMC_GetCmdResp2+0x88>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a1f      	ldr	r2, [pc, #124]	; (800a138 <SDMMC_GetCmdResp2+0x8c>)
 800a0ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a0be:	0a5b      	lsrs	r3, r3, #9
 800a0c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0c4:	fb02 f303 	mul.w	r3, r2, r3
 800a0c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	1e5a      	subs	r2, r3, #1
 800a0ce:	60fa      	str	r2, [r7, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0d8:	e026      	b.n	800a128 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0ef      	beq.n	800a0ca <SDMMC_GetCmdResp2+0x1e>
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1ea      	bne.n	800a0ca <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f8:	f003 0304 	and.w	r3, r3, #4
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d004      	beq.n	800a10a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2204      	movs	r2, #4
 800a104:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a106:	2304      	movs	r3, #4
 800a108:	e00e      	b.n	800a128 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10e:	f003 0301 	and.w	r3, r3, #1
 800a112:	2b00      	cmp	r3, #0
 800a114:	d004      	beq.n	800a120 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e003      	b.n	800a128 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a06      	ldr	r2, [pc, #24]	; (800a13c <SDMMC_GetCmdResp2+0x90>)
 800a124:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	20000000 	.word	0x20000000
 800a138:	10624dd3 	.word	0x10624dd3
 800a13c:	002000c5 	.word	0x002000c5

0800a140 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a148:	4b1a      	ldr	r3, [pc, #104]	; (800a1b4 <SDMMC_GetCmdResp3+0x74>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a1a      	ldr	r2, [pc, #104]	; (800a1b8 <SDMMC_GetCmdResp3+0x78>)
 800a14e:	fba2 2303 	umull	r2, r3, r2, r3
 800a152:	0a5b      	lsrs	r3, r3, #9
 800a154:	f241 3288 	movw	r2, #5000	; 0x1388
 800a158:	fb02 f303 	mul.w	r3, r2, r3
 800a15c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	1e5a      	subs	r2, r3, #1
 800a162:	60fa      	str	r2, [r7, #12]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d102      	bne.n	800a16e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a168:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a16c:	e01b      	b.n	800a1a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a172:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0ef      	beq.n	800a15e <SDMMC_GetCmdResp3+0x1e>
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1ea      	bne.n	800a15e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	d004      	beq.n	800a19e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2204      	movs	r2, #4
 800a198:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a19a:	2304      	movs	r3, #4
 800a19c:	e003      	b.n	800a1a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a06      	ldr	r2, [pc, #24]	; (800a1bc <SDMMC_GetCmdResp3+0x7c>)
 800a1a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	20000000 	.word	0x20000000
 800a1b8:	10624dd3 	.word	0x10624dd3
 800a1bc:	002000c5 	.word	0x002000c5

0800a1c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1ce:	4b35      	ldr	r3, [pc, #212]	; (800a2a4 <SDMMC_GetCmdResp6+0xe4>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a35      	ldr	r2, [pc, #212]	; (800a2a8 <SDMMC_GetCmdResp6+0xe8>)
 800a1d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d8:	0a5b      	lsrs	r3, r3, #9
 800a1da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1de:	fb02 f303 	mul.w	r3, r2, r3
 800a1e2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	1e5a      	subs	r2, r3, #1
 800a1e8:	61fa      	str	r2, [r7, #28]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d102      	bne.n	800a1f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1f2:	e052      	b.n	800a29a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0ef      	beq.n	800a1e4 <SDMMC_GetCmdResp6+0x24>
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1ea      	bne.n	800a1e4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a212:	f003 0304 	and.w	r3, r3, #4
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2204      	movs	r2, #4
 800a21e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a220:	2304      	movs	r3, #4
 800a222:	e03a      	b.n	800a29a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d004      	beq.n	800a23a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2201      	movs	r2, #1
 800a234:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a236:	2301      	movs	r3, #1
 800a238:	e02f      	b.n	800a29a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7ff fb60 	bl	8009900 <SDMMC_GetCommandResponse>
 800a240:	4603      	mov	r3, r0
 800a242:	461a      	mov	r2, r3
 800a244:	7afb      	ldrb	r3, [r7, #11]
 800a246:	4293      	cmp	r3, r2
 800a248:	d001      	beq.n	800a24e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e025      	b.n	800a29a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	4a16      	ldr	r2, [pc, #88]	; (800a2ac <SDMMC_GetCmdResp6+0xec>)
 800a252:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a254:	2100      	movs	r1, #0
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f7ff fb5f 	bl	800991a <SDMMC_GetResponse>
 800a25c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d106      	bne.n	800a276 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	0c1b      	lsrs	r3, r3, #16
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a272:	2300      	movs	r3, #0
 800a274:	e011      	b.n	800a29a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a284:	e009      	b.n	800a29a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a294:	e001      	b.n	800a29a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3720      	adds	r7, #32
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20000000 	.word	0x20000000
 800a2a8:	10624dd3 	.word	0x10624dd3
 800a2ac:	002000c5 	.word	0x002000c5

0800a2b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2b8:	4b22      	ldr	r3, [pc, #136]	; (800a344 <SDMMC_GetCmdResp7+0x94>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a22      	ldr	r2, [pc, #136]	; (800a348 <SDMMC_GetCmdResp7+0x98>)
 800a2be:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c2:	0a5b      	lsrs	r3, r3, #9
 800a2c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2c8:	fb02 f303 	mul.w	r3, r2, r3
 800a2cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	1e5a      	subs	r2, r3, #1
 800a2d2:	60fa      	str	r2, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d102      	bne.n	800a2de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2dc:	e02c      	b.n	800a338 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d0ef      	beq.n	800a2ce <SDMMC_GetCmdResp7+0x1e>
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1ea      	bne.n	800a2ce <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b00      	cmp	r3, #0
 800a302:	d004      	beq.n	800a30e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2204      	movs	r2, #4
 800a308:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a30a:	2304      	movs	r3, #4
 800a30c:	e014      	b.n	800a338 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d004      	beq.n	800a324 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a320:	2301      	movs	r3, #1
 800a322:	e009      	b.n	800a338 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2240      	movs	r2, #64	; 0x40
 800a334:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a336:	2300      	movs	r3, #0

}
 800a338:	4618      	mov	r0, r3
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	20000000 	.word	0x20000000
 800a348:	10624dd3 	.word	0x10624dd3

0800a34c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a354:	4b11      	ldr	r3, [pc, #68]	; (800a39c <SDMMC_GetCmdError+0x50>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a11      	ldr	r2, [pc, #68]	; (800a3a0 <SDMMC_GetCmdError+0x54>)
 800a35a:	fba2 2303 	umull	r2, r3, r2, r3
 800a35e:	0a5b      	lsrs	r3, r3, #9
 800a360:	f241 3288 	movw	r2, #5000	; 0x1388
 800a364:	fb02 f303 	mul.w	r3, r2, r3
 800a368:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	1e5a      	subs	r2, r3, #1
 800a36e:	60fa      	str	r2, [r7, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d102      	bne.n	800a37a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a374:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a378:	e009      	b.n	800a38e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0f1      	beq.n	800a36a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a06      	ldr	r2, [pc, #24]	; (800a3a4 <SDMMC_GetCmdError+0x58>)
 800a38a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	20000000 	.word	0x20000000
 800a3a0:	10624dd3 	.word	0x10624dd3
 800a3a4:	002000c5 	.word	0x002000c5

0800a3a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	f107 001c 	add.w	r0, r7, #28
 800a3b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f001 faf6 	bl	800b9b8 <USB_CoreReset>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d106      	bne.n	800a3e4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	639a      	str	r2, [r3, #56]	; 0x38
 800a3e2:	e005      	b.n	800a3f0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3fc:	b004      	add	sp, #16
 800a3fe:	4770      	bx	lr

0800a400 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a400:	b480      	push	{r7}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	4613      	mov	r3, r2
 800a40c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a40e:	79fb      	ldrb	r3, [r7, #7]
 800a410:	2b02      	cmp	r3, #2
 800a412:	d165      	bne.n	800a4e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	4a3e      	ldr	r2, [pc, #248]	; (800a510 <USB_SetTurnaroundTime+0x110>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d906      	bls.n	800a42a <USB_SetTurnaroundTime+0x2a>
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4a3d      	ldr	r2, [pc, #244]	; (800a514 <USB_SetTurnaroundTime+0x114>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d202      	bcs.n	800a42a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a424:	230f      	movs	r3, #15
 800a426:	617b      	str	r3, [r7, #20]
 800a428:	e05c      	b.n	800a4e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	4a39      	ldr	r2, [pc, #228]	; (800a514 <USB_SetTurnaroundTime+0x114>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d306      	bcc.n	800a440 <USB_SetTurnaroundTime+0x40>
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4a38      	ldr	r2, [pc, #224]	; (800a518 <USB_SetTurnaroundTime+0x118>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d202      	bcs.n	800a440 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a43a:	230e      	movs	r3, #14
 800a43c:	617b      	str	r3, [r7, #20]
 800a43e:	e051      	b.n	800a4e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4a35      	ldr	r2, [pc, #212]	; (800a518 <USB_SetTurnaroundTime+0x118>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d306      	bcc.n	800a456 <USB_SetTurnaroundTime+0x56>
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4a34      	ldr	r2, [pc, #208]	; (800a51c <USB_SetTurnaroundTime+0x11c>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d202      	bcs.n	800a456 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a450:	230d      	movs	r3, #13
 800a452:	617b      	str	r3, [r7, #20]
 800a454:	e046      	b.n	800a4e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	4a30      	ldr	r2, [pc, #192]	; (800a51c <USB_SetTurnaroundTime+0x11c>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d306      	bcc.n	800a46c <USB_SetTurnaroundTime+0x6c>
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4a2f      	ldr	r2, [pc, #188]	; (800a520 <USB_SetTurnaroundTime+0x120>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d802      	bhi.n	800a46c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a466:	230c      	movs	r3, #12
 800a468:	617b      	str	r3, [r7, #20]
 800a46a:	e03b      	b.n	800a4e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	4a2c      	ldr	r2, [pc, #176]	; (800a520 <USB_SetTurnaroundTime+0x120>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d906      	bls.n	800a482 <USB_SetTurnaroundTime+0x82>
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	4a2b      	ldr	r2, [pc, #172]	; (800a524 <USB_SetTurnaroundTime+0x124>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d802      	bhi.n	800a482 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a47c:	230b      	movs	r3, #11
 800a47e:	617b      	str	r3, [r7, #20]
 800a480:	e030      	b.n	800a4e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	4a27      	ldr	r2, [pc, #156]	; (800a524 <USB_SetTurnaroundTime+0x124>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d906      	bls.n	800a498 <USB_SetTurnaroundTime+0x98>
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4a26      	ldr	r2, [pc, #152]	; (800a528 <USB_SetTurnaroundTime+0x128>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d802      	bhi.n	800a498 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a492:	230a      	movs	r3, #10
 800a494:	617b      	str	r3, [r7, #20]
 800a496:	e025      	b.n	800a4e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	4a23      	ldr	r2, [pc, #140]	; (800a528 <USB_SetTurnaroundTime+0x128>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d906      	bls.n	800a4ae <USB_SetTurnaroundTime+0xae>
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	4a22      	ldr	r2, [pc, #136]	; (800a52c <USB_SetTurnaroundTime+0x12c>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d202      	bcs.n	800a4ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a4a8:	2309      	movs	r3, #9
 800a4aa:	617b      	str	r3, [r7, #20]
 800a4ac:	e01a      	b.n	800a4e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	4a1e      	ldr	r2, [pc, #120]	; (800a52c <USB_SetTurnaroundTime+0x12c>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d306      	bcc.n	800a4c4 <USB_SetTurnaroundTime+0xc4>
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	4a1d      	ldr	r2, [pc, #116]	; (800a530 <USB_SetTurnaroundTime+0x130>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d802      	bhi.n	800a4c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a4be:	2308      	movs	r3, #8
 800a4c0:	617b      	str	r3, [r7, #20]
 800a4c2:	e00f      	b.n	800a4e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4a1a      	ldr	r2, [pc, #104]	; (800a530 <USB_SetTurnaroundTime+0x130>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d906      	bls.n	800a4da <USB_SetTurnaroundTime+0xda>
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	4a19      	ldr	r2, [pc, #100]	; (800a534 <USB_SetTurnaroundTime+0x134>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d202      	bcs.n	800a4da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a4d4:	2307      	movs	r3, #7
 800a4d6:	617b      	str	r3, [r7, #20]
 800a4d8:	e004      	b.n	800a4e4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a4da:	2306      	movs	r3, #6
 800a4dc:	617b      	str	r3, [r7, #20]
 800a4de:	e001      	b.n	800a4e4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a4e0:	2309      	movs	r3, #9
 800a4e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	68da      	ldr	r2, [r3, #12]
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	029b      	lsls	r3, r3, #10
 800a4f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	371c      	adds	r7, #28
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	00d8acbf 	.word	0x00d8acbf
 800a514:	00e4e1c0 	.word	0x00e4e1c0
 800a518:	00f42400 	.word	0x00f42400
 800a51c:	01067380 	.word	0x01067380
 800a520:	011a499f 	.word	0x011a499f
 800a524:	01312cff 	.word	0x01312cff
 800a528:	014ca43f 	.word	0x014ca43f
 800a52c:	016e3600 	.word	0x016e3600
 800a530:	01a6ab1f 	.word	0x01a6ab1f
 800a534:	01e84800 	.word	0x01e84800

0800a538 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	f043 0201 	orr.w	r2, r3, #1
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b083      	sub	sp, #12
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f023 0201 	bic.w	r2, r3, #1
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a598:	78fb      	ldrb	r3, [r7, #3]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d115      	bne.n	800a5ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	f7f6 ffc0 	bl	8001530 <HAL_Delay>
      ms++;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f001 f985 	bl	800b8c6 <USB_GetMode>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d01e      	beq.n	800a600 <USB_SetCurrentMode+0x84>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2b31      	cmp	r3, #49	; 0x31
 800a5c6:	d9f0      	bls.n	800a5aa <USB_SetCurrentMode+0x2e>
 800a5c8:	e01a      	b.n	800a600 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a5ca:	78fb      	ldrb	r3, [r7, #3]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d115      	bne.n	800a5fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5dc:	2001      	movs	r0, #1
 800a5de:	f7f6 ffa7 	bl	8001530 <HAL_Delay>
      ms++;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 f96c 	bl	800b8c6 <USB_GetMode>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d005      	beq.n	800a600 <USB_SetCurrentMode+0x84>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b31      	cmp	r3, #49	; 0x31
 800a5f8:	d9f0      	bls.n	800a5dc <USB_SetCurrentMode+0x60>
 800a5fa:	e001      	b.n	800a600 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e005      	b.n	800a60c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b32      	cmp	r3, #50	; 0x32
 800a604:	d101      	bne.n	800a60a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e000      	b.n	800a60c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a614:	b084      	sub	sp, #16
 800a616:	b580      	push	{r7, lr}
 800a618:	b086      	sub	sp, #24
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a62e:	2300      	movs	r3, #0
 800a630:	613b      	str	r3, [r7, #16]
 800a632:	e009      	b.n	800a648 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3340      	adds	r3, #64	; 0x40
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	2200      	movs	r2, #0
 800a640:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	3301      	adds	r3, #1
 800a646:	613b      	str	r3, [r7, #16]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	2b0e      	cmp	r3, #14
 800a64c:	d9f2      	bls.n	800a634 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a64e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a650:	2b00      	cmp	r3, #0
 800a652:	d11c      	bne.n	800a68e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a662:	f043 0302 	orr.w	r3, r3, #2
 800a666:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	e005      	b.n	800a69a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a692:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	680b      	ldr	r3, [r1, #0]
 800a6b8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a6ba:	2103      	movs	r1, #3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f959 	bl	800a974 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a6c2:	2110      	movs	r1, #16
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f8f1 	bl	800a8ac <USB_FlushTxFifo>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f91d 	bl	800a914 <USB_FlushRxFifo>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a702:	461a      	mov	r2, r3
 800a704:	2300      	movs	r3, #0
 800a706:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a708:	2300      	movs	r3, #0
 800a70a:	613b      	str	r3, [r7, #16]
 800a70c:	e043      	b.n	800a796 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	4413      	add	r3, r2
 800a716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a724:	d118      	bne.n	800a758 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10a      	bne.n	800a742 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	015a      	lsls	r2, r3, #5
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	4413      	add	r3, r2
 800a734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a738:	461a      	mov	r2, r3
 800a73a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	e013      	b.n	800a76a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a74e:	461a      	mov	r2, r3
 800a750:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	e008      	b.n	800a76a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a764:	461a      	mov	r2, r3
 800a766:	2300      	movs	r3, #0
 800a768:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	015a      	lsls	r2, r3, #5
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4413      	add	r3, r2
 800a772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a776:	461a      	mov	r2, r3
 800a778:	2300      	movs	r3, #0
 800a77a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	015a      	lsls	r2, r3, #5
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4413      	add	r3, r2
 800a784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a788:	461a      	mov	r2, r3
 800a78a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a78e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	3301      	adds	r3, #1
 800a794:	613b      	str	r3, [r7, #16]
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d3b7      	bcc.n	800a70e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a79e:	2300      	movs	r3, #0
 800a7a0:	613b      	str	r3, [r7, #16]
 800a7a2:	e043      	b.n	800a82c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7ba:	d118      	bne.n	800a7ee <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10a      	bne.n	800a7d8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	e013      	b.n	800a800 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	015a      	lsls	r2, r3, #5
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4413      	add	r3, r2
 800a7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7ea:	6013      	str	r3, [r2, #0]
 800a7ec:	e008      	b.n	800a800 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	015a      	lsls	r2, r3, #5
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a80c:	461a      	mov	r2, r3
 800a80e:	2300      	movs	r3, #0
 800a810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	015a      	lsls	r2, r3, #5
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	4413      	add	r3, r2
 800a81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a81e:	461a      	mov	r2, r3
 800a820:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a824:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	3301      	adds	r3, #1
 800a82a:	613b      	str	r3, [r7, #16]
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	429a      	cmp	r2, r3
 800a832:	d3b7      	bcc.n	800a7a4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a846:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a854:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	f043 0210 	orr.w	r2, r3, #16
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	699a      	ldr	r2, [r3, #24]
 800a866:	4b10      	ldr	r3, [pc, #64]	; (800a8a8 <USB_DevInit+0x294>)
 800a868:	4313      	orrs	r3, r2
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d005      	beq.n	800a880 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	f043 0208 	orr.w	r2, r3, #8
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a882:	2b01      	cmp	r3, #1
 800a884:	d107      	bne.n	800a896 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a88e:	f043 0304 	orr.w	r3, r3, #4
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a896:	7dfb      	ldrb	r3, [r7, #23]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8a2:	b004      	add	sp, #16
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	803c3800 	.word	0x803c3800

0800a8ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	4a13      	ldr	r2, [pc, #76]	; (800a910 <USB_FlushTxFifo+0x64>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d901      	bls.n	800a8cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e01b      	b.n	800a904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	daf2      	bge.n	800a8ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	019b      	lsls	r3, r3, #6
 800a8dc:	f043 0220 	orr.w	r2, r3, #32
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	4a08      	ldr	r2, [pc, #32]	; (800a910 <USB_FlushTxFifo+0x64>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d901      	bls.n	800a8f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e006      	b.n	800a904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b20      	cmp	r3, #32
 800a900:	d0f0      	beq.n	800a8e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	00030d40 	.word	0x00030d40

0800a914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	3301      	adds	r3, #1
 800a924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4a11      	ldr	r2, [pc, #68]	; (800a970 <USB_FlushRxFifo+0x5c>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d901      	bls.n	800a932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e018      	b.n	800a964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	2b00      	cmp	r3, #0
 800a938:	daf2      	bge.n	800a920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a93a:	2300      	movs	r3, #0
 800a93c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2210      	movs	r2, #16
 800a942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3301      	adds	r3, #1
 800a948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4a08      	ldr	r2, [pc, #32]	; (800a970 <USB_FlushRxFifo+0x5c>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d901      	bls.n	800a956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e006      	b.n	800a964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	f003 0310 	and.w	r3, r3, #16
 800a95e:	2b10      	cmp	r3, #16
 800a960:	d0f0      	beq.n	800a944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	00030d40 	.word	0x00030d40

0800a974 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	78fb      	ldrb	r3, [r7, #3]
 800a98e:	68f9      	ldr	r1, [r7, #12]
 800a990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a994:	4313      	orrs	r3, r2
 800a996:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b087      	sub	sp, #28
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	f003 0306 	and.w	r3, r3, #6
 800a9be:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d002      	beq.n	800a9cc <USB_GetDevSpeed+0x26>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b06      	cmp	r3, #6
 800a9ca:	d102      	bne.n	800a9d2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	75fb      	strb	r3, [r7, #23]
 800a9d0:	e001      	b.n	800a9d6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a9d2:	230f      	movs	r3, #15
 800a9d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	371c      	adds	r7, #28
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	785b      	ldrb	r3, [r3, #1]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d13a      	bne.n	800aa76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa06:	69da      	ldr	r2, [r3, #28]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	f003 030f 	and.w	r3, r3, #15
 800aa10:	2101      	movs	r1, #1
 800aa12:	fa01 f303 	lsl.w	r3, r1, r3
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	68f9      	ldr	r1, [r7, #12]
 800aa1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	015a      	lsls	r2, r3, #5
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	4413      	add	r3, r2
 800aa2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d155      	bne.n	800aae4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	791b      	ldrb	r3, [r3, #4]
 800aa52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	059b      	lsls	r3, r3, #22
 800aa5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	0151      	lsls	r1, r2, #5
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	440a      	add	r2, r1
 800aa66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	e036      	b.n	800aae4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa7c:	69da      	ldr	r2, [r3, #28]
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	f003 030f 	and.w	r3, r3, #15
 800aa86:	2101      	movs	r1, #1
 800aa88:	fa01 f303 	lsl.w	r3, r1, r3
 800aa8c:	041b      	lsls	r3, r3, #16
 800aa8e:	68f9      	ldr	r1, [r7, #12]
 800aa90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa94:	4313      	orrs	r3, r2
 800aa96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d11a      	bne.n	800aae4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	015a      	lsls	r2, r3, #5
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	4413      	add	r3, r2
 800aab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	791b      	ldrb	r3, [r3, #4]
 800aac8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aaca:	430b      	orrs	r3, r1
 800aacc:	4313      	orrs	r3, r2
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	0151      	lsls	r1, r2, #5
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	440a      	add	r2, r1
 800aad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aae2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
	...

0800aaf4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	785b      	ldrb	r3, [r3, #1]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d161      	bne.n	800abd4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab26:	d11f      	bne.n	800ab68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	015a      	lsls	r2, r3, #5
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4413      	add	r3, r2
 800ab30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	0151      	lsls	r1, r2, #5
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	440a      	add	r2, r1
 800ab3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	015a      	lsls	r2, r3, #5
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	4413      	add	r3, r2
 800ab50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68ba      	ldr	r2, [r7, #8]
 800ab58:	0151      	lsls	r1, r2, #5
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	440a      	add	r2, r1
 800ab5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	f003 030f 	and.w	r3, r3, #15
 800ab78:	2101      	movs	r1, #1
 800ab7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	43db      	mvns	r3, r3
 800ab82:	68f9      	ldr	r1, [r7, #12]
 800ab84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab88:	4013      	ands	r3, r2
 800ab8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab92:	69da      	ldr	r2, [r3, #28]
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	f003 030f 	and.w	r3, r3, #15
 800ab9c:	2101      	movs	r1, #1
 800ab9e:	fa01 f303 	lsl.w	r3, r1, r3
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	43db      	mvns	r3, r3
 800aba6:	68f9      	ldr	r1, [r7, #12]
 800aba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abac:	4013      	ands	r3, r2
 800abae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	015a      	lsls	r2, r3, #5
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	4413      	add	r3, r2
 800abb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	0159      	lsls	r1, r3, #5
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	440b      	add	r3, r1
 800abc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abca:	4619      	mov	r1, r3
 800abcc:	4b35      	ldr	r3, [pc, #212]	; (800aca4 <USB_DeactivateEndpoint+0x1b0>)
 800abce:	4013      	ands	r3, r2
 800abd0:	600b      	str	r3, [r1, #0]
 800abd2:	e060      	b.n	800ac96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abea:	d11f      	bne.n	800ac2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	015a      	lsls	r2, r3, #5
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	4413      	add	r3, r2
 800abf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	0151      	lsls	r1, r2, #5
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	440a      	add	r2, r1
 800ac02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	015a      	lsls	r2, r3, #5
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	4413      	add	r3, r2
 800ac14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	0151      	lsls	r1, r2, #5
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	440a      	add	r2, r1
 800ac22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	f003 030f 	and.w	r3, r3, #15
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac42:	041b      	lsls	r3, r3, #16
 800ac44:	43db      	mvns	r3, r3
 800ac46:	68f9      	ldr	r1, [r7, #12]
 800ac48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac56:	69da      	ldr	r2, [r3, #28]
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	f003 030f 	and.w	r3, r3, #15
 800ac60:	2101      	movs	r1, #1
 800ac62:	fa01 f303 	lsl.w	r3, r1, r3
 800ac66:	041b      	lsls	r3, r3, #16
 800ac68:	43db      	mvns	r3, r3
 800ac6a:	68f9      	ldr	r1, [r7, #12]
 800ac6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac70:	4013      	ands	r3, r2
 800ac72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	015a      	lsls	r2, r3, #5
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	0159      	lsls	r1, r3, #5
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	440b      	add	r3, r1
 800ac8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac8e:	4619      	mov	r1, r3
 800ac90:	4b05      	ldr	r3, [pc, #20]	; (800aca8 <USB_DeactivateEndpoint+0x1b4>)
 800ac92:	4013      	ands	r3, r2
 800ac94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr
 800aca4:	ec337800 	.word	0xec337800
 800aca8:	eff37800 	.word	0xeff37800

0800acac <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	785b      	ldrb	r3, [r3, #1]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	f040 810a 	bne.w	800aede <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d132      	bne.n	800ad38 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	015a      	lsls	r2, r3, #5
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	4413      	add	r3, r2
 800acda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	0151      	lsls	r1, r2, #5
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	440a      	add	r2, r1
 800ace8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800acf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800acf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	015a      	lsls	r2, r3, #5
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	4413      	add	r3, r2
 800acfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	0151      	lsls	r1, r2, #5
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	440a      	add	r2, r1
 800ad0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	015a      	lsls	r2, r3, #5
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	0151      	lsls	r1, r2, #5
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	440a      	add	r2, r1
 800ad2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad30:	0cdb      	lsrs	r3, r3, #19
 800ad32:	04db      	lsls	r3, r3, #19
 800ad34:	6113      	str	r3, [r2, #16]
 800ad36:	e074      	b.n	800ae22 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	015a      	lsls	r2, r3, #5
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	0151      	lsls	r1, r2, #5
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	440a      	add	r2, r1
 800ad4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad52:	0cdb      	lsrs	r3, r3, #19
 800ad54:	04db      	lsls	r3, r3, #19
 800ad56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	0151      	lsls	r1, r2, #5
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	440a      	add	r2, r1
 800ad6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad88:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	6999      	ldr	r1, [r3, #24]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	440b      	add	r3, r1
 800ad94:	1e59      	subs	r1, r3, #1
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad9e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ada0:	4b9e      	ldr	r3, [pc, #632]	; (800b01c <USB_EPStartXfer+0x370>)
 800ada2:	400b      	ands	r3, r1
 800ada4:	6939      	ldr	r1, [r7, #16]
 800ada6:	0148      	lsls	r0, r1, #5
 800ada8:	6979      	ldr	r1, [r7, #20]
 800adaa:	4401      	add	r1, r0
 800adac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800adb0:	4313      	orrs	r3, r2
 800adb2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	015a      	lsls	r2, r3, #5
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc0:	691a      	ldr	r2, [r3, #16]
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adca:	6939      	ldr	r1, [r7, #16]
 800adcc:	0148      	lsls	r0, r1, #5
 800adce:	6979      	ldr	r1, [r7, #20]
 800add0:	4401      	add	r1, r0
 800add2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800add6:	4313      	orrs	r3, r2
 800add8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	791b      	ldrb	r3, [r3, #4]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d11f      	bne.n	800ae22 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	015a      	lsls	r2, r3, #5
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	4413      	add	r3, r2
 800adea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	0151      	lsls	r1, r2, #5
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	440a      	add	r2, r1
 800adf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ae00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	693a      	ldr	r2, [r7, #16]
 800ae12:	0151      	lsls	r1, r2, #5
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	440a      	add	r2, r1
 800ae18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae20:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	015a      	lsls	r2, r3, #5
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	0151      	lsls	r1, r2, #5
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	440a      	add	r2, r1
 800ae38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae40:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	791b      	ldrb	r3, [r3, #4]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d015      	beq.n	800ae76 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f000 8106 	beq.w	800b060 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	f003 030f 	and.w	r3, r3, #15
 800ae64:	2101      	movs	r1, #1
 800ae66:	fa01 f303 	lsl.w	r3, r1, r3
 800ae6a:	6979      	ldr	r1, [r7, #20]
 800ae6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae70:	4313      	orrs	r3, r2
 800ae72:	634b      	str	r3, [r1, #52]	; 0x34
 800ae74:	e0f4      	b.n	800b060 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d110      	bne.n	800aea8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	015a      	lsls	r2, r3, #5
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	0151      	lsls	r1, r2, #5
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	440a      	add	r2, r1
 800ae9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aea4:	6013      	str	r3, [r2, #0]
 800aea6:	e00f      	b.n	800aec8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	015a      	lsls	r2, r3, #5
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	4413      	add	r3, r2
 800aeb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	0151      	lsls	r1, r2, #5
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	440a      	add	r2, r1
 800aebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aec6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	6919      	ldr	r1, [r3, #16]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	781a      	ldrb	r2, [r3, #0]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa94 	bl	800b404 <USB_WritePacket>
 800aedc:	e0c0      	b.n	800b060 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	0151      	lsls	r1, r2, #5
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	440a      	add	r2, r1
 800aef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aef8:	0cdb      	lsrs	r3, r3, #19
 800aefa:	04db      	lsls	r3, r3, #19
 800aefc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	015a      	lsls	r2, r3, #5
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	4413      	add	r3, r2
 800af06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	0151      	lsls	r1, r2, #5
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	440a      	add	r2, r1
 800af14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d123      	bne.n	800af72 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	015a      	lsls	r2, r3, #5
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	4413      	add	r3, r2
 800af32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af36:	691a      	ldr	r2, [r3, #16]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af40:	6939      	ldr	r1, [r7, #16]
 800af42:	0148      	lsls	r0, r1, #5
 800af44:	6979      	ldr	r1, [r7, #20]
 800af46:	4401      	add	r1, r0
 800af48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af4c:	4313      	orrs	r3, r2
 800af4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	015a      	lsls	r2, r3, #5
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	4413      	add	r3, r2
 800af58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	0151      	lsls	r1, r2, #5
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	440a      	add	r2, r1
 800af66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af6e:	6113      	str	r3, [r2, #16]
 800af70:	e037      	b.n	800afe2 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	699a      	ldr	r2, [r3, #24]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	4413      	add	r3, r2
 800af7c:	1e5a      	subs	r2, r3, #1
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	fbb2 f3f3 	udiv	r3, r2, r3
 800af86:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	89fa      	ldrh	r2, [r7, #14]
 800af8e:	fb03 f202 	mul.w	r2, r3, r2
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	015a      	lsls	r2, r3, #5
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	4413      	add	r3, r2
 800af9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa2:	691a      	ldr	r2, [r3, #16]
 800afa4:	89fb      	ldrh	r3, [r7, #14]
 800afa6:	04d9      	lsls	r1, r3, #19
 800afa8:	4b1c      	ldr	r3, [pc, #112]	; (800b01c <USB_EPStartXfer+0x370>)
 800afaa:	400b      	ands	r3, r1
 800afac:	6939      	ldr	r1, [r7, #16]
 800afae:	0148      	lsls	r0, r1, #5
 800afb0:	6979      	ldr	r1, [r7, #20]
 800afb2:	4401      	add	r1, r0
 800afb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800afb8:	4313      	orrs	r3, r2
 800afba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	015a      	lsls	r2, r3, #5
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	4413      	add	r3, r2
 800afc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc8:	691a      	ldr	r2, [r3, #16]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afd2:	6939      	ldr	r1, [r7, #16]
 800afd4:	0148      	lsls	r0, r1, #5
 800afd6:	6979      	ldr	r1, [r7, #20]
 800afd8:	4401      	add	r1, r0
 800afda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800afde:	4313      	orrs	r3, r2
 800afe0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	791b      	ldrb	r3, [r3, #4]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d12a      	bne.n	800b040 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d112      	bne.n	800b020 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	015a      	lsls	r2, r3, #5
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	4413      	add	r3, r2
 800b002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	0151      	lsls	r1, r2, #5
 800b00c:	697a      	ldr	r2, [r7, #20]
 800b00e:	440a      	add	r2, r1
 800b010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b014:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	e011      	b.n	800b040 <USB_EPStartXfer+0x394>
 800b01c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	015a      	lsls	r2, r3, #5
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	4413      	add	r3, r2
 800b028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	0151      	lsls	r1, r2, #5
 800b032:	697a      	ldr	r2, [r7, #20]
 800b034:	440a      	add	r2, r1
 800b036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b03a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b03e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	4413      	add	r3, r2
 800b048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	693a      	ldr	r2, [r7, #16]
 800b050:	0151      	lsls	r1, r2, #5
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	440a      	add	r2, r1
 800b056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b05a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b05e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop

0800b06c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	785b      	ldrb	r3, [r3, #1]
 800b084:	2b01      	cmp	r3, #1
 800b086:	f040 80ab 	bne.w	800b1e0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d132      	bne.n	800b0f8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	015a      	lsls	r2, r3, #5
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	4413      	add	r3, r2
 800b09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	0151      	lsls	r1, r2, #5
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	440a      	add	r2, r1
 800b0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	0151      	lsls	r1, r2, #5
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	440a      	add	r2, r1
 800b0cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	0151      	lsls	r1, r2, #5
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	440a      	add	r2, r1
 800b0ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0f0:	0cdb      	lsrs	r3, r3, #19
 800b0f2:	04db      	lsls	r3, r3, #19
 800b0f4:	6113      	str	r3, [r2, #16]
 800b0f6:	e04e      	b.n	800b196 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	015a      	lsls	r2, r3, #5
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	4413      	add	r3, r2
 800b100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	0151      	lsls	r1, r2, #5
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	440a      	add	r2, r1
 800b10e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b112:	0cdb      	lsrs	r3, r3, #19
 800b114:	04db      	lsls	r3, r3, #19
 800b116:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	0151      	lsls	r1, r2, #5
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	440a      	add	r2, r1
 800b12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b132:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b136:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b13a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	699a      	ldr	r2, [r3, #24]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	429a      	cmp	r2, r3
 800b146:	d903      	bls.n	800b150 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	68da      	ldr	r2, [r3, #12]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	015a      	lsls	r2, r3, #5
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4413      	add	r3, r2
 800b158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	0151      	lsls	r1, r2, #5
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	440a      	add	r2, r1
 800b166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b16a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b16e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17c:	691a      	ldr	r2, [r3, #16]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b186:	68b9      	ldr	r1, [r7, #8]
 800b188:	0148      	lsls	r0, r1, #5
 800b18a:	68f9      	ldr	r1, [r7, #12]
 800b18c:	4401      	add	r1, r0
 800b18e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b192:	4313      	orrs	r3, r2
 800b194:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	0151      	lsls	r1, r2, #5
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	440a      	add	r2, r1
 800b1ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1b4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d071      	beq.n	800b2a2 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	f003 030f 	and.w	r3, r3, #15
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b1d4:	68f9      	ldr	r1, [r7, #12]
 800b1d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	634b      	str	r3, [r1, #52]	; 0x34
 800b1de:	e060      	b.n	800b2a2 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	0151      	lsls	r1, r2, #5
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	440a      	add	r2, r1
 800b1f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1fa:	0cdb      	lsrs	r3, r3, #19
 800b1fc:	04db      	lsls	r3, r3, #19
 800b1fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	0151      	lsls	r1, r2, #5
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	440a      	add	r2, r1
 800b216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b21a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b21e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b222:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	68da      	ldr	r2, [r3, #12]
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	68da      	ldr	r2, [r3, #12]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	015a      	lsls	r2, r3, #5
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	4413      	add	r3, r2
 800b244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	0151      	lsls	r1, r2, #5
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	440a      	add	r2, r1
 800b252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b25a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	015a      	lsls	r2, r3, #5
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	4413      	add	r3, r2
 800b264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b268:	691a      	ldr	r2, [r3, #16]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	69db      	ldr	r3, [r3, #28]
 800b26e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b272:	68b9      	ldr	r1, [r7, #8]
 800b274:	0148      	lsls	r0, r1, #5
 800b276:	68f9      	ldr	r1, [r7, #12]
 800b278:	4401      	add	r1, r0
 800b27a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b27e:	4313      	orrs	r3, r2
 800b280:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	015a      	lsls	r2, r3, #5
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	4413      	add	r3, r2
 800b28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	0151      	lsls	r1, r2, #5
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	440a      	add	r2, r1
 800b298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b29c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b087      	sub	sp, #28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d14a      	bne.n	800b364 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	015a      	lsls	r2, r3, #5
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2e6:	f040 8086 	bne.w	800b3f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	015a      	lsls	r2, r3, #5
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	7812      	ldrb	r2, [r2, #0]
 800b2fe:	0151      	lsls	r1, r2, #5
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	440a      	add	r2, r1
 800b304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b308:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b30c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	015a      	lsls	r2, r3, #5
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	4413      	add	r3, r2
 800b318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	7812      	ldrb	r2, [r2, #0]
 800b322:	0151      	lsls	r1, r2, #5
 800b324:	693a      	ldr	r2, [r7, #16]
 800b326:	440a      	add	r2, r1
 800b328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b32c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b330:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	3301      	adds	r3, #1
 800b336:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b33e:	4293      	cmp	r3, r2
 800b340:	d902      	bls.n	800b348 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	75fb      	strb	r3, [r7, #23]
          break;
 800b346:	e056      	b.n	800b3f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	015a      	lsls	r2, r3, #5
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	4413      	add	r3, r2
 800b352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b35c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b360:	d0e7      	beq.n	800b332 <USB_EPStopXfer+0x82>
 800b362:	e048      	b.n	800b3f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b37c:	d13b      	bne.n	800b3f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	015a      	lsls	r2, r3, #5
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	4413      	add	r3, r2
 800b388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	7812      	ldrb	r2, [r2, #0]
 800b392:	0151      	lsls	r1, r2, #5
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	440a      	add	r2, r1
 800b398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b39c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	015a      	lsls	r2, r3, #5
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	7812      	ldrb	r2, [r2, #0]
 800b3b6:	0151      	lsls	r1, r2, #5
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	440a      	add	r2, r1
 800b3bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f242 7210 	movw	r2, #10000	; 0x2710
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d902      	bls.n	800b3dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	75fb      	strb	r3, [r7, #23]
          break;
 800b3da:	e00c      	b.n	800b3f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	015a      	lsls	r2, r3, #5
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3f4:	d0e7      	beq.n	800b3c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	371c      	adds	r7, #28
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800b404:	b480      	push	{r7}
 800b406:	b089      	sub	sp, #36	; 0x24
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	4611      	mov	r1, r2
 800b410:	461a      	mov	r2, r3
 800b412:	460b      	mov	r3, r1
 800b414:	71fb      	strb	r3, [r7, #7]
 800b416:	4613      	mov	r3, r2
 800b418:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b422:	88bb      	ldrh	r3, [r7, #4]
 800b424:	3303      	adds	r3, #3
 800b426:	089b      	lsrs	r3, r3, #2
 800b428:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b42a:	2300      	movs	r3, #0
 800b42c:	61bb      	str	r3, [r7, #24]
 800b42e:	e018      	b.n	800b462 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b430:	79fb      	ldrb	r3, [r7, #7]
 800b432:	031a      	lsls	r2, r3, #12
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	4413      	add	r3, r2
 800b438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b43c:	461a      	mov	r2, r3
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6013      	str	r3, [r2, #0]
    pSrc++;
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	3301      	adds	r3, #1
 800b448:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	3301      	adds	r3, #1
 800b44e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	3301      	adds	r3, #1
 800b454:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	3301      	adds	r3, #1
 800b45a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	3301      	adds	r3, #1
 800b460:	61bb      	str	r3, [r7, #24]
 800b462:	69ba      	ldr	r2, [r7, #24]
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	429a      	cmp	r2, r3
 800b468:	d3e2      	bcc.n	800b430 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3724      	adds	r7, #36	; 0x24
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b478:	b480      	push	{r7}
 800b47a:	b08b      	sub	sp, #44	; 0x2c
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	4613      	mov	r3, r2
 800b484:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b48e:	88fb      	ldrh	r3, [r7, #6]
 800b490:	089b      	lsrs	r3, r3, #2
 800b492:	b29b      	uxth	r3, r3
 800b494:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b496:	88fb      	ldrh	r3, [r7, #6]
 800b498:	f003 0303 	and.w	r3, r3, #3
 800b49c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b49e:	2300      	movs	r3, #0
 800b4a0:	623b      	str	r3, [r7, #32]
 800b4a2:	e014      	b.n	800b4ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ae:	601a      	str	r2, [r3, #0]
    pDest++;
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4be:	3301      	adds	r3, #1
 800b4c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b4c8:	6a3b      	ldr	r3, [r7, #32]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	623b      	str	r3, [r7, #32]
 800b4ce:	6a3a      	ldr	r2, [r7, #32]
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d3e6      	bcc.n	800b4a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b4d6:	8bfb      	ldrh	r3, [r7, #30]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d01e      	beq.n	800b51a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	f107 0310 	add.w	r3, r7, #16
 800b4ec:	6812      	ldr	r2, [r2, #0]
 800b4ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	6a3b      	ldr	r3, [r7, #32]
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	701a      	strb	r2, [r3, #0]
      i++;
 800b502:	6a3b      	ldr	r3, [r7, #32]
 800b504:	3301      	adds	r3, #1
 800b506:	623b      	str	r3, [r7, #32]
      pDest++;
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	3301      	adds	r3, #1
 800b50c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b50e:	8bfb      	ldrh	r3, [r7, #30]
 800b510:	3b01      	subs	r3, #1
 800b512:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b514:	8bfb      	ldrh	r3, [r7, #30]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d1ea      	bne.n	800b4f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	372c      	adds	r7, #44	; 0x2c
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	785b      	ldrb	r3, [r3, #1]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d12c      	bne.n	800b59e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	015a      	lsls	r2, r3, #5
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4413      	add	r3, r2
 800b54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	db12      	blt.n	800b57c <USB_EPSetStall+0x54>
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00f      	beq.n	800b57c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	015a      	lsls	r2, r3, #5
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	4413      	add	r3, r2
 800b564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	0151      	lsls	r1, r2, #5
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	440a      	add	r2, r1
 800b572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b576:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b57a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	015a      	lsls	r2, r3, #5
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	4413      	add	r3, r2
 800b584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	0151      	lsls	r1, r2, #5
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	440a      	add	r2, r1
 800b592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b59a:	6013      	str	r3, [r2, #0]
 800b59c:	e02b      	b.n	800b5f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	015a      	lsls	r2, r3, #5
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	db12      	blt.n	800b5d6 <USB_EPSetStall+0xae>
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00f      	beq.n	800b5d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	015a      	lsls	r2, r3, #5
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	4413      	add	r3, r2
 800b5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	0151      	lsls	r1, r2, #5
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	440a      	add	r2, r1
 800b5cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b5d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	015a      	lsls	r2, r3, #5
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	4413      	add	r3, r2
 800b5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	0151      	lsls	r1, r2, #5
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	440a      	add	r2, r1
 800b5ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b5f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3714      	adds	r7, #20
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	785b      	ldrb	r3, [r3, #1]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d128      	bne.n	800b672 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	015a      	lsls	r2, r3, #5
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4413      	add	r3, r2
 800b628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	0151      	lsls	r1, r2, #5
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	440a      	add	r2, r1
 800b636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b63a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b63e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	791b      	ldrb	r3, [r3, #4]
 800b644:	2b03      	cmp	r3, #3
 800b646:	d003      	beq.n	800b650 <USB_EPClearStall+0x4c>
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	791b      	ldrb	r3, [r3, #4]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d138      	bne.n	800b6c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	015a      	lsls	r2, r3, #5
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4413      	add	r3, r2
 800b658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	0151      	lsls	r1, r2, #5
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	440a      	add	r2, r1
 800b666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b66a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b66e:	6013      	str	r3, [r2, #0]
 800b670:	e027      	b.n	800b6c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	015a      	lsls	r2, r3, #5
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	4413      	add	r3, r2
 800b67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	0151      	lsls	r1, r2, #5
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	440a      	add	r2, r1
 800b688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b68c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b690:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	791b      	ldrb	r3, [r3, #4]
 800b696:	2b03      	cmp	r3, #3
 800b698:	d003      	beq.n	800b6a2 <USB_EPClearStall+0x9e>
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	791b      	ldrb	r3, [r3, #4]
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d10f      	bne.n	800b6c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	015a      	lsls	r2, r3, #5
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	0151      	lsls	r1, r2, #5
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	440a      	add	r2, r1
 800b6b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b6f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	78fb      	ldrb	r3, [r7, #3]
 800b6fe:	011b      	lsls	r3, r3, #4
 800b700:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b704:	68f9      	ldr	r1, [r7, #12]
 800b706:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b70a:	4313      	orrs	r3, r2
 800b70c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b736:	f023 0303 	bic.w	r3, r3, #3
 800b73a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b74a:	f023 0302 	bic.w	r3, r3, #2
 800b74e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3714      	adds	r7, #20
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b75e:	b480      	push	{r7}
 800b760:	b085      	sub	sp, #20
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b778:	f023 0303 	bic.w	r3, r3, #3
 800b77c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b78c:	f043 0302 	orr.w	r3, r3, #2
 800b790:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	695b      	ldr	r3, [r3, #20]
 800b7ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	699b      	ldr	r3, [r3, #24]
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b085      	sub	sp, #20
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d8:	699b      	ldr	r3, [r3, #24]
 800b7da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7e2:	69db      	ldr	r3, [r3, #28]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	0c1b      	lsrs	r3, r3, #16
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b085      	sub	sp, #20
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	4013      	ands	r3, r2
 800b81c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	b29b      	uxth	r3, r3
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b82e:	b480      	push	{r7}
 800b830:	b085      	sub	sp, #20
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	460b      	mov	r3, r1
 800b838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b83e:	78fb      	ldrb	r3, [r7, #3]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	4413      	add	r3, r2
 800b846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	4013      	ands	r3, r2
 800b85a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b85c:	68bb      	ldr	r3, [r7, #8]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b087      	sub	sp, #28
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	460b      	mov	r3, r1
 800b874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b88c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b88e:	78fb      	ldrb	r3, [r7, #3]
 800b890:	f003 030f 	and.w	r3, r3, #15
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	fa22 f303 	lsr.w	r3, r2, r3
 800b89a:	01db      	lsls	r3, r3, #7
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	693a      	ldr	r2, [r7, #16]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b8a4:	78fb      	ldrb	r3, [r7, #3]
 800b8a6:	015a      	lsls	r2, r3, #5
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b8b8:	68bb      	ldr	r3, [r7, #8]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	371c      	adds	r7, #28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	f003 0301 	and.w	r3, r3, #1
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b085      	sub	sp, #20
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b900:	f023 0307 	bic.w	r3, r3, #7
 800b904:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b918:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	333c      	adds	r3, #60	; 0x3c
 800b93a:	3304      	adds	r3, #4
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	4a1c      	ldr	r2, [pc, #112]	; (800b9b4 <USB_EP0_OutStart+0x8c>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d90a      	bls.n	800b95e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b958:	d101      	bne.n	800b95e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	e024      	b.n	800b9a8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b964:	461a      	mov	r2, r3
 800b966:	2300      	movs	r3, #0
 800b968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b97c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b98c:	f043 0318 	orr.w	r3, r3, #24
 800b990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b9a4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr
 800b9b4:	4f54300a 	.word	0x4f54300a

0800b9b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	4a13      	ldr	r2, [pc, #76]	; (800ba1c <USB_CoreReset+0x64>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d901      	bls.n	800b9d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	e01b      	b.n	800ba0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	daf2      	bge.n	800b9c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	f043 0201 	orr.w	r2, r3, #1
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4a09      	ldr	r2, [pc, #36]	; (800ba1c <USB_CoreReset+0x64>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d901      	bls.n	800ba00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	e006      	b.n	800ba0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d0f0      	beq.n	800b9ee <USB_CoreReset+0x36>

  return HAL_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3714      	adds	r7, #20
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	00030d40 	.word	0x00030d40

0800ba20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ba24:	4904      	ldr	r1, [pc, #16]	; (800ba38 <MX_FATFS_Init+0x18>)
 800ba26:	4805      	ldr	r0, [pc, #20]	; (800ba3c <MX_FATFS_Init+0x1c>)
 800ba28:	f001 fe74 	bl	800d714 <FATFS_LinkDriver>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	461a      	mov	r2, r3
 800ba30:	4b03      	ldr	r3, [pc, #12]	; (800ba40 <MX_FATFS_Init+0x20>)
 800ba32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ba34:	bf00      	nop
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	200005fc 	.word	0x200005fc
 800ba3c:	0800f41c 	.word	0x0800f41c
 800ba40:	200005f8 	.word	0x200005f8

0800ba44 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ba4e:	f000 f879 	bl	800bb44 <BSP_SD_IsDetected>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d001      	beq.n	800ba5c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ba58:	2302      	movs	r3, #2
 800ba5a:	e012      	b.n	800ba82 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ba5c:	480b      	ldr	r0, [pc, #44]	; (800ba8c <BSP_SD_Init+0x48>)
 800ba5e:	f7fa f949 	bl	8005cf4 <HAL_SD_Init>
 800ba62:	4603      	mov	r3, r0
 800ba64:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ba66:	79fb      	ldrb	r3, [r7, #7]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d109      	bne.n	800ba80 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ba6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ba70:	4806      	ldr	r0, [pc, #24]	; (800ba8c <BSP_SD_Init+0x48>)
 800ba72:	f7fb f815 	bl	8006aa0 <HAL_SD_ConfigWideBusOperation>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ba80:	79fb      	ldrb	r3, [r7, #7]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	200002a8 	.word	0x200002a8

0800ba90 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b088      	sub	sp, #32
 800ba94:	af02      	add	r7, sp, #8
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	68f9      	ldr	r1, [r7, #12]
 800baac:	4806      	ldr	r0, [pc, #24]	; (800bac8 <BSP_SD_ReadBlocks+0x38>)
 800baae:	f7fa fa49 	bl	8005f44 <HAL_SD_ReadBlocks>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800babc:	7dfb      	ldrb	r3, [r7, #23]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3718      	adds	r7, #24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	200002a8 	.word	0x200002a8

0800bacc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b088      	sub	sp, #32
 800bad0:	af02      	add	r7, sp, #8
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	68f9      	ldr	r1, [r7, #12]
 800bae8:	4806      	ldr	r0, [pc, #24]	; (800bb04 <BSP_SD_WriteBlocks+0x38>)
 800baea:	f7fa fbbd 	bl	8006268 <HAL_SD_WriteBlocks>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	200002a8 	.word	0x200002a8

0800bb08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bb0c:	4805      	ldr	r0, [pc, #20]	; (800bb24 <BSP_SD_GetCardState+0x1c>)
 800bb0e:	f7fb f8db 	bl	8006cc8 <HAL_SD_GetCardState>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b04      	cmp	r3, #4
 800bb16:	bf14      	ite	ne
 800bb18:	2301      	movne	r3, #1
 800bb1a:	2300      	moveq	r3, #0
 800bb1c:	b2db      	uxtb	r3, r3
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	200002a8 	.word	0x200002a8

0800bb28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bb30:	6879      	ldr	r1, [r7, #4]
 800bb32:	4803      	ldr	r0, [pc, #12]	; (800bb40 <BSP_SD_GetCardInfo+0x18>)
 800bb34:	f7fa ff88 	bl	8006a48 <HAL_SD_GetCardInfo>
}
 800bb38:	bf00      	nop
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	200002a8 	.word	0x200002a8

0800bb44 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bb4e:	f000 f80b 	bl	800bb68 <BSP_PlatformIsDetected>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d101      	bne.n	800bb5c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bb5c:	79fb      	ldrb	r3, [r7, #7]
 800bb5e:	b2db      	uxtb	r3, r3
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bb72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bb7a:	f7f6 f85b 	bl	8001c34 <HAL_GPIO_ReadPin>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 800bb84:	2300      	movs	r3, #0
 800bb86:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bb88:	79fb      	ldrb	r3, [r7, #7]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
	...

0800bb94 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bb9e:	4b0b      	ldr	r3, [pc, #44]	; (800bbcc <SD_CheckStatus+0x38>)
 800bba0:	2201      	movs	r2, #1
 800bba2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bba4:	f7ff ffb0 	bl	800bb08 <BSP_SD_GetCardState>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d107      	bne.n	800bbbe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bbae:	4b07      	ldr	r3, [pc, #28]	; (800bbcc <SD_CheckStatus+0x38>)
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	f023 0301 	bic.w	r3, r3, #1
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	4b04      	ldr	r3, [pc, #16]	; (800bbcc <SD_CheckStatus+0x38>)
 800bbbc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bbbe:	4b03      	ldr	r3, [pc, #12]	; (800bbcc <SD_CheckStatus+0x38>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	b2db      	uxtb	r3, r3
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	20000009 	.word	0x20000009

0800bbd0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bbda:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <SD_initialize+0x38>)
 800bbdc:	2201      	movs	r2, #1
 800bbde:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bbe0:	f7ff ff30 	bl	800ba44 <BSP_SD_Init>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d107      	bne.n	800bbfa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bbea:	79fb      	ldrb	r3, [r7, #7]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7ff ffd1 	bl	800bb94 <SD_CheckStatus>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	4b04      	ldr	r3, [pc, #16]	; (800bc08 <SD_initialize+0x38>)
 800bbf8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bbfa:	4b03      	ldr	r3, [pc, #12]	; (800bc08 <SD_initialize+0x38>)
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	b2db      	uxtb	r3, r3
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	20000009 	.word	0x20000009

0800bc0c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	4603      	mov	r3, r0
 800bc14:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bc16:	79fb      	ldrb	r3, [r7, #7]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7ff ffbb 	bl	800bb94 <SD_CheckStatus>
 800bc1e:	4603      	mov	r3, r0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60b9      	str	r1, [r7, #8]
 800bc30:	607a      	str	r2, [r7, #4]
 800bc32:	603b      	str	r3, [r7, #0]
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bc3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	68b8      	ldr	r0, [r7, #8]
 800bc46:	f7ff ff23 	bl	800ba90 <BSP_SD_ReadBlocks>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d107      	bne.n	800bc60 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bc50:	bf00      	nop
 800bc52:	f7ff ff59 	bl	800bb08 <BSP_SD_GetCardState>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1fa      	bne.n	800bc52 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bc60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b086      	sub	sp, #24
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
 800bc76:	4603      	mov	r3, r0
 800bc78:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bc7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc82:	683a      	ldr	r2, [r7, #0]
 800bc84:	6879      	ldr	r1, [r7, #4]
 800bc86:	68b8      	ldr	r0, [r7, #8]
 800bc88:	f7ff ff20 	bl	800bacc <BSP_SD_WriteBlocks>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d107      	bne.n	800bca2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bc92:	bf00      	nop
 800bc94:	f7ff ff38 	bl	800bb08 <BSP_SD_GetCardState>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1fa      	bne.n	800bc94 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3718      	adds	r7, #24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08c      	sub	sp, #48	; 0x30
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	603a      	str	r2, [r7, #0]
 800bcb6:	71fb      	strb	r3, [r7, #7]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bcc2:	4b25      	ldr	r3, [pc, #148]	; (800bd58 <SD_ioctl+0xac>)
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d001      	beq.n	800bcd4 <SD_ioctl+0x28>
 800bcd0:	2303      	movs	r3, #3
 800bcd2:	e03c      	b.n	800bd4e <SD_ioctl+0xa2>

  switch (cmd)
 800bcd4:	79bb      	ldrb	r3, [r7, #6]
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d834      	bhi.n	800bd44 <SD_ioctl+0x98>
 800bcda:	a201      	add	r2, pc, #4	; (adr r2, 800bce0 <SD_ioctl+0x34>)
 800bcdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce0:	0800bcf1 	.word	0x0800bcf1
 800bce4:	0800bcf9 	.word	0x0800bcf9
 800bce8:	0800bd11 	.word	0x0800bd11
 800bcec:	0800bd2b 	.word	0x0800bd2b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bcf6:	e028      	b.n	800bd4a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bcf8:	f107 0308 	add.w	r3, r7, #8
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7ff ff13 	bl	800bb28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bd02:	6a3a      	ldr	r2, [r7, #32]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd0e:	e01c      	b.n	800bd4a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bd10:	f107 0308 	add.w	r3, r7, #8
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7ff ff07 	bl	800bb28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd28:	e00f      	b.n	800bd4a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bd2a:	f107 0308 	add.w	r3, r7, #8
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7ff fefa 	bl	800bb28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd36:	0a5a      	lsrs	r2, r3, #9
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd42:	e002      	b.n	800bd4a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bd44:	2304      	movs	r3, #4
 800bd46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bd4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3730      	adds	r7, #48	; 0x30
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20000009 	.word	0x20000009

0800bd5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bd68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bd6c:	f002 faae 	bl	800e2cc <USBD_static_malloc>
 800bd70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d105      	bne.n	800bd84 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bd80:	2302      	movs	r3, #2
 800bd82:	e066      	b.n	800be52 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	7c1b      	ldrb	r3, [r3, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d119      	bne.n	800bdc8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bd94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd98:	2202      	movs	r2, #2
 800bd9a:	2181      	movs	r1, #129	; 0x81
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f002 f8cf 	bl	800df40 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2201      	movs	r2, #1
 800bda6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bda8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdac:	2202      	movs	r2, #2
 800bdae:	2101      	movs	r1, #1
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f002 f8c5 	bl	800df40 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2210      	movs	r2, #16
 800bdc2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bdc6:	e016      	b.n	800bdf6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bdc8:	2340      	movs	r3, #64	; 0x40
 800bdca:	2202      	movs	r2, #2
 800bdcc:	2181      	movs	r1, #129	; 0x81
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f002 f8b6 	bl	800df40 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bdda:	2340      	movs	r3, #64	; 0x40
 800bddc:	2202      	movs	r2, #2
 800bdde:	2101      	movs	r1, #1
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f002 f8ad 	bl	800df40 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2210      	movs	r2, #16
 800bdf2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bdf6:	2308      	movs	r3, #8
 800bdf8:	2203      	movs	r2, #3
 800bdfa:	2182      	movs	r1, #130	; 0x82
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f002 f89f 	bl	800df40 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2200      	movs	r2, #0
 800be18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7c1b      	ldrb	r3, [r3, #16]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d109      	bne.n	800be40 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be36:	2101      	movs	r1, #1
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f002 f9fb 	bl	800e234 <USBD_LL_PrepareReceive>
 800be3e:	e007      	b.n	800be50 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be46:	2340      	movs	r3, #64	; 0x40
 800be48:	2101      	movs	r1, #1
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f002 f9f2 	bl	800e234 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b082      	sub	sp, #8
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	460b      	mov	r3, r1
 800be64:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800be66:	2181      	movs	r1, #129	; 0x81
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f002 f8a7 	bl	800dfbc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800be74:	2101      	movs	r1, #1
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f002 f8a0 	bl	800dfbc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800be84:	2182      	movs	r1, #130	; 0x82
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f002 f898 	bl	800dfbc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00e      	beq.n	800bec4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800beb6:	4618      	mov	r0, r3
 800beb8:	f002 fa16 	bl	800e2e8 <USBD_static_free>
    pdev->pClassData = NULL;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
	...

0800bed0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bee0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bee2:	2300      	movs	r3, #0
 800bee4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bee6:	2300      	movs	r3, #0
 800bee8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800beea:	2300      	movs	r3, #0
 800beec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d101      	bne.n	800bef8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bef4:	2303      	movs	r3, #3
 800bef6:	e0af      	b.n	800c058 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d03f      	beq.n	800bf84 <USBD_CDC_Setup+0xb4>
 800bf04:	2b20      	cmp	r3, #32
 800bf06:	f040 809f 	bne.w	800c048 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	88db      	ldrh	r3, [r3, #6]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d02e      	beq.n	800bf70 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	b25b      	sxtb	r3, r3
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	da16      	bge.n	800bf4a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bf28:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	88d2      	ldrh	r2, [r2, #6]
 800bf2e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	88db      	ldrh	r3, [r3, #6]
 800bf34:	2b07      	cmp	r3, #7
 800bf36:	bf28      	it	cs
 800bf38:	2307      	movcs	r3, #7
 800bf3a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	89fa      	ldrh	r2, [r7, #14]
 800bf40:	4619      	mov	r1, r3
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f001 fb19 	bl	800d57a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bf48:	e085      	b.n	800c056 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	785a      	ldrb	r2, [r3, #1]
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	88db      	ldrh	r3, [r3, #6]
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bf60:	6939      	ldr	r1, [r7, #16]
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	88db      	ldrh	r3, [r3, #6]
 800bf66:	461a      	mov	r2, r3
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f001 fb32 	bl	800d5d2 <USBD_CtlPrepareRx>
      break;
 800bf6e:	e072      	b.n	800c056 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	7850      	ldrb	r0, [r2, #1]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	4798      	blx	r3
      break;
 800bf82:	e068      	b.n	800c056 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	785b      	ldrb	r3, [r3, #1]
 800bf88:	2b0b      	cmp	r3, #11
 800bf8a:	d852      	bhi.n	800c032 <USBD_CDC_Setup+0x162>
 800bf8c:	a201      	add	r2, pc, #4	; (adr r2, 800bf94 <USBD_CDC_Setup+0xc4>)
 800bf8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf92:	bf00      	nop
 800bf94:	0800bfc5 	.word	0x0800bfc5
 800bf98:	0800c041 	.word	0x0800c041
 800bf9c:	0800c033 	.word	0x0800c033
 800bfa0:	0800c033 	.word	0x0800c033
 800bfa4:	0800c033 	.word	0x0800c033
 800bfa8:	0800c033 	.word	0x0800c033
 800bfac:	0800c033 	.word	0x0800c033
 800bfb0:	0800c033 	.word	0x0800c033
 800bfb4:	0800c033 	.word	0x0800c033
 800bfb8:	0800c033 	.word	0x0800c033
 800bfbc:	0800bfef 	.word	0x0800bfef
 800bfc0:	0800c019 	.word	0x0800c019
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	2b03      	cmp	r3, #3
 800bfce:	d107      	bne.n	800bfe0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bfd0:	f107 030a 	add.w	r3, r7, #10
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 face 	bl	800d57a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfde:	e032      	b.n	800c046 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f001 fa58 	bl	800d498 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	75fb      	strb	r3, [r7, #23]
          break;
 800bfec:	e02b      	b.n	800c046 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	d107      	bne.n	800c00a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bffa:	f107 030d 	add.w	r3, r7, #13
 800bffe:	2201      	movs	r2, #1
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f001 fab9 	bl	800d57a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c008:	e01d      	b.n	800c046 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c00a:	6839      	ldr	r1, [r7, #0]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f001 fa43 	bl	800d498 <USBD_CtlError>
            ret = USBD_FAIL;
 800c012:	2303      	movs	r3, #3
 800c014:	75fb      	strb	r3, [r7, #23]
          break;
 800c016:	e016      	b.n	800c046 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	2b03      	cmp	r3, #3
 800c022:	d00f      	beq.n	800c044 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f001 fa36 	bl	800d498 <USBD_CtlError>
            ret = USBD_FAIL;
 800c02c:	2303      	movs	r3, #3
 800c02e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c030:	e008      	b.n	800c044 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c032:	6839      	ldr	r1, [r7, #0]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f001 fa2f 	bl	800d498 <USBD_CtlError>
          ret = USBD_FAIL;
 800c03a:	2303      	movs	r3, #3
 800c03c:	75fb      	strb	r3, [r7, #23]
          break;
 800c03e:	e002      	b.n	800c046 <USBD_CDC_Setup+0x176>
          break;
 800c040:	bf00      	nop
 800c042:	e008      	b.n	800c056 <USBD_CDC_Setup+0x186>
          break;
 800c044:	bf00      	nop
      }
      break;
 800c046:	e006      	b.n	800c056 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f001 fa24 	bl	800d498 <USBD_CtlError>
      ret = USBD_FAIL;
 800c050:	2303      	movs	r3, #3
 800c052:	75fb      	strb	r3, [r7, #23]
      break;
 800c054:	bf00      	nop
  }

  return (uint8_t)ret;
 800c056:	7dfb      	ldrb	r3, [r7, #23]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3718      	adds	r7, #24
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c072:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d101      	bne.n	800c082 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c07e:	2303      	movs	r3, #3
 800c080:	e04f      	b.n	800c122 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c088:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c08a:	78fa      	ldrb	r2, [r7, #3]
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	4613      	mov	r3, r2
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4413      	add	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	440b      	add	r3, r1
 800c098:	3318      	adds	r3, #24
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d029      	beq.n	800c0f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c0a0:	78fa      	ldrb	r2, [r7, #3]
 800c0a2:	6879      	ldr	r1, [r7, #4]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	440b      	add	r3, r1
 800c0ae:	3318      	adds	r3, #24
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	78f9      	ldrb	r1, [r7, #3]
 800c0b4:	68f8      	ldr	r0, [r7, #12]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	440b      	add	r3, r1
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4403      	add	r3, r0
 800c0c0:	3348      	adds	r3, #72	; 0x48
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	fbb2 f1f3 	udiv	r1, r2, r3
 800c0c8:	fb01 f303 	mul.w	r3, r1, r3
 800c0cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d110      	bne.n	800c0f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c0d2:	78fa      	ldrb	r2, [r7, #3]
 800c0d4:	6879      	ldr	r1, [r7, #4]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4413      	add	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	440b      	add	r3, r1
 800c0e0:	3318      	adds	r3, #24
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c0e6:	78f9      	ldrb	r1, [r7, #3]
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f002 f869 	bl	800e1c4 <USBD_LL_Transmit>
 800c0f2:	e015      	b.n	800c120 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00b      	beq.n	800c120 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c116:	68ba      	ldr	r2, [r7, #8]
 800c118:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c11c:	78fa      	ldrb	r2, [r7, #3]
 800c11e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	460b      	mov	r3, r1
 800c134:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c13c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c144:	2b00      	cmp	r3, #0
 800c146:	d101      	bne.n	800c14c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c148:	2303      	movs	r3, #3
 800c14a:	e015      	b.n	800c178 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c14c:	78fb      	ldrb	r3, [r7, #3]
 800c14e:	4619      	mov	r1, r3
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f002 f8a7 	bl	800e2a4 <USBD_LL_GetRxDataSize>
 800c156:	4602      	mov	r2, r0
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c172:	4611      	mov	r1, r2
 800c174:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c18e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c196:	2303      	movs	r3, #3
 800c198:	e01b      	b.n	800c1d2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d015      	beq.n	800c1d0 <USBD_CDC_EP0_RxReady+0x50>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c1aa:	2bff      	cmp	r3, #255	; 0xff
 800c1ac:	d010      	beq.n	800c1d0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c1bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c1c4:	b292      	uxth	r2, r2
 800c1c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	22ff      	movs	r2, #255	; 0xff
 800c1cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
	...

0800c1dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2243      	movs	r2, #67	; 0x43
 800c1e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c1ea:	4b03      	ldr	r3, [pc, #12]	; (800c1f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr
 800c1f8:	20000094 	.word	0x20000094

0800c1fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2243      	movs	r2, #67	; 0x43
 800c208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c20a:	4b03      	ldr	r3, [pc, #12]	; (800c218 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr
 800c218:	20000050 	.word	0x20000050

0800c21c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2243      	movs	r2, #67	; 0x43
 800c228:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c22a:	4b03      	ldr	r3, [pc, #12]	; (800c238 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr
 800c238:	200000d8 	.word	0x200000d8

0800c23c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	220a      	movs	r2, #10
 800c248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c24a:	4b03      	ldr	r3, [pc, #12]	; (800c258 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr
 800c258:	2000000c 	.word	0x2000000c

0800c25c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c26c:	2303      	movs	r3, #3
 800c26e:	e004      	b.n	800c27a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	370c      	adds	r7, #12
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c286:	b480      	push	{r7}
 800c288:	b087      	sub	sp, #28
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	60f8      	str	r0, [r7, #12]
 800c28e:	60b9      	str	r1, [r7, #8]
 800c290:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c298:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d101      	bne.n	800c2a4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c2a0:	2303      	movs	r3, #3
 800c2a2:	e008      	b.n	800c2b6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	68ba      	ldr	r2, [r7, #8]
 800c2a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	371c      	adds	r7, #28
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr

0800c2c2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c2c2:	b480      	push	{r7}
 800c2c4:	b085      	sub	sp, #20
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e004      	b.n	800c2e8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	683a      	ldr	r2, [r7, #0]
 800c2e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3714      	adds	r7, #20
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c302:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c304:	2301      	movs	r3, #1
 800c306:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c312:	2303      	movs	r3, #3
 800c314:	e01a      	b.n	800c34c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d114      	bne.n	800c34a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2201      	movs	r2, #1
 800c324:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c33e:	2181      	movs	r1, #129	; 0x81
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f001 ff3f 	bl	800e1c4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3710      	adds	r7, #16
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c362:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d101      	bne.n	800c372 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c36e:	2303      	movs	r3, #3
 800c370:	e016      	b.n	800c3a0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	7c1b      	ldrb	r3, [r3, #16]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d109      	bne.n	800c38e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c380:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c384:	2101      	movs	r1, #1
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f001 ff54 	bl	800e234 <USBD_LL_PrepareReceive>
 800c38c:	e007      	b.n	800c39e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c394:	2340      	movs	r3, #64	; 0x40
 800c396:	2101      	movs	r1, #1
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f001 ff4b 	bl	800e234 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c39e:	2300      	movs	r3, #0
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	e01f      	b.n	800c400 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d003      	beq.n	800c3e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	68ba      	ldr	r2, [r7, #8]
 800c3e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	79fa      	ldrb	r2, [r7, #7]
 800c3f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f001 fd27 	bl	800de48 <USBD_LL_Init>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3718      	adds	r7, #24
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c412:	2300      	movs	r3, #0
 800c414:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d101      	bne.n	800c420 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c41c:	2303      	movs	r3, #3
 800c41e:	e016      	b.n	800c44e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00b      	beq.n	800c44c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43c:	f107 020e 	add.w	r2, r7, #14
 800c440:	4610      	mov	r0, r2
 800c442:	4798      	blx	r3
 800c444:	4602      	mov	r2, r0
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b082      	sub	sp, #8
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f001 fd3c 	bl	800dedc <USBD_LL_Start>
 800c464:	4603      	mov	r3, r0
}
 800c466:	4618      	mov	r0, r3
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c46e:	b480      	push	{r7}
 800c470:	b083      	sub	sp, #12
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	460b      	mov	r3, r1
 800c48e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c490:	2303      	movs	r3, #3
 800c492:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d009      	beq.n	800c4b2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	78fa      	ldrb	r2, [r7, #3]
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	4798      	blx	r3
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d007      	beq.n	800c4e2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	78fa      	ldrb	r2, [r7, #3]
 800c4dc:	4611      	mov	r1, r2
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	4798      	blx	r3
  }

  return USBD_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 ff90 	bl	800d424 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2201      	movs	r2, #1
 800c508:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c512:	461a      	mov	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c520:	f003 031f 	and.w	r3, r3, #31
 800c524:	2b02      	cmp	r3, #2
 800c526:	d01a      	beq.n	800c55e <USBD_LL_SetupStage+0x72>
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d822      	bhi.n	800c572 <USBD_LL_SetupStage+0x86>
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d002      	beq.n	800c536 <USBD_LL_SetupStage+0x4a>
 800c530:	2b01      	cmp	r3, #1
 800c532:	d00a      	beq.n	800c54a <USBD_LL_SetupStage+0x5e>
 800c534:	e01d      	b.n	800c572 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c53c:	4619      	mov	r1, r3
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fa62 	bl	800ca08 <USBD_StdDevReq>
 800c544:	4603      	mov	r3, r0
 800c546:	73fb      	strb	r3, [r7, #15]
      break;
 800c548:	e020      	b.n	800c58c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fac6 	bl	800cae4 <USBD_StdItfReq>
 800c558:	4603      	mov	r3, r0
 800c55a:	73fb      	strb	r3, [r7, #15]
      break;
 800c55c:	e016      	b.n	800c58c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c564:	4619      	mov	r1, r3
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fb05 	bl	800cb76 <USBD_StdEPReq>
 800c56c:	4603      	mov	r3, r0
 800c56e:	73fb      	strb	r3, [r7, #15]
      break;
 800c570:	e00c      	b.n	800c58c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c578:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	4619      	mov	r1, r3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f001 fd51 	bl	800e028 <USBD_LL_StallEP>
 800c586:	4603      	mov	r3, r0
 800c588:	73fb      	strb	r3, [r7, #15]
      break;
 800c58a:	bf00      	nop
  }

  return ret;
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b086      	sub	sp, #24
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	60f8      	str	r0, [r7, #12]
 800c59e:	460b      	mov	r3, r1
 800c5a0:	607a      	str	r2, [r7, #4]
 800c5a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c5a4:	7afb      	ldrb	r3, [r7, #11]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d138      	bne.n	800c61c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c5b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c5b8:	2b03      	cmp	r3, #3
 800c5ba:	d14a      	bne.n	800c652 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	689a      	ldr	r2, [r3, #8]
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d913      	bls.n	800c5f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	689a      	ldr	r2, [r3, #8]
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	1ad2      	subs	r2, r2, r3
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	68da      	ldr	r2, [r3, #12]
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	bf28      	it	cs
 800c5e2:	4613      	movcs	r3, r2
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	6879      	ldr	r1, [r7, #4]
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f001 f80f 	bl	800d60c <USBD_CtlContinueRx>
 800c5ee:	e030      	b.n	800c652 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	2b03      	cmp	r3, #3
 800c5fa:	d10b      	bne.n	800c614 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d005      	beq.n	800c614 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f001 f80a 	bl	800d62e <USBD_CtlSendStatus>
 800c61a:	e01a      	b.n	800c652 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b03      	cmp	r3, #3
 800c626:	d114      	bne.n	800c652 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00e      	beq.n	800c652 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c63a:	699b      	ldr	r3, [r3, #24]
 800c63c:	7afa      	ldrb	r2, [r7, #11]
 800c63e:	4611      	mov	r1, r2
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	4798      	blx	r3
 800c644:	4603      	mov	r3, r0
 800c646:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c648:	7dfb      	ldrb	r3, [r7, #23]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d001      	beq.n	800c652 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c64e:	7dfb      	ldrb	r3, [r7, #23]
 800c650:	e000      	b.n	800c654 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3718      	adds	r7, #24
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	460b      	mov	r3, r1
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c66a:	7afb      	ldrb	r3, [r7, #11]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d16b      	bne.n	800c748 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	3314      	adds	r3, #20
 800c674:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c67c:	2b02      	cmp	r3, #2
 800c67e:	d156      	bne.n	800c72e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	689a      	ldr	r2, [r3, #8]
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d914      	bls.n	800c6b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	689a      	ldr	r2, [r3, #8]
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	1ad2      	subs	r2, r2, r3
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	461a      	mov	r2, r3
 800c6a0:	6879      	ldr	r1, [r7, #4]
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f000 ff84 	bl	800d5b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f001 fdc0 	bl	800e234 <USBD_LL_PrepareReceive>
 800c6b4:	e03b      	b.n	800c72e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	68da      	ldr	r2, [r3, #12]
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d11c      	bne.n	800c6fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d316      	bcc.n	800c6fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	685a      	ldr	r2, [r3, #4]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d20f      	bcs.n	800c6fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c6dc:	2200      	movs	r2, #0
 800c6de:	2100      	movs	r1, #0
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f000 ff65 	bl	800d5b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f001 fd9d 	bl	800e234 <USBD_LL_PrepareReceive>
 800c6fa:	e018      	b.n	800c72e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b03      	cmp	r3, #3
 800c706:	d10b      	bne.n	800c720 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d005      	beq.n	800c720 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c720:	2180      	movs	r1, #128	; 0x80
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f001 fc80 	bl	800e028 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f000 ff93 	bl	800d654 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c734:	2b01      	cmp	r3, #1
 800c736:	d122      	bne.n	800c77e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f7ff fe98 	bl	800c46e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c746:	e01a      	b.n	800c77e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b03      	cmp	r3, #3
 800c752:	d114      	bne.n	800c77e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c75a:	695b      	ldr	r3, [r3, #20]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00e      	beq.n	800c77e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c766:	695b      	ldr	r3, [r3, #20]
 800c768:	7afa      	ldrb	r2, [r7, #11]
 800c76a:	4611      	mov	r1, r2
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	4798      	blx	r3
 800c770:	4603      	mov	r3, r0
 800c772:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c774:	7dfb      	ldrb	r3, [r7, #23]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d001      	beq.n	800c77e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c77a:	7dfb      	ldrb	r3, [r7, #23]
 800c77c:	e000      	b.n	800c780 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3718      	adds	r7, #24
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d101      	bne.n	800c7bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	e02f      	b.n	800c81c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00f      	beq.n	800c7e6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d009      	beq.n	800c7e6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	6852      	ldr	r2, [r2, #4]
 800c7de:	b2d2      	uxtb	r2, r2
 800c7e0:	4611      	mov	r1, r2
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7e6:	2340      	movs	r3, #64	; 0x40
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f001 fba7 	bl	800df40 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2240      	movs	r2, #64	; 0x40
 800c7fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c802:	2340      	movs	r3, #64	; 0x40
 800c804:	2200      	movs	r2, #0
 800c806:	2180      	movs	r1, #128	; 0x80
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f001 fb99 	bl	800df40 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2201      	movs	r2, #1
 800c812:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2240      	movs	r2, #64	; 0x40
 800c818:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3708      	adds	r7, #8
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	460b      	mov	r3, r1
 800c82e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	78fa      	ldrb	r2, [r7, #3]
 800c834:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c852:	b2da      	uxtb	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2204      	movs	r2, #4
 800c85e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	2b04      	cmp	r3, #4
 800c882:	d106      	bne.n	800c892 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d101      	bne.n	800c8b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	e012      	b.n	800c8dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d10b      	bne.n	800c8da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8c8:	69db      	ldr	r3, [r3, #28]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d005      	beq.n	800c8da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d101      	bne.n	800c8fe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c8fa:	2303      	movs	r3, #3
 800c8fc:	e014      	b.n	800c928 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b03      	cmp	r3, #3
 800c908:	d10d      	bne.n	800c926 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d007      	beq.n	800c926 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	78fa      	ldrb	r2, [r7, #3]
 800c920:	4611      	mov	r1, r2
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c942:	2b00      	cmp	r3, #0
 800c944:	d101      	bne.n	800c94a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c946:	2303      	movs	r3, #3
 800c948:	e014      	b.n	800c974 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b03      	cmp	r3, #3
 800c954:	d10d      	bne.n	800c972 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d007      	beq.n	800c972 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96a:	78fa      	ldrb	r2, [r7, #3]
 800c96c:	4611      	mov	r1, r2
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	370c      	adds	r7, #12
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b082      	sub	sp, #8
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2201      	movs	r2, #1
 800c99e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d009      	beq.n	800c9c0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	6852      	ldr	r2, [r2, #4]
 800c9b8:	b2d2      	uxtb	r2, r2
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	4798      	blx	r3
  }

  return USBD_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c9ca:	b480      	push	{r7}
 800c9cc:	b087      	sub	sp, #28
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c9e8:	8a3b      	ldrh	r3, [r7, #16]
 800c9ea:	021b      	lsls	r3, r3, #8
 800c9ec:	b21a      	sxth	r2, r3
 800c9ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	b21b      	sxth	r3, r3
 800c9f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c9f8:	89fb      	ldrh	r3, [r7, #14]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	371c      	adds	r7, #28
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
	...

0800ca08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca12:	2300      	movs	r3, #0
 800ca14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca1e:	2b40      	cmp	r3, #64	; 0x40
 800ca20:	d005      	beq.n	800ca2e <USBD_StdDevReq+0x26>
 800ca22:	2b40      	cmp	r3, #64	; 0x40
 800ca24:	d853      	bhi.n	800cace <USBD_StdDevReq+0xc6>
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00b      	beq.n	800ca42 <USBD_StdDevReq+0x3a>
 800ca2a:	2b20      	cmp	r3, #32
 800ca2c:	d14f      	bne.n	800cace <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	4798      	blx	r3
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ca40:	e04a      	b.n	800cad8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	785b      	ldrb	r3, [r3, #1]
 800ca46:	2b09      	cmp	r3, #9
 800ca48:	d83b      	bhi.n	800cac2 <USBD_StdDevReq+0xba>
 800ca4a:	a201      	add	r2, pc, #4	; (adr r2, 800ca50 <USBD_StdDevReq+0x48>)
 800ca4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca50:	0800caa5 	.word	0x0800caa5
 800ca54:	0800cab9 	.word	0x0800cab9
 800ca58:	0800cac3 	.word	0x0800cac3
 800ca5c:	0800caaf 	.word	0x0800caaf
 800ca60:	0800cac3 	.word	0x0800cac3
 800ca64:	0800ca83 	.word	0x0800ca83
 800ca68:	0800ca79 	.word	0x0800ca79
 800ca6c:	0800cac3 	.word	0x0800cac3
 800ca70:	0800ca9b 	.word	0x0800ca9b
 800ca74:	0800ca8d 	.word	0x0800ca8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca78:	6839      	ldr	r1, [r7, #0]
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 f9de 	bl	800ce3c <USBD_GetDescriptor>
          break;
 800ca80:	e024      	b.n	800cacc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fb43 	bl	800d110 <USBD_SetAddress>
          break;
 800ca8a:	e01f      	b.n	800cacc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fb82 	bl	800d198 <USBD_SetConfig>
 800ca94:	4603      	mov	r3, r0
 800ca96:	73fb      	strb	r3, [r7, #15]
          break;
 800ca98:	e018      	b.n	800cacc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca9a:	6839      	ldr	r1, [r7, #0]
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 fc21 	bl	800d2e4 <USBD_GetConfig>
          break;
 800caa2:	e013      	b.n	800cacc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800caa4:	6839      	ldr	r1, [r7, #0]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fc52 	bl	800d350 <USBD_GetStatus>
          break;
 800caac:	e00e      	b.n	800cacc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fc81 	bl	800d3b8 <USBD_SetFeature>
          break;
 800cab6:	e009      	b.n	800cacc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fc90 	bl	800d3e0 <USBD_ClrFeature>
          break;
 800cac0:	e004      	b.n	800cacc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fce7 	bl	800d498 <USBD_CtlError>
          break;
 800caca:	bf00      	nop
      }
      break;
 800cacc:	e004      	b.n	800cad8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cace:	6839      	ldr	r1, [r7, #0]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 fce1 	bl	800d498 <USBD_CtlError>
      break;
 800cad6:	bf00      	nop
  }

  return ret;
 800cad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop

0800cae4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cafa:	2b40      	cmp	r3, #64	; 0x40
 800cafc:	d005      	beq.n	800cb0a <USBD_StdItfReq+0x26>
 800cafe:	2b40      	cmp	r3, #64	; 0x40
 800cb00:	d82f      	bhi.n	800cb62 <USBD_StdItfReq+0x7e>
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <USBD_StdItfReq+0x26>
 800cb06:	2b20      	cmp	r3, #32
 800cb08:	d12b      	bne.n	800cb62 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	3b01      	subs	r3, #1
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d81d      	bhi.n	800cb54 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	889b      	ldrh	r3, [r3, #4]
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d813      	bhi.n	800cb4a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	4798      	blx	r3
 800cb30:	4603      	mov	r3, r0
 800cb32:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	88db      	ldrh	r3, [r3, #6]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d110      	bne.n	800cb5e <USBD_StdItfReq+0x7a>
 800cb3c:	7bfb      	ldrb	r3, [r7, #15]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10d      	bne.n	800cb5e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fd73 	bl	800d62e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb48:	e009      	b.n	800cb5e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cb4a:	6839      	ldr	r1, [r7, #0]
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 fca3 	bl	800d498 <USBD_CtlError>
          break;
 800cb52:	e004      	b.n	800cb5e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cb54:	6839      	ldr	r1, [r7, #0]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fc9e 	bl	800d498 <USBD_CtlError>
          break;
 800cb5c:	e000      	b.n	800cb60 <USBD_StdItfReq+0x7c>
          break;
 800cb5e:	bf00      	nop
      }
      break;
 800cb60:	e004      	b.n	800cb6c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fc97 	bl	800d498 <USBD_CtlError>
      break;
 800cb6a:	bf00      	nop
  }

  return ret;
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b084      	sub	sp, #16
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	889b      	ldrh	r3, [r3, #4]
 800cb88:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb92:	2b40      	cmp	r3, #64	; 0x40
 800cb94:	d007      	beq.n	800cba6 <USBD_StdEPReq+0x30>
 800cb96:	2b40      	cmp	r3, #64	; 0x40
 800cb98:	f200 8145 	bhi.w	800ce26 <USBD_StdEPReq+0x2b0>
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00c      	beq.n	800cbba <USBD_StdEPReq+0x44>
 800cba0:	2b20      	cmp	r3, #32
 800cba2:	f040 8140 	bne.w	800ce26 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	4798      	blx	r3
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	73fb      	strb	r3, [r7, #15]
      break;
 800cbb8:	e13a      	b.n	800ce30 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	785b      	ldrb	r3, [r3, #1]
 800cbbe:	2b03      	cmp	r3, #3
 800cbc0:	d007      	beq.n	800cbd2 <USBD_StdEPReq+0x5c>
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	f300 8129 	bgt.w	800ce1a <USBD_StdEPReq+0x2a4>
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d07f      	beq.n	800cccc <USBD_StdEPReq+0x156>
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d03c      	beq.n	800cc4a <USBD_StdEPReq+0xd4>
 800cbd0:	e123      	b.n	800ce1a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d002      	beq.n	800cbe4 <USBD_StdEPReq+0x6e>
 800cbde:	2b03      	cmp	r3, #3
 800cbe0:	d016      	beq.n	800cc10 <USBD_StdEPReq+0x9a>
 800cbe2:	e02c      	b.n	800cc3e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbe4:	7bbb      	ldrb	r3, [r7, #14]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00d      	beq.n	800cc06 <USBD_StdEPReq+0x90>
 800cbea:	7bbb      	ldrb	r3, [r7, #14]
 800cbec:	2b80      	cmp	r3, #128	; 0x80
 800cbee:	d00a      	beq.n	800cc06 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbf0:	7bbb      	ldrb	r3, [r7, #14]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f001 fa17 	bl	800e028 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbfa:	2180      	movs	r1, #128	; 0x80
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f001 fa13 	bl	800e028 <USBD_LL_StallEP>
 800cc02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc04:	e020      	b.n	800cc48 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 fc45 	bl	800d498 <USBD_CtlError>
              break;
 800cc0e:	e01b      	b.n	800cc48 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	885b      	ldrh	r3, [r3, #2]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10e      	bne.n	800cc36 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc18:	7bbb      	ldrb	r3, [r7, #14]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00b      	beq.n	800cc36 <USBD_StdEPReq+0xc0>
 800cc1e:	7bbb      	ldrb	r3, [r7, #14]
 800cc20:	2b80      	cmp	r3, #128	; 0x80
 800cc22:	d008      	beq.n	800cc36 <USBD_StdEPReq+0xc0>
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	88db      	ldrh	r3, [r3, #6]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d104      	bne.n	800cc36 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc2c:	7bbb      	ldrb	r3, [r7, #14]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f001 f9f9 	bl	800e028 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fcf9 	bl	800d62e <USBD_CtlSendStatus>

              break;
 800cc3c:	e004      	b.n	800cc48 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fc29 	bl	800d498 <USBD_CtlError>
              break;
 800cc46:	bf00      	nop
          }
          break;
 800cc48:	e0ec      	b.n	800ce24 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	d002      	beq.n	800cc5c <USBD_StdEPReq+0xe6>
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	d016      	beq.n	800cc88 <USBD_StdEPReq+0x112>
 800cc5a:	e030      	b.n	800ccbe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc5c:	7bbb      	ldrb	r3, [r7, #14]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00d      	beq.n	800cc7e <USBD_StdEPReq+0x108>
 800cc62:	7bbb      	ldrb	r3, [r7, #14]
 800cc64:	2b80      	cmp	r3, #128	; 0x80
 800cc66:	d00a      	beq.n	800cc7e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc68:	7bbb      	ldrb	r3, [r7, #14]
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f001 f9db 	bl	800e028 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc72:	2180      	movs	r1, #128	; 0x80
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f001 f9d7 	bl	800e028 <USBD_LL_StallEP>
 800cc7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc7c:	e025      	b.n	800ccca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cc7e:	6839      	ldr	r1, [r7, #0]
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 fc09 	bl	800d498 <USBD_CtlError>
              break;
 800cc86:	e020      	b.n	800ccca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	885b      	ldrh	r3, [r3, #2]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d11b      	bne.n	800ccc8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc90:	7bbb      	ldrb	r3, [r7, #14]
 800cc92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d004      	beq.n	800cca4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc9a:	7bbb      	ldrb	r3, [r7, #14]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f001 f9f8 	bl	800e094 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 fcc2 	bl	800d62e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	4798      	blx	r3
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ccbc:	e004      	b.n	800ccc8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ccbe:	6839      	ldr	r1, [r7, #0]
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 fbe9 	bl	800d498 <USBD_CtlError>
              break;
 800ccc6:	e000      	b.n	800ccca <USBD_StdEPReq+0x154>
              break;
 800ccc8:	bf00      	nop
          }
          break;
 800ccca:	e0ab      	b.n	800ce24 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d002      	beq.n	800ccde <USBD_StdEPReq+0x168>
 800ccd8:	2b03      	cmp	r3, #3
 800ccda:	d032      	beq.n	800cd42 <USBD_StdEPReq+0x1cc>
 800ccdc:	e097      	b.n	800ce0e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccde:	7bbb      	ldrb	r3, [r7, #14]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d007      	beq.n	800ccf4 <USBD_StdEPReq+0x17e>
 800cce4:	7bbb      	ldrb	r3, [r7, #14]
 800cce6:	2b80      	cmp	r3, #128	; 0x80
 800cce8:	d004      	beq.n	800ccf4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ccea:	6839      	ldr	r1, [r7, #0]
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fbd3 	bl	800d498 <USBD_CtlError>
                break;
 800ccf2:	e091      	b.n	800ce18 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	da0b      	bge.n	800cd14 <USBD_StdEPReq+0x19e>
 800ccfc:	7bbb      	ldrb	r3, [r7, #14]
 800ccfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd02:	4613      	mov	r3, r2
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	4413      	add	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	3310      	adds	r3, #16
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	4413      	add	r3, r2
 800cd10:	3304      	adds	r3, #4
 800cd12:	e00b      	b.n	800cd2c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd14:	7bbb      	ldrb	r3, [r7, #14]
 800cd16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4413      	add	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	4413      	add	r3, r2
 800cd2a:	3304      	adds	r3, #4
 800cd2c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	2200      	movs	r2, #0
 800cd32:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	2202      	movs	r2, #2
 800cd38:	4619      	mov	r1, r3
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 fc1d 	bl	800d57a <USBD_CtlSendData>
              break;
 800cd40:	e06a      	b.n	800ce18 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	da11      	bge.n	800cd6e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd4a:	7bbb      	ldrb	r3, [r7, #14]
 800cd4c:	f003 020f 	and.w	r2, r3, #15
 800cd50:	6879      	ldr	r1, [r7, #4]
 800cd52:	4613      	mov	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	440b      	add	r3, r1
 800cd5c:	3324      	adds	r3, #36	; 0x24
 800cd5e:	881b      	ldrh	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d117      	bne.n	800cd94 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fb96 	bl	800d498 <USBD_CtlError>
                  break;
 800cd6c:	e054      	b.n	800ce18 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd6e:	7bbb      	ldrb	r3, [r7, #14]
 800cd70:	f003 020f 	and.w	r2, r3, #15
 800cd74:	6879      	ldr	r1, [r7, #4]
 800cd76:	4613      	mov	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	440b      	add	r3, r1
 800cd80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd84:	881b      	ldrh	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d104      	bne.n	800cd94 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 fb83 	bl	800d498 <USBD_CtlError>
                  break;
 800cd92:	e041      	b.n	800ce18 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	da0b      	bge.n	800cdb4 <USBD_StdEPReq+0x23e>
 800cd9c:	7bbb      	ldrb	r3, [r7, #14]
 800cd9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cda2:	4613      	mov	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	4413      	add	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	3310      	adds	r3, #16
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	4413      	add	r3, r2
 800cdb0:	3304      	adds	r3, #4
 800cdb2:	e00b      	b.n	800cdcc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cdb4:	7bbb      	ldrb	r3, [r7, #14]
 800cdb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdba:	4613      	mov	r3, r2
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	4413      	add	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	4413      	add	r3, r2
 800cdca:	3304      	adds	r3, #4
 800cdcc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cdce:	7bbb      	ldrb	r3, [r7, #14]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d002      	beq.n	800cdda <USBD_StdEPReq+0x264>
 800cdd4:	7bbb      	ldrb	r3, [r7, #14]
 800cdd6:	2b80      	cmp	r3, #128	; 0x80
 800cdd8:	d103      	bne.n	800cde2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2200      	movs	r2, #0
 800cdde:	601a      	str	r2, [r3, #0]
 800cde0:	e00e      	b.n	800ce00 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cde2:	7bbb      	ldrb	r3, [r7, #14]
 800cde4:	4619      	mov	r1, r3
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f001 f98a 	bl	800e100 <USBD_LL_IsStallEP>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d003      	beq.n	800cdfa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	e002      	b.n	800ce00 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	2202      	movs	r2, #2
 800ce04:	4619      	mov	r1, r3
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 fbb7 	bl	800d57a <USBD_CtlSendData>
              break;
 800ce0c:	e004      	b.n	800ce18 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ce0e:	6839      	ldr	r1, [r7, #0]
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 fb41 	bl	800d498 <USBD_CtlError>
              break;
 800ce16:	bf00      	nop
          }
          break;
 800ce18:	e004      	b.n	800ce24 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 fb3b 	bl	800d498 <USBD_CtlError>
          break;
 800ce22:	bf00      	nop
      }
      break;
 800ce24:	e004      	b.n	800ce30 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ce26:	6839      	ldr	r1, [r7, #0]
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 fb35 	bl	800d498 <USBD_CtlError>
      break;
 800ce2e:	bf00      	nop
  }

  return ret;
 800ce30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
	...

0800ce3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce46:	2300      	movs	r3, #0
 800ce48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	885b      	ldrh	r3, [r3, #2]
 800ce56:	0a1b      	lsrs	r3, r3, #8
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	3b01      	subs	r3, #1
 800ce5c:	2b06      	cmp	r3, #6
 800ce5e:	f200 8128 	bhi.w	800d0b2 <USBD_GetDescriptor+0x276>
 800ce62:	a201      	add	r2, pc, #4	; (adr r2, 800ce68 <USBD_GetDescriptor+0x2c>)
 800ce64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce68:	0800ce85 	.word	0x0800ce85
 800ce6c:	0800ce9d 	.word	0x0800ce9d
 800ce70:	0800cedd 	.word	0x0800cedd
 800ce74:	0800d0b3 	.word	0x0800d0b3
 800ce78:	0800d0b3 	.word	0x0800d0b3
 800ce7c:	0800d053 	.word	0x0800d053
 800ce80:	0800d07f 	.word	0x0800d07f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	7c12      	ldrb	r2, [r2, #16]
 800ce90:	f107 0108 	add.w	r1, r7, #8
 800ce94:	4610      	mov	r0, r2
 800ce96:	4798      	blx	r3
 800ce98:	60f8      	str	r0, [r7, #12]
      break;
 800ce9a:	e112      	b.n	800d0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	7c1b      	ldrb	r3, [r3, #16]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10d      	bne.n	800cec0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceac:	f107 0208 	add.w	r2, r7, #8
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	4798      	blx	r3
 800ceb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	2202      	movs	r2, #2
 800cebc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cebe:	e100      	b.n	800d0c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec8:	f107 0208 	add.w	r2, r7, #8
 800cecc:	4610      	mov	r0, r2
 800cece:	4798      	blx	r3
 800ced0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3301      	adds	r3, #1
 800ced6:	2202      	movs	r2, #2
 800ced8:	701a      	strb	r2, [r3, #0]
      break;
 800ceda:	e0f2      	b.n	800d0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	885b      	ldrh	r3, [r3, #2]
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	2b05      	cmp	r3, #5
 800cee4:	f200 80ac 	bhi.w	800d040 <USBD_GetDescriptor+0x204>
 800cee8:	a201      	add	r2, pc, #4	; (adr r2, 800cef0 <USBD_GetDescriptor+0xb4>)
 800ceea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceee:	bf00      	nop
 800cef0:	0800cf09 	.word	0x0800cf09
 800cef4:	0800cf3d 	.word	0x0800cf3d
 800cef8:	0800cf71 	.word	0x0800cf71
 800cefc:	0800cfa5 	.word	0x0800cfa5
 800cf00:	0800cfd9 	.word	0x0800cfd9
 800cf04:	0800d00d 	.word	0x0800d00d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00b      	beq.n	800cf2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	7c12      	ldrb	r2, [r2, #16]
 800cf20:	f107 0108 	add.w	r1, r7, #8
 800cf24:	4610      	mov	r0, r2
 800cf26:	4798      	blx	r3
 800cf28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf2a:	e091      	b.n	800d050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf2c:	6839      	ldr	r1, [r7, #0]
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fab2 	bl	800d498 <USBD_CtlError>
            err++;
 800cf34:	7afb      	ldrb	r3, [r7, #11]
 800cf36:	3301      	adds	r3, #1
 800cf38:	72fb      	strb	r3, [r7, #11]
          break;
 800cf3a:	e089      	b.n	800d050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00b      	beq.n	800cf60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	7c12      	ldrb	r2, [r2, #16]
 800cf54:	f107 0108 	add.w	r1, r7, #8
 800cf58:	4610      	mov	r0, r2
 800cf5a:	4798      	blx	r3
 800cf5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf5e:	e077      	b.n	800d050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf60:	6839      	ldr	r1, [r7, #0]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 fa98 	bl	800d498 <USBD_CtlError>
            err++;
 800cf68:	7afb      	ldrb	r3, [r7, #11]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf6e:	e06f      	b.n	800d050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00b      	beq.n	800cf94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	7c12      	ldrb	r2, [r2, #16]
 800cf88:	f107 0108 	add.w	r1, r7, #8
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	4798      	blx	r3
 800cf90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf92:	e05d      	b.n	800d050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf94:	6839      	ldr	r1, [r7, #0]
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 fa7e 	bl	800d498 <USBD_CtlError>
            err++;
 800cf9c:	7afb      	ldrb	r3, [r7, #11]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	72fb      	strb	r3, [r7, #11]
          break;
 800cfa2:	e055      	b.n	800d050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d00b      	beq.n	800cfc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	7c12      	ldrb	r2, [r2, #16]
 800cfbc:	f107 0108 	add.w	r1, r7, #8
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	4798      	blx	r3
 800cfc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfc6:	e043      	b.n	800d050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfc8:	6839      	ldr	r1, [r7, #0]
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 fa64 	bl	800d498 <USBD_CtlError>
            err++;
 800cfd0:	7afb      	ldrb	r3, [r7, #11]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	72fb      	strb	r3, [r7, #11]
          break;
 800cfd6:	e03b      	b.n	800d050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfde:	695b      	ldr	r3, [r3, #20]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00b      	beq.n	800cffc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfea:	695b      	ldr	r3, [r3, #20]
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	7c12      	ldrb	r2, [r2, #16]
 800cff0:	f107 0108 	add.w	r1, r7, #8
 800cff4:	4610      	mov	r0, r2
 800cff6:	4798      	blx	r3
 800cff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cffa:	e029      	b.n	800d050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cffc:	6839      	ldr	r1, [r7, #0]
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 fa4a 	bl	800d498 <USBD_CtlError>
            err++;
 800d004:	7afb      	ldrb	r3, [r7, #11]
 800d006:	3301      	adds	r3, #1
 800d008:	72fb      	strb	r3, [r7, #11]
          break;
 800d00a:	e021      	b.n	800d050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d012:	699b      	ldr	r3, [r3, #24]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00b      	beq.n	800d030 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d01e:	699b      	ldr	r3, [r3, #24]
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	7c12      	ldrb	r2, [r2, #16]
 800d024:	f107 0108 	add.w	r1, r7, #8
 800d028:	4610      	mov	r0, r2
 800d02a:	4798      	blx	r3
 800d02c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d02e:	e00f      	b.n	800d050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 fa30 	bl	800d498 <USBD_CtlError>
            err++;
 800d038:	7afb      	ldrb	r3, [r7, #11]
 800d03a:	3301      	adds	r3, #1
 800d03c:	72fb      	strb	r3, [r7, #11]
          break;
 800d03e:	e007      	b.n	800d050 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fa28 	bl	800d498 <USBD_CtlError>
          err++;
 800d048:	7afb      	ldrb	r3, [r7, #11]
 800d04a:	3301      	adds	r3, #1
 800d04c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d04e:	bf00      	nop
      }
      break;
 800d050:	e037      	b.n	800d0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	7c1b      	ldrb	r3, [r3, #16]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d109      	bne.n	800d06e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d062:	f107 0208 	add.w	r2, r7, #8
 800d066:	4610      	mov	r0, r2
 800d068:	4798      	blx	r3
 800d06a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d06c:	e029      	b.n	800d0c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d06e:	6839      	ldr	r1, [r7, #0]
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 fa11 	bl	800d498 <USBD_CtlError>
        err++;
 800d076:	7afb      	ldrb	r3, [r7, #11]
 800d078:	3301      	adds	r3, #1
 800d07a:	72fb      	strb	r3, [r7, #11]
      break;
 800d07c:	e021      	b.n	800d0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	7c1b      	ldrb	r3, [r3, #16]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10d      	bne.n	800d0a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d08e:	f107 0208 	add.w	r2, r7, #8
 800d092:	4610      	mov	r0, r2
 800d094:	4798      	blx	r3
 800d096:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	3301      	adds	r3, #1
 800d09c:	2207      	movs	r2, #7
 800d09e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0a0:	e00f      	b.n	800d0c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d0a2:	6839      	ldr	r1, [r7, #0]
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 f9f7 	bl	800d498 <USBD_CtlError>
        err++;
 800d0aa:	7afb      	ldrb	r3, [r7, #11]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	72fb      	strb	r3, [r7, #11]
      break;
 800d0b0:	e007      	b.n	800d0c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d0b2:	6839      	ldr	r1, [r7, #0]
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 f9ef 	bl	800d498 <USBD_CtlError>
      err++;
 800d0ba:	7afb      	ldrb	r3, [r7, #11]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	72fb      	strb	r3, [r7, #11]
      break;
 800d0c0:	bf00      	nop
  }

  if (err != 0U)
 800d0c2:	7afb      	ldrb	r3, [r7, #11]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d11e      	bne.n	800d106 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	88db      	ldrh	r3, [r3, #6]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d016      	beq.n	800d0fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d0d0:	893b      	ldrh	r3, [r7, #8]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00e      	beq.n	800d0f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	88da      	ldrh	r2, [r3, #6]
 800d0da:	893b      	ldrh	r3, [r7, #8]
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	bf28      	it	cs
 800d0e0:	4613      	movcs	r3, r2
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d0e6:	893b      	ldrh	r3, [r7, #8]
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	68f9      	ldr	r1, [r7, #12]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 fa44 	bl	800d57a <USBD_CtlSendData>
 800d0f2:	e009      	b.n	800d108 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f9ce 	bl	800d498 <USBD_CtlError>
 800d0fc:	e004      	b.n	800d108 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fa95 	bl	800d62e <USBD_CtlSendStatus>
 800d104:	e000      	b.n	800d108 <USBD_GetDescriptor+0x2cc>
    return;
 800d106:	bf00      	nop
  }
}
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop

0800d110 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	889b      	ldrh	r3, [r3, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d131      	bne.n	800d186 <USBD_SetAddress+0x76>
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	88db      	ldrh	r3, [r3, #6]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d12d      	bne.n	800d186 <USBD_SetAddress+0x76>
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	885b      	ldrh	r3, [r3, #2]
 800d12e:	2b7f      	cmp	r3, #127	; 0x7f
 800d130:	d829      	bhi.n	800d186 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	885b      	ldrh	r3, [r3, #2]
 800d136:	b2db      	uxtb	r3, r3
 800d138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d13c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d144:	b2db      	uxtb	r3, r3
 800d146:	2b03      	cmp	r3, #3
 800d148:	d104      	bne.n	800d154 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f9a3 	bl	800d498 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d152:	e01d      	b.n	800d190 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	7bfa      	ldrb	r2, [r7, #15]
 800d158:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d15c:	7bfb      	ldrb	r3, [r7, #15]
 800d15e:	4619      	mov	r1, r3
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 fff9 	bl	800e158 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 fa61 	bl	800d62e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d16c:	7bfb      	ldrb	r3, [r7, #15]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d004      	beq.n	800d17c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2202      	movs	r2, #2
 800d176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d17a:	e009      	b.n	800d190 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d184:	e004      	b.n	800d190 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d186:	6839      	ldr	r1, [r7, #0]
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f985 	bl	800d498 <USBD_CtlError>
  }
}
 800d18e:	bf00      	nop
 800d190:	bf00      	nop
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	885b      	ldrh	r3, [r3, #2]
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	4b4c      	ldr	r3, [pc, #304]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d1ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d1b0:	4b4b      	ldr	r3, [pc, #300]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d905      	bls.n	800d1c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d1b8:	6839      	ldr	r1, [r7, #0]
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 f96c 	bl	800d498 <USBD_CtlError>
    return USBD_FAIL;
 800d1c0:	2303      	movs	r3, #3
 800d1c2:	e088      	b.n	800d2d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d002      	beq.n	800d1d6 <USBD_SetConfig+0x3e>
 800d1d0:	2b03      	cmp	r3, #3
 800d1d2:	d025      	beq.n	800d220 <USBD_SetConfig+0x88>
 800d1d4:	e071      	b.n	800d2ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d1d6:	4b42      	ldr	r3, [pc, #264]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d01c      	beq.n	800d218 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d1de:	4b40      	ldr	r3, [pc, #256]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1e8:	4b3d      	ldr	r3, [pc, #244]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff f948 	bl	800c484 <USBD_SetClassConfig>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d1f8:	7bfb      	ldrb	r3, [r7, #15]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d004      	beq.n	800d208 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d1fe:	6839      	ldr	r1, [r7, #0]
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 f949 	bl	800d498 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d206:	e065      	b.n	800d2d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 fa10 	bl	800d62e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2203      	movs	r2, #3
 800d212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d216:	e05d      	b.n	800d2d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fa08 	bl	800d62e <USBD_CtlSendStatus>
      break;
 800d21e:	e059      	b.n	800d2d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d220:	4b2f      	ldr	r3, [pc, #188]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d112      	bne.n	800d24e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2202      	movs	r2, #2
 800d22c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d230:	4b2b      	ldr	r3, [pc, #172]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	461a      	mov	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d23a:	4b29      	ldr	r3, [pc, #164]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	4619      	mov	r1, r3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f7ff f93b 	bl	800c4bc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 f9f1 	bl	800d62e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d24c:	e042      	b.n	800d2d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d24e:	4b24      	ldr	r3, [pc, #144]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	461a      	mov	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d02a      	beq.n	800d2b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	b2db      	uxtb	r3, r3
 800d262:	4619      	mov	r1, r3
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7ff f929 	bl	800c4bc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d26a:	4b1d      	ldr	r3, [pc, #116]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	461a      	mov	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d274:	4b1a      	ldr	r3, [pc, #104]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	4619      	mov	r1, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f7ff f902 	bl	800c484 <USBD_SetClassConfig>
 800d280:	4603      	mov	r3, r0
 800d282:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d284:	7bfb      	ldrb	r3, [r7, #15]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00f      	beq.n	800d2aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d28a:	6839      	ldr	r1, [r7, #0]
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f903 	bl	800d498 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	b2db      	uxtb	r3, r3
 800d298:	4619      	mov	r1, r3
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7ff f90e 	bl	800c4bc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d2a8:	e014      	b.n	800d2d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 f9bf 	bl	800d62e <USBD_CtlSendStatus>
      break;
 800d2b0:	e010      	b.n	800d2d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 f9bb 	bl	800d62e <USBD_CtlSendStatus>
      break;
 800d2b8:	e00c      	b.n	800d2d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f8eb 	bl	800d498 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2c2:	4b07      	ldr	r3, [pc, #28]	; (800d2e0 <USBD_SetConfig+0x148>)
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f7ff f8f7 	bl	800c4bc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d2ce:	2303      	movs	r3, #3
 800d2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800d2d2:	bf00      	nop
  }

  return ret;
 800d2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	20000600 	.word	0x20000600

0800d2e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	88db      	ldrh	r3, [r3, #6]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d004      	beq.n	800d300 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 f8cd 	bl	800d498 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d2fe:	e023      	b.n	800d348 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d306:	b2db      	uxtb	r3, r3
 800d308:	2b02      	cmp	r3, #2
 800d30a:	dc02      	bgt.n	800d312 <USBD_GetConfig+0x2e>
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	dc03      	bgt.n	800d318 <USBD_GetConfig+0x34>
 800d310:	e015      	b.n	800d33e <USBD_GetConfig+0x5a>
 800d312:	2b03      	cmp	r3, #3
 800d314:	d00b      	beq.n	800d32e <USBD_GetConfig+0x4a>
 800d316:	e012      	b.n	800d33e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	3308      	adds	r3, #8
 800d322:	2201      	movs	r2, #1
 800d324:	4619      	mov	r1, r3
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f927 	bl	800d57a <USBD_CtlSendData>
        break;
 800d32c:	e00c      	b.n	800d348 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3304      	adds	r3, #4
 800d332:	2201      	movs	r2, #1
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 f91f 	bl	800d57a <USBD_CtlSendData>
        break;
 800d33c:	e004      	b.n	800d348 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f8a9 	bl	800d498 <USBD_CtlError>
        break;
 800d346:	bf00      	nop
}
 800d348:	bf00      	nop
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d360:	b2db      	uxtb	r3, r3
 800d362:	3b01      	subs	r3, #1
 800d364:	2b02      	cmp	r3, #2
 800d366:	d81e      	bhi.n	800d3a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	88db      	ldrh	r3, [r3, #6]
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d004      	beq.n	800d37a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d370:	6839      	ldr	r1, [r7, #0]
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 f890 	bl	800d498 <USBD_CtlError>
        break;
 800d378:	e01a      	b.n	800d3b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2201      	movs	r2, #1
 800d37e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d386:	2b00      	cmp	r3, #0
 800d388:	d005      	beq.n	800d396 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	f043 0202 	orr.w	r2, r3, #2
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	330c      	adds	r3, #12
 800d39a:	2202      	movs	r2, #2
 800d39c:	4619      	mov	r1, r3
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f8eb 	bl	800d57a <USBD_CtlSendData>
      break;
 800d3a4:	e004      	b.n	800d3b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3a6:	6839      	ldr	r1, [r7, #0]
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f875 	bl	800d498 <USBD_CtlError>
      break;
 800d3ae:	bf00      	nop
  }
}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	885b      	ldrh	r3, [r3, #2]
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d106      	bne.n	800d3d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 f92b 	bl	800d62e <USBD_CtlSendStatus>
  }
}
 800d3d8:	bf00      	nop
 800d3da:	3708      	adds	r7, #8
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	2b02      	cmp	r3, #2
 800d3f6:	d80b      	bhi.n	800d410 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	885b      	ldrh	r3, [r3, #2]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d10c      	bne.n	800d41a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 f910 	bl	800d62e <USBD_CtlSendStatus>
      }
      break;
 800d40e:	e004      	b.n	800d41a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d410:	6839      	ldr	r1, [r7, #0]
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 f840 	bl	800d498 <USBD_CtlError>
      break;
 800d418:	e000      	b.n	800d41c <USBD_ClrFeature+0x3c>
      break;
 800d41a:	bf00      	nop
  }
}
 800d41c:	bf00      	nop
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	781a      	ldrb	r2, [r3, #0]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	3301      	adds	r3, #1
 800d43e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	781a      	ldrb	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	3301      	adds	r3, #1
 800d44c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f7ff fabb 	bl	800c9ca <SWAPBYTE>
 800d454:	4603      	mov	r3, r0
 800d456:	461a      	mov	r2, r3
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	3301      	adds	r3, #1
 800d460:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	3301      	adds	r3, #1
 800d466:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f7ff faae 	bl	800c9ca <SWAPBYTE>
 800d46e:	4603      	mov	r3, r0
 800d470:	461a      	mov	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3301      	adds	r3, #1
 800d47a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	3301      	adds	r3, #1
 800d480:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	f7ff faa1 	bl	800c9ca <SWAPBYTE>
 800d488:	4603      	mov	r3, r0
 800d48a:	461a      	mov	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	80da      	strh	r2, [r3, #6]
}
 800d490:	bf00      	nop
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4a2:	2180      	movs	r1, #128	; 0x80
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 fdbf 	bl	800e028 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fdbb 	bl	800e028 <USBD_LL_StallEP>
}
 800d4b2:	bf00      	nop
 800d4b4:	3708      	adds	r7, #8
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b086      	sub	sp, #24
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	60f8      	str	r0, [r7, #12]
 800d4c2:	60b9      	str	r1, [r7, #8]
 800d4c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d036      	beq.n	800d53e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d4d4:	6938      	ldr	r0, [r7, #16]
 800d4d6:	f000 f836 	bl	800d546 <USBD_GetLen>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	3301      	adds	r3, #1
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	005b      	lsls	r3, r3, #1
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d4e8:	7dfb      	ldrb	r3, [r7, #23]
 800d4ea:	68ba      	ldr	r2, [r7, #8]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	7812      	ldrb	r2, [r2, #0]
 800d4f2:	701a      	strb	r2, [r3, #0]
  idx++;
 800d4f4:	7dfb      	ldrb	r3, [r7, #23]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
 800d4fc:	68ba      	ldr	r2, [r7, #8]
 800d4fe:	4413      	add	r3, r2
 800d500:	2203      	movs	r2, #3
 800d502:	701a      	strb	r2, [r3, #0]
  idx++;
 800d504:	7dfb      	ldrb	r3, [r7, #23]
 800d506:	3301      	adds	r3, #1
 800d508:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d50a:	e013      	b.n	800d534 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d50c:	7dfb      	ldrb	r3, [r7, #23]
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	4413      	add	r3, r2
 800d512:	693a      	ldr	r2, [r7, #16]
 800d514:	7812      	ldrb	r2, [r2, #0]
 800d516:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	3301      	adds	r3, #1
 800d51c:	613b      	str	r3, [r7, #16]
    idx++;
 800d51e:	7dfb      	ldrb	r3, [r7, #23]
 800d520:	3301      	adds	r3, #1
 800d522:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d524:	7dfb      	ldrb	r3, [r7, #23]
 800d526:	68ba      	ldr	r2, [r7, #8]
 800d528:	4413      	add	r3, r2
 800d52a:	2200      	movs	r2, #0
 800d52c:	701a      	strb	r2, [r3, #0]
    idx++;
 800d52e:	7dfb      	ldrb	r3, [r7, #23]
 800d530:	3301      	adds	r3, #1
 800d532:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1e7      	bne.n	800d50c <USBD_GetString+0x52>
 800d53c:	e000      	b.n	800d540 <USBD_GetString+0x86>
    return;
 800d53e:	bf00      	nop
  }
}
 800d540:	3718      	adds	r7, #24
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d546:	b480      	push	{r7}
 800d548:	b085      	sub	sp, #20
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d54e:	2300      	movs	r3, #0
 800d550:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d556:	e005      	b.n	800d564 <USBD_GetLen+0x1e>
  {
    len++;
 800d558:	7bfb      	ldrb	r3, [r7, #15]
 800d55a:	3301      	adds	r3, #1
 800d55c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	3301      	adds	r3, #1
 800d562:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1f5      	bne.n	800d558 <USBD_GetLen+0x12>
  }

  return len;
 800d56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3714      	adds	r7, #20
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr

0800d57a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b084      	sub	sp, #16
 800d57e:	af00      	add	r7, sp, #0
 800d580:	60f8      	str	r0, [r7, #12]
 800d582:	60b9      	str	r1, [r7, #8]
 800d584:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2202      	movs	r2, #2
 800d58a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	2100      	movs	r1, #0
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f000 fe0f 	bl	800e1c4 <USBD_LL_Transmit>

  return USBD_OK;
 800d5a6:	2300      	movs	r3, #0
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f000 fdfe 	bl	800e1c4 <USBD_LL_Transmit>

  return USBD_OK;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b084      	sub	sp, #16
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	60f8      	str	r0, [r7, #12]
 800d5da:	60b9      	str	r1, [r7, #8]
 800d5dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2203      	movs	r2, #3
 800d5e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f000 fe19 	bl	800e234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d602:	2300      	movs	r3, #0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	2100      	movs	r1, #0
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f000 fe08 	bl	800e234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b082      	sub	sp, #8
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2204      	movs	r2, #4
 800d63a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d63e:	2300      	movs	r3, #0
 800d640:	2200      	movs	r2, #0
 800d642:	2100      	movs	r1, #0
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 fdbd 	bl	800e1c4 <USBD_LL_Transmit>

  return USBD_OK;
 800d64a:	2300      	movs	r3, #0
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2205      	movs	r2, #5
 800d660:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d664:	2300      	movs	r3, #0
 800d666:	2200      	movs	r2, #0
 800d668:	2100      	movs	r1, #0
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fde2 	bl	800e234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
	...

0800d67c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b087      	sub	sp, #28
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	4613      	mov	r3, r2
 800d688:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d68a:	2301      	movs	r3, #1
 800d68c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d692:	4b1f      	ldr	r3, [pc, #124]	; (800d710 <FATFS_LinkDriverEx+0x94>)
 800d694:	7a5b      	ldrb	r3, [r3, #9]
 800d696:	b2db      	uxtb	r3, r3
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d131      	bne.n	800d700 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d69c:	4b1c      	ldr	r3, [pc, #112]	; (800d710 <FATFS_LinkDriverEx+0x94>)
 800d69e:	7a5b      	ldrb	r3, [r3, #9]
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	4b1a      	ldr	r3, [pc, #104]	; (800d710 <FATFS_LinkDriverEx+0x94>)
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d6aa:	4b19      	ldr	r3, [pc, #100]	; (800d710 <FATFS_LinkDriverEx+0x94>)
 800d6ac:	7a5b      	ldrb	r3, [r3, #9]
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	4a17      	ldr	r2, [pc, #92]	; (800d710 <FATFS_LinkDriverEx+0x94>)
 800d6b2:	009b      	lsls	r3, r3, #2
 800d6b4:	4413      	add	r3, r2
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d6ba:	4b15      	ldr	r3, [pc, #84]	; (800d710 <FATFS_LinkDriverEx+0x94>)
 800d6bc:	7a5b      	ldrb	r3, [r3, #9]
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	4b13      	ldr	r3, [pc, #76]	; (800d710 <FATFS_LinkDriverEx+0x94>)
 800d6c4:	4413      	add	r3, r2
 800d6c6:	79fa      	ldrb	r2, [r7, #7]
 800d6c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d6ca:	4b11      	ldr	r3, [pc, #68]	; (800d710 <FATFS_LinkDriverEx+0x94>)
 800d6cc:	7a5b      	ldrb	r3, [r3, #9]
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	1c5a      	adds	r2, r3, #1
 800d6d2:	b2d1      	uxtb	r1, r2
 800d6d4:	4a0e      	ldr	r2, [pc, #56]	; (800d710 <FATFS_LinkDriverEx+0x94>)
 800d6d6:	7251      	strb	r1, [r2, #9]
 800d6d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d6da:	7dbb      	ldrb	r3, [r7, #22]
 800d6dc:	3330      	adds	r3, #48	; 0x30
 800d6de:	b2da      	uxtb	r2, r3
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	223a      	movs	r2, #58	; 0x3a
 800d6ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	3302      	adds	r3, #2
 800d6f0:	222f      	movs	r2, #47	; 0x2f
 800d6f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	3303      	adds	r3, #3
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d700:	7dfb      	ldrb	r3, [r7, #23]
}
 800d702:	4618      	mov	r0, r3
 800d704:	371c      	adds	r7, #28
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	20000604 	.word	0x20000604

0800d714 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d71e:	2200      	movs	r2, #0
 800d720:	6839      	ldr	r1, [r7, #0]
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7ff ffaa 	bl	800d67c <FATFS_LinkDriverEx>
 800d728:	4603      	mov	r3, r0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
	...

0800d734 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d738:	2200      	movs	r2, #0
 800d73a:	4912      	ldr	r1, [pc, #72]	; (800d784 <MX_USB_DEVICE_Init+0x50>)
 800d73c:	4812      	ldr	r0, [pc, #72]	; (800d788 <MX_USB_DEVICE_Init+0x54>)
 800d73e:	f7fe fe33 	bl	800c3a8 <USBD_Init>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d748:	f7f3 fb4c 	bl	8000de4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d74c:	490f      	ldr	r1, [pc, #60]	; (800d78c <MX_USB_DEVICE_Init+0x58>)
 800d74e:	480e      	ldr	r0, [pc, #56]	; (800d788 <MX_USB_DEVICE_Init+0x54>)
 800d750:	f7fe fe5a 	bl	800c408 <USBD_RegisterClass>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d75a:	f7f3 fb43 	bl	8000de4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d75e:	490c      	ldr	r1, [pc, #48]	; (800d790 <MX_USB_DEVICE_Init+0x5c>)
 800d760:	4809      	ldr	r0, [pc, #36]	; (800d788 <MX_USB_DEVICE_Init+0x54>)
 800d762:	f7fe fd7b 	bl	800c25c <USBD_CDC_RegisterInterface>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d001      	beq.n	800d770 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d76c:	f7f3 fb3a 	bl	8000de4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d770:	4805      	ldr	r0, [pc, #20]	; (800d788 <MX_USB_DEVICE_Init+0x54>)
 800d772:	f7fe fe70 	bl	800c456 <USBD_Start>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d001      	beq.n	800d780 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d77c:	f7f3 fb32 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d780:	bf00      	nop
 800d782:	bd80      	pop	{r7, pc}
 800d784:	20000130 	.word	0x20000130
 800d788:	20000610 	.word	0x20000610
 800d78c:	20000018 	.word	0x20000018
 800d790:	2000011c 	.word	0x2000011c

0800d794 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d798:	2200      	movs	r2, #0
 800d79a:	4905      	ldr	r1, [pc, #20]	; (800d7b0 <CDC_Init_FS+0x1c>)
 800d79c:	4805      	ldr	r0, [pc, #20]	; (800d7b4 <CDC_Init_FS+0x20>)
 800d79e:	f7fe fd72 	bl	800c286 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d7a2:	4905      	ldr	r1, [pc, #20]	; (800d7b8 <CDC_Init_FS+0x24>)
 800d7a4:	4803      	ldr	r0, [pc, #12]	; (800d7b4 <CDC_Init_FS+0x20>)
 800d7a6:	f7fe fd8c 	bl	800c2c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d7aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	200010e0 	.word	0x200010e0
 800d7b4:	20000610 	.word	0x20000610
 800d7b8:	200008e0 	.word	0x200008e0

0800d7bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d7c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	6039      	str	r1, [r7, #0]
 800d7d6:	71fb      	strb	r3, [r7, #7]
 800d7d8:	4613      	mov	r3, r2
 800d7da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d7dc:	79fb      	ldrb	r3, [r7, #7]
 800d7de:	2b23      	cmp	r3, #35	; 0x23
 800d7e0:	d84a      	bhi.n	800d878 <CDC_Control_FS+0xac>
 800d7e2:	a201      	add	r2, pc, #4	; (adr r2, 800d7e8 <CDC_Control_FS+0x1c>)
 800d7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e8:	0800d879 	.word	0x0800d879
 800d7ec:	0800d879 	.word	0x0800d879
 800d7f0:	0800d879 	.word	0x0800d879
 800d7f4:	0800d879 	.word	0x0800d879
 800d7f8:	0800d879 	.word	0x0800d879
 800d7fc:	0800d879 	.word	0x0800d879
 800d800:	0800d879 	.word	0x0800d879
 800d804:	0800d879 	.word	0x0800d879
 800d808:	0800d879 	.word	0x0800d879
 800d80c:	0800d879 	.word	0x0800d879
 800d810:	0800d879 	.word	0x0800d879
 800d814:	0800d879 	.word	0x0800d879
 800d818:	0800d879 	.word	0x0800d879
 800d81c:	0800d879 	.word	0x0800d879
 800d820:	0800d879 	.word	0x0800d879
 800d824:	0800d879 	.word	0x0800d879
 800d828:	0800d879 	.word	0x0800d879
 800d82c:	0800d879 	.word	0x0800d879
 800d830:	0800d879 	.word	0x0800d879
 800d834:	0800d879 	.word	0x0800d879
 800d838:	0800d879 	.word	0x0800d879
 800d83c:	0800d879 	.word	0x0800d879
 800d840:	0800d879 	.word	0x0800d879
 800d844:	0800d879 	.word	0x0800d879
 800d848:	0800d879 	.word	0x0800d879
 800d84c:	0800d879 	.word	0x0800d879
 800d850:	0800d879 	.word	0x0800d879
 800d854:	0800d879 	.word	0x0800d879
 800d858:	0800d879 	.word	0x0800d879
 800d85c:	0800d879 	.word	0x0800d879
 800d860:	0800d879 	.word	0x0800d879
 800d864:	0800d879 	.word	0x0800d879
 800d868:	0800d879 	.word	0x0800d879
 800d86c:	0800d879 	.word	0x0800d879
 800d870:	0800d879 	.word	0x0800d879
 800d874:	0800d879 	.word	0x0800d879
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d878:	bf00      	nop
  }

  return (USBD_OK);
 800d87a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d892:	6879      	ldr	r1, [r7, #4]
 800d894:	4805      	ldr	r0, [pc, #20]	; (800d8ac <CDC_Receive_FS+0x24>)
 800d896:	f7fe fd14 	bl	800c2c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d89a:	4804      	ldr	r0, [pc, #16]	; (800d8ac <CDC_Receive_FS+0x24>)
 800d89c:	f7fe fd5a 	bl	800c354 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d8a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	20000610 	.word	0x20000610

0800d8b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d8c0:	4b0d      	ldr	r3, [pc, #52]	; (800d8f8 <CDC_Transmit_FS+0x48>)
 800d8c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d001      	beq.n	800d8d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e00b      	b.n	800d8ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d8d6:	887b      	ldrh	r3, [r7, #2]
 800d8d8:	461a      	mov	r2, r3
 800d8da:	6879      	ldr	r1, [r7, #4]
 800d8dc:	4806      	ldr	r0, [pc, #24]	; (800d8f8 <CDC_Transmit_FS+0x48>)
 800d8de:	f7fe fcd2 	bl	800c286 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d8e2:	4805      	ldr	r0, [pc, #20]	; (800d8f8 <CDC_Transmit_FS+0x48>)
 800d8e4:	f7fe fd06 	bl	800c2f4 <USBD_CDC_TransmitPacket>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20000610 	.word	0x20000610

0800d8fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b087      	sub	sp, #28
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	4613      	mov	r3, r2
 800d908:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d90a:	2300      	movs	r3, #0
 800d90c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d90e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d912:	4618      	mov	r0, r3
 800d914:	371c      	adds	r7, #28
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
	...

0800d920 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	4603      	mov	r3, r0
 800d928:	6039      	str	r1, [r7, #0]
 800d92a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	2212      	movs	r2, #18
 800d930:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d932:	4b03      	ldr	r3, [pc, #12]	; (800d940 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d934:	4618      	mov	r0, r3
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	2000014c 	.word	0x2000014c

0800d944 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	4603      	mov	r3, r0
 800d94c:	6039      	str	r1, [r7, #0]
 800d94e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	2204      	movs	r2, #4
 800d954:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d956:	4b03      	ldr	r3, [pc, #12]	; (800d964 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d958:	4618      	mov	r0, r3
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	20000160 	.word	0x20000160

0800d968 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	4603      	mov	r3, r0
 800d970:	6039      	str	r1, [r7, #0]
 800d972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d974:	79fb      	ldrb	r3, [r7, #7]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d105      	bne.n	800d986 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	4907      	ldr	r1, [pc, #28]	; (800d99c <USBD_FS_ProductStrDescriptor+0x34>)
 800d97e:	4808      	ldr	r0, [pc, #32]	; (800d9a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d980:	f7ff fd9b 	bl	800d4ba <USBD_GetString>
 800d984:	e004      	b.n	800d990 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	4904      	ldr	r1, [pc, #16]	; (800d99c <USBD_FS_ProductStrDescriptor+0x34>)
 800d98a:	4805      	ldr	r0, [pc, #20]	; (800d9a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d98c:	f7ff fd95 	bl	800d4ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800d990:	4b02      	ldr	r3, [pc, #8]	; (800d99c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d992:	4618      	mov	r0, r3
 800d994:	3708      	adds	r7, #8
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	200018e0 	.word	0x200018e0
 800d9a0:	0800f364 	.word	0x0800f364

0800d9a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	6039      	str	r1, [r7, #0]
 800d9ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d9b0:	683a      	ldr	r2, [r7, #0]
 800d9b2:	4904      	ldr	r1, [pc, #16]	; (800d9c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d9b4:	4804      	ldr	r0, [pc, #16]	; (800d9c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d9b6:	f7ff fd80 	bl	800d4ba <USBD_GetString>
  return USBD_StrDesc;
 800d9ba:	4b02      	ldr	r3, [pc, #8]	; (800d9c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	200018e0 	.word	0x200018e0
 800d9c8:	0800f37c 	.word	0x0800f37c

0800d9cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	6039      	str	r1, [r7, #0]
 800d9d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	221a      	movs	r2, #26
 800d9dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d9de:	f000 f843 	bl	800da68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d9e2:	4b02      	ldr	r3, [pc, #8]	; (800d9ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	20000164 	.word	0x20000164

0800d9f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	6039      	str	r1, [r7, #0]
 800d9fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d9fc:	79fb      	ldrb	r3, [r7, #7]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d105      	bne.n	800da0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	4907      	ldr	r1, [pc, #28]	; (800da24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800da06:	4808      	ldr	r0, [pc, #32]	; (800da28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800da08:	f7ff fd57 	bl	800d4ba <USBD_GetString>
 800da0c:	e004      	b.n	800da18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	4904      	ldr	r1, [pc, #16]	; (800da24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800da12:	4805      	ldr	r0, [pc, #20]	; (800da28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800da14:	f7ff fd51 	bl	800d4ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800da18:	4b02      	ldr	r3, [pc, #8]	; (800da24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	200018e0 	.word	0x200018e0
 800da28:	0800f390 	.word	0x0800f390

0800da2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	4603      	mov	r3, r0
 800da34:	6039      	str	r1, [r7, #0]
 800da36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da38:	79fb      	ldrb	r3, [r7, #7]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d105      	bne.n	800da4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	4907      	ldr	r1, [pc, #28]	; (800da60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da42:	4808      	ldr	r0, [pc, #32]	; (800da64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da44:	f7ff fd39 	bl	800d4ba <USBD_GetString>
 800da48:	e004      	b.n	800da54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	4904      	ldr	r1, [pc, #16]	; (800da60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da4e:	4805      	ldr	r0, [pc, #20]	; (800da64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da50:	f7ff fd33 	bl	800d4ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800da54:	4b02      	ldr	r3, [pc, #8]	; (800da60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800da56:	4618      	mov	r0, r3
 800da58:	3708      	adds	r7, #8
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	200018e0 	.word	0x200018e0
 800da64:	0800f39c 	.word	0x0800f39c

0800da68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800da6e:	4b0f      	ldr	r3, [pc, #60]	; (800daac <Get_SerialNum+0x44>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800da74:	4b0e      	ldr	r3, [pc, #56]	; (800dab0 <Get_SerialNum+0x48>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800da7a:	4b0e      	ldr	r3, [pc, #56]	; (800dab4 <Get_SerialNum+0x4c>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4413      	add	r3, r2
 800da86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d009      	beq.n	800daa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800da8e:	2208      	movs	r2, #8
 800da90:	4909      	ldr	r1, [pc, #36]	; (800dab8 <Get_SerialNum+0x50>)
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f000 f814 	bl	800dac0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800da98:	2204      	movs	r2, #4
 800da9a:	4908      	ldr	r1, [pc, #32]	; (800dabc <Get_SerialNum+0x54>)
 800da9c:	68b8      	ldr	r0, [r7, #8]
 800da9e:	f000 f80f 	bl	800dac0 <IntToUnicode>
  }
}
 800daa2:	bf00      	nop
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	1fff7590 	.word	0x1fff7590
 800dab0:	1fff7594 	.word	0x1fff7594
 800dab4:	1fff7598 	.word	0x1fff7598
 800dab8:	20000166 	.word	0x20000166
 800dabc:	20000176 	.word	0x20000176

0800dac0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b087      	sub	sp, #28
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	4613      	mov	r3, r2
 800dacc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dace:	2300      	movs	r3, #0
 800dad0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dad2:	2300      	movs	r3, #0
 800dad4:	75fb      	strb	r3, [r7, #23]
 800dad6:	e027      	b.n	800db28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	0f1b      	lsrs	r3, r3, #28
 800dadc:	2b09      	cmp	r3, #9
 800dade:	d80b      	bhi.n	800daf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	0f1b      	lsrs	r3, r3, #28
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
 800dae8:	005b      	lsls	r3, r3, #1
 800daea:	4619      	mov	r1, r3
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	440b      	add	r3, r1
 800daf0:	3230      	adds	r2, #48	; 0x30
 800daf2:	b2d2      	uxtb	r2, r2
 800daf4:	701a      	strb	r2, [r3, #0]
 800daf6:	e00a      	b.n	800db0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	0f1b      	lsrs	r3, r3, #28
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	7dfb      	ldrb	r3, [r7, #23]
 800db00:	005b      	lsls	r3, r3, #1
 800db02:	4619      	mov	r1, r3
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	440b      	add	r3, r1
 800db08:	3237      	adds	r2, #55	; 0x37
 800db0a:	b2d2      	uxtb	r2, r2
 800db0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	011b      	lsls	r3, r3, #4
 800db12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	005b      	lsls	r3, r3, #1
 800db18:	3301      	adds	r3, #1
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	4413      	add	r3, r2
 800db1e:	2200      	movs	r2, #0
 800db20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800db22:	7dfb      	ldrb	r3, [r7, #23]
 800db24:	3301      	adds	r3, #1
 800db26:	75fb      	strb	r3, [r7, #23]
 800db28:	7dfa      	ldrb	r2, [r7, #23]
 800db2a:	79fb      	ldrb	r3, [r7, #7]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d3d3      	bcc.n	800dad8 <IntToUnicode+0x18>
  }
}
 800db30:	bf00      	nop
 800db32:	bf00      	nop
 800db34:	371c      	adds	r7, #28
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
	...

0800db40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b0b0      	sub	sp, #192	; 0xc0
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800db4c:	2200      	movs	r2, #0
 800db4e:	601a      	str	r2, [r3, #0]
 800db50:	605a      	str	r2, [r3, #4]
 800db52:	609a      	str	r2, [r3, #8]
 800db54:	60da      	str	r2, [r3, #12]
 800db56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800db58:	f107 0318 	add.w	r3, r7, #24
 800db5c:	2294      	movs	r2, #148	; 0x94
 800db5e:	2100      	movs	r1, #0
 800db60:	4618      	mov	r0, r3
 800db62:	f000 fbf5 	bl	800e350 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800db6e:	d163      	bne.n	800dc38 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800db70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db74:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800db76:	2300      	movs	r3, #0
 800db78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800db7c:	f107 0318 	add.w	r3, r7, #24
 800db80:	4618      	mov	r0, r3
 800db82:	f7f6 fb6b 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d001      	beq.n	800db90 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800db8c:	f7f3 f92a 	bl	8000de4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db90:	4b2b      	ldr	r3, [pc, #172]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800db92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db94:	4a2a      	ldr	r2, [pc, #168]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800db96:	f043 0301 	orr.w	r3, r3, #1
 800db9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800db9c:	4b28      	ldr	r3, [pc, #160]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800db9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dba0:	f003 0301 	and.w	r3, r3, #1
 800dba4:	617b      	str	r3, [r7, #20]
 800dba6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dba8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dbac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbbc:	2303      	movs	r3, #3
 800dbbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dbc2:	230a      	movs	r3, #10
 800dbc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbc8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800dbcc:	4619      	mov	r1, r3
 800dbce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dbd2:	f7f3 fe9d 	bl	8001910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dbd6:	4b1a      	ldr	r3, [pc, #104]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800dbd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbda:	4a19      	ldr	r2, [pc, #100]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800dbdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dbe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dbe2:	4b17      	ldr	r3, [pc, #92]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800dbe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dbea:	613b      	str	r3, [r7, #16]
 800dbec:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dbee:	4b14      	ldr	r3, [pc, #80]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800dbf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d114      	bne.n	800dc24 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dbfa:	4b11      	ldr	r3, [pc, #68]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800dbfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbfe:	4a10      	ldr	r2, [pc, #64]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800dc00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc04:	6593      	str	r3, [r2, #88]	; 0x58
 800dc06:	4b0e      	ldr	r3, [pc, #56]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800dc08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc0e:	60fb      	str	r3, [r7, #12]
 800dc10:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800dc12:	f7f5 fc0f 	bl	8003434 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc16:	4b0a      	ldr	r3, [pc, #40]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800dc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc1a:	4a09      	ldr	r2, [pc, #36]	; (800dc40 <HAL_PCD_MspInit+0x100>)
 800dc1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc20:	6593      	str	r3, [r2, #88]	; 0x58
 800dc22:	e001      	b.n	800dc28 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800dc24:	f7f5 fc06 	bl	8003434 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dc28:	2200      	movs	r2, #0
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	2043      	movs	r0, #67	; 0x43
 800dc2e:	f7f3 fd7e 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dc32:	2043      	movs	r0, #67	; 0x43
 800dc34:	f7f3 fd97 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dc38:	bf00      	nop
 800dc3a:	37c0      	adds	r7, #192	; 0xc0
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	40021000 	.word	0x40021000

0800dc44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	f7fe fc46 	bl	800c4ec <USBD_LL_SetupStage>
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	460b      	mov	r3, r1
 800dc72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dc7a:	78fa      	ldrb	r2, [r7, #3]
 800dc7c:	6879      	ldr	r1, [r7, #4]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	00db      	lsls	r3, r3, #3
 800dc82:	4413      	add	r3, r2
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	440b      	add	r3, r1
 800dc88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	78fb      	ldrb	r3, [r7, #3]
 800dc90:	4619      	mov	r1, r3
 800dc92:	f7fe fc80 	bl	800c596 <USBD_LL_DataOutStage>
}
 800dc96:	bf00      	nop
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b082      	sub	sp, #8
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
 800dca6:	460b      	mov	r3, r1
 800dca8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dcb0:	78fa      	ldrb	r2, [r7, #3]
 800dcb2:	6879      	ldr	r1, [r7, #4]
 800dcb4:	4613      	mov	r3, r2
 800dcb6:	00db      	lsls	r3, r3, #3
 800dcb8:	4413      	add	r3, r2
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	440b      	add	r3, r1
 800dcbe:	334c      	adds	r3, #76	; 0x4c
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	78fb      	ldrb	r3, [r7, #3]
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	f7fe fcc9 	bl	800c65c <USBD_LL_DataInStage>
}
 800dcca:	bf00      	nop
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fe fddd 	bl	800c8a0 <USBD_LL_SOF>
}
 800dce6:	bf00      	nop
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b084      	sub	sp, #16
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	d001      	beq.n	800dd06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dd02:	f7f3 f86f 	bl	8000de4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dd0c:	7bfa      	ldrb	r2, [r7, #15]
 800dd0e:	4611      	mov	r1, r2
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fe fd87 	bl	800c824 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fe fd33 	bl	800c788 <USBD_LL_Reset>
}
 800dd22:	bf00      	nop
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
	...

0800dd2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	6812      	ldr	r2, [r2, #0]
 800dd42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dd46:	f043 0301 	orr.w	r3, r3, #1
 800dd4a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe fd76 	bl	800c844 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a1b      	ldr	r3, [r3, #32]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d005      	beq.n	800dd6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd60:	4b04      	ldr	r3, [pc, #16]	; (800dd74 <HAL_PCD_SuspendCallback+0x48>)
 800dd62:	691b      	ldr	r3, [r3, #16]
 800dd64:	4a03      	ldr	r2, [pc, #12]	; (800dd74 <HAL_PCD_SuspendCallback+0x48>)
 800dd66:	f043 0306 	orr.w	r3, r3, #6
 800dd6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dd6c:	bf00      	nop
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	e000ed00 	.word	0xe000ed00

0800dd78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	6812      	ldr	r2, [r2, #0]
 800dd8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dd92:	f023 0301 	bic.w	r3, r3, #1
 800dd96:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6a1b      	ldr	r3, [r3, #32]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d007      	beq.n	800ddb0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dda0:	4b08      	ldr	r3, [pc, #32]	; (800ddc4 <HAL_PCD_ResumeCallback+0x4c>)
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	4a07      	ldr	r2, [pc, #28]	; (800ddc4 <HAL_PCD_ResumeCallback+0x4c>)
 800dda6:	f023 0306 	bic.w	r3, r3, #6
 800ddaa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ddac:	f000 faa6 	bl	800e2fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7fe fd5a 	bl	800c870 <USBD_LL_Resume>
}
 800ddbc:	bf00      	nop
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	e000ed00 	.word	0xe000ed00

0800ddc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddda:	78fa      	ldrb	r2, [r7, #3]
 800dddc:	4611      	mov	r1, r2
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fe fda6 	bl	800c930 <USBD_LL_IsoOUTIncomplete>
}
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddfe:	78fa      	ldrb	r2, [r7, #3]
 800de00:	4611      	mov	r1, r2
 800de02:	4618      	mov	r0, r3
 800de04:	f7fe fd6e 	bl	800c8e4 <USBD_LL_IsoINIncomplete>
}
 800de08:	bf00      	nop
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fe fdac 	bl	800c97c <USBD_LL_DevConnected>
}
 800de24:	bf00      	nop
 800de26:	3708      	adds	r7, #8
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7fe fda9 	bl	800c992 <USBD_LL_DevDisconnected>
}
 800de40:	bf00      	nop
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d139      	bne.n	800decc <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800de58:	4a1f      	ldr	r2, [pc, #124]	; (800ded8 <USBD_LL_Init+0x90>)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a1d      	ldr	r2, [pc, #116]	; (800ded8 <USBD_LL_Init+0x90>)
 800de64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de68:	4b1b      	ldr	r3, [pc, #108]	; (800ded8 <USBD_LL_Init+0x90>)
 800de6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800de6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800de70:	4b19      	ldr	r3, [pc, #100]	; (800ded8 <USBD_LL_Init+0x90>)
 800de72:	2206      	movs	r2, #6
 800de74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800de76:	4b18      	ldr	r3, [pc, #96]	; (800ded8 <USBD_LL_Init+0x90>)
 800de78:	2202      	movs	r2, #2
 800de7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800de7c:	4b16      	ldr	r3, [pc, #88]	; (800ded8 <USBD_LL_Init+0x90>)
 800de7e:	2200      	movs	r2, #0
 800de80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800de82:	4b15      	ldr	r3, [pc, #84]	; (800ded8 <USBD_LL_Init+0x90>)
 800de84:	2200      	movs	r2, #0
 800de86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800de88:	4b13      	ldr	r3, [pc, #76]	; (800ded8 <USBD_LL_Init+0x90>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800de8e:	4b12      	ldr	r3, [pc, #72]	; (800ded8 <USBD_LL_Init+0x90>)
 800de90:	2200      	movs	r2, #0
 800de92:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800de94:	4b10      	ldr	r3, [pc, #64]	; (800ded8 <USBD_LL_Init+0x90>)
 800de96:	2200      	movs	r2, #0
 800de98:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800de9a:	4b0f      	ldr	r3, [pc, #60]	; (800ded8 <USBD_LL_Init+0x90>)
 800de9c:	2200      	movs	r2, #0
 800de9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dea0:	480d      	ldr	r0, [pc, #52]	; (800ded8 <USBD_LL_Init+0x90>)
 800dea2:	f7f4 f837 	bl	8001f14 <HAL_PCD_Init>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d001      	beq.n	800deb0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800deac:	f7f2 ff9a 	bl	8000de4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800deb0:	2180      	movs	r1, #128	; 0x80
 800deb2:	4809      	ldr	r0, [pc, #36]	; (800ded8 <USBD_LL_Init+0x90>)
 800deb4:	f7f5 f9b9 	bl	800322a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800deb8:	2240      	movs	r2, #64	; 0x40
 800deba:	2100      	movs	r1, #0
 800debc:	4806      	ldr	r0, [pc, #24]	; (800ded8 <USBD_LL_Init+0x90>)
 800debe:	f7f5 f96d 	bl	800319c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dec2:	2280      	movs	r2, #128	; 0x80
 800dec4:	2101      	movs	r1, #1
 800dec6:	4804      	ldr	r0, [pc, #16]	; (800ded8 <USBD_LL_Init+0x90>)
 800dec8:	f7f5 f968 	bl	800319c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	20001ae0 	.word	0x20001ae0

0800dedc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dee8:	2300      	movs	r3, #0
 800deea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800def2:	4618      	mov	r0, r3
 800def4:	f7f4 f932 	bl	800215c <HAL_PCD_Start>
 800def8:	4603      	mov	r3, r0
 800defa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800defc:	7bbb      	ldrb	r3, [r7, #14]
 800defe:	2b03      	cmp	r3, #3
 800df00:	d816      	bhi.n	800df30 <USBD_LL_Start+0x54>
 800df02:	a201      	add	r2, pc, #4	; (adr r2, 800df08 <USBD_LL_Start+0x2c>)
 800df04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df08:	0800df19 	.word	0x0800df19
 800df0c:	0800df1f 	.word	0x0800df1f
 800df10:	0800df25 	.word	0x0800df25
 800df14:	0800df2b 	.word	0x0800df2b
    case HAL_OK :
      usb_status = USBD_OK;
 800df18:	2300      	movs	r3, #0
 800df1a:	73fb      	strb	r3, [r7, #15]
    break;
 800df1c:	e00b      	b.n	800df36 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df1e:	2303      	movs	r3, #3
 800df20:	73fb      	strb	r3, [r7, #15]
    break;
 800df22:	e008      	b.n	800df36 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df24:	2301      	movs	r3, #1
 800df26:	73fb      	strb	r3, [r7, #15]
    break;
 800df28:	e005      	b.n	800df36 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df2a:	2303      	movs	r3, #3
 800df2c:	73fb      	strb	r3, [r7, #15]
    break;
 800df2e:	e002      	b.n	800df36 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800df30:	2303      	movs	r3, #3
 800df32:	73fb      	strb	r3, [r7, #15]
    break;
 800df34:	bf00      	nop
  }
  return usb_status;
 800df36:	7bfb      	ldrb	r3, [r7, #15]
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3710      	adds	r7, #16
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	4608      	mov	r0, r1
 800df4a:	4611      	mov	r1, r2
 800df4c:	461a      	mov	r2, r3
 800df4e:	4603      	mov	r3, r0
 800df50:	70fb      	strb	r3, [r7, #3]
 800df52:	460b      	mov	r3, r1
 800df54:	70bb      	strb	r3, [r7, #2]
 800df56:	4613      	mov	r3, r2
 800df58:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df5a:	2300      	movs	r3, #0
 800df5c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df5e:	2300      	movs	r3, #0
 800df60:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df68:	78bb      	ldrb	r3, [r7, #2]
 800df6a:	883a      	ldrh	r2, [r7, #0]
 800df6c:	78f9      	ldrb	r1, [r7, #3]
 800df6e:	f7f4 fddc 	bl	8002b2a <HAL_PCD_EP_Open>
 800df72:	4603      	mov	r3, r0
 800df74:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800df76:	7bbb      	ldrb	r3, [r7, #14]
 800df78:	2b03      	cmp	r3, #3
 800df7a:	d817      	bhi.n	800dfac <USBD_LL_OpenEP+0x6c>
 800df7c:	a201      	add	r2, pc, #4	; (adr r2, 800df84 <USBD_LL_OpenEP+0x44>)
 800df7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df82:	bf00      	nop
 800df84:	0800df95 	.word	0x0800df95
 800df88:	0800df9b 	.word	0x0800df9b
 800df8c:	0800dfa1 	.word	0x0800dfa1
 800df90:	0800dfa7 	.word	0x0800dfa7
    case HAL_OK :
      usb_status = USBD_OK;
 800df94:	2300      	movs	r3, #0
 800df96:	73fb      	strb	r3, [r7, #15]
    break;
 800df98:	e00b      	b.n	800dfb2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df9a:	2303      	movs	r3, #3
 800df9c:	73fb      	strb	r3, [r7, #15]
    break;
 800df9e:	e008      	b.n	800dfb2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa4:	e005      	b.n	800dfb2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dfa6:	2303      	movs	r3, #3
 800dfa8:	73fb      	strb	r3, [r7, #15]
    break;
 800dfaa:	e002      	b.n	800dfb2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800dfac:	2303      	movs	r3, #3
 800dfae:	73fb      	strb	r3, [r7, #15]
    break;
 800dfb0:	bf00      	nop
  }
  return usb_status;
 800dfb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3710      	adds	r7, #16
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dfd6:	78fa      	ldrb	r2, [r7, #3]
 800dfd8:	4611      	mov	r1, r2
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7f4 fe0d 	bl	8002bfa <HAL_PCD_EP_Close>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dfe4:	7bbb      	ldrb	r3, [r7, #14]
 800dfe6:	2b03      	cmp	r3, #3
 800dfe8:	d816      	bhi.n	800e018 <USBD_LL_CloseEP+0x5c>
 800dfea:	a201      	add	r2, pc, #4	; (adr r2, 800dff0 <USBD_LL_CloseEP+0x34>)
 800dfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff0:	0800e001 	.word	0x0800e001
 800dff4:	0800e007 	.word	0x0800e007
 800dff8:	0800e00d 	.word	0x0800e00d
 800dffc:	0800e013 	.word	0x0800e013
    case HAL_OK :
      usb_status = USBD_OK;
 800e000:	2300      	movs	r3, #0
 800e002:	73fb      	strb	r3, [r7, #15]
    break;
 800e004:	e00b      	b.n	800e01e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e006:	2303      	movs	r3, #3
 800e008:	73fb      	strb	r3, [r7, #15]
    break;
 800e00a:	e008      	b.n	800e01e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e00c:	2301      	movs	r3, #1
 800e00e:	73fb      	strb	r3, [r7, #15]
    break;
 800e010:	e005      	b.n	800e01e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e012:	2303      	movs	r3, #3
 800e014:	73fb      	strb	r3, [r7, #15]
    break;
 800e016:	e002      	b.n	800e01e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e018:	2303      	movs	r3, #3
 800e01a:	73fb      	strb	r3, [r7, #15]
    break;
 800e01c:	bf00      	nop
  }
  return usb_status;
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	460b      	mov	r3, r1
 800e032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e034:	2300      	movs	r3, #0
 800e036:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e038:	2300      	movs	r3, #0
 800e03a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e042:	78fa      	ldrb	r2, [r7, #3]
 800e044:	4611      	mov	r1, r2
 800e046:	4618      	mov	r0, r3
 800e048:	f7f4 feb4 	bl	8002db4 <HAL_PCD_EP_SetStall>
 800e04c:	4603      	mov	r3, r0
 800e04e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e050:	7bbb      	ldrb	r3, [r7, #14]
 800e052:	2b03      	cmp	r3, #3
 800e054:	d816      	bhi.n	800e084 <USBD_LL_StallEP+0x5c>
 800e056:	a201      	add	r2, pc, #4	; (adr r2, 800e05c <USBD_LL_StallEP+0x34>)
 800e058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e05c:	0800e06d 	.word	0x0800e06d
 800e060:	0800e073 	.word	0x0800e073
 800e064:	0800e079 	.word	0x0800e079
 800e068:	0800e07f 	.word	0x0800e07f
    case HAL_OK :
      usb_status = USBD_OK;
 800e06c:	2300      	movs	r3, #0
 800e06e:	73fb      	strb	r3, [r7, #15]
    break;
 800e070:	e00b      	b.n	800e08a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e072:	2303      	movs	r3, #3
 800e074:	73fb      	strb	r3, [r7, #15]
    break;
 800e076:	e008      	b.n	800e08a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e078:	2301      	movs	r3, #1
 800e07a:	73fb      	strb	r3, [r7, #15]
    break;
 800e07c:	e005      	b.n	800e08a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e07e:	2303      	movs	r3, #3
 800e080:	73fb      	strb	r3, [r7, #15]
    break;
 800e082:	e002      	b.n	800e08a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e084:	2303      	movs	r3, #3
 800e086:	73fb      	strb	r3, [r7, #15]
    break;
 800e088:	bf00      	nop
  }
  return usb_status;
 800e08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	460b      	mov	r3, r1
 800e09e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0ae:	78fa      	ldrb	r2, [r7, #3]
 800e0b0:	4611      	mov	r1, r2
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7f4 fee0 	bl	8002e78 <HAL_PCD_EP_ClrStall>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e0bc:	7bbb      	ldrb	r3, [r7, #14]
 800e0be:	2b03      	cmp	r3, #3
 800e0c0:	d816      	bhi.n	800e0f0 <USBD_LL_ClearStallEP+0x5c>
 800e0c2:	a201      	add	r2, pc, #4	; (adr r2, 800e0c8 <USBD_LL_ClearStallEP+0x34>)
 800e0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c8:	0800e0d9 	.word	0x0800e0d9
 800e0cc:	0800e0df 	.word	0x0800e0df
 800e0d0:	0800e0e5 	.word	0x0800e0e5
 800e0d4:	0800e0eb 	.word	0x0800e0eb
    case HAL_OK :
      usb_status = USBD_OK;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	73fb      	strb	r3, [r7, #15]
    break;
 800e0dc:	e00b      	b.n	800e0f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0de:	2303      	movs	r3, #3
 800e0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e2:	e008      	b.n	800e0f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e8:	e005      	b.n	800e0f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0ea:	2303      	movs	r3, #3
 800e0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800e0ee:	e002      	b.n	800e0f6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e0f0:	2303      	movs	r3, #3
 800e0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e0f4:	bf00      	nop
  }
  return usb_status;
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e100:	b480      	push	{r7}
 800e102:	b085      	sub	sp, #20
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	460b      	mov	r3, r1
 800e10a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e112:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	da0b      	bge.n	800e134 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e11c:	78fb      	ldrb	r3, [r7, #3]
 800e11e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e122:	68f9      	ldr	r1, [r7, #12]
 800e124:	4613      	mov	r3, r2
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	4413      	add	r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	440b      	add	r3, r1
 800e12e:	333e      	adds	r3, #62	; 0x3e
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	e00b      	b.n	800e14c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e134:	78fb      	ldrb	r3, [r7, #3]
 800e136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e13a:	68f9      	ldr	r1, [r7, #12]
 800e13c:	4613      	mov	r3, r2
 800e13e:	00db      	lsls	r3, r3, #3
 800e140:	4413      	add	r3, r2
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	440b      	add	r3, r1
 800e146:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e14a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3714      	adds	r7, #20
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	460b      	mov	r3, r1
 800e162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e164:	2300      	movs	r3, #0
 800e166:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e168:	2300      	movs	r3, #0
 800e16a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e172:	78fa      	ldrb	r2, [r7, #3]
 800e174:	4611      	mov	r1, r2
 800e176:	4618      	mov	r0, r3
 800e178:	f7f4 fcb2 	bl	8002ae0 <HAL_PCD_SetAddress>
 800e17c:	4603      	mov	r3, r0
 800e17e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e180:	7bbb      	ldrb	r3, [r7, #14]
 800e182:	2b03      	cmp	r3, #3
 800e184:	d816      	bhi.n	800e1b4 <USBD_LL_SetUSBAddress+0x5c>
 800e186:	a201      	add	r2, pc, #4	; (adr r2, 800e18c <USBD_LL_SetUSBAddress+0x34>)
 800e188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e18c:	0800e19d 	.word	0x0800e19d
 800e190:	0800e1a3 	.word	0x0800e1a3
 800e194:	0800e1a9 	.word	0x0800e1a9
 800e198:	0800e1af 	.word	0x0800e1af
    case HAL_OK :
      usb_status = USBD_OK;
 800e19c:	2300      	movs	r3, #0
 800e19e:	73fb      	strb	r3, [r7, #15]
    break;
 800e1a0:	e00b      	b.n	800e1ba <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e1a2:	2303      	movs	r3, #3
 800e1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e1a6:	e008      	b.n	800e1ba <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e1ac:	e005      	b.n	800e1ba <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1ae:	2303      	movs	r3, #3
 800e1b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b2:	e002      	b.n	800e1ba <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e1b4:	2303      	movs	r3, #3
 800e1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b8:	bf00      	nop
  }
  return usb_status;
 800e1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	60f8      	str	r0, [r7, #12]
 800e1cc:	607a      	str	r2, [r7, #4]
 800e1ce:	603b      	str	r3, [r7, #0]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e1e2:	7af9      	ldrb	r1, [r7, #11]
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	f7f4 fda7 	bl	8002d3a <HAL_PCD_EP_Transmit>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e1f0:	7dbb      	ldrb	r3, [r7, #22]
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d816      	bhi.n	800e224 <USBD_LL_Transmit+0x60>
 800e1f6:	a201      	add	r2, pc, #4	; (adr r2, 800e1fc <USBD_LL_Transmit+0x38>)
 800e1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1fc:	0800e20d 	.word	0x0800e20d
 800e200:	0800e213 	.word	0x0800e213
 800e204:	0800e219 	.word	0x0800e219
 800e208:	0800e21f 	.word	0x0800e21f
    case HAL_OK :
      usb_status = USBD_OK;
 800e20c:	2300      	movs	r3, #0
 800e20e:	75fb      	strb	r3, [r7, #23]
    break;
 800e210:	e00b      	b.n	800e22a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e212:	2303      	movs	r3, #3
 800e214:	75fb      	strb	r3, [r7, #23]
    break;
 800e216:	e008      	b.n	800e22a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e218:	2301      	movs	r3, #1
 800e21a:	75fb      	strb	r3, [r7, #23]
    break;
 800e21c:	e005      	b.n	800e22a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e21e:	2303      	movs	r3, #3
 800e220:	75fb      	strb	r3, [r7, #23]
    break;
 800e222:	e002      	b.n	800e22a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800e224:	2303      	movs	r3, #3
 800e226:	75fb      	strb	r3, [r7, #23]
    break;
 800e228:	bf00      	nop
  }
  return usb_status;
 800e22a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3718      	adds	r7, #24
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b086      	sub	sp, #24
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	607a      	str	r2, [r7, #4]
 800e23e:	603b      	str	r3, [r7, #0]
 800e240:	460b      	mov	r3, r1
 800e242:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e248:	2300      	movs	r3, #0
 800e24a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e252:	7af9      	ldrb	r1, [r7, #11]
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	f7f4 fd19 	bl	8002c8e <HAL_PCD_EP_Receive>
 800e25c:	4603      	mov	r3, r0
 800e25e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e260:	7dbb      	ldrb	r3, [r7, #22]
 800e262:	2b03      	cmp	r3, #3
 800e264:	d816      	bhi.n	800e294 <USBD_LL_PrepareReceive+0x60>
 800e266:	a201      	add	r2, pc, #4	; (adr r2, 800e26c <USBD_LL_PrepareReceive+0x38>)
 800e268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e26c:	0800e27d 	.word	0x0800e27d
 800e270:	0800e283 	.word	0x0800e283
 800e274:	0800e289 	.word	0x0800e289
 800e278:	0800e28f 	.word	0x0800e28f
    case HAL_OK :
      usb_status = USBD_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	75fb      	strb	r3, [r7, #23]
    break;
 800e280:	e00b      	b.n	800e29a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e282:	2303      	movs	r3, #3
 800e284:	75fb      	strb	r3, [r7, #23]
    break;
 800e286:	e008      	b.n	800e29a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e288:	2301      	movs	r3, #1
 800e28a:	75fb      	strb	r3, [r7, #23]
    break;
 800e28c:	e005      	b.n	800e29a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e28e:	2303      	movs	r3, #3
 800e290:	75fb      	strb	r3, [r7, #23]
    break;
 800e292:	e002      	b.n	800e29a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800e294:	2303      	movs	r3, #3
 800e296:	75fb      	strb	r3, [r7, #23]
    break;
 800e298:	bf00      	nop
  }
  return usb_status;
 800e29a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2b6:	78fa      	ldrb	r2, [r7, #3]
 800e2b8:	4611      	mov	r1, r2
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7f4 fd25 	bl	8002d0a <HAL_PCD_EP_GetRxCount>
 800e2c0:	4603      	mov	r3, r0
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
	...

0800e2cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e2d4:	4b03      	ldr	r3, [pc, #12]	; (800e2e4 <USBD_static_malloc+0x18>)
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	370c      	adds	r7, #12
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	20001fec 	.word	0x20001fec

0800e2e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]

}
 800e2f0:	bf00      	nop
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e300:	f7f2 fa3c 	bl	800077c <SystemClock_Config>
}
 800e304:	bf00      	nop
 800e306:	bd80      	pop	{r7, pc}

0800e308 <__libc_init_array>:
 800e308:	b570      	push	{r4, r5, r6, lr}
 800e30a:	4d0d      	ldr	r5, [pc, #52]	; (800e340 <__libc_init_array+0x38>)
 800e30c:	4c0d      	ldr	r4, [pc, #52]	; (800e344 <__libc_init_array+0x3c>)
 800e30e:	1b64      	subs	r4, r4, r5
 800e310:	10a4      	asrs	r4, r4, #2
 800e312:	2600      	movs	r6, #0
 800e314:	42a6      	cmp	r6, r4
 800e316:	d109      	bne.n	800e32c <__libc_init_array+0x24>
 800e318:	4d0b      	ldr	r5, [pc, #44]	; (800e348 <__libc_init_array+0x40>)
 800e31a:	4c0c      	ldr	r4, [pc, #48]	; (800e34c <__libc_init_array+0x44>)
 800e31c:	f000 ffec 	bl	800f2f8 <_init>
 800e320:	1b64      	subs	r4, r4, r5
 800e322:	10a4      	asrs	r4, r4, #2
 800e324:	2600      	movs	r6, #0
 800e326:	42a6      	cmp	r6, r4
 800e328:	d105      	bne.n	800e336 <__libc_init_array+0x2e>
 800e32a:	bd70      	pop	{r4, r5, r6, pc}
 800e32c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e330:	4798      	blx	r3
 800e332:	3601      	adds	r6, #1
 800e334:	e7ee      	b.n	800e314 <__libc_init_array+0xc>
 800e336:	f855 3b04 	ldr.w	r3, [r5], #4
 800e33a:	4798      	blx	r3
 800e33c:	3601      	adds	r6, #1
 800e33e:	e7f2      	b.n	800e326 <__libc_init_array+0x1e>
 800e340:	0800f4d0 	.word	0x0800f4d0
 800e344:	0800f4d0 	.word	0x0800f4d0
 800e348:	0800f4d0 	.word	0x0800f4d0
 800e34c:	0800f4d4 	.word	0x0800f4d4

0800e350 <memset>:
 800e350:	4402      	add	r2, r0
 800e352:	4603      	mov	r3, r0
 800e354:	4293      	cmp	r3, r2
 800e356:	d100      	bne.n	800e35a <memset+0xa>
 800e358:	4770      	bx	lr
 800e35a:	f803 1b01 	strb.w	r1, [r3], #1
 800e35e:	e7f9      	b.n	800e354 <memset+0x4>

0800e360 <iprintf>:
 800e360:	b40f      	push	{r0, r1, r2, r3}
 800e362:	4b0a      	ldr	r3, [pc, #40]	; (800e38c <iprintf+0x2c>)
 800e364:	b513      	push	{r0, r1, r4, lr}
 800e366:	681c      	ldr	r4, [r3, #0]
 800e368:	b124      	cbz	r4, 800e374 <iprintf+0x14>
 800e36a:	69a3      	ldr	r3, [r4, #24]
 800e36c:	b913      	cbnz	r3, 800e374 <iprintf+0x14>
 800e36e:	4620      	mov	r0, r4
 800e370:	f000 f866 	bl	800e440 <__sinit>
 800e374:	ab05      	add	r3, sp, #20
 800e376:	9a04      	ldr	r2, [sp, #16]
 800e378:	68a1      	ldr	r1, [r4, #8]
 800e37a:	9301      	str	r3, [sp, #4]
 800e37c:	4620      	mov	r0, r4
 800e37e:	f000 f9bd 	bl	800e6fc <_vfiprintf_r>
 800e382:	b002      	add	sp, #8
 800e384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e388:	b004      	add	sp, #16
 800e38a:	4770      	bx	lr
 800e38c:	20000180 	.word	0x20000180

0800e390 <std>:
 800e390:	2300      	movs	r3, #0
 800e392:	b510      	push	{r4, lr}
 800e394:	4604      	mov	r4, r0
 800e396:	e9c0 3300 	strd	r3, r3, [r0]
 800e39a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e39e:	6083      	str	r3, [r0, #8]
 800e3a0:	8181      	strh	r1, [r0, #12]
 800e3a2:	6643      	str	r3, [r0, #100]	; 0x64
 800e3a4:	81c2      	strh	r2, [r0, #14]
 800e3a6:	6183      	str	r3, [r0, #24]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	2208      	movs	r2, #8
 800e3ac:	305c      	adds	r0, #92	; 0x5c
 800e3ae:	f7ff ffcf 	bl	800e350 <memset>
 800e3b2:	4b05      	ldr	r3, [pc, #20]	; (800e3c8 <std+0x38>)
 800e3b4:	6263      	str	r3, [r4, #36]	; 0x24
 800e3b6:	4b05      	ldr	r3, [pc, #20]	; (800e3cc <std+0x3c>)
 800e3b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3ba:	4b05      	ldr	r3, [pc, #20]	; (800e3d0 <std+0x40>)
 800e3bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3be:	4b05      	ldr	r3, [pc, #20]	; (800e3d4 <std+0x44>)
 800e3c0:	6224      	str	r4, [r4, #32]
 800e3c2:	6323      	str	r3, [r4, #48]	; 0x30
 800e3c4:	bd10      	pop	{r4, pc}
 800e3c6:	bf00      	nop
 800e3c8:	0800eca5 	.word	0x0800eca5
 800e3cc:	0800ecc7 	.word	0x0800ecc7
 800e3d0:	0800ecff 	.word	0x0800ecff
 800e3d4:	0800ed23 	.word	0x0800ed23

0800e3d8 <_cleanup_r>:
 800e3d8:	4901      	ldr	r1, [pc, #4]	; (800e3e0 <_cleanup_r+0x8>)
 800e3da:	f000 b8af 	b.w	800e53c <_fwalk_reent>
 800e3de:	bf00      	nop
 800e3e0:	0800effd 	.word	0x0800effd

0800e3e4 <__sfmoreglue>:
 800e3e4:	b570      	push	{r4, r5, r6, lr}
 800e3e6:	2268      	movs	r2, #104	; 0x68
 800e3e8:	1e4d      	subs	r5, r1, #1
 800e3ea:	4355      	muls	r5, r2
 800e3ec:	460e      	mov	r6, r1
 800e3ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e3f2:	f000 f8e5 	bl	800e5c0 <_malloc_r>
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	b140      	cbz	r0, 800e40c <__sfmoreglue+0x28>
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	e9c0 1600 	strd	r1, r6, [r0]
 800e400:	300c      	adds	r0, #12
 800e402:	60a0      	str	r0, [r4, #8]
 800e404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e408:	f7ff ffa2 	bl	800e350 <memset>
 800e40c:	4620      	mov	r0, r4
 800e40e:	bd70      	pop	{r4, r5, r6, pc}

0800e410 <__sfp_lock_acquire>:
 800e410:	4801      	ldr	r0, [pc, #4]	; (800e418 <__sfp_lock_acquire+0x8>)
 800e412:	f000 b8b3 	b.w	800e57c <__retarget_lock_acquire_recursive>
 800e416:	bf00      	nop
 800e418:	2000220d 	.word	0x2000220d

0800e41c <__sfp_lock_release>:
 800e41c:	4801      	ldr	r0, [pc, #4]	; (800e424 <__sfp_lock_release+0x8>)
 800e41e:	f000 b8ae 	b.w	800e57e <__retarget_lock_release_recursive>
 800e422:	bf00      	nop
 800e424:	2000220d 	.word	0x2000220d

0800e428 <__sinit_lock_acquire>:
 800e428:	4801      	ldr	r0, [pc, #4]	; (800e430 <__sinit_lock_acquire+0x8>)
 800e42a:	f000 b8a7 	b.w	800e57c <__retarget_lock_acquire_recursive>
 800e42e:	bf00      	nop
 800e430:	2000220e 	.word	0x2000220e

0800e434 <__sinit_lock_release>:
 800e434:	4801      	ldr	r0, [pc, #4]	; (800e43c <__sinit_lock_release+0x8>)
 800e436:	f000 b8a2 	b.w	800e57e <__retarget_lock_release_recursive>
 800e43a:	bf00      	nop
 800e43c:	2000220e 	.word	0x2000220e

0800e440 <__sinit>:
 800e440:	b510      	push	{r4, lr}
 800e442:	4604      	mov	r4, r0
 800e444:	f7ff fff0 	bl	800e428 <__sinit_lock_acquire>
 800e448:	69a3      	ldr	r3, [r4, #24]
 800e44a:	b11b      	cbz	r3, 800e454 <__sinit+0x14>
 800e44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e450:	f7ff bff0 	b.w	800e434 <__sinit_lock_release>
 800e454:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e458:	6523      	str	r3, [r4, #80]	; 0x50
 800e45a:	4b13      	ldr	r3, [pc, #76]	; (800e4a8 <__sinit+0x68>)
 800e45c:	4a13      	ldr	r2, [pc, #76]	; (800e4ac <__sinit+0x6c>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	62a2      	str	r2, [r4, #40]	; 0x28
 800e462:	42a3      	cmp	r3, r4
 800e464:	bf04      	itt	eq
 800e466:	2301      	moveq	r3, #1
 800e468:	61a3      	streq	r3, [r4, #24]
 800e46a:	4620      	mov	r0, r4
 800e46c:	f000 f820 	bl	800e4b0 <__sfp>
 800e470:	6060      	str	r0, [r4, #4]
 800e472:	4620      	mov	r0, r4
 800e474:	f000 f81c 	bl	800e4b0 <__sfp>
 800e478:	60a0      	str	r0, [r4, #8]
 800e47a:	4620      	mov	r0, r4
 800e47c:	f000 f818 	bl	800e4b0 <__sfp>
 800e480:	2200      	movs	r2, #0
 800e482:	60e0      	str	r0, [r4, #12]
 800e484:	2104      	movs	r1, #4
 800e486:	6860      	ldr	r0, [r4, #4]
 800e488:	f7ff ff82 	bl	800e390 <std>
 800e48c:	68a0      	ldr	r0, [r4, #8]
 800e48e:	2201      	movs	r2, #1
 800e490:	2109      	movs	r1, #9
 800e492:	f7ff ff7d 	bl	800e390 <std>
 800e496:	68e0      	ldr	r0, [r4, #12]
 800e498:	2202      	movs	r2, #2
 800e49a:	2112      	movs	r1, #18
 800e49c:	f7ff ff78 	bl	800e390 <std>
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	61a3      	str	r3, [r4, #24]
 800e4a4:	e7d2      	b.n	800e44c <__sinit+0xc>
 800e4a6:	bf00      	nop
 800e4a8:	0800f430 	.word	0x0800f430
 800e4ac:	0800e3d9 	.word	0x0800e3d9

0800e4b0 <__sfp>:
 800e4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b2:	4607      	mov	r7, r0
 800e4b4:	f7ff ffac 	bl	800e410 <__sfp_lock_acquire>
 800e4b8:	4b1e      	ldr	r3, [pc, #120]	; (800e534 <__sfp+0x84>)
 800e4ba:	681e      	ldr	r6, [r3, #0]
 800e4bc:	69b3      	ldr	r3, [r6, #24]
 800e4be:	b913      	cbnz	r3, 800e4c6 <__sfp+0x16>
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	f7ff ffbd 	bl	800e440 <__sinit>
 800e4c6:	3648      	adds	r6, #72	; 0x48
 800e4c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	d503      	bpl.n	800e4d8 <__sfp+0x28>
 800e4d0:	6833      	ldr	r3, [r6, #0]
 800e4d2:	b30b      	cbz	r3, 800e518 <__sfp+0x68>
 800e4d4:	6836      	ldr	r6, [r6, #0]
 800e4d6:	e7f7      	b.n	800e4c8 <__sfp+0x18>
 800e4d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e4dc:	b9d5      	cbnz	r5, 800e514 <__sfp+0x64>
 800e4de:	4b16      	ldr	r3, [pc, #88]	; (800e538 <__sfp+0x88>)
 800e4e0:	60e3      	str	r3, [r4, #12]
 800e4e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4e6:	6665      	str	r5, [r4, #100]	; 0x64
 800e4e8:	f000 f847 	bl	800e57a <__retarget_lock_init_recursive>
 800e4ec:	f7ff ff96 	bl	800e41c <__sfp_lock_release>
 800e4f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e4f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e4f8:	6025      	str	r5, [r4, #0]
 800e4fa:	61a5      	str	r5, [r4, #24]
 800e4fc:	2208      	movs	r2, #8
 800e4fe:	4629      	mov	r1, r5
 800e500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e504:	f7ff ff24 	bl	800e350 <memset>
 800e508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e50c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e510:	4620      	mov	r0, r4
 800e512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e514:	3468      	adds	r4, #104	; 0x68
 800e516:	e7d9      	b.n	800e4cc <__sfp+0x1c>
 800e518:	2104      	movs	r1, #4
 800e51a:	4638      	mov	r0, r7
 800e51c:	f7ff ff62 	bl	800e3e4 <__sfmoreglue>
 800e520:	4604      	mov	r4, r0
 800e522:	6030      	str	r0, [r6, #0]
 800e524:	2800      	cmp	r0, #0
 800e526:	d1d5      	bne.n	800e4d4 <__sfp+0x24>
 800e528:	f7ff ff78 	bl	800e41c <__sfp_lock_release>
 800e52c:	230c      	movs	r3, #12
 800e52e:	603b      	str	r3, [r7, #0]
 800e530:	e7ee      	b.n	800e510 <__sfp+0x60>
 800e532:	bf00      	nop
 800e534:	0800f430 	.word	0x0800f430
 800e538:	ffff0001 	.word	0xffff0001

0800e53c <_fwalk_reent>:
 800e53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e540:	4606      	mov	r6, r0
 800e542:	4688      	mov	r8, r1
 800e544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e548:	2700      	movs	r7, #0
 800e54a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e54e:	f1b9 0901 	subs.w	r9, r9, #1
 800e552:	d505      	bpl.n	800e560 <_fwalk_reent+0x24>
 800e554:	6824      	ldr	r4, [r4, #0]
 800e556:	2c00      	cmp	r4, #0
 800e558:	d1f7      	bne.n	800e54a <_fwalk_reent+0xe>
 800e55a:	4638      	mov	r0, r7
 800e55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e560:	89ab      	ldrh	r3, [r5, #12]
 800e562:	2b01      	cmp	r3, #1
 800e564:	d907      	bls.n	800e576 <_fwalk_reent+0x3a>
 800e566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e56a:	3301      	adds	r3, #1
 800e56c:	d003      	beq.n	800e576 <_fwalk_reent+0x3a>
 800e56e:	4629      	mov	r1, r5
 800e570:	4630      	mov	r0, r6
 800e572:	47c0      	blx	r8
 800e574:	4307      	orrs	r7, r0
 800e576:	3568      	adds	r5, #104	; 0x68
 800e578:	e7e9      	b.n	800e54e <_fwalk_reent+0x12>

0800e57a <__retarget_lock_init_recursive>:
 800e57a:	4770      	bx	lr

0800e57c <__retarget_lock_acquire_recursive>:
 800e57c:	4770      	bx	lr

0800e57e <__retarget_lock_release_recursive>:
 800e57e:	4770      	bx	lr

0800e580 <sbrk_aligned>:
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	4e0e      	ldr	r6, [pc, #56]	; (800e5bc <sbrk_aligned+0x3c>)
 800e584:	460c      	mov	r4, r1
 800e586:	6831      	ldr	r1, [r6, #0]
 800e588:	4605      	mov	r5, r0
 800e58a:	b911      	cbnz	r1, 800e592 <sbrk_aligned+0x12>
 800e58c:	f000 fb7a 	bl	800ec84 <_sbrk_r>
 800e590:	6030      	str	r0, [r6, #0]
 800e592:	4621      	mov	r1, r4
 800e594:	4628      	mov	r0, r5
 800e596:	f000 fb75 	bl	800ec84 <_sbrk_r>
 800e59a:	1c43      	adds	r3, r0, #1
 800e59c:	d00a      	beq.n	800e5b4 <sbrk_aligned+0x34>
 800e59e:	1cc4      	adds	r4, r0, #3
 800e5a0:	f024 0403 	bic.w	r4, r4, #3
 800e5a4:	42a0      	cmp	r0, r4
 800e5a6:	d007      	beq.n	800e5b8 <sbrk_aligned+0x38>
 800e5a8:	1a21      	subs	r1, r4, r0
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	f000 fb6a 	bl	800ec84 <_sbrk_r>
 800e5b0:	3001      	adds	r0, #1
 800e5b2:	d101      	bne.n	800e5b8 <sbrk_aligned+0x38>
 800e5b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	bd70      	pop	{r4, r5, r6, pc}
 800e5bc:	20002214 	.word	0x20002214

0800e5c0 <_malloc_r>:
 800e5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c4:	1ccd      	adds	r5, r1, #3
 800e5c6:	f025 0503 	bic.w	r5, r5, #3
 800e5ca:	3508      	adds	r5, #8
 800e5cc:	2d0c      	cmp	r5, #12
 800e5ce:	bf38      	it	cc
 800e5d0:	250c      	movcc	r5, #12
 800e5d2:	2d00      	cmp	r5, #0
 800e5d4:	4607      	mov	r7, r0
 800e5d6:	db01      	blt.n	800e5dc <_malloc_r+0x1c>
 800e5d8:	42a9      	cmp	r1, r5
 800e5da:	d905      	bls.n	800e5e8 <_malloc_r+0x28>
 800e5dc:	230c      	movs	r3, #12
 800e5de:	603b      	str	r3, [r7, #0]
 800e5e0:	2600      	movs	r6, #0
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e8:	4e2e      	ldr	r6, [pc, #184]	; (800e6a4 <_malloc_r+0xe4>)
 800e5ea:	f000 fdbb 	bl	800f164 <__malloc_lock>
 800e5ee:	6833      	ldr	r3, [r6, #0]
 800e5f0:	461c      	mov	r4, r3
 800e5f2:	bb34      	cbnz	r4, 800e642 <_malloc_r+0x82>
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	f7ff ffc2 	bl	800e580 <sbrk_aligned>
 800e5fc:	1c43      	adds	r3, r0, #1
 800e5fe:	4604      	mov	r4, r0
 800e600:	d14d      	bne.n	800e69e <_malloc_r+0xde>
 800e602:	6834      	ldr	r4, [r6, #0]
 800e604:	4626      	mov	r6, r4
 800e606:	2e00      	cmp	r6, #0
 800e608:	d140      	bne.n	800e68c <_malloc_r+0xcc>
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	4631      	mov	r1, r6
 800e60e:	4638      	mov	r0, r7
 800e610:	eb04 0803 	add.w	r8, r4, r3
 800e614:	f000 fb36 	bl	800ec84 <_sbrk_r>
 800e618:	4580      	cmp	r8, r0
 800e61a:	d13a      	bne.n	800e692 <_malloc_r+0xd2>
 800e61c:	6821      	ldr	r1, [r4, #0]
 800e61e:	3503      	adds	r5, #3
 800e620:	1a6d      	subs	r5, r5, r1
 800e622:	f025 0503 	bic.w	r5, r5, #3
 800e626:	3508      	adds	r5, #8
 800e628:	2d0c      	cmp	r5, #12
 800e62a:	bf38      	it	cc
 800e62c:	250c      	movcc	r5, #12
 800e62e:	4629      	mov	r1, r5
 800e630:	4638      	mov	r0, r7
 800e632:	f7ff ffa5 	bl	800e580 <sbrk_aligned>
 800e636:	3001      	adds	r0, #1
 800e638:	d02b      	beq.n	800e692 <_malloc_r+0xd2>
 800e63a:	6823      	ldr	r3, [r4, #0]
 800e63c:	442b      	add	r3, r5
 800e63e:	6023      	str	r3, [r4, #0]
 800e640:	e00e      	b.n	800e660 <_malloc_r+0xa0>
 800e642:	6822      	ldr	r2, [r4, #0]
 800e644:	1b52      	subs	r2, r2, r5
 800e646:	d41e      	bmi.n	800e686 <_malloc_r+0xc6>
 800e648:	2a0b      	cmp	r2, #11
 800e64a:	d916      	bls.n	800e67a <_malloc_r+0xba>
 800e64c:	1961      	adds	r1, r4, r5
 800e64e:	42a3      	cmp	r3, r4
 800e650:	6025      	str	r5, [r4, #0]
 800e652:	bf18      	it	ne
 800e654:	6059      	strne	r1, [r3, #4]
 800e656:	6863      	ldr	r3, [r4, #4]
 800e658:	bf08      	it	eq
 800e65a:	6031      	streq	r1, [r6, #0]
 800e65c:	5162      	str	r2, [r4, r5]
 800e65e:	604b      	str	r3, [r1, #4]
 800e660:	4638      	mov	r0, r7
 800e662:	f104 060b 	add.w	r6, r4, #11
 800e666:	f000 fd83 	bl	800f170 <__malloc_unlock>
 800e66a:	f026 0607 	bic.w	r6, r6, #7
 800e66e:	1d23      	adds	r3, r4, #4
 800e670:	1af2      	subs	r2, r6, r3
 800e672:	d0b6      	beq.n	800e5e2 <_malloc_r+0x22>
 800e674:	1b9b      	subs	r3, r3, r6
 800e676:	50a3      	str	r3, [r4, r2]
 800e678:	e7b3      	b.n	800e5e2 <_malloc_r+0x22>
 800e67a:	6862      	ldr	r2, [r4, #4]
 800e67c:	42a3      	cmp	r3, r4
 800e67e:	bf0c      	ite	eq
 800e680:	6032      	streq	r2, [r6, #0]
 800e682:	605a      	strne	r2, [r3, #4]
 800e684:	e7ec      	b.n	800e660 <_malloc_r+0xa0>
 800e686:	4623      	mov	r3, r4
 800e688:	6864      	ldr	r4, [r4, #4]
 800e68a:	e7b2      	b.n	800e5f2 <_malloc_r+0x32>
 800e68c:	4634      	mov	r4, r6
 800e68e:	6876      	ldr	r6, [r6, #4]
 800e690:	e7b9      	b.n	800e606 <_malloc_r+0x46>
 800e692:	230c      	movs	r3, #12
 800e694:	603b      	str	r3, [r7, #0]
 800e696:	4638      	mov	r0, r7
 800e698:	f000 fd6a 	bl	800f170 <__malloc_unlock>
 800e69c:	e7a1      	b.n	800e5e2 <_malloc_r+0x22>
 800e69e:	6025      	str	r5, [r4, #0]
 800e6a0:	e7de      	b.n	800e660 <_malloc_r+0xa0>
 800e6a2:	bf00      	nop
 800e6a4:	20002210 	.word	0x20002210

0800e6a8 <__sfputc_r>:
 800e6a8:	6893      	ldr	r3, [r2, #8]
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	b410      	push	{r4}
 800e6b0:	6093      	str	r3, [r2, #8]
 800e6b2:	da08      	bge.n	800e6c6 <__sfputc_r+0x1e>
 800e6b4:	6994      	ldr	r4, [r2, #24]
 800e6b6:	42a3      	cmp	r3, r4
 800e6b8:	db01      	blt.n	800e6be <__sfputc_r+0x16>
 800e6ba:	290a      	cmp	r1, #10
 800e6bc:	d103      	bne.n	800e6c6 <__sfputc_r+0x1e>
 800e6be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6c2:	f000 bb33 	b.w	800ed2c <__swbuf_r>
 800e6c6:	6813      	ldr	r3, [r2, #0]
 800e6c8:	1c58      	adds	r0, r3, #1
 800e6ca:	6010      	str	r0, [r2, #0]
 800e6cc:	7019      	strb	r1, [r3, #0]
 800e6ce:	4608      	mov	r0, r1
 800e6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6d4:	4770      	bx	lr

0800e6d6 <__sfputs_r>:
 800e6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d8:	4606      	mov	r6, r0
 800e6da:	460f      	mov	r7, r1
 800e6dc:	4614      	mov	r4, r2
 800e6de:	18d5      	adds	r5, r2, r3
 800e6e0:	42ac      	cmp	r4, r5
 800e6e2:	d101      	bne.n	800e6e8 <__sfputs_r+0x12>
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	e007      	b.n	800e6f8 <__sfputs_r+0x22>
 800e6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6ec:	463a      	mov	r2, r7
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f7ff ffda 	bl	800e6a8 <__sfputc_r>
 800e6f4:	1c43      	adds	r3, r0, #1
 800e6f6:	d1f3      	bne.n	800e6e0 <__sfputs_r+0xa>
 800e6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6fc <_vfiprintf_r>:
 800e6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e700:	460d      	mov	r5, r1
 800e702:	b09d      	sub	sp, #116	; 0x74
 800e704:	4614      	mov	r4, r2
 800e706:	4698      	mov	r8, r3
 800e708:	4606      	mov	r6, r0
 800e70a:	b118      	cbz	r0, 800e714 <_vfiprintf_r+0x18>
 800e70c:	6983      	ldr	r3, [r0, #24]
 800e70e:	b90b      	cbnz	r3, 800e714 <_vfiprintf_r+0x18>
 800e710:	f7ff fe96 	bl	800e440 <__sinit>
 800e714:	4b89      	ldr	r3, [pc, #548]	; (800e93c <_vfiprintf_r+0x240>)
 800e716:	429d      	cmp	r5, r3
 800e718:	d11b      	bne.n	800e752 <_vfiprintf_r+0x56>
 800e71a:	6875      	ldr	r5, [r6, #4]
 800e71c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e71e:	07d9      	lsls	r1, r3, #31
 800e720:	d405      	bmi.n	800e72e <_vfiprintf_r+0x32>
 800e722:	89ab      	ldrh	r3, [r5, #12]
 800e724:	059a      	lsls	r2, r3, #22
 800e726:	d402      	bmi.n	800e72e <_vfiprintf_r+0x32>
 800e728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e72a:	f7ff ff27 	bl	800e57c <__retarget_lock_acquire_recursive>
 800e72e:	89ab      	ldrh	r3, [r5, #12]
 800e730:	071b      	lsls	r3, r3, #28
 800e732:	d501      	bpl.n	800e738 <_vfiprintf_r+0x3c>
 800e734:	692b      	ldr	r3, [r5, #16]
 800e736:	b9eb      	cbnz	r3, 800e774 <_vfiprintf_r+0x78>
 800e738:	4629      	mov	r1, r5
 800e73a:	4630      	mov	r0, r6
 800e73c:	f000 fb5a 	bl	800edf4 <__swsetup_r>
 800e740:	b1c0      	cbz	r0, 800e774 <_vfiprintf_r+0x78>
 800e742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e744:	07dc      	lsls	r4, r3, #31
 800e746:	d50e      	bpl.n	800e766 <_vfiprintf_r+0x6a>
 800e748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e74c:	b01d      	add	sp, #116	; 0x74
 800e74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e752:	4b7b      	ldr	r3, [pc, #492]	; (800e940 <_vfiprintf_r+0x244>)
 800e754:	429d      	cmp	r5, r3
 800e756:	d101      	bne.n	800e75c <_vfiprintf_r+0x60>
 800e758:	68b5      	ldr	r5, [r6, #8]
 800e75a:	e7df      	b.n	800e71c <_vfiprintf_r+0x20>
 800e75c:	4b79      	ldr	r3, [pc, #484]	; (800e944 <_vfiprintf_r+0x248>)
 800e75e:	429d      	cmp	r5, r3
 800e760:	bf08      	it	eq
 800e762:	68f5      	ldreq	r5, [r6, #12]
 800e764:	e7da      	b.n	800e71c <_vfiprintf_r+0x20>
 800e766:	89ab      	ldrh	r3, [r5, #12]
 800e768:	0598      	lsls	r0, r3, #22
 800e76a:	d4ed      	bmi.n	800e748 <_vfiprintf_r+0x4c>
 800e76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e76e:	f7ff ff06 	bl	800e57e <__retarget_lock_release_recursive>
 800e772:	e7e9      	b.n	800e748 <_vfiprintf_r+0x4c>
 800e774:	2300      	movs	r3, #0
 800e776:	9309      	str	r3, [sp, #36]	; 0x24
 800e778:	2320      	movs	r3, #32
 800e77a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e77e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e782:	2330      	movs	r3, #48	; 0x30
 800e784:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e948 <_vfiprintf_r+0x24c>
 800e788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e78c:	f04f 0901 	mov.w	r9, #1
 800e790:	4623      	mov	r3, r4
 800e792:	469a      	mov	sl, r3
 800e794:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e798:	b10a      	cbz	r2, 800e79e <_vfiprintf_r+0xa2>
 800e79a:	2a25      	cmp	r2, #37	; 0x25
 800e79c:	d1f9      	bne.n	800e792 <_vfiprintf_r+0x96>
 800e79e:	ebba 0b04 	subs.w	fp, sl, r4
 800e7a2:	d00b      	beq.n	800e7bc <_vfiprintf_r+0xc0>
 800e7a4:	465b      	mov	r3, fp
 800e7a6:	4622      	mov	r2, r4
 800e7a8:	4629      	mov	r1, r5
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	f7ff ff93 	bl	800e6d6 <__sfputs_r>
 800e7b0:	3001      	adds	r0, #1
 800e7b2:	f000 80aa 	beq.w	800e90a <_vfiprintf_r+0x20e>
 800e7b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7b8:	445a      	add	r2, fp
 800e7ba:	9209      	str	r2, [sp, #36]	; 0x24
 800e7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f000 80a2 	beq.w	800e90a <_vfiprintf_r+0x20e>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7d0:	f10a 0a01 	add.w	sl, sl, #1
 800e7d4:	9304      	str	r3, [sp, #16]
 800e7d6:	9307      	str	r3, [sp, #28]
 800e7d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7dc:	931a      	str	r3, [sp, #104]	; 0x68
 800e7de:	4654      	mov	r4, sl
 800e7e0:	2205      	movs	r2, #5
 800e7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e6:	4858      	ldr	r0, [pc, #352]	; (800e948 <_vfiprintf_r+0x24c>)
 800e7e8:	f7f1 fd0a 	bl	8000200 <memchr>
 800e7ec:	9a04      	ldr	r2, [sp, #16]
 800e7ee:	b9d8      	cbnz	r0, 800e828 <_vfiprintf_r+0x12c>
 800e7f0:	06d1      	lsls	r1, r2, #27
 800e7f2:	bf44      	itt	mi
 800e7f4:	2320      	movmi	r3, #32
 800e7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7fa:	0713      	lsls	r3, r2, #28
 800e7fc:	bf44      	itt	mi
 800e7fe:	232b      	movmi	r3, #43	; 0x2b
 800e800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e804:	f89a 3000 	ldrb.w	r3, [sl]
 800e808:	2b2a      	cmp	r3, #42	; 0x2a
 800e80a:	d015      	beq.n	800e838 <_vfiprintf_r+0x13c>
 800e80c:	9a07      	ldr	r2, [sp, #28]
 800e80e:	4654      	mov	r4, sl
 800e810:	2000      	movs	r0, #0
 800e812:	f04f 0c0a 	mov.w	ip, #10
 800e816:	4621      	mov	r1, r4
 800e818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e81c:	3b30      	subs	r3, #48	; 0x30
 800e81e:	2b09      	cmp	r3, #9
 800e820:	d94e      	bls.n	800e8c0 <_vfiprintf_r+0x1c4>
 800e822:	b1b0      	cbz	r0, 800e852 <_vfiprintf_r+0x156>
 800e824:	9207      	str	r2, [sp, #28]
 800e826:	e014      	b.n	800e852 <_vfiprintf_r+0x156>
 800e828:	eba0 0308 	sub.w	r3, r0, r8
 800e82c:	fa09 f303 	lsl.w	r3, r9, r3
 800e830:	4313      	orrs	r3, r2
 800e832:	9304      	str	r3, [sp, #16]
 800e834:	46a2      	mov	sl, r4
 800e836:	e7d2      	b.n	800e7de <_vfiprintf_r+0xe2>
 800e838:	9b03      	ldr	r3, [sp, #12]
 800e83a:	1d19      	adds	r1, r3, #4
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	9103      	str	r1, [sp, #12]
 800e840:	2b00      	cmp	r3, #0
 800e842:	bfbb      	ittet	lt
 800e844:	425b      	neglt	r3, r3
 800e846:	f042 0202 	orrlt.w	r2, r2, #2
 800e84a:	9307      	strge	r3, [sp, #28]
 800e84c:	9307      	strlt	r3, [sp, #28]
 800e84e:	bfb8      	it	lt
 800e850:	9204      	strlt	r2, [sp, #16]
 800e852:	7823      	ldrb	r3, [r4, #0]
 800e854:	2b2e      	cmp	r3, #46	; 0x2e
 800e856:	d10c      	bne.n	800e872 <_vfiprintf_r+0x176>
 800e858:	7863      	ldrb	r3, [r4, #1]
 800e85a:	2b2a      	cmp	r3, #42	; 0x2a
 800e85c:	d135      	bne.n	800e8ca <_vfiprintf_r+0x1ce>
 800e85e:	9b03      	ldr	r3, [sp, #12]
 800e860:	1d1a      	adds	r2, r3, #4
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	9203      	str	r2, [sp, #12]
 800e866:	2b00      	cmp	r3, #0
 800e868:	bfb8      	it	lt
 800e86a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e86e:	3402      	adds	r4, #2
 800e870:	9305      	str	r3, [sp, #20]
 800e872:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e958 <_vfiprintf_r+0x25c>
 800e876:	7821      	ldrb	r1, [r4, #0]
 800e878:	2203      	movs	r2, #3
 800e87a:	4650      	mov	r0, sl
 800e87c:	f7f1 fcc0 	bl	8000200 <memchr>
 800e880:	b140      	cbz	r0, 800e894 <_vfiprintf_r+0x198>
 800e882:	2340      	movs	r3, #64	; 0x40
 800e884:	eba0 000a 	sub.w	r0, r0, sl
 800e888:	fa03 f000 	lsl.w	r0, r3, r0
 800e88c:	9b04      	ldr	r3, [sp, #16]
 800e88e:	4303      	orrs	r3, r0
 800e890:	3401      	adds	r4, #1
 800e892:	9304      	str	r3, [sp, #16]
 800e894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e898:	482c      	ldr	r0, [pc, #176]	; (800e94c <_vfiprintf_r+0x250>)
 800e89a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e89e:	2206      	movs	r2, #6
 800e8a0:	f7f1 fcae 	bl	8000200 <memchr>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	d03f      	beq.n	800e928 <_vfiprintf_r+0x22c>
 800e8a8:	4b29      	ldr	r3, [pc, #164]	; (800e950 <_vfiprintf_r+0x254>)
 800e8aa:	bb1b      	cbnz	r3, 800e8f4 <_vfiprintf_r+0x1f8>
 800e8ac:	9b03      	ldr	r3, [sp, #12]
 800e8ae:	3307      	adds	r3, #7
 800e8b0:	f023 0307 	bic.w	r3, r3, #7
 800e8b4:	3308      	adds	r3, #8
 800e8b6:	9303      	str	r3, [sp, #12]
 800e8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8ba:	443b      	add	r3, r7
 800e8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e8be:	e767      	b.n	800e790 <_vfiprintf_r+0x94>
 800e8c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	2001      	movs	r0, #1
 800e8c8:	e7a5      	b.n	800e816 <_vfiprintf_r+0x11a>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	3401      	adds	r4, #1
 800e8ce:	9305      	str	r3, [sp, #20]
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	f04f 0c0a 	mov.w	ip, #10
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8dc:	3a30      	subs	r2, #48	; 0x30
 800e8de:	2a09      	cmp	r2, #9
 800e8e0:	d903      	bls.n	800e8ea <_vfiprintf_r+0x1ee>
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d0c5      	beq.n	800e872 <_vfiprintf_r+0x176>
 800e8e6:	9105      	str	r1, [sp, #20]
 800e8e8:	e7c3      	b.n	800e872 <_vfiprintf_r+0x176>
 800e8ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	e7f0      	b.n	800e8d6 <_vfiprintf_r+0x1da>
 800e8f4:	ab03      	add	r3, sp, #12
 800e8f6:	9300      	str	r3, [sp, #0]
 800e8f8:	462a      	mov	r2, r5
 800e8fa:	4b16      	ldr	r3, [pc, #88]	; (800e954 <_vfiprintf_r+0x258>)
 800e8fc:	a904      	add	r1, sp, #16
 800e8fe:	4630      	mov	r0, r6
 800e900:	f3af 8000 	nop.w
 800e904:	4607      	mov	r7, r0
 800e906:	1c78      	adds	r0, r7, #1
 800e908:	d1d6      	bne.n	800e8b8 <_vfiprintf_r+0x1bc>
 800e90a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e90c:	07d9      	lsls	r1, r3, #31
 800e90e:	d405      	bmi.n	800e91c <_vfiprintf_r+0x220>
 800e910:	89ab      	ldrh	r3, [r5, #12]
 800e912:	059a      	lsls	r2, r3, #22
 800e914:	d402      	bmi.n	800e91c <_vfiprintf_r+0x220>
 800e916:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e918:	f7ff fe31 	bl	800e57e <__retarget_lock_release_recursive>
 800e91c:	89ab      	ldrh	r3, [r5, #12]
 800e91e:	065b      	lsls	r3, r3, #25
 800e920:	f53f af12 	bmi.w	800e748 <_vfiprintf_r+0x4c>
 800e924:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e926:	e711      	b.n	800e74c <_vfiprintf_r+0x50>
 800e928:	ab03      	add	r3, sp, #12
 800e92a:	9300      	str	r3, [sp, #0]
 800e92c:	462a      	mov	r2, r5
 800e92e:	4b09      	ldr	r3, [pc, #36]	; (800e954 <_vfiprintf_r+0x258>)
 800e930:	a904      	add	r1, sp, #16
 800e932:	4630      	mov	r0, r6
 800e934:	f000 f880 	bl	800ea38 <_printf_i>
 800e938:	e7e4      	b.n	800e904 <_vfiprintf_r+0x208>
 800e93a:	bf00      	nop
 800e93c:	0800f454 	.word	0x0800f454
 800e940:	0800f474 	.word	0x0800f474
 800e944:	0800f434 	.word	0x0800f434
 800e948:	0800f494 	.word	0x0800f494
 800e94c:	0800f49e 	.word	0x0800f49e
 800e950:	00000000 	.word	0x00000000
 800e954:	0800e6d7 	.word	0x0800e6d7
 800e958:	0800f49a 	.word	0x0800f49a

0800e95c <_printf_common>:
 800e95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e960:	4616      	mov	r6, r2
 800e962:	4699      	mov	r9, r3
 800e964:	688a      	ldr	r2, [r1, #8]
 800e966:	690b      	ldr	r3, [r1, #16]
 800e968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e96c:	4293      	cmp	r3, r2
 800e96e:	bfb8      	it	lt
 800e970:	4613      	movlt	r3, r2
 800e972:	6033      	str	r3, [r6, #0]
 800e974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e978:	4607      	mov	r7, r0
 800e97a:	460c      	mov	r4, r1
 800e97c:	b10a      	cbz	r2, 800e982 <_printf_common+0x26>
 800e97e:	3301      	adds	r3, #1
 800e980:	6033      	str	r3, [r6, #0]
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	0699      	lsls	r1, r3, #26
 800e986:	bf42      	ittt	mi
 800e988:	6833      	ldrmi	r3, [r6, #0]
 800e98a:	3302      	addmi	r3, #2
 800e98c:	6033      	strmi	r3, [r6, #0]
 800e98e:	6825      	ldr	r5, [r4, #0]
 800e990:	f015 0506 	ands.w	r5, r5, #6
 800e994:	d106      	bne.n	800e9a4 <_printf_common+0x48>
 800e996:	f104 0a19 	add.w	sl, r4, #25
 800e99a:	68e3      	ldr	r3, [r4, #12]
 800e99c:	6832      	ldr	r2, [r6, #0]
 800e99e:	1a9b      	subs	r3, r3, r2
 800e9a0:	42ab      	cmp	r3, r5
 800e9a2:	dc26      	bgt.n	800e9f2 <_printf_common+0x96>
 800e9a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e9a8:	1e13      	subs	r3, r2, #0
 800e9aa:	6822      	ldr	r2, [r4, #0]
 800e9ac:	bf18      	it	ne
 800e9ae:	2301      	movne	r3, #1
 800e9b0:	0692      	lsls	r2, r2, #26
 800e9b2:	d42b      	bmi.n	800ea0c <_printf_common+0xb0>
 800e9b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9b8:	4649      	mov	r1, r9
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	47c0      	blx	r8
 800e9be:	3001      	adds	r0, #1
 800e9c0:	d01e      	beq.n	800ea00 <_printf_common+0xa4>
 800e9c2:	6823      	ldr	r3, [r4, #0]
 800e9c4:	68e5      	ldr	r5, [r4, #12]
 800e9c6:	6832      	ldr	r2, [r6, #0]
 800e9c8:	f003 0306 	and.w	r3, r3, #6
 800e9cc:	2b04      	cmp	r3, #4
 800e9ce:	bf08      	it	eq
 800e9d0:	1aad      	subeq	r5, r5, r2
 800e9d2:	68a3      	ldr	r3, [r4, #8]
 800e9d4:	6922      	ldr	r2, [r4, #16]
 800e9d6:	bf0c      	ite	eq
 800e9d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9dc:	2500      	movne	r5, #0
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	bfc4      	itt	gt
 800e9e2:	1a9b      	subgt	r3, r3, r2
 800e9e4:	18ed      	addgt	r5, r5, r3
 800e9e6:	2600      	movs	r6, #0
 800e9e8:	341a      	adds	r4, #26
 800e9ea:	42b5      	cmp	r5, r6
 800e9ec:	d11a      	bne.n	800ea24 <_printf_common+0xc8>
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	e008      	b.n	800ea04 <_printf_common+0xa8>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	4652      	mov	r2, sl
 800e9f6:	4649      	mov	r1, r9
 800e9f8:	4638      	mov	r0, r7
 800e9fa:	47c0      	blx	r8
 800e9fc:	3001      	adds	r0, #1
 800e9fe:	d103      	bne.n	800ea08 <_printf_common+0xac>
 800ea00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea08:	3501      	adds	r5, #1
 800ea0a:	e7c6      	b.n	800e99a <_printf_common+0x3e>
 800ea0c:	18e1      	adds	r1, r4, r3
 800ea0e:	1c5a      	adds	r2, r3, #1
 800ea10:	2030      	movs	r0, #48	; 0x30
 800ea12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea16:	4422      	add	r2, r4
 800ea18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea20:	3302      	adds	r3, #2
 800ea22:	e7c7      	b.n	800e9b4 <_printf_common+0x58>
 800ea24:	2301      	movs	r3, #1
 800ea26:	4622      	mov	r2, r4
 800ea28:	4649      	mov	r1, r9
 800ea2a:	4638      	mov	r0, r7
 800ea2c:	47c0      	blx	r8
 800ea2e:	3001      	adds	r0, #1
 800ea30:	d0e6      	beq.n	800ea00 <_printf_common+0xa4>
 800ea32:	3601      	adds	r6, #1
 800ea34:	e7d9      	b.n	800e9ea <_printf_common+0x8e>
	...

0800ea38 <_printf_i>:
 800ea38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea3c:	7e0f      	ldrb	r7, [r1, #24]
 800ea3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea40:	2f78      	cmp	r7, #120	; 0x78
 800ea42:	4691      	mov	r9, r2
 800ea44:	4680      	mov	r8, r0
 800ea46:	460c      	mov	r4, r1
 800ea48:	469a      	mov	sl, r3
 800ea4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ea4e:	d807      	bhi.n	800ea60 <_printf_i+0x28>
 800ea50:	2f62      	cmp	r7, #98	; 0x62
 800ea52:	d80a      	bhi.n	800ea6a <_printf_i+0x32>
 800ea54:	2f00      	cmp	r7, #0
 800ea56:	f000 80d8 	beq.w	800ec0a <_printf_i+0x1d2>
 800ea5a:	2f58      	cmp	r7, #88	; 0x58
 800ea5c:	f000 80a3 	beq.w	800eba6 <_printf_i+0x16e>
 800ea60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea68:	e03a      	b.n	800eae0 <_printf_i+0xa8>
 800ea6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea6e:	2b15      	cmp	r3, #21
 800ea70:	d8f6      	bhi.n	800ea60 <_printf_i+0x28>
 800ea72:	a101      	add	r1, pc, #4	; (adr r1, 800ea78 <_printf_i+0x40>)
 800ea74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea78:	0800ead1 	.word	0x0800ead1
 800ea7c:	0800eae5 	.word	0x0800eae5
 800ea80:	0800ea61 	.word	0x0800ea61
 800ea84:	0800ea61 	.word	0x0800ea61
 800ea88:	0800ea61 	.word	0x0800ea61
 800ea8c:	0800ea61 	.word	0x0800ea61
 800ea90:	0800eae5 	.word	0x0800eae5
 800ea94:	0800ea61 	.word	0x0800ea61
 800ea98:	0800ea61 	.word	0x0800ea61
 800ea9c:	0800ea61 	.word	0x0800ea61
 800eaa0:	0800ea61 	.word	0x0800ea61
 800eaa4:	0800ebf1 	.word	0x0800ebf1
 800eaa8:	0800eb15 	.word	0x0800eb15
 800eaac:	0800ebd3 	.word	0x0800ebd3
 800eab0:	0800ea61 	.word	0x0800ea61
 800eab4:	0800ea61 	.word	0x0800ea61
 800eab8:	0800ec13 	.word	0x0800ec13
 800eabc:	0800ea61 	.word	0x0800ea61
 800eac0:	0800eb15 	.word	0x0800eb15
 800eac4:	0800ea61 	.word	0x0800ea61
 800eac8:	0800ea61 	.word	0x0800ea61
 800eacc:	0800ebdb 	.word	0x0800ebdb
 800ead0:	682b      	ldr	r3, [r5, #0]
 800ead2:	1d1a      	adds	r2, r3, #4
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	602a      	str	r2, [r5, #0]
 800ead8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eadc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eae0:	2301      	movs	r3, #1
 800eae2:	e0a3      	b.n	800ec2c <_printf_i+0x1f4>
 800eae4:	6820      	ldr	r0, [r4, #0]
 800eae6:	6829      	ldr	r1, [r5, #0]
 800eae8:	0606      	lsls	r6, r0, #24
 800eaea:	f101 0304 	add.w	r3, r1, #4
 800eaee:	d50a      	bpl.n	800eb06 <_printf_i+0xce>
 800eaf0:	680e      	ldr	r6, [r1, #0]
 800eaf2:	602b      	str	r3, [r5, #0]
 800eaf4:	2e00      	cmp	r6, #0
 800eaf6:	da03      	bge.n	800eb00 <_printf_i+0xc8>
 800eaf8:	232d      	movs	r3, #45	; 0x2d
 800eafa:	4276      	negs	r6, r6
 800eafc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb00:	485e      	ldr	r0, [pc, #376]	; (800ec7c <_printf_i+0x244>)
 800eb02:	230a      	movs	r3, #10
 800eb04:	e019      	b.n	800eb3a <_printf_i+0x102>
 800eb06:	680e      	ldr	r6, [r1, #0]
 800eb08:	602b      	str	r3, [r5, #0]
 800eb0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eb0e:	bf18      	it	ne
 800eb10:	b236      	sxthne	r6, r6
 800eb12:	e7ef      	b.n	800eaf4 <_printf_i+0xbc>
 800eb14:	682b      	ldr	r3, [r5, #0]
 800eb16:	6820      	ldr	r0, [r4, #0]
 800eb18:	1d19      	adds	r1, r3, #4
 800eb1a:	6029      	str	r1, [r5, #0]
 800eb1c:	0601      	lsls	r1, r0, #24
 800eb1e:	d501      	bpl.n	800eb24 <_printf_i+0xec>
 800eb20:	681e      	ldr	r6, [r3, #0]
 800eb22:	e002      	b.n	800eb2a <_printf_i+0xf2>
 800eb24:	0646      	lsls	r6, r0, #25
 800eb26:	d5fb      	bpl.n	800eb20 <_printf_i+0xe8>
 800eb28:	881e      	ldrh	r6, [r3, #0]
 800eb2a:	4854      	ldr	r0, [pc, #336]	; (800ec7c <_printf_i+0x244>)
 800eb2c:	2f6f      	cmp	r7, #111	; 0x6f
 800eb2e:	bf0c      	ite	eq
 800eb30:	2308      	moveq	r3, #8
 800eb32:	230a      	movne	r3, #10
 800eb34:	2100      	movs	r1, #0
 800eb36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb3a:	6865      	ldr	r5, [r4, #4]
 800eb3c:	60a5      	str	r5, [r4, #8]
 800eb3e:	2d00      	cmp	r5, #0
 800eb40:	bfa2      	ittt	ge
 800eb42:	6821      	ldrge	r1, [r4, #0]
 800eb44:	f021 0104 	bicge.w	r1, r1, #4
 800eb48:	6021      	strge	r1, [r4, #0]
 800eb4a:	b90e      	cbnz	r6, 800eb50 <_printf_i+0x118>
 800eb4c:	2d00      	cmp	r5, #0
 800eb4e:	d04d      	beq.n	800ebec <_printf_i+0x1b4>
 800eb50:	4615      	mov	r5, r2
 800eb52:	fbb6 f1f3 	udiv	r1, r6, r3
 800eb56:	fb03 6711 	mls	r7, r3, r1, r6
 800eb5a:	5dc7      	ldrb	r7, [r0, r7]
 800eb5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb60:	4637      	mov	r7, r6
 800eb62:	42bb      	cmp	r3, r7
 800eb64:	460e      	mov	r6, r1
 800eb66:	d9f4      	bls.n	800eb52 <_printf_i+0x11a>
 800eb68:	2b08      	cmp	r3, #8
 800eb6a:	d10b      	bne.n	800eb84 <_printf_i+0x14c>
 800eb6c:	6823      	ldr	r3, [r4, #0]
 800eb6e:	07de      	lsls	r6, r3, #31
 800eb70:	d508      	bpl.n	800eb84 <_printf_i+0x14c>
 800eb72:	6923      	ldr	r3, [r4, #16]
 800eb74:	6861      	ldr	r1, [r4, #4]
 800eb76:	4299      	cmp	r1, r3
 800eb78:	bfde      	ittt	le
 800eb7a:	2330      	movle	r3, #48	; 0x30
 800eb7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800eb84:	1b52      	subs	r2, r2, r5
 800eb86:	6122      	str	r2, [r4, #16]
 800eb88:	f8cd a000 	str.w	sl, [sp]
 800eb8c:	464b      	mov	r3, r9
 800eb8e:	aa03      	add	r2, sp, #12
 800eb90:	4621      	mov	r1, r4
 800eb92:	4640      	mov	r0, r8
 800eb94:	f7ff fee2 	bl	800e95c <_printf_common>
 800eb98:	3001      	adds	r0, #1
 800eb9a:	d14c      	bne.n	800ec36 <_printf_i+0x1fe>
 800eb9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eba0:	b004      	add	sp, #16
 800eba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eba6:	4835      	ldr	r0, [pc, #212]	; (800ec7c <_printf_i+0x244>)
 800eba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ebac:	6829      	ldr	r1, [r5, #0]
 800ebae:	6823      	ldr	r3, [r4, #0]
 800ebb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ebb4:	6029      	str	r1, [r5, #0]
 800ebb6:	061d      	lsls	r5, r3, #24
 800ebb8:	d514      	bpl.n	800ebe4 <_printf_i+0x1ac>
 800ebba:	07df      	lsls	r7, r3, #31
 800ebbc:	bf44      	itt	mi
 800ebbe:	f043 0320 	orrmi.w	r3, r3, #32
 800ebc2:	6023      	strmi	r3, [r4, #0]
 800ebc4:	b91e      	cbnz	r6, 800ebce <_printf_i+0x196>
 800ebc6:	6823      	ldr	r3, [r4, #0]
 800ebc8:	f023 0320 	bic.w	r3, r3, #32
 800ebcc:	6023      	str	r3, [r4, #0]
 800ebce:	2310      	movs	r3, #16
 800ebd0:	e7b0      	b.n	800eb34 <_printf_i+0xfc>
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	f043 0320 	orr.w	r3, r3, #32
 800ebd8:	6023      	str	r3, [r4, #0]
 800ebda:	2378      	movs	r3, #120	; 0x78
 800ebdc:	4828      	ldr	r0, [pc, #160]	; (800ec80 <_printf_i+0x248>)
 800ebde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ebe2:	e7e3      	b.n	800ebac <_printf_i+0x174>
 800ebe4:	0659      	lsls	r1, r3, #25
 800ebe6:	bf48      	it	mi
 800ebe8:	b2b6      	uxthmi	r6, r6
 800ebea:	e7e6      	b.n	800ebba <_printf_i+0x182>
 800ebec:	4615      	mov	r5, r2
 800ebee:	e7bb      	b.n	800eb68 <_printf_i+0x130>
 800ebf0:	682b      	ldr	r3, [r5, #0]
 800ebf2:	6826      	ldr	r6, [r4, #0]
 800ebf4:	6961      	ldr	r1, [r4, #20]
 800ebf6:	1d18      	adds	r0, r3, #4
 800ebf8:	6028      	str	r0, [r5, #0]
 800ebfa:	0635      	lsls	r5, r6, #24
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	d501      	bpl.n	800ec04 <_printf_i+0x1cc>
 800ec00:	6019      	str	r1, [r3, #0]
 800ec02:	e002      	b.n	800ec0a <_printf_i+0x1d2>
 800ec04:	0670      	lsls	r0, r6, #25
 800ec06:	d5fb      	bpl.n	800ec00 <_printf_i+0x1c8>
 800ec08:	8019      	strh	r1, [r3, #0]
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	6123      	str	r3, [r4, #16]
 800ec0e:	4615      	mov	r5, r2
 800ec10:	e7ba      	b.n	800eb88 <_printf_i+0x150>
 800ec12:	682b      	ldr	r3, [r5, #0]
 800ec14:	1d1a      	adds	r2, r3, #4
 800ec16:	602a      	str	r2, [r5, #0]
 800ec18:	681d      	ldr	r5, [r3, #0]
 800ec1a:	6862      	ldr	r2, [r4, #4]
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f7f1 faee 	bl	8000200 <memchr>
 800ec24:	b108      	cbz	r0, 800ec2a <_printf_i+0x1f2>
 800ec26:	1b40      	subs	r0, r0, r5
 800ec28:	6060      	str	r0, [r4, #4]
 800ec2a:	6863      	ldr	r3, [r4, #4]
 800ec2c:	6123      	str	r3, [r4, #16]
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec34:	e7a8      	b.n	800eb88 <_printf_i+0x150>
 800ec36:	6923      	ldr	r3, [r4, #16]
 800ec38:	462a      	mov	r2, r5
 800ec3a:	4649      	mov	r1, r9
 800ec3c:	4640      	mov	r0, r8
 800ec3e:	47d0      	blx	sl
 800ec40:	3001      	adds	r0, #1
 800ec42:	d0ab      	beq.n	800eb9c <_printf_i+0x164>
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	079b      	lsls	r3, r3, #30
 800ec48:	d413      	bmi.n	800ec72 <_printf_i+0x23a>
 800ec4a:	68e0      	ldr	r0, [r4, #12]
 800ec4c:	9b03      	ldr	r3, [sp, #12]
 800ec4e:	4298      	cmp	r0, r3
 800ec50:	bfb8      	it	lt
 800ec52:	4618      	movlt	r0, r3
 800ec54:	e7a4      	b.n	800eba0 <_printf_i+0x168>
 800ec56:	2301      	movs	r3, #1
 800ec58:	4632      	mov	r2, r6
 800ec5a:	4649      	mov	r1, r9
 800ec5c:	4640      	mov	r0, r8
 800ec5e:	47d0      	blx	sl
 800ec60:	3001      	adds	r0, #1
 800ec62:	d09b      	beq.n	800eb9c <_printf_i+0x164>
 800ec64:	3501      	adds	r5, #1
 800ec66:	68e3      	ldr	r3, [r4, #12]
 800ec68:	9903      	ldr	r1, [sp, #12]
 800ec6a:	1a5b      	subs	r3, r3, r1
 800ec6c:	42ab      	cmp	r3, r5
 800ec6e:	dcf2      	bgt.n	800ec56 <_printf_i+0x21e>
 800ec70:	e7eb      	b.n	800ec4a <_printf_i+0x212>
 800ec72:	2500      	movs	r5, #0
 800ec74:	f104 0619 	add.w	r6, r4, #25
 800ec78:	e7f5      	b.n	800ec66 <_printf_i+0x22e>
 800ec7a:	bf00      	nop
 800ec7c:	0800f4a5 	.word	0x0800f4a5
 800ec80:	0800f4b6 	.word	0x0800f4b6

0800ec84 <_sbrk_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	4d06      	ldr	r5, [pc, #24]	; (800eca0 <_sbrk_r+0x1c>)
 800ec88:	2300      	movs	r3, #0
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	4608      	mov	r0, r1
 800ec8e:	602b      	str	r3, [r5, #0]
 800ec90:	f000 fb1c 	bl	800f2cc <_sbrk>
 800ec94:	1c43      	adds	r3, r0, #1
 800ec96:	d102      	bne.n	800ec9e <_sbrk_r+0x1a>
 800ec98:	682b      	ldr	r3, [r5, #0]
 800ec9a:	b103      	cbz	r3, 800ec9e <_sbrk_r+0x1a>
 800ec9c:	6023      	str	r3, [r4, #0]
 800ec9e:	bd38      	pop	{r3, r4, r5, pc}
 800eca0:	20002218 	.word	0x20002218

0800eca4 <__sread>:
 800eca4:	b510      	push	{r4, lr}
 800eca6:	460c      	mov	r4, r1
 800eca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecac:	f000 fab2 	bl	800f214 <_read_r>
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	bfab      	itete	ge
 800ecb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ecb6:	89a3      	ldrhlt	r3, [r4, #12]
 800ecb8:	181b      	addge	r3, r3, r0
 800ecba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ecbe:	bfac      	ite	ge
 800ecc0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ecc2:	81a3      	strhlt	r3, [r4, #12]
 800ecc4:	bd10      	pop	{r4, pc}

0800ecc6 <__swrite>:
 800ecc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecca:	461f      	mov	r7, r3
 800eccc:	898b      	ldrh	r3, [r1, #12]
 800ecce:	05db      	lsls	r3, r3, #23
 800ecd0:	4605      	mov	r5, r0
 800ecd2:	460c      	mov	r4, r1
 800ecd4:	4616      	mov	r6, r2
 800ecd6:	d505      	bpl.n	800ece4 <__swrite+0x1e>
 800ecd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecdc:	2302      	movs	r3, #2
 800ecde:	2200      	movs	r2, #0
 800ece0:	f000 f9c8 	bl	800f074 <_lseek_r>
 800ece4:	89a3      	ldrh	r3, [r4, #12]
 800ece6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ecee:	81a3      	strh	r3, [r4, #12]
 800ecf0:	4632      	mov	r2, r6
 800ecf2:	463b      	mov	r3, r7
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecfa:	f000 b869 	b.w	800edd0 <_write_r>

0800ecfe <__sseek>:
 800ecfe:	b510      	push	{r4, lr}
 800ed00:	460c      	mov	r4, r1
 800ed02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed06:	f000 f9b5 	bl	800f074 <_lseek_r>
 800ed0a:	1c43      	adds	r3, r0, #1
 800ed0c:	89a3      	ldrh	r3, [r4, #12]
 800ed0e:	bf15      	itete	ne
 800ed10:	6560      	strne	r0, [r4, #84]	; 0x54
 800ed12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ed16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ed1a:	81a3      	strheq	r3, [r4, #12]
 800ed1c:	bf18      	it	ne
 800ed1e:	81a3      	strhne	r3, [r4, #12]
 800ed20:	bd10      	pop	{r4, pc}

0800ed22 <__sclose>:
 800ed22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed26:	f000 b8d3 	b.w	800eed0 <_close_r>
	...

0800ed2c <__swbuf_r>:
 800ed2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed2e:	460e      	mov	r6, r1
 800ed30:	4614      	mov	r4, r2
 800ed32:	4605      	mov	r5, r0
 800ed34:	b118      	cbz	r0, 800ed3e <__swbuf_r+0x12>
 800ed36:	6983      	ldr	r3, [r0, #24]
 800ed38:	b90b      	cbnz	r3, 800ed3e <__swbuf_r+0x12>
 800ed3a:	f7ff fb81 	bl	800e440 <__sinit>
 800ed3e:	4b21      	ldr	r3, [pc, #132]	; (800edc4 <__swbuf_r+0x98>)
 800ed40:	429c      	cmp	r4, r3
 800ed42:	d12b      	bne.n	800ed9c <__swbuf_r+0x70>
 800ed44:	686c      	ldr	r4, [r5, #4]
 800ed46:	69a3      	ldr	r3, [r4, #24]
 800ed48:	60a3      	str	r3, [r4, #8]
 800ed4a:	89a3      	ldrh	r3, [r4, #12]
 800ed4c:	071a      	lsls	r2, r3, #28
 800ed4e:	d52f      	bpl.n	800edb0 <__swbuf_r+0x84>
 800ed50:	6923      	ldr	r3, [r4, #16]
 800ed52:	b36b      	cbz	r3, 800edb0 <__swbuf_r+0x84>
 800ed54:	6923      	ldr	r3, [r4, #16]
 800ed56:	6820      	ldr	r0, [r4, #0]
 800ed58:	1ac0      	subs	r0, r0, r3
 800ed5a:	6963      	ldr	r3, [r4, #20]
 800ed5c:	b2f6      	uxtb	r6, r6
 800ed5e:	4283      	cmp	r3, r0
 800ed60:	4637      	mov	r7, r6
 800ed62:	dc04      	bgt.n	800ed6e <__swbuf_r+0x42>
 800ed64:	4621      	mov	r1, r4
 800ed66:	4628      	mov	r0, r5
 800ed68:	f000 f948 	bl	800effc <_fflush_r>
 800ed6c:	bb30      	cbnz	r0, 800edbc <__swbuf_r+0x90>
 800ed6e:	68a3      	ldr	r3, [r4, #8]
 800ed70:	3b01      	subs	r3, #1
 800ed72:	60a3      	str	r3, [r4, #8]
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	6022      	str	r2, [r4, #0]
 800ed7a:	701e      	strb	r6, [r3, #0]
 800ed7c:	6963      	ldr	r3, [r4, #20]
 800ed7e:	3001      	adds	r0, #1
 800ed80:	4283      	cmp	r3, r0
 800ed82:	d004      	beq.n	800ed8e <__swbuf_r+0x62>
 800ed84:	89a3      	ldrh	r3, [r4, #12]
 800ed86:	07db      	lsls	r3, r3, #31
 800ed88:	d506      	bpl.n	800ed98 <__swbuf_r+0x6c>
 800ed8a:	2e0a      	cmp	r6, #10
 800ed8c:	d104      	bne.n	800ed98 <__swbuf_r+0x6c>
 800ed8e:	4621      	mov	r1, r4
 800ed90:	4628      	mov	r0, r5
 800ed92:	f000 f933 	bl	800effc <_fflush_r>
 800ed96:	b988      	cbnz	r0, 800edbc <__swbuf_r+0x90>
 800ed98:	4638      	mov	r0, r7
 800ed9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed9c:	4b0a      	ldr	r3, [pc, #40]	; (800edc8 <__swbuf_r+0x9c>)
 800ed9e:	429c      	cmp	r4, r3
 800eda0:	d101      	bne.n	800eda6 <__swbuf_r+0x7a>
 800eda2:	68ac      	ldr	r4, [r5, #8]
 800eda4:	e7cf      	b.n	800ed46 <__swbuf_r+0x1a>
 800eda6:	4b09      	ldr	r3, [pc, #36]	; (800edcc <__swbuf_r+0xa0>)
 800eda8:	429c      	cmp	r4, r3
 800edaa:	bf08      	it	eq
 800edac:	68ec      	ldreq	r4, [r5, #12]
 800edae:	e7ca      	b.n	800ed46 <__swbuf_r+0x1a>
 800edb0:	4621      	mov	r1, r4
 800edb2:	4628      	mov	r0, r5
 800edb4:	f000 f81e 	bl	800edf4 <__swsetup_r>
 800edb8:	2800      	cmp	r0, #0
 800edba:	d0cb      	beq.n	800ed54 <__swbuf_r+0x28>
 800edbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800edc0:	e7ea      	b.n	800ed98 <__swbuf_r+0x6c>
 800edc2:	bf00      	nop
 800edc4:	0800f454 	.word	0x0800f454
 800edc8:	0800f474 	.word	0x0800f474
 800edcc:	0800f434 	.word	0x0800f434

0800edd0 <_write_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4d07      	ldr	r5, [pc, #28]	; (800edf0 <_write_r+0x20>)
 800edd4:	4604      	mov	r4, r0
 800edd6:	4608      	mov	r0, r1
 800edd8:	4611      	mov	r1, r2
 800edda:	2200      	movs	r2, #0
 800eddc:	602a      	str	r2, [r5, #0]
 800edde:	461a      	mov	r2, r3
 800ede0:	f000 fa82 	bl	800f2e8 <_write>
 800ede4:	1c43      	adds	r3, r0, #1
 800ede6:	d102      	bne.n	800edee <_write_r+0x1e>
 800ede8:	682b      	ldr	r3, [r5, #0]
 800edea:	b103      	cbz	r3, 800edee <_write_r+0x1e>
 800edec:	6023      	str	r3, [r4, #0]
 800edee:	bd38      	pop	{r3, r4, r5, pc}
 800edf0:	20002218 	.word	0x20002218

0800edf4 <__swsetup_r>:
 800edf4:	4b32      	ldr	r3, [pc, #200]	; (800eec0 <__swsetup_r+0xcc>)
 800edf6:	b570      	push	{r4, r5, r6, lr}
 800edf8:	681d      	ldr	r5, [r3, #0]
 800edfa:	4606      	mov	r6, r0
 800edfc:	460c      	mov	r4, r1
 800edfe:	b125      	cbz	r5, 800ee0a <__swsetup_r+0x16>
 800ee00:	69ab      	ldr	r3, [r5, #24]
 800ee02:	b913      	cbnz	r3, 800ee0a <__swsetup_r+0x16>
 800ee04:	4628      	mov	r0, r5
 800ee06:	f7ff fb1b 	bl	800e440 <__sinit>
 800ee0a:	4b2e      	ldr	r3, [pc, #184]	; (800eec4 <__swsetup_r+0xd0>)
 800ee0c:	429c      	cmp	r4, r3
 800ee0e:	d10f      	bne.n	800ee30 <__swsetup_r+0x3c>
 800ee10:	686c      	ldr	r4, [r5, #4]
 800ee12:	89a3      	ldrh	r3, [r4, #12]
 800ee14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee18:	0719      	lsls	r1, r3, #28
 800ee1a:	d42c      	bmi.n	800ee76 <__swsetup_r+0x82>
 800ee1c:	06dd      	lsls	r5, r3, #27
 800ee1e:	d411      	bmi.n	800ee44 <__swsetup_r+0x50>
 800ee20:	2309      	movs	r3, #9
 800ee22:	6033      	str	r3, [r6, #0]
 800ee24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee28:	81a3      	strh	r3, [r4, #12]
 800ee2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee2e:	e03e      	b.n	800eeae <__swsetup_r+0xba>
 800ee30:	4b25      	ldr	r3, [pc, #148]	; (800eec8 <__swsetup_r+0xd4>)
 800ee32:	429c      	cmp	r4, r3
 800ee34:	d101      	bne.n	800ee3a <__swsetup_r+0x46>
 800ee36:	68ac      	ldr	r4, [r5, #8]
 800ee38:	e7eb      	b.n	800ee12 <__swsetup_r+0x1e>
 800ee3a:	4b24      	ldr	r3, [pc, #144]	; (800eecc <__swsetup_r+0xd8>)
 800ee3c:	429c      	cmp	r4, r3
 800ee3e:	bf08      	it	eq
 800ee40:	68ec      	ldreq	r4, [r5, #12]
 800ee42:	e7e6      	b.n	800ee12 <__swsetup_r+0x1e>
 800ee44:	0758      	lsls	r0, r3, #29
 800ee46:	d512      	bpl.n	800ee6e <__swsetup_r+0x7a>
 800ee48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee4a:	b141      	cbz	r1, 800ee5e <__swsetup_r+0x6a>
 800ee4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee50:	4299      	cmp	r1, r3
 800ee52:	d002      	beq.n	800ee5a <__swsetup_r+0x66>
 800ee54:	4630      	mov	r0, r6
 800ee56:	f000 f991 	bl	800f17c <_free_r>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	6363      	str	r3, [r4, #52]	; 0x34
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee64:	81a3      	strh	r3, [r4, #12]
 800ee66:	2300      	movs	r3, #0
 800ee68:	6063      	str	r3, [r4, #4]
 800ee6a:	6923      	ldr	r3, [r4, #16]
 800ee6c:	6023      	str	r3, [r4, #0]
 800ee6e:	89a3      	ldrh	r3, [r4, #12]
 800ee70:	f043 0308 	orr.w	r3, r3, #8
 800ee74:	81a3      	strh	r3, [r4, #12]
 800ee76:	6923      	ldr	r3, [r4, #16]
 800ee78:	b94b      	cbnz	r3, 800ee8e <__swsetup_r+0x9a>
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee84:	d003      	beq.n	800ee8e <__swsetup_r+0x9a>
 800ee86:	4621      	mov	r1, r4
 800ee88:	4630      	mov	r0, r6
 800ee8a:	f000 f92b 	bl	800f0e4 <__smakebuf_r>
 800ee8e:	89a0      	ldrh	r0, [r4, #12]
 800ee90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee94:	f010 0301 	ands.w	r3, r0, #1
 800ee98:	d00a      	beq.n	800eeb0 <__swsetup_r+0xbc>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	60a3      	str	r3, [r4, #8]
 800ee9e:	6963      	ldr	r3, [r4, #20]
 800eea0:	425b      	negs	r3, r3
 800eea2:	61a3      	str	r3, [r4, #24]
 800eea4:	6923      	ldr	r3, [r4, #16]
 800eea6:	b943      	cbnz	r3, 800eeba <__swsetup_r+0xc6>
 800eea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eeac:	d1ba      	bne.n	800ee24 <__swsetup_r+0x30>
 800eeae:	bd70      	pop	{r4, r5, r6, pc}
 800eeb0:	0781      	lsls	r1, r0, #30
 800eeb2:	bf58      	it	pl
 800eeb4:	6963      	ldrpl	r3, [r4, #20]
 800eeb6:	60a3      	str	r3, [r4, #8]
 800eeb8:	e7f4      	b.n	800eea4 <__swsetup_r+0xb0>
 800eeba:	2000      	movs	r0, #0
 800eebc:	e7f7      	b.n	800eeae <__swsetup_r+0xba>
 800eebe:	bf00      	nop
 800eec0:	20000180 	.word	0x20000180
 800eec4:	0800f454 	.word	0x0800f454
 800eec8:	0800f474 	.word	0x0800f474
 800eecc:	0800f434 	.word	0x0800f434

0800eed0 <_close_r>:
 800eed0:	b538      	push	{r3, r4, r5, lr}
 800eed2:	4d06      	ldr	r5, [pc, #24]	; (800eeec <_close_r+0x1c>)
 800eed4:	2300      	movs	r3, #0
 800eed6:	4604      	mov	r4, r0
 800eed8:	4608      	mov	r0, r1
 800eeda:	602b      	str	r3, [r5, #0]
 800eedc:	f000 f9ce 	bl	800f27c <_close>
 800eee0:	1c43      	adds	r3, r0, #1
 800eee2:	d102      	bne.n	800eeea <_close_r+0x1a>
 800eee4:	682b      	ldr	r3, [r5, #0]
 800eee6:	b103      	cbz	r3, 800eeea <_close_r+0x1a>
 800eee8:	6023      	str	r3, [r4, #0]
 800eeea:	bd38      	pop	{r3, r4, r5, pc}
 800eeec:	20002218 	.word	0x20002218

0800eef0 <__sflush_r>:
 800eef0:	898a      	ldrh	r2, [r1, #12]
 800eef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef6:	4605      	mov	r5, r0
 800eef8:	0710      	lsls	r0, r2, #28
 800eefa:	460c      	mov	r4, r1
 800eefc:	d458      	bmi.n	800efb0 <__sflush_r+0xc0>
 800eefe:	684b      	ldr	r3, [r1, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	dc05      	bgt.n	800ef10 <__sflush_r+0x20>
 800ef04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	dc02      	bgt.n	800ef10 <__sflush_r+0x20>
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef12:	2e00      	cmp	r6, #0
 800ef14:	d0f9      	beq.n	800ef0a <__sflush_r+0x1a>
 800ef16:	2300      	movs	r3, #0
 800ef18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef1c:	682f      	ldr	r7, [r5, #0]
 800ef1e:	602b      	str	r3, [r5, #0]
 800ef20:	d032      	beq.n	800ef88 <__sflush_r+0x98>
 800ef22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef24:	89a3      	ldrh	r3, [r4, #12]
 800ef26:	075a      	lsls	r2, r3, #29
 800ef28:	d505      	bpl.n	800ef36 <__sflush_r+0x46>
 800ef2a:	6863      	ldr	r3, [r4, #4]
 800ef2c:	1ac0      	subs	r0, r0, r3
 800ef2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef30:	b10b      	cbz	r3, 800ef36 <__sflush_r+0x46>
 800ef32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef34:	1ac0      	subs	r0, r0, r3
 800ef36:	2300      	movs	r3, #0
 800ef38:	4602      	mov	r2, r0
 800ef3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef3c:	6a21      	ldr	r1, [r4, #32]
 800ef3e:	4628      	mov	r0, r5
 800ef40:	47b0      	blx	r6
 800ef42:	1c43      	adds	r3, r0, #1
 800ef44:	89a3      	ldrh	r3, [r4, #12]
 800ef46:	d106      	bne.n	800ef56 <__sflush_r+0x66>
 800ef48:	6829      	ldr	r1, [r5, #0]
 800ef4a:	291d      	cmp	r1, #29
 800ef4c:	d82c      	bhi.n	800efa8 <__sflush_r+0xb8>
 800ef4e:	4a2a      	ldr	r2, [pc, #168]	; (800eff8 <__sflush_r+0x108>)
 800ef50:	40ca      	lsrs	r2, r1
 800ef52:	07d6      	lsls	r6, r2, #31
 800ef54:	d528      	bpl.n	800efa8 <__sflush_r+0xb8>
 800ef56:	2200      	movs	r2, #0
 800ef58:	6062      	str	r2, [r4, #4]
 800ef5a:	04d9      	lsls	r1, r3, #19
 800ef5c:	6922      	ldr	r2, [r4, #16]
 800ef5e:	6022      	str	r2, [r4, #0]
 800ef60:	d504      	bpl.n	800ef6c <__sflush_r+0x7c>
 800ef62:	1c42      	adds	r2, r0, #1
 800ef64:	d101      	bne.n	800ef6a <__sflush_r+0x7a>
 800ef66:	682b      	ldr	r3, [r5, #0]
 800ef68:	b903      	cbnz	r3, 800ef6c <__sflush_r+0x7c>
 800ef6a:	6560      	str	r0, [r4, #84]	; 0x54
 800ef6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef6e:	602f      	str	r7, [r5, #0]
 800ef70:	2900      	cmp	r1, #0
 800ef72:	d0ca      	beq.n	800ef0a <__sflush_r+0x1a>
 800ef74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef78:	4299      	cmp	r1, r3
 800ef7a:	d002      	beq.n	800ef82 <__sflush_r+0x92>
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	f000 f8fd 	bl	800f17c <_free_r>
 800ef82:	2000      	movs	r0, #0
 800ef84:	6360      	str	r0, [r4, #52]	; 0x34
 800ef86:	e7c1      	b.n	800ef0c <__sflush_r+0x1c>
 800ef88:	6a21      	ldr	r1, [r4, #32]
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	47b0      	blx	r6
 800ef90:	1c41      	adds	r1, r0, #1
 800ef92:	d1c7      	bne.n	800ef24 <__sflush_r+0x34>
 800ef94:	682b      	ldr	r3, [r5, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d0c4      	beq.n	800ef24 <__sflush_r+0x34>
 800ef9a:	2b1d      	cmp	r3, #29
 800ef9c:	d001      	beq.n	800efa2 <__sflush_r+0xb2>
 800ef9e:	2b16      	cmp	r3, #22
 800efa0:	d101      	bne.n	800efa6 <__sflush_r+0xb6>
 800efa2:	602f      	str	r7, [r5, #0]
 800efa4:	e7b1      	b.n	800ef0a <__sflush_r+0x1a>
 800efa6:	89a3      	ldrh	r3, [r4, #12]
 800efa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efac:	81a3      	strh	r3, [r4, #12]
 800efae:	e7ad      	b.n	800ef0c <__sflush_r+0x1c>
 800efb0:	690f      	ldr	r7, [r1, #16]
 800efb2:	2f00      	cmp	r7, #0
 800efb4:	d0a9      	beq.n	800ef0a <__sflush_r+0x1a>
 800efb6:	0793      	lsls	r3, r2, #30
 800efb8:	680e      	ldr	r6, [r1, #0]
 800efba:	bf08      	it	eq
 800efbc:	694b      	ldreq	r3, [r1, #20]
 800efbe:	600f      	str	r7, [r1, #0]
 800efc0:	bf18      	it	ne
 800efc2:	2300      	movne	r3, #0
 800efc4:	eba6 0807 	sub.w	r8, r6, r7
 800efc8:	608b      	str	r3, [r1, #8]
 800efca:	f1b8 0f00 	cmp.w	r8, #0
 800efce:	dd9c      	ble.n	800ef0a <__sflush_r+0x1a>
 800efd0:	6a21      	ldr	r1, [r4, #32]
 800efd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efd4:	4643      	mov	r3, r8
 800efd6:	463a      	mov	r2, r7
 800efd8:	4628      	mov	r0, r5
 800efda:	47b0      	blx	r6
 800efdc:	2800      	cmp	r0, #0
 800efde:	dc06      	bgt.n	800efee <__sflush_r+0xfe>
 800efe0:	89a3      	ldrh	r3, [r4, #12]
 800efe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efe6:	81a3      	strh	r3, [r4, #12]
 800efe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efec:	e78e      	b.n	800ef0c <__sflush_r+0x1c>
 800efee:	4407      	add	r7, r0
 800eff0:	eba8 0800 	sub.w	r8, r8, r0
 800eff4:	e7e9      	b.n	800efca <__sflush_r+0xda>
 800eff6:	bf00      	nop
 800eff8:	20400001 	.word	0x20400001

0800effc <_fflush_r>:
 800effc:	b538      	push	{r3, r4, r5, lr}
 800effe:	690b      	ldr	r3, [r1, #16]
 800f000:	4605      	mov	r5, r0
 800f002:	460c      	mov	r4, r1
 800f004:	b913      	cbnz	r3, 800f00c <_fflush_r+0x10>
 800f006:	2500      	movs	r5, #0
 800f008:	4628      	mov	r0, r5
 800f00a:	bd38      	pop	{r3, r4, r5, pc}
 800f00c:	b118      	cbz	r0, 800f016 <_fflush_r+0x1a>
 800f00e:	6983      	ldr	r3, [r0, #24]
 800f010:	b90b      	cbnz	r3, 800f016 <_fflush_r+0x1a>
 800f012:	f7ff fa15 	bl	800e440 <__sinit>
 800f016:	4b14      	ldr	r3, [pc, #80]	; (800f068 <_fflush_r+0x6c>)
 800f018:	429c      	cmp	r4, r3
 800f01a:	d11b      	bne.n	800f054 <_fflush_r+0x58>
 800f01c:	686c      	ldr	r4, [r5, #4]
 800f01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d0ef      	beq.n	800f006 <_fflush_r+0xa>
 800f026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f028:	07d0      	lsls	r0, r2, #31
 800f02a:	d404      	bmi.n	800f036 <_fflush_r+0x3a>
 800f02c:	0599      	lsls	r1, r3, #22
 800f02e:	d402      	bmi.n	800f036 <_fflush_r+0x3a>
 800f030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f032:	f7ff faa3 	bl	800e57c <__retarget_lock_acquire_recursive>
 800f036:	4628      	mov	r0, r5
 800f038:	4621      	mov	r1, r4
 800f03a:	f7ff ff59 	bl	800eef0 <__sflush_r>
 800f03e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f040:	07da      	lsls	r2, r3, #31
 800f042:	4605      	mov	r5, r0
 800f044:	d4e0      	bmi.n	800f008 <_fflush_r+0xc>
 800f046:	89a3      	ldrh	r3, [r4, #12]
 800f048:	059b      	lsls	r3, r3, #22
 800f04a:	d4dd      	bmi.n	800f008 <_fflush_r+0xc>
 800f04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f04e:	f7ff fa96 	bl	800e57e <__retarget_lock_release_recursive>
 800f052:	e7d9      	b.n	800f008 <_fflush_r+0xc>
 800f054:	4b05      	ldr	r3, [pc, #20]	; (800f06c <_fflush_r+0x70>)
 800f056:	429c      	cmp	r4, r3
 800f058:	d101      	bne.n	800f05e <_fflush_r+0x62>
 800f05a:	68ac      	ldr	r4, [r5, #8]
 800f05c:	e7df      	b.n	800f01e <_fflush_r+0x22>
 800f05e:	4b04      	ldr	r3, [pc, #16]	; (800f070 <_fflush_r+0x74>)
 800f060:	429c      	cmp	r4, r3
 800f062:	bf08      	it	eq
 800f064:	68ec      	ldreq	r4, [r5, #12]
 800f066:	e7da      	b.n	800f01e <_fflush_r+0x22>
 800f068:	0800f454 	.word	0x0800f454
 800f06c:	0800f474 	.word	0x0800f474
 800f070:	0800f434 	.word	0x0800f434

0800f074 <_lseek_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	4d07      	ldr	r5, [pc, #28]	; (800f094 <_lseek_r+0x20>)
 800f078:	4604      	mov	r4, r0
 800f07a:	4608      	mov	r0, r1
 800f07c:	4611      	mov	r1, r2
 800f07e:	2200      	movs	r2, #0
 800f080:	602a      	str	r2, [r5, #0]
 800f082:	461a      	mov	r2, r3
 800f084:	f000 f912 	bl	800f2ac <_lseek>
 800f088:	1c43      	adds	r3, r0, #1
 800f08a:	d102      	bne.n	800f092 <_lseek_r+0x1e>
 800f08c:	682b      	ldr	r3, [r5, #0]
 800f08e:	b103      	cbz	r3, 800f092 <_lseek_r+0x1e>
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	bd38      	pop	{r3, r4, r5, pc}
 800f094:	20002218 	.word	0x20002218

0800f098 <__swhatbuf_r>:
 800f098:	b570      	push	{r4, r5, r6, lr}
 800f09a:	460e      	mov	r6, r1
 800f09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0a0:	2900      	cmp	r1, #0
 800f0a2:	b096      	sub	sp, #88	; 0x58
 800f0a4:	4614      	mov	r4, r2
 800f0a6:	461d      	mov	r5, r3
 800f0a8:	da08      	bge.n	800f0bc <__swhatbuf_r+0x24>
 800f0aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	602a      	str	r2, [r5, #0]
 800f0b2:	061a      	lsls	r2, r3, #24
 800f0b4:	d410      	bmi.n	800f0d8 <__swhatbuf_r+0x40>
 800f0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0ba:	e00e      	b.n	800f0da <__swhatbuf_r+0x42>
 800f0bc:	466a      	mov	r2, sp
 800f0be:	f000 f8bb 	bl	800f238 <_fstat_r>
 800f0c2:	2800      	cmp	r0, #0
 800f0c4:	dbf1      	blt.n	800f0aa <__swhatbuf_r+0x12>
 800f0c6:	9a01      	ldr	r2, [sp, #4]
 800f0c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f0cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f0d0:	425a      	negs	r2, r3
 800f0d2:	415a      	adcs	r2, r3
 800f0d4:	602a      	str	r2, [r5, #0]
 800f0d6:	e7ee      	b.n	800f0b6 <__swhatbuf_r+0x1e>
 800f0d8:	2340      	movs	r3, #64	; 0x40
 800f0da:	2000      	movs	r0, #0
 800f0dc:	6023      	str	r3, [r4, #0]
 800f0de:	b016      	add	sp, #88	; 0x58
 800f0e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f0e4 <__smakebuf_r>:
 800f0e4:	898b      	ldrh	r3, [r1, #12]
 800f0e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f0e8:	079d      	lsls	r5, r3, #30
 800f0ea:	4606      	mov	r6, r0
 800f0ec:	460c      	mov	r4, r1
 800f0ee:	d507      	bpl.n	800f100 <__smakebuf_r+0x1c>
 800f0f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f0f4:	6023      	str	r3, [r4, #0]
 800f0f6:	6123      	str	r3, [r4, #16]
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	6163      	str	r3, [r4, #20]
 800f0fc:	b002      	add	sp, #8
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}
 800f100:	ab01      	add	r3, sp, #4
 800f102:	466a      	mov	r2, sp
 800f104:	f7ff ffc8 	bl	800f098 <__swhatbuf_r>
 800f108:	9900      	ldr	r1, [sp, #0]
 800f10a:	4605      	mov	r5, r0
 800f10c:	4630      	mov	r0, r6
 800f10e:	f7ff fa57 	bl	800e5c0 <_malloc_r>
 800f112:	b948      	cbnz	r0, 800f128 <__smakebuf_r+0x44>
 800f114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f118:	059a      	lsls	r2, r3, #22
 800f11a:	d4ef      	bmi.n	800f0fc <__smakebuf_r+0x18>
 800f11c:	f023 0303 	bic.w	r3, r3, #3
 800f120:	f043 0302 	orr.w	r3, r3, #2
 800f124:	81a3      	strh	r3, [r4, #12]
 800f126:	e7e3      	b.n	800f0f0 <__smakebuf_r+0xc>
 800f128:	4b0d      	ldr	r3, [pc, #52]	; (800f160 <__smakebuf_r+0x7c>)
 800f12a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f12c:	89a3      	ldrh	r3, [r4, #12]
 800f12e:	6020      	str	r0, [r4, #0]
 800f130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f134:	81a3      	strh	r3, [r4, #12]
 800f136:	9b00      	ldr	r3, [sp, #0]
 800f138:	6163      	str	r3, [r4, #20]
 800f13a:	9b01      	ldr	r3, [sp, #4]
 800f13c:	6120      	str	r0, [r4, #16]
 800f13e:	b15b      	cbz	r3, 800f158 <__smakebuf_r+0x74>
 800f140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f144:	4630      	mov	r0, r6
 800f146:	f000 f889 	bl	800f25c <_isatty_r>
 800f14a:	b128      	cbz	r0, 800f158 <__smakebuf_r+0x74>
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	f023 0303 	bic.w	r3, r3, #3
 800f152:	f043 0301 	orr.w	r3, r3, #1
 800f156:	81a3      	strh	r3, [r4, #12]
 800f158:	89a0      	ldrh	r0, [r4, #12]
 800f15a:	4305      	orrs	r5, r0
 800f15c:	81a5      	strh	r5, [r4, #12]
 800f15e:	e7cd      	b.n	800f0fc <__smakebuf_r+0x18>
 800f160:	0800e3d9 	.word	0x0800e3d9

0800f164 <__malloc_lock>:
 800f164:	4801      	ldr	r0, [pc, #4]	; (800f16c <__malloc_lock+0x8>)
 800f166:	f7ff ba09 	b.w	800e57c <__retarget_lock_acquire_recursive>
 800f16a:	bf00      	nop
 800f16c:	2000220c 	.word	0x2000220c

0800f170 <__malloc_unlock>:
 800f170:	4801      	ldr	r0, [pc, #4]	; (800f178 <__malloc_unlock+0x8>)
 800f172:	f7ff ba04 	b.w	800e57e <__retarget_lock_release_recursive>
 800f176:	bf00      	nop
 800f178:	2000220c 	.word	0x2000220c

0800f17c <_free_r>:
 800f17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f17e:	2900      	cmp	r1, #0
 800f180:	d044      	beq.n	800f20c <_free_r+0x90>
 800f182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f186:	9001      	str	r0, [sp, #4]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f1a1 0404 	sub.w	r4, r1, #4
 800f18e:	bfb8      	it	lt
 800f190:	18e4      	addlt	r4, r4, r3
 800f192:	f7ff ffe7 	bl	800f164 <__malloc_lock>
 800f196:	4a1e      	ldr	r2, [pc, #120]	; (800f210 <_free_r+0x94>)
 800f198:	9801      	ldr	r0, [sp, #4]
 800f19a:	6813      	ldr	r3, [r2, #0]
 800f19c:	b933      	cbnz	r3, 800f1ac <_free_r+0x30>
 800f19e:	6063      	str	r3, [r4, #4]
 800f1a0:	6014      	str	r4, [r2, #0]
 800f1a2:	b003      	add	sp, #12
 800f1a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1a8:	f7ff bfe2 	b.w	800f170 <__malloc_unlock>
 800f1ac:	42a3      	cmp	r3, r4
 800f1ae:	d908      	bls.n	800f1c2 <_free_r+0x46>
 800f1b0:	6825      	ldr	r5, [r4, #0]
 800f1b2:	1961      	adds	r1, r4, r5
 800f1b4:	428b      	cmp	r3, r1
 800f1b6:	bf01      	itttt	eq
 800f1b8:	6819      	ldreq	r1, [r3, #0]
 800f1ba:	685b      	ldreq	r3, [r3, #4]
 800f1bc:	1949      	addeq	r1, r1, r5
 800f1be:	6021      	streq	r1, [r4, #0]
 800f1c0:	e7ed      	b.n	800f19e <_free_r+0x22>
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	b10b      	cbz	r3, 800f1cc <_free_r+0x50>
 800f1c8:	42a3      	cmp	r3, r4
 800f1ca:	d9fa      	bls.n	800f1c2 <_free_r+0x46>
 800f1cc:	6811      	ldr	r1, [r2, #0]
 800f1ce:	1855      	adds	r5, r2, r1
 800f1d0:	42a5      	cmp	r5, r4
 800f1d2:	d10b      	bne.n	800f1ec <_free_r+0x70>
 800f1d4:	6824      	ldr	r4, [r4, #0]
 800f1d6:	4421      	add	r1, r4
 800f1d8:	1854      	adds	r4, r2, r1
 800f1da:	42a3      	cmp	r3, r4
 800f1dc:	6011      	str	r1, [r2, #0]
 800f1de:	d1e0      	bne.n	800f1a2 <_free_r+0x26>
 800f1e0:	681c      	ldr	r4, [r3, #0]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	6053      	str	r3, [r2, #4]
 800f1e6:	4421      	add	r1, r4
 800f1e8:	6011      	str	r1, [r2, #0]
 800f1ea:	e7da      	b.n	800f1a2 <_free_r+0x26>
 800f1ec:	d902      	bls.n	800f1f4 <_free_r+0x78>
 800f1ee:	230c      	movs	r3, #12
 800f1f0:	6003      	str	r3, [r0, #0]
 800f1f2:	e7d6      	b.n	800f1a2 <_free_r+0x26>
 800f1f4:	6825      	ldr	r5, [r4, #0]
 800f1f6:	1961      	adds	r1, r4, r5
 800f1f8:	428b      	cmp	r3, r1
 800f1fa:	bf04      	itt	eq
 800f1fc:	6819      	ldreq	r1, [r3, #0]
 800f1fe:	685b      	ldreq	r3, [r3, #4]
 800f200:	6063      	str	r3, [r4, #4]
 800f202:	bf04      	itt	eq
 800f204:	1949      	addeq	r1, r1, r5
 800f206:	6021      	streq	r1, [r4, #0]
 800f208:	6054      	str	r4, [r2, #4]
 800f20a:	e7ca      	b.n	800f1a2 <_free_r+0x26>
 800f20c:	b003      	add	sp, #12
 800f20e:	bd30      	pop	{r4, r5, pc}
 800f210:	20002210 	.word	0x20002210

0800f214 <_read_r>:
 800f214:	b538      	push	{r3, r4, r5, lr}
 800f216:	4d07      	ldr	r5, [pc, #28]	; (800f234 <_read_r+0x20>)
 800f218:	4604      	mov	r4, r0
 800f21a:	4608      	mov	r0, r1
 800f21c:	4611      	mov	r1, r2
 800f21e:	2200      	movs	r2, #0
 800f220:	602a      	str	r2, [r5, #0]
 800f222:	461a      	mov	r2, r3
 800f224:	f000 f84a 	bl	800f2bc <_read>
 800f228:	1c43      	adds	r3, r0, #1
 800f22a:	d102      	bne.n	800f232 <_read_r+0x1e>
 800f22c:	682b      	ldr	r3, [r5, #0]
 800f22e:	b103      	cbz	r3, 800f232 <_read_r+0x1e>
 800f230:	6023      	str	r3, [r4, #0]
 800f232:	bd38      	pop	{r3, r4, r5, pc}
 800f234:	20002218 	.word	0x20002218

0800f238 <_fstat_r>:
 800f238:	b538      	push	{r3, r4, r5, lr}
 800f23a:	4d07      	ldr	r5, [pc, #28]	; (800f258 <_fstat_r+0x20>)
 800f23c:	2300      	movs	r3, #0
 800f23e:	4604      	mov	r4, r0
 800f240:	4608      	mov	r0, r1
 800f242:	4611      	mov	r1, r2
 800f244:	602b      	str	r3, [r5, #0]
 800f246:	f000 f821 	bl	800f28c <_fstat>
 800f24a:	1c43      	adds	r3, r0, #1
 800f24c:	d102      	bne.n	800f254 <_fstat_r+0x1c>
 800f24e:	682b      	ldr	r3, [r5, #0]
 800f250:	b103      	cbz	r3, 800f254 <_fstat_r+0x1c>
 800f252:	6023      	str	r3, [r4, #0]
 800f254:	bd38      	pop	{r3, r4, r5, pc}
 800f256:	bf00      	nop
 800f258:	20002218 	.word	0x20002218

0800f25c <_isatty_r>:
 800f25c:	b538      	push	{r3, r4, r5, lr}
 800f25e:	4d06      	ldr	r5, [pc, #24]	; (800f278 <_isatty_r+0x1c>)
 800f260:	2300      	movs	r3, #0
 800f262:	4604      	mov	r4, r0
 800f264:	4608      	mov	r0, r1
 800f266:	602b      	str	r3, [r5, #0]
 800f268:	f000 f818 	bl	800f29c <_isatty>
 800f26c:	1c43      	adds	r3, r0, #1
 800f26e:	d102      	bne.n	800f276 <_isatty_r+0x1a>
 800f270:	682b      	ldr	r3, [r5, #0]
 800f272:	b103      	cbz	r3, 800f276 <_isatty_r+0x1a>
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	bd38      	pop	{r3, r4, r5, pc}
 800f278:	20002218 	.word	0x20002218

0800f27c <_close>:
 800f27c:	4b02      	ldr	r3, [pc, #8]	; (800f288 <_close+0xc>)
 800f27e:	2258      	movs	r2, #88	; 0x58
 800f280:	601a      	str	r2, [r3, #0]
 800f282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f286:	4770      	bx	lr
 800f288:	20002218 	.word	0x20002218

0800f28c <_fstat>:
 800f28c:	4b02      	ldr	r3, [pc, #8]	; (800f298 <_fstat+0xc>)
 800f28e:	2258      	movs	r2, #88	; 0x58
 800f290:	601a      	str	r2, [r3, #0]
 800f292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f296:	4770      	bx	lr
 800f298:	20002218 	.word	0x20002218

0800f29c <_isatty>:
 800f29c:	4b02      	ldr	r3, [pc, #8]	; (800f2a8 <_isatty+0xc>)
 800f29e:	2258      	movs	r2, #88	; 0x58
 800f2a0:	601a      	str	r2, [r3, #0]
 800f2a2:	2000      	movs	r0, #0
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	20002218 	.word	0x20002218

0800f2ac <_lseek>:
 800f2ac:	4b02      	ldr	r3, [pc, #8]	; (800f2b8 <_lseek+0xc>)
 800f2ae:	2258      	movs	r2, #88	; 0x58
 800f2b0:	601a      	str	r2, [r3, #0]
 800f2b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2b6:	4770      	bx	lr
 800f2b8:	20002218 	.word	0x20002218

0800f2bc <_read>:
 800f2bc:	4b02      	ldr	r3, [pc, #8]	; (800f2c8 <_read+0xc>)
 800f2be:	2258      	movs	r2, #88	; 0x58
 800f2c0:	601a      	str	r2, [r3, #0]
 800f2c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2c6:	4770      	bx	lr
 800f2c8:	20002218 	.word	0x20002218

0800f2cc <_sbrk>:
 800f2cc:	4a04      	ldr	r2, [pc, #16]	; (800f2e0 <_sbrk+0x14>)
 800f2ce:	6811      	ldr	r1, [r2, #0]
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	b909      	cbnz	r1, 800f2d8 <_sbrk+0xc>
 800f2d4:	4903      	ldr	r1, [pc, #12]	; (800f2e4 <_sbrk+0x18>)
 800f2d6:	6011      	str	r1, [r2, #0]
 800f2d8:	6810      	ldr	r0, [r2, #0]
 800f2da:	4403      	add	r3, r0
 800f2dc:	6013      	str	r3, [r2, #0]
 800f2de:	4770      	bx	lr
 800f2e0:	2000221c 	.word	0x2000221c
 800f2e4:	20002220 	.word	0x20002220

0800f2e8 <_write>:
 800f2e8:	4b02      	ldr	r3, [pc, #8]	; (800f2f4 <_write+0xc>)
 800f2ea:	2258      	movs	r2, #88	; 0x58
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2f2:	4770      	bx	lr
 800f2f4:	20002218 	.word	0x20002218

0800f2f8 <_init>:
 800f2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2fa:	bf00      	nop
 800f2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2fe:	bc08      	pop	{r3}
 800f300:	469e      	mov	lr, r3
 800f302:	4770      	bx	lr

0800f304 <_fini>:
 800f304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f306:	bf00      	nop
 800f308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f30a:	bc08      	pop	{r3}
 800f30c:	469e      	mov	lr, r3
 800f30e:	4770      	bx	lr
